((e,t)=>{"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).composerize=t()})(this,function(){function T(e,t,r){(t=(e=>"symbol"==typeof(e=((e,t)=>{if("object"!=typeof e||!e)return e;var r=e[Symbol.toPrimitive];if(void 0===r)return("string"===t?String:Number)(e);if("object"!=typeof(r=r.call(e,t)))return r;throw new TypeError("@@toPrimitive must return a primitive value.")})(e,"string"))?e:e+"")(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r}function R(t,e){var r,s=Object.keys(t);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(t),e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),s.push.apply(s,r)),s}function D(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?R(Object(r),!0).forEach(function(e){T(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):R(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}function V(e,t){if(null==e)return{};var r,s=((e,t)=>{if(null==e)return{};var r,s={};for(r in e)if({}.hasOwnProperty.call(e,r)){if(-1!==t.indexOf(r))continue;s[r]=e[r]}return s})(e,t);if(Object.getOwnPropertySymbols)for(var n=Object.getOwnPropertySymbols(e),i=0;i<n.length;i++)r=n[i],-1===t.indexOf(r)&&{}.propertyIsEnumerable.call(e,r)&&(s[r]=e[r]);return s}var q="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{};var e=q.performance||{},G=(e.now||e.mozNow||e.msNow||e.oNow||e.webkitNow,{env:{},cwd:function(){return"/"}});function K(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function B(r){var t,s;return r.__esModule?r:("function"==typeof(t=r.default)?(s=function e(){return this instanceof e?Reflect.construct(t,arguments,this.constructor):t.apply(this,arguments)}).prototype=t.prototype:s={},Object.defineProperty(s,"__esModule",{value:!0}),Object.keys(r).forEach(function(e){var t=Object.getOwnPropertyDescriptor(r,e);Object.defineProperty(s,e,t.get?t:{enumerable:!0,get:function(){return r[e]}})}),s)}var U={exports:{}};e=(e,t)=>{if("string"!=typeof e&&!Array.isArray(e))throw new TypeError("Expected the input to be `string | string[]`");t=Object.assign({pascalCase:!1},t);return 0===(e=Array.isArray(e)?e.map(e=>e.trim()).filter(e=>e.length).join("-"):e.trim()).length?"":1===e.length?t.pascalCase?e.toUpperCase():e.toLowerCase():(e=(e=e!==e.toLowerCase()?(t=>{let r=!1,s=!1,n=!1;for(let e=0;e<t.length;e++){var i=t[e];r&&/[a-zA-Z]/.test(i)&&i.toUpperCase()===i?(t=t.slice(0,e)+"-"+t.slice(e),r=!1,n=s,s=!0,e++):s&&n&&/[a-zA-Z]/.test(i)&&i.toLowerCase()===i?(t=t.slice(0,e-1)+"-"+t.slice(e-1),n=s,s=!1,r=!0):(r=i.toLowerCase()===i&&i.toUpperCase()!==i,n=s,s=i.toUpperCase()===i&&i.toLowerCase()!==i)}return t})(e):e).replace(/^[_.\- ]+/,"").toLowerCase().replace(/[_.\- ]+(\w|$)/g,(e,t)=>t.toUpperCase()).replace(/\d+(\w|$)/g,e=>e.toUpperCase()),e=e,t.pascalCase?e.charAt(0).toUpperCase()+e.slice(1):e)},U.exports=e,U.exports.default=e,e=U.exports;function F(e,t){for(var r=0,s=e.length-1;0<=s;s--){var n=e[s];"."===n?e.splice(s,1):".."===n?(e.splice(s,1),r++):r&&(e.splice(s,1),r--)}if(t)for(;r--;)e.unshift("..");return e}function z(e){return J.exec(e).slice(1)}var J=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;function H(){for(var e="",t=!1,r=arguments.length-1;-1<=r&&!t;r--){var s=0<=r?arguments[r]:"/";if("string"!=typeof s)throw new TypeError("Arguments to path.resolve must be strings");s&&(e=s+"/"+e,t="/"===s.charAt(0))}return(t?"/":"")+(e=F(se(e.split("/"),function(e){return!!e}),!t).join("/"))||"."}function W(e){var t=Y(e),r="/"===ne(e,-1);return(e=(e=F(se(e.split("/"),function(e){return!!e}),!t).join("/"))||t?e:".")&&r&&(e+="/"),(t?"/":"")+e}function Y(e){return"/"===e.charAt(0)}function Q(){return W(se(Array.prototype.slice.call(arguments,0),function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))}function Z(e,t){function r(e){for(var t=0;t<e.length&&""===e[t];t++);for(var r=e.length-1;0<=r&&""===e[r];r--);return r<t?[]:e.slice(t,r-t+1)}e=H(e).substr(1),t=H(t).substr(1);for(var s=r(e.split("/")),n=r(t.split("/")),i=Math.min(s.length,n.length),a=i,o=0;o<i;o++)if(s[o]!==n[o]){a=o;break}for(var l=[],o=a;o<s.length;o++)l.push("..");return(l=l.concat(n.slice(a))).join("/")}function X(e){var e=z(e),t=e[0],e=e[1];return t||e?t+(e=e&&e.substr(0,e.length-1)):"."}function ee(e,t){e=z(e)[2];return e=t&&e.substr(-1*t.length)===t?e.substr(0,e.length-t.length):e}function te(e){return z(e)[3]}var re={extname:te,basename:ee,dirname:X,sep:"/",delimiter:":",relative:Z,join:Q,isAbsolute:Y,normalize:W,resolve:H};function se(e,t){if(e.filter)return e.filter(t);for(var r=[],s=0;s<e.length;s++)t(e[s],s,e)&&r.push(e[s]);return r}var ne="b"==="ab".substr(-1)?function(e,t,r){return e.substr(t,r)}:function(e,t,r){return t<0&&(t=e.length+t),e.substr(t,r)},re=B(Object.freeze({__proto__:null,basename:ee,default:re,delimiter:":",dirname:X,extname:te,isAbsolute:Y,join:Q,normalize:W,relative:Z,resolve:H,sep:"/"}));function ie(e){return null!=e&&(!!e._isBuffer||ae(e)||"function"==typeof(e=e).readFloatLE&&"function"==typeof e.slice&&ae(e.slice(0,0)))}function ae(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}var oe="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;function r(){}r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e},le=/%[sdj%]/g;function ce(e){if(!Ee(e)){for(var t=[],r=0;r<arguments.length;r++)t.push(u(arguments[r]));return t.join(" ")}for(var r=1,s=arguments,n=s.length,i=String(e).replace(le,function(e){if("%%"===e)return"%";if(n<=r)return e;switch(e){case"%s":return String(s[r++]);case"%d":return Number(s[r++]);case"%j":try{return JSON.stringify(s[r++])}catch(e){return"[Circular]"}default:return e}}),a=s[r];r<n;a=s[++r])_e(a)||!Pe(a)?i+=" "+a:i+=" "+u(a);return i}function ue(e,t){var r;return p(q.process)?function(){return ue(e,t).apply(this,arguments)}:!0===G.noDeprecation?e:(r=!1,function(){if(!r){if(G.throwDeprecation)throw new Error(t);G.traceDeprecation?console.trace(t):console.error(t),r=!0}return e.apply(this,arguments)})}var pe,de={};function fe(t){return p(pe)&&(pe=G.env.NODE_DEBUG||""),t=t.toUpperCase(),de[t]||(new RegExp("\\b"+t+"\\b","i").test(pe)?de[t]=function(){var e=ce.apply(null,arguments);console.error("%s %d: %s",t,0,e)}:de[t]=function(){}),de[t]}function u(e,t){var r={seen:[],stylize:me};return 3<=arguments.length&&(r.depth=arguments[2]),4<=arguments.length&&(r.colors=arguments[3]),we(t)?r.showHidden=t:t&&Re(r,t),p(r.showHidden)&&(r.showHidden=!1),p(r.depth)&&(r.depth=2),p(r.colors)&&(r.colors=!1),p(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=he),ye(r,e,r.depth)}function he(e,t){t=u.styles[t];return t?"["+u.colors[t][0]+"m"+e+"["+u.colors[t][1]+"m":e}function me(e,t){return e}function ye(t,r,s){if(t.customInspect&&r&&xe(r.inspect)&&r.inspect!==u&&(!r.constructor||r.constructor.prototype!==r))return Ee(e=r.inspect(s,t))?e:ye(t,e,s);var e=((e,t)=>{var r;return p(t)?e.stylize("undefined","undefined"):Ee(t)?(r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'",e.stylize(r,"string")):ke(t)?e.stylize(""+t,"number"):we(t)?e.stylize(""+t,"boolean"):_e(t)?e.stylize("null","null"):void 0})(t,r);if(e)return e;var n,e=Object.keys(r),i=(n={},e.forEach(function(e,t){n[e]=!0}),n);if(t.showHidden&&(e=Object.getOwnPropertyNames(r)),Ne(r)&&(0<=e.indexOf("message")||0<=e.indexOf("description")))return ge(r);if(0===e.length){if(xe(r))return a=r.name?": "+r.name:"",t.stylize("[Function"+a+"]","special");if(Oe(r))return t.stylize(RegExp.prototype.toString.call(r),"regexp");if(je(r))return t.stylize(Date.prototype.toString.call(r),"date");if(Ne(r))return ge(r)}var a="",o=!1,l=["{","}"];if(be(r)&&(o=!0,l=["[","]"]),xe(r)&&(a=" [Function"+(r.name?": "+r.name:"")+"]"),Oe(r)&&(a=" "+RegExp.prototype.toString.call(r)),je(r)&&(a=" "+Date.prototype.toUTCString.call(r)),Ne(r)&&(a=" "+ge(r)),0===e.length&&(!o||0==r.length))return l[0]+a+l[1];if(s<0)return Oe(r)?t.stylize(RegExp.prototype.toString.call(r),"regexp"):t.stylize("[Object]","special");t.seen.push(r),c=o?((t,r,s,n,e)=>{for(var i=[],a=0,o=r.length;a<o;++a)De(r,String(a))?i.push(ve(t,r,s,n,String(a),!0)):i.push("");return e.forEach(function(e){e.match(/^\d+$/)||i.push(ve(t,r,s,n,e,!0))}),i})(t,r,s,i,e):e.map(function(e){return ve(t,r,s,i,e,o)}),t.seen.pop();var c;return 60<c.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)?l[0]+(""===a?"":a+"\n ")+" "+c.join(",\n  ")+" "+l[1]:l[0]+a+" "+c.join(", ")+" "+l[1]}function ge(e){return"["+Error.prototype.toString.call(e)+"]"}function ve(e,t,r,s,n,i){var a,o,t=Object.getOwnPropertyDescriptor(t,n)||{value:t[n]};if(t.get?o=t.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):t.set&&(o=e.stylize("[Setter]","special")),De(s,n)||(a="["+n+"]"),o||(e.seen.indexOf(t.value)<0?-1<(o=ye(e,t.value,_e(r)?null:r-1)).indexOf("\n")&&(o=i?o.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+o.split("\n").map(function(e){return"   "+e}).join("\n")):o=e.stylize("[Circular]","special")),p(a)){if(i&&n.match(/^\d+$/))return o;a=(a=JSON.stringify(""+n)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),e.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),e.stylize(a,"string"))}return a+": "+o}function be(e){return Array.isArray(e)}function we(e){return"boolean"==typeof e}function _e(e){return null===e}function $e(e){return null==e}function ke(e){return"number"==typeof e}function Ee(e){return"string"==typeof e}function Se(e){return"symbol"==typeof e}function p(e){return void 0===e}function Oe(e){return Pe(e)&&"[object RegExp]"===Te(e)}function Pe(e){return"object"==typeof e&&null!==e}function je(e){return Pe(e)&&"[object Date]"===Te(e)}function Ne(e){return Pe(e)&&("[object Error]"===Te(e)||e instanceof Error)}function xe(e){return"function"==typeof e}function Ae(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e}function Ie(e){return ie(e)}function Te(e){return Object.prototype.toString.call(e)}function Ce(e){return e<10?"0"+e.toString(10):e.toString(10)}u.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},u.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"};var Me=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];function Le(){var e,t;console.log("%s - %s",(e=new Date,t=[Ce(e.getHours()),Ce(e.getMinutes()),Ce(e.getSeconds())].join(":"),[e.getDate(),Me[e.getMonth()],t].join(" ")),ce.apply(null,arguments))}function Re(e,t){if(t&&Pe(t))for(var r=Object.keys(t),s=r.length;s--;)e[r[s]]=t[r[s]];return e}function De(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var Ve=e,qe=function(e,t){if("string"!=typeof e)throw new TypeError("Expected a string");return e.replace(/([a-z\d])([A-Z])/g,"$1"+(t=void 0===t?"_":t)+"$2").replace(/([A-Z]+)([A-Z][a-z\d]+)/g,"$1"+t+"$2").toLowerCase()},Ke=re,Be=function(e){if(Array.isArray(e))return e.map(e=>"string"!=typeof e?e+"":e);e=e.trim();for(var t,r=0,s=null,n=null,i=[],a=0;a<e.length;a++)t=s," "!==(s=e.charAt(a))||n?(s===n?n=null:"'"!==s&&'"'!==s||(n=n||s),i[r]||(i[r]=""),i[r]+=s):" "!==t&&r++;return i},Ue=B(Object.freeze({__proto__:null,_extend:Re,debuglog:fe,default:{inherits:oe,_extend:Re,log:Le,isBuffer:Ie,isPrimitive:Ae,isFunction:xe,isError:Ne,isDate:je,isObject:Pe,isRegExp:Oe,isUndefined:p,isSymbol:Se,isString:Ee,isNumber:ke,isNullOrUndefined:$e,isNull:_e,isBoolean:we,isArray:be,inspect:u,deprecate:ue,format:ce,debuglog:fe},deprecate:ue,format:ce,inherits:oe,inspect:u,isArray:be,isBoolean:we,isBuffer:Ie,isDate:je,isError:Ne,isFunction:xe,isNull:_e,isNullOrUndefined:$e,isNumber:ke,isObject:Pe,isPrimitive:Ae,isRegExp:Oe,isString:Ee,isSymbol:Se,isUndefined:p,log:Le}));function Fe(e,t){t=t||{},e=Be(e);for(var n,i,r,s,a,o,l=(t=>{var r=[],e=!0,s={};for(Object.keys(t).forEach(function(e){r.push([].concat(t[e],e))});e;){e=!1;for(var n=0;n<r.length;n++)for(var i=n+1;i<r.length;i++)if(r[n].filter(function(e){return-1!==r[i].indexOf(e)}).length){r[n]=r[n].concat(r[i]),r.splice(i,1),e=!0;break}}return r.forEach(function(e){e=e.filter(function(e,t,r){return r.indexOf(e)===t}),s[e.pop()]=e}),s})(t.alias||{}),c=Object.assign({"short-option-groups":!0,"camel-case-expansion":!0,"dot-notation":!0,"parse-numbers":!0,"boolean-negation":!0,"negation-prefix":"no-","duplicate-arguments-array":!0,"flatten-duplicate-arrays":!0,"populate--":!1,"combine-arrays":!1,"set-placeholder-key":!1,"halt-at-non-option":!1,"strip-aliased":!1,"strip-dashed":!1},t.configuration),u=t.default||{},L=t.configObjects||[],p=t.envPrefix,R=c["populate--"],D=R?"--":"_",d={},V=t.__||Ue.format,f=null,h={aliases:{},arrays:{},bools:{},strings:{},numbers:{},counts:{},normalize:{},configs:{},defaulted:{},nargs:{},coercions:{},keys:[]},m=/^-[0-9]+(\.[0-9]+)?/,q=new RegExp("^--"+c["negation-prefix"]+"(.+)"),y=([].concat(t.array).filter(Boolean).forEach(function(e){var t=e.key||e,e=Object.keys(e).map(function(e){return{boolean:"bools",string:"strings",number:"numbers"}[e]}).filter(Boolean).pop();e&&(h[e][t]=!0),h.arrays[t]=!0,h.keys.push(t)}),[].concat(t.boolean).filter(Boolean).forEach(function(e){h.bools[e]=!0,h.keys.push(e)}),[].concat(t.string).filter(Boolean).forEach(function(e){h.strings[e]=!0,h.keys.push(e)}),[].concat(t.number).filter(Boolean).forEach(function(e){h.numbers[e]=!0,h.keys.push(e)}),[].concat(t.count).filter(Boolean).forEach(function(e){h.counts[e]=!0,h.keys.push(e)}),[].concat(t.normalize).filter(Boolean).forEach(function(e){h.normalize[e]=!0,h.keys.push(e)}),Object.keys(t.narg||{}).forEach(function(e){h.nargs[e]=t.narg[e],h.keys.push(e)}),Object.keys(t.coerce||{}).forEach(function(e){h.coercions[e]=t.coerce[e],h.keys.push(e)}),Array.isArray(t.config)||"string"==typeof t.config?[].concat(t.config).filter(Boolean).forEach(function(e){h.configs[e]=!0}):Object.keys(t.config||{}).forEach(function(e){h.configs[e]=t.config[e]}),[t.key,l,t.default,h.arrays].forEach(function(e){Object.keys(e||{}).forEach(function(r){h.aliases[r]||(h.aliases[r]=[].concat(l[r]||[]),h.aliases[r].concat(r).forEach(function(e){/-/.test(e)&&c["camel-case-expansion"]&&(e=Ve(e))!==r&&-1===h.aliases[r].indexOf(e)&&(h.aliases[r].push(e),d[e]=!0)}),h.aliases[r].concat(r).forEach(function(e){1<e.length&&/[A-Z]/.test(e)&&c["camel-case-expansion"]&&(e=qe(e,"-"))!==r&&-1===h.aliases[r].indexOf(e)&&(h.aliases[r].push(e),d[e]=!0)}),h.aliases[r].forEach(function(t){h.aliases[t]=[r].concat(h.aliases[r].filter(function(e){return t!==e}))}))})}),Object.keys(u).forEach(function(t){(h.aliases[t]||[]).forEach(function(e){u[e]=u[t]})}),{_:[]}),g=(Object.keys(h.bools).forEach(function(e){Object.prototype.hasOwnProperty.call(u,e)&&(N(e,u[e]),[].concat(h.aliases[e]||[],e).forEach(function(e){h.defaulted[e]=!0}))}),[]),v=0;v<e.length;v++){var b,w,_,$,k=e[v];if(k.match(/^--.+=/)||!c["short-option-groups"]&&k.match(/^-.+=/))T((w=k.match(/^--?([^=]+)=([\s\S]*)$/))[1],h.nargs)?(e.splice(v+1,0,w[2]),v=P(v,w[1],e)):T(w[1],h.arrays)&&e.length>v+1?(e.splice(v+1,0,w[2]),v=j(v,w[1],e)):N(w[1],w[2]);else if(k.match(q)&&c["boolean-negation"])N(b=k.match(q)[1],!1);else if(k.match(/^--.+/)||!c["short-option-groups"]&&k.match(/^-[^-]+/))T(b=k.match(/^--?(.+)/)[1],h.nargs)?v=P(v,b,e):T(b,h.arrays)&&e.length>v+1?v=j(v,b,e):!(void 0===(_=0===h.nargs[b]?void 0:e[v+1])||_.match(/^-/)&&!_.match(m)||T(b,h.bools)||T(b,h.counts))||/^(true|false)$/.test(_)?(N(b,_),v++):N(b,C(b));else if(k.match(/^-.\..+=/))N((w=k.match(/^-([^=]+)=([\s\S]*)$/))[1],w[2]);else if(k.match(/^-.\..+/))_=e[v+1],b=k.match(/^-(.\..+)/)[1],void 0===_||_.match(/^-/)||T(b,h.bools)||T(b,h.counts)?N(b,C(b)):(N(b,_),v++);else if(k.match(/^-[^-]+/)&&!k.match(m)){for(var E=k.slice(1,-1).split(""),S=!1,O=0;O<E.length;O++){if(_=k.slice(O+2),E[O+1]&&"="===E[O+1]){$=k.slice(O+3),T(b=E[O],h.nargs)?(e.splice(v+1,0,$),v=P(v,b,e)):T(b,h.arrays)&&e.length>v+1?(e.splice(v+1,0,$),v=j(v,b,e)):N(b,$),S=!0;break}if("-"===_)N(E[O],_);else{if(/[A-Za-z]/.test(E[O])&&/^-?\d+(\.\d*)?(e-?\d+)?$/.test(_)){N(E[O],_),S=!0;break}if(E[O+1]&&E[O+1].match(/\W/)){N(E[O],_),S=!0;break}N(E[O],C(E[O]))}}b=k.slice(-1)[0],S||"-"===b||(T(b,h.nargs)?v=P(v,b,e):T(b,h.arrays)&&e.length>v+1?v=j(v,b,e):!(void 0===(_=e[v+1])||/^(-|--)[^-]/.test(_)&&!_.match(m)||T(b,h.bools)||T(b,h.counts))||/^(true|false)$/.test(_)?(N(b,_),v++):N(b,C(b)))}else{if("--"===k){g=e.slice(v+1);break}if(c["halt-at-non-option"]){g=e.slice(v);break}y._.push(B("_",k))}}function P(e,t,r){for(var s=T(t,h.nargs),n=0,i=e+1;i<r.length&&!r[i].match(/^-[^0-9]/);i++)n++;n<s&&(f=Error(V("Not enough arguments following: %s",t)));var a=Math.min(n,s);for(i=e+1;i<a+e+1;i++)N(t,r[i]);return e+a}function j(e,t,r){for(var s=e+1,n=[],i=0<e,a=e+1;a<r.length;a++){if(/^-/.test(r[a])&&!m.test(r[a])){a===s&&N(t,z("array")),i=!0;break}e=a,n.push(r[a])}return i?N(t,n.map(function(e){return K(t,e)})):n.forEach(function(e){N(t,e)}),e}function N(e,t){[].concat(h.aliases[e]||[],e).forEach(function(e){delete h.defaulted[e]}),/-/.test(e)&&c["camel-case-expansion"]&&(r=e.split(".").map(function(e){return Ve(e)}).join("."),function e(t,r){h.aliases[t]&&h.aliases[t].length||(h.aliases[t]=[r],d[r]=!0);h.aliases[r]&&h.aliases[r].length||e(r,t)}(e,r));var r,s=K(e,t),n=e.split(".");I(y,n,s),h.aliases[e]&&h.aliases[e].forEach&&h.aliases[e].forEach(function(e){e=e.split("."),I(y,e,s)}),1<n.length&&c["dot-notation"]&&(h.aliases[n[0]]||[]).forEach(function(e){e=e.split(".");var t=[].concat(n);t.shift(),e=e.concat(t),I(y,e,s)}),T(e,h.normalize)&&!T(e,h.arrays)&&[e].concat(h.aliases[e]||[]).forEach(function(e){y.__defineSetter__(e,function(e){t=Ke.normalize(e)}),y.__defineGetter__(e,function(){return"string"==typeof t?Ke.normalize(t):t})})}function K(e,t){"string"!=typeof t||"'"!==t[0]&&'"'!==t[0]||t[t.length-1]!==t[0]||(t=t.substring(1,t.length-1));var r=B(e,t=(T(e,h.bools)||T(e,h.counts))&&"string"==typeof t?"true"===t:t);return T(e,h.counts)&&(M(r)||"boolean"==typeof r)&&(r=ze),r=T(e,h.normalize)&&T(e,h.arrays)?Array.isArray(t)?t.map(Ke.normalize):Ke.normalize(t):r}function B(e,t){var r;return t=T(e,h.strings)||T(e,h.coercions)||!(null!=(r=t)&&("number"==typeof r||!!/^0x[0-9a-f]+$/i.test(r)||!(1<r.length&&"0"===r[0])&&/^[-]?(?:\d+(?:\.\d*)?|\.\d+)(e[-+]?\d+)?$/.test(r))&&c["parse-numbers"]&&Number.isSafeInteger(Math.floor(t))||!M(t)&&T(e,h.numbers))?t:Number(t)}function x(r,s){Object.keys(r).forEach(function(e){var t=r[e],e=s?s+"."+e:e;"object"==typeof t&&null!==t&&!Array.isArray(t)&&c["dot-notation"]?x(t,e):(!A(y,e.split("."))||h.defaulted[e]||h.arrays[e]&&c["combine-arrays"])&&N(e,t)})}function U(r,s){var n;void 0!==p&&(n="string"==typeof p?p:"",Object.keys(G.env).forEach(function(e){var t;""!==n&&0!==e.lastIndexOf(n,0)||(t=e.split("__").map(function(e,t){return 0===t&&(e=e.substring(n.length)),Ve(e)}),!(s&&h.configs[t.join(".")]||!s))||A(r,t)&&!h.defaulted[t.join(".")]||N(t.join("."),G.env[e])}))}function F(r,e,s){Object.keys(s).forEach(function(t){A(r,t.split("."))||(I(r,t.split("."),s[t]),(e[t]||[]).forEach(function(e){A(r,e.split("."))||I(r,e.split("."),s[t])}))})}function A(e,t){var r=e,e=((t=c["dot-notation"]?t:[t.join(".")]).slice(0,-1).forEach(function(e){r=r[e]||{}}),t[t.length-1]);return"object"==typeof r&&e in r}function I(e,t,r){var s=e,e=((t=c["dot-notation"]?t:[t.join(".")]).slice(0,-1).forEach(function(e,t){e=Je(e),"object"==typeof s&&void 0===s[e]&&(s[e]={}),s="object"!=typeof s[e]||Array.isArray(s[e])?(Array.isArray(s[e])?s[e].push({}):s[e]=[s[e],{}],s[e][s[e].length-1]):s[e]}),Je(t[t.length-1])),n=T(t.join("."),h.arrays),i=Array.isArray(r);let a=c["duplicate-arguments-array"];!a&&T(e,h.nargs)&&(a=!0,!M(s[e])&&1===h.nargs[e]||Array.isArray(s[e])&&s[e].length===h.nargs[e])&&(s[e]=void 0),r===ze?s[e]=ze(s[e]):Array.isArray(s[e])?a&&n&&i?s[e]=c["flatten-duplicate-arrays"]?s[e].concat(r):(Array.isArray(s[e][0])?s[e]:[s[e]]).concat([r]):a||Boolean(n)!==Boolean(i)?s[e]=s[e].concat([r]):s[e]=r:void 0===s[e]&&n?s[e]=i?r:[r]:a&&!(void 0===s[e]||T(e,h.bools)||T(t.join("."),h.bools)||T(e,h.counts))?s[e]=[s[e],r]:s[e]=r}function T(e,t){var r=!1;return[].concat(h.aliases[e]||[],e).forEach(function(e){t[e]&&(r=t[e])}),r}function C(e){return!T(e,h.bools)&&!T(e,h.counts)&&""+e in u?u[e]:z((e=>{var t="boolean";return T(e,h.strings)?t="string":T(e,h.numbers)?t="number":T(e,h.arrays)&&(t="array"),t})(e))}function z(e){return{boolean:!0,string:"",number:void 0,array:[]}[e]}function M(e){return void 0===e}return U(y,!0),U(y,!1),n=y,F(i={},h.aliases,u),Object.keys(h.configs).forEach(function(t){var r=n[t]||i[t];if(r)try{var s=null,e=Ke.resolve(G.cwd(),r);if("function"==typeof h.configs[t]){try{s=h.configs[t](e)}catch(e){s=e}if(s instanceof Error)return void(f=s)}else s=(e=>{throw new Error('Could not dynamically require "'+e+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')})(e);x(s)}catch(e){n[t]&&(f=Error(V("Invalid JSON config file: %s",r)))}}),void 0!==L&&L.forEach(function(e){x(e)}),F(y,h.aliases,u),r=y,a={},Object.keys(r).forEach(function(e){if(!a.hasOwnProperty(e)&&"function"==typeof(s=T(e,h.coercions)))try{var t=s(r[e]);[].concat(h.aliases[e]||[],e).forEach(e=>{a[e]=r[e]=t})}catch(e){f=e}}),c["set-placeholder-key"]&&(o=y,h.keys.forEach(e=>{~e.indexOf(".")||void 0===o[e]&&(o[e]=void 0)})),Object.keys(h.counts).forEach(function(e){A(y,e.split("."))||N(e,0)}),R&&g.length&&(y[D]=[]),g.forEach(function(e){y[D].push(e)}),c["camel-case-expansion"]&&c["strip-dashed"]&&Object.keys(y).filter(e=>"--"!==e&&e.includes("-")).forEach(e=>{delete y[e]}),c["strip-aliased"]&&[].concat(...Object.keys(l).map(e=>l[e])).forEach(e=>{c["camel-case-expansion"]&&delete y[e.split(".").map(e=>Ve(e)).join(".")],delete y[e]}),{argv:y,error:f,aliases:h.aliases,newAliases:d,configuration:c}}function ze(e){return void 0!==e?e+1:1}function Ge(e,t){return Fe(e.slice(),t).argv}function Je(e){return"__proto__"===e?"___proto___":e}Ge.detailed=function(e,t){return Fe(e.slice(),t)};function He(e){return!(!(t=e)||"object"!=typeof t||(t=e,"[object RegExp]"===(e=Object.prototype.toString.call(t)))||"[object Date]"===e||(e=>e.$$typeof===Ye)(t));var t}var We=K(Ge);var Ye="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function Qe(e,t){return!1!==t.clone&&t.isMergeableObject(e)?Xe(Array.isArray(e)?[]:{},e,t):e}function Ze(e,t,r){return e.concat(t).map(function(e){return Qe(e,r)})}function Xe(e,t,r){(r=r||{}).arrayMerge=r.arrayMerge||Ze,r.isMergeableObject=r.isMergeableObject||He;var s,n,i,a,o=Array.isArray(t);return o===Array.isArray(e)?o?r.arrayMerge(e,t,r):(s=e,n=t,a={},(i=r).isMergeableObject(s)&&Object.keys(s).forEach(function(e){a[e]=Qe(s[e],i)}),Object.keys(n).forEach(function(e){i.isMergeableObject(n[e])&&s[e]?a[e]=Xe(s[e],n[e],i):a[e]=Qe(n[e],i)}),a):Qe(t,r)}Xe.all=function(e,r){if(Array.isArray(e))return e.reduce(function(e,t){return Xe(e,t,r)},{});throw new Error("first argument should be an array")};var et=Xe,e={exports:{}};let tt=Symbol.for("yaml.alias"),rt=Symbol.for("yaml.document"),st=Symbol.for("yaml.map"),nt=Symbol.for("yaml.pair"),d=Symbol.for("yaml.scalar"),it=Symbol.for("yaml.seq"),i=Symbol.for("yaml.node.type"),f=e=>!!e&&"object"==typeof e&&e[i]===tt,at=e=>!!e&&"object"==typeof e&&e[i]===rt,ot=e=>!!e&&"object"==typeof e&&e[i]===st,P=e=>!!e&&"object"==typeof e&&e[i]===nt,$=e=>!!e&&"object"==typeof e&&e[i]===d,lt=e=>!!e&&"object"==typeof e&&e[i]===it;function k(e){if(e&&"object"==typeof e)switch(e[i]){case st:case it:return!0}return!1}function E(e){if(e&&"object"==typeof e)switch(e[i]){case tt:case st:case d:case it:return!0}return!1}let a=Symbol("break visit");re=Symbol("skip children");let o=Symbol("remove node");function l(e,t){t=dt(t);at(e)?ct(null,e.contents,t,Object.freeze([e]))===o&&(e.contents=null):ct(null,e,t,Object.freeze([]))}function ct(e,t,r,s){var n=ft(e,t,r,s);if(E(n)||P(n))return ht(e,s,n),ct(e,n,r,s);if("symbol"!=typeof n)if(k(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){var i=ct(e,t.items[e],r,s);if("number"==typeof i)e=i-1;else{if(i===a)return a;i===o&&(t.items.splice(e,1),--e)}}}else if(P(t)){s=Object.freeze(s.concat(t));e=ct("key",t.key,r,s);if(e===a)return a;e===o&&(t.key=null);e=ct("value",t.value,r,s);if(e===a)return a;e===o&&(t.value=null)}return n}async function ut(e,t){t=dt(t);at(e)?await pt(null,e.contents,t,Object.freeze([e]))===o&&(e.contents=null):await pt(null,e,t,Object.freeze([]))}async function pt(e,t,r,s){var n=await ft(e,t,r,s);if(E(n)||P(n))return ht(e,s,n),pt(e,n,r,s);if("symbol"!=typeof n)if(k(t)){s=Object.freeze(s.concat(t));for(let e=0;e<t.items.length;++e){var i=await pt(e,t.items[e],r,s);if("number"==typeof i)e=i-1;else{if(i===a)return a;i===o&&(t.items.splice(e,1),--e)}}}else if(P(t)){s=Object.freeze(s.concat(t));e=await pt("key",t.key,r,s);if(e===a)return a;e===o&&(t.key=null);e=await pt("value",t.value,r,s);if(e===a)return a;e===o&&(t.value=null)}return n}function dt(e){return"object"==typeof e&&(e.Collection||e.Node||e.Value)?Object.assign({Alias:e.Node,Map:e.Node,Scalar:e.Node,Seq:e.Node},e.Value&&{Map:e.Value,Scalar:e.Value,Seq:e.Value},e.Collection&&{Map:e.Collection,Seq:e.Collection},e):e}function ft(e,t,r,s){return"function"==typeof r?r(e,t,s):ot(t)?r.Map?.(e,t,s):lt(t)?r.Seq?.(e,t,s):P(t)?r.Pair?.(e,t,s):$(t)?r.Scalar?.(e,t,s):f(t)?r.Alias?.(e,t,s):void 0}function ht(e,t,r){t=t[t.length-1];if(k(t))t.items[e]=r;else if(P(t))"key"===e?t.key=r:t.value=r;else{if(!at(t))throw e=f(t)?"alias":"scalar",new Error(`Cannot replace node with ${e} parent`);t.contents=r}}l.BREAK=a,l.SKIP=re,l.REMOVE=o,ut.BREAK=a,ut.SKIP=re,ut.REMOVE=o;let mt={"!":"%21",",":"%2C","[":"%5B","]":"%5D","{":"%7B","}":"%7D"};class c{constructor(e,t){this.docStart=null,this.docEnd=!1,this.yaml=Object.assign({},c.defaultYaml,e),this.tags=Object.assign({},c.defaultTags,t)}clone(){var e=new c(this.yaml,this.tags);return e.docStart=this.docStart,e}atDocument(){var e=new c(this.yaml,this.tags);switch(this.yaml.version){case"1.1":this.atNextDocument=!0;break;case"1.2":this.atNextDocument=!1,this.yaml={explicit:c.defaultYaml.explicit,version:"1.2"},this.tags=Object.assign({},c.defaultTags)}return e}add(e,t){this.atNextDocument&&(this.yaml={explicit:c.defaultYaml.explicit,version:"1.1"},this.tags=Object.assign({},c.defaultTags),this.atNextDocument=!1);var r,s,n=e.trim().split(/[ \t]+/),i=n.shift();switch(i){case"%TAG":return 2!==n.length&&(t(0,"%TAG directive should contain exactly two parts"),n.length<2)?!1:([s,r]=n,this.tags[s]=r,!0);case"%YAML":return this.yaml.explicit=!0,1!==n.length?(t(0,"%YAML directive should contain exactly one part"),!1):([s]=n,"1.1"===s||"1.2"===s?(this.yaml.version=s,!0):(t(6,"Unsupported YAML version "+s,/^\d+\.\d+$/.test(s)),!1));default:return t(0,"Unknown directive "+i,!0),!1}}tagName(e,t){if("!"===e)return"!";if("!"!==e[0])t("Not a valid tag: "+e);else{if("<"===e[1])return"!"===(r=e.slice(2,-1))||"!!"===r?(t(`Verbatim tags aren't resolved, so ${e} is invalid.`),null):(">"!==e[e.length-1]&&t("Verbatim tags must end with a >"),r);var[,r,s]=e.match(/^(.*!)([^!]*)$/s),n=(s||t(`The ${e} tag has no suffix`),this.tags[r]);if(n)try{return n+decodeURIComponent(s)}catch(e){return t(String(e)),null}if("!"===r)return e;t("Could not resolve tag: "+e)}return null}tagString(r){for(let[e,t]of Object.entries(this.tags))if(r.startsWith(t))return e+r.substring(t.length).replace(/[!,[\]{}]/g,e=>mt[e]);return"!"===r[0]?r:`!<${r}>`}toString(s){var r=this.yaml.explicit?["%YAML "+(this.yaml.version||"1.2")]:[],n=Object.entries(this.tags);let i;if(s&&0<n.length&&E(s.contents)){let r={};l(s.contents,(e,t)=>{E(t)&&t.tag&&(r[t.tag]=!0)}),i=Object.keys(r)}else i=[];for(let[e,t]of n)"!!"===e&&"tag:yaml.org,2002:"===t||s&&!i.some(e=>e.startsWith(t))||r.push(`%TAG ${e} `+t);return r.join("\n")}}function yt(e){if(/[\x00-\x19\s,[\]{}]/.test(e))throw e=JSON.stringify(e),new Error("Anchor must not contain whitespace or control characters: "+e);return 1}function gt(e){let r=new Set;return l(e,{Value(e,t){t.anchor&&r.add(t.anchor)}}),r}function vt(t,r){for(let e=1;;++e){1;{var s=""+t+e;if(!r.has(s))return s}}}function bt(r,e,t,s){if(s&&"object"==typeof s)if(Array.isArray(s))for(let e=0,t=s.length;e<t;++e){var n=s[e],i=bt(r,s,String(e),n);void 0===i?delete s[e]:i!==n&&(s[e]=i)}else if(s instanceof Map)for(var a of Array.from(s.keys())){var o=s.get(a),l=bt(r,s,a,o);void 0===l?s.delete(a):l!==o&&s.set(a,l)}else if(s instanceof Set)for(var c of Array.from(s)){var u=bt(r,s,c,c);void 0===u?s.delete(c):u!==c&&(s.delete(c),s.add(u))}else for(var[p,d]of Object.entries(s)){var f=bt(r,s,p,d);void 0===f?delete s[p]:f!==d&&(s[p]=f)}return r.call(e,t,s)}function h(e,r,s){if(Array.isArray(e))return e.map((e,t)=>h(e,String(t),s));if(e&&"function"==typeof e.toJSON){if(!s||(n=e,!$(n)&&!k(n))||!n.anchor)return e.toJSON(r,s);let t={aliasCount:0,count:1,res:void 0};s.anchors.set(e,t),s.onCreate=e=>{t.res=e,delete s.onCreate};n=e.toJSON(r,s);return s.onCreate&&s.onCreate(n),n}var n;return"bigint"!=typeof e||s?.keep?e:Number(e)}c.defaultYaml={explicit:!1,version:"1.2"},c.defaultTags={"!!":"tag:yaml.org,2002:"};class wt{constructor(e){Object.defineProperty(this,i,{value:e})}clone(){var e=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return this.range&&(e.range=this.range.slice()),e}toJS(r,{mapAsMap:e,maxAliasCount:t,onAnchor:s,reviver:n}={}){if(!at(r))throw new TypeError("A document argument is required");r={anchors:new Map,doc:r,keep:!0,mapAsMap:!0===e,mapKeyWarned:!1,maxAliasCount:"number"==typeof t?t:100};let i=h(this,"",r);if("function"==typeof s)for(let{count:e,res:t}of r.anchors.values())s(t,e);return"function"==typeof n?bt(n,{"":i},"",i):i}}class _t extends wt{constructor(e){super(tt),this.source=e,Object.defineProperty(this,"tag",{set(){throw new Error("Alias nodes cannot have tags")}})}resolve(e){let r=void 0;return l(e,{Node:(e,t)=>{if(t===this)return l.BREAK;t.anchor===this.source&&(r=t)}}),r}toJSON(e,t){if(!t)return{source:this.source};var r,{anchors:s,doc:n,maxAliasCount:i}=t,a=this.resolve(n);if(!a)throw r="Unresolved alias (the anchor must be set before the alias): "+this.source,new ReferenceError(r);let o=s.get(a);if(o||(h(a,null,t),o=s.get(a)),!o||void 0===o.res)throw new ReferenceError("This should not happen: Alias anchor was not resolved?");if(0<=i&&(o.count+=1,0===o.aliasCount&&(o.aliasCount=function r(s,n,i){{if(f(n)){let e=n.resolve(s),t=i&&e&&i.get(e);return t?t.count*t.aliasCount:0}if(k(n)){let t=0;for(var a of n.items){let e=r(s,a,i);e>t&&(t=e)}return t}if(P(n)){let e=r(s,n.key,i),t=r(s,n.value,i);return Math.max(e,t)}}return 1}(n,a,s)),o.count*o.aliasCount>i))throw new ReferenceError("Excessive alias count indicates a resource exhaustion attack");return o.res}toString(e,t,r){var s,n="*"+this.source;if(e){if(yt(this.source),e.options.verifyAliasOrder&&!e.anchors.has(this.source))throw s="Unresolved alias (the anchor must be set before the alias): "+this.source,new Error(s);if(e.implicitKey)return n+" "}return n}}let $t=e=>!e||"function"!=typeof e&&"object"!=typeof e;class S extends wt{constructor(e){super(d),this.value=e}toJSON(e,t){return t?.keep?this.value:h(this.value,e,t)}toString(){return String(this.value)}}S.BLOCK_FOLDED="BLOCK_FOLDED",S.BLOCK_LITERAL="BLOCK_LITERAL",S.PLAIN="PLAIN",S.QUOTE_DOUBLE="QUOTE_DOUBLE",S.QUOTE_SINGLE="QUOTE_SINGLE";let kt="tag:yaml.org,2002:";function Et(t,e,r){if(E(t=at(t)?t.contents:t))return t;if(P(t))return(s=r.schema[st].createNode?.(r.schema,null,r)).items.push(t),s;(t instanceof String||t instanceof Number||t instanceof Boolean||"undefined"!=typeof BigInt&&t instanceof BigInt)&&(t=t.valueOf());var{aliasDuplicateObjects:s,onAnchor:n,onTagObj:i,schema:a,sourceObjects:o}=r;let l=void 0;if(s&&t&&"object"==typeof t){if(l=o.get(t))return l.anchor||(l.anchor=n(t)),new _t(l.anchor);l={anchor:null,node:null},o.set(t,l)}let c=((t,r,e)=>{if(r){var s=e.filter(e=>e.tag===r),s=s.find(e=>!e.format)??s[0];if(s)return s;throw new Error(`Tag ${r} not found`)}return e.find(e=>e.identify?.(t)&&!e.format)})(t,e=e?.startsWith("!!")?kt+e.slice(2):e,a.tags);if(!c){if(!(t=t&&"function"==typeof t.toJSON?t.toJSON():t)||"object"!=typeof t){let e=new S(t);return l&&(l.node=e),e}c=!(t instanceof Map)&&Symbol.iterator in Object(t)?a[it]:a[st]}i&&(i(c),delete r.onTagObj);let u=c?.createNode?c.createNode(r.schema,t,r):"function"==typeof c?.nodeClass?.from?c.nodeClass.from(r.schema,t,r):new S(t);return e?u.tag=e:c.default||(u.tag=c.tag),l&&(l.node=u),u}function St(e,t,r){let s=r;for(let e=t.length-1;0<=e;--e){var n,i=t[e];s="number"==typeof i&&Number.isInteger(i)&&0<=i?((n=[])[i]=s,n):new Map([[i,s]])}return Et(s,void 0,{aliasDuplicateObjects:!1,keepUndefined:!1,onAnchor:()=>{throw new Error("This should not happen, please report a bug.")},schema:e,sourceObjects:new Map})}let Ot=e=>null==e||"object"==typeof e&&!!e[Symbol.iterator]().next().done;class Pt extends wt{constructor(e,t){super(e),Object.defineProperty(this,"schema",{value:t,configurable:!0,enumerable:!1,writable:!0})}clone(t){var e=Object.create(Object.getPrototypeOf(this),Object.getOwnPropertyDescriptors(this));return t&&(e.schema=t),e.items=e.items.map(e=>E(e)||P(e)?e.clone(t):e),this.range&&(e.range=this.range.slice()),e}addIn(e,t){if(Ot(e))this.add(t);else{var[e,...r]=e,s=this.get(e,!0);if(k(s))s.addIn(r,t);else{if(void 0!==s||!this.schema)throw new Error(`Expected YAML collection at ${e}. Remaining path: `+r);this.set(e,St(this.schema,r,t))}}}deleteIn(e){var[e,...t]=e;if(0===t.length)return this.delete(e);var r=this.get(e,!0);if(k(r))return r.deleteIn(t);throw new Error(`Expected YAML collection at ${e}. Remaining path: `+t)}getIn(e,t){var[e,...r]=e,e=this.get(e,!0);return 0===r.length?!t&&$(e)?e.value:e:k(e)?e.getIn(r,t):void 0}hasAllNullValues(t){return this.items.every(e=>!!P(e)&&(null==(e=e.value)||t&&$(e)&&null==e.value&&!e.commentBefore&&!e.comment&&!e.tag))}hasIn(e){var[e,...t]=e;return 0===t.length?this.has(e):!!k(e=this.get(e,!0))&&e.hasIn(t)}setIn(e,t){var[e,...r]=e;if(0===r.length)this.set(e,t);else{var s=this.get(e,!0);if(k(s))s.setIn(r,t);else{if(void 0!==s||!this.schema)throw new Error(`Expected YAML collection at ${e}. Remaining path: `+r);this.set(e,St(this.schema,r,t))}}}}let jt=e=>e.replace(/^(?!$)(?: $)?/gm,"#");function O(e,t){return/^\n+$/.test(e)?e.substring(1):t?e.replace(/^(?! *$)/gm,t):e}let Nt=(e,t,r)=>e.endsWith("\n")?O(r,t):r.includes("\n")?"\n"+O(r,t):(e.endsWith(" ")?"":" ")+r,xt="flow",At="block",It="quoted";function Tt(r,s,n="flow",{indentAtStart:e,lineWidth:t=80,minContentWidth:i=20,onFold:a,onOverflow:o}={}){if(!t||t<0)return r;t<i&&(i=0);var l=Math.max(1+i,1+t-s.length);if(r.length<=l)return r;var c=[],u={};let p=t-s.length,d=("number"==typeof e&&(e>t-Math.max(2,i)?c.push(0):p=t-e),void 0),f=void 0,h=!1,m=-1,y=-1,g=-1;n===At&&-1!==(m=Ct(r,m,s.length))&&(p=m+l);for(let e;e=r[m+=1];){if(n===It&&"\\"===e){switch(r[(y=m)+1]){case"x":m+=3;break;case"u":m+=5;break;case"U":m+=9;break;default:m+=1}g=m}if("\n"===e)n===At&&(m=Ct(r,m,s.length)),p=m+s.length+l,d=void 0;else if(" "===e&&f&&" "!==f&&"\n"!==f&&"\t"!==f&&(v=r[m+1])&&" "!==v&&"\n"!==v&&"\t"!==v&&(d=m),m>=p)if(d)c.push(d),p=d+l,d=void 0;else if(n===It){for(;" "===f||"\t"===f;)f=e,e=r[m+=1],h=!0;var v=m>g+1?m-2:y-1;if(u[v])return r;c.push(v),u[v]=!0,p=v+l,d=void 0}else h=!0;f=e}if(h&&o&&o(),0===c.length)return r;a&&a();let b=r.slice(0,c[0]);for(let t=0;t<c.length;++t){var w=c[t];let e=c[t+1]||r.length;0===w?b=`

`+s+r.slice(0,e):(n===It&&u[w]&&(b+=r[w]+"\\"),b+=`

`+s+r.slice(w+1,e))}return b}function Ct(e,t,r){let s=t,n=t+1,i=e[n];for(;" "===i||"\t"===i;)if(t<n+r)i=e[++t];else{for(;(i=e[++t])&&"\n"!==i;);s=t,n=t+1,i=e[n]}return s}let Mt=(e,t)=>({indentAtStart:t?e.indent.length:e.indentAtStart,lineWidth:e.options.lineWidth,minContentWidth:e.options.minContentWidth}),Lt=e=>/^(%|---|\.\.\.)/m.test(e);function Rt(e,t){var r=JSON.stringify(e);if(t.options.doubleQuotedAsJSON)return r;var s=t.implicitKey,n=t.options.doubleQuotedMinMultiLineLength,i=t.indent||(Lt(e)?"  ":"");let a="",o=0;for(let e=0,t=r[e];t;t=r[++e])if(" "===t&&"\\"===r[e+1]&&"n"===r[e+2]&&(a+=r.slice(o,e)+"\\ ",e+=1,o=e,t="\\"),"\\"===t)switch(r[e+1]){case"u":a+=r.slice(o,e);var l=r.substr(e+2,4);switch(l){case"0000":a+="\\0";break;case"0007":a+="\\a";break;case"000b":a+="\\v";break;case"001b":a+="\\e";break;case"0085":a+="\\N";break;case"00a0":a+="\\_";break;case"2028":a+="\\L";break;case"2029":a+="\\P";break;default:"00"===l.substr(0,2)?a+="\\x"+l.substr(2):a+=r.substr(e,6)}e+=5,o=e+1;break;case"n":if(s||'"'===r[e+2]||r.length<n)e+=1;else{for(a+=r.slice(o,e)+"\n\n";"\\"===r[e+2]&&"n"===r[e+3]&&'"'!==r[e+4];)a+="\n",e+=2;a+=i," "===r[e+2]&&(a+="\\"),e+=1,o=e+1}break;default:e+=1}return a=o?a+r.slice(o):r,s?a:Tt(a,i,It,Mt(t,!1))}function Dt(e,t){var r;return!1===t.options.singleQuote||t.implicitKey&&e.includes("\n")||/[ \t]\n|\n[ \t]/.test(e)?Rt(e,t):(r=t.indent||(Lt(e)?"  ":""),e="'"+e.replace(/'/g,"''").replace(/\n+/g,`$&

`+r)+"'",t.implicitKey?e:Tt(e,r,xt,Mt(t,!1)))}function Vt(e,t){var r,s,n=t.options.singleQuote;let i;return(i=!1!==n&&(r=e.includes('"'),s=e.includes("'"),r&&!s||(!s||r)&&n)?Dt:Rt)(e,t)}let qt;try{qt=new RegExp("(^|(?<!\n))\n+(?!\n|$)","g")}catch{qt=/\n+(?!\n|$)/g}function Kt({comment:e,type:t,value:r},s,n,i){var{blockQuote:a,commentString:o,lineWidth:l}=s.options;if(!a||/\n[\t ]+$/.test(r)||/^\s*$/.test(r))return Vt(r,s);var c=s.indent||(s.forceBlockIndent||Lt(r)?"  ":""),l="literal"===a||"folded"!==a&&t!==S.BLOCK_FOLDED&&(t===S.BLOCK_LITERAL||!((r,e,t)=>{if(e&&!(e<0)){var s=e-t,n=r.length;if(!(n<=s)){for(let e=0,t=0;e<n;++e)if("\n"===r[e]){if(e-t>s)return 1;if(n-(t=e+1)<=s)return}return 1}}})(r,l,c.length));if(!r)return l?"|\n":">\n";let u,p;for(p=r.length;0<p;--p){var d=r[p-1];if("\n"!==d&&"\t"!==d&&" "!==d)break}let f=r.substring(p);var h=f.indexOf("\n");-1===h?u="-":r===f||h!==f.length-1?(u="+",i&&i()):u="",f&&(r=r.slice(0,-f.length),f=(f="\n"===f[f.length-1]?f.slice(0,-1):f).replace(qt,"$&"+c));let m=!1,y,g=-1;for(y=0;y<r.length;++y){var v=r[y];if(" "===v)m=!0;else{if("\n"!==v)break;g=y}}let b=r.substring(0,g<y?g+1:y),w=(b&&(r=r.substring(b.length),b=b.replace(/\n+/g,"$&"+c)),(m?c?"2":"1":"")+u);if(e&&(w+=" "+o(e.replace(/ ?[\r\n]+/g," ")),n)&&n(),!l){h=r.replace(/\n+/g,"\n$&").replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g,"$1$2").replace(/\n+/g,"$&"+c);let e=!1;i=Mt(s,!0),o=("folded"!==a&&t!==S.BLOCK_FOLDED&&(i.onOverflow=()=>{e=!0}),Tt(""+b+h+f,c,At,i));if(!e)return`>${w}

`+c+o}return r=r.replace(/\n+/g,"$&"+c),`|${w}

`+c+b+r+f}function Bt(e,f,h,m){let{implicitKey:t,inFlow:y}=f,g="string"==typeof e.value?e:Object.assign({},e,{value:String(e.value)}),r=e.type;e=e=>{switch(e){case S.BLOCK_FOLDED:case S.BLOCK_LITERAL:return t||y?Vt(g.value,f):Kt(g,f,h,m);case S.QUOTE_DOUBLE:return Rt(g.value,f);case S.QUOTE_SINGLE:return Dt(g.value,f);case S.PLAIN:{var r=g;var s=f;var n=h;var i=m;var{type:a,value:o}=r,{actualString:l,implicitKey:c,indent:u,indentStep:p,inFlow:d}=s;if(c&&o.includes("\n")||d&&/[[\]{},]/.test(o))return Vt(o,s);if(!o||/^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(o))return c||d||!o.includes("\n")?Vt(o,s):Kt(r,s,n,i);if(!c&&!d&&a!==S.PLAIN&&o.includes("\n"))return Kt(r,s,n,i);if(Lt(o)){if(""===u)return s.forceBlockIndent=!0,Kt(r,s,n,i);if(c&&u===p)return Vt(o,s)}let t=o.replace(/\n+/g,`$&

`+u);if(l){var d=e=>e.default&&"tag:yaml.org,2002:str"!==e.tag&&e.test?.test(t),{compat:a,tags:r}=s.doc.schema;if(r.some(d)||a?.some(d))return Vt(o,s)}return c?t:Tt(t,u,xt,Mt(s,!1));return}default:return null}};let s=e(r=r!==S.QUOTE_DOUBLE&&/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(g.value)?S.QUOTE_DOUBLE:r);if(null===s){var{defaultKeyType:n,defaultStringType:i}=f.options,n=t&&n||i;if(null===(s=e(n)))throw new Error("Unsupported default string type "+n)}return s}function Ut(e,t){t=Object.assign({blockQuote:!0,commentString:jt,defaultKeyType:null,defaultStringType:"PLAIN",directives:null,doubleQuotedAsJSON:!1,doubleQuotedMinMultiLineLength:40,falseStr:"false",flowCollectionPadding:!0,indentSeq:!0,lineWidth:80,minContentWidth:20,nullStr:"null",simpleKeys:!1,singleQuote:null,trueStr:"true",verifyAliasOrder:!0},e.schema.toStringOptions,t);let r;switch(t.collectionStyle){case"block":r=!1;break;case"flow":r=!0;break;default:r=null}return{anchors:new Set,doc:e,flowCollectionPadding:t.flowCollectionPadding?" ":"",indent:"",indentStep:"number"==typeof t.indent?" ".repeat(t.indent):"  ",inFlow:r,options:t}}function Ft(e,t,r,s){if(P(e))return e.toString(t,r,s);if(f(e)){if(t.doc.directives)return e.toString(t);if(t.resolvedAliases?.has(e))throw new TypeError("Cannot stringify circular structure without alias nodes");t.resolvedAliases?t.resolvedAliases.add(e):t.resolvedAliases=new Set([e]),e=e.resolve(t.doc)}let n=void 0;var i,a,o,l,e=E(e)?e:t.doc.createNode(e,{onTagObj:e=>n=e}),c=(n=n||((t,r)=>{if(r.tag){var s=t.filter(e=>e.tag===r.tag);if(0<s.length)return s.find(e=>e.format===r.format)??s[0]}let n=void 0,i;if($(r)){i=r.value;let e=t.filter(e=>e.identify?.(i));1<e.length&&0<(s=e.filter(e=>e.test)).length&&(e=s),n=e.find(e=>e.format===r.format)??e.find(e=>!e.format)}else i=r,n=t.find(e=>e.nodeClass&&i instanceof e.nodeClass);if(n)return n;throw s=i?.constructor?.name??typeof i,new Error(`Tag not resolved for ${s} value`)})(t.doc.schema.tags,e),[u,i,{anchors:a,doc:o}]=[e,n,t],o.directives?(l=[],(c=($(u)||k(u))&&u.anchor)&&yt(c)&&(a.add(c),l.push("&"+c)),(a=u.tag||(i.default?null:i.tag))&&l.push(o.directives.tagString(a)),l.join(" ")):""),u=(0<c.length&&(t.indentAtStart=(t.indentAtStart??0)+c.length+1),"function"==typeof n.stringify?n.stringify(e,t,r,s):$(e)?Bt(e,t,r,s):e.toString(t,r,s));return c?$(e)||"{"===u[0]||"["===u[0]?c+" "+u:c+`

`+t.indent+u:u}function zt(e,t){"debug"!==e&&"warn"!==e||console.warn(t)}let m={identify:e=>"<<"===e||"symbol"==typeof e&&"<<"===e.description,default:"key",tag:"tag:yaml.org,2002:merge",test:/^<<$/,resolve:()=>Object.assign(new S(Symbol("<<")),{addToJSMap:Gt}),stringify:()=>"<<"};function Gt(e,t,r){if(r=e&&f(r)?r.resolve(e.doc):r,lt(r))for(var s of r.items)Jt(e,t,s);else if(Array.isArray(r))for(var n of r)Jt(e,t,n);else Jt(e,t,r)}function Jt(r,s,e){var n=r&&f(e)?e.resolve(r.doc):e;if(!ot(n))throw new Error("Merge sources must be maps or map aliases");for(let[e,t]of n.toJSON(null,r,Map))s instanceof Map?s.has(e)||s.set(e,t):s instanceof Set?s.add(e):Object.prototype.hasOwnProperty.call(s,e)||Object.defineProperty(s,e,{value:t,writable:!0,enumerable:!0,configurable:!0})}function Ht(e,t,{key:r,value:s}){var n,i;return E(r)&&r.addToJSMap?r.addToJSMap(e,t,s):(n=e,i=r,(m.identify(i)||$(i)&&(!i.type||i.type===S.PLAIN)&&m.identify(i.value))&&n?.doc.schema.tags.some(e=>e.tag===m.tag&&e.default)?Gt(e,t,s):(i=h(r,"",e),t instanceof Map?t.set(i,h(s,i,e)):t instanceof Set?t.add(i):(s=h(s,n=((t,e,r)=>{if(null===e)return"";if("object"!=typeof e)return String(e);if(E(t)&&r?.doc){var s,n=Ut(r.doc,{});n.anchors=new Set;for(s of r.anchors.keys())n.anchors.add(s.anchor);n.inFlow=!0,n.inStringifyKey=!0;t=t.toString(n);if(!r.mapKeyWarned){let e=JSON.stringify(t);40<e.length&&(e=e.substring(0,36)+'..."'),zt(r.doc.options.logLevel,`Keys with collection values will be stringified due to JS Object restrictions: ${e}. Set mapAsMap: true to use object keys.`),r.mapKeyWarned=!0}return t}return JSON.stringify(e)})(r,i,e),e),n in t?Object.defineProperty(t,n,{value:s,writable:!0,enumerable:!0,configurable:!0}):t[n]=s))),t}function Wt(e,t,r){e=Et(e,void 0,r),t=Et(t,void 0,r);return new j(e,t)}class j{constructor(e,t=null){Object.defineProperty(this,i,{value:nt}),this.key=e,this.value=t}clone(e){let{key:t,value:r}=this;return E(t)&&(t=t.clone(e)),E(r)&&(r=r.clone(e)),new j(t,r)}toJSON(e,t){return Ht(t,t?.mapAsMap?new Map:{},this)}toString(u,p,d){if(u?.doc){var[{key:u,value:p},d,f,h]=[this,u,p,d],{allNullValues:m,doc:y,indent:g,indentStep:v,options:{commentString:b,indentSeq:w,simpleKeys:_}}=d;let e=E(u)&&u.comment||null;if(_){if(e)throw new Error("With simple keys, key nodes cannot have comments");if(k(u)||!E(u)&&"object"==typeof u)throw new Error("With simple keys, collection cannot be used as a key value")}let t=!_&&(!u||e&&null==p&&!d.inFlow||k(u)||($(u)?u.type===S.BLOCK_FOLDED||u.type===S.BLOCK_LITERAL:"object"==typeof u)),r=(d=Object.assign({},d,{allNullValues:!1,implicitKey:!t&&(_||!m),indent:g+v}),!1),s=!1,n=Ft(u,d,()=>r=!0,()=>s=!0);if(!t&&!d.inFlow&&1024<n.length){if(_)throw new Error("With simple keys, single line scalar must not span more than 1024 characters");t=!0}if(d.inFlow){if(m||null==p)return r&&f&&f(),""===n?"?":t?"? "+n:n}else if(m&&!_||null==p&&t)return n="? "+n,e&&!r?n+=Nt(n,d.indent,b(e)):s&&h&&h(),n;r&&(e=null),t?(e&&(n+=Nt(n,d.indent,b(e))),n=`? ${n}

${g}:`):(n+=":",e&&(n+=Nt(n,d.indent,b(e))));let i,a,o,l=(E(p)?(i=!!p.spaceBefore,a=p.commentBefore,o=p.comment):(i=!1,a=null,o=null,p&&"object"==typeof p&&(p=y.createNode(p))),d.implicitKey=!1,t||e||!$(p)||(d.indentAtStart=n.length+1),s=!1,w||!(2<=v.length)||d.inFlow||t||!lt(p)||p.flow||p.tag||p.anchor||(d.indent=d.indent.substring(2)),!1),c=(u=Ft(p,d,()=>l=!0,()=>s=!0)," ");if(e||i||a)c=i?"\n":"",a&&(m=b(a),c+=`

`+O(m,d.indent)),""!==u||d.inFlow?c+=`

`+d.indent:"\n"===c&&(c="\n\n");else if(!t&&k(p)){_=u[0],g=u.indexOf("\n"),y=-1!==g,w=d.inFlow??p.flow??0===p.items.length;if(y||!w){let t=!1;if(y&&("&"===_||"!"===_)){let e=u.indexOf(" ");(-1===(e="&"===_&&-1!==e&&e<g&&"!"===u[e+1]?u.indexOf(" ",e+1):e)||g<e)&&(t=!0)}t||(c=`

`+d.indent)}}else""!==u&&"\n"!==u[0]||(c="");return n+=c+u,d.inFlow?l&&f&&f():o&&!l?n+=Nt(n,d.indent,b(o)):s&&h&&h(),n}return JSON.stringify(this)}}function Yt(e,t,r){return(t.inFlow??e.flow?Zt:Qt)(e,t,r)}function Qt({comment:e,items:s},n,{blockItemPrefix:i,flowChars:t,itemIndent:a,onChompKeep:r,onComment:o}){var{indent:l,options:{commentString:c}}=n,u=Object.assign({},n,{indent:a,type:null});let p=!1;var d=[];for(let r=0;r<s.length;++r){var f,h=s[r];let e=null,t=(E(h)?(!p&&h.spaceBefore&&d.push(""),Xt(n,d,h.commentBefore,p),h.comment&&(e=h.comment)):P(h)&&(f=E(h.key)?h.key:null)&&(!p&&f.spaceBefore&&d.push(""),Xt(n,d,f.commentBefore,p)),p=!1,Ft(h,u,()=>e=null,()=>p=!0));e&&(t+=Nt(t,a,c(e))),p&&e&&(p=!1),d.push(i+t)}let m;if(0===d.length)m=t.start+t.end;else{m=d[0];for(let e=1;e<d.length;++e){var y=d[e];m+=y?`

`+l+y:"\n"}}return e?(m+="\n"+O(c(e),l),o&&o()):p&&r&&r(),m}function Zt({items:s},n,{flowChars:t,itemIndent:i}){var{indent:r,indentStep:a,flowCollectionPadding:e,options:{commentString:o}}=n,l=(i+=a,Object.assign({},n,{indent:i,inFlow:!0,type:null}));let c=!1,u=0;var p=[];for(let r=0;r<s.length;++r){var d,f,h=s[r];let e=null,t=(E(h)?(h.spaceBefore&&p.push(""),Xt(n,p,h.commentBefore,!1),h.comment&&(e=h.comment)):P(h)&&((d=E(h.key)?h.key:null)&&(d.spaceBefore&&p.push(""),Xt(n,p,d.commentBefore,!1),d.comment)&&(c=!0),(f=E(h.value)?h.value:null)?(f.comment&&(e=f.comment),f.commentBefore&&(c=!0)):null==h.value&&d?.comment&&(e=d.comment)),e&&(c=!0),Ft(h,l,()=>e=null));r<s.length-1&&(t+=","),e&&(t+=Nt(t,i,o(e))),!c&&(p.length>u||t.includes("\n"))&&(c=!0),p.push(t),u=p.length}var m,{start:t,end:y}=t;if(0===p.length)return t+y;if(c||(m=p.reduce((e,t)=>e+t.length+2,2),c=0<n.options.lineWidth&&m>n.options.lineWidth),c){let e=t;for(var g of p)e+=g?`

`+a+r+g:"\n";return e+`

`+r+y}return""+t+e+p.join(" ")+e+y}function Xt({indent:e,options:{commentString:t}},r,s,n){(s=s&&n?s.replace(/^\n+/,""):s)&&(n=O(t(s),e),r.push(n.trimStart()))}function er(e,t){var r,s=$(t)?t.value:t;for(r of e)if(P(r)){if(r.key===t||r.key===s)return r;if($(r.key)&&r.key.value===s)return r}}class N extends Pt{static get tagName(){return"tag:yaml.org,2002:map"}constructor(e){super(st,e),this.items=[]}static from(e,r,s){let{keepUndefined:n,replacer:i}=s,a=new this(e);var t=(e,t)=>{if("function"==typeof i)t=i.call(r,e,t);else if(Array.isArray(i)&&!i.includes(e))return;void 0===t&&!n||a.items.push(Wt(e,t,s))};if(r instanceof Map)for(var[o,l]of r)t(o,l);else if(r&&"object"==typeof r)for(var c of Object.keys(r))t(c,r[c]);return"function"==typeof e.sortMapEntries&&a.items.sort(e.sortMapEntries),a}add(e,t){let r;r=P(e)?e:e&&"object"==typeof e&&"key"in e?new j(e.key,e.value):new j(e,e?.value);e=er(this.items,r.key);let s=this.schema?.sortMapEntries;if(e){if(!t)throw new Error(`Key ${r.key} already set`);$(e.value)&&$t(r.value)?e.value.value=r.value:e.value=r.value}else!s||-1===(t=this.items.findIndex(e=>s(r,e)<0))?this.items.push(r):this.items.splice(t,0,r)}delete(e){e=er(this.items,e);return!!e&&0<this.items.splice(this.items.indexOf(e),1).length}get(e,t){e=er(this.items,e)?.value;return(!t&&$(e)?e.value:e)??void 0}has(e){return!!er(this.items,e)}set(e,t){this.add(new j(e,t),!0)}toJSON(e,t,r){var s,n=r?new r:t?.mapAsMap?new Map:{};t?.onCreate&&t.onCreate(n);for(s of this.items)Ht(t,n,s);return n}toString(e,t,r){if(!e)return JSON.stringify(this);for(var s of this.items)if(!P(s))throw new Error(`Map items must all be pairs; found ${JSON.stringify(s)} instead`);return!e.allNullValues&&this.hasAllNullValues(!1)&&(e=Object.assign({},e,{allNullValues:!0})),Yt(this,e,{blockItemPrefix:"",flowChars:{start:"{",end:"}"},itemIndent:e.indent||"",onChompKeep:r,onComment:t})}}let tr={collection:"map",default:!0,nodeClass:N,tag:"tag:yaml.org,2002:map",resolve(e,t){return ot(e)||t("Expected a mapping for this tag"),e},createNode:(e,t,r)=>N.from(e,t,r)};class x extends Pt{static get tagName(){return"tag:yaml.org,2002:seq"}constructor(e){super(it,e),this.items=[]}add(e){this.items.push(e)}delete(e){e=rr(e);return"number"==typeof e&&0<this.items.splice(e,1).length}get(e,t){var e=rr(e);if("number"==typeof e)return e=this.items[e],!t&&$(e)?e.value:e}has(e){e=rr(e);return"number"==typeof e&&e<this.items.length}set(e,t){var r=rr(e);if("number"!=typeof r)throw new Error(`Expected a valid index, not ${e}.`);e=this.items[r];$(e)&&$t(t)?e.value=t:this.items[r]=t}toJSON(e,t){var r,s=[];t?.onCreate&&t.onCreate(s);let n=0;for(r of this.items)s.push(h(r,String(n++),t));return s}toString(e,t,r){return e?Yt(this,e,{blockItemPrefix:"- ",flowChars:{start:"[",end:"]"},itemIndent:(e.indent||"")+"  ",onChompKeep:r,onComment:t}):JSON.stringify(this)}static from(e,t,r){var s,n=r.replacer,i=new this(e);if(t&&Symbol.iterator in Object(t)){let e=0;for(var a of t)"function"==typeof n&&(s=t instanceof Set?a:String(e++),a=n.call(t,s,a)),i.items.push(Et(a,void 0,r))}return i}}function rr(e){let t=$(e)?e.value:e;return"number"==typeof(t=t&&"string"==typeof t?Number(t):t)&&Number.isInteger(t)&&0<=t?t:null}let sr={collection:"seq",default:!0,nodeClass:x,tag:"tag:yaml.org,2002:seq",resolve(e,t){return lt(e)||t("Expected a sequence for this tag"),e},createNode:(e,t,r)=>x.from(e,t,r)},nr={identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify(e,t,r,s){return Bt(e,t=Object.assign({actualString:!0},t),r,s)}},ir={identify:e=>null==e,createNode:()=>new S(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^(?:~|[Nn]ull|NULL)?$/,resolve:()=>new S(null),stringify:({source:e},t)=>"string"==typeof e&&ir.test.test(e)?e:t.options.nullStr},ar={identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,resolve:e=>new S("t"===e[0]||"T"===e[0]),stringify({source:e,value:t},r){if(e&&ar.test.test(e)&&t===("t"===e[0]||"T"===e[0]))return e;return t?r.options.trueStr:r.options.falseStr}};function y({format:e,minFractionDigits:r,tag:t,value:s}){if("bigint"==typeof s)return String(s);var n="number"==typeof s?s:Number(s);if(!isFinite(n))return isNaN(n)?".nan":n<0?"-.inf":".inf";let i=JSON.stringify(s);if(!e&&r&&(!t||"tag:yaml.org,2002:float"===t)&&/^\d/.test(i)){let e=i.indexOf("."),t=(e<0&&(e=i.length,i+="."),r-(i.length-e-1));for(;0<t--;)i+="0"}return i}var oe={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:y},re={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e),stringify(e){var t=Number(e.value);return isFinite(t)?t.toExponential():y(e)}},or={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,resolve(e){var t=new S(parseFloat(e)),r=e.indexOf(".");return-1!==r&&"0"===e[e.length-1]&&(t.minFractionDigits=e.length-r-1),t},stringify:y};let lr=e=>"bigint"==typeof e||Number.isInteger(e),cr=(e,t,r,{intAsBigInt:s})=>s?BigInt(e):parseInt(e.substring(t),r);function ur(e,t,r){var s=e.value;return lr(s)&&0<=s?r+s.toString(t):y(e)}var pr={identify:e=>lr(e)&&0<=e,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^0o[0-7]+$/,resolve:(e,t,r)=>cr(e,2,8,r),stringify:e=>ur(e,8,"0o")},dr={identify:lr,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9]+$/,resolve:(e,t,r)=>cr(e,0,10,r),stringify:y},fr={identify:e=>lr(e)&&0<=e,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^0x[0-9a-fA-F]+$/,resolve:(e,t,r)=>cr(e,2,16,r),stringify:e=>ur(e,16,"0x")},hr=[tr,sr,nr,ir,ar,pr,dr,fr,oe,re,or];function mr(e){return"bigint"==typeof e||Number.isInteger(e)}var yr=({value:e})=>JSON.stringify(e),yr=[tr,sr].concat([{identify:e=>"string"==typeof e,default:!0,tag:"tag:yaml.org,2002:str",resolve:e=>e,stringify:yr},{identify:e=>null==e,createNode:()=>new S(null),default:!0,tag:"tag:yaml.org,2002:null",test:/^null$/,resolve:()=>null,stringify:yr},{identify:e=>"boolean"==typeof e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^true$|^false$/,resolve:e=>"true"===e,stringify:yr},{identify:mr,default:!0,tag:"tag:yaml.org,2002:int",test:/^-?(?:0|[1-9][0-9]*)$/,resolve:(e,t,{intAsBigInt:r})=>r?BigInt(e):parseInt(e,10),stringify:({value:e})=>mr(e)?e.toString():JSON.stringify(e)},{identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,resolve:e=>parseFloat(e),stringify:yr}],{default:!0,tag:"",test:/^/,resolve(e,t){return t("Unresolved plain scalar "+JSON.stringify(e)),e}}),gr={identify:e=>e instanceof Uint8Array,default:!1,tag:"tag:yaml.org,2002:binary",resolve(e,t){if("function"!=typeof atob)return t("This environment does not support reading binary tags; either Buffer or atob is required"),e;var r=atob(e.replace(/[\n\r]/g,"")),s=new Uint8Array(r.length);for(let e=0;e<r.length;++e)s[e]=r.charCodeAt(e);return s},stringify({comment:e,type:t,value:r},s,n,i){var a=r;let o;if("function"!=typeof btoa)throw new Error("This environment does not support writing binary tags; either Buffer or btoa is required");{let t="";for(let e=0;e<a.length;++e)t+=String.fromCharCode(a[e]);o=btoa(t)}if((t=t||S.BLOCK_LITERAL)!==S.QUOTE_DOUBLE){var l=Math.max(s.options.lineWidth-s.indent.length,s.options.minContentWidth),c=Math.ceil(o.length/l),u=new Array(c);for(let e=0,t=0;e<c;++e,t+=l)u[e]=o.substr(t,l);o=u.join(t===S.BLOCK_LITERAL?"\n":" ")}return Bt({comment:e,type:t,value:o},s,n,i)}};function vr(r,s){if(lt(r))for(let t=0;t<r.items.length;++t){let e=r.items[t];var n,i;P(e)||(ot(e)&&(1<e.items.length&&s("Each pair must have its own sequence indicator"),n=e.items[0]||new j(new S(null)),e.commentBefore&&(n.key.commentBefore=n.key.commentBefore?e.commentBefore+`

`+n.key.commentBefore:e.commentBefore),e.comment&&((i=n.value??n.key).comment=i.comment?e.comment+`

`+i.comment:e.comment),e=n),r.items[t]=P(e)?e:new j(e))}else s("Expected a sequence for this tag");return r}function br(e,r,s){var n=s.replacer,i=new x(e);i.tag="tag:yaml.org,2002:pairs";let a=0;if(r&&Symbol.iterator in Object(r))for(var o of r){"function"==typeof n&&(o=n.call(r,String(a++),o));let e,t;if(Array.isArray(o)){if(2!==o.length)throw new TypeError("Expected [key, value] tuple: "+o);e=o[0],t=o[1]}else if(o&&o instanceof Object){var l=Object.keys(o);if(1!==l.length)throw new TypeError(`Expected tuple with one key, not ${l.length} keys`);e=l[0],t=o[e]}else e=o;i.items.push(Wt(e,t,s))}return i}var wr={collection:"seq",default:!1,tag:"tag:yaml.org,2002:pairs",resolve:vr,createNode:br};class _r extends x{constructor(){super(),this.add=N.prototype.add.bind(this),this.delete=N.prototype.delete.bind(this),this.get=N.prototype.get.bind(this),this.has=N.prototype.has.bind(this),this.set=N.prototype.set.bind(this),this.tag=_r.tag}toJSON(e,r){if(!r)return super.toJSON(e);var s,n=new Map;r?.onCreate&&r.onCreate(n);for(s of this.items){let e,t;if(P(s)?(e=h(s.key,"",r),t=h(s.value,e,r)):e=h(s,"",r),n.has(e))throw new Error("Ordered maps must not include duplicate keys");n.set(e,t)}return n}static from(e,t,r){e=br(e,t,r),t=new this;return t.items=e.items,t}}_r.tag="tag:yaml.org,2002:omap";var $r={collection:"seq",identify:e=>e instanceof Map,nodeClass:_r,default:!1,tag:"tag:yaml.org,2002:omap",resolve(e,t){var r,e=vr(e,t),s=[];for({key:r}of e.items)$(r)&&(s.includes(r.value)?t("Ordered maps must not include duplicate keys: "+r.value):s.push(r.value));return Object.assign(new _r,e)},createNode:(e,t,r)=>_r.from(e,t,r)};function kr({value:e,source:t},r){var s=e?Er:Sr;return t&&s.test.test(t)?t:e?r.options.trueStr:r.options.falseStr}let Er={identify:e=>!0===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,resolve:()=>new S(!0),stringify:kr},Sr={identify:e=>!1===e,default:!0,tag:"tag:yaml.org,2002:bool",test:/^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,resolve:()=>new S(!1),stringify:kr};var Or={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,resolve:e=>"nan"===e.slice(-3).toLowerCase()?NaN:"-"===e[0]?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,stringify:y},w={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"EXP",test:/^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,resolve:e=>parseFloat(e.replace(/_/g,"")),stringify(e){var t=Number(e.value);return isFinite(t)?t.toExponential():y(e)}},t={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",test:/^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,resolve(e){var t=new S(parseFloat(e.replace(/_/g,""))),r=e.indexOf(".");return-1!==r&&"0"===(e=e.substring(r+1).replace(/_/g,""))[e.length-1]&&(t.minFractionDigits=e.length),t},stringify:y};let Pr=e=>"bigint"==typeof e||Number.isInteger(e);function jr(t,e,r,{intAsBigInt:s}){var n=t[0];if("-"!==n&&"+"!==n||(e+=1),t=t.substring(e).replace(/_/g,""),s){switch(r){case 2:t="0b"+t;break;case 8:t="0o"+t;break;case 16:t="0x"+t}let e=BigInt(t);return"-"===n?BigInt(-1)*e:e}let i=parseInt(t,r);return"-"===n?-1*i:i}function Nr(e,t,r){var s=e.value;return Pr(s)?(t=s.toString(t),s<0?"-"+r+t.substr(1):r+t):y(e)}var xr={identify:Pr,default:!0,tag:"tag:yaml.org,2002:int",format:"BIN",test:/^[-+]?0b[0-1_]+$/,resolve:(e,t,r)=>jr(e,2,2,r),stringify:e=>Nr(e,2,"0b")},Ar={identify:Pr,default:!0,tag:"tag:yaml.org,2002:int",format:"OCT",test:/^[-+]?0[0-7_]+$/,resolve:(e,t,r)=>jr(e,1,8,r),stringify:e=>Nr(e,8,"0")},Ir={identify:Pr,default:!0,tag:"tag:yaml.org,2002:int",test:/^[-+]?[0-9][0-9_]*$/,resolve:(e,t,r)=>jr(e,0,10,r),stringify:y},Tr={identify:Pr,default:!0,tag:"tag:yaml.org,2002:int",format:"HEX",test:/^[-+]?0x[0-9a-fA-F_]+$/,resolve:(e,t,r)=>jr(e,2,16,r),stringify:e=>Nr(e,16,"0x")};class Cr extends N{constructor(e){super(e),this.tag=Cr.tag}add(e){let t;t=P(e)?e:e&&"object"==typeof e&&"key"in e&&"value"in e&&null===e.value?new j(e.key,null):new j(e,null),er(this.items,t.key)||this.items.push(t)}get(e,t){e=er(this.items,e);return!t&&P(e)?$(e.key)?e.key.value:e.key:e}set(e,t){if("boolean"!=typeof t)throw new Error("Expected boolean value for set(key, value) in a YAML set, not "+typeof t);var r=er(this.items,e);r&&!t?this.items.splice(this.items.indexOf(r),1):!r&&t&&this.items.push(new j(e))}toJSON(e,t){return super.toJSON(e,t,Set)}toString(e,t,r){if(!e)return JSON.stringify(this);if(this.hasAllNullValues(!0))return super.toString(Object.assign({},e,{allNullValues:!0}),t,r);throw new Error("Set items must all have null values")}static from(e,t,r){var s=r.replacer,n=new this(e);if(t&&Symbol.iterator in Object(t))for(var i of t)"function"==typeof s&&(i=s.call(t,i,i)),n.items.push(Wt(i,null,r));return n}}Cr.tag="tag:yaml.org,2002:set";var Mr={collection:"map",identify:e=>e instanceof Set,nodeClass:Cr,default:!1,tag:"tag:yaml.org,2002:set",createNode:(e,t,r)=>Cr.from(e,t,r),resolve(e,t){if(ot(e)){if(e.hasAllNullValues(!0))return Object.assign(new Cr,e);t("Set items must all have null values")}else t("Expected a mapping for this tag");return e}};function Lr(e,t){var r=e[0],e="-"===r||"+"===r?e.substring(1):e;let s=e=>(t?BigInt:Number)(e);e=e.replace(/_/g,"").split(":").reduce((e,t)=>e*s(60)+s(t),s(0));return"-"===r?s(-1)*e:e}function Rr(e){let t=e.value,r=e=>e;if("bigint"==typeof t)r=e=>BigInt(e);else if(isNaN(t)||!isFinite(t))return y(e);let s="";t<0&&(s="-",t*=r(-1));var e=r(60),n=[t%e];return t<60?n.unshift(0):(t=(t-n[0])/e,n.unshift(t%e),60<=t&&(t=(t-n[0])/e,n.unshift(t))),s+n.map(e=>String(e).padStart(2,"0")).join(":").replace(/000000\d*$/,"")}var Dr={identify:e=>"bigint"==typeof e||Number.isInteger(e),default:!0,tag:"tag:yaml.org,2002:int",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,resolve:(e,t,{intAsBigInt:r})=>Lr(e,r),stringify:Rr},Vr={identify:e=>"number"==typeof e,default:!0,tag:"tag:yaml.org,2002:float",format:"TIME",test:/^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,resolve:e=>Lr(e,!1),stringify:Rr};let qr={identify:e=>e instanceof Date,default:!0,tag:"tag:yaml.org,2002:timestamp",test:RegExp("^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})(?:(?:t|T|[ \\t]+)([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?)?$"),resolve(e){e=e.match(qr.test);if(!e)throw new Error("!!timestamp expects a date, starting with yyyy-mm-dd");var[,t,r,s,n,i,a]=e.map(Number),o=e[7]?Number((e[7]+"00").substr(1,3)):0;let l=Date.UTC(t,r-1,s,n||0,i||0,a||0,o);t=e[8];if(t&&"Z"!==t){let e=Lr(t,!1);Math.abs(e)<30&&(e*=60),l-=6e4*e}return new Date(l)},stringify:({value:e})=>e.toISOString().replace(/(T00:00:00)?\.000Z$/,"")};xr=[tr,sr,nr,ir,Er,Sr,xr,Ar,Ir,Tr,Or,w,t,gr,m,$r,wr,Mr,Dr,Vr,qr];let Kr=new Map([["core",hr],["failsafe",[tr,sr,nr]],["json",yr],["yaml11",xr],["yaml-1.1",xr]]),Br={binary:gr,bool:ar,float:or,floatExp:re,floatNaN:oe,floatTime:Vr,int:dr,intHex:fr,intOct:pr,intTime:Dr,map:tr,merge:m,null:ir,omap:$r,pairs:wr,seq:sr,set:Mr,timestamp:qr},Ur={"tag:yaml.org,2002:binary":gr,"tag:yaml.org,2002:merge":m,"tag:yaml.org,2002:omap":$r,"tag:yaml.org,2002:pairs":wr,"tag:yaml.org,2002:set":Mr,"tag:yaml.org,2002:timestamp":qr};function Fr(e,t,r){var s=Kr.get(t);if(s&&!e)return r&&!s.includes(m)?s.concat(m):s.slice();let n=s;if(!n){if(!Array.isArray(e))throw s=Array.from(Kr.keys()).filter(e=>"yaml11"!==e).map(e=>JSON.stringify(e)).join(", "),new Error(`Unknown schema "${t}"; use one of ${s} or define customTags array`);n=[]}if(Array.isArray(e))for(var i of e)n=n.concat(i);else"function"==typeof e&&(n=e(n.slice()));return(n=r?n.concat(m):n).reduce((e,t)=>{var r="string"==typeof t?Br[t]:t;if(r)return e.includes(r)||e.push(r),e;throw r=JSON.stringify(t),e=Object.keys(Br).map(e=>JSON.stringify(e)).join(", "),new Error(`Unknown custom tag ${r}; use one of `+e)},[])}let zr=(e,t)=>e.key<t.key?-1:e.key>t.key?1:0;class Gr{constructor({compat:e,customTags:t,merge:r,resolveKnownTags:s,schema:n,sortMapEntries:i,toStringDefaults:a}){this.compat=Array.isArray(e)?Fr(e,"compat"):e?Fr(null,e):null,this.name="string"==typeof n&&n||"core",this.knownTags=s?Ur:{},this.tags=Fr(t,this.name,r),this.toStringOptions=a??null,Object.defineProperty(this,st,{value:tr}),Object.defineProperty(this,d,{value:nr}),Object.defineProperty(this,it,{value:sr}),this.sortMapEntries="function"==typeof i?i:!0===i?zr:null}clone(){var e=Object.create(Gr.prototype,Object.getOwnPropertyDescriptors(this));return e.tags=this.tags.slice(),e}}class Jr{constructor(e,t,r){this.commentBefore=null,this.comment=null,this.errors=[],this.warnings=[],Object.defineProperty(this,i,{value:rt});let s=null;"function"==typeof t||Array.isArray(t)?s=t:void 0===r&&t&&(r=t,t=void 0);t=Object.assign({intAsBigInt:!1,keepSourceTokens:!1,logLevel:"warn",prettyErrors:!0,strict:!0,stringKeys:!1,uniqueKeys:!0,version:"1.2"},r);let n=(this.options=t).version;r?._directives?(this.directives=r._directives.atDocument(),this.directives.yaml.explicit&&(n=this.directives.yaml.version)):this.directives=new c({version:n}),this.setSchema(n,r),this.contents=void 0===e?null:this.createNode(e,s,r)}clone(){var e=Object.create(Jr.prototype,{[i]:{value:rt}});return e.commentBefore=this.commentBefore,e.comment=this.comment,e.errors=this.errors.slice(),e.warnings=this.warnings.slice(),e.options=Object.assign({},this.options),this.directives&&(e.directives=this.directives.clone()),e.schema=this.schema.clone(),e.contents=E(this.contents)?this.contents.clone(e.schema):this.contents,this.range&&(e.range=this.range.slice()),e}add(e){Hr(this.contents)&&this.contents.add(e)}addIn(e,t){Hr(this.contents)&&this.contents.addIn(e,t)}createAlias(e,t){var r;return e.anchor||(r=gt(this),e.anchor=!t||r.has(t)?vt(t||"a",r):t),new _t(e.anchor)}createNode(e,t,r){let s=void 0;"function"==typeof t?(e=t.call({"":e},"",e),s=t):Array.isArray(t)?(0<(n=t.filter(e=>"number"==typeof e||e instanceof String||e instanceof Number).map(String)).length&&(t=t.concat(n)),s=t):void 0===r&&t&&(r=t,t=void 0);var{aliasDuplicateObjects:n,anchorPrefix:t,flow:r,keepUndefined:i,onTagObj:a,tag:o}=r??{},{onAnchor:t,setAnchors:l,sourceObjects:c}=((t,r)=>{let s=[],n=new Map,i=null;return{onAnchor:e=>{s.push(e),i=i||gt(t);e=vt(r,i);return i.add(e),e},setAnchors:()=>{for(var e of s){var t,r=n.get(e);if("object"!=typeof r||!r.anchor||!$(r.node)&&!k(r.node))throw(t=new Error("Failed to resolve repeated object (this should not happen)")).source=e,t;r.node.anchor=r.anchor}},sourceObjects:n}})(this,t||"a"),e=Et(e,o,{aliasDuplicateObjects:n??!0,keepUndefined:i??!1,onAnchor:t,onTagObj:a,replacer:s,schema:this.schema,sourceObjects:c});return r&&k(e)&&(e.flow=!0),l(),e}createPair(e,t,r={}){e=this.createNode(e,null,r),t=this.createNode(t,null,r);return new j(e,t)}delete(e){return!!Hr(this.contents)&&this.contents.delete(e)}deleteIn(e){return Ot(e)?null!=this.contents&&!(this.contents=null):!!Hr(this.contents)&&this.contents.deleteIn(e)}get(e,t){return k(this.contents)?this.contents.get(e,t):void 0}getIn(e,t){return Ot(e)?!t&&$(this.contents)?this.contents.value:this.contents:k(this.contents)?this.contents.getIn(e,t):void 0}has(e){return!!k(this.contents)&&this.contents.has(e)}hasIn(e){return Ot(e)?void 0!==this.contents:!!k(this.contents)&&this.contents.hasIn(e)}set(e,t){null==this.contents?this.contents=St(this.schema,[e],t):Hr(this.contents)&&this.contents.set(e,t)}setIn(e,t){Ot(e)?this.contents=t:null==this.contents?this.contents=St(this.schema,Array.from(e),t):Hr(this.contents)&&this.contents.setIn(e,t)}setSchema(e,t={}){let r;switch(e="number"==typeof e?String(e):e){case"1.1":this.directives?this.directives.yaml.version="1.1":this.directives=new c({version:"1.1"}),r={resolveKnownTags:!1,schema:"yaml-1.1"};break;case"1.2":case"next":this.directives?this.directives.yaml.version=e:this.directives=new c({version:e}),r={resolveKnownTags:!0,schema:"core"};break;case null:this.directives&&delete this.directives,r=null;break;default:var s=JSON.stringify(e);throw new Error("Expected '1.1', '1.2' or null as first argument, but found: "+s)}if(t.schema instanceof Object)this.schema=t.schema;else{if(!r)throw new Error("With a null YAML version, the { schema: Schema } option is required");this.schema=new Gr(Object.assign(r,t))}}toJS({json:r,jsonArg:e,mapAsMap:t,maxAliasCount:s,onAnchor:n,reviver:i}={}){r={anchors:new Map,doc:this,keep:!r,mapAsMap:!0===t,mapKeyWarned:!1,maxAliasCount:"number"==typeof s?s:100};let a=h(this.contents,e??"",r);if("function"==typeof n)for(let{count:e,res:t}of r.anchors.values())n(t,e);return"function"==typeof i?bt(i,{"":a},"",a):a}toJSON(e,t){return this.toJS({json:!0,jsonArg:e,mapAsMap:!1,onAnchor:t})}toString(n={}){if(0<this.errors.length)throw new Error("Document with errors cannot be stringified");if("indent"in n&&(!Number.isInteger(n.indent)||Number(n.indent)<=0))throw i=JSON.stringify(n.indent),new Error('"indent" option must be a positive integer, not '+i);{var i=this,a=[];let t=!0===n.directives;!1!==n.directives&&i.directives&&((o=i.directives.toString(i))?(a.push(o),t=!0):i.directives.docStart&&(t=!0)),t&&a.push("---");var o=Ut(i,n),n=o.options.commentString;i.commentBefore&&(1!==a.length&&a.unshift(""),l=n(i.commentBefore),a.unshift(O(l,"")));let r=!1,s=null;if(i.contents){E(i.contents)&&(i.contents.spaceBefore&&t&&a.push(""),i.contents.commentBefore&&(l=n(i.contents.commentBefore),a.push(O(l,""))),o.forceBlockIndent=!!i.comment,s=i.contents.comment);var l=s?void 0:()=>r=!0;let e=Ft(i.contents,o,()=>s=null,l);s&&(e+=Nt(e,"",n(s))),"|"!==e[0]&&">"!==e[0]||"---"!==a[a.length-1]?a.push(e):a[a.length-1]="--- "+e}else a.push(Ft(i.contents,o));if(i.directives?.docEnd)i.comment?(l=n(i.comment)).includes("\n")?(a.push("..."),a.push(O(l,""))):a.push("... "+l):a.push("...");else{let e=i.comment;(e=e&&r?e.replace(/^\n+/,""):e)&&(r&&!s||""===a[a.length-1]||a.push(""),a.push(O(n(e),"")))}return a.join("\n")+"\n"}}}function Hr(e){if(k(e))return 1;throw new Error("Expected a YAML collection as document contents")}class Wr extends Error{constructor(e,t,r,s){super(),this.name=e,this.code=r,this.message=s,this.pos=t}}class Yr extends Wr{constructor(e,t,r){super("YAMLParseError",e,t,r)}}class Qr extends Wr{constructor(e,t,r){super("YAMLWarning",e,t,r)}}let Zr=(o,l)=>s=>{if(-1!==s.pos[0]){s.linePos=s.pos.map(e=>l.linePos(e));var{line:n,col:i}=s.linePos[0];s.message+=` at line ${n}, column `+i;let t=i-1,r=o.substring(l.lineStarts[n-1],l.lineStarts[n]).replace(/[\n\r]+$/,"");if(60<=t&&80<r.length&&(a=Math.min(t-39,r.length-79),r="…"+r.substring(a),t-=a-1),80<r.length&&(r=r.substring(0,79)+"…"),1<n&&/^ *$/.test(r.substring(0,t))){let e=o.substring(l.lineStarts[n-2],l.lineStarts[n-1]);80<e.length&&(e=e.substring(0,79)+"…\n"),r=e+r}if(/[^ ]/.test(r)){let e=1;var a=s.linePos[1],n=(a&&a.line===n&&a.col>i&&(e=Math.max(1,Math.min(a.col-i,80-t)))," ".repeat(t)+"^".repeat(e));s.message+=`:


${r}

${n}

`}}};function Xr(e,{flow:t,indicator:r,next:s,offset:n,onError:i,parentIndent:a,startOnNewline:o}){let l=!1,c=o,u=o,p="",d="",f=!1,h=!1,m=null,y=null,g=null,v=null,b=null,w=null,_=null;for(var $ of e)switch(h&&("space"!==$.type&&"newline"!==$.type&&"comma"!==$.type&&i($.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),h=!1),m&&(c&&"comment"!==$.type&&"newline"!==$.type&&i(m,"TAB_AS_INDENT","Tabs are not allowed as indentation"),m=null),$.type){case"space":t||"doc-start"===r&&"flow-collection"===s?.type||!$.source.includes("\t")||(m=$),u=!0;break;case"comment":u||i($,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");var k=$.source.substring(1)||" ";p?p+=d+k:p=k,d="",c=!1;break;case"newline":c?p?p+=$.source:w&&"seq-item-ind"===r||(l=!0):d+=$.source,c=!0,f=!0,(y||g)&&(v=$),u=!0;break;case"anchor":y&&i($,"MULTIPLE_ANCHORS","A node can have at most one anchor"),$.source.endsWith(":")&&i($.offset+$.source.length-1,"BAD_ALIAS","Anchor ending in : is ambiguous",!0),y=$,null===_&&(_=$.offset),c=!1,u=!1,h=!0;break;case"tag":g&&i($,"MULTIPLE_TAGS","A node can have at most one tag"),g=$,null===_&&(_=$.offset),c=!1,u=!1,h=!0;break;case r:(y||g)&&i($,"BAD_PROP_ORDER",`Anchors and tags must be after the ${$.source} indicator`),w&&i($,"UNEXPECTED_TOKEN",`Unexpected ${$.source} in `+(t??"collection")),w=$,c="seq-item-ind"===r||"explicit-key-ind"===r,u=!1;break;case"comma":if(t){b&&i($,"UNEXPECTED_TOKEN","Unexpected , in "+t),b=$,c=!1,u=!1;break}default:i($,"UNEXPECTED_TOKEN",`Unexpected ${$.type} token`),c=!1,u=!1}o=e[e.length-1],e=o?o.offset+o.source.length:n;return h&&s&&"space"!==s.type&&"newline"!==s.type&&"comma"!==s.type&&("scalar"!==s.type||""!==s.source)&&i(s.offset,"MISSING_CHAR","Tags and anchors must be separated from the next token by white space"),m&&(c&&m.indent<=a||"block-map"===s?.type||"block-seq"===s?.type)&&i(m,"TAB_AS_INDENT","Tabs are not allowed as indentation"),{comma:b,found:w,spaceBefore:l,comment:p,hasNewline:f,anchor:y,tag:g,newlineAfterProp:v,end:e,start:_??e}}function es(e){if(e)switch(e.type){case"alias":case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":if(e.source.includes("\n"))return 1;if(e.end)for(var t of e.end)if("newline"===t.type)return 1;return;case"flow-collection":for(var r of e.items){for(var s of r.start)if("newline"===s.type)return 1;if(r.sep)for(var n of r.sep)if("newline"===n.type)return 1;if(es(r.key)||es(r.value))return 1}return;default:return 1}}function ts(e,t,r){var s;"flow-collection"!==t?.type||(s=t.end[0]).indent!==e||"]"!==s.source&&"}"!==s.source||!es(t)||r(s,"BAD_INDENT","Flow end indicator should be more indented than parent",!0)}function rs(e,r,s){e=e.options.uniqueKeys;if(!1!==e){let t="function"==typeof e?e:(e,t)=>e===t||$(e)&&$(t)&&e.value===t.value;return r.some(e=>t(e.key,s))}}let ss="All mapping items must start at the same column";function ns(r,s,n,i){let a="";if(r){let e=!1,t="";for(var o of r){var{source:l,type:c}=o;switch(c){case"space":e=!0;break;case"comment":n&&!e&&i(o,"MISSING_CHAR","Comments must be separated from other tokens by white space characters");var u=l.substring(1)||" ";a?a+=t+u:a=u,t="";break;case"newline":a&&(t+=l),e=!0;break;default:i(o,"UNEXPECTED_TOKEN",`Unexpected ${c} at node end`)}s+=l.length}}return{comment:a,offset:s}}let is="Block collections are not allowed within flow collections",as=e=>e&&("block-map"===e.type||"block-seq"===e.type);function os(e,t,r,s,n,i){e=("block-map"===r.type?({composeNode:e,composeEmptyNode:t},r,s,n,i)=>{var a,o=new(i?.nodeClass??N)(r.schema);r.atRoot&&(r.atRoot=!1);let l=s.offset,c=null;for(a of s.items){var{start:u,key:p,sep:d,value:f}=a,h=Xr(u,{indicator:"explicit-key-ind",next:p??d?.[0],offset:l,onError:n,parentIndent:s.indent,startOnNewline:!0}),m=!h.found;if(m){if(p&&("block-seq"===p.type?n(l,"BLOCK_AS_IMPLICIT_KEY","A block sequence may not be used as an implicit map key"):"indent"in p&&p.indent!==s.indent&&n(l,"BAD_INDENT",ss)),!h.anchor&&!h.tag&&!d){c=h.end,h.comment&&(o.comment?o.comment+="\n"+h.comment:o.comment=h.comment);continue}(h.newlineAfterProp||es(p))&&n(p??u[u.length-1],"MULTILINE_IMPLICIT_KEY","Implicit keys need to be on a single line")}else h.found?.indent!==s.indent&&n(l,"BAD_INDENT",ss);r.atKey=!0;var y=h.end,u=p?e(r,p,h,n):t(r,y,u,null,h,n),y=(r.schema.compat&&ts(s.indent,p,n),r.atKey=!1,rs(r,o.items,u)&&n(y,"DUPLICATE_KEY","Map keys must be unique"),Xr(d??[],{indicator:"map-value-ind",next:f,offset:u.range[2],onError:n,parentIndent:s.indent,startOnNewline:!p||"block-scalar"===p.type}));l=y.end,y.found?(m&&("block-map"!==f?.type||y.hasNewline||n(l,"BLOCK_AS_IMPLICIT_KEY","Nested mappings are not allowed in compact mappings"),r.options.strict)&&h.start<y.found.offset-1024&&n(u.range,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit block mapping key"),p=f?e(r,f,y,n):t(r,l,d,null,y,n),r.schema.compat&&ts(s.indent,f,n),l=p.range[2],h=new j(u,p),r.options.keepSourceTokens&&(h.srcToken=a),o.items.push(h)):(m&&n(u.range,"MISSING_CHAR","Implicit map keys need to be followed by map values"),y.comment&&(u.comment?u.comment+="\n"+y.comment:u.comment=y.comment),d=new j(u),r.options.keepSourceTokens&&(d.srcToken=a),o.items.push(d))}return c&&c<l&&n(c,"IMPOSSIBLE","Map comment with trailing content"),o.range=[s.offset,l,c??l],o}:"block-seq"===r.type?({composeNode:e,composeEmptyNode:t},r,s,n,i)=>{var a,o,l=new(i?.nodeClass??x)(r.schema);r.atRoot&&(r.atRoot=!1),r.atKey&&(r.atKey=!1);let c=s.offset,u=null;for({start:a,value:o}of s.items){var p=Xr(a,{indicator:"seq-item-ind",next:o,offset:c,onError:n,parentIndent:s.indent,startOnNewline:!0});if(!p.found){if(!(p.anchor||p.tag||o)){u=p.end,p.comment&&(l.comment=p.comment);continue}o&&"block-seq"===o.type?n(p.end,"BAD_INDENT","All sequence items must start at the same column"):n(c,"MISSING_CHAR","Sequence item without - indicator")}p=o?e(r,o,p,n):t(r,p.end,a,null,p,n);r.schema.compat&&ts(s.indent,o,n),c=p.range[2],l.items.push(p)}return l.range=[s.offset,c,u??c],l}:({composeNode:t,composeEmptyNode:r},s,n,i,e)=>{var a="{"===n.start.source,o=a?"flow map":"flow sequence",l=new(e?.nodeClass??(a?N:x))(s.schema);l.flow=!0,(e=s.atRoot)&&(s.atRoot=!1),s.atKey&&(s.atKey=!1);let c=n.offset+n.start.source.length;for(let e=0;e<n.items.length;++e){var u=n.items[e],{start:p,key:d,sep:f,value:h}=u,m=Xr(p,{flow:o,indicator:"explicit-key-ind",next:d??f?.[0],offset:c,onError:i,parentIndent:n.indent,startOnNewline:!1});if(!m.found){if(!(m.anchor||m.tag||f||h)){0===e&&m.comma?i(m.comma,"UNEXPECTED_TOKEN","Unexpected , in "+o):e<n.items.length-1&&i(m.start,"UNEXPECTED_TOKEN","Unexpected empty item in "+o),m.comment&&(l.comment?l.comment+="\n"+m.comment:l.comment=m.comment),c=m.end;continue}!a&&s.options.strict&&es(d)&&i(d,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line")}if(0===e)m.comma&&i(m.comma,"UNEXPECTED_TOKEN","Unexpected , in "+o);else if(m.comma||i(m.start,"MISSING_CHAR",`Missing , between ${o} items`),m.comment){let t="";e:for(var y of p)switch(y.type){case"comma":case"space":break;case"comment":t=y.source.substring(1);break e;default:break e}if(t){let e=l.items[l.items.length-1];(e=P(e)?e.value??e.key:e).comment?e.comment+="\n"+t:e.comment=t,m.comment=m.comment.substring(t.length+1)}}if(a||f||m.found){s.atKey=!0;var g=m.end,v=d?t(s,d,m,i):r(s,g,p,null,m,i),b=(as(d)&&i(v.range,"BLOCK_IN_FLOW",is),s.atKey=!1,Xr(f??[],{flow:o,indicator:"map-value-ind",next:h,offset:v.range[2],onError:i,parentIndent:n.indent,startOnNewline:!1}));if(b.found){if(!a&&!m.found&&s.options.strict){if(f)for(var w of f){if(w===b.found)break;if("newline"===w.type){i(w,"MULTILINE_IMPLICIT_KEY","Implicit keys of flow sequence pairs need to be on a single line");break}}m.start<b.found.offset-1024&&i(b.found,"KEY_OVER_1024_CHARS","The : indicator must be at most 1024 chars after the start of an implicit flow sequence key")}}else h&&("source"in h&&h.source&&":"===h.source[0]?i(h,"MISSING_CHAR","Missing space after : in "+o):i(b.start,"MISSING_CHAR",`Missing , or : between ${o} items`));var d=h?t(s,h,b,i):b.found?r(s,b.end,f,null,b,i):null,_=(d?as(h)&&i(d.range,"BLOCK_IN_FLOW",is):b.comment&&(v.comment?v.comment+="\n"+b.comment:v.comment=b.comment),new j(v,d));s.options.keepSourceTokens&&(_.srcToken=u),a?(rs(s,(u=l).items,v)&&i(g,"DUPLICATE_KEY","Map keys must be unique"),u.items.push(_)):((g=new N(s.schema)).flow=!0,g.items.push(_),u=(d??v).range,g.range=[v.range[0],u[1],u[2]],l.items.push(g)),c=d?d.range[2]:b.end}else{_=h?t(s,h,m,i):r(s,m.end,f,null,m,i);l.items.push(_),c=_.range[2],as(h)&&i(_.range,"BLOCK_IN_FLOW",is)}}var $,k=a?"}":"]",[E,...S]=n.end;let O=c;return E&&E.source===k?O=E.offset+E.source.length:($=o[0].toUpperCase()+o.substring(1),i(c,e?"MISSING_CHAR":"BAD_INDENT",e?$+" must end with a "+k:$+" in block collection must be sufficiently indented and end with a "+k),E&&1!==E.source.length&&S.unshift(E)),0<S.length?((e=ns(S,O,s.options.strict,i)).comment&&(l.comment?l.comment+="\n"+e.comment:l.comment=e.comment),l.range=[n.offset,O,e.offset]):l.range=[n.offset,O,O],l})(e,t,r,s,i),t=e.constructor;return"!"===n||n===t.tagName?e.tag=t.tagName:n&&(e.tag=n),e}function ls(t,r,s){var n=r.offset,i=(({offset:t,props:r},s,n)=>{if("block-scalar-header"!==r[0].type)return n(r[0],"IMPOSSIBLE","Block scalar header not found"),null;let i=r[0].source,e=i[0],a=0,o="",l=-1;for(let e=1;e<i.length;++e){var c,u=i[e];o||"-"!==u&&"+"!==u?(c=Number(u),!a&&c?a=c:-1===l&&(l=t+e)):o=u}-1!==l&&n(l,"UNEXPECTED_TOKEN","Block scalar header includes extra characters: "+i);let p=!1,d="",f=i.length;for(let e=1;e<r.length;++e){var h=r[e];switch(h.type){case"space":p=!0;case"newline":f+=h.source.length;break;case"comment":s&&!p&&n(h,"MISSING_CHAR","Comments must be separated from other tokens by white space characters"),f+=h.source.length,d=h.source.substring(1);break;case"error":n(h,"UNEXPECTED_TOKEN",h.message),f+=h.source.length;break;default:var m="Unexpected token in block scalar header: "+h.type,m=(n(h,"UNEXPECTED_TOKEN",m),h.source);m&&"string"==typeof m&&(f+=m.length)}}return{mode:e,indent:a,chomp:o,comment:d,length:f}})(r,t.options.strict,s);if(!i)return{value:"",type:null,comment:"",range:[n,n,n]};var a=">"===i.mode?S.BLOCK_FOLDED:S.BLOCK_LITERAL,o=r.source?(e=>{var t=e.split(/\n( *)/),r=(e=t[0]).match(/^( *)/),s=[r=r?.[1]?[r[1],e.slice(r[1].length)]:["",e]];for(let e=1;e<t.length;e+=2)s.push([t[e],t[e+1]]);return s})(r.source):[];let l=o.length;for(let e=o.length-1;0<=e;--e){var c=o[e][1];if(""!==c&&"\r"!==c)break;l=e}if(0===l){let e="+"===i.chomp&&0<o.length?"\n".repeat(Math.max(1,o.length-1)):"",t=n+i.length;return r.source&&(t+=r.source.length),{value:e,type:a,comment:i.comment,range:[n,t,t]}}let u=r.indent+i.indent,p=r.offset+i.length,d=0;for(let e=0;e<l;++e){var[f,h]=o[e];if(""!==h&&"\r"!==h){f.length<u&&s(p+f.length,"MISSING_CHAR","Block scalars with more-indented leading empty lines must use an explicit indentation indicator"),0===i.indent&&(u=f.length),d=e,0!==u||t.atRoot||s(p,"BAD_INDENT","Block scalar values in collections must be indented");break}0===i.indent&&f.length>u&&(u=f.length),p+=f.length+h.length+1}for(let e=o.length-1;e>=l;--e)o[e][0].length>u&&(l=e+1);let m="",y="",g=!1;for(let e=0;e<d;++e)m+=o[e][0].slice(u)+"\n";for(let r=d;r<l;++r){let[e,t]=o[r];p+=e.length+t.length+1;var v,b="\r"===t[t.length-1];(t=b?t.slice(0,-1):t)&&e.length<u&&(v=i.indent?"explicit indentation indicator":"first line",s(p-t.length-(b?2:1),"BAD_INDENT","Block scalar lines must not be less indented than their "+v),e=""),a===S.BLOCK_LITERAL?(m+=y+e.slice(u)+t,y="\n"):e.length>u||"\t"===t[0]?(" "===y?y="\n":g||"\n"!==y||(y="\n\n"),m+=y+e.slice(u)+t,y="\n",g=!0):""===t?"\n"===y?m+="\n":y="\n":(m+=y+t,y=" ",g=!1)}switch(i.chomp){case"-":break;case"+":for(let e=l;e<o.length;++e)m+="\n"+o[e][0].slice(u);"\n"!==m[m.length-1]&&(m+="\n");break;default:m+="\n"}r=n+i.length+r.source.length;return{value:m,type:a,comment:i.comment,range:[n,r,r]}}function cs(e,t,s){let{offset:n,type:r,source:i,end:a}=e,o,l;var c=(e,t,r)=>s(n+e,t,r);switch(r){case"scalar":o=S.PLAIN,l=((e,t)=>{let r="";switch(e[0]){case"\t":r="a tab character";break;case",":r="flow indicator character ,";break;case"%":r="directive indicator character %";break;case"|":case">":r="block scalar indicator "+e[0];break;case"@":case"`":r="reserved character "+e[0]}return r&&t(0,"BAD_SCALAR_START","Plain value cannot start with "+r),us(e)})(i,c);break;case"single-quoted-scalar":o=S.QUOTE_SINGLE,l=((e,t)=>("'"===e[e.length-1]&&1!==e.length||t(e.length,"MISSING_CHAR","Missing closing 'quote"),us(e.slice(1,-1)).replace(/''/g,"'")))(i,c);break;case"double-quoted-scalar":o=S.QUOTE_DOUBLE,l=((r,s)=>{let n="";for(let t=1;t<r.length-1;++t){var i=r[t];if("\r"!==i||"\n"!==r[t+1])if("\n"===i){var{fold:a,offset:o}=((e,t)=>{let r="",s=e[t+1];for(;!(" "!==s&&"\t"!==s&&"\n"!==s&&"\r"!==s||"\r"===s&&"\n"!==e[t+2]);)"\n"===s&&(r+="\n"),t+=1,s=e[t+1];return{fold:r=r||" ",offset:t}})(r,t);n+=a,t=o}else if("\\"===i){let e=r[++t];a=ps[e];if(a)n+=a;else if("\n"===e)for(e=r[t+1];" "===e||"\t"===e;)e=r[++t+1];else if("\r"===e&&"\n"===r[t+1])for(e=r[++t+1];" "===e||"\t"===e;)e=r[++t+1];else"x"===e||"u"===e||"U"===e?(o={x:2,u:4,U:8}[e],n+=((e,t,r,s)=>{var n=e.substr(t,r),i=(i=n.length===r&&/^[0-9a-fA-F]+$/.test(n))?parseInt(n,16):NaN;return isNaN(i)?(n=e.substr(t-2,r+2),s(t-2,"BAD_DQ_ESCAPE","Invalid escape sequence "+n),n):String.fromCodePoint(i)})(r,t+1,o,s),t+=o):(l=r.substr(t-1,2),s(t-1,"BAD_DQ_ESCAPE","Invalid escape sequence "+l),n+=l)}else if(" "===i||"\t"===i){var l=t;let e=r[t+1];for(;" "===e||"\t"===e;)e=r[++t+1];"\n"===e||"\r"===e&&"\n"===r[t+2]||(n+=t>l?r.slice(l,t+1):i)}else n+=i}return'"'===r[r.length-1]&&1!==r.length||s(r.length,"MISSING_CHAR",'Missing closing "quote'),n})(i,c);break;default:return s(e,"UNEXPECTED_TOKEN","Expected a flow scalar value, but found: "+r),{value:"",type:null,comment:"",range:[n,n+i.length,n+i.length]}}var u=n+i.length,t=ns(a,u,t,s);return{value:l,type:o,comment:t.comment,range:[n,u,t.offset]}}function us(e){let t,r;try{t=new RegExp("(.*?)(?<![ \t])[ \t]*\r?\n","sy"),r=new RegExp("[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n","sy")}catch{t=/(.*?)[ \t]*\r?\n/sy,r=/[ \t]*(.*?)[ \t]*\r?\n/sy}let s=t.exec(e);if(!s)return e;let n=s[1],i=" ",a=t.lastIndex;for(r.lastIndex=a;s=r.exec(e);)""===s[1]?"\n"===i?n+=i:i="\n":(n+=i+s[1],i=" "),a=r.lastIndex;var o=/[ \t]*(.*)/sy;return o.lastIndex=a,s=o.exec(e),n+i+(s?.[1]??"")}let ps={0:"\0",a:"",b:"\b",e:"",f:"\f",n:"\n",r:"\r",t:"\t",v:"\v",N:"",_:" ",L:"\u2028",P:"\u2029"," ":" ",'"':'"',"/":"/","\\":"\\","\t":"\t"};function ds(t,r,s,n){var{value:i,type:e,comment:a,range:o}="block-scalar"===r.type?ls(t,r,n):cs(r,t.options.strict,n),l=s?t.directives.tagName(s.source,e=>n(s,"TAG_RESOLVE_FAILED",e)):null;let c;c=t.options.stringKeys&&t.atKey?t.schema[d]:l?((e,t,r,s,n)=>{if("!"!==r){var i,a,o=[];for(i of e.tags)if(!i.collection&&i.tag===r){if(!i.default||!i.test)return i;o.push(i)}for(a of o)if(a.test?.test(t))return a;var l=e.knownTags[r];if(l&&!l.collection)return e.tags.push(Object.assign({},l,{default:!1,test:void 0})),l;n(s,"TAG_RESOLVE_FAILED","Unresolved tag: "+r,"tag:yaml.org,2002:str"!==r)}return e[d]})(t.schema,i,l,s,n):"scalar"===r.type?(({atKey:t,directives:e,schema:r},s,n,i)=>{var a,o=r.tags.find(e=>(!0===e.default||t&&"key"===e.default)&&e.test?.test(s))||r[d];return r.compat&&(r=r.compat.find(e=>e.default&&e.test?.test(s))??r[d],o.tag!==r.tag)&&(a=e.tagString(o.tag),e=e.tagString(r.tag),i(n,"TAG_RESOLVE_FAILED",`Value may be parsed as either ${a} or `+e,!0)),o})(t,i,r,n):t.schema[d];let u;try{var p=c.resolve(i,e=>n(s??r,"TAG_RESOLVE_FAILED",e),t.options);u=$(p)?p:new S(p)}catch(e){t=e instanceof Error?e.message:String(e);n(s??r,"TAG_RESOLVE_FAILED",t),u=new S(i)}return u.range=o,u.source=i,e&&(u.type=e),l&&(u.tag=l),c.format&&(u.format=c.format),a&&(u.comment=a),u}let fs={composeNode:hs,composeEmptyNode:ms};function hs(e,t,r,s){var n=e.atKey,{spaceBefore:i,comment:a,anchor:o,tag:l}=r;let c,u=!0;switch(t.type){case"alias":c=(({options:e},{offset:t,source:r,end:s},n)=>{var i=new _t(r.substring(1));return""===i.source&&n(t,"BAD_ALIAS","Alias cannot be an empty string"),i.source.endsWith(":")&&n(t+r.length-1,"BAD_ALIAS","Alias ending in : is ambiguous",!0),r=t+r.length,s=ns(s,r,e.strict,n),i.range=[t,r,s.offset],s.comment&&(i.comment=s.comment),i})(e,t,s),(o||l)&&s(t,"ALIAS_PROPS","An alias node must not specify any properties");break;case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"block-scalar":c=ds(e,t,l,s),o&&(c.anchor=o.source.substring(1));break;case"block-map":case"block-seq":case"flow-collection":c=((e,t,r,s,n)=>{let i=s.tag,a=i?t.directives.tagName(i.source,e=>n(i,"TAG_RESOLVE_FAILED",e)):null,o=("block-seq"===r.type&&({anchor:s,newlineAfterProp:c}=s,s=s&&i?s.offset>i.offset?s:i:s??i)&&(!c||c.offset<s.offset)&&n(s,"MISSING_CHAR","Missing newline after block sequence props"),"block-map"===r.type||"block-seq"!==r.type&&"{"===r.start.source?"map":"seq");if(!i||!a||"!"===a||a===N.tagName&&"map"==o||a===x.tagName&&"seq"==o)return os(e,t,r,n,a);let l=t.schema.tags.find(e=>e.tag===a&&e.collection===o);if(!l){var c=t.schema.knownTags[a];if(!c||c.collection!==o)return c?.collection?n(i,"BAD_COLLECTION_TYPE",`${c.tag} used for ${o} collection, but expects `+c.collection,!0):n(i,"TAG_RESOLVE_FAILED","Unresolved tag: "+a,!0),os(e,t,r,n,a);t.schema.tags.push(Object.assign({},c,{default:!1})),l=c}return s=os(e,t,r,n,a,l),c=l.resolve?.(s,e=>n(i,"TAG_RESOLVE_FAILED",e),t.options)??s,(e=E(c)?c:new S(c)).range=s.range,e.tag=a,l?.format&&(e.format=l.format),e})(fs,e,t,r,s),o&&(c.anchor=o.source.substring(1));break;default:s(t,"UNEXPECTED_TOKEN","error"===t.type?t.message:`Unsupported token (type: ${t.type})`),c=ms(e,t.offset,void 0,null,r,s),u=!1}return o&&""===c.anchor&&s(o,"BAD_ALIAS","Anchor cannot be an empty string"),n&&e.options.stringKeys&&(!$(c)||"string"!=typeof c.value||c.tag&&"tag:yaml.org,2002:str"!==c.tag)&&s(l??t,"NON_STRING_KEY","With stringKeys, all keys must be strings"),i&&(c.spaceBefore=!0),a&&("scalar"===t.type&&""===t.source?c.comment=a:c.commentBefore=a),e.options.keepSourceTokens&&u&&(c.srcToken=t),c}function ms(e,t,r,s,{spaceBefore:n,comment:i,anchor:a,tag:o,end:l},c){e=ds(e,{type:"scalar",offset:((r,s,e)=>{if(s)for(let t=(e=null===e?s.length:e)-1;0<=t;--t){let e=s[t];switch(e.type){case"space":case"comment":case"newline":r-=e.source.length;continue}for(e=s[++t];"space"===e?.type;)r+=e.source.length,e=s[++t];break}return r})(t,r,s),indent:-1,source:""},o,c);return a&&(e.anchor=a.source.substring(1),""===e.anchor)&&c(a,"BAD_ALIAS","Anchor cannot be an empty string"),n&&(e.spaceBefore=!0),i&&(e.comment=i,e.range[2]=l),e}function ys(e){var t;return"number"==typeof e?[e,e+1]:Array.isArray(e)?2===e.length?e:[e[0],e[1]]:({offset:e,source:t}=e,[e,e+("string"==typeof t?t.length:1)])}function gs(t){let r="",s=!1,n=!1;for(let e=0;e<t.length;++e){var i=t[e];switch(i[0]){case"#":r+=(""===r?"":n?"\n\n":"\n")+(i.substring(1)||" "),s=!0,n=!1;break;case"%":"#"!==t[e+1]?.[0]&&(e+=1),s=!1;break;default:s||(n=!0),s=!1}}return{comment:r,afterEmptyLine:n}}class vs{constructor(e={}){this.doc=null,this.atDirectives=!1,this.prelude=[],this.errors=[],this.warnings=[],this.onError=(e,t,r,s)=>{e=ys(e);s?this.warnings.push(new Qr(e,t,r)):this.errors.push(new Yr(e,t,r))},this.directives=new c({version:e.version||"1.2"}),this.options=e}decorate(e,t){var{comment:r,afterEmptyLine:s}=gs(this.prelude);if(r){var n=e.contents;if(t)e.comment=e.comment?e.comment+`

`+r:r;else if(s||e.directives.docStart||!n)e.commentBefore=r;else if(k(n)&&!n.flow&&0<n.items.length){let e=n.items[0];s=(e=P(e)?e.key:e).commentBefore;e.commentBefore=s?r+`

`+s:r}else{s=n.commentBefore;n.commentBefore=s?r+`

`+s:r}}t?(Array.prototype.push.apply(e.errors,this.errors),Array.prototype.push.apply(e.warnings,this.warnings)):(e.errors=this.errors,e.warnings=this.warnings),this.prelude=[],this.errors=[],this.warnings=[]}streamInfo(){return{comment:gs(this.prelude).comment,directives:this.directives,errors:this.errors,warnings:this.warnings}}*compose(e,t=!1,r=-1){for(var s of e)yield*this.next(s);yield*this.end(t,r)}*next(n){switch(n.type){case"directive":this.directives.add(n.source,(e,t,r)=>{var s=ys(n);s[0]+=e,this.onError(s,"BAD_DIRECTIVE",t,r)}),this.prelude.push(n.source),this.atDirectives=!0;break;case"document":[e,t,{offset:r,start:s,value:i,end:a},o]=[this.options,this.directives,n,this.onError],t=Object.assign({_directives:t},e),t={atKey:!1,atRoot:!0,directives:(e=new Jr(void 0,t)).directives,options:e.options,schema:e.schema},(l=Xr(s,{indicator:"doc-start",next:i??a?.[0],offset:r,onError:o,parentIndent:0,startOnNewline:!0})).found&&(e.directives.docStart=!0,!i||"block-map"!==i.type&&"block-seq"!==i.type||l.hasNewline||o(l.end,"MISSING_CHAR","Block collection cannot start on same line with directives-end marker")),e.contents=i?hs(t,i,l,o):ms(t,l.end,s,null,l,o),i=e.contents.range[2],(t=ns(a,i,!1,o)).comment&&(e.comment=t.comment),e.range=[r,i,t.offset];s=e;this.atDirectives&&!s.directives.docStart&&this.onError(n,"MISSING_CHAR","Missing directives-end/doc-start indicator line"),this.decorate(s,!1),this.doc&&(yield this.doc),this.doc=s,this.atDirectives=!1;break;case"byte-order-mark":case"space":break;case"comment":case"newline":this.prelude.push(n.source);break;case"error":l=n.source?n.message+": "+JSON.stringify(n.source):n.message,a=new Yr(ys(n),"UNEXPECTED_TOKEN",l);(this.atDirectives||!this.doc?this:this.doc).errors.push(a);break;case"doc-end":this.doc?(this.doc.directives.docEnd=!0,o=ns(n.end,n.offset+n.source.length,this.doc.options.strict,this.onError),this.decorate(this.doc,!0),o.comment&&(r=this.doc.comment,this.doc.comment=r?r+`

`+o.comment:o.comment),this.doc.range[2]=o.offset):this.errors.push(new Yr(ys(n),"UNEXPECTED_TOKEN","Unexpected doc-end without preceding document"));break;default:this.errors.push(new Yr(ys(n),"UNEXPECTED_TOKEN","Unsupported token "+n.type))}var e,t,r,s,i,a,o,l}*end(e=!1,t=-1){this.doc?(this.decorate(this.doc,!0),yield this.doc,this.doc=null):e&&(e=Object.assign({_directives:this.directives},this.options),e=new Jr(void 0,e),this.atDirectives&&this.onError(t,"MISSING_CHAR","Missing directives-end indicator line"),e.range=[0,t,t],this.decorate(e,!1),yield e)}}function bs(e,t){if(t)for(var r of t)switch(r.type){case"space":case"comment":e.push(r);break;case"newline":return e.push(r),1}}function ws(t,r,s){switch(t.type){case"scalar":case"double-quoted-scalar":case"single-quoted-scalar":t.type=s,t.source=r;break;case"block-scalar":{var n,i=t.props.slice(1);let e=r.length;"block-scalar-header"===t.props[0].type&&(e-=t.props[0].source.length);for(n of i)n.offset+=e;delete t.props,Object.assign(t,{type:s,source:r,end:i});break}case"block-map":case"block-seq":i={type:"newline",offset:t.offset+r.length,indent:t.indent,source:"\n"};delete t.items,Object.assign(t,{type:s,source:r,end:[i]});break;default:var e,i="indent"in t?t.indent:-1,a="end"in t&&Array.isArray(t.end)?t.end.filter(e=>"space"===e.type||"comment"===e.type||"newline"===e.type):[];for(e of Object.keys(t))"type"!==e&&"offset"!==e&&delete t[e];Object.assign(t,{type:s,indent:i,source:r,end:a})}}function _s(t){switch(t.type){case"block-scalar":{let e="";for(var r of t.props)e+=_s(r);return e+t.source}case"block-map":case"block-seq":{let e="";for(var s of t.items)e+=$s(s);return e}case"flow-collection":{let e=t.start.source;for(var n of t.items)e+=$s(n);for(var i of t.end)e+=i.source;return e}case"document":{let e=$s(t);if(t.end)for(var a of t.end)e+=a.source;return e}default:{let e=t.source;if("end"in t&&t.end)for(var o of t.end)e+=o.source;return e}}}function $s({start:e,key:t,sep:r,value:s}){let n="";for(var i of e)n+=i.source;if(t&&(n+=_s(t)),r)for(var a of r)n+=a.source;return s&&(n+=_s(s)),n}let ks=Symbol("break visit");Ar=Symbol("skip children");let Es=Symbol("remove item");function Ss(e,t){"type"in e&&"document"===e.type&&(e={start:e.start,value:e.value}),function s(n,e,i){let t=i(e,n);if("symbol"==typeof t)return t;for(var a of["key","value"]){let r=e[a];if(r&&"items"in r){for(let t=0;t<r.items.length;++t){let e=s(Object.freeze(n.concat([[a,t]])),r.items[t],i);if("number"==typeof e)t=e-1;else{if(e===ks)return ks;e===Es&&(r.items.splice(t,1),--t)}}"function"==typeof t&&"key"===a&&(t=t(e,n))}}return"function"==typeof t?t(e,n):t}(Object.freeze([]),e,t)}Ss.BREAK=ks,Ss.SKIP=Ar,Ss.REMOVE=Es,Ss.itemAtPath=(e,t)=>{let r=e;for(var[s,n]of t){s=r?.[s];if(!(s&&"items"in s))return;r=s.items[n]}return r},Ss.parentCollection=(e,t)=>{e=Ss.itemAtPath(e,t.slice(0,-1)),t=t[t.length-1][0],e=e?.[t];if(e&&"items"in e)return e;throw new Error("Parent collection not found")};let Os="\ufeff";function Ps(e){switch(e){case Os:return"byte-order-mark";case"":return"doc-mode";case"":return"flow-error-end";case"":return"scalar";case"---":return"doc-start";case"...":return"doc-end";case"":case"\n":case"\r\n":return"newline";case"-":return"seq-item-ind";case"?":return"explicit-key-ind";case":":return"map-value-ind";case"{":return"flow-map-start";case"}":return"flow-map-end";case"[":return"flow-seq-start";case"]":return"flow-seq-end";case",":return"comma"}switch(e[0]){case" ":case"\t":return"space";case"#":return"comment";case"%":return"directive-line";case"*":return"alias";case"&":return"anchor";case"!":return"tag";case"'":return"single-quoted-scalar";case'"':return"double-quoted-scalar";case"|":case">":return"block-scalar-header"}return null}Ir=Object.freeze({__proto__:null,BOM:Os,DOCUMENT:"",FLOW_END:"",SCALAR:"",createScalarToken:function(e,t){var{implicitKey:r=!1,indent:s,inFlow:n=!1,offset:i=-1,type:a="PLAIN"}=t,o=Bt({type:a,value:e},{implicitKey:r,indent:0<s?" ".repeat(s):"",inFlow:n,options:{blockQuote:!0,lineWidth:-1}}),l=t.end??[{type:"newline",offset:-1,indent:s,source:"\n"}];switch(o[0]){case"|":case">":var c=o.indexOf("\n"),u=o.substring(0,c),c=o.substring(c+1)+"\n",u=[{type:"block-scalar-header",offset:i,indent:s,source:u}];return bs(u,l)||u.push({type:"newline",offset:-1,indent:s,source:"\n"}),{type:"block-scalar",offset:i,indent:s,props:u,source:c};case'"':return{type:"double-quoted-scalar",offset:i,indent:s,source:o,end:l};case"'":return{type:"single-quoted-scalar",offset:i,indent:s,source:o,end:l};default:return{type:"scalar",offset:i,indent:s,source:o,end:l}}},isCollection:e=>!!e&&"items"in e,isScalar:e=>!!e&&("scalar"===e.type||"single-quoted-scalar"===e.type||"double-quoted-scalar"===e.type||"block-scalar"===e.type),prettyToken:function(e){switch(e){case Os:return"<BOM>";case"":return"<DOC>";case"":return"<FLOW_END>";case"":return"<SCALAR>";default:return JSON.stringify(e)}},resolveAsScalar:function(e,t=!0,s){if(e){var r=(e,t,r)=>{e="number"==typeof e?e:Array.isArray(e)?e[0]:e.offset;if(!s)throw new Yr([e,e+1],t,r);s(e,t,r)};switch(e.type){case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return cs(e,t,r);case"block-scalar":return ls({options:{strict:t}},e,r)}}return null},setScalarValue:function(e,t,r={}){let{afterKey:s=!1,implicitKey:n=!1,inFlow:i=!1,type:a}=r,o="indent"in e?e.indent:null;if(s&&"number"==typeof o&&(o+=2),!a)switch(e.type){case"single-quoted-scalar":a="QUOTE_SINGLE";break;case"double-quoted-scalar":a="QUOTE_DOUBLE";break;case"block-scalar":var l=e.props[0];if("block-scalar-header"!==l.type)throw new Error("Invalid block scalar header");a=">"===l.source[0]?"BLOCK_FOLDED":"BLOCK_LITERAL";break;default:a="PLAIN"}var c=Bt({type:a,value:t},{implicitKey:n||null===o,indent:null!==o&&0<o?" ".repeat(o):"",inFlow:i,options:{blockQuote:!0,lineWidth:-1}});switch(c[0]){case"|":case">":var u=e,p=(f=c).indexOf("\n"),d=f.substring(0,p),f=f.substring(p+1)+"\n";if("block-scalar"===u.type){p=u.props[0];if("block-scalar-header"!==p.type)throw new Error("Invalid block scalar header");p.source=d,u.source=f}else{var h,p=u.offset,m="indent"in u?u.indent:-1,p=[{type:"block-scalar-header",offset:p,indent:m,source:d}];bs(p,"end"in u?u.end:void 0)||p.push({type:"newline",offset:-1,indent:m,source:"\n"});for(h of Object.keys(u))"type"!==h&&"offset"!==h&&delete u[h];Object.assign(u,{type:"block-scalar",indent:m,props:p,source:f})}break;case'"':ws(e,c,"double-quoted-scalar");break;case"'":ws(e,c,"single-quoted-scalar");break;default:ws(e,c,"scalar")}},stringify:e=>("type"in e?_s:$s)(e),tokenType:Ps,visit:Ss});function g(e){switch(e){case void 0:case" ":case"\n":case"\r":case"\t":return!0;default:return!1}}let js=new Set("0123456789ABCDEFabcdef"),Ns=new Set("0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"),xs=new Set(",[]{}"),As=new Set(" ,[]{}\n\r\t"),Is=e=>!e||As.has(e);class Ts{constructor(){this.atEnd=!1,this.blockScalarIndent=-1,this.blockScalarKeep=!1,this.buffer="",this.flowKey=!1,this.flowLevel=0,this.indentNext=0,this.indentValue=0,this.lineEndPos=null,this.next=null,this.pos=0}*lex(e,t=!1){if(e){if("string"!=typeof e)throw TypeError("source is not a string");this.buffer=this.buffer?this.buffer+e:e,this.lineEndPos=null}this.atEnd=!t;let r=this.next??"stream";for(;r&&(t||this.hasChars(1));)r=yield*this.parseNext(r)}atLineEnd(){let e=this.pos,t=this.buffer[e];for(;" "===t||"\t"===t;)t=this.buffer[++e];return!t||"#"===t||"\n"===t||"\r"===t&&"\n"===this.buffer[e+1]}charAt(e){return this.buffer[this.pos+e]}continueScalar(t){let r=this.buffer[t];if(0<this.indentNext){let e=0;for(;" "===r;)r=this.buffer[++e+t];if("\r"===r){var s=this.buffer[e+t+1];if("\n"===s||!s&&!this.atEnd)return t+e+1}return"\n"===r||e>=this.indentNext||!r&&!this.atEnd?t+e:-1}if("-"===r||"."===r){s=this.buffer.substr(t,3);if(("---"===s||"..."===s)&&g(this.buffer[t+3]))return-1}return t}getLine(){let e=this.lineEndPos;return("number"!=typeof e||-1!==e&&e<this.pos)&&(e=this.buffer.indexOf("\n",this.pos),this.lineEndPos=e),-1===e?this.atEnd?this.buffer.substring(this.pos):null:("\r"===this.buffer[e-1]&&--e,this.buffer.substring(this.pos,e))}hasChars(e){return this.pos+e<=this.buffer.length}setNext(e){return this.buffer=this.buffer.substring(this.pos),this.pos=0,this.lineEndPos=null,this.next=e,null}peek(e){return this.buffer.substr(this.pos,e)}*parseNext(e){switch(e){case"stream":return yield*this.parseStream();case"line-start":return yield*this.parseLineStart();case"block-start":return yield*this.parseBlockStart();case"doc":return yield*this.parseDocument();case"flow":return yield*this.parseFlowCollection();case"quoted-scalar":return yield*this.parseQuotedScalar();case"block-scalar":return yield*this.parseBlockScalar();case"plain-scalar":return yield*this.parsePlainScalar()}}*parseStream(){let r=this.getLine();if(null===r)return this.setNext("stream");if(r[0]===Os&&(yield*this.pushCount(1),r=r.substring(1)),"%"===r[0]){let e=r.length,t=r.indexOf("#");for(;-1!==t;){var s=r[t-1];if(" "===s||"\t"===s){e=t-1;break}t=r.indexOf("#",t+1)}for(;;){var n=r[e-1];if(" "!==n&&"\t"!==n)break;--e}var i=(yield*this.pushCount(e))+(yield*this.pushSpaces(!0));return yield*this.pushCount(r.length-i),this.pushNewline(),"stream"}return this.atLineEnd()?(i=yield*this.pushSpaces(!0),yield*this.pushCount(r.length-i),yield*this.pushNewline(),"stream"):(yield"",yield*this.parseLineStart())}*parseLineStart(){var e=this.charAt(0);if(!e&&!this.atEnd)return this.setNext("line-start");if("-"===e||"."===e){if(!this.atEnd&&!this.hasChars(4))return this.setNext("line-start");e=this.peek(3);if(("---"===e||"..."===e)&&g(this.charAt(3)))return yield*this.pushCount(3),this.indentValue=0,this.indentNext=0,"---"===e?"doc":"stream"}return this.indentValue=yield*this.pushSpaces(!1),this.indentNext>this.indentValue&&!g(this.charAt(1))&&(this.indentNext=this.indentValue),yield*this.parseBlockStart()}*parseBlockStart(){var[e,t]=this.peek(2);return t||this.atEnd?"-"!==e&&"?"!==e&&":"!==e||!g(t)?"doc":(e=(yield*this.pushCount(1))+(yield*this.pushSpaces(!0)),this.indentNext=this.indentValue+1,this.indentValue+=e,yield*this.parseBlockStart()):this.setNext("block-start")}*parseDocument(){yield*this.pushSpaces(!0);var e=this.getLine();if(null===e)return this.setNext("doc");var t=yield*this.pushIndicators();switch(e[t]){case"#":yield*this.pushCount(e.length-t);case void 0:return yield*this.pushNewline(),yield*this.parseLineStart();case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel=1,"flow";case"}":case"]":return yield*this.pushCount(1),"doc";case"*":return yield*this.pushUntil(Is),"doc";case'"':case"'":return yield*this.parseQuotedScalar();case"|":case">":return t=(t+=yield*this.parseBlockScalarHeader())+(yield*this.pushSpaces(!0)),yield*this.pushCount(e.length-t),yield*this.pushNewline(),yield*this.parseBlockScalar();default:return yield*this.parsePlainScalar()}}*parseFlowCollection(){let e,t,r=-1;for(;0<(e=yield*this.pushNewline())?(t=yield*this.pushSpaces(!1),this.indentValue=r=t):t=0,0<e+(t+=yield*this.pushSpaces(!0)););var s=this.getLine();if(null===s)return this.setNext("flow");if((-1!==r&&r<this.indentNext&&"#"!==s[0]||0===r&&(s.startsWith("---")||s.startsWith("..."))&&g(s[3]))&&!(r===this.indentNext-1&&1===this.flowLevel&&("]"===s[0]||"}"===s[0])))return this.flowLevel=0,yield"",yield*this.parseLineStart();let n=0;for(;","===s[n];)n=(n+=yield*this.pushCount(1))+(yield*this.pushSpaces(!0)),this.flowKey=!1;switch(s[n+=yield*this.pushIndicators()]){case void 0:return"flow";case"#":return yield*this.pushCount(s.length-n),"flow";case"{":case"[":return yield*this.pushCount(1),this.flowKey=!1,this.flowLevel+=1,"flow";case"}":case"]":return yield*this.pushCount(1),this.flowKey=!0,--this.flowLevel,this.flowLevel?"flow":"doc";case"*":return yield*this.pushUntil(Is),"flow";case'"':case"'":return this.flowKey=!0,yield*this.parseQuotedScalar();case":":var i=this.charAt(1);if(this.flowKey||g(i)||","===i)return this.flowKey=!1,yield*this.pushCount(1),yield*this.pushSpaces(!0),"flow";default:return this.flowKey=!1,yield*this.parsePlainScalar()}}*parseQuotedScalar(){var e=this.charAt(0);let t=this.buffer.indexOf(e,this.pos+1);if("'"===e)for(;-1!==t&&"'"===this.buffer[t+1];)t=this.buffer.indexOf("'",t+2);else for(;-1!==t;){let e=0;for(;"\\"===this.buffer[t-1-e];)e+=1;if(e%2==0)break;t=this.buffer.indexOf('"',t+1)}var r=this.buffer.substring(0,t);let s=r.indexOf("\n",this.pos);if(-1!==s){for(;-1!==s;){var n=this.continueScalar(s+1);if(-1===n)break;s=r.indexOf("\n",n)}-1!==s&&(t=s-("\r"===r[s-1]?2:1))}if(-1===t){if(!this.atEnd)return this.setNext("quoted-scalar");t=this.buffer.length}return yield*this.pushToIndex(t+1,!1),this.flowLevel?"flow":"doc"}*parseBlockScalarHeader(){this.blockScalarIndent=-1,this.blockScalarKeep=!1;let e=this.pos;for(;;){var t=this.buffer[++e];if("+"===t)this.blockScalarKeep=!0;else if("0"<t&&t<="9")this.blockScalarIndent=Number(t)-1;else if("-"!==t)break}return yield*this.pushUntil(e=>g(e)||"#"===e)}*parseBlockScalar(){let r=this.pos-1,s=0,t;e:for(let e=this.pos;t=this.buffer[e];++e)switch(t){case" ":s+=1;break;case"\n":r=e,s=0;break;case"\r":var n=this.buffer[e+1];if(!n&&!this.atEnd)return this.setNext("block-scalar");if("\n"===n)break;default:break e}if(!t&&!this.atEnd)return this.setNext("block-scalar");if(s>=this.indentNext){-1===this.blockScalarIndent?this.indentNext=s:this.indentNext=this.blockScalarIndent+(0===this.indentNext?1:this.indentNext);do{var e=this.continueScalar(r+1);if(-1===e)break;r=this.buffer.indexOf("\n",e)}while(-1!==r);if(-1===r){if(!this.atEnd)return this.setNext("block-scalar");r=this.buffer.length}}let i=r+1;for(t=this.buffer[i];" "===t;)t=this.buffer[++i];if("\t"===t){for(;"\t"===t||" "===t||"\r"===t||"\n"===t;)t=this.buffer[++i];r=i-1}else if(!this.blockScalarKeep)for(;;){let e=r-1,t=this.buffer[e];"\r"===t&&(t=this.buffer[--e]);for(var a=e;" "===t;)t=this.buffer[--e];if(!("\n"===t&&e>=this.pos&&e+1+s>a))break;r=e}return yield"",yield*this.pushToIndex(r+1,!0),yield*this.parseLineStart()}*parsePlainScalar(){var t=0<this.flowLevel;let r=this.pos-1,s=this.pos-1,n;for(;n=this.buffer[++s];)if(":"===n){var i=this.buffer[s+1];if(g(i)||t&&xs.has(i))break;r=s}else if(g(n)){let e=this.buffer[s+1];if("\r"===n&&("\n"===e?(s+=1,n="\n",e=this.buffer[s+1]):r=s),"#"===e||t&&xs.has(e))break;if("\n"===n){i=this.continueScalar(s+1);if(-1===i)break;s=Math.max(s,i-2)}}else{if(t&&xs.has(n))break;r=s}return n||this.atEnd?(yield"",yield*this.pushToIndex(r+1,!0),t?"flow":"doc"):this.setNext("plain-scalar")}*pushCount(e){return 0<e?(yield this.buffer.substr(this.pos,e),this.pos+=e,e):0}*pushToIndex(e,t){e=this.buffer.slice(this.pos,e);return e?(yield e,this.pos+=e.length,e.length):(t&&(yield""),0)}*pushIndicators(){switch(this.charAt(0)){case"!":return(yield*this.pushTag())+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"&":return(yield*this.pushUntil(Is))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators());case"-":case"?":case":":var e=0<this.flowLevel,t=this.charAt(1);if(g(t)||e&&xs.has(t))return e?this.flowKey&&(this.flowKey=!1):this.indentNext=this.indentValue+1,(yield*this.pushCount(1))+(yield*this.pushSpaces(!0))+(yield*this.pushIndicators())}return 0}*pushTag(){if("<"===this.charAt(1)){let e=this.pos+2,t=this.buffer[e];for(;!g(t)&&">"!==t;)t=this.buffer[++e];return yield*this.pushToIndex(">"===t?e+1:e,!1)}{let e=this.pos+1,t=this.buffer[e];for(;t;)if(Ns.has(t))t=this.buffer[++e];else{if("%"!==t||!js.has(this.buffer[e+1])||!js.has(this.buffer[e+2]))break;t=this.buffer[e+=3]}return yield*this.pushToIndex(e,!1)}}*pushNewline(){var e=this.buffer[this.pos];return"\n"===e?yield*this.pushCount(1):"\r"===e&&"\n"===this.charAt(1)?yield*this.pushCount(2):0}*pushSpaces(e){let t=this.pos-1;for(var r;" "===(r=this.buffer[++t])||e&&"\t"===r;);var s=t-this.pos;return 0<s&&(yield this.buffer.substr(this.pos,s),this.pos=t),s}*pushUntil(e){let t=this.pos,r=this.buffer[t];for(;!e(r);)r=this.buffer[++t];return yield*this.pushToIndex(t,!1)}}class Cs{constructor(){this.lineStarts=[],this.addNewLine=e=>this.lineStarts.push(e),this.linePos=e=>{let t=0,r=this.lineStarts.length;for(;t<r;){var s=t+r>>1;this.lineStarts[s]<e?t=1+s:r=s}var n;return this.lineStarts[t]===e?{line:t+1,col:1}:0===t?{line:0,col:e}:(n=this.lineStarts[t-1],{line:t,col:e-n+1})}}}function Ms(t,r){for(let e=0;e<t.length;++e)if(t[e].type===r)return 1}function Ls(t){for(let e=0;e<t.length;++e)switch(t[e].type){case"space":case"comment":case"newline":break;default:return e}return-1}function Rs(e){switch(e?.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":case"flow-collection":return 1;default:return}}function Ds(e){switch(e.type){case"document":return e.start;case"block-map":var t=e.items[e.items.length-1];return t.sep??t.start;case"block-seq":return e.items[e.items.length-1].start;default:return[]}}function Vs(e){if(0===e.length)return[];let t=e.length;e:for(;0<=--t;)switch(e[t].type){case"doc-start":case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":case"newline":break e}for(;"space"===e[++t]?.type;);return e.splice(t,e.length)}function qs(e){if("flow-seq-start"===e.start.type)for(var t of e.items)!t.sep||t.value||Ms(t.start,"explicit-key-ind")||Ms(t.sep,"map-value-ind")||(t.key&&(t.value=t.key),delete t.key,Rs(t.value)?t.value.end?Array.prototype.push.apply(t.value.end,t.sep):t.value.end=t.sep:Array.prototype.push.apply(t.start,t.sep),delete t.sep)}class Ks{constructor(e){this.atNewLine=!0,this.atScalar=!1,this.indent=0,this.offset=0,this.onKeyLine=!1,this.stack=[],this.source="",this.type="",this.lexer=new Ts,this.onNewLine=e}*parse(e,t=!1){this.onNewLine&&0===this.offset&&this.onNewLine(0);for(var r of this.lexer.lex(e,t))yield*this.next(r);t||(yield*this.end())}*next(e){if(this.source=e,this.atScalar)this.atScalar=!1,yield*this.step(),this.offset+=e.length;else{var t=Ps(e);if(t)if("scalar"===t)this.atNewLine=!1,this.atScalar=!0,this.type="scalar";else{switch(this.type=t,yield*this.step(),t){case"newline":this.atNewLine=!0,this.indent=0,this.onNewLine&&this.onNewLine(this.offset+e.length);break;case"space":this.atNewLine&&" "===e[0]&&(this.indent+=e.length);break;case"explicit-key-ind":case"map-value-ind":case"seq-item-ind":this.atNewLine&&(this.indent+=e.length);break;case"doc-mode":case"flow-error-end":return;default:this.atNewLine=!1}this.offset+=e.length}else yield*this.pop({type:"error",offset:this.offset,message:"Not a YAML token: "+e,source:e}),this.offset+=e.length}}*end(){for(;0<this.stack.length;)yield*this.pop()}get sourceToken(){return{type:this.type,offset:this.offset,indent:this.indent,source:this.source}}*step(){var e=this.peek(1);if("doc-end"!==this.type||e&&"doc-end"===e.type){if(!e)return yield*this.stream();switch(e.type){case"document":return yield*this.document(e);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return yield*this.scalar(e);case"block-scalar":return yield*this.blockScalar(e);case"block-map":return yield*this.blockMap(e);case"block-seq":return yield*this.blockSequence(e);case"flow-collection":return yield*this.flowCollection(e);case"doc-end":return yield*this.documentEnd(e)}yield*this.pop()}else{for(;0<this.stack.length;)yield*this.pop();this.stack.push({type:"doc-end",offset:this.offset,source:this.source})}}peek(e){return this.stack[this.stack.length-e]}*pop(e){let t=e??this.stack.pop();if(t)if(0===this.stack.length)yield t;else{var r=this.peek(1);switch("block-scalar"===t.type?t.indent="indent"in r?r.indent:0:"flow-collection"===t.type&&"document"===r.type&&(t.indent=0),"flow-collection"===t.type&&qs(t),r.type){case"document":r.value=t;break;case"block-scalar":r.props.push(t);break;case"block-map":var s=r.items[r.items.length-1];if(s.value)return r.items.push({start:[],key:t,sep:[]}),void(this.onKeyLine=!0);if(!s.sep)return Object.assign(s,{key:t,sep:[]}),void(this.onKeyLine=!s.explicitKey);s.value=t;break;case"block-seq":s=r.items[r.items.length-1];s.value?r.items.push({start:[],value:t}):s.value=t;break;case"flow-collection":s=r.items[r.items.length-1];return void(!s||s.value?r.items.push({start:[],key:t,sep:[]}):s.sep?s.value=t:Object.assign(s,{key:t,sep:[]}));default:yield*this.pop(),yield*this.pop(t)}"document"!==r.type&&"block-map"!==r.type&&"block-seq"!==r.type||"block-map"!==t.type&&"block-seq"!==t.type||(e=t.items[t.items.length-1])&&!e.sep&&!e.value&&0<e.start.length&&-1===Ls(e.start)&&(0===t.indent||e.start.every(e=>"comment"!==e.type||e.indent<t.indent))&&("document"===r.type?r.end=e.start:r.items.push({start:e.start}),t.items.splice(-1,1))}else yield{type:"error",offset:this.offset,source:"",message:"Tried to pop an empty stack"}}*stream(){switch(this.type){case"directive-line":return void(yield{type:"directive",offset:this.offset,source:this.source});case"byte-order-mark":case"space":case"comment":case"newline":return void(yield this.sourceToken);case"doc-mode":case"doc-start":var e={type:"document",offset:this.offset,start:[]};return"doc-start"===this.type&&e.start.push(this.sourceToken),void this.stack.push(e)}yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML stream`,source:this.source}}*document(e){if(e.value)return yield*this.lineEnd(e);switch(this.type){case"doc-start":return void(-1!==Ls(e.start)?(yield*this.pop(),yield*this.step()):e.start.push(this.sourceToken));case"anchor":case"tag":case"space":case"comment":case"newline":return void e.start.push(this.sourceToken)}var t=this.startBlockValue(e);t?this.stack.push(t):yield{type:"error",offset:this.offset,message:`Unexpected ${this.type} token in YAML document`,source:this.source}}*scalar(t){if("map-value-ind"===this.type){var r=Vs(Ds(this.peek(2)));let e;t.end?((e=t.end).push(this.sourceToken),delete t.end):e=[this.sourceToken];r={type:"block-map",offset:t.offset,indent:t.indent,items:[{start:r,key:t,sep:e}]};this.onKeyLine=!0,this.stack[this.stack.length-1]=r}else yield*this.lineEnd(t)}*blockScalar(e){switch(this.type){case"space":case"comment":case"newline":return void e.props.push(this.sourceToken);case"scalar":if(e.source=this.source,this.atNewLine=!0,this.indent=0,this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}yield*this.pop();break;default:yield*this.pop(),yield*this.step()}}*blockMap(t){var r=t.items[t.items.length-1];switch(this.type){case"newline":return this.onKeyLine=!1,void(r.value?(e="end"in r.value?r.value.end:void 0,"comment"===(Array.isArray(e)?e[e.length-1]:void 0)?.type?e?.push(this.sourceToken):t.items.push({start:[this.sourceToken]})):(r.sep||r.start).push(this.sourceToken));case"space":case"comment":if(r.value)t.items.push({start:[this.sourceToken]});else if(r.sep)r.sep.push(this.sourceToken);else{if(this.atIndentedComment(r.start,t.indent)){var e=t.items[t.items.length-2]?.value?.end;if(Array.isArray(e))return Array.prototype.push.apply(e,r.start),e.push(this.sourceToken),void t.items.pop()}r.start.push(this.sourceToken)}return}if(this.indent>=t.indent){var s,n=!this.onKeyLine&&this.indent===t.indent,i=n&&(r.sep||r.explicitKey)&&"seq-item-ind"!==this.type;let e=[];if(i&&r.sep&&!r.value){var a=[];for(let e=0;e<r.sep.length;++e){var o=r.sep[e];switch(o.type){case"newline":a.push(e);break;case"space":break;case"comment":o.indent>t.indent&&(a.length=0);break;default:a.length=0}}2<=a.length&&(e=r.sep.splice(a[1]))}switch(this.type){case"anchor":case"tag":return void(i||r.value?(e.push(this.sourceToken),t.items.push({start:e}),this.onKeyLine=!0):(r.sep||r.start).push(this.sourceToken));case"explicit-key-ind":return r.sep||r.explicitKey?i||r.value?(e.push(this.sourceToken),t.items.push({start:e,explicitKey:!0})):this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken],explicitKey:!0}]}):(r.start.push(this.sourceToken),r.explicitKey=!0),void(this.onKeyLine=!0);case"map-value-ind":return r.explicitKey?r.sep?r.value?t.items.push({start:[],key:null,sep:[this.sourceToken]}):Ms(r.sep,"map-value-ind")?this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:e,key:null,sep:[this.sourceToken]}]}):Rs(r.key)&&!Ms(r.sep,"newline")?(s=Vs(r.start),l=r.key,(c=r.sep).push(this.sourceToken),delete r.key,delete r.sep,this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:s,key:l,sep:c}]})):0<e.length?r.sep=r.sep.concat(e,this.sourceToken):r.sep.push(this.sourceToken):Ms(r.start,"newline")?Object.assign(r,{key:null,sep:[this.sourceToken]}):(s=Vs(r.start),this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:s,key:null,sep:[this.sourceToken]}]})):r.sep?r.value||i?t.items.push({start:e,key:null,sep:[this.sourceToken]}):Ms(r.sep,"map-value-ind")?this.stack.push({type:"block-map",offset:this.offset,indent:this.indent,items:[{start:[],key:null,sep:[this.sourceToken]}]}):r.sep.push(this.sourceToken):Object.assign(r,{key:null,sep:[this.sourceToken]}),void(this.onKeyLine=!0);case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":var l=this.flowScalar(this.type);return void(i||r.value?(t.items.push({start:e,key:l,sep:[]}),this.onKeyLine=!0):r.sep?this.stack.push(l):(Object.assign(r,{key:l,sep:[]}),this.onKeyLine=!0));default:var c=this.startBlockValue(t);if(c)return n&&"block-seq"!==c.type&&t.items.push({start:e}),void this.stack.push(c)}}yield*this.pop(),yield*this.step()}*blockSequence(e){var t=e.items[e.items.length-1];switch(this.type){case"newline":return void(t.value?(r="end"in t.value?t.value.end:void 0,"comment"===(Array.isArray(r)?r[r.length-1]:void 0)?.type?r?.push(this.sourceToken):e.items.push({start:[this.sourceToken]})):t.start.push(this.sourceToken));case"space":case"comment":if(t.value)e.items.push({start:[this.sourceToken]});else{if(this.atIndentedComment(t.start,e.indent)){var r=e.items[e.items.length-2]?.value?.end;if(Array.isArray(r))return Array.prototype.push.apply(r,t.start),r.push(this.sourceToken),void e.items.pop()}t.start.push(this.sourceToken)}return;case"anchor":case"tag":if(t.value||this.indent<=e.indent)break;return void t.start.push(this.sourceToken);case"seq-item-ind":if(this.indent!==e.indent)break;return void(t.value||Ms(t.start,"seq-item-ind")?e.items.push({start:[this.sourceToken]}):t.start.push(this.sourceToken))}if(this.indent>e.indent){var s=this.startBlockValue(e);if(s)return void this.stack.push(s)}yield*this.pop(),yield*this.step()}*flowCollection(e){var t,r=e.items[e.items.length-1];if("flow-error-end"===this.type)for(;yield*this.pop(),(t=this.peek(1))&&"flow-collection"===t.type;);else if(0===e.end.length){switch(this.type){case"comma":case"explicit-key-ind":return void(!r||r.sep?e.items.push({start:[this.sourceToken]}):r.start.push(this.sourceToken));case"map-value-ind":return void(!r||r.value?e.items.push({start:[],key:null,sep:[this.sourceToken]}):r.sep?r.sep.push(this.sourceToken):Object.assign(r,{key:null,sep:[this.sourceToken]}));case"space":case"comment":case"newline":case"anchor":case"tag":return void(!r||r.value?e.items.push({start:[this.sourceToken]}):(r.sep||r.start).push(this.sourceToken));case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":var s=this.flowScalar(this.type);return void(!r||r.value?e.items.push({start:[],key:s,sep:[]}):r.sep?this.stack.push(s):Object.assign(r,{key:s,sep:[]}));case"flow-map-end":case"flow-seq-end":return void e.end.push(this.sourceToken)}var n=this.startBlockValue(e);n?this.stack.push(n):(yield*this.pop(),yield*this.step())}else{var i,n=this.peek(2);"block-map"===n.type&&("map-value-ind"===this.type&&n.indent===e.indent||"newline"===this.type&&!n.items[n.items.length-1].sep)?(yield*this.pop(),yield*this.step()):"map-value-ind"===this.type&&"flow-collection"!==n.type?(n=Vs(Ds(n)),qs(e),(i=e.end.splice(1,e.end.length)).push(this.sourceToken),n={type:"block-map",offset:e.offset,indent:e.indent,items:[{start:n,key:e,sep:i}]},this.onKeyLine=!0,this.stack[this.stack.length-1]=n):yield*this.lineEnd(e)}}flowScalar(e){if(this.onNewLine){let e=this.source.indexOf("\n")+1;for(;0!==e;)this.onNewLine(this.offset+e),e=this.source.indexOf("\n",e)+1}return{type:e,offset:this.offset,indent:this.indent,source:this.source}}startBlockValue(e){switch(this.type){case"alias":case"scalar":case"single-quoted-scalar":case"double-quoted-scalar":return this.flowScalar(this.type);case"block-scalar-header":return{type:"block-scalar",offset:this.offset,indent:this.indent,props:[this.sourceToken],source:""};case"flow-map-start":case"flow-seq-start":return{type:"flow-collection",offset:this.offset,indent:this.indent,start:this.sourceToken,items:[],end:[]};case"seq-item-ind":return{type:"block-seq",offset:this.offset,indent:this.indent,items:[{start:[this.sourceToken]}]};case"explicit-key-ind":this.onKeyLine=!0;var t=Vs(Ds(e));return t.push(this.sourceToken),{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,explicitKey:!0}]};case"map-value-ind":this.onKeyLine=!0;t=Vs(Ds(e));return{type:"block-map",offset:this.offset,indent:this.indent,items:[{start:t,key:null,sep:[this.sourceToken]}]}}return null}atIndentedComment(e,t){return"comment"===this.type&&!(this.indent<=t)&&e.every(e=>"newline"===e.type||"space"===e.type)}*documentEnd(e){"doc-mode"!==this.type&&(e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type)&&(yield*this.pop())}*lineEnd(e){switch(this.type){case"comma":case"doc-start":case"doc-end":case"flow-seq-end":case"flow-map-end":case"map-value-ind":yield*this.pop(),yield*this.step();break;case"newline":this.onKeyLine=!1;default:e.end?e.end.push(this.sourceToken):e.end=[this.sourceToken],"newline"===this.type&&(yield*this.pop())}}}function Bs(e){var t=!1!==e.prettyErrors;return{lineCounter:e.lineCounter||t&&new Cs||null,prettyErrors:t}}function Us(e,t={}){var{lineCounter:r,prettyErrors:s}=Bs(t),n=new Ks(r?.addNewLine),t=new vs(t),n=Array.from(t.compose(n.parse(e)));if(s&&r)for(var i of n)i.errors.forEach(Zr(e,r)),i.warnings.forEach(Zr(e,r));return 0<n.length?n:Object.assign([],{empty:!0},t.streamInfo())}function Fs(e,t={}){var r,{lineCounter:s,prettyErrors:n}=Bs(t),i=new Ks(s?.addNewLine);let a=null;for(r of new vs(t).compose(i.parse(e),!0,e.length))if(a){if("silent"!==a.options.logLevel){a.errors.push(new Yr(r.range.slice(0,2),"MULTIPLE_DOCS","Source contains multiple documents; please use YAML.parseAllDocuments()"));break}}else a=r;return n&&s&&(a.errors.forEach(Zr(e,s)),a.warnings.forEach(Zr(e,s))),a}function zs(e,t,r){let s=void 0,n=("function"==typeof t?s=t:void 0===r&&t&&"object"==typeof t&&(r=t),Fs(e,r));if(!n)return null;if(n.warnings.forEach(e=>zt(n.options.logLevel,e)),0<n.errors.length){if("silent"!==n.options.logLevel)throw n.errors[0];n.errors=[]}return n.toJS(Object.assign({reviver:s},r))}function Gs(e,t,r){let s=null;if("function"==typeof t||Array.isArray(t)?s=t:void 0===r&&t&&(r=t),"number"==typeof(r="string"==typeof r?r.length:r)&&(r=(n=Math.round(r))<1?void 0:8<n?{indent:8}:{indent:n}),void 0===e){var n=(r??t??{}).keepUndefined;if(!n)return}return(at(e)&&!s?e:new Jr(e,s,r)).toString(r)}var Js,Tr=Object.freeze({__proto__:null,Alias:_t,CST:Ir,Composer:vs,Document:Jr,Lexer:Ts,LineCounter:Cs,Pair:j,Parser:Ks,Scalar:S,Schema:Gr,YAMLError:Wr,YAMLMap:N,YAMLParseError:Yr,YAMLSeq:x,YAMLWarning:Qr,isAlias:f,isCollection:k,isDocument:at,isMap:ot,isNode:E,isPair:P,isScalar:$,isSeq:lt,parse:zs,parseAllDocuments:Us,parseDocument:Fs,stringify:Gs,visit:l,visitAsync:ut}),Or=B(Object.freeze({__proto__:null,Alias:_t,CST:Ir,Composer:vs,Document:Jr,Lexer:Ts,LineCounter:Cs,Pair:j,Parser:Ks,Scalar:S,Schema:Gr,YAMLError:Wr,YAMLMap:N,YAMLParseError:Yr,YAMLSeq:x,YAMLWarning:Qr,default:Tr,isAlias:f,isCollection:k,isDocument:at,isMap:ot,isNode:E,isPair:P,isScalar:$,isSeq:lt,parse:zs,parseAllDocuments:Us,parseDocument:Fs,stringify:Gs,visit:l,visitAsync:ut})),Hs={exports:{}},Ws={},Ys={},Qs={},Zs={},Xs={},en={};function tn(){if(!Js){Js=1;{var t=en;Object.defineProperty(t,"__esModule",{value:!0}),t.regexpCode=t.getEsmExportName=t.getProperty=t.safeStringify=t.stringify=t.strConcat=t.addCodeArg=t.str=t._=t.nil=t._Code=t.Name=t.IDENTIFIER=t._CodeOrName=void 0;class e{}t._CodeOrName=e,t.IDENTIFIER=/^[a-z$_][a-z$_0-9]*$/i;class c extends e{constructor(e){if(super(),!t.IDENTIFIER.test(e))throw new Error("CodeGen: name must be a valid identifier");this.str=e}toString(){return this.str}emptyStr(){return!1}get names(){return{[this.str]:1}}}t.Name=c;class u extends e{constructor(e){super(),this._items="string"==typeof e?[e]:e}toString(){return this.str}emptyStr(){var e;return!(1<this._items.length||""!==(e=this._items[0])&&'""'!==e)}get str(){var e;return null!=(e=this._str)?e:this._str=this._items.reduce((e,t)=>""+e+t,"")}get names(){var e;return null!=(e=this._names)?e:this._names=this._items.reduce((e,t)=>(t instanceof c&&(e[t.str]=(e[t.str]||0)+1),e),{})}}function r(e,...t){var r=[e[0]];let s=0;for(;s<t.length;)o(r,t[s]),r.push(e[++s]);return new u(r)}t._Code=u,t.nil=new u(""),t._=r;let a=new u("+");function s(e,...t){var r=[l(e[0])];let s=0;for(;s<t.length;)r.push(a),o(r,t[s]),r.push(a,l(e[++s]));{var n=r;let e=1;for(;e<n.length-1;){if(n[e]===a){var i=((e,t)=>'""'===t?e:'""'===e?t:"string"!=typeof e?"string"!=typeof t||'"'!==t[0]||e instanceof c?void 0:'"'+e+t.slice(1):t instanceof c||'"'!==e[e.length-1]?void 0:"string"!=typeof t?""+e.slice(0,-1)+t+'"':'"'===t[0]?e.slice(0,-1)+t.slice(1):void 0)(n[e-1],n[e+1]);if(void 0!==i){n.splice(e-1,3,i);continue}n[e++]="+"}e++}}return new u(r)}function o(e,t){t instanceof u?e.push(...t._items):t instanceof c?e.push(t):e.push("number"==typeof(e=t)||"boolean"==typeof e||null===e?e:l(Array.isArray(e)?e.join(","):e))}function l(e){return JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}t.str=s,t.addCodeArg=o,t.strConcat=function(e,t){return t.emptyStr()?e:e.emptyStr()?t:s`${e}${t}`},t.stringify=function(e){return new u(l(e))},t.safeStringify=l,t.getProperty=function(e){return"string"==typeof e&&t.IDENTIFIER.test(e)?new u("."+e):r`[${e}]`},t.getEsmExportName=function(e){if("string"==typeof e&&t.IDENTIFIER.test(e))return new u(""+e);throw new Error(`CodeGen: invalid export name: ${e}, use explicit $id name mapping`)},t.regexpCode=function(e){return new u(e.toString())}}}return en}var rn,sn,nn={};function an(){if(!rn){rn=1;{var c=nn;Object.defineProperty(c,"__esModule",{value:!0}),c.ValueScope=c.ValueScopeName=c.Scope=c.varKinds=c.UsedValueState=void 0;let l=tn();class p extends Error{constructor(e){super(`CodeGen: "code" for ${e} not defined`),this.value=e.value}}var u,e;(e=u||(c.UsedValueState=u={}))[e.Started=0]="Started",e[e.Completed=1]="Completed",c.varKinds={const:new l.Name("const"),let:new l.Name("let"),var:new l.Name("var")};class r{constructor({prefixes:e,parent:t}={}){this._names={},this._prefixes=e,this._parent=t}toName(e){return e instanceof l.Name?e:this.name(e)}name(e){return new l.Name(this._newName(e))}_newName(e){return""+e+(this._names[e]||this._nameGroup(e)).index++}_nameGroup(e){var t;if(null!=(t=null==(t=this._parent)?void 0:t._prefixes)&&t.has(e)||this._prefixes&&!this._prefixes.has(e))throw new Error(`CodeGen: prefix "${e}" is not allowed in this scope`);return this._names[e]={prefix:e,index:0}}}c.Scope=r;class s extends l.Name{constructor(e,t){super(t),this.prefix=e}setValue(e,{property:t,itemIndex:r}){this.value=e,this.scopePath=(0,l._)`.${new l.Name(t)}[${r}]`}}c.ValueScopeName=s;let t=(0,l._)`\n`;class n extends r{constructor(e){super(e),this._values={},this._scope=e.scope,this.opts={...e,_n:e.lines?t:l.nil}}get(){return this._scope}name(e){return new s(e,this._newName(e))}value(e,t){if(void 0===t.ref)throw new Error("CodeGen: ref must be passed in value");var e=this.toName(e),r=e.prefix,s=null!=(s=t.key)?s:t.ref;let n=this._values[r];if(n){var i=n.get(s);if(i)return i}else n=this._values[r]=new Map;n.set(s,e);i=this._scope[r]||(this._scope[r]=[]),s=i.length;return i[s]=t.ref,e.setValue(t,{property:r,itemIndex:s}),e}getValue(e,t){e=this._values[e];if(e)return e.get(t)}scopeRefs(t,e=this._values){return this._reduceValues(e,e=>{if(void 0===e.scopePath)throw new Error(`CodeGen: name "${e}" has no value`);return(0,l._)`${t}${e.scopePath}`})}scopeCode(e=this._values,t,r){return this._reduceValues(e,e=>{if(void 0===e.value)throw new Error(`CodeGen: name "${e}" has no value`);return e.value.code},t,r)}_reduceValues(e,n,t={},i){let a=l.nil;for(var r in e){var o=e[r];if(o){let s=t[r]=t[r]||new Map;o.forEach(e=>{if(!s.has(e)){s.set(e,u.Started);var t=n(e);if(t){var r=this.opts.es5?c.varKinds.var:c.varKinds.const;a=(0,l._)`${a}${r} ${e} = ${t};${this.opts._n}`}else{if(!(t=null==i?void 0:i(e)))throw new p(e);a=(0,l._)`${a}${t}${this.opts._n}`}s.set(e,u.Completed)}})}}return a}}c.ValueScope=n}}return nn}function C(){if(!sn){sn=1;{var s=Xs;Object.defineProperty(s,"__esModule",{value:!0}),s.or=s.and=s.not=s.CodeGen=s.operators=s.varKinds=s.ValueScopeName=s.ValueScope=s.Scope=s.Name=s.regexpCode=s.stringify=s.getProperty=s.nil=s.strConcat=s.str=s._=void 0;let i=tn(),a=an();var e=tn(),n=(Object.defineProperty(s,"_",{enumerable:!0,get:function(){return e._}}),Object.defineProperty(s,"str",{enumerable:!0,get:function(){return e.str}}),Object.defineProperty(s,"strConcat",{enumerable:!0,get:function(){return e.strConcat}}),Object.defineProperty(s,"nil",{enumerable:!0,get:function(){return e.nil}}),Object.defineProperty(s,"getProperty",{enumerable:!0,get:function(){return e.getProperty}}),Object.defineProperty(s,"stringify",{enumerable:!0,get:function(){return e.stringify}}),Object.defineProperty(s,"regexpCode",{enumerable:!0,get:function(){return e.regexpCode}}),Object.defineProperty(s,"Name",{enumerable:!0,get:function(){return e.Name}}),an());Object.defineProperty(s,"Scope",{enumerable:!0,get:function(){return n.Scope}}),Object.defineProperty(s,"ValueScope",{enumerable:!0,get:function(){return n.ValueScope}}),Object.defineProperty(s,"ValueScopeName",{enumerable:!0,get:function(){return n.ValueScopeName}}),Object.defineProperty(s,"varKinds",{enumerable:!0,get:function(){return n.varKinds}}),s.operators={GT:new i._Code(">"),GTE:new i._Code(">="),LT:new i._Code("<"),LTE:new i._Code("<="),EQ:new i._Code("==="),NEQ:new i._Code("!=="),NOT:new i._Code("!"),OR:new i._Code("||"),AND:new i._Code("&&"),ADD:new i._Code("+")};class f{optimizeNodes(){return this}optimizeNames(e,t){return this}}class h extends f{constructor(e,t,r){super(),this.varKind=e,this.name=t,this.rhs=r}render({es5:e,_n:t}){var e=e?a.varKinds.var:this.varKind,r=void 0===this.rhs?"":" = "+this.rhs;return`${e} ${this.name}${r};`+t}optimizeNames(e,t){if(e[this.name.str])return this.rhs&&(this.rhs=c(this.rhs,e,t)),this}get names(){return this.rhs instanceof i._CodeOrName?this.rhs.names:{}}}class m extends f{constructor(e,t,r){super(),this.lhs=e,this.rhs=t,this.sideEffects=r}render({_n:e}){return`${this.lhs} = ${this.rhs};`+e}optimizeNames(e,t){if(!(this.lhs instanceof i.Name)||e[this.lhs.str]||this.sideEffects)return this.rhs=c(this.rhs,e,t),this}get names(){return l(this.lhs instanceof i.Name?{}:{...this.lhs.names},this.rhs)}}class y extends m{constructor(e,t,r,s){super(e,r,s),this.op=t}render({_n:e}){return`${this.lhs} ${this.op}= ${this.rhs};`+e}}class g extends f{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return this.label+":"+e}}class v extends f{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`break${this.label?" "+this.label:""};`+e}}class b extends f{constructor(e){super(),this.error=e}render({_n:e}){return`throw ${this.error};`+e}get names(){return this.error.names}}class w extends f{constructor(e){super(),this.code=e}render({_n:e}){return this.code+";"+e}optimizeNodes(){return""+this.code?this:void 0}optimizeNames(e,t){return this.code=c(this.code,e,t),this}get names(){return this.code instanceof i._CodeOrName?this.code.names:{}}}class _ extends f{constructor(e=[]){super(),this.nodes=e}render(r){return this.nodes.reduce((e,t)=>e+t.render(r),"")}optimizeNodes(){var e=this.nodes;let t=e.length;for(;t--;){var r=e[t].optimizeNodes();Array.isArray(r)?e.splice(t,1,...r):r?e[t]=r:e.splice(t,1)}return 0<e.length?this:void 0}optimizeNames(e,t){var r=this.nodes;let s=r.length;for(;s--;){var n=r[s];if(!n.optimizeNames(e,t)){i=o=a=void 0;var i,a=e,o=n.names;for(i in o)a[i]=(a[i]||0)-(o[i]||0);r.splice(s,1)}}return 0<r.length?this:void 0}get names(){return this.nodes.reduce((e,t)=>o(e,t.names),{})}}class $ extends _{render(e){return"{"+e._n+super.render(e)+"}"+e._n}}class k extends _{}class E extends ${}E.kind="else";class S extends ${constructor(e,t){super(t),this.condition=e}render(e){let t=`if(${this.condition})`+super.render(e);return this.else&&(t+="else "+this.else.render(e)),t}optimizeNodes(){super.optimizeNodes();var e,t=this.condition;if(!0===t)return this.nodes;let r=this.else;return r&&(e=r.optimizeNodes(),r=this.else=Array.isArray(e)?new E(e):e),r?!1===t?r instanceof S?r:r.nodes:this.nodes.length?this:new S(u(t),r instanceof S?[r]:r.nodes):!1!==t&&this.nodes.length?this:void 0}optimizeNames(e,t){var r;if(this.else=null==(r=this.else)?void 0:r.optimizeNames(e,t),super.optimizeNames(e,t)||this.else)return this.condition=c(this.condition,e,t),this}get names(){var e=super.names;return l(e,this.condition),this.else&&o(e,this.else.names),e}}S.kind="if";class O extends ${}O.kind="for";class P extends O{constructor(e){super(),this.iteration=e}render(e){return`for(${this.iteration})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iteration=c(this.iteration,e,t),this}get names(){return o(super.names,this.iteration.names)}}class j extends O{constructor(e,t,r,s){super(),this.varKind=e,this.name=t,this.from=r,this.to=s}render(e){var{name:t,from:r,to:s}=this;return`for(${e.es5?a.varKinds.var:this.varKind} ${t}=${r}; ${t}<${s}; ${t}++)`+super.render(e)}get names(){var e=l(super.names,this.from);return l(e,this.to)}}class N extends O{constructor(e,t,r,s){super(),this.loop=e,this.varKind=t,this.name=r,this.iterable=s}render(e){return`for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iterable=c(this.iterable,e,t),this}get names(){return o(super.names,this.iterable.names)}}class x extends ${constructor(e,t,r){super(),this.name=e,this.args=t,this.async=r}render(e){return(this.async?"async ":"")+`function ${this.name}(${this.args})`+super.render(e)}}x.kind="func";class A extends _{render(e){return"return "+super.render(e)}}A.kind="return";class I extends ${render(e){let t="try"+super.render(e);return this.catch&&(t+=this.catch.render(e)),this.finally&&(t+=this.finally.render(e)),t}optimizeNodes(){var e;return super.optimizeNodes(),null!=(e=this.catch)&&e.optimizeNodes(),null!=(e=this.finally)&&e.optimizeNodes(),this}optimizeNames(e,t){var r;return super.optimizeNames(e,t),null!=(r=this.catch)&&r.optimizeNames(e,t),null!=(r=this.finally)&&r.optimizeNames(e,t),this}get names(){var e=super.names;return this.catch&&o(e,this.catch.names),this.finally&&o(e,this.finally.names),e}}class T extends ${constructor(e){super(),this.error=e}render(e){return`catch(${this.error})`+super.render(e)}}T.kind="catch";class C extends ${render(e){return"finally"+super.render(e)}}function o(e,t){for(var r in t)e[r]=(e[r]||0)+(t[r]||0);return e}function l(e,t){return t instanceof i._CodeOrName?o(e,t.names):e}function c(e,r,s){var t;return e instanceof i.Name?n(e):(t=e)instanceof i._Code&&t._items.some(e=>e instanceof i.Name&&1===r[e.str]&&void 0!==s[e.str])?new i._Code(e._items.reduce((e,t)=>((t=t instanceof i.Name?n(t):t)instanceof i._Code?e.push(...t._items):e.push(t),e),[])):e;function n(e){var t=s[e.str];return void 0===t||1!==r[e.str]?e:(delete r[e.str],t)}}function u(e){return"boolean"==typeof e||"number"==typeof e||null===e?!e:(0,i._)`!${d(e)}`}C.kind="finally",s.CodeGen=class{constructor(e,t={}){this._values={},this._blockStarts=[],this._constants={},this.opts={...t,_n:t.lines?"\n":""},this._extScope=e,this._scope=new a.Scope({parent:e}),this._nodes=[new k]}toString(){return this._root.render(this.opts)}name(e){return this._scope.name(e)}scopeName(e){return this._extScope.name(e)}scopeValue(e,t){e=this._extScope.value(e,t);return(this._values[e.prefix]||(this._values[e.prefix]=new Set)).add(e),e}getScopeValue(e,t){return this._extScope.getValue(e,t)}scopeRefs(e){return this._extScope.scopeRefs(e,this._values)}scopeCode(){return this._extScope.scopeCode(this._values)}_def(e,t,r,s){t=this._scope.toName(t);return void 0!==r&&s&&(this._constants[t.str]=r),this._leafNode(new h(e,t,r)),t}const(e,t,r){return this._def(a.varKinds.const,e,t,r)}let(e,t,r){return this._def(a.varKinds.let,e,t,r)}var(e,t,r){return this._def(a.varKinds.var,e,t,r)}assign(e,t,r){return this._leafNode(new m(e,t,r))}add(e,t){return this._leafNode(new y(e,s.operators.ADD,t))}code(e){return"function"==typeof e?e():e!==i.nil&&this._leafNode(new w(e)),this}object(...e){var t,r,s=["{"];for([t,r]of e)1<s.length&&s.push(","),s.push(t),t===r&&!this.opts.es5||(s.push(":"),(0,i.addCodeArg)(s,r));return s.push("}"),new i._Code(s)}if(e,t,r){if(this._blockNode(new S(e)),t&&r)this.code(t).else().code(r).endIf();else if(t)this.code(t).endIf();else if(r)throw new Error('CodeGen: "else" body without "then" body');return this}elseIf(e){return this._elseNode(new S(e))}else(){return this._elseNode(new E)}endIf(){return this._endBlockNode(S,E)}_for(e,t){return this._blockNode(e),t&&this.code(t).endFor(),this}for(e,t){return this._for(new P(e),t)}forRange(e,t,r,s,n=this.opts.es5?a.varKinds.var:a.varKinds.let){let i=this._scope.toName(e);return this._for(new j(n,i,t,r),()=>s(i))}forOf(e,r,s,t=a.varKinds.const){let n=this._scope.toName(e);if(this.opts.es5){let t=r instanceof i.Name?r:this.var("_arr",r);return this.forRange("_i",0,(0,i._)`${t}.length`,e=>{this.var(n,(0,i._)`${t}[${e}]`),s(n)})}return this._for(new N("of",t,n,r),()=>s(n))}forIn(e,t,r,s=this.opts.es5?a.varKinds.var:a.varKinds.const){if(this.opts.ownProperties)return this.forOf(e,(0,i._)`Object.keys(${t})`,r);let n=this._scope.toName(e);return this._for(new N("in",s,n,t),()=>r(n))}endFor(){return this._endBlockNode(O)}label(e){return this._leafNode(new g(e))}break(e){return this._leafNode(new v(e))}return(e){var t=new A;if(this._blockNode(t),this.code(e),1!==t.nodes.length)throw new Error('CodeGen: "return" should have one node');return this._endBlockNode(A)}try(e,t,r){var s;if(t||r)return s=new I,this._blockNode(s),this.code(e),t&&(e=this.name("e"),this._currNode=s.catch=new T(e),t(e)),r&&(this._currNode=s.finally=new C,this.code(r)),this._endBlockNode(T,C);throw new Error('CodeGen: "try" without "catch" and "finally"')}throw(e){return this._leafNode(new b(e))}block(e,t){return this._blockStarts.push(this._nodes.length),e&&this.code(e).endBlock(t),this}endBlock(e){var t=this._blockStarts.pop();if(void 0===t)throw new Error("CodeGen: not in self-balancing block");var r=this._nodes.length-t;if(r<0||void 0!==e&&r!==e)throw new Error(`CodeGen: wrong number of nodes: ${r} vs ${e} expected`);return this._nodes.length=t,this}func(e,t=i.nil,r,s){return this._blockNode(new x(e,t,r)),s&&this.code(s).endFunc(),this}endFunc(){return this._endBlockNode(x)}optimize(e=1){for(;0<e--;)this._root.optimizeNodes(),this._root.optimizeNames(this._root.names,this._constants)}_leafNode(e){return this._currNode.nodes.push(e),this}_blockNode(e){this._currNode.nodes.push(e),this._nodes.push(e)}_endBlockNode(e,t){var r=this._currNode;if(r instanceof e||t&&r instanceof t)return this._nodes.pop(),this;throw new Error(`CodeGen: not in block "${t?e.kind+"/"+t.kind:e.kind}"`)}_elseNode(e){var t=this._currNode;if(t instanceof S)return this._currNode=t.else=e,this;throw new Error('CodeGen: "else" without "if"')}get _root(){return this._nodes[0]}get _currNode(){var e=this._nodes;return e[e.length-1]}set _currNode(e){var t=this._nodes;t[t.length-1]=e}},s.not=u;let t=p(s.operators.AND),r=(s.and=function(...e){return e.reduce(t)},p(s.operators.OR));function p(r){return(e,t)=>e===i.nil?t:t===i.nil?e:(0,i._)`${d(e)} ${r} ${d(t)}`}function d(e){return e instanceof i.Name?e:(0,i._)`(${e})`}s.or=function(...e){return e.reduce(r)}}}return Xs}var on,v={};function M(){if(!on){on=1,Object.defineProperty(v,"__esModule",{value:!0}),v.checkStrictMode=v.getErrorPath=v.Type=v.useFunc=v.setEvaluated=v.evaluatedPropsToName=v.mergeEvaluated=v.eachItem=v.unescapeJsonPointer=v.escapeJsonPointer=v.escapeFragment=v.unescapeFragment=v.schemaRefOrVal=v.schemaHasRulesButRef=v.schemaHasRules=v.checkUnknownRules=v.alwaysValidSchema=v.toHash=void 0;let l=C(),r=tn(),s=(v.toHash=function(e){var t,r={};for(t of e)r[t]=!0;return r},v.alwaysValidSchema=function(e,t){return"boolean"==typeof t?t:0===Object.keys(t).length||(i(e,t),!a(t,e.self.RULES.all))},v.checkUnknownRules=i,v.schemaHasRules=a,v.schemaHasRulesButRef=function(e,t){if("boolean"==typeof e)return!e;for(var r in e)if("$ref"!==r&&t.all[r])return!0;return!1},v.schemaRefOrVal=function({topSchemaRef:e,schemaPath:t},r,s,n){if(!n){if("number"==typeof r||"boolean"==typeof r)return r;if("string"==typeof r)return(0,l._)`${r}`}return(0,l._)`${e}${t}${(0,l.getProperty)(s)}`},v.unescapeFragment=function(e){return t(decodeURIComponent(e))},v.escapeFragment=function(e){return encodeURIComponent(o(e))},v.escapeJsonPointer=o,v.unescapeJsonPointer=t,v.eachItem=function(e,t){if(Array.isArray(e))for(var r of e)t(r);else t(e)},v.mergeEvaluated={props:c({mergeNames:(e,t,r)=>e.if((0,l._)`${r} !== true && ${t} !== undefined`,()=>{e.if((0,l._)`${t} === true`,()=>e.assign(r,!0),()=>e.assign(r,(0,l._)`${r} || {}`).code((0,l._)`Object.assign(${r}, ${t})`))}),mergeToName:(e,t,r)=>e.if((0,l._)`${r} !== true`,()=>{!0===t?e.assign(r,!0):(e.assign(r,(0,l._)`${r} || {}`),p(e,r,t))}),mergeValues:(e,t)=>!0===e||{...e,...t},resultToName:u}),items:c({mergeNames:(e,t,r)=>e.if((0,l._)`${r} !== true && ${t} !== undefined`,()=>e.assign(r,(0,l._)`${t} === true ? true : ${r} > ${t} ? ${r} : ${t}`)),mergeToName:(e,t,r)=>e.if((0,l._)`${r} !== true`,()=>e.assign(r,!0===t||(0,l._)`${r} > ${t} ? ${r} : ${t}`)),mergeValues:(e,t)=>!0===e||Math.max(e,t),resultToName:(e,t)=>e.var("items",t)})},v.evaluatedPropsToName=u,v.setEvaluated=p,{});var n,e;function i(e,t=e.schema){var{opts:r,self:s}=e;if(r.strictSchema&&"boolean"!=typeof t){var n,i=s.RULES.keywords;for(n in t)i[n]||d(e,`unknown keyword: "${n}"`)}}function a(e,t){if("boolean"==typeof e)return!e;for(var r in e)if(t[r])return!0;return!1}function o(e){return"number"==typeof e?""+e:e.replace(/~/g,"~0").replace(/\//g,"~1")}function t(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}function c({mergeNames:n,mergeToName:i,mergeValues:a,resultToName:o}){return(e,t,r,s)=>{t=void 0===r?t:r instanceof l.Name?((t instanceof l.Name?n:i)(e,t,r),r):t instanceof l.Name?(i(e,r,t),t):a(t,r);return s!==l.Name||t instanceof l.Name?t:o(e,t)}}function u(e,t){var r;return!0===t?e.var("props",!0):(r=e.var("props",(0,l._)`{}`),void 0!==t&&p(e,r,t),r)}function p(t,r,e){Object.keys(e).forEach(e=>t.assign((0,l._)`${r}${(0,l.getProperty)(e)}`,!0))}function d(e,t,r=e.opts.strictSchema){if(r){if(t="strict mode: "+t,!0===r)throw new Error(t);e.self.logger.warn(t)}}v.useFunc=function(e,t){return e.scopeValue("func",{ref:t,code:s[t.code]||(s[t.code]=new r._Code(t.code))})},(e=n||(v.Type=n={}))[e.Num=0]="Num",e[e.Str=1]="Str",v.getErrorPath=function(e,t,r){return e instanceof l.Name?(t=t===n.Num,r?t?(0,l._)`"[" + ${e} + "]"`:(0,l._)`"['" + ${e} + "']"`:t?(0,l._)`"/" + ${e}`:(0,l._)`"/" + ${e}.replace(/~/g, "~0").replace(/\\//g, "~1")`):r?(0,l.getProperty)(e).toString():"/"+o(e)},v.checkStrictMode=d}return v}var ln,cn,un,pn={};function L(){var e;return ln||(ln=1,Object.defineProperty(pn,"__esModule",{value:!0}),e={data:new(e=C()).Name("data"),valCxt:new e.Name("valCxt"),instancePath:new e.Name("instancePath"),parentData:new e.Name("parentData"),parentDataProperty:new e.Name("parentDataProperty"),rootData:new e.Name("rootData"),dynamicAnchors:new e.Name("dynamicAnchors"),vErrors:new e.Name("vErrors"),errors:new e.Name("errors"),this:new e.Name("this"),self:new e.Name("self"),scope:new e.Name("scope"),json:new e.Name("json"),jsonPos:new e.Name("jsonPos"),jsonLen:new e.Name("jsonLen"),jsonPart:new e.Name("jsonPart")},pn.default=e),pn}function dn(){if(!cn){cn=1;{var l=Zs;Object.defineProperty(l,"__esModule",{value:!0}),l.extendErrors=l.resetErrorsCount=l.reportExtraError=l.reportError=l.keyword$DataError=l.keywordError=void 0;let f=C(),h=M(),m=L();function c(e,t){let r=e.const("err",t);e.if((0,f._)`${m.default.vErrors} === null`,()=>e.assign(m.default.vErrors,(0,f._)`[${r}]`),(0,f._)`${m.default.vErrors}.push(${r})`),e.code((0,f._)`${m.default.errors}++`)}function u(e,t){var{gen:r,validateName:s,schemaEnv:n}=e;n.$async?r.throw((0,f._)`new ${e.ValidationError}(${t})`):(r.assign((0,f._)`${s}.errors`,t),r.return(!1))}l.keywordError={message:({keyword:e})=>(0,f.str)`must pass "${e}" keyword validation`},l.keyword$DataError={message:({keyword:e,schemaType:t})=>t?(0,f.str)`"${e}" keyword must be ${t} ($data)`:(0,f.str)`"${e}" keyword is invalid ($data)`},l.reportError=function(e,t=l.keywordError,r,s){var n=e.it,{gen:i,compositeRule:a,allErrors:o}=n,e=p(e,t,r);(null!=s?s:a||o)?c(i,e):u(n,(0,f._)`[${e}]`)},l.reportExtraError=function(e,t=l.keywordError,r){var s=e.it,{gen:n,compositeRule:i,allErrors:a}=s;c(n,p(e,t,r)),i||a||u(s,m.default.vErrors)},l.resetErrorsCount=function(e,t){e.assign(m.default.errors,t),e.if((0,f._)`${m.default.vErrors} !== null`,()=>e.if(t,()=>e.assign((0,f._)`${m.default.vErrors}.length`,t),()=>e.assign(m.default.vErrors,null)))},l.extendErrors=function({gen:t,keyword:r,schemaValue:s,data:n,errsCount:e,it:i}){if(void 0===e)throw new Error("ajv implementation error");let a=t.name("err");t.forRange("i",e,m.default.errors,e=>{t.const(a,(0,f._)`${m.default.vErrors}[${e}]`),t.if((0,f._)`${a}.instancePath === undefined`,()=>t.assign((0,f._)`${a}.instancePath`,(0,f.strConcat)(m.default.instancePath,i.errorPath))),t.assign((0,f._)`${a}.schemaPath`,(0,f.str)`${i.errSchemaPath}/${r}`),i.opts.verbose&&(t.assign((0,f._)`${a}.schema`,s),t.assign((0,f._)`${a}.data`,n))})};let y={keyword:new f.Name("keyword"),schemaPath:new f.Name("schemaPath"),params:new f.Name("params"),propertyName:new f.Name("propertyName"),message:new f.Name("message"),schema:new f.Name("schema"),parentSchema:new f.Name("parentSchema")};function p(e,t,r){var s,n,i,a,o,l,c,u,p,d=e.it.createErrors;return!1===d?(0,f._)`{}`:([d,e,t={}]=[e,t,r],{gen:r,it:s}=d,s=[(({errorPath:e},{instancePath:t})=>(t=t?(0,f.str)`${e}${(0,h.getErrorPath)(t,h.Type.Str)}`:e,[m.default.instancePath,(0,f.strConcat)(m.default.instancePath,t)]))(s,t),(({keyword:e,it:{errSchemaPath:t}},{schemaPath:r,parentSchema:s})=>{let n=s?t:(0,f.str)`${t}/${e}`;return r&&(n=(0,f.str)`${n}${(0,h.getErrorPath)(r,h.Type.Str)}`),[y.schemaPath,n]})(d,t)],[t,{params:d,message:e},n]=[d,e,s],{keyword:i,data:a,schemaValue:o,it:l}=t,{opts:l,propertyName:c,topSchemaRef:u,schemaPath:p}=l,n.push([y.keyword,i],[y.params,"function"==typeof d?d(t):d||(0,f._)`{}`]),l.messages&&n.push([y.message,"function"==typeof e?e(t):e]),l.verbose&&n.push([y.schema,o],[y.parentSchema,(0,f._)`${u}${p}`],[m.default.data,a]),c&&n.push([y.propertyName,c]),r.object(...s))}}}return Zs}function fn(){if(!un){un=1,Object.defineProperty(Qs,"__esModule",{value:!0}),Qs.boolOrEmptySchema=Qs.topBoolOrEmptySchema=void 0;let n=dn(),i=C(),a=L(),o={message:"boolean schema is false"};function l(e,t){var{gen:r,data:s}=e,r={gen:r,keyword:"false schema",data:s,schema:!1,schemaCode:!1,schemaValue:!1,params:{},it:e};(0,n.reportError)(r,o,void 0,t)}Qs.topBoolOrEmptySchema=function(e){var{gen:t,schema:r,validateName:s}=e;!1===r?l(e,!1):"object"==typeof r&&!0===r.$async?t.return(a.default.data):(t.assign((0,i._)`${s}.errors`,null),t.return(!0))},Qs.boolOrEmptySchema=function(e,t){var{gen:r,schema:s}=e;!1===s?(r.var(t,!1),l(e)):r.var(t,!0)}}return Qs}var hn,b={},mn={};function yn(){if(!hn){hn=1,Object.defineProperty(mn,"__esModule",{value:!0}),mn.getRules=mn.isJSONType=void 0;let t=new Set(["string","number","integer","boolean","null","object","array"]);mn.isJSONType=function(e){return"string"==typeof e&&t.has(e)},mn.getRules=function(){var e={number:{type:"number",rules:[]},string:{type:"string",rules:[]},array:{type:"array",rules:[]},object:{type:"object",rules:[]}};return{types:{...e,integer:!0,boolean:!0,null:!0},rules:[{rules:[]},e.number,e.string,e.array,e.object],post:{rules:[]},all:{},keywords:{}}}}return mn}var gn,vn,bn={};function wn(){return gn||(gn=1,Object.defineProperty(bn,"__esModule",{value:!0}),bn.shouldUseRule=bn.shouldUseGroup=bn.schemaHasRulesForType=void 0,bn.schemaHasRulesForType=function({schema:e,self:t},r){return(t=t.RULES.types[r])&&!0!==t&&s(e,t)},bn.shouldUseGroup=s,bn.shouldUseRule=r),bn;function s(t,e){return e.rules.some(e=>r(t,e))}function r(t,e){return void 0!==t[e.keyword]||(null==(e=e.definition.implements)?void 0:e.some(e=>void 0!==t[e]))}}function _n(){if(!vn){vn=1,Object.defineProperty(b,"__esModule",{value:!0}),b.reportTypeError=b.checkDataTypes=b.checkDataType=b.coerceAndCheckDataType=b.getJSONTypes=b.getSchemaTypes=b.DataType=void 0;let t=yn(),i=wn(),r=dn(),d=C(),o=M();var l,e;(e=l||(b.DataType=l={}))[e.Correct=0]="Correct",e[e.Wrong=1]="Wrong",b.getSchemaTypes=function(e){var t=n(e.type);if(t.includes("null")){if(!1===e.nullable)throw new Error("type: null contradicts nullable: false")}else{if(!t.length&&void 0!==e.nullable)throw new Error('"nullable" cannot be used without "type"');!0===e.nullable&&t.push("null")}return t},b.getJSONTypes=n,b.coerceAndCheckDataType=function(c,u){var t,{gen:e,data:r,opts:s}=c;n=u;let p=(t=s.coerceTypes)?n.filter(e=>f.has(e)||"array"===t&&"array"===e):[];var n=0<u.length&&!(0===p.length&&1===u.length&&(0,i.schemaHasRulesForType)(c,u[0]));return n&&(r=h(u,r,s.strictNumbers,l.Wrong),e.if(r,()=>{if(p.length){var r,o=c,s=u,l=p;let{gen:n,data:i,opts:e}=o,t=n.let("dataType",(0,d._)`typeof ${i}`),a=n.let("coerced",(0,d._)`undefined`);"array"===e.coerceTypes&&n.if((0,d._)`${t} == 'object' && Array.isArray(${i}) && ${i}.length == 1`,()=>n.assign(i,(0,d._)`${i}[0]`).assign(t,(0,d._)`typeof ${i}`).if(h(s,i,e.strictNumbers),()=>n.assign(a,i))),n.if((0,d._)`${a} !== undefined`);for(r of l)(f.has(r)||"array"===r&&"array"===e.coerceTypes)&&(e=>{switch(e){case"string":return n.elseIf((0,d._)`${t} == "number" || ${t} == "boolean"`).assign(a,(0,d._)`"" + ${i}`).elseIf((0,d._)`${i} === null`).assign(a,(0,d._)`""`);case"number":return n.elseIf((0,d._)`${t} == "boolean" || ${i} === null

              || (${t} == "string" && ${i} && ${i} == +${i})`).assign(a,(0,d._)`+${i}`);case"integer":return n.elseIf((0,d._)`${t} === "boolean" || ${i} === null

              || (${t} === "string" && ${i} && ${i} == +${i} && !(${i} % 1))`).assign(a,(0,d._)`+${i}`);case"boolean":return n.elseIf((0,d._)`${i} === "false" || ${i} === 0 || ${i} === null`).assign(a,!1).elseIf((0,d._)`${i} === "true" || ${i} === 1`).assign(a,!0);case"null":return n.elseIf((0,d._)`${i} === "" || ${i} === 0 || ${i} === false`),n.assign(a,null);case"array":n.elseIf((0,d._)`${t} === "string" || ${t} === "number"

              || ${t} === "boolean" || ${i} === null`).assign(a,(0,d._)`[${i}]`)}})(r);n.else(),m(o),n.endIf(),n.if((0,d._)`${a} !== undefined`,()=>{var e,t,r,s;n.assign(i,a),[{gen:e,parentData:t,parentDataProperty:r},s]=[o,a],e.if((0,d._)`${t} !== undefined`,()=>e.assign((0,d._)`${t}[${r}]`,s))})}else m(c)})),n};let f=new Set(["string","number","integer","boolean","null"]),s=(b.checkDataType=c,b.checkDataTypes=h,{message:({schema:e})=>"must be "+e,params:({schema:e,schemaValue:t})=>"string"==typeof e?(0,d._)`{type: ${e}}`:(0,d._)`{type: ${t}}`});function n(e){e=Array.isArray(e)?e:e?[e]:[];if(e.every(t.isJSONType))return e;throw new Error("type must be JSONType or JSONType[]: "+e.join(","))}function c(e,t,r,s=l.Correct){var n=s===l.Correct?d.operators.EQ:d.operators.NEQ;let i;switch(e){case"null":return(0,d._)`${t} ${n} null`;case"array":i=(0,d._)`Array.isArray(${t})`;break;case"object":i=(0,d._)`${t} && typeof ${t} == "object" && !Array.isArray(${t})`;break;case"integer":i=a((0,d._)`!(${t} % 1) && !isNaN(${t})`);break;case"number":i=a();break;default:return(0,d._)`typeof ${t} ${n} ${e}`}return s===l.Correct?i:(0,d.not)(i);function a(e=d.nil){return(0,d.and)((0,d._)`typeof ${t} == "number"`,e,r?(0,d._)`isFinite(${t})`:d.nil)}}function h(e,t,r,s){if(1===e.length)return c(e[0],t,r,s);let n;var i,a,e=(0,o.toHash)(e);for(a in e.array&&e.object?(i=(0,d._)`typeof ${t} != "object"`,n=e.null?i:(0,d._)`!${t} || ${i}`,delete e.null,delete e.array,delete e.object):n=d.nil,e.number&&delete e.integer,e)n=(0,d.and)(n,c(a,t,r,s));return n}function m(e){e=(e=>{var{gen:t,data:r,schema:s}=e,n=(0,o.schemaRefOrVal)(e,s,"type");return{gen:t,keyword:"type",data:r,schema:s.type,schemaCode:n,schemaValue:n,parentSchema:s,params:{},it:e}})(e);(0,r.reportError)(e,s)}b.reportTypeError=m}return b}var $n,kn={};function En(){if(!$n){$n=1,Object.defineProperty(kn,"__esModule",{value:!0}),kn.assignDefaults=void 0;let o=C(),l=M();function i(e,t,r){var{gen:s,compositeRule:n,data:i,opts:a}=e;if(void 0!==r){i=(0,o._)`${i}${(0,o.getProperty)(t)}`;if(n)(0,l.checkStrictMode)(e,"default is ignored for: "+i);else{let e=(0,o._)`${i} === undefined`;"empty"===a.useDefaults&&(e=(0,o._)`${e} || ${i} === null || ${i} === ""`),s.if(e,(0,o._)`${i} = ${(0,o.stringify)(r)}`)}}}kn.assignDefaults=function(r,e){var{properties:t,items:s}=r.schema;if("object"===e&&t)for(var n in t)i(r,n,t[n].default);else"array"===e&&Array.isArray(s)&&s.forEach((e,t)=>i(r,t,e.default))}}return kn}var Sn,On,r={},n={};function _(){if(!Sn){Sn=1,Object.defineProperty(n,"__esModule",{value:!0}),n.validateUnion=n.validateArray=n.usePattern=n.callValidateCode=n.schemaProperties=n.allSchemaProperties=n.noPropertyInData=n.propertyInData=n.isOwnProperty=n.hasPropFunc=n.reportMissingProp=n.checkMissingProp=n.checkReportMissingProp=void 0;let u=C(),o=M(),p=L(),i=M(),a=(n.checkReportMissingProp=function(e,t){var{gen:r,data:s,it:n}=e;r.if(c(r,s,t,n.opts.ownProperties),()=>{e.setParams({missingProperty:(0,u._)`${t}`},!0),e.error()})},n.checkMissingProp=function({gen:t,data:r,it:{opts:s}},e,n){return(0,u.or)(...e.map(e=>(0,u.and)(c(t,r,e,s.ownProperties),(0,u._)`${n} = ${e}`)))},n.reportMissingProp=function(e,t){e.setParams({missingProperty:t},!0),e.error()},n.hasPropFunc=s,n.isOwnProperty=l,n.propertyInData=function(e,t,r,s){var n=(0,u._)`${t}${(0,u.getProperty)(r)} !== undefined`;return s?(0,u._)`${n} && ${l(e,t,r)}`:n},n.noPropertyInData=c,n.allSchemaProperties=e,n.schemaProperties=function(t,r){return e(r).filter(e=>!(0,o.alwaysValidSchema)(t,r[e]))},n.callValidateCode=function({schemaCode:e,data:t,it:{gen:r,topSchemaRef:s,schemaPath:n,errorPath:i},it:a},o,l,c){return c=c?(0,u._)`${e}, ${t}, ${s}${n}`:t,e=[[p.default.instancePath,(0,u.strConcat)(p.default.instancePath,i)],[p.default.parentData,a.parentData],[p.default.parentDataProperty,a.parentDataProperty],[p.default.rootData,p.default.rootData]],a.opts.dynamicRef&&e.push([p.default.dynamicAnchors,p.default.dynamicAnchors]),s=(0,u._)`${c}, ${r.object(...e)}`,l!==u.nil?(0,u._)`${o}.call(${l}, ${s})`:(0,u._)`${o}(${s})`},(0,u._)`new RegExp`);function s(e){return e.scopeValue("func",{ref:Object.prototype.hasOwnProperty,code:(0,u._)`Object.prototype.hasOwnProperty`})}function l(e,t,r){return(0,u._)`${s(e)}.call(${t}, ${r})`}function c(e,t,r,s){var n=(0,u._)`${t}${(0,u.getProperty)(r)} === undefined`;return s?(0,u.or)(n,(0,u.not)(l(e,t,r))):n}function e(e){return e?Object.keys(e).filter(e=>"__proto__"!==e):[]}n.usePattern=function({gen:e,it:{opts:t}},r){var s=t.unicodeRegExp?"u":"",n=(t=t.code.regExp)(r,s);return e.scopeValue("pattern",{key:n.toString(),ref:n,code:(0,u._)`${"new RegExp"===t.code?a:(0,i.useFunc)(e,t)}(${r}, ${s})`})},n.validateArray=function(r){let{gen:s,data:n,keyword:i,it:e}=r,a=s.name("valid");if(e.allErrors){let e=s.let("valid",!0);return t(()=>s.assign(e,!1)),e}return s.var(a,!0),t(()=>s.break()),a;function t(t){var e=s.const("len",(0,u._)`${n}.length`);s.forRange("i",0,e,e=>{r.subschema({keyword:i,dataProp:e,dataPropType:o.Type.Num},a),s.if((0,u.not)(a),t)})}},n.validateUnion=function(n){let{gen:i,schema:e,keyword:a,it:t}=n;if(!Array.isArray(e))throw new Error("ajv implementation error");var r=e.some(e=>(0,o.alwaysValidSchema)(t,e));if(!r||t.opts.unevaluated){let r=i.let("valid",!1),s=i.name("_valid");i.block(()=>e.forEach((e,t)=>{t=n.subschema({keyword:a,schemaProp:t,compositeRule:!0},s),i.assign(r,(0,u._)`${r} || ${s}`),t=n.mergeValidEvaluated(t,s);t||i.if((0,u.not)(r))})),n.result(r,()=>n.reset(),()=>n.error(!0))}}}return n}function Pn(){if(!On){On=1,Object.defineProperty(r,"__esModule",{value:!0}),r.validateKeywordUsage=r.validSchemaType=r.funcKeywordCode=r.macroKeywordCode=void 0;let m=C(),y=L(),g=_(),v=dn();function b(e){let{gen:t,data:r,it:s}=e;t.if(s.parentData,()=>t.assign(r,(0,m._)`${s.parentData}[${s.parentDataProperty}]`))}function w(e,t,r){if(void 0===r)throw new Error(`keyword "${t}" failed to compile`);return e.scopeValue("keyword","function"==typeof r?{ref:r}:{ref:r,code:(0,m.stringify)(r)})}r.macroKeywordCode=function(e,t){var{gen:r,keyword:s,schema:n,parentSchema:i,it:a}=e,t=t.macro.call(a.self,n,i,a),n=w(r,s,t),i=(!1!==a.opts.validateSchema&&a.self.validateSchema(t,!0),r.name("valid"));e.subschema({schema:t,schemaPath:m.nil,errSchemaPath:a.errSchemaPath+"/"+s,topSchemaRef:n,compositeRule:!0},i),e.pass(i,()=>e.error(!0))},r.funcKeywordCode=function(n,i){let e,{gen:a,keyword:t,schema:r,parentSchema:s,$data:o,it:l}=n;var[c,u]=[l.schemaEnv,i];if(u.async&&!c.$async)throw new Error("async keyword in sync schema");u=!o&&i.compile?i.compile.call(l.self,r,s,l):i.validate;let p=w(a,t,u),d=a.let("valid");function f(e=i.async?(0,m._)`await `:m.nil){var t=l.opts.passContext?y.default.this:y.default.self,r=!("compile"in i&&!o||!1===i.schema);a.assign(d,(0,m._)`${e}${(0,g.callValidateCode)(n,p,t,r)}`,i.modifying)}function h(e){var t;a.if((0,m.not)(null!=(t=i.valid)?t:d),e)}n.block$data(d,function(){if(!1===i.errors)f(),i.modifying&&b(n),h(()=>n.error());else{let s=(i.async?()=>{let t=a.let("ruleErrs",null);return a.try(()=>f((0,m._)`await `),e=>a.assign(d,!1).if((0,m._)`${e} instanceof ${l.ValidationError}`,()=>a.assign(t,(0,m._)`${e}.errors`),()=>a.throw(e))),t}:()=>{var e=(0,m._)`${p}.errors`;return a.assign(e,null),f(m.nil),e})();i.modifying&&b(n),h(()=>{{var t=n,r=s;let e=t.gen;e.if((0,m._)`Array.isArray(${r})`,()=>{e.assign(y.default.vErrors,(0,m._)`${y.default.vErrors} === null ? ${r} : ${y.default.vErrors}.concat(${r})`).assign(y.default.errors,(0,m._)`${y.default.vErrors}.length`),(0,v.extendErrors)(t)},()=>t.error())}})}}),n.ok(null!=(e=i.valid)?e:d)},r.validSchemaType=function(t,e,r=!1){return!e.length||e.some(e=>"array"===e?Array.isArray(t):"object"===e?t&&"object"==typeof t&&!Array.isArray(t):typeof t==e||r&&void 0===t)},r.validateKeywordUsage=function({schema:t,opts:e,self:r,errSchemaPath:s},n,i){if(Array.isArray(n.keyword)?!n.keyword.includes(i):n.keyword!==i)throw new Error("ajv implementation error");var a=n.dependencies;if(null!=a&&a.some(e=>!Object.prototype.hasOwnProperty.call(t,e)))throw new Error(`parent schema must have dependencies of ${i}: `+a.join(","));if(n.validateSchema&&!n.validateSchema(t[i])){a=`keyword "${i}" value is invalid at path "${s}": `+r.errorsText(n.validateSchema.errors);if("log"!==e.validateSchema)throw new Error(a);r.logger.error(a)}}}return r}var jn,Nn={};function xn(){if(!jn){jn=1,Object.defineProperty(Nn,"__esModule",{value:!0}),Nn.extendSubschemaMode=Nn.extendSubschemaData=Nn.getSubschema=void 0;let d=C(),f=M();Nn.getSubschema=function(e,{keyword:t,schemaProp:r,schema:s,schemaPath:n,errSchemaPath:i,topSchemaRef:a}){if(void 0!==t&&void 0!==s)throw new Error('both "keyword" and "schema" passed, only one allowed');var o;if(void 0!==t)return o=e.schema[t],void 0===r?{schema:o,schemaPath:(0,d._)`${e.schemaPath}${(0,d.getProperty)(t)}`,errSchemaPath:e.errSchemaPath+"/"+t}:{schema:o[r],schemaPath:(0,d._)`${e.schemaPath}${(0,d.getProperty)(t)}${(0,d.getProperty)(r)}`,errSchemaPath:e.errSchemaPath+`/${t}/`+(0,f.escapeFragment)(r)};if(void 0===s)throw new Error('either "keyword" or "schema" must be passed');if(void 0===n||void 0===i||void 0===a)throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');return{schema:s,schemaPath:n,topSchemaRef:a,errSchemaPath:i}},Nn.extendSubschemaData=function(t,r,{dataProp:e,dataPropType:s,data:n,dataTypes:i,propertyName:a}){if(void 0!==n&&void 0!==e)throw new Error('both "data" and "dataProp" passed, only one allowed');var o,l,c,u=r.gen;function p(e){t.data=e,t.dataLevel=r.dataLevel+1,t.dataTypes=[],r.definedProperties=new Set,t.parentData=r.data,t.dataNames=[...r.dataNames,e]}void 0!==e&&({errorPath:o,dataPathArr:l,opts:c}=r,p(u.let("data",(0,d._)`${r.data}${(0,d.getProperty)(e)}`,!0)),t.errorPath=(0,d.str)`${o}${(0,f.getErrorPath)(e,s,c.jsPropertySyntax)}`,t.parentDataProperty=(0,d._)`${e}`,t.dataPathArr=[...l,t.parentDataProperty]),void 0!==n&&(p(n instanceof d.Name?n:u.let("data",n,!0)),void 0!==a)&&(t.propertyName=a),i&&(t.dataTypes=i)},Nn.extendSubschemaMode=function(e,{jtdDiscriminator:t,jtdMetadata:r,compositeRule:s,createErrors:n,allErrors:i}){void 0!==s&&(e.compositeRule=s),void 0!==n&&(e.createErrors=n),void 0!==i&&(e.allErrors=i),e.jtdDiscriminator=t,e.jtdMetadata=r}}return Nn}var An,In,A={};function Tn(){return In||(In=1,An=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var s,n,i;if(Array.isArray(t)){if((s=t.length)!=r.length)return!1;for(n=s;0!=n--;)if(!e(t[n],r[n]))return!1}else{if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((s=(i=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(n=s;0!=n--;)if(!Object.prototype.hasOwnProperty.call(r,i[n]))return!1;for(n=s;0!=n--;){var a=i[n];if(!e(t[a],r[a]))return!1}}return!0}return t!=t&&r!=r}),An}var Cn,Mn,Ln,Rn={exports:{}};function Dn(){var m;return Cn||(Cn=1,(m=Rn.exports=function(e,t,r){"function"==typeof t&&(r=t,t={}),function e(t,r,s,n,i,a,o,l,c,u){if(n&&"object"==typeof n&&!Array.isArray(n)){for(var p in r(n,i,a,o,l,c,u),n){var d=n[p];if(Array.isArray(d)){if(p in m.arrayKeywords)for(var f=0;f<d.length;f++)e(t,r,s,d[f],i+"/"+p+"/"+f,a,i,p,n,f)}else if(p in m.propsKeywords){if(d&&"object"==typeof d)for(var h in d)e(t,r,s,d[h],i+"/"+p+"/"+y(h),a,i,p,n,h)}else(p in m.keywords||t.allKeys&&!(p in m.skipKeywords))&&e(t,r,s,d,i+"/"+p,a,i,p,n)}s(n,i,a,o,l,c,u)}}(t,"function"==typeof(r=t.cb||r)?r:r.pre||function(){},r.post||function(){},e,"",e)}).keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0},m.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},m.propsKeywords={$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},m.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0}),Rn.exports;function y(e){return e.replace(/~/g,"~0").replace(/\//g,"~1")}}function Vn(){if(!Mn){Mn=1,Object.defineProperty(A,"__esModule",{value:!0}),A.getSchemaRefs=A.resolveUrl=A.normalizeId=A._getFullPath=A.getFullPath=A.inlineRef=void 0;let n=M(),s=Tn(),i=Dn(),a=new Set(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum","const"]),r=(A.inlineRef=function(e,t=!0){return"boolean"==typeof e||(!0===t?!o(e):!!t&&function t(e){let r=0;for(var s in e){if("$ref"===s)return 1/0;if(r++,!a.has(s)&&("object"==typeof e[s]&&(0,n.eachItem)(e[s],e=>r+=t(e)),r===1/0))return 1/0}return r}(e)<=t)},new Set(["$ref","$recursiveRef","$recursiveAnchor","$dynamicRef","$dynamicAnchor"])),t=(A.getFullPath=y,A._getFullPath=l,/#\/?$/),m=(A.normalizeId=g,A.resolveUrl=function(e,t,r){return r=g(r),e.resolve(t,r)},/^[a-z_][-a-z0-9._]*$/i);function o(e){for(var t in e){if(r.has(t))return!0;t=e[t];if(Array.isArray(t)&&t.some(o))return!0;if("object"==typeof t&&o(t))return!0}return!1}function y(e,t="",r){!1!==r&&(t=g(t));r=e.parse(t);return l(e,r)}function l(e,t){return e.serialize(t).split("#")[0]+"#"}function g(e){return e?e.replace(t,""):""}A.getSchemaRefs=function(e,t){if("boolean"==typeof e)return{};let{schemaId:l,uriResolver:r}=this.opts,c={"":t=g(e[l]||t)},u=y(r,t,!1),p={},d=new Set;return i(e,{allKeys:!0},(i,e,t,r)=>{if(void 0!==r){let s=u+e,n=c[r];function a(e){var t=this.opts.uriResolver.resolve;if(e=g(n?t(n,e):e),d.has(e))throw h(e);d.add(e);let r=this.refs[e];return"object"==typeof(r="string"==typeof r?this.refs[r]:r)?f(i,r.schema,e):e!==g(s)&&("#"===e[0]?(f(i,p[e],e),p[e]=i):this.refs[e]=s),e}function o(e){if("string"==typeof e){if(!m.test(e))throw new Error(`invalid anchor "${e}"`);a.call(this,"#"+e)}}"string"==typeof i[l]&&(n=a.call(this,i[l])),o.call(this,i.$anchor),o.call(this,i.$dynamicAnchor),c[e]=n}}),p;function f(e,t,r){if(void 0!==t&&!s(e,t))throw h(r)}function h(e){return new Error(`reference "${e}" resolves to more than one schema`)}}}return A}function qn(){if(!Ln){Ln=1,Object.defineProperty(Ys,"__esModule",{value:!0}),Ys.getData=Ys.KeywordCxt=Ys.validateFunctionCode=void 0;let l=fn(),s=_n(),S=wn(),O=_n(),i=En(),n=Pn(),a=xn(),P=C(),j=L(),c=Vn(),N=M(),r=dn();Ys.validateFunctionCode=function(r){if(m(r)&&(y(r),h(r))){var c=r;let{schema:e,opts:t,gen:s}=c;o(c,()=>{t.$comment&&e.$comment&&v(c);var i,a=c,{schema:o,opts:l}=a;if(void 0!==o.default&&l.useDefaults&&l.strictSchema&&(0,N.checkStrictMode)(a,"default is ignored in the schema root"),s.let(j.default.vErrors,null),s.let(j.default.errors,0),t.unevaluated){var r=c;let{gen:e,validateName:t}=r;r.evaluated=e.const("evaluated",(0,P._)`${t}.evaluated`),e.if((0,P._)`${r.evaluated}.dynamicProps`,()=>e.assign((0,P._)`${r.evaluated}.props`,(0,P._)`undefined`)),e.if((0,P._)`${r.evaluated}.dynamicItems`,()=>e.assign((0,P._)`${r.evaluated}.items`,(0,P._)`undefined`))}g(c);{let{gen:e,schemaEnv:t,validateName:r,ValidationError:s,opts:n}=o=c;t.$async?e.if((0,P._)`${j.default.errors} === 0`,()=>e.return(j.default.data),()=>e.throw((0,P._)`new ${s}(${j.default.vErrors})`)):(e.assign((0,P._)`${r}.errors`,j.default.vErrors),n.unevaluated&&({gen:o,evaluated:l,props:a,items:i}=[o][0],a instanceof P.Name&&o.assign((0,P._)`${l}.props`,a),i instanceof P.Name)&&o.assign((0,P._)`${l}.items`,i),e.return((0,P._)`${j.default.errors} === 0`))}})}else o(r,()=>(0,l.topBoolOrEmptySchema)(r))};class _{constructor(e,t,r){if((0,n.validateKeywordUsage)(e,t,r),this.gen=e.gen,this.allErrors=e.allErrors,this.keyword=r,this.data=e.data,this.schema=e.schema[r],this.$data=t.$data&&e.opts.$data&&this.schema&&this.schema.$data,this.schemaValue=(0,N.schemaRefOrVal)(e,this.schema,r,this.$data),this.schemaType=t.schemaType,this.parentSchema=e.schema,this.params={},this.it=e,this.def=t,this.$data)this.schemaCode=e.gen.const("vSchema",w(this.$data,e));else if(this.schemaCode=this.schemaValue,!(0,n.validSchemaType)(this.schema,t.schemaType,t.allowUndefined))throw new Error(r+" value must be "+JSON.stringify(t.schemaType));("code"in t?t.trackErrors:!1!==t.errors)&&(this.errsCount=e.gen.const("_errs",j.default.errors))}result(e,t,r){this.failResult((0,P.not)(e),t,r)}failResult(e,t,r){this.gen.if(e),r?r():this.error(),t?(this.gen.else(),t(),this.allErrors&&this.gen.endIf()):this.allErrors?this.gen.endIf():this.gen.else()}pass(e,t){this.failResult((0,P.not)(e),void 0,t)}fail(e){void 0===e?(this.error(),this.allErrors||this.gen.if(!1)):(this.gen.if(e),this.error(),this.allErrors?this.gen.endIf():this.gen.else())}fail$data(e){if(!this.$data)return this.fail(e);var t=this.schemaCode;this.fail((0,P._)`${t} !== undefined && (${(0,P.or)(this.invalid$data(),e)})`)}error(e,t,r){t?(this.setParams(t),this._error(e,r),this.setParams({})):this._error(e,r)}_error(e,t){(e?r.reportExtraError:r.reportError)(this,this.def.error,t)}$dataError(){(0,r.reportError)(this,this.def.$dataError||r.keyword$DataError)}reset(){if(void 0===this.errsCount)throw new Error('add "trackErrors" to keyword definition');(0,r.resetErrorsCount)(this.gen,this.errsCount)}ok(e){this.allErrors||this.gen.if(e)}setParams(e,t){t?Object.assign(this.params,e):this.params=e}block$data(e,t,r=P.nil){this.gen.block(()=>{this.check$data(e,r),t()})}check$data(e=P.nil,t=P.nil){var r,s,n,i;this.$data&&({gen:r,schemaCode:s,schemaType:n,def:i}=this,r.if((0,P.or)((0,P._)`${s} === undefined`,t)),e!==P.nil&&r.assign(e,!0),(n.length||i.validateSchema)&&(r.elseIf(this.invalid$data()),this.$dataError(),e!==P.nil)&&r.assign(e,!1),r.else())}invalid$data(){let{gen:t,schemaCode:r,schemaType:s,def:n,it:i}=this;return(0,P.or)((()=>{if(s.length){var e;if(r instanceof P.Name)return e=Array.isArray(s)?s:[s],(0,P._)`${(0,O.checkDataTypes)(e,r,i.opts.strictNumbers,O.DataType.Wrong)}`;throw new Error("ajv implementation error")}return P.nil})(),(()=>{var e;return n.validateSchema?(e=t.scopeValue("validate$data",{ref:n.validateSchema}),(0,P._)`!${e}(${r})`):P.nil})())}subschema(e,t){var r=(0,a.getSubschema)(this.it,e),e=((0,a.extendSubschemaData)(r,this.it,e),(0,a.extendSubschemaMode)(r,e),{...this.it,...r,items:void 0,props:void 0});return f(e,t),e}mergeEvaluated(e,t){var{it:r,gen:s}=this;r.opts.unevaluated&&(!0!==r.props&&void 0!==e.props&&(r.props=N.mergeEvaluated.props(s,e.props,r.props,t)),!0!==r.items)&&void 0!==e.items&&(r.items=N.mergeEvaluated.items(s,e.items,r.items,t))}mergeValidEvaluated(e,t){var{it:r,gen:s}=this;if(r.opts.unevaluated&&(!0!==r.props||!0!==r.items))return s.if(t,()=>this.mergeEvaluated(e,P.Name)),!0}}Ys.KeywordCxt=_;let u=/^\/(?:[^~]|~0|~1)*$/,p=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function o({gen:r,validateName:e,schema:s,schemaEnv:t,opts:n},i){n.code.es5?r.func(e,(0,P._)`${j.default.data}, ${j.default.valCxt}`,t.$async,()=>{var e,t;r.code((0,P._)`"use strict"; ${d(s,n)}`),t=n,(e=r).if(j.default.valCxt,()=>{e.var(j.default.instancePath,(0,P._)`${j.default.valCxt}.${j.default.instancePath}`),e.var(j.default.parentData,(0,P._)`${j.default.valCxt}.${j.default.parentData}`),e.var(j.default.parentDataProperty,(0,P._)`${j.default.valCxt}.${j.default.parentDataProperty}`),e.var(j.default.rootData,(0,P._)`${j.default.valCxt}.${j.default.rootData}`),t.dynamicRef&&e.var(j.default.dynamicAnchors,(0,P._)`${j.default.valCxt}.${j.default.dynamicAnchors}`)},()=>{e.var(j.default.instancePath,(0,P._)`""`),e.var(j.default.parentData,(0,P._)`undefined`),e.var(j.default.parentDataProperty,(0,P._)`undefined`),e.var(j.default.rootData,j.default.data),t.dynamicRef&&e.var(j.default.dynamicAnchors,(0,P._)`{}`)}),r.code(i)}):r.func(e,(0,P._)`${j.default.data}, ${e=n,(0,P._)`{${j.default.instancePath}="", ${j.default.parentData}, ${j.default.parentDataProperty}, ${j.default.rootData}=${j.default.data}${e.dynamicRef?(0,P._)`, ${j.default.dynamicAnchors}={}`:P.nil}}={}`}`,t.$async,()=>r.code(d(s,n)).code(i))}function d(e,t){e="object"==typeof e&&e[t.schemaId];return e&&(t.code.source||t.code.process)?(0,P._)`/*# sourceURL=${e} */`:P.nil}function f(e,t){if(m(e)&&(y(e),h(e))){var r=e,s=t,{schema:n,gen:i,opts:a}=r;a.$comment&&n.$comment&&v(r);var o=(n=r).schema[n.opts.schemaId];if(o&&(n.baseId=(0,c.resolveUrl)(n.opts.uriResolver,n.baseId,o)),(n=r).schema.$async&&!n.schemaEnv.$async)throw new Error("async schema in sync schema");a=i.const("_errs",j.default.errors),g(r,a),i.var(s,(0,P._)`${a} === ${j.default.errors}`)}else(0,l.boolOrEmptySchema)(e,t)}function h({schema:e,self:t}){if("boolean"==typeof e)return!e;for(var r in e)if(t.RULES.all[r])return 1}function m(e){return"boolean"!=typeof e.schema}function y(e){(0,N.checkUnknownRules)(e);var{schema:e,errSchemaPath:t,opts:r,self:s}=e;e.$ref&&r.ignoreKeywordsWithRef&&(0,N.schemaHasRulesButRef)(e,s.RULES)&&s.logger.warn(`$ref: keywords ignored in schema at path "${t}"`)}function g(e,t){if(e.opts.jtd)return b(e,[],!1,t);var r=(0,s.getSchemaTypes)(e.schema);b(e,r,!(0,s.coerceAndCheckDataType)(e,r),t)}function v({gen:e,schemaEnv:t,schema:r,errSchemaPath:s,opts:n}){r=r.$comment;!0===n.$comment?e.code((0,P._)`${j.default.self}.logger.log(${r})`):"function"==typeof n.$comment&&(n=(0,P.str)`${s}/$comment`,s=e.scopeValue("root",{ref:t.root}),e.code((0,P._)`${j.default.self}.opts.$comment(${r}, ${n}, ${s}.schema)`))}function b(t,r,s,n){let{gen:i,schema:a,data:o,allErrors:l,opts:c,self:e}=t,u=e.RULES;if(!a.$ref||!c.ignoreKeywordsWithRef&&(0,N.schemaHasRulesButRef)(a,u)){if(!c.jtd){var p=t,d=r;if(!p.schemaEnv.meta&&p.opts.strictTypes){var f=p,h=d;if(h.length)if(f.dataTypes.length){h.forEach(e=>{A(f.dataTypes,e)||I(f,`type "${e}" not allowed by context "${f.dataTypes.join(",")}"`)});var m,y=f,g=h,v=[];for(m of y.dataTypes)A(g,m)?v.push(m):g.includes("integer")&&"number"===m&&v.push("integer");y.dataTypes=v}else f.dataTypes=h;p.opts.allowUnionTypes||(y=p,1<(h=d).length&&(2!==h.length||!h.includes("null"))&&I(y,"use allowUnionTypes to allow union type keyword"));var b,w=p,_=p.dataTypes,$=w.self.RULES.all;for(b in $){var k=$[b];"object"==typeof k&&(0,S.shouldUseRule)(w.schema,k)&&(k=k.definition.type,k.length)&&!k.some(e=>{return e=e,(t=_).includes(e)||"number"===e&&t.includes("integer");var t})&&I(w,`missing type "${k.join(",")}" for keyword "${b}"`)}}}i.block(()=>{for(var e of u.rules)E(e);E(u.post)})}else i.block(()=>T(t,"$ref",u.all.$ref.definition));function E(e){(0,S.shouldUseGroup)(a,e)&&(e.type?(i.if((0,O.checkDataType)(e.type,o,c.strictNumbers)),x(t,e),1===r.length&&r[0]===e.type&&s&&(i.else(),(0,O.reportTypeError)(t)),i.endIf()):x(t,e),l||i.if((0,P._)`${j.default.errors} === ${n||0}`))}}function x(t,r){let{gen:e,schema:s,opts:{useDefaults:n}}=t;n&&(0,i.assignDefaults)(t,r.type),e.block(()=>{for(var e of r.rules)(0,S.shouldUseRule)(s,e)&&T(t,e.keyword,e.definition,r.type)})}function A(e,t){return e.includes(t)||"integer"===t&&e.includes("number")}function I(e,t){t+=` at "${e.schemaEnv.baseId+e.errSchemaPath}" (strictTypes)`,(0,N.checkStrictMode)(e,t,e.opts.strictTypes)}function T(e,t,r,s){e=new _(e,r,t);"code"in r?r.code(e,s):e.$data&&r.validate?(0,n.funcKeywordCode)(e,r):"macro"in r?(0,n.macroKeywordCode)(e,r):(r.compile||r.validate)&&(0,n.funcKeywordCode)(e,r)}function w(e,{dataLevel:r,dataNames:t,dataPathArr:s}){let n,i;if(""===e)return j.default.rootData;if("/"===e[0]){if(!u.test(e))throw new Error("Invalid JSON-pointer: "+e);n=e,i=j.default.rootData}else{var a=p.exec(e);if(!a)throw new Error("Invalid JSON-pointer: "+e);e=+a[1];if("#"===(n=a[2])){if(r<=e)throw new Error(c("property/index",e));return s[r-e]}if(r<e)throw new Error(c("data",e));if(i=t[r-e],!n)return i}let o=i;var l;for(l of n.split("/"))l&&(i=(0,P._)`${i}${(0,P.getProperty)((0,N.unescapeJsonPointer)(l))}`,o=(0,P._)`${o} && ${i}`);return o;function c(e,t){return`Cannot access ${e} ${t} levels up, current level is `+r}}Ys.getData=w}return Ys}var Kn,Bn={};function Un(){if(!Kn){Kn=1,Object.defineProperty(Bn,"__esModule",{value:!0});class e extends Error{constructor(e){super("validation failed"),this.errors=e,this.ajv=this.validation=!0}}Bn.default=e}return Bn}var Fn,zn={};function Gn(){if(!Fn){Fn=1,Object.defineProperty(zn,"__esModule",{value:!0});let n=Vn();class e extends Error{constructor(e,t,r,s){super(s||`can't resolve reference ${r} from id `+t),this.missingRef=(0,n.resolveUrl)(e,t,r),this.missingSchema=(0,n.normalizeId)((0,n.getFullPath)(e,this.missingRef))}}zn.default=e}return zn}var Jn,s={};function Hn(){if(!Jn){Jn=1,Object.defineProperty(s,"__esModule",{value:!0}),s.resolveSchema=s.getCompilingSchema=s.resolveRef=s.compileSchema=s.SchemaEnv=void 0;let p=C(),d=Un(),f=L(),h=Vn(),l=M(),m=qn();class v{constructor(e){var t;this.refs={},this.dynamicAnchors={};let r;"object"==typeof e.schema&&(r=e.schema),this.schema=e.schema,this.schemaId=e.schemaId,this.root=e.root||this,this.baseId=null!=(t=e.baseId)?t:(0,h.normalizeId)(null==r?void 0:r[e.schemaId||"$id"]),this.schemaPath=e.schemaPath,this.localRefs=e.localRefs,this.meta=e.meta,this.$async=null==r?void 0:r.$async,this.refs={}}}s.SchemaEnv=v,s.compileSchema=o,s.resolveRef=function(e,t,r){r=(0,h.resolveUrl)(this.opts.uriResolver,t,r);var s,n=e.refs[r];if(n)return n;let i=function(e,t){let r;for(;"string"==typeof(r=this.refs[t]);)t=r;return r||this.schemas[t]||u.call(this,e,t)}.call(this,e,r);return void 0!==(i=void 0===i&&(n=null==(n=e.localRefs)?void 0:n[r],s=this.opts.schemaId,n)?new v({schema:n,schemaId:s,root:e,baseId:t}):i)?e.refs[r]=function(e){return(0,h.inlineRef)(e.schema,this.opts.inlineRefs)?e.schema:e.validate?e:o.call(this,e)}.call(this,i):void 0},s.getCompilingSchema=y,s.resolveSchema=u;let c=new Set(["properties","patternProperties","enum","dependencies","definitions"]);function o(t){var e=y.call(this,t);if(e)return e;var e=(0,h.getFullPath)(this.opts.uriResolver,t.root.baseId),{es5:r,lines:s}=this.opts.code,n=this.opts.ownProperties,r=new p.CodeGen(this.scope,{es5:r,lines:s,ownProperties:n});let i;t.$async&&(i=r.scopeValue("Error",{ref:d.default,code:(0,p._)`require("ajv/dist/runtime/validation_error").default`}));s=r.scopeName("validate"),t.validateName=s,n={gen:r,allErrors:this.opts.allErrors,data:f.default.data,parentData:f.default.parentData,parentDataProperty:f.default.parentDataProperty,dataNames:[f.default.data],dataPathArr:[p.nil],dataLevel:0,dataTypes:[],definedProperties:new Set,topSchemaRef:r.scopeValue("schema",!0===this.opts.code.source?{ref:t.schema,code:(0,p.stringify)(t.schema)}:{ref:t.schema}),validateName:s,ValidationError:i,schema:t.schema,schemaEnv:t,rootId:e,baseId:t.baseId||e,schemaPath:p.nil,errSchemaPath:t.schemaPath||(this.opts.jtd?"":"#"),errorPath:(0,p._)`""`,opts:this.opts,self:this};let a;try{this._compilations.add(t),(0,m.validateFunctionCode)(n),r.optimize(this.opts.code.optimize);var o=r.toString();a=r.scopeRefs(f.default.scope)+"return "+o,this.opts.code.process&&(a=this.opts.code.process(a,t));var l,c,u=new Function(""+f.default.self,""+f.default.scope,a)(this,this.scope.get());return this.scope.value(s,{ref:u}),u.errors=null,u.schema=t.schema,(u.schemaEnv=t).$async&&(u.$async=!0),!0===this.opts.code.source&&(u.source={validateName:s,validateCode:o,scopeValues:r._values}),this.opts.unevaluated&&({props:l,items:c}=n,u.evaluated={props:l instanceof p.Name?void 0:l,items:c instanceof p.Name?void 0:c,dynamicProps:l instanceof p.Name,dynamicItems:c instanceof p.Name},u.source)&&(u.source.evaluated=(0,p.stringify)(u.evaluated)),t.validate=u,t}catch(e){throw delete t.validate,delete t.validateName,a&&this.logger.error("Error compiling schema, function code:",a),e}finally{this._compilations.delete(t)}}function y(e){for(var t of this._compilations)if(r=t,s=e,r.schema===s.schema&&r.root===s.root&&r.baseId===s.baseId)return t;var r,s}function u(e,t){var r,s,n=this.opts.uriResolver.parse(t),i=(0,h._getFullPath)(this.opts.uriResolver,n);let a=(0,h.getFullPath)(this.opts.uriResolver,e.baseId,void 0);return 0<Object.keys(e.schema).length&&i===a?g.call(this,n,e):(i=(0,h.normalizeId)(i),"string"==typeof(r=this.refs[i]||this.schemas[i])?"object"!=typeof(null==(s=u.call(this,e,r))?void 0:s.schema)?void 0:g.call(this,n,s):"object"==typeof(null==r?void 0:r.schema)?(r.validate||o.call(this,r),i===(0,h.normalizeId)(t)?(s=r.schema,i=this.opts.schemaId,(t=s[i])&&(a=(0,h.resolveUrl)(this.opts.uriResolver,a,t)),new v({schema:s,schemaId:i,root:e,baseId:a})):g.call(this,n,r)):void 0)}function g(t,{baseId:r,schema:s,root:n}){if("/"===(null==(o=t.fragment)?void 0:o[0])){for(var i of t.fragment.slice(1).split("/")){if("boolean"==typeof s)return;var a=s[(0,l.unescapeFragment)(i)];if(void 0===a)return;a="object"==typeof(s=a)&&s[this.opts.schemaId];!c.has(i)&&a&&(r=(0,h.resolveUrl)(this.opts.uriResolver,r,a))}let e;var o,t=("boolean"!=typeof s&&s.$ref&&!(0,l.schemaHasRulesButRef)(s,this.RULES)&&(o=(0,h.resolveUrl)(this.opts.uriResolver,r,s.$ref),e=u.call(this,n,o)),this.opts).schemaId;return(e=e||new v({schema:s,schemaId:t,root:n,baseId:r})).schema!==e.root.schema?e:void 0}}}return s}var Wn,Yn,Qn,Zn,Xn,ei,ti,ri,si,ni={$id:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",description:"Meta-schema for $data reference (JSON AnySchema extension proposal)",type:"object",required:["$data"],properties:{$data:{type:"string",anyOf:[{format:"relative-json-pointer"},{format:"json-pointer"}]}},additionalProperties:!1},ii={},ai={exports:{}};function oi(){if(!Zn){Zn=1;let i=(Wn=Yn?Wn:{HEX:{0:0,1:Yn=1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,a:10,A:10,b:11,B:11,c:12,C:12,d:13,D:13,e:14,E:14,f:15,F:15}}).HEX,r=/^(?:(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)\.){3}(?:25[0-5]|2[0-4]\d|1\d{2}|[1-9]\d|\d)$/u,s=/^\.\.?\//u,n=/^\/\.(?:\/|$)/u,a=/^\/\.\.(?:\/|$)/u,o=/^\/?(?:.|\n)*?(?=\/|$)/u;function l(e){var t;return!(u(e,".")<3)&&([t]=e.match(r)||[],t)?{host:((t,r)=>{let s="",n=!0,i=t.length;for(let e=0;e<i;e++){var a=t[e];"0"===a&&n?(e+1<=i&&t[e+1]===r||e+1===i)&&(s+=a,n=!1):(n=a===r,s+=a)}return s})(t,"."),isIPV4:!0}:{host:e,isIPV4:!1}}function p(e,t=!1){let r="",s=!0;for(var n of e){if(void 0===i[n])return;(s="0"!==n&&!0===s?!1:s)||(r+=n)}return r=t&&0===r.length?"0":r}function c(e){if(u(e,":")<2)return{host:e,isIPV6:!1};var r=(t=>{let r=0,s={error:!1,address:"",zone:""},n=[],i=[],a=!1,o=!1,l=!1;function c(){if(i.length){if(!1===a){var e=p(i);if(void 0===e)return void(s.error=!0);n.push(e)}i.length=0}return 1}for(let e=0;e<t.length;e++){var u=t[e];if("["!==u&&"]"!==u)if(":"===u){if(!0===o&&(l=!0),!c())break;if(r++,n.push(":"),7<r){s.error=!0;break}0<=e-1&&":"===t[e-1]&&(o=!0)}else if("%"!==u)i.push(u);else{if(!c())break;a=!0}}return i.length&&(a?s.zone=i.join(""):l?n.push(i.join("")):n.push(p(i))),s.address=n.join(""),s})(e);if(r.error)return{host:e,isIPV6:!1};{let e=r.address,t=r.address;return r.zone&&(e+="%"+r.zone,t+="%25"+r.zone),{host:e,escapedHost:t,isIPV6:!0}}}function u(t,r){let s=0;for(let e=0;e<t.length;e++)t[e]===r&&s++;return s}Qn={recomposeAuthority:function(t){var r=[];if(void 0!==t.userinfo&&(r.push(t.userinfo),r.push("@")),void 0!==t.host){let e=unescape(t.host);var s=l(e);e=s.isIPV4?s.host:!0===(s=c(s.host)).isIPV6?`[${s.escapedHost}]`:t.host,r.push(e)}return"number"!=typeof t.port&&"string"!=typeof t.port||(r.push(":"),r.push(String(t.port))),r.length?r.join(""):void 0},normalizeComponentEncoding:function(e,t){return t=!0!==t?escape:unescape,void 0!==e.scheme&&(e.scheme=t(e.scheme)),void 0!==e.userinfo&&(e.userinfo=t(e.userinfo)),void 0!==e.host&&(e.host=t(e.host)),void 0!==e.path&&(e.path=t(e.path)),void 0!==e.query&&(e.query=t(e.query)),void 0!==e.fragment&&(e.fragment=t(e.fragment)),e},removeDotSegments:function(e){for(var t=[];e.length;)if(e.match(s))e=e.replace(s,"");else if(e.match(n))e=e.replace(n,"/");else if(e.match(a))e=e.replace(a,"/"),t.pop();else if("."===e||".."===e)e="";else{var r=e.match(o);if(!r)throw new Error("Unexpected dot segment condition");r=r[0];e=e.slice(r.length),t.push(r)}return t.join("")},normalizeIPv4:l,normalizeIPv6:c,stringArrayToHexStripped:p}}return Qn}function li(){if(ei)return Xn;ei=1;let r=/^[\da-f]{8}-[\da-f]{4}-[\da-f]{4}-[\da-f]{4}-[\da-f]{12}$/iu,n=/([\da-z][\d\-a-z]{0,31}):((?:[\w!$'()*+,\-.:;=@]|%[\da-f]{2})+)/iu;function s(e){return"boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}function e(e){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e}function t(e){var t="https"===String(e.scheme).toLowerCase();return e.port!==(t?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}var i={scheme:"http",domainHost:!0,parse:e,serialize:t},a={scheme:"ws",domainHost:!0,parse:function(e){return e.secure=s(e),e.resourceName=(e.path||"/")+(e.query?"?"+e.query:""),e.path=void 0,e.query=void 0,e},serialize:function(e){var t,r;return e.port!==(s(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName&&([t,r]=e.resourceName.split("?"),e.path=t&&"/"!==t?t:void 0,e.query=r,e.resourceName=void 0),e.fragment=void 0,e}};let o={http:i,https:{scheme:"https",domainHost:i.domainHost,parse:e,serialize:t},ws:a,wss:{scheme:"wss",domainHost:a.domainHost,parse:a.parse,serialize:a.serialize},urn:{scheme:"urn",parse:function(e,t){var r,s;return e.path?(r=e.path.match(n))?(s=t.scheme||e.scheme||"urn",e.nid=r[1].toLowerCase(),e.nss=r[2],r=s+":"+(t.nid||e.nid),s=o[r],e.path=void 0,s&&(e=s.parse(e,t))):e.error=e.error||"URN can not be parsed.":e.error="URN can not be parsed",e},serialize:function(e,t){var r=t.scheme||e.scheme||"urn",s=e.nid.toLowerCase(),r=r+":"+(t.nid||s),r=o[r],r=e=r?r.serialize(e,t):e,e=e.nss;return r.path=`${s||t.nid}:`+e,t.skipEscape=!0,r},skipNormalize:!0},"urn:uuid":{scheme:"urn:uuid",parse:function(e,t){return e.uuid=e.nss,e.nss=void 0,t.tolerant||e.uuid&&r.test(e.uuid)||(e.error=e.error||"UUID is not valid."),e},serialize:function(e){var t=e;return t.nss=(e.uuid||"").toLowerCase(),t},skipNormalize:!0}};return Xn=o}function ci(){if(!ti){ti=1;let{normalizeIPv6:a,normalizeIPv4:o,removeDotSegments:l,recomposeAuthority:e,normalizeComponentEncoding:s}=oi(),c=li(),u=Array.from({length:127},(e,t)=>/[^!"$&'()*+,\-.;=_`a-z{}~]/u.test(String.fromCharCode(t))),p=/^(?:([^#/:?]+):)?(?:\/\/((?:([^#/?@]*)@)?(\[[^#/?\]]+\]|[^#/:?]*)(?::(\d*))?))?([^#?]*)(?:\?([^#]*))?(?:#((?:.|[\n\r])*))?/u;var t={SCHEMES:c,normalize:function(e,t){return"string"==typeof e?e=i(d(e,t),t):"object"==typeof e&&(e=d(i(e,t),t)),e},resolve:function(e,t,r){return r=Object.assign({scheme:"null"},r),i(n(d(e,r),d(t,r),r,!0),{...r,skipEscape:!0})},resolveComponents:n,equal:function(e,t,r){return"string"==typeof e?(e=unescape(e),e=i(s(d(e,r),!0),{...r,skipEscape:!0})):"object"==typeof e&&(e=i(s(e,!0),{...r,skipEscape:!0})),"string"==typeof t?(t=unescape(t),t=i(s(d(t,r),!0),{...r,skipEscape:!0})):"object"==typeof t&&(t=i(s(t,!0),{...r,skipEscape:!0})),e.toLowerCase()===t.toLowerCase()},serialize:i,parse:d};function n(e,t,r,s){var n={};return s||(e=d(i(e,r),r),t=d(i(t,r),r)),!(r=r||{}).tolerant&&t.scheme?(n.scheme=t.scheme,n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=l(t.path||""),n.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=l(t.path||""),n.query=t.query):(t.path?("/"===t.path.charAt(0)?n.path=l(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?n.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:n.path=t.path:n.path="/"+t.path,n.path=l(n.path)),n.query=t.query):(n.path=e.path,void 0!==t.query?n.query=t.query:n.query=e.query),n.userinfo=e.userinfo,n.host=e.host,n.port=e.port),n.scheme=e.scheme),n.fragment=t.fragment,n}function i(t,r){var t={host:t.host,scheme:t.scheme,userinfo:t.userinfo,port:t.port,path:t.path,query:t.query,nid:t.nid,nss:t.nss,uuid:t.uuid,fragment:t.fragment,reference:t.reference,resourceName:t.resourceName,secure:t.secure,error:""},r=Object.assign({},r),s=[],n=c[(r.scheme||t.scheme||"").toLowerCase()],i=(n&&n.serialize&&n.serialize(t,r),void 0!==t.path&&(r.skipEscape?t.path=unescape(t.path):(t.path=escape(t.path),void 0!==t.scheme&&(t.path=t.path.split("%3A").join(":")))),"suffix"!==r.reference&&t.scheme&&s.push(t.scheme,":"),e(t));if(void 0!==i&&("suffix"!==r.reference&&s.push("//"),s.push(i),t.path)&&"/"!==t.path.charAt(0)&&s.push("/"),void 0!==t.path){let e=t.path;r.absolutePath||n&&n.absolutePath||(e=l(e)),void 0===i&&(e=e.replace(/^\/\//u,"/%2F")),s.push(e)}return void 0!==t.query&&s.push("?",t.query),void 0!==t.fragment&&s.push("#",t.fragment),s.join("")}function d(e,t){var t=Object.assign({},t),r={scheme:void 0,userinfo:void 0,host:"",port:void 0,path:"",query:void 0,fragment:void 0},s=-1!==e.indexOf("%");let n=!1;e=(e="suffix"===t.reference?(t.scheme?t.scheme+":":"")+"//"+e:e).match(p);if(e){r.scheme=e[1],r.userinfo=e[3],r.host=e[4],r.port=parseInt(e[5],10),r.path=e[6]||"",r.query=e[7],r.fragment=e[8],isNaN(r.port)&&(r.port=e[5]),r.host&&(e=o(r.host),n=!1===e.isIPV4?(i=a(e.host),r.host=i.host.toLowerCase(),i.isIPV6):(r.host=e.host,!0)),r.reference=void 0!==r.scheme||void 0!==r.userinfo||void 0!==r.host||void 0!==r.port||void 0!==r.query||r.path?void 0===r.scheme?"relative":void 0===r.fragment?"absolute":"uri":"same-document",t.reference&&"suffix"!==t.reference&&t.reference!==r.reference&&(r.error=r.error||"URI is not a "+t.reference+" reference.");var i=c[(t.scheme||r.scheme||"").toLowerCase()];if(!(t.unicodeSupport||i&&i.unicodeSupport)&&r.host&&(t.domainHost||i&&i.domainHost)&&!1===n&&(r=>{var s;for(let e=0,t=r.length;e<t;++e)if(126<(s=r.charCodeAt(e))||u[s])return 1})(r.host))try{r.host=URL.domainToASCII(r.host.toLowerCase())}catch(e){r.error=r.error||"Host's domain name can not be converted to ASCII: "+e}i&&i.skipNormalize||(s&&void 0!==r.scheme&&(r.scheme=unescape(r.scheme)),s&&void 0!==r.host&&(r.host=unescape(r.host)),r.path&&(r.path=escape(unescape(r.path))),r.fragment&&(r.fragment=encodeURI(decodeURIComponent(r.fragment)))),i&&i.parse&&i.parse(r,t)}else r.error=r.error||"URI can not be parsed.";return r}ai.exports=t,ai.exports.default=t,ai.exports.fastUri=t}return ai.exports}function ui(){if(!si){si=1;{var e=Ws;Object.defineProperty(e,"__esModule",{value:!0}),e.CodeGen=e.Name=e.nil=e.stringify=e.str=e._=e.KeywordCxt=void 0;var r,s=qn(),_=(Object.defineProperty(e,"KeywordCxt",{enumerable:!0,get:function(){return s.KeywordCxt}}),C()),$=(Object.defineProperty(e,"_",{enumerable:!0,get:function(){return _._}}),Object.defineProperty(e,"str",{enumerable:!0,get:function(){return _.str}}),Object.defineProperty(e,"stringify",{enumerable:!0,get:function(){return _.stringify}}),Object.defineProperty(e,"nil",{enumerable:!0,get:function(){return _.nil}}),Object.defineProperty(e,"Name",{enumerable:!0,get:function(){return _.Name}}),Object.defineProperty(e,"CodeGen",{enumerable:!0,get:function(){return _.CodeGen}}),Un());let a=Gn(),o=yn(),c=Hn(),l=C(),u=Vn(),p=_n(),n=M(),i=ni,d=(ri||(ri=1,Object.defineProperty(ii,"__esModule",{value:!0}),(r=ci()).code='require("ajv/dist/runtime/uri").default',ii.default=r),ii),f=(e,t)=>new RegExp(e,t),h=(f.code="new RegExp",["removeAdditional","useDefaults","coerceTypes"]),m=new Set(["validate","serialize","parse","wrapper","root","schema","keyword","pattern","formats","validate$data","func","obj","Error"]),y={errorDataPath:"",format:"`validateFormats: false` can be used instead.",nullable:'"nullable" keyword is supported by default.',jsonPointers:"Deprecated jsPropertySyntax can be used instead.",extendRefs:"Deprecated ignoreKeywordsWithRef can be used instead.",missingRefs:"Pass empty schema with $id that should be ignored to ajv.addSchema.",processCode:"Use option `code: {process: (code, schemaEnv: object) => string}`",sourceCode:"Use option `code: {source: true}`",strictDefaults:"It is default now, see option `strict`.",strictKeywords:"It is default now, see option `strict`.",uniqueItems:'"uniqueItems" keyword is always validated.',unknownFormats:"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",cache:"Map is used as cache, schema object as key.",serialize:"Map is used as cache, schema object as key.",ajvErrors:"It is default now."},g={ignoreKeywordsWithRef:"",jsPropertySyntax:"",unicode:'"minLength"/"maxLength" account for unicode characters by default.'},v=200;class P{constructor(e={}){this.schemas={},this.refs={},this.formats={},this._compilations=new Set,this._loading={},this._cache=new Map,e=this.opts={...e,...(t=e,i=t.strict,r=!0===(r=null==(r=t.code)?void 0:r.optimize)||void 0===r?1:r||0,n=null!=(n=null==(n=t.code)?void 0:n.regExp)?n:f,s=null!=(s=t.uriResolver)?s:d.default,{strictSchema:null==(a=null!=(a=t.strictSchema)?a:i)||a,strictNumbers:null==(a=null!=(a=t.strictNumbers)?a:i)||a,strictTypes:null!=(a=null!=(a=t.strictTypes)?a:i)?a:"log",strictTuples:null!=(a=null!=(a=t.strictTuples)?a:i)?a:"log",strictRequired:null!=(a=null!=(a=t.strictRequired)?a:i)&&a,code:t.code?{...t.code,optimize:r,regExp:n}:{optimize:r,regExp:n},loopRequired:null!=(i=t.loopRequired)?i:v,loopEnum:null!=(a=t.loopEnum)?a:v,meta:null==(r=t.meta)||r,messages:null==(n=t.messages)||n,inlineRefs:null==(i=t.inlineRefs)||i,schemaId:null!=(a=t.schemaId)?a:"$id",addUsedSchema:null==(r=t.addUsedSchema)||r,validateSchema:null==(n=t.validateSchema)||n,validateFormats:null==(i=t.validateFormats)||i,unicodeRegExp:null==(a=t.unicodeRegExp)||a,int32range:null==(r=t.int32range)||r,uriResolver:s})};var t,r,s,{es5:n,lines:i}=this.opts.code,a=(this.scope=new l.ValueScope({scope:{},prefixes:m,es5:n,lines:i}),this.logger=(e=>{if(!1===e)return b;if(void 0===e)return console;if(e.log&&e.warn&&e.error)return e;throw new Error("logger must implement log, warn and error methods")})(e.logger),e.validateFormats);e.validateFormats=!1,this.RULES=(0,o.getRules)(),k.call(this,y,e,"NOT SUPPORTED"),k.call(this,g,e,"DEPRECATED","warn"),this._metaOpts=function(){var e={...this.opts};for(var t of h)delete e[t];return e}.call(this),e.formats&&function(){for(var e in this.opts.formats){var t=this.opts.formats[e];t&&this.addFormat(e,t)}}.call(this),this._addVocabularies(),this._addDefaultMetaSchema(),e.keywords&&function(e){if(Array.isArray(e))this.addVocabulary(e);else for(var t in this.logger.warn("keywords option as map is deprecated, pass array"),e){var r=e[t];r.keyword||(r.keyword=t),this.addKeyword(r)}}.call(this,e.keywords),"object"==typeof e.meta&&this.addMetaSchema(e.meta),function(){var e=this.opts.schemas;if(e)if(Array.isArray(e))this.addSchema(e);else for(var t in e)this.addSchema(e[t],t)}.call(this),e.validateFormats=a}_addVocabularies(){this.addKeyword("$async")}_addDefaultMetaSchema(){var{$data:e,meta:t,schemaId:r}=this.opts;let s=i;"id"===r&&((s={...i}).id=s.$id,delete s.$id),t&&e&&this.addMetaSchema(s,s[r],!1)}defaultMeta(){var{meta:e,schemaId:t}=this.opts;return this.opts.defaultMeta="object"==typeof e?e[t]||e:void 0}validate(e,t){let r;if("string"==typeof e){if(!(r=this.getSchema(e)))throw new Error(`no schema with key or ref "${e}"`)}else r=this.compile(e);e=r(t);return"$async"in r||(this.errors=r.errors),e}compile(e,t){e=this._addSchema(e,t);return e.validate||this._compileSchemaEnv(e)}compileAsync(e,r){if("function"!=typeof this.opts.loadSchema)throw new Error("options.loadSchema should be a function");let s=this.opts.loadSchema;return t.call(this,e,r);async function t(e,t){await n.call(this,e.$schema);e=this._addSchema(e,t);return e.validate||i.call(this,e)}async function n(e){e&&!this.getSchema(e)&&await t.call(this,{$ref:e},!0)}async function i(t){try{return this._compileSchemaEnv(t)}catch(e){if(e instanceof a.default)return function({missingSchema:e,missingRef:t}){if(this.refs[e])throw new Error(`AnySchema ${e} is loaded but ${t} cannot be resolved`)}.call(this,e),await async function(e){var t=await async function(e){var t=this._loading[e];if(t)return t;try{return await(this._loading[e]=s(e))}finally{delete this._loading[e]}}.call(this,e);this.refs[e]||await n.call(this,t.$schema);this.refs[e]||this.addSchema(t,e,r)}.call(this,e.missingSchema),i.call(this,t);throw e}}}addSchema(t,r,s,n=this.opts.validateSchema){if(Array.isArray(t))for(var e of t)this.addSchema(e,void 0,s,n);else{let e;if("object"==typeof t){var i=this.opts.schemaId;if(void 0!==(e=t[i])&&"string"!=typeof e)throw new Error(`schema ${i} must be string`)}r=(0,u.normalizeId)(r||e),this._checkUnique(r),this.schemas[r]=this._addSchema(t,s,r,n,!0)}return this}addMetaSchema(e,t,r=this.opts.validateSchema){return this.addSchema(e,t,!0,r),this}validateSchema(e,t){if("boolean"==typeof e)return!0;var r=e.$schema;if(void 0!==r&&"string"!=typeof r)throw new Error("$schema must be a string");if(!(r=r||this.opts.defaultMeta||this.defaultMeta()))return this.logger.warn("meta-schema not available"),!(this.errors=null);r=this.validate(r,e);if(!r&&t){e="schema is invalid: "+this.errorsText();if("log"!==this.opts.validateSchema)throw new Error(e);this.logger.error(e)}return r}getSchema(e){let t;for(;"string"==typeof(t=E.call(this,e));)e=t;if(void 0===t){var r=this.opts.schemaId,r=new c.SchemaEnv({schema:{},schemaId:r});if(!(t=c.resolveSchema.call(this,r,e)))return;this.refs[e]=t}return t.validate||this._compileSchemaEnv(t)}removeSchema(e){if(e instanceof RegExp)return this._removeAllSchemas(this.schemas,e),this._removeAllSchemas(this.refs,e),this;switch(typeof e){case"undefined":return this._removeAllSchemas(this.schemas),this._removeAllSchemas(this.refs),this._cache.clear(),this;case"string":var t=E.call(this,e);return"object"==typeof t&&this._cache.delete(t.schema),delete this.schemas[e],delete this.refs[e],this;case"object":this._cache.delete(e);t=e[this.opts.schemaId];return t&&(t=(0,u.normalizeId)(t),delete this.schemas[t],delete this.refs[t]),this;default:throw new Error("ajv.removeSchema: invalid parameter")}}addVocabulary(e){for(var t of e)this.addKeyword(t);return this}addKeyword(e,t){let s;if("string"==typeof e)s=e,"object"==typeof t&&(this.logger.warn("these parameters are deprecated, see docs for addKeyword"),t.keyword=s);else{if("object"!=typeof e||void 0!==t)throw new Error("invalid addKeywords parameters");if(t=e,s=t.keyword,Array.isArray(s)&&!s.length)throw new Error("addKeywords: keyword must be string or non-empty array")}if(!function(e,t){let r=this.RULES;if((0,n.eachItem)(e,e=>{if(r.keywords[e])throw new Error(`Keyword ${e} is already defined`);if(!w.test(e))throw new Error(`Keyword ${e} has invalid name`)}),t&&t.$data&&!("code"in t||"validate"in t))throw new Error('$data keyword must have "code" or "validate" function')}.call(this,s,t),t){!function(e){let t=e.metaSchema;void 0!==t&&(e.$data&&this.opts.$data&&(t=O(t)),e.validateSchema=this.compile(t,!0))}.call(this,t);let r={...t,type:(0,p.getJSONTypes)(t.type),schemaType:(0,p.getJSONTypes)(t.schemaType)};(0,n.eachItem)(s,0===r.type.length?e=>S.call(this,e,r):t=>r.type.forEach(e=>S.call(this,t,r,e)))}else(0,n.eachItem)(s,e=>S.call(this,e));return this}getKeyword(e){e=this.RULES.all[e];return"object"==typeof e?e.definition:!!e}removeKeyword(t){var e,r=this.RULES;delete r.keywords[t],delete r.all[t];for(e of r.rules){var s=e.rules.findIndex(e=>e.keyword===t);0<=s&&e.rules.splice(s,1)}return this}addFormat(e,t){return"string"==typeof t&&(t=new RegExp(t)),this.formats[e]=t,this}errorsText(e=this.errors,{separator:r=", ",dataVar:t="data"}={}){return e&&0!==e.length?e.map(e=>""+t+e.instancePath+" "+e.message).reduce((e,t)=>e+r+t):"No errors"}$dataMetaSchema(t,e){var r,s,n,i=this.RULES.all;t=JSON.parse(JSON.stringify(t));for(r of e){let e=t;for(s of r.split("/").slice(1))e=e[s];for(n in i){var a,o=i[n];"object"==typeof o&&(o=o.definition.$data,a=e[n],o&&a)&&(e[n]=O(a))}}return t}_removeAllSchemas(e,t){for(var r in e){var s=e[r];t&&!t.test(r)||("string"==typeof s?delete e[r]:s&&!s.meta&&(this._cache.delete(s.schema),delete e[r]))}}_addSchema(e,t,r,s=this.opts.validateSchema,n=this.opts.addUsedSchema){let i;var a=this.opts.schemaId;if("object"==typeof e)i=e[a];else{if(this.opts.jtd)throw new Error("schema must be object");if("boolean"!=typeof e)throw new Error("schema must be object or boolean")}var o,l=this._cache.get(e);return void 0===l&&(r=(0,u.normalizeId)(i||r),o=u.getSchemaRefs.call(this,e,r),l=new c.SchemaEnv({schema:e,schemaId:a,meta:t,baseId:r,localRefs:o}),this._cache.set(l.schema,l),n&&!r.startsWith("#")&&(r&&this._checkUnique(r),this.refs[r]=l),s)&&this.validateSchema(e,!0),l}_checkUnique(e){if(this.schemas[e]||this.refs[e])throw new Error(`schema with key or id "${e}" already exists`)}_compileSchemaEnv(e){if(e.meta?this._compileMetaSchema(e):c.compileSchema.call(this,e),e.validate)return e.validate;throw new Error("ajv implementation error")}_compileMetaSchema(e){var t=this.opts;this.opts=this._metaOpts;try{c.compileSchema.call(this,e)}finally{this.opts=t}}}function k(e,t,r,s="error"){for(var n in e){var i=n;i in t&&this.logger[s](`${r}: option ${n}. `+e[i])}}function E(e){return e=(0,u.normalizeId)(e),this.schemas[e]||this.refs[e]}P.ValidationError=$.default,P.MissingRefError=a.default,e.default=P;let b={log(){},warn(){},error(){}},w=/^[a-z_$][a-z0-9_$:-]*$/i;function S(e,t,r){var s=null==t?void 0:t.post;if(r&&s)throw new Error('keyword with "post" flag cannot have "type"');var n=this.RULES;let i=s?n.post:n.rules.find(({type:e})=>e===r);i||(i={type:r,rules:[]},n.rules.push(i)),n.keywords[e]=!0,t&&(s={keyword:e,definition:{...t,type:(0,p.getJSONTypes)(t.type),schemaType:(0,p.getJSONTypes)(t.schemaType)}},t.before?function(e,t,r){var s=e.rules.findIndex(e=>e.keyword===r);0<=s?e.rules.splice(s,0,t):(e.rules.push(t),this.logger.warn(`rule ${r} is not defined`))}.call(this,i,s,t.before):i.rules.push(s),n.all[e]=s,null!=(n=t.implements))&&n.forEach(e=>this.addKeyword(e))}let t={$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"};function O(e){return{anyOf:[e,t]}}}}return Ws}var pi,di={},fi={},hi={};var mi,yi,gi={};function vi(){if(!mi){mi=1,Object.defineProperty(gi,"__esModule",{value:!0}),gi.callRef=gi.getValidate=void 0;let h=Gn(),d=_(),m=C(),f=L(),y=Hn(),g=M();var e={keyword:"$ref",schemaType:"string",code(e){let{gen:t,schema:r,it:s}=e,{baseId:n,schemaEnv:i,validateName:a,opts:o,self:l}=s,c=i.root;if(("#"===r||"#/"===r)&&n===c.baseId)return i===c?b(e,a,i,i.$async):(f=t.scopeValue("root",{ref:c}),b(e,(0,m._)`${f}.validate`,c,c.$async));var u,p,d,f=y.resolveRef.call(l,c,n,r);if(void 0===f)throw new h.default(s.opts.uriResolver,n,r);if(!(f instanceof y.SchemaEnv))return u=f,p=t.scopeValue("schema",!0===o.code.source?{ref:u,code:(0,m.stringify)(u)}:{ref:u}),d=t.name("valid"),u=e.subschema({schema:u,dataTypes:[],schemaPath:m.nil,topSchemaRef:p,errSchemaPath:r},d),e.mergeEvaluated(u),void e.ok(d);u=v(e,p=f),b(e,u,p,p.$async)}};function v(e,t){e=e.gen;return t.validate?e.scopeValue("validate",{ref:t.validate}):(0,m._)`${e.scopeValue("wrapper",{ref:t})}.validate`}function b(e,r,s,t){let{gen:n,it:i}=e,{allErrors:a,schemaEnv:o,opts:l}=i,c=l.passContext?f.default.this:m.nil;if(t){if(!o.$async)throw new Error("async schema referenced by sync schema");let t=n.let("valid");n.try(()=>{n.code((0,m._)`await ${(0,d.callValidateCode)(e,r,c)}`),p(r),a||n.assign(t,!0)},e=>{n.if((0,m._)`!(${e} instanceof ${i.ValidationError})`,()=>n.throw(e)),u(e),a||n.assign(t,!1)}),e.ok(t)}else e.result((0,d.callValidateCode)(e,r,c),()=>p(r),()=>u(r));function u(e){e=(0,m._)`${e}.errors`;n.assign(f.default.vErrors,(0,m._)`${f.default.vErrors} === null ? ${e} : ${f.default.vErrors}.concat(${e})`),n.assign(f.default.errors,(0,m._)`${f.default.vErrors}.length`)}function p(e){var t,r;i.opts.unevaluated&&(t=null==(t=null==s?void 0:s.validate)?void 0:t.evaluated,!0!==i.props&&(t&&!t.dynamicProps?void 0!==t.props&&(i.props=g.mergeEvaluated.props(n,t.props,i.props)):(r=n.var("props",(0,m._)`${e}.evaluated.props`),i.props=g.mergeEvaluated.props(n,r,i.props,m.Name))),!0!==i.items)&&(t&&!t.dynamicItems?void 0!==t.items&&(i.items=g.mergeEvaluated.items(n,t.items,i.items)):(r=n.var("items",(0,m._)`${e}.evaluated.items`),i.items=g.mergeEvaluated.items(n,r,i.items,m.Name)))}}gi.getValidate=v,gi.callRef=b,gi.default=e}return gi}function bi(){var e,t;return yi||(yi=1,Object.defineProperty(fi,"__esModule",{value:!0}),pi||(pi=1,Object.defineProperty(hi,"__esModule",{value:!0}),hi.default={keyword:"id",code(){throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID')}}),t=hi,e=vi(),t=["$schema","$id","$defs","$vocabulary",{keyword:"$comment"},"definitions",t.default,e.default],fi.default=t),fi}var wi,_i={},$i={};var ki,Ei={};var Si,Oi,Pi={},ji={};function Ni(){if(!Oi){Oi=1,Object.defineProperty(Pi,"__esModule",{value:!0});let i=C(),a=M(),o=(Si||(Si=1,Object.defineProperty(ji,"__esModule",{value:!0}),(ji.default=e).code='require("ajv/dist/runtime/ucs2length").default'),ji);function e(e){var t,r=e.length;let s=0,n=0;for(;n<r;)s++,55296<=(t=e.charCodeAt(n++))&&t<=56319&&n<r&&56320==(64512&e.charCodeAt(n))&&n++;return s}Pi.default={keyword:["maxLength","minLength"],type:"string",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){e="maxLength"===e?"more":"fewer";return(0,i.str)`must NOT have ${e} than ${t} characters`},params:({schemaCode:e})=>(0,i._)`{limit: ${e}}`},code(e){var{keyword:t,data:r,schemaCode:s,it:n}=e,t="maxLength"===t?i.operators.GT:i.operators.LT,n=!1===n.opts.unicode?(0,i._)`${r}.length`:(0,i._)`${(0,a.useFunc)(e.gen,o.default)}(${r})`;e.fail$data((0,i._)`${n} ${t} ${s}`)}}}return Pi}var xi,Ai={};var Ii,Ti={};var Ci,Mi={};function Li(){if(!Ci){Ci=1,Object.defineProperty(Mi,"__esModule",{value:!0});let m=_(),y=C(),g=M();Mi.default={keyword:"required",type:"object",schemaType:"array",$data:!0,error:{message:({params:{missingProperty:e}})=>(0,y.str)`must have required property '${e}'`,params:({params:{missingProperty:e}})=>(0,y._)`{missingProperty: ${e}}`},code(n){let{gen:i,schema:t,schemaCode:a,data:o,$data:r,it:s}=n,l=s.opts;if(r||0!==t.length){let e=t.length>=l.loopRequired;if(s.allErrors)if(e||r)n.block$data(y.nil,h);else for(var c of t)(0,m.checkReportMissingProp)(n,c);else{let s=i.let("missing");if(e||r){let r=i.let("valid",!0);n.block$data(r,()=>{return e=s,t=r,n.setParams({missingProperty:e}),void i.forOf(e,a,()=>{i.assign(t,(0,m.propertyInData)(i,o,e,l.ownProperties)),i.if((0,y.not)(t),()=>{n.error(),i.break()})},y.nil);var e,t}),n.ok(r)}else i.if((0,m.checkMissingProp)(n,t,s)),(0,m.reportMissingProp)(n,s),i.else()}if(l.strictRequired){var u,p,d=n.parentSchema.properties,f=n.it.definedProperties;for(u of t)void 0!==(null==d?void 0:d[u])||f.has(u)||(p=s.schemaEnv.baseId+s.errSchemaPath,p=`required property "${u}" is not defined at "${p}" (strictRequired)`,(0,g.checkStrictMode)(s,p,s.opts.strictRequired))}function h(){i.forOf("prop",a,e=>{n.setParams({missingProperty:e}),i.if((0,m.noPropertyInData)(i,o,e,l.ownProperties),()=>n.error())})}}}}}return Mi}var Ri,Di={};var Vi,qi,Ki={},Bi={};function Ui(){var e;return Vi||(Vi=1,Object.defineProperty(Bi,"__esModule",{value:!0}),(e=Tn()).code='require("ajv/dist/runtime/equal").default',Bi.default=e),Bi}function Fi(){if(!qi){qi=1,Object.defineProperty(Ki,"__esModule",{value:!0});let p=_n(),d=C(),n=M(),f=Ui();Ki.default={keyword:"uniqueItems",type:"array",schemaType:"boolean",$data:!0,error:{message:({params:{i:e,j:t}})=>(0,d.str)`must NOT have duplicate items (items ## ${t} and ${e} are identical)`,params:({params:{i:e,j:t}})=>(0,d._)`{i: ${e}, j: ${t}}`},code(o){let{gen:l,data:c,$data:e,schema:t,parentSchema:r,schemaCode:s,it:u}=o;if(e||t){let i=l.let("valid"),a=r.items?(0,p.getSchemaTypes)(r.items):[];o.block$data(i,function(){let e=l.let("i",(0,d._)`${c}.length`),t=l.let("j");o.setParams({i:e,j:t}),l.assign(i,!0),l.if((0,d._)`${e} > 1`,()=>(0<a.length&&!a.some(e=>"object"===e||"array"===e)?function(e,t){let r=l.name("item"),s=(0,p.checkDataTypes)(a,r,u.opts.strictNumbers,p.DataType.Wrong),n=l.const("indices",(0,d._)`{}`);l.for((0,d._)`;${e}--;`,()=>{l.let(r,(0,d._)`${c}[${e}]`),l.if(s,(0,d._)`continue`),1<a.length&&l.if((0,d._)`typeof ${r} == "string"`,(0,d._)`${r} += "_"`),l.if((0,d._)`typeof ${n}[${r}] == "number"`,()=>{l.assign(t,(0,d._)`${n}[${r}]`),o.error(),l.assign(i,!1).break()}).code((0,d._)`${n}[${r}] = ${e}`)})}:function(e,t){let r=(0,n.useFunc)(l,f.default),s=l.name("outer");l.label(s).for((0,d._)`;${e}--;`,()=>l.for((0,d._)`${t} = ${e}; ${t}--;`,()=>l.if((0,d._)`${r}(${c}[${e}], ${c}[${t}])`,()=>{o.error(),l.assign(i,!1).break(s)})))})(e,t))},(0,d._)`${s} === false`),o.ok(i)}}}}return Ki}var zi,Gi={};var Ji,Hi,Wi={};function Yi(){if(!Ji){Ji=1,Object.defineProperty(Wi,"__esModule",{value:!0});let p=C(),d=M(),f=Ui();Wi.default={keyword:"enum",schemaType:"array",$data:!0,error:{message:"must be equal to one of the allowed values",params:({schemaCode:e})=>(0,p._)`{allowedValues: ${e}}`},code(e){let{gen:t,data:i,$data:r,schema:a,schemaCode:s,it:n}=e;if(!r&&0===a.length)throw new Error("enum must have non-empty array");var o=a.length>=n.opts.loopEnum;let l,c=()=>null!=l?l:l=(0,d.useFunc)(t,f.default),u;if(o||r)u=t.let("valid"),e.block$data(u,function(){t.assign(u,!1),t.forOf("v",s,e=>t.if((0,p._)`${c()}(${i}, ${e})`,()=>t.assign(u,!0).break()))});else{if(!Array.isArray(a))throw new Error("ajv implementation error");let n=t.const("vSchema",s);u=(0,p.or)(...a.map((e,t)=>{return r=n,t=t,"object"==typeof(s=a[t])&&null!==s?(0,p._)`${c()}(${i}, ${r}[${t}])`:(0,p._)`${i} === ${s}`;var r,s}))}e.pass(u)}}}return Wi}function Qi(){var e,t,r,s,n,i,a,o,l,c;return Hi||(Hi=1,Object.defineProperty(_i,"__esModule",{value:!0}),c=(()=>{if(!wi){wi=1,Object.defineProperty($i,"__esModule",{value:!0});let n=C();var e=n.operators;let i={maximum:{okStr:"<=",ok:e.LTE,fail:e.GT},minimum:{okStr:">=",ok:e.GTE,fail:e.LT},exclusiveMaximum:{okStr:"<",ok:e.LT,fail:e.GTE},exclusiveMinimum:{okStr:">",ok:e.GT,fail:e.LTE}};e={message:({keyword:e,schemaCode:t})=>(0,n.str)`must be ${i[e].okStr} ${t}`,params:({keyword:e,schemaCode:t})=>(0,n._)`{comparison: ${i[e].okStr}, limit: ${t}}`},e={keyword:Object.keys(i),type:"number",schemaType:"number",$data:!0,error:e,code(e){var{keyword:t,data:r,schemaCode:s}=e;e.fail$data((0,n._)`${r} ${i[t].fail} ${s} || isNaN(${r})`)}};$i.default=e}return $i})(),e=(()=>{if(!ki){ki=1,Object.defineProperty(Ei,"__esModule",{value:!0});let i=C();Ei.default={keyword:"multipleOf",type:"number",schemaType:"number",$data:!0,error:{message:({schemaCode:e})=>(0,i.str)`must be multiple of ${e}`,params:({schemaCode:e})=>(0,i._)`{multipleOf: ${e}}`},code(e){var{gen:t,data:r,schemaCode:s,it:n}=e,n=n.opts.multipleOfPrecision,t=t.let("res"),n=n?(0,i._)`Math.abs(Math.round(${t}) - ${t}) > 1e-${n}`:(0,i._)`${t} !== parseInt(${t})`;e.fail$data((0,i._)`(${s} === 0 || (${t} = ${r}/${s}, ${n}))`)}}}return Ei})(),t=Ni(),r=(()=>{if(!xi){xi=1,Object.defineProperty(Ai,"__esModule",{value:!0});let a=_(),o=C();Ai.default={keyword:"pattern",type:"string",schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>(0,o.str)`must match pattern "${e}"`,params:({schemaCode:e})=>(0,o._)`{pattern: ${e}}`},code(e){var{data:t,$data:r,schema:s,schemaCode:n,it:i}=e,i=i.opts.unicodeRegExp?"u":"",r=r?(0,o._)`(new RegExp(${n}, ${i}))`:(0,a.usePattern)(e,s);e.fail$data((0,o._)`!${r}.test(${t})`)}}}return Ai})(),s=(()=>{if(!Ii){Ii=1,Object.defineProperty(Ti,"__esModule",{value:!0});let n=C();Ti.default={keyword:["maxProperties","minProperties"],type:"object",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){e="maxProperties"===e?"more":"fewer";return(0,n.str)`must NOT have ${e} than ${t} properties`},params:({schemaCode:e})=>(0,n._)`{limit: ${e}}`},code(e){var{keyword:t,data:r,schemaCode:s}=e,t="maxProperties"===t?n.operators.GT:n.operators.LT;e.fail$data((0,n._)`Object.keys(${r}).length ${t} ${s}`)}}}return Ti})(),n=Li(),i=(()=>{if(!Ri){Ri=1,Object.defineProperty(Di,"__esModule",{value:!0});let n=C();Di.default={keyword:["maxItems","minItems"],type:"array",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){e="maxItems"===e?"more":"fewer";return(0,n.str)`must NOT have ${e} than ${t} items`},params:({schemaCode:e})=>(0,n._)`{limit: ${e}}`},code(e){var{keyword:t,data:r,schemaCode:s}=e,t="maxItems"===t?n.operators.GT:n.operators.LT;e.fail$data((0,n._)`${r}.length ${t} ${s}`)}}}return Di})(),a=Fi(),o=(()=>{if(!zi){zi=1,Object.defineProperty(Gi,"__esModule",{value:!0});let a=C(),o=M(),l=Ui();Gi.default={keyword:"const",$data:!0,error:{message:"must be equal to constant",params:({schemaCode:e})=>(0,a._)`{allowedValue: ${e}}`},code(e){var{gen:t,data:r,$data:s,schemaCode:n,schema:i}=e;s||i&&"object"==typeof i?e.fail$data((0,a._)`!${(0,o.useFunc)(t,l.default)}(${r}, ${n})`):e.fail((0,a._)`${i} !== ${r}`)}}}return Gi})(),l=Yi(),c=[c.default,e.default,t.default,r.default,s.default,n.default,i.default,a.default,{keyword:"type",schemaType:["string","array"]},{keyword:"nullable",schemaType:"boolean"},o.default,l.default],_i.default=c),_i}var Zi,Xi={},ea={};function ta(){if(!Zi){Zi=1,Object.defineProperty(ea,"__esModule",{value:!0}),ea.validateAdditionalItems=void 0;let l=C(),c=M();var e={keyword:"additionalItems",type:"array",schemaType:["boolean","object"],before:"uniqueItems",error:{message:({params:{len:e}})=>(0,l.str)`must NOT have more than ${e} items`,params:({params:{len:e}})=>(0,l._)`{limit: ${e}}`},code(e){var{parentSchema:t,it:r}=e,t=t.items;Array.isArray(t)?s(e,t):(0,c.checkStrictMode)(r,'"additionalItems" is ignored when "items" is not an array of schemas')}};function s(r,s){let{gen:n,schema:e,data:t,keyword:i,it:a}=r,o=(a.items=!0,n.const("len",(0,l._)`${t}.length`));if(!1===e)r.setParams({len:s.length}),r.pass((0,l._)`${o} <= ${s.length}`);else if("object"==typeof e&&!(0,c.alwaysValidSchema)(a,e)){let e=n.var("valid",(0,l._)`${o} <= ${s.length}`);n.if((0,l.not)(e),()=>{var t;t=e,n.forRange("i",s.length,o,e=>{r.subschema({keyword:i,dataProp:e,dataPropType:c.Type.Num},t),a.allErrors||n.if((0,l.not)(t),()=>n.break())})}),r.ok(e)}}ea.validateAdditionalItems=s,ea.default=e}return ea}var ra,sa,na={},ia={};function aa(){if(!ra){ra=1,Object.defineProperty(ia,"__esModule",{value:!0}),ia.validateTuple=void 0;let h=C(),m=M(),s=_();var e={keyword:"items",type:"array",schemaType:["object","array","boolean"],before:"uniqueItems",code(e){var{schema:t,it:r}=e;if(Array.isArray(t))return n(e,"additionalItems",t);r.items=!0,(0,m.alwaysValidSchema)(r,t)||e.ok((0,s.validateArray)(e))}};function n(r,e,t=r.schema){let{gen:s,parentSchema:n,data:i,keyword:a,it:o}=r;var l=n,{opts:c,errSchemaPath:u}=o,p=t.length,l=p===l.minItems&&(p===l.maxItems||!1===l[e]);c.strictTuples&&!l&&(l=`"${a}" is ${p}-tuple, but minItems or maxItems/${e} are not specified or different at path "${u}"`,(0,m.checkStrictMode)(o,l,c.strictTuples)),o.opts.unevaluated&&t.length&&!0!==o.items&&(o.items=m.mergeEvaluated.items(s,t.length,o.items));let d=s.name("valid"),f=s.const("len",(0,h._)`${i}.length`);t.forEach((e,t)=>{(0,m.alwaysValidSchema)(o,e)||(s.if((0,h._)`${f} > ${t}`,()=>r.subschema({keyword:a,schemaProp:t,dataProp:t},d)),r.ok(d))})}ia.validateTuple=n,ia.default=e}return ia}var oa,la={};var ca,ua={};function pa(){if(!ca){ca=1,Object.defineProperty(ua,"__esModule",{value:!0});let f=C(),h=M();ua.default={keyword:"contains",type:"array",schemaType:["object","boolean"],before:"uniqueItems",trackErrors:!0,error:{message:({params:{min:e,max:t}})=>void 0===t?(0,f.str)`must contain at least ${e} valid item(s)`:(0,f.str)`must contain at least ${e} and no more than ${t} valid item(s)`,params:({params:{min:e,max:t}})=>void 0===t?(0,f._)`{minContains: ${e}}`:(0,f._)`{minContains: ${e}, maxContains: ${t}}`},code(s){let{gen:n,schema:e,parentSchema:t,data:i,it:a}=s,o,l;var{minContains:r,maxContains:c}=t;a.opts.next?(o=void 0===r?1:r,l=c):o=1;let u=n.const("len",(0,f._)`${i}.length`);if(s.setParams({min:o,max:l}),void 0===l&&0===o)(0,h.checkStrictMode)(a,'"minContains" == 0 without "maxContains": "contains" keyword ignored');else if(void 0!==l&&o>l)(0,h.checkStrictMode)(a,'"minContains" > "maxContains" is always invalid'),s.fail();else if((0,h.alwaysValidSchema)(a,e)){let e=(0,f._)`${u} >= ${o}`;void 0!==l&&(e=(0,f._)`${e} && ${u} <= ${l}`),void s.pass(e)}else{a.items=!0;let r=n.name("valid");function p(){let e=n.name("_valid"),t=n.let("count",0);d(e,()=>n.if(e,()=>{return e=t,n.code((0,f._)`${e}++`),void(void 0===l?n.if((0,f._)`${e} >= ${o}`,()=>n.assign(r,!0).break()):(n.if((0,f._)`${e} > ${l}`,()=>n.assign(r,!1).break()),1===o?n.assign(r,!0):n.if((0,f._)`${e} >= ${o}`,()=>n.assign(r,!0))));var e}))}function d(t,r){n.forRange("i",0,u,e=>{s.subschema({keyword:"contains",dataProp:e,dataPropType:h.Type.Num,compositeRule:!0},t),r()})}void 0===l&&1===o?d(r,()=>n.if(r,()=>n.break())):0===o?(n.let(r,!0),void 0!==l&&n.if((0,f._)`${i}.length > 0`,p)):(n.let(r,!1),p()),s.result(r,()=>s.reset())}}}}return ua}var da,fa={};function ha(){if(!da){da=1;{var e=fa;Object.defineProperty(e,"__esModule",{value:!0}),e.validateSchemaDeps=e.validatePropertyDeps=e.error=void 0;let c=C(),l=M(),u=_();e.error={message:({params:{property:e,depsCount:t,deps:r}})=>{t=1===t?"property":"properties";return(0,c.str)`must have ${t} ${r} when property ${e} is present`},params:({params:{property:e,depsCount:t,deps:r,missingProperty:s}})=>(0,c._)`{property: ${e},

    missingProperty: ${s},

    depsCount: ${t},

    deps: ${r}}`};var t={keyword:"dependencies",type:"object",schemaType:"object",error:e.error,code(e){var[t,r]=(({schema:e})=>{var t,r={},s={};for(t in e)"__proto__"!==t&&((Array.isArray(e[t])?r:s)[t]=e[t]);return[r,s]})(e);s(e,t),n(e,r)}};function s(r,e=r.schema){var{gen:s,data:n,it:i}=r;if(0!==Object.keys(e).length){var a,o,l=s.let("missing");for(a in e){let t=e[a];0!==t.length&&(o=(0,u.propertyInData)(s,n,a,i.opts.ownProperties),r.setParams({property:a,depsCount:t.length,deps:t.join(", ")}),i.allErrors?s.if(o,()=>{for(var e of t)(0,u.checkReportMissingProp)(r,e)}):(s.if((0,c._)`${o} && (${(0,u.checkMissingProp)(r,t,l)})`),(0,u.reportMissingProp)(r,l),s.else()))}}}function n(r,e=r.schema){let{gen:s,data:n,keyword:i,it:a}=r,o=s.name("valid");for(let t in e)(0,l.alwaysValidSchema)(a,e[t])||(s.if((0,u.propertyInData)(s,n,t,a.opts.ownProperties),()=>{var e=r.subschema({keyword:i,schemaProp:t},o);r.mergeValidEvaluated(e,o)},()=>s.var(o,!0)),r.ok(o))}e.validatePropertyDeps=s,e.validateSchemaDeps=n,e.default=t}}return fa}var ma,ya={};var ga,va={};function ba(){if(!ga){ga=1,Object.defineProperty(va,"__esModule",{value:!0});let h=_(),m=C(),y=L(),g=M();va.default={keyword:"additionalProperties",type:["object"],schemaType:["boolean","object"],allowUndefined:!0,trackErrors:!0,error:{message:"must NOT have additional properties",params:({params:e})=>(0,m._)`{additionalProperty: ${e.additionalProperty}}`},code(i){let{gen:a,schema:r,parentSchema:o,data:t,errsCount:e,it:l}=i;if(!e)throw new Error("ajv implementation error");let{allErrors:c,opts:u}=l;if(l.props=!0,"all"===u.removeAdditional||!(0,g.alwaysValidSchema)(l,r)){let s=(0,h.allSchemaProperties)(o.properties),n=(0,h.allSchemaProperties)(o.patternProperties);function p(e){a.code((0,m._)`delete ${t}[${e}]`)}function d(e){var t;"all"===u.removeAdditional||u.removeAdditional&&!1===r?p(e):!1===r?(i.setParams({additionalProperty:e}),i.error(),c||a.break()):"object"!=typeof r||(0,g.alwaysValidSchema)(l,r)||(t=a.name("valid"),"failing"===u.removeAdditional?(f(e,t,!1),a.if((0,m.not)(t),()=>{i.reset(),p(e)})):(f(e,t),c||a.if((0,m.not)(t),()=>a.break())))}function f(e,t,r){e={keyword:"additionalProperties",dataProp:e,dataPropType:g.Type.Str};!1===r&&Object.assign(e,{compositeRule:!0,createErrors:!1,allErrors:!1}),i.subschema(e,t)}a.forIn("key",t,e=>{s.length||n.length?a.if((t=>{let e;var r;return e=8<s.length?(r=(0,g.schemaRefOrVal)(l,o.properties,"properties"),(0,h.isOwnProperty)(a,r,t)):s.length?(0,m.or)(...s.map(e=>(0,m._)`${t} === ${e}`)):m.nil,n.length&&(e=(0,m.or)(e,...n.map(e=>(0,m._)`${(0,h.usePattern)(i,e)}.test(${t})`))),(0,m.not)(e)})(e),()=>d(e)):d(e)}),i.ok((0,m._)`${e} === ${y.default.errors}`)}}}}return va}var wa,_a={};function $a(){if(!wa){wa=1,Object.defineProperty(_a,"__esModule",{value:!0});let p=qn(),d=_(),f=M(),h=ba();_a.default={keyword:"properties",type:"object",schemaType:"object",code(r){let{gen:e,schema:s,parentSchema:t,data:n,it:i}=r;"all"===i.opts.removeAdditional&&void 0===t.additionalProperties&&h.default.code(new p.KeywordCxt(i,h.default,"additionalProperties"));var a,o=(0,d.allSchemaProperties)(s);for(a of o)i.definedProperties.add(a);i.opts.unevaluated&&o.length&&!0!==i.props&&(i.props=f.mergeEvaluated.props(e,(0,f.toHash)(o),i.props));var l,o=o.filter(e=>!(0,f.alwaysValidSchema)(i,s[e]));if(0!==o.length){let t=e.name("valid");for(var c of o)l=c,i.opts.useDefaults&&!i.compositeRule&&void 0!==s[l].default?u(c):(e.if((0,d.propertyInData)(e,n,c,i.opts.ownProperties)),u(c),i.allErrors||e.else().var(t,!0),e.endIf()),r.it.definedProperties.add(c),r.ok(t);function u(e){r.subschema({keyword:"properties",schemaProp:e,dataProp:e},t)}}}}}return _a}var ka,Ea={};function Sa(){if(!ka){ka=1,Object.defineProperty(Ea,"__esModule",{value:!0});let y=_(),g=C(),v=M(),b=M();Ea.default={keyword:"patternProperties",type:"object",schemaType:"object",code(i){let{gen:a,schema:t,data:o,parentSchema:r,it:l}=i;var c=l.opts;let u=(0,y.allSchemaProperties)(t),p=u.filter(e=>(0,v.alwaysValidSchema)(l,t[e]));if(0!==u.length&&(p.length!==u.length||l.opts.unevaluated&&!0!==l.props)){let e=c.strictSchema&&!c.allowMatchingProperties&&r.properties,s=a.name("valid"),n=(!0===l.props||l.props instanceof g.Name||(l.props=(0,b.evaluatedPropsToName)(a,l.props)),l).props;for(var d of u){if(e){f=void 0;h=void 0;var f=d;for(var h in e)new RegExp(f).test(h)&&(0,v.checkStrictMode)(l,`property ${h} matches pattern ${f} (use allowMatchingProperties)`)}l.allErrors?m(d):(a.var(s,!0),m(d),a.if(s))}function m(r){a.forIn("key",o,t=>{a.if((0,g._)`${(0,y.usePattern)(i,r)}.test(${t})`,()=>{var e=p.includes(r);e||i.subschema({keyword:"patternProperties",schemaProp:r,dataProp:t,dataPropType:b.Type.Str},s),l.opts.unevaluated&&!0!==n?a.assign((0,g._)`${n}[${t}]`,!0):e||l.allErrors||a.if((0,g.not)(s),()=>a.break())})})}}}}}return Ea}var Oa,Pa={};var ja,Na={};var xa,Aa={};var Ia,Ta={};var Ca,Ma={};function La(){if(!Ca){Ca=1,Object.defineProperty(Ma,"__esModule",{value:!0});let u=C(),s=M();function n(e,t){t=e.schema[t];return void 0!==t&&!(0,s.alwaysValidSchema)(e,t)}Ma.default={keyword:"if",schemaType:["object","boolean"],trackErrors:!0,error:{message:({params:e})=>(0,u.str)`must match "${e.ifClause}" schema`,params:({params:e})=>(0,u._)`{failingKeyword: ${e.ifClause}}`},code(i){let{gen:a,parentSchema:e,it:t}=i;void 0===e.then&&void 0===e.else&&(0,s.checkStrictMode)(t,'"if" without "then" and "else" is ignored');var r,o=n(t,"then"),l=n(t,"else");if(o||l){let s=a.let("valid",!0),n=a.name("_valid");function c(t,r){return()=>{var e=i.subschema({keyword:t},n);a.assign(s,n),i.mergeValidEvaluated(e,s),r?a.assign(r,(0,u._)`${t}`):i.setParams({ifClause:t})}}r=i.subschema({keyword:"if",compositeRule:!0,createErrors:!1,allErrors:!1},n),i.mergeEvaluated(r),i.reset(),o&&l?(r=a.let("ifClause"),i.setParams({ifClause:r}),a.if(n,c("then",r),c("else",r))):o?a.if(n,c("then")):a.if((0,u.not)(n),c("else")),i.pass(s,()=>i.error(!0))}}}}return Ma}var Ra,Da,Va={};function qa(){if(!Da){Da=1,Object.defineProperty(Xi,"__esModule",{value:!0});let r=ta(),s=(()=>{if(!sa){sa=1,Object.defineProperty(na,"__esModule",{value:!0});let t=aa();na.default={keyword:"prefixItems",type:"array",schemaType:["array"],before:"uniqueItems",code:e=>(0,t.validateTuple)(e,"items")}}return na})(),n=aa(),i=(()=>{if(!oa){oa=1,Object.defineProperty(la,"__esModule",{value:!0});let t=C(),n=M(),i=_(),a=ta();la.default={keyword:"items",type:"array",schemaType:["object","boolean"],before:"uniqueItems",error:{message:({params:{len:e}})=>(0,t.str)`must NOT have more than ${e} items`,params:({params:{len:e}})=>(0,t._)`{limit: ${e}}`},code(e){var{schema:t,parentSchema:r,it:s}=e,r=r.prefixItems;s.items=!0,(0,n.alwaysValidSchema)(s,t)||(r?(0,a.validateAdditionalItems)(e,r):e.ok((0,i.validateArray)(e)))}}}return la})(),a=pa(),o=ha(),l=(()=>{if(!ma){ma=1,Object.defineProperty(ya,"__esModule",{value:!0});let a=C(),t=M();ya.default={keyword:"propertyNames",type:"object",schemaType:["object","boolean"],error:{message:"property name must be valid",params:({params:e})=>(0,a._)`{propertyName: ${e.propertyName}}`},code(r){let{gen:s,schema:e,data:n,it:i}=r;if(!(0,t.alwaysValidSchema)(i,e)){let t=s.name("valid");s.forIn("key",n,e=>{r.setParams({propertyName:e}),r.subschema({keyword:"propertyNames",data:e,dataTypes:["string"],propertyName:e,compositeRule:!0},t),s.if((0,a.not)(t),()=>{r.error(!0),i.allErrors||s.break()})}),r.ok(t)}}}}return ya})(),c=ba(),u=$a(),p=Sa(),d=(()=>{if(!Oa){Oa=1,Object.defineProperty(Pa,"__esModule",{value:!0});let n=M();Pa.default={keyword:"not",schemaType:["object","boolean"],trackErrors:!0,code(e){var{gen:t,schema:r,it:s}=e;(0,n.alwaysValidSchema)(s,r)?e.fail():(s=t.name("valid"),e.subschema({keyword:"not",compositeRule:!0,createErrors:!1,allErrors:!1},s),e.failResult(s,()=>e.reset(),()=>e.error()))},error:{message:"must NOT be valid"}}}return Pa})(),f=(ja||(ja=1,Object.defineProperty(Na,"__esModule",{value:!0}),e={keyword:"anyOf",schemaType:"array",trackErrors:!0,code:_().validateUnion,error:{message:"must match a schema in anyOf"}},Na.default=e),Na);var e;let h=(()=>{if(!xa){xa=1,Object.defineProperty(Aa,"__esModule",{value:!0});let c=C(),u=M();Aa.default={keyword:"oneOf",schemaType:"array",trackErrors:!0,error:{message:"must match exactly one schema in oneOf",params:({params:e})=>(0,c._)`{passingSchemas: ${e.passing}}`},code(a){let{gen:o,schema:t,parentSchema:e,it:l}=a;if(!Array.isArray(t))throw new Error("ajv implementation error");if(!l.opts.discriminator||!e.discriminator){let e=t,s=o.let("valid",!1),n=o.let("passing",null),i=o.name("_valid");a.setParams({passing:n}),o.block(function(){e.forEach((e,t)=>{let r;(0,u.alwaysValidSchema)(l,e)?o.var(i,!0):r=a.subschema({keyword:"oneOf",schemaProp:t,compositeRule:!0},i),0<t&&o.if((0,c._)`${i} && ${s}`).assign(s,!1).assign(n,(0,c._)`[${n}, ${t}]`).else(),o.if(i,()=>{o.assign(s,!0),o.assign(n,t),r&&a.mergeEvaluated(r,c.Name)})})}),a.result(s,()=>a.reset(),()=>a.error(!0))}}}}return Aa})(),m=(()=>{if(!Ia){Ia=1,Object.defineProperty(Ta,"__esModule",{value:!0});let i=M();Ta.default={keyword:"allOf",schemaType:"array",code(r){let{gen:e,schema:t,it:s}=r;if(!Array.isArray(t))throw new Error("ajv implementation error");let n=e.name("valid");t.forEach((e,t)=>{(0,i.alwaysValidSchema)(s,e)||(e=r.subschema({keyword:"allOf",schemaProp:t},n),r.ok(n),r.mergeEvaluated(e))})}}}return Ta})(),y=La(),g=(()=>{if(!Ra){Ra=1,Object.defineProperty(Va,"__esModule",{value:!0});let s=M();Va.default={keyword:["then","else"],schemaType:["object","boolean"],code({keyword:e,parentSchema:t,it:r}){void 0===t.if&&(0,s.checkStrictMode)(r,`"${e}" without "if" is ignored`)}}}return Va})();Xi.default=function(e=!1){var t=[d.default,f.default,h.default,m.default,y.default,g.default,l.default,c.default,o.default,u.default,p.default];return e?t.push(s.default,i.default):t.push(r.default,n.default),t.push(a.default),t}}return Xi}var Ka,Ba,Ua={},Fa={};function za(){if(!Ka){Ka=1,Object.defineProperty(Fa,"__esModule",{value:!0});let h=C();Fa.default={keyword:"format",type:["number","string"],schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>(0,h.str)`must match format "${e}"`,params:({schemaCode:e})=>(0,h._)`{format: ${e}}`},code(n,i){let{gen:a,data:o,$data:e,schema:l,schemaCode:c,it:t}=n,{opts:u,errSchemaPath:r,schemaEnv:p,self:d}=t;if(u.validateFormats)if(e){let e=a.scopeValue("formats",{ref:d.formats,code:u.code.formats}),t=a.const("fDef",(0,h._)`${e}[${c}]`),r=a.let("fType"),s=a.let("format");a.if((0,h._)`typeof ${t} == "object" && !(${t} instanceof RegExp)`,()=>a.assign(r,(0,h._)`${t}.type || "string"`).assign(s,(0,h._)`${t}.validate`),()=>a.assign(r,(0,h._)`"string"`).assign(s,t)),n.fail$data((0,h.or)(!1===u.strictSchema?h.nil:(0,h._)`${c} && !${s}`,(()=>{var e=p.$async?(0,h._)`(${t}.async ? await ${s}(${o}) : ${s}(${o}))`:(0,h._)`${s}(${o})`,e=(0,h._)`(typeof ${s} == "function" ? ${e} : ${s}.test(${o}))`;return(0,h._)`${s} && ${s} !== true && ${r} === ${i} && !${e}`})()))}else{let s=d.formats[l];if(s){if(!0!==s){let[e,t,r]=(e=>{var t=e instanceof RegExp?(0,h.regexpCode)(e):u.code.formats?(0,h._)`${u.code.formats}${(0,h.getProperty)(l)}`:void 0,t=a.scopeValue("formats",{key:l,ref:e,code:t});return"object"!=typeof e||e instanceof RegExp?["string",e,t]:[e.type||"string",e.validate,(0,h._)`${t}.validate`]})(s);e===i&&n.pass((()=>{if("object"!=typeof s||s instanceof RegExp||!s.async)return"function"==typeof t?(0,h._)`${r}(${o})`:(0,h._)`${r}.test(${o})`;if(p.$async)return(0,h._)`await ${r}(${o})`;throw new Error("async format in sync schema")})())}}else{if(!1!==u.strictSchema)throw new Error(f());function f(){return`unknown format "${l}" ignored in schema at path "${r}"`}d.logger.warn(f())}}}}}return Fa}var Ga,Ja,Ha={};function Wa(){var e,t,r,s,n;return Ja||(Ja=1,Object.defineProperty(di,"__esModule",{value:!0}),n=bi(),e=Qi(),t=qa(),Ba||(Ba=1,Object.defineProperty(Ua,"__esModule",{value:!0}),r=[za().default],Ua.default=r),r=Ua,Ga||(Ga=1,Object.defineProperty(Ha,"__esModule",{value:!0}),Ha.contentVocabulary=Ha.metadataVocabulary=void 0,Ha.metadataVocabulary=["title","description","default","deprecated","readOnly","writeOnly","examples"],Ha.contentVocabulary=["contentMediaType","contentEncoding","contentSchema"]),s=Ha,n=[n.default,e.default,(0,t.default)(),r.default,s.metadataVocabulary,s.contentVocabulary],di.default=n),di}var Ya,Qa,Za={},Xa={};function eo(){if(!Qa){Qa=1,Object.defineProperty(Za,"__esModule",{value:!0});let a=C(),o=(Ya||(Ya=1,Object.defineProperty(Xa,"__esModule",{value:!0}),Xa.DiscrError=void 0,Xa.DiscrError={Tag:"tag",Mapping:"mapping"}),Xa),f=Hn(),h=Gn(),m=M();Za.default={keyword:"discriminator",type:"object",schemaType:"object",error:{message:({params:{discrError:e,tagName:t}})=>e===o.DiscrError.Tag?`tag "${t}" must be string`:`value of tag "${t}" must be in oneOf`,params:({params:{discrError:e,tag:t,tagName:r}})=>(0,a._)`{error: ${e}, tag: ${r}, tagValue: ${t}}`},code(r){let{gen:s,data:e,schema:t,parentSchema:c,it:u}=r,p=c.oneOf;if(!u.opts.discriminator)throw new Error("discriminator: requires discriminator option");let d=t.propertyName;if("string"!=typeof d)throw new Error("discriminator: requires propertyName");if(t.mapping)throw new Error("discriminator: mapping is not supported");if(!p)throw new Error("discriminator: requires oneOf keyword");let n=s.let("valid",!1),i=s.const("tag",(0,a._)`${e}${(0,a.getProperty)(d)}`);s.if((0,a._)`typeof ${i} == "string"`,()=>{var e,t=(()=>{let r,s={},n=o(c),i=!0;for(let t=0;t<p.length;t++){let e=p[t];if(null!=e&&e.$ref&&!(0,m.schemaHasRulesButRef)(e,u.self.RULES)){var a=e.$ref;if(void 0===(e=(e=f.resolveRef.call(u.self,u.schemaEnv.root,u.baseId,a))instanceof f.SchemaEnv?e.schema:e))throw new h.default(u.opts.uriResolver,u.baseId,a)}a=null==(r=null==e?void 0:e.properties)?void 0:r[d];if("object"!=typeof a)throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${d}"`);i=i&&(n||o(e)),((e,t)=>{if(e.const)l(e.const,t);else{if(!e.enum)throw new Error(`discriminator: "properties/${d}" must have "const" or "enum"`);for(var r of e.enum)l(r,t)}})(a,t)}if(i)return s;throw new Error(`discriminator: "${d}" must be required`);function o({required:e}){return Array.isArray(e)&&e.includes(d)}function l(e,t){if("string"!=typeof e||e in s)throw new Error(`discriminator: "${d}" values must be unique strings`);s[e]=t}})();for(e in s.if(!1),t)s.elseIf((0,a._)`${i} === ${e}`),s.assign(n,(e=>{var t=s.name("valid"),e=r.subschema({keyword:"oneOf",schemaProp:e},t);return r.mergeEvaluated(e,a.Name),t})(t[e]));s.else(),r.error(!1,{discrError:o.DiscrError.Mapping,tag:i,tagName:d}),s.endIf()},()=>r.error(!1,{discrError:o.DiscrError.Tag,tag:i,tagName:d})),r.ok(n)}}}return Za}var to,ro={$schema:"http://json-schema.org/draft-07/schema#",$id:"http://json-schema.org/draft-07/schema#",title:"Core schema meta-schema",definitions:{schemaArray:{type:"array",minItems:1,items:{$ref:"#"}},nonNegativeInteger:{type:"integer",minimum:0},nonNegativeIntegerDefault0:{allOf:[{$ref:"#/definitions/nonNegativeInteger"},{default:0}]},simpleTypes:{enum:["array","boolean","integer","null","number","object","string"]},stringArray:{type:"array",items:{type:"string"},uniqueItems:!0,default:[]}},type:["object","boolean"],properties:{$id:{type:"string",format:"uri-reference"},$schema:{type:"string",format:"uri"},$ref:{type:"string",format:"uri-reference"},$comment:{type:"string"},title:{type:"string"},description:{type:"string"},default:!0,readOnly:{type:"boolean",default:!1},examples:{type:"array",items:!0},multipleOf:{type:"number",exclusiveMinimum:0},maximum:{type:"number"},exclusiveMaximum:{type:"number"},minimum:{type:"number"},exclusiveMinimum:{type:"number"},maxLength:{$ref:"#/definitions/nonNegativeInteger"},minLength:{$ref:"#/definitions/nonNegativeIntegerDefault0"},pattern:{type:"string",format:"regex"},additionalItems:{$ref:"#"},items:{anyOf:[{$ref:"#"},{$ref:"#/definitions/schemaArray"}],default:!0},maxItems:{$ref:"#/definitions/nonNegativeInteger"},minItems:{$ref:"#/definitions/nonNegativeIntegerDefault0"},uniqueItems:{type:"boolean",default:!1},contains:{$ref:"#"},maxProperties:{$ref:"#/definitions/nonNegativeInteger"},minProperties:{$ref:"#/definitions/nonNegativeIntegerDefault0"},required:{$ref:"#/definitions/stringArray"},additionalProperties:{$ref:"#"},definitions:{type:"object",additionalProperties:{$ref:"#"},default:{}},properties:{type:"object",additionalProperties:{$ref:"#"},default:{}},patternProperties:{type:"object",additionalProperties:{$ref:"#"},propertyNames:{format:"regex"},default:{}},dependencies:{type:"object",additionalProperties:{anyOf:[{$ref:"#"},{$ref:"#/definitions/stringArray"}]}},propertyNames:{$ref:"#"},const:!0,enum:{type:"array",items:!0,minItems:1,uniqueItems:!0},type:{anyOf:[{$ref:"#/definitions/simpleTypes"},{type:"array",items:{$ref:"#/definitions/simpleTypes"},minItems:1,uniqueItems:!0}]},format:{type:"string"},contentMediaType:{type:"string"},contentEncoding:{type:"string"},if:{$ref:"#"},then:{$ref:"#"},else:{$ref:"#"},allOf:{$ref:"#/definitions/schemaArray"},anyOf:{$ref:"#/definitions/schemaArray"},oneOf:{$ref:"#/definitions/schemaArray"},not:{$ref:"#"}},default:!0};function so(){if(!to){to=1;{var i=Hs;var a=Hs.exports;Object.defineProperty(a,"__esModule",{value:!0}),a.MissingRefError=a.ValidationError=a.CodeGen=a.Name=a.nil=a.stringify=a.str=a._=a.KeywordCxt=a.Ajv=void 0;var o=ui();let e=Wa(),t=eo(),r=ro,s=["/properties"],n="http://json-schema.org/draft-07/schema";class d extends o.default{_addVocabularies(){super._addVocabularies(),e.default.forEach(e=>this.addVocabulary(e)),this.opts.discriminator&&this.addKeyword(t.default)}_addDefaultMetaSchema(){var e;super._addDefaultMetaSchema(),this.opts.meta&&(e=this.opts.$data?this.$dataMetaSchema(r,s):r,this.addMetaSchema(e,n,!1),this.refs["http://json-schema.org/schema"]=n)}defaultMeta(){return this.opts.defaultMeta=super.defaultMeta()||(this.getSchema(n)?n:void 0)}}a.Ajv=d,i.exports=a=d,i.exports.Ajv=d,Object.defineProperty(a,"__esModule",{value:!0}),a.default=d;var l=qn(),c=(Object.defineProperty(a,"KeywordCxt",{enumerable:!0,get:function(){return l.KeywordCxt}}),C()),u=(Object.defineProperty(a,"_",{enumerable:!0,get:function(){return c._}}),Object.defineProperty(a,"str",{enumerable:!0,get:function(){return c.str}}),Object.defineProperty(a,"stringify",{enumerable:!0,get:function(){return c.stringify}}),Object.defineProperty(a,"nil",{enumerable:!0,get:function(){return c.nil}}),Object.defineProperty(a,"Name",{enumerable:!0,get:function(){return c.Name}}),Object.defineProperty(a,"CodeGen",{enumerable:!0,get:function(){return c.CodeGen}}),Un()),p=(Object.defineProperty(a,"ValidationError",{enumerable:!0,get:function(){return u.default}}),Gn());Object.defineProperty(a,"MissingRefError",{enumerable:!0,get:function(){return p.default}})}}return Hs.exports}var no,io={exports:{}};function ao(){if(!no){no=1;{var e=io;var r=io.exports;Object.defineProperty(r,"__esModule",{value:!0});let _=so(),$=C(),t=tn(),n=qn(),k=dn(),E=L(),S="errorMessage",O=new _.Name("emUsed"),P={required:"missingProperty",dependencies:"property",dependentRequired:"property"},i=/\$\{[^}]+\}/,a=/\$\{([^}]+)\}/g,o=/^""\s*\+\s*|\s*\+\s*""$/g;function s(w){return{keyword:S,schemaType:["string","object"],post:!0,code(d){let{gen:f,data:h,schema:m,schemaValue:y,it:s}=d;if(!1!==s.createErrors){let r=m,p=$.strConcat(E.default.instancePath,s.errorPath);function g(e,t){return $.and(_._`${e}.keyword !== ${S}`,_._`!${e}.${O}`,_._`${e}.instancePath === ${p}`,_._`${e}.keyword in ${t}`,_._`${e}.schemaPath.indexOf(${s.errSchemaPath}) === 0`,_._`/^\\/[^\\/]*$/.test(${e}.schemaPath.slice(${s.errSchemaPath.length}))`)}function v(e,t){var r,s=[];for(r in e){var n=t[r];i.test(n)&&s.push([r,(n=n,_._`function(){return ${b(n)}}`)])}return f.object(...s)}function b(e){return i.test(e)?new t._Code(t.safeStringify(e).replace(a,(e,t)=>`" + JSON.stringify(${n.getData(t,s)}) + "`).replace(o,"")):_.stringify(e)}f.if(_._`${E.default.errors} > 0`,()=>{if("object"==typeof r){var[a,o]=(e=>{let t,r;for(var s in e)if("properties"!==s&&"items"!==s){var n=e[s];if("object"==typeof n){var i,a=(t=t||{})[s]={};for(i in n)a[i]=[]}else(r=r||{})[s]=[]}return[t,r]})(r);if(o){let s=f.const("emErrors",_.stringify(o)),t=f.const("templates",v(o,m)),n=(f.forOf("err",E.default.vErrors,e=>f.if(g(e,s),()=>f.code(_._`${s}[${e}.keyword].push(${e})`).assign(_._`${e}.${O}`,!0))),w).singleError;if(n){let t=f.let("message",_._`""`),r=f.let("paramsErrors",_._`[]`);e(e=>{f.if(t,()=>f.code(_._`${t} += ${"string"==typeof n?n:";"}`)),f.code(_._`${t} += ${i(e)}`),f.assign(r,_._`${r}.concat(${s}[${e}])`)}),k.reportError(d,{message:t,params:_._`{errors: ${r}}`})}else e(e=>k.reportError(d,{message:i(e),params:_._`{errors: ${s}[${e}]}`}));function e(t){f.forIn("key",s,e=>f.if(_._`${s}[${e}].length`,()=>t(e)))}function i(e){return _._`${e} in ${t} ? ${t}[${e}]() : ${y}[${e}]`}}if(a){var l,c=a;let s=f.const("emErrors",_.stringify(c)),e=[];for(l in c)e.push([l,v(c[l],m[l])]);let n=f.const("templates",f.object(...e)),t=f.scopeValue("obj",{ref:P,code:_.stringify(P)}),r=f.let("emPropParams"),i=f.let("emParamsErrors");f.forOf("err",E.default.vErrors,e=>f.if(g(e,s),()=>{f.assign(r,_._`${t}[${e}.keyword]`),f.assign(i,_._`${s}[${e}.keyword][${e}.params[${r}]]`),f.if(i,()=>f.code(_._`${i}.push(${e})`).assign(_._`${e}.${O}`,!0))})),f.forIn("key",s,r=>f.forIn("keyProp",_._`${s}[${r}]`,t=>{f.assign(i,_._`${s}[${r}][${t}]`),f.if(_._`${i}.length`,()=>{var e=f.const("tmpl",_._`${n}[${r}] && ${n}[${r}][${t}]`);k.reportError(d,{message:_._`${e} ? ${e}() : ${y}[${r}][${t}]`,params:_._`{errors: ${i}}`})})}))}{o=(({properties:e,items:t})=>{var r={};if(e)for(var s in r.props={},e)r.props[s]=[];if(t){r.items={};for(let e=0;e<t.length;e++)r.items[e]=[]}return r})(r);let{props:s,items:n}=o;if(s||n){o=_._`typeof ${h} == "object"`,a=_._`Array.isArray(${h})`;let i=f.let("emErrors"),e,t,r=f.let("templates");function u(e,t){f.assign(i,_.stringify(e)),f.assign(r,v(e,t))}s&&n?(e=f.let("emChildKwd"),f.if(o),f.if(a,()=>{u(n,m.items),f.assign(e,_.str`items`)},()=>{u(s,m.properties),f.assign(e,_.str`properties`)}),t=_._`[${e}]`):n?(f.if(a),u(n,m.items),t=_._`.items`):s&&(f.if($.and(o,$.not(a))),u(s,m.properties),t=_._`.properties`),f.forOf("err",E.default.vErrors,t=>{var r,s,n;r=t,s=i,n=e=>f.code(_._`${i}[${e}].push(${t})`).assign(_._`${t}.${O}`,!0),f.if($.and(_._`${r}.keyword !== ${S}`,_._`!${r}.${O}`,_._`${r}.instancePath.indexOf(${p}) === 0`),()=>{var e=f.scopeValue("pattern",{ref:/^\/([^/]*)(?:\/|$)/,code:_._`new RegExp("^\\\/([^/]*)(?:\\\/|$)")`}),e=f.const("emMatches",_._`${e}.exec(${r}.instancePath.slice(${p}.length))`);let t=f.const("emChild",_._`${e} && ${e}[1].replace(/~1/g, "/").replace(/~0/g, "~")`);f.if(_._`${t} !== undefined && ${t} in ${s}`,()=>n(t))})}),f.forIn("key",i,e=>f.if(_._`${i}[${e}].length`,()=>{k.reportError(d,{message:_._`${e} in ${r} ? ${r}[${e}]() : ${y}${t}[${e}]`,params:_._`{errors: ${i}[${e}]}`}),f.assign(_._`${E.default.vErrors}[${E.default.errors}-1].instancePath`,_._`${p} + "/" + ${e}.replace(/~/g, "~0").replace(/\\//g, "~1")`)})),f.endIf()}}}o="string"==typeof r?r:r._;if(o){var t=o;let r=f.const("emErrs",_._`[]`);f.forOf("err",E.default.vErrors,e=>{return f.if((t=e,$.and(_._`${t}.keyword !== ${S}`,_._`!${t}.${O}`,$.or(_._`${t}.instancePath === ${p}`,$.and(_._`${t}.instancePath.indexOf(${p}) === 0`,_._`${t}.instancePath[${p}.length] === "/"`)),_._`${t}.schemaPath.indexOf(${s.errSchemaPath}) === 0`,_._`${t}.schemaPath[${s.errSchemaPath}.length] === "/"`)),()=>f.code(_._`${r}.push(${e})`).assign(_._`${e}.${O}`,!0));var t}),f.if(_._`${r}.length`,()=>k.reportError(d,{message:b(t),params:_._`{errors: ${r}}`}))}if(!w.keepErrors){let t=f.const("emErrs",_._`[]`);f.forOf("err",E.default.vErrors,e=>f.if(_._`!${e}.${O}`,()=>f.code(_._`${t}.push(${e})`))),f.assign(E.default.vErrors,t).assign(E.default.errors,_._`${t}.length`)}})}},metaSchema:{anyOf:[{type:"string"},{type:"object",properties:{properties:{$ref:"#/$defs/stringMap"},items:{$ref:"#/$defs/stringList"},required:{$ref:"#/$defs/stringOrMap"},dependencies:{$ref:"#/$defs/stringOrMap"}},additionalProperties:{type:"string"}}],$defs:{stringMap:{type:"object",additionalProperties:{type:"string"}},stringOrMap:{anyOf:[{type:"string"},{$ref:"#/$defs/stringMap"}]},stringList:{type:"array",items:{type:"string"}}}}}}var l=(e,t={})=>{if(!e.opts.allErrors)throw new Error("ajv-errors: Ajv option allErrors must be true");if(e.opts.jsPropertySyntax)throw new Error("ajv-errors: ajv option jsPropertySyntax is not supported");return e.addKeyword(s(t))};r.default=l,e.exports=l,e.exports.default=l}}return io.exports}w=e.exports;{function oo(t,e){var r,s=Object.keys(t);return Object.getOwnPropertySymbols&&(r=Object.getOwnPropertySymbols(t),e&&(r=r.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),s.push.apply(s,r)),s}function lo(e,t){return(lo=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e})(e,t)}function co(){co=function(e,t){return new s(e,void 0,t)};var n=RegExp.prototype,a=new WeakMap;function s(e,t,r){return t=RegExp(e,t),a.set(t,r||a.get(e)),lo(t,s.prototype)}function i(n,e){var i=a.get(e);return Object.keys(i).reduce(function(e,t){var r=i[t];if("number"==typeof r)e[t]=n[r];else{for(var s=0;void 0===n[r[s]]&&s+1<r.length;)s++;e[t]=n[r[s]]}return e},Object.create(null))}var e=s,t=RegExp;if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");return e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&lo(e,t),s.prototype.exec=function(e){var t;return(e=n.exec.call(this,e))&&(e.groups=i(e,this),t=e.indices)&&(t.groups=i(t,this)),e},s.prototype[Symbol.replace]=function(e,t){var r,s;return"string"==typeof t?(r=a.get(this),n[Symbol.replace].call(this,e,t.replace(/\$<([^>]+)>/g,function(e,t){return t=r[t],"$"+(Array.isArray(t)?t.join("$"):t)}))):"function"==typeof t?(s=this,n[Symbol.replace].call(this,e,function(){var e=arguments;return"object"!=typeof e[e.length-1]&&(e=[].slice.call(e)).push(i(e,s)),t.apply(this,e)})):n[Symbol.replace].call(this,e,t)},co.apply(this,arguments)}let i=(e,t,r)=>{let s=e,n=t.split("/"),i=n.length;for(let e=0;e<i-1;e+=1){var a=n[e];s[a]||(s[a]={}),s=s[a]}s[n[i-1]]=r};function uo(t,r){Object.keys(t[r]||[]).forEach(e=>{(e=t[r][e])&&e.external&&e.external.name&&(e.name=e.external.name,e.external=!0)})}let r=co(/^(([A-Za-z]:\/|[A-Za-z]:\\)?.*?):(([A-Za-z]:\/|[A-Za-z]:[\\])?.*?)(?::((rw|ro|z|Z)(,(rw|ro|z|Z))*))?$/,{volume:1,container_path:3,flags:5}),u=e=>null===(e=e.match(r))?"":e.groups.volume,p=e=>e&&!e.includes("/")&&!e.includes("\\")&&!e.includes("~")&&!e.includes(".")&&!e.includes("$"),s=e=>{var t=e.match(r);return null!==t&&(e={type:p(t.groups.volume)?"volume":"bind",source:t.groups.volume,target:t.groups.container_path},(t=(t.groups.flags||"").replace(/\s+/,"").split(",")).includes("ro")&&(e.volume={nocopy:!0}),t.includes("z")?e.bind={selinux:"z"}:t.includes("Z")&&(e.bind={selinux:"Z"})),e},t=Or;class Eo extends Error{constructor(e,t,r){super(e),this.lines=t,this.details=r,this.name="YamlSyntaxError"}}let n=e=>{e=t.parseDocument(e,{prettyErrors:!0});let s=[],n=[];if(e.errors.forEach((r,e)=>{var t=r.message.split(":\n")[0];n.push({line:r.linePos[0].line,message:t,pos:r.linePos}),Array.from({length:r.linePos?r.linePos[1].line-r.linePos[0].line:1},(e,t)=>r.linePos[0].line+t).forEach(e=>s.push(e))}),0<n.length)throw new Eo(n.map(e=>e.message).join("\n"),s,n)},d=e=>(n(e),t.parse(e,{intAsBigInt:!0})),o=co(/^((\[?([a-fA-F\d.:]+)\]?:)?([\d]*(-[\d]+)?):)?([\d]+(-[\d]+)?)(\/((udp|tcp|sctp)))?$/,{ip_part:2,ip:3,host:4,container:6,proto_part:8,proto:9}),l=e=>{let n=e.match(o);if(null===n)return[e];if((e=n.groups.container)&&e.includes("-")){var i=e.split("-");let t=parseInt(i[0],10);var i=parseInt(i[1],10),a=((a=n.groups.host)||e).split("-");let r=parseInt(a[0],10),s=[];return Array.from({length:i-t+1},(e,t)=>t).forEach(e=>{s=[...s,...l("".concat(n.groups.ip_part||"").concat(r+e,":").concat(t+e).concat(n.groups.proto_part||""))]}),s}return a={target:parseInt(e,10)},n.groups.ip&&(a.host_ip=n.groups.ip),n.groups.host&&(a.published=n.groups.host),n.groups.proto&&(a.protocol=n.groups.proto),a.mode="ingress",[a]},a=Or,f=(e,t)=>(c(e,t),a.stringify(e,{indent:(t||{}).indent||4,simpleKeys:!0,nullStr:""}).trim()),c=(e,t)=>(t&&t.expandVolumes&&Object.values(e.services).forEach(t=>{if(t.volumes)for(let e=0;e<t.volumes.length;e+=1)"string"==typeof t.volumes[e]&&(t.volumes[e]=s(t.volumes[e]))}),t&&t.expandPorts&&Object.values(e.services).forEach(r=>{if(r.ports){let t=[];for(let e=0;e<r.ports.length;e+=1)t="string"==typeof r.ports[e]?[...t,...l(r.ports[e])]:[...t,r.ports[e]];r.ports=t}}),e),h={$id:"compose_spec.json",type:"object",title:"Compose Specification",description:"The Compose file is a YAML file defining a multi-containers based application.",properties:{version:{type:"string",description:"declared for backward compatibility, ignored."},name:{type:"string",pattern:"^[a-z0-9][a-z0-9_-]*$",description:"define the Compose project name, until user defines one explicitly."},include:{type:"array",items:{type:"object",$ref:"#/definitions/include"},description:"compose sub-projects to be included."},services:{$id:"#/properties/services",type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{$ref:"#/definitions/service"}},additionalProperties:!1},networks:{$id:"#/properties/networks",type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{$ref:"#/definitions/network"}}},volumes:{$id:"#/properties/volumes",type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{$ref:"#/definitions/volume"}},additionalProperties:!1},secrets:{$id:"#/properties/secrets",type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{$ref:"#/definitions/secret"}},additionalProperties:!1},configs:{$id:"#/properties/configs",type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{$ref:"#/definitions/config"}},additionalProperties:!1}},patternProperties:{"^x-":{}},additionalProperties:!1,definitions:{service:{$id:"#/definitions/service",type:"object",properties:{develop:{$ref:"#/definitions/development"},deploy:{$ref:"#/definitions/deployment"},annotations:{$ref:"#/definitions/list_or_dict"},attach:{type:"boolean"},build:{oneOf:[{type:"string"},{type:"object",properties:{context:{type:"string"},dockerfile:{type:"string"},dockerfile_inline:{type:"string"},args:{$ref:"#/definitions/list_or_dict"},ssh:{$ref:"#/definitions/list_or_dict"},labels:{$ref:"#/definitions/list_or_dict"},cache_from:{type:"array",items:{type:"string"}},cache_to:{type:"array",items:{type:"string"}},no_cache:{type:"boolean"},additional_contexts:{$ref:"#/definitions/list_or_dict"},network:{type:"string"},pull:{type:"boolean"},target:{type:"string"},shm_size:{type:["integer","string"]},extra_hosts:{$ref:"#/definitions/list_or_dict"},isolation:{type:"string"},privileged:{type:"boolean"},secrets:{$ref:"#/definitions/service_config_or_secret"},tags:{type:"array",items:{type:"string"}},ulimits:{$ref:"#/definitions/ulimits"},platforms:{type:"array",items:{type:"string"}}},additionalProperties:!1,patternProperties:{"^x-":{}}}]},blkio_config:{type:"object",properties:{device_read_bps:{type:"array",items:{$ref:"#/definitions/blkio_limit"}},device_read_iops:{type:"array",items:{$ref:"#/definitions/blkio_limit"}},device_write_bps:{type:"array",items:{$ref:"#/definitions/blkio_limit"}},device_write_iops:{type:"array",items:{$ref:"#/definitions/blkio_limit"}},weight:{type:"integer"},weight_device:{type:"array",items:{$ref:"#/definitions/blkio_weight"}}},additionalProperties:!1},cap_add:{type:"array",items:{type:"string"},uniqueItems:!0},cap_drop:{type:"array",items:{type:"string"},uniqueItems:!0},cgroup:{type:"string",enum:["host","private"]},cgroup_parent:{type:"string"},command:{$ref:"#/definitions/command"},configs:{$ref:"#/definitions/service_config_or_secret"},container_name:{type:"string"},cpu_count:{type:"integer",minimum:0},cpu_percent:{type:"integer",minimum:0,maximum:100},cpu_shares:{type:["number","string"]},cpu_quota:{type:["number","string"]},cpu_period:{type:["number","string"]},cpu_rt_period:{type:["number","string"]},cpu_rt_runtime:{type:["number","string"]},cpus:{type:["number","string"]},cpuset:{type:"string"},credential_spec:{type:"object",properties:{config:{type:"string"},file:{type:"string"},registry:{type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}},depends_on:{oneOf:[{$ref:"#/definitions/list_of_strings"},{type:"object",additionalProperties:!1,patternProperties:{"^[a-zA-Z0-9._-]+$":{type:"object",additionalProperties:!1,properties:{restart:{type:"boolean"},required:{type:"boolean",default:!0},condition:{type:"string",enum:["service_started","service_healthy","service_completed_successfully"]}},required:["condition"]}}}]},device_cgroup_rules:{$ref:"#/definitions/list_of_strings"},devices:{type:"array",items:{type:"string"},uniqueItems:!0},dns:{$ref:"#/definitions/string_or_list"},dns_opt:{type:"array",items:{type:"string"},uniqueItems:!0},dns_search:{$ref:"#/definitions/string_or_list"},domainname:{type:"string"},entrypoint:{$ref:"#/definitions/command"},env_file:{$ref:"#/definitions/string_or_list"},environment:{$ref:"#/definitions/list_or_dict"},expose:{type:"array",items:{type:["string","number"],format:"expose"},uniqueItems:!0},extends:{oneOf:[{type:"string"},{type:"object",properties:{service:{type:"string"},file:{type:"string"}},required:["service"],additionalProperties:!1}]},external_links:{type:"array",items:{type:"string"},uniqueItems:!0},extra_hosts:{$ref:"#/definitions/list_or_dict"},group_add:{type:"array",items:{type:["string","number"]},uniqueItems:!0},healthcheck:{$ref:"#/definitions/healthcheck"},hostname:{type:"string"},image:{type:"string"},init:{type:"boolean"},ipc:{type:"string"},isolation:{type:"string"},labels:{$ref:"#/definitions/list_or_dict"},links:{type:"array",items:{type:"string"},uniqueItems:!0},logging:{type:"object",properties:{driver:{type:"string"},options:{type:"object",patternProperties:{"^.+$":{type:["string","number","null"]}}}},additionalProperties:!1,patternProperties:{"^x-":{}}},mac_address:{type:"string"},mem_limit:{type:["number","string"]},mem_reservation:{type:["string","integer"]},mem_swappiness:{type:"integer"},memswap_limit:{type:["number","string"]},network_mode:{type:"string"},networks:{oneOf:[{$ref:"#/definitions/list_of_strings"},{type:"object",patternProperties:{"^[a-zA-Z0-9._-]+$":{oneOf:[{type:"object",properties:{aliases:{$ref:"#/definitions/list_of_strings"},ipv4_address:{type:"string"},ipv6_address:{type:"string"},link_local_ips:{$ref:"#/definitions/list_of_strings"},mac_address:{type:"string"},priority:{type:"number"}},additionalProperties:!1,patternProperties:{"^x-":{}}},{type:"null"}]}},additionalProperties:!1}]},oom_kill_disable:{type:"boolean"},oom_score_adj:{type:"integer",minimum:-1e3,maximum:1e3},pid:{type:["string","null"]},pids_limit:{type:["number","string"]},platform:{type:"string"},ports:{type:"array",items:{oneOf:[{type:"number",format:"ports"},{type:"string",format:"ports"},{type:"object",properties:{mode:{type:"string"},host_ip:{type:"string"},target:{type:"integer"},published:{type:["string","integer"]},protocol:{type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}}]},uniqueItems:!0},privileged:{type:"boolean"},profiles:{$ref:"#/definitions/list_of_strings"},pull_policy:{type:"string",enum:["always","never","if_not_present","build","missing"]},read_only:{type:"boolean"},restart:{type:"string"},runtime:{type:"string"},scale:{type:"integer"},security_opt:{type:"array",items:{type:"string"},uniqueItems:!0},shm_size:{type:["number","string"]},secrets:{$ref:"#/definitions/service_config_or_secret"},sysctls:{$ref:"#/definitions/list_or_dict"},stdin_open:{type:"boolean"},stop_grace_period:{type:"string",format:"duration"},stop_signal:{type:"string"},storage_opt:{type:"object"},tmpfs:{$ref:"#/definitions/string_or_list"},tty:{type:"boolean"},ulimits:{$ref:"#/definitions/ulimits"},user:{type:"string"},uts:{type:"string"},userns_mode:{type:"string"},volumes:{type:"array",items:{oneOf:[{type:"string",format:"volumes"},{type:"object",required:["type"],properties:{type:{type:"string"},source:{type:"string"},target:{type:"string"},read_only:{type:"boolean"},consistency:{type:"string"},bind:{type:"object",properties:{propagation:{type:"string"},create_host_path:{type:"boolean"},selinux:{type:"string",enum:["z","Z"]}},additionalProperties:!1,patternProperties:{"^x-":{}}},volume:{type:"object",properties:{nocopy:{type:"boolean"}},additionalProperties:!1,patternProperties:{"^x-":{}}},tmpfs:{type:"object",properties:{size:{oneOf:[{type:"integer",minimum:0},{type:"string"}]},mode:{type:"number"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},additionalProperties:!1,patternProperties:{"^x-":{}}}]},uniqueItems:!0},volumes_from:{type:"array",items:{type:"string"},uniqueItems:!0},working_dir:{type:"string"}},patternProperties:{"^x-":{}},additionalProperties:!1},healthcheck:{$id:"#/definitions/healthcheck",type:"object",properties:{disable:{type:"boolean"},interval:{type:"string",format:"duration"},retries:{type:"number"},test:{oneOf:[{type:"string"},{type:"array",items:{type:"string"}}]},timeout:{type:"string",format:"duration"},start_period:{type:"string",format:"duration"},start_interval:{type:"string",format:"duration"}},additionalProperties:!1,patternProperties:{"^x-":{}}},development:{$id:"#/definitions/development",type:["object","null"],properties:{watch:{type:"array",items:{type:"object",properties:{ignore:{type:"array",items:{type:"string"}},path:{type:"string"},action:{type:"string",enum:["rebuild","sync","sync+restart"]},target:{type:"string"}}},required:["path","action"],additionalProperties:!1,patternProperties:{"^x-":{}}}}},deployment:{$id:"#/definitions/deployment",type:["object","null"],properties:{mode:{type:"string"},endpoint_mode:{type:"string"},replicas:{type:"integer"},labels:{$ref:"#/definitions/list_or_dict"},rollback_config:{type:"object",properties:{parallelism:{type:"integer"},delay:{type:"string",format:"duration"},failure_action:{type:"string"},monitor:{type:"string",format:"duration"},max_failure_ratio:{type:"number"},order:{type:"string",enum:["start-first","stop-first"]}},additionalProperties:!1,patternProperties:{"^x-":{}}},update_config:{type:"object",properties:{parallelism:{type:"integer"},delay:{type:"string",format:"duration"},failure_action:{type:"string"},monitor:{type:"string",format:"duration"},max_failure_ratio:{type:"number"},order:{type:"string",enum:["start-first","stop-first"]}},additionalProperties:!1,patternProperties:{"^x-":{}}},resources:{type:"object",properties:{limits:{type:"object",properties:{cpus:{type:["number","string"]},memory:{type:"string"},pids:{type:"integer"}},additionalProperties:!1,patternProperties:{"^x-":{}}},reservations:{type:"object",properties:{cpus:{type:["number","string"]},memory:{type:"string"},generic_resources:{$ref:"#/definitions/generic_resources"},devices:{$ref:"#/definitions/devices"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},additionalProperties:!1,patternProperties:{"^x-":{}}},restart_policy:{type:"object",properties:{condition:{type:"string"},delay:{type:"string",format:"duration"},max_attempts:{type:"integer"},window:{type:"string",format:"duration"}},additionalProperties:!1,patternProperties:{"^x-":{}}},placement:{type:"object",properties:{constraints:{type:"array",items:{type:"string"}},preferences:{type:"array",items:{type:"object",properties:{spread:{type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},max_replicas_per_node:{type:"integer"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},additionalProperties:!1,patternProperties:{"^x-":{}}},generic_resources:{$id:"#/definitions/generic_resources",type:"array",items:{type:"object",properties:{discrete_resource_spec:{type:"object",properties:{kind:{type:"string"},value:{type:"number"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},additionalProperties:!1,patternProperties:{"^x-":{}}}},devices:{$id:"#/definitions/devices",type:"array",items:{type:"object",properties:{capabilities:{$ref:"#/definitions/list_of_strings"},count:{type:["string","integer"]},device_ids:{$ref:"#/definitions/list_of_strings"},driver:{type:"string"},options:{$ref:"#/definitions/list_or_dict"}},additionalProperties:!1,patternProperties:{"^x-":{}}}},include:{$id:"#/definitions/include",oneOf:[{type:"string"},{type:"object",properties:{path:{$ref:"#/definitions/string_or_list"},env_file:{$ref:"#/definitions/string_or_list"},project_directory:{type:"string"}},additionalProperties:!1}]},network:{$id:"#/definitions/network",type:["object","null"],properties:{name:{type:"string"},driver:{type:"string"},driver_opts:{type:"object",patternProperties:{"^.+$":{type:["string","number"]}}},ipam:{type:"object",properties:{driver:{type:"string"},config:{type:"array",items:{type:"object",properties:{subnet:{type:"string",format:"subnet_ip_address"},ip_range:{type:"string"},gateway:{type:"string"},aux_addresses:{type:"object",additionalProperties:!1,patternProperties:{"^.+$":{type:"string"}}}},additionalProperties:!1,patternProperties:{"^x-":{}}}},options:{type:"object",additionalProperties:!1,patternProperties:{"^.+$":{type:"string"}}}},additionalProperties:!1,patternProperties:{"^x-":{}}},external:{type:["boolean","object"],properties:{name:{deprecated:!0,type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}},internal:{type:"boolean"},enable_ipv6:{type:"boolean"},attachable:{type:"boolean"},labels:{$ref:"#/definitions/list_or_dict"}},additionalProperties:!1,patternProperties:{"^x-":{}}},volume:{$id:"#/definitions/volume",type:["object","null"],properties:{name:{type:"string"},driver:{type:"string"},driver_opts:{type:"object",patternProperties:{"^.+$":{type:["string","number"]}}},external:{type:["boolean","object"],properties:{name:{deprecated:!0,type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}},labels:{$ref:"#/definitions/list_or_dict"}},additionalProperties:!1,patternProperties:{"^x-":{}}},secret:{$id:"#/definitions/secret",type:"object",properties:{name:{type:"string"},environment:{type:"string"},file:{type:"string"},external:{type:["boolean","object"],properties:{name:{type:"string"}}},labels:{$ref:"#/definitions/list_or_dict"},driver:{type:"string"},driver_opts:{type:"object",patternProperties:{"^.+$":{type:["string","number"]}}},template_driver:{type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}},config:{$id:"#/definitions/config",type:"object",properties:{name:{type:"string"},content:{type:"string"},environment:{type:"string"},file:{type:"string"},external:{type:["boolean","object"],properties:{name:{deprecated:!0,type:"string"}}},labels:{$ref:"#/definitions/list_or_dict"},template_driver:{type:"string"}},additionalProperties:!1,patternProperties:{"^x-":{}}},command:{oneOf:[{type:"null"},{type:"string"},{type:"array",items:{type:"string"}}]},string_or_list:{oneOf:[{type:"string"},{$ref:"#/definitions/list_of_strings"}]},list_of_strings:{type:"array",items:{type:"string"},uniqueItems:!0},list_or_dict:{oneOf:[{type:"object",patternProperties:{".+":{type:["string","number","boolean","null"]}},additionalProperties:!1},{type:"array",items:{type:"string"},uniqueItems:!0}]},blkio_limit:{type:"object",properties:{path:{type:"string"},rate:{type:["integer","string"]}},additionalProperties:!1},blkio_weight:{type:"object",properties:{path:{type:"string"},weight:{type:"integer"}},additionalProperties:!1},service_config_or_secret:{type:"array",items:{oneOf:[{type:"string"},{type:"object",properties:{source:{type:"string"},target:{type:"string"},uid:{type:"string"},gid:{type:"string"},mode:{type:"number"}},additionalProperties:!1,patternProperties:{"^x-":{}}}]}},ulimits:{type:"object",patternProperties:{"^[a-z]+$":{oneOf:[{type:"integer"},{type:"object",properties:{hard:{type:"integer"},soft:{type:"integer"}},required:["soft","hard"],additionalProperties:!1,patternProperties:{"^x-":{}}}]}}},constraints:{service:{$id:"#/definitions/constraints/service",anyOf:[{required:["build"]},{required:["image"]}],properties:{build:{required:["context"]}}}}}},m=Or,y=so(),g=ao(),v={expose:/^\d+(-\d+)?(\/[a-zA-Z]+)?$/,ports:o,volumes:r,duration:/^(\d+(us|ms|s|m|h))+$/,byte:/^\d+(b|kb?|mb?|gb?)$/,subnet_ip_address:/^((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\/(\d|[1-2]\d|3[0-2])$|^((([0-9a-fA-F]{1,4}:){7}[0-9a-fA-F]{1,4})|(([0-9a-fA-F]{1,4}:){1,7}:)|(([0-9a-fA-F]{1,4}:){1,6}(:[0-9a-fA-F]{1,4}){1,1})|(([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2})|(([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3})|(([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4})|(([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5})|(([0-9a-fA-F]{1,4}:){1,1}(:[0-9a-fA-F]{1,4}){1,6})|(:((:[0-9a-fA-F]{1,4}){1,7}|:))|(fe80:(:[0-9a-fA-F]{1,4}){0,4}%[0-9a-zA-Z]{1,})|(::(ffff(:0{1,4}){0,1}:){0,1}((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5]))|(([0-9a-fA-F]{1,4}:){1,4}:((\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])\.){3}(\d{1,2}|1\d{2}|2[0-4]\d|25[0-5])))\/(\d|[1-9]\d|1[0-1]\d|12[0-8])$/},b=t=>{if(Array.isArray(t))for(let e=0;e<t.length;e+=1)b(t[e]);else"object"==typeof t&&(t.type&&t.format&&(t.pattern=v[t.format].toString(),delete t.format),Object.keys(t).forEach(e=>{b(t[e])}));return t};function po(e){let t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,o=d(e);if(!o)return e;if("string"==typeof o)return e;if(Object.prototype.hasOwnProperty.call(o,"services"))return e;let l=Object.keys(o),r=[],c=e=>r.push(e),s=(Object.keys(o).forEach(e=>{t=e,r=o[e],s=c,(r=r.links)&&(r=r[0].split(":")[0],s("Service ".concat(t," has links, which no longer create environment variables such as ").concat(r.toUpperCase(),"_PORT. If you are using those in your application code, you should instead connect directly to the hostname, e.g. '").concat(r,"'."))),s=e,t=o[e],r=c,(t=t.external_links)&&r("Service ".concat(s," has external_links: ").concat(t,", which now work slightly differently. In particular, two containers must be connected to at least one network in common to communicate, even if explicitly linked together.\n\nEither connect the external container to your app's default network, or connect both the external container and your service's containers to a pre-existing network. See https://docs.docker.com/compose/networking/ for more on how to do this."));var t,r=o[e],s=l;if(r.net){let e=r.net;e.startsWith("container:")&&(t=e.split(":")[1],s.includes(t))&&(e="service:".concat(t)),r.network_mode=e,delete r.net}(s=o[e]).dockerfile&&(s.build={context:s.build,dockerfile:s.dockerfile},delete s.dockerfile),(t=o[e]).log_driver&&(t.logging={driver:t.log_driver},t.log_opt&&(t.logging.options=t.log_opt,delete t.log_opt),delete t.log_driver);var n=o[e],i=l;if(n.volumes_from)for(let e=0;e<n.volumes_from.length;e+=1){var a=n.volumes_from[e];i.includes(a.split(":")[0])||(n.volumes_from[e]="container:".concat(a))}}),{});return Object.keys(o).forEach(e=>{s[e]=o[e],delete o[e]}),o.version="2.4",o.services=s,e=o,n=c,0<(a=(e=>{let t=[];return Object.values(e).forEach(e=>(e.volumes||[]).forEach(e=>t.push(e))),e=new Set(t.map(e=>(e=u(e),p(e)?e:void 0))),Array.from(e).filter(e=>e).map(e=>({[e]:{external:!0,name:e}}))})(e.services)).length&&(i=a.map(e=>JSON.stringify(e)).join(","),n("Named volumes (".concat(i,") must be explicitly declared. Creating a 'volumes' section with declarations.\n\nFor backwards-compatibility, they've been declared as external. If you don't mind the volume names being prefixed with the project name, you can remove the 'external' option from each one.")),e.volumes=a),uo(o,"networks"),uo(o,"volumes"),r.map(e=>"# ".concat(e.replace(/\n/g,"\n#"))).join("\n")+(0<r.length?"\n":"")+f(o,t);var n,i,a}w.getDockerComposeSchemaWithoutFormats=()=>b(h),w.getVolumeNameFromVolumeSpec=u,w.isNamedVolume=p,w.migrateFromV1ToV2x=po,w.migrateFromV2xToV3x=function(e){let t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,s=d(e);if(!s)return e;if("string"==typeof s)return e;if(!s.version||s.version.startsWith("3"))return e;let r=[],n=e=>r.push(e);return Object.keys(s.services).forEach(t=>{let r=s.services[t];r.cpus&&i(r,"deploy/resources/limits/cpus",r.cpus),r.mem_limit&&i(r,"deploy/resources/limits/memory",r.mem_limit),r.pids_limit&&i(r,"deploy/resources/limits/pids",r.pids_limit),r.mem_reservation&&i(r,"deploy/resources/reservations/memory",r.mem_reservation),r.volume_driver&&(n("Service ".concat(t," has volume_driver:").concat(r.volume_driver,": Instead of setting the volume driver on the service, define a volume using the top-level volumes option (https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference) and specify the driver there.")),delete r.volume_driver),r.volumes_from&&(n("Service ".concat(t," has volumes_from:").concat(r.volumes_from," To share a volume between services, define it using the top-level volumes option (https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference) and reference it from each service that shares it using the service-level volumes option (https://docs.docker.com/compose/compose-file/compose-file-v3/#driver).")),delete r.volumes_from),["cpu_shares","cpu_quota","cpuset","memswap_limit"].forEach(e=>{Object.prototype.hasOwnProperty.call(r,e)&&n("Service ".concat(t," has ").concat(e,":").concat(r.k," These have been replaced by the resources key under deploy (https://docs.docker.com/compose/compose-file/compose-file-v3/#resources). deploy configuration only takes effect when using docker stack deploy, and is ignored by docker-compose.")),delete r[e]}),r.extends&&(n("Service ".concat(t," has extends:").concat(r.extends,' This option has been removed for version: "3.x" Compose files. For more information on extends, see https://docs.docker.com/compose/multiple-compose-files/extends/.')),delete r.extends),r.group_add&&(n("Service ".concat(t," has group_add:").concat(r.group_add,' This option has been removed for version: "3.x" Compose files.')),delete r.group_add),delete r.cpus,delete r.mem_limit,delete r.pids_limit,delete r.mem_reservation}),s.version="3",uo(s,"networks"),uo(s,"volumes"),r.map(e=>"# ".concat(e.replace(/\n/g,"\n#"))).join("\n")+(0<r.length?"\n":"")+f(s,t)},w.migrateFromV3xToV2x=function(e){let t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,r=d(e);return r&&"string"!=typeof r&&r.version&&!r.version.startsWith("2")&&r.services?(Object.keys(r.services).forEach(e=>{var t;(e=r.services[e]).deploy&&e.deploy.resources&&((t=e.deploy.resources).limits&&(t.limits.cpus&&(e.cpus=t.limits.cpus),t.limits.memory&&(e.mem_limit=t.limits.memory),t.limits.pids)&&(e.pids_limit=t.limits.pids),t.reservations)&&t.reservations.memory&&(e.mem_reservation=t.reservations.memory),e.deploy&&e.deploy.restart_policy&&e.deploy.restart_policy.condition&&!e.restart&&(e.restart=e.deploy.restart_policy.condition),delete e.deploy}),r.version="2.4",uo(r,"networks"),uo(r,"volumes"),f(r,t)):e},w.migrateToCommonSpec=function(e){var t,r=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,s=po(e,r);let n=d(s);return n&&"string"!=typeof n?(s=s.match(/^\s*#[^\r\n]*/gm)||[],Object.keys(n.services||[]).forEach(e=>{(e=n.services[e]).cpus&&i(e,"deploy/resources/limits/cpus",e.cpus),e.mem_limit&&i(e,"deploy/resources/limits/memory",e.mem_limit),e.pids_limit&&i(e,"deploy/resources/limits/pids",e.pids_limit),e.mem_reservation&&i(e,"deploy/resources/reservations/memory",e.mem_reservation),delete e.cpus,delete e.mem_limit,delete e.pids_limit,delete e.mem_reservation}),delete(t=function(n){for(var e=1;e<arguments.length;e++){var i=null!=arguments[e]?arguments[e]:{};e%2?oo(Object(i),!0).forEach(function(e){var t,r,s;t=n,r=i[e=e],(e="symbol"==typeof(s=(e=>{if("object"!=typeof e||!e)return e;var t=e[Symbol.toPrimitive];if(void 0===t)return String(e);if("object"!=typeof(t=t.call(e,"string")))return t;throw new TypeError("@@toPrimitive must return a primitive value.")})(e))?s:s+"")in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r}):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(i)):oo(Object(i)).forEach(function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(i,e))})}return n}({name:"<your project name>"},n)).version,uo(t,"networks"),uo(t,"volumes"),s.map(e=>"# ".concat(e.replace(/^\s*#\s+/g,""))).join("\n")+(0<s.length?"\n":"")+f(t,r)):e},w.validateDockerComposeToCommonSpec=i=>{let e=d(i),t=new y({allErrors:!0,strict:!1});g(t),Object.keys(v).forEach(e=>t.addFormat(e,v[e]));var r=t.compile(h);if(r(e))return[];let a=m.parseDocument(i,{prettyErrors:!0});return r.errors.map(e=>{let t=e.instancePath;"additionalProperties"===e.keyword&&(t+="/".concat(e.params.additionalProperty));var r=t.split("/").slice(1),s=a.getIn(r,!0),s=(s=null===s?a.getIn(r.slice(0,-1),!0):s)?s.range[0]+1:0,n="https://docs.docker.com/compose/compose-file/";return{line:s=(i.substring(0,s).match(/\n/g)||[]).length+1,message:"additionalProperties"===e.keyword?"Line ".concat(s,"(").concat(t,"): '").concat(e.params.additionalProperty,"' is unknown for '").concat(t,"'"):"format"===e.keyword?"Line ".concat(s,"(").concat(t,"): must have a valid syntax for '").concat(e.params.format,"'"):"oneOf"===e.keyword?"Line ".concat(s,"(").concat(t,"): must be either a Short Syntax (string(s)) or a Long Syntax (object(s))"):"Line ".concat(s,"(").concat(t,"): ").concat(e.message," (").concat(e.keyword,": ").concat(JSON.stringify(e.params),")"),helpLink:e=("services"===(e=r[0])?"".concat(n,"05-services/"):"networks"===e?"".concat(n,"06-networks/"):"volumes"===e?"".concat(n,"07-volumes/"):"configs"===e?"".concat(n,"08-configs/"):"secrets"===e?"".concat(n,"09-secrets/"):n)+(r[2]?"#".concat(r[2]):"")}})},w.yamlCheck=n,w.yamlParse=d,w.yamlStringify=f}var fo=K(e.exports),ho=K(function(e,t,r,s,n,i,a,o){var l,c,u;if(!e)throw void 0===t?u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."):(l=[r,s,n,i,a,o],c=0,(u=new Error(t.replace(/%s/g,function(){return l[c++]}))).name="Invariant Violation"),u.framesToPop=1,u}),t=(e,t)=>({type:e,path:t});let I={"add-host":t("Array","extra_hosts"),"blkio-weight":t("IntValue","blkio_config/weight"),"blkio-weight-device":t("DeviceBlockIOConfigWeight","blkio_config/weight_device"),"cap-add":t("Array","cap_add"),"cap-drop":t("Array","cap_drop"),"cgroup-parent":t("Value","cgroup_parent"),cgroupns:t("Value","cgroup"),"cpu-period":t("Value","cpu_period"),"cpu-quota":t("Value","cpu_quota"),"cpu-rt-period":t("Value","cpu_rt_period"),"cpu-rt-runtime":t("Value","cpu_rt_runtime"),"cpu-shares":t("IntValue","cpu_shares"),cpus:t("FloatValue","deploy/resources/limits/cpus"),detached:t("Switch",""),"device-cgroup-rule":t("Array","device_cgroup_rules"),"device-read-bps":t("DeviceBlockIOConfigRate","blkio_config/device_read_bps"),"device-read-iops":t("DeviceBlockIOConfigRate","blkio_config/device_read_iops"),"device-write-bps":t("DeviceBlockIOConfigRate","blkio_config/device_write_bps"),"device-write-iops":t("DeviceBlockIOConfigRate","blkio_config/device_write_iops"),device:t("Array","devices"),"dns-opt":t("Array","dns_opt"),"dns-search":t("Array","dns_search"),dns:t("Array","dns"),domainname:t("Value","domainname"),entrypoint:t("Array","entrypoint"),"env-file":t("Array","env_file"),env:t("Envs","environment"),expose:t("Array","expose"),gpus:t("Gpus","deploy"),"group-add":t("Array","group_add"),"health-cmd":t("Value","healthcheck/test"),"health-interval":t("Value","healthcheck/interval"),"health-retries":t("Value","healthcheck/retries"),"health-start-period":t("Value","healthcheck/start_period"),"health-timeout":t("Value","healthcheck/timeout"),hostname:t("Value","hostname"),init:t("Switch","init"),interactive:t("Switch","stdin_open"),ip6:t("Value","networks/¤network¤/ipv6_address"),ip:t("Value","networks/¤network¤/ipv4_address"),ipc:t("Value","ipc"),isolation:t("Value","isolation"),label:t("Array","labels"),"link-local-ip":t("Array","networks/¤network¤/link_local_ips"),link:t("Array","links"),"log-driver":t("Value","logging/driver"),"log-opt":t("Map","logging/options"),"mac-address":t("Value","mac_address"),"memory-reservation":t("Value","deploy/resources/reservations/memory"),"memory-swap":t("Value","memswap_limit"),"memory-swappiness":t("Value","mem_swappiness"),memory:t("Value","deploy/resources/limits/memory"),mount:t("MapArray","volumes"),name:t("Value","container_name"),net:t("Networks","network_mode"),"network-alias":t("Array","networks/¤network¤/aliases"),network:t("Networks","network_mode"),"no-healthcheck":t("Switch","healthcheck/disable"),"oom-kill-disable":t("Switch","oom_kill_disable"),"oom-score-adj":t("Value","oom_score_adj"),pid:t("Value","pid"),"pids-limit":t("IntValue","deploy/resources/limits/pids"),platform:t("Value","platform"),privileged:t("Switch","privileged"),publish:t("Array","ports"),pull:t("Value","pull_policy"),"read-only":t("Switch","read_only"),restart:t("Value","restart"),rm:t("Switch",""),runtime:t("Value","runtime"),"security-opt":t("Array","security_opt"),"shm-size":t("Value","shm_size"),"stop-signal":t("Value","stop_signal"),"stop-timeout":t("Value","stop_grace_period"),"storage-opt":t("Map","storage_opt"),sysctl:t("Array","sysctls"),tmpfs:t("Value","tmpfs"),tty:t("Switch","tty"),ulimit:t("Ulimits","ulimits"),user:t("Value","user"),userns:t("Value","userns_mode"),uts:t("Value","uts"),volume:t("Array","volumes"),"volumes-from":t("Array","volume_from"),workdir:t("Value","working_dir")},mo=(I.v=I.volume,I.p=I.publish,I.e=I.env,I.l=I.label,I.h=I.hostname,I.u=I.user,I.w=I.workdir,I.c=I["cpu-shares"],I.l=I.label,I.t=I.tty,I.i=I.interactive,I.m=I.memory,I.d=I.detached,e=>[...e].reduce((e,t)=>{var[t,r]=t;return D(D({},e),{},{[t]:r})},{})),yo=(e,t,r)=>{e=e.split(t);return mo(e.map(e=>{var[e,t]=e.split(r,2);return[e,/^-?\d+$/.test(String(t))?parseInt(t,10):t]}))},go=e=>"string"!=typeof e||"'"!==e[0]&&'"'!==e[0]||e[e.length-1]!==e[0]?e:e.substring(1,e.length-1),vo=(n,e)=>{var t;return"Array"===n.type?{path:n.path,value:Array.isArray(e)?e:[String(e)]}:"Networks"===n.type?(t=String(e)).match(/^(host|bridge|none)$|^container:.+/)?{path:"network_mode",value:t}:{path:"networks",value:{[t]:{}}}:"Switch"===n.type?{path:n.path,value:"true"===e||!0===e}:"Gpus"===n.type?{path:"deploy",value:{resources:{reservations:{devices:[{driver:"nvidia",count:"all"===e?"all":parseInt(e,10),capabilities:["gpu"]}]}}}}:"Envs"===n.type?(Array.isArray(e)?e:[e]).map(e=>{var[e,...t]=String(e).split("=");return{path:n.path,value:[t.length?"".concat(e,"=").concat(go(t.join("="))):e]}}):"MapArray"===n.type?(Array.isArray(e)?e:[e]).map(e=>({path:n.path,value:[yo(String(e),",","=")]})):"Map"===n.type?(t=Array.isArray(e)?e.join(","):e,{path:n.path,value:yo(String(t),",","=")}):"DeviceBlockIOConfigWeight"===n.type?(Array.isArray(e)?e:[e]).map(e=>{var[e,t]=String(e).split(":");return{path:n.path,value:[{path:e,weight:parseInt(t,10)}]}}):"DeviceBlockIOConfigRate"===n.type?(Array.isArray(e)?e:[e]).map(e=>{var[e,t]=String(e).split(":");return{path:n.path,value:[{path:e,rate:/^-?\d+$/.test(String(t))?parseInt(t,10):t}]}}):"Ulimits"===n.type?(Array.isArray(e)?e:[e]).map(e=>{var t,r,[e,s]=String(e).split("=");return ho(e&&s,"".concat(n.type," must be in the format of: <type>=<soft limit>[:<hard limit>]")),s.includes(":")?([t,r]=s.split(":"),ho(t&&r,"".concat(n.type," must be in the format of: <type>=<soft limit>[:<hard limit>]")),{path:"".concat(n.path,"/").concat(e),value:{soft:parseInt(t,10),hard:parseInt(r,10)}}):{path:"".concat(n.path,"/").concat(e),value:parseInt(s,10)}}):"IntValue"===n.type?{path:n.path,value:parseInt(e,10)}:"FloatValue"===n.type?{path:n.path,value:parseFloat(e)}:{path:n.path,value:String(e)}},bo=(e,t)=>{e=I[e];return e?""===e.path?{}:"Switch"===e.type||t?vo(e,t):null:null},wo=(e,t)=>e.path?e.path.replace("¤network¤",t.toString()).split("/").reduceRight((e,t)=>({[t]:e}),e.value):{},_o=["_"],$o=e=>{if(null===e||""===e||void 0===e)return"!!!invalid!!!";let t=e.includes("/")?e.split("/").slice(-1)[0]:e;return t=t.includes(":")?t.split(":")[0]:t},ko=(e,t)=>{var e=e.replace(/\n\s*#[^\n]+/g,"").replace(/\$\([^)]*\)/g,e=>e.replace(/\s/g,"¤")).replace(/\\\n/g,"").replace(/(\s)+/g," ").trim().replace(/\s-p(\d)/g," -p $1").replace(/\s\\\s/g," ").replace(/\s*;$/g,"").replace(/^(?:\s*\$\s+)?docker\s+(run|create|container\s+run|service\s+create)/,""),e=We(e,{configuration:{"halt-at-non-option":!0,"camel-case-expansion":!1,"boolean-negation":!1},boolean:["i","interactive","t","tty","d","detach","rm","init","help","privileged","P","publish-all","no-healthcheck","oom-kill-disable","read-only","sig-proxy"]}),r=e._,e=V(e,_o);let s=e=>go(String(e).trim()).replace(/\$\([^)]*\)/g,e=>e.replace(/¤/g," "));e=Object.fromEntries(Object.entries(e).map(e=>{var[e,t]=e;return Array.isArray(t)?[e.trim(),t.map(e=>"string"==typeof e?s(e):e)]:[e.trim(),"string"==typeof t?s(t):t]}));let n={};var{net:i,network:a}=e;let o=i||a||"default",l=[];Object.entries(e).forEach(e=>{var[e,t]=e,r=bo(e,t);r?(Array.isArray(r)?r:[r]).forEach(e=>{e=wo(e,o);n=et(n,e)}):(r=1===e.length?"-":"--",t=!0===t?"":"=".concat(t.toString()),l.push("# ".concat(r).concat(e).concat(t)))});var a=go(null==(i=r[0])?void 0:i.trim());if(n.image=a,1<r.length){let e=1;for(var c=[];e<r.length;)c.push(r[e]),e+=1;n.command=c.join(" ")}"host"===n.network_mode&&delete n.ports;var u,p=[];if(n.volumes)for(let t=0;t<n.volumes.length;t+=1){let e;e="string"==typeof n.volumes[t]?n.volumes[t].split(":")[0]:n.volumes[t].source,!(u=e)||u.includes("/")||u.includes("\\")||u.includes("$")||u.includes("<")||u.includes(">")||p.push([e,{external:{name:e}}])}if(n.networks)Object.keys(n.networks).forEach(e=>{var t;(t=n.networks[e])&&0===Object.keys(t).length&&t.constructor===Object&&(n.networks[e]=null)}),Object.values(n.networks).every(e=>!e)&&(n.networks=Object.keys(n.networks));let d=[];if(n.networks)if(Array.isArray(n.networks))for(let e=0;e<n.networks.length;e+=1)d.push([n.networks[e],{external:!0,name:n.networks[e]}]);else Object.keys(n.networks).forEach(e=>{d.push([e,{external:!0,name:e}])});e=$o(a);let f;var i={version:"3",services:{[e]:n}},t=null!=(a=fo.yamlParse(null!=t?t:""))?a:{};f=et(t,i),0<d.length&&(a={networks:mo(d)},f=et(f,a)),0<p.length&&(t={volumes:mo(p)},f=et(f,t));let h="";return 0<l.length&&(h="# ignored options for '".concat(e,"'\n").concat(l.join("\n"),"\n")),{composeFile:f,ignoredOptionsComments:h}};return function(e){var t=1<arguments.length&&void 0!==arguments[1]?arguments[1]:"",r=2<arguments.length&&void 0!==arguments[2]?arguments[2]:"latest",s=3<arguments.length&&void 0!==arguments[3]?arguments[3]:4;let n=[],i={};e=e.split(/^(?:\s*\$)?\s*docker\s+/gm);let a=t;if(t&&("v2x"===r?a=fo.migrateFromV3xToV2x(a,{indent:s}):"latest"===r&&(a=fo.migrateToCommonSpec(a,{indent:s}))),e.forEach(e=>{var t,r,e=String(e);e&&(e.match(/^\s*(run|create|container\s+run|service\s+create)/)?({composeFile:t,ignoredOptionsComments:r}=ko("docker ".concat(e),a),r&&n.push(r),i=et(i,t)):n.push("# ignored : docker ".concat(e,"\n")))}),!i.services)throw new SyntaxError("must have at least a valid docker run/create/service create/container run command");let o=fo.yamlStringify(i,{indent:s}).trim();if("v2x"===r)o=fo.migrateFromV3xToV2x(o,{indent:s});else if("latest"===r)o=fo.migrateToCommonSpec(o,{indent:s});else if("v3x"!==r)throw new Error("Unknown ComposeVersion '".concat(r,"'"));return n.join("\n")+o}});

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9zZXJpemUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtZ2xvYmFscy9zcmMvZ2xvYmFsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MtZXM2L2Jyb3dzZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FtZWxjYXNlL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L3BhdGguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYnVmZmVyLWVzNi9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtYnVpbHRpbnMvc3JjL2VzNi9pbmhlcml0cy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtYnVpbHRpbnMvc3JjL2VzNi91dGlsLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhcmdzLXBhcnNlci9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9kZWNhbWVsaXplL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3lhcmdzLXBhcnNlci9saWIvdG9rZW5pemUtYXJnLXN0cmluZy5qcyIsIi4uL25vZGVfbW9kdWxlcy9kZWVwbWVyZ2UvZGlzdC9lcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy9pZGVudGl0eS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC92aXNpdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9kb2MvZGlyZWN0aXZlcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9kb2MvYW5jaG9ycy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9kb2MvYXBwbHlSZXZpdmVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL3RvSlMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvTm9kZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy9BbGlhcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy9TY2FsYXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL2NyZWF0ZU5vZGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvQ29sbGVjdGlvbi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5Q29tbWVudC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvZm9sZEZsb3dMaW5lcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5U3RyaW5nLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3N0cmluZ2lmeS9zdHJpbmdpZnkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvbG9nLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9tZXJnZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy9hZGRQYWlyVG9KU01hcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9ub2Rlcy9QYWlyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3N0cmluZ2lmeS9zdHJpbmdpZnlQYWlyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3N0cmluZ2lmeS9zdHJpbmdpZnlDb2xsZWN0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L25vZGVzL1lBTUxNYXAuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvbW1vbi9tYXAuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvbm9kZXMvWUFNTFNlcS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29tbW9uL3NlcS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29tbW9uL3N0cmluZy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29tbW9uL251bGwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2NvcmUvYm9vbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zdHJpbmdpZnkvc3RyaW5naWZ5TnVtYmVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb3JlL2Zsb2F0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9jb3JlL2ludC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEvY29yZS9zY2hlbWEuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL2pzb24vc2NoZW1hLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9iaW5hcnkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL3BhaXJzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9vbWFwLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9ib29sLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9mbG9hdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvaW50LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS95YW1sLTEuMS9zZXQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3Qvc2NoZW1hL3lhbWwtMS4xL3RpbWVzdGFtcC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9zY2hlbWEveWFtbC0xLjEvc2NoZW1hLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS90YWdzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3NjaGVtYS9TY2hlbWEuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvZG9jL0RvY3VtZW50LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3N0cmluZ2lmeS9zdHJpbmdpZnlEb2N1bWVudC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9lcnJvcnMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLXByb3BzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvdXRpbC1jb250YWlucy1uZXdsaW5lLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvdXRpbC1mbG93LWluZGVudC1jaGVjay5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3V0aWwtbWFwLWluY2x1ZGVzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1ibG9jay1tYXAuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWVuZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3Jlc29sdmUtZmxvdy1jb2xsZWN0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZS1jb2xsZWN0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvcmVzb2x2ZS1ibG9jay1zZXEuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9yZXNvbHZlLWJsb2NrLXNjYWxhci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3Jlc29sdmUtZmxvdy1zY2FsYXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9jb21wb3NlLXNjYWxhci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL2NvbXBvc2Utbm9kZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9jb21wb3NlL3V0aWwtZW1wdHktc2NhbGFyLXBvc2l0aW9uLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L2NvbXBvc2UvY29tcG9zZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvY29tcG9zZS9jb21wb3NlLWRvYy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9jc3Qtc2NhbGFyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL2NzdC1zdHJpbmdpZnkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvY3N0LXZpc2l0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3BhcnNlL2NzdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9sZXhlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL25vZGVfbW9kdWxlcy95YW1sL2Jyb3dzZXIvZGlzdC9wYXJzZS9saW5lLWNvdW50ZXIuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY29tcG9zZXZlcnRlci9ub2RlX21vZHVsZXMveWFtbC9icm93c2VyL2Rpc3QvcGFyc2UvcGFyc2VyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NvbXBvc2V2ZXJ0ZXIvbm9kZV9tb2R1bGVzL3lhbWwvYnJvd3Nlci9kaXN0L3B1YmxpYy1hcGkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS9jb2RlZ2VuL2NvZGUuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS9jb2RlZ2VuL3Njb3BlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvY29kZWdlbi9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3V0aWwuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS9uYW1lcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL2Vycm9ycy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3ZhbGlkYXRlL2Jvb2xTY2hlbWEuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS9ydWxlcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3ZhbGlkYXRlL2FwcGxpY2FiaWxpdHkuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS92YWxpZGF0ZS9kYXRhVHlwZS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3ZhbGlkYXRlL2RlZmF1bHRzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb2RlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUva2V5d29yZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb21waWxlL3ZhbGlkYXRlL3N1YnNjaGVtYS5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LWRlZXAtZXF1YWwvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvanNvbi1zY2hlbWEtdHJhdmVyc2UvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvY29tcGlsZS9yZXNvbHZlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvdmFsaWRhdGUvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvcnVudGltZS92YWxpZGF0aW9uX2Vycm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvcmVmX2Vycm9yLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L2NvbXBpbGUvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvZmFzdC11cmkvbGliL3V0aWxzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Zhc3QtdXJpL2xpYi9zY29wZWRDaGFycy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LXVyaS9saWIvc2NoZW1lcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9mYXN0LXVyaS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9jb3JlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3J1bnRpbWUvdXJpLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9jb3JlL3JlZi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvY29yZS9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvY29yZS9pZC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9saW1pdExlbmd0aC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC9ydW50aW1lL3VjczJsZW5ndGguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vcmVxdWlyZWQuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvcnVudGltZS9lcXVhbC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi91bmlxdWVJdGVtcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9lbnVtLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2luZGV4LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL2xpbWl0TnVtYmVyLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy92YWxpZGF0aW9uL211bHRpcGxlT2YuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vcGF0dGVybi5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9saW1pdFByb3BlcnRpZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL3ZhbGlkYXRpb24vbGltaXRJdGVtcy5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvdmFsaWRhdGlvbi9jb25zdC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvYXBwbGljYXRvci9hZGRpdGlvbmFsSXRlbXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvaXRlbXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvY29udGFpbnMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvZGVwZW5kZW5jaWVzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FkZGl0aW9uYWxQcm9wZXJ0aWVzLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3Byb3BlcnRpZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvcGF0dGVyblByb3BlcnRpZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvaWYuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvcHJlZml4SXRlbXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3IvaXRlbXMyMDIwLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3Byb3BlcnR5TmFtZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2FwcGxpY2F0b3Ivbm90LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FueU9mLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL29uZU9mLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL2FsbE9mLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9hcHBsaWNhdG9yL3RoZW5FbHNlLmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9mb3JtYXQvZm9ybWF0LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi9kaXN0L3ZvY2FidWxhcmllcy9kcmFmdDcuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2Zvcm1hdC9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9hanYvZGlzdC92b2NhYnVsYXJpZXMvbWV0YWRhdGEuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2Rpc2NyaW1pbmF0b3IvaW5kZXguanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3Qvdm9jYWJ1bGFyaWVzL2Rpc2NyaW1pbmF0b3IvdHlwZXMuanMiLCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvYWp2L2Rpc3QvYWp2LmpzIiwiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Fqdi1lcnJvcnMvZGlzdC9pbmRleC5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jb21wb3NldmVydGVyL2Rpc3QvY29tcG9zZXZlcnRlci5qcyIsIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvaW52YXJpYW50LmpzIiwiLi4vc3JjL21hcHBpbmdzLmpzIiwiLi4vc3JjL2xvZ2ljLmpzIiwiLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDpcbiAgICAgICAgICAgIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6XG4gICAgICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG4vLyBiYXNlZCBvZmYgaHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanNcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG52YXIgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbmlmICh0eXBlb2YgZ2xvYmFsLnNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbn1cbmlmICh0eXBlb2YgZ2xvYmFsLmNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbn1cblxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHRUaWNrKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59XG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xuZXhwb3J0IHZhciB0aXRsZSA9ICdicm93c2VyJztcbmV4cG9ydCB2YXIgcGxhdGZvcm0gPSAnYnJvd3Nlcic7XG5leHBvcnQgdmFyIGJyb3dzZXIgPSB0cnVlO1xuZXhwb3J0IHZhciBlbnYgPSB7fTtcbmV4cG9ydCB2YXIgYXJndiA9IFtdO1xuZXhwb3J0IHZhciB2ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5leHBvcnQgdmFyIHZlcnNpb25zID0ge307XG5leHBvcnQgdmFyIHJlbGVhc2UgPSB7fTtcbmV4cG9ydCB2YXIgY29uZmlnID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5leHBvcnQgdmFyIG9uID0gbm9vcDtcbmV4cG9ydCB2YXIgYWRkTGlzdGVuZXIgPSBub29wO1xuZXhwb3J0IHZhciBvbmNlID0gbm9vcDtcbmV4cG9ydCB2YXIgb2ZmID0gbm9vcDtcbmV4cG9ydCB2YXIgcmVtb3ZlTGlzdGVuZXIgPSBub29wO1xuZXhwb3J0IHZhciByZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xuZXhwb3J0IHZhciBlbWl0ID0gbm9vcDtcblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmRpbmcobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN3ZCAoKSB7IHJldHVybiAnLycgfVxuZXhwb3J0IGZ1bmN0aW9uIGNoZGlyIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiB1bWFzaygpIHsgcmV0dXJuIDA7IH1cblxuLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20va3VtYXZpcy9icm93c2VyLXByb2Nlc3MtaHJ0aW1lL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG52YXIgcGVyZm9ybWFuY2UgPSBnbG9iYWwucGVyZm9ybWFuY2UgfHwge31cbnZhciBwZXJmb3JtYW5jZU5vdyA9XG4gIHBlcmZvcm1hbmNlLm5vdyAgICAgICAgfHxcbiAgcGVyZm9ybWFuY2UubW96Tm93ICAgICB8fFxuICBwZXJmb3JtYW5jZS5tc05vdyAgICAgIHx8XG4gIHBlcmZvcm1hbmNlLm9Ob3cgICAgICAgfHxcbiAgcGVyZm9ybWFuY2Uud2Via2l0Tm93ICB8fFxuICBmdW5jdGlvbigpeyByZXR1cm4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSB9XG5cbi8vIGdlbmVyYXRlIHRpbWVzdGFtcCBvciBkZWx0YVxuLy8gc2VlIGh0dHA6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc19wcm9jZXNzX2hydGltZVxuZXhwb3J0IGZ1bmN0aW9uIGhydGltZShwcmV2aW91c1RpbWVzdGFtcCl7XG4gIHZhciBjbG9ja3RpbWUgPSBwZXJmb3JtYW5jZU5vdy5jYWxsKHBlcmZvcm1hbmNlKSoxZS0zXG4gIHZhciBzZWNvbmRzID0gTWF0aC5mbG9vcihjbG9ja3RpbWUpXG4gIHZhciBuYW5vc2Vjb25kcyA9IE1hdGguZmxvb3IoKGNsb2NrdGltZSUxKSoxZTkpXG4gIGlmIChwcmV2aW91c1RpbWVzdGFtcCkge1xuICAgIHNlY29uZHMgPSBzZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMF1cbiAgICBuYW5vc2Vjb25kcyA9IG5hbm9zZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMV1cbiAgICBpZiAobmFub3NlY29uZHM8MCkge1xuICAgICAgc2Vjb25kcy0tXG4gICAgICBuYW5vc2Vjb25kcyArPSAxZTlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtzZWNvbmRzLG5hbm9zZWNvbmRzXVxufVxuXG52YXIgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbmV4cG9ydCBmdW5jdGlvbiB1cHRpbWUoKSB7XG4gIHZhciBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCk7XG4gIHZhciBkaWYgPSBjdXJyZW50VGltZSAtIHN0YXJ0VGltZTtcbiAgcmV0dXJuIGRpZiAvIDEwMDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmV4dFRpY2s6IG5leHRUaWNrLFxuICB0aXRsZTogdGl0bGUsXG4gIGJyb3dzZXI6IGJyb3dzZXIsXG4gIGVudjogZW52LFxuICBhcmd2OiBhcmd2LFxuICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICB2ZXJzaW9uczogdmVyc2lvbnMsXG4gIG9uOiBvbixcbiAgYWRkTGlzdGVuZXI6IGFkZExpc3RlbmVyLFxuICBvbmNlOiBvbmNlLFxuICBvZmY6IG9mZixcbiAgcmVtb3ZlTGlzdGVuZXI6IHJlbW92ZUxpc3RlbmVyLFxuICByZW1vdmVBbGxMaXN0ZW5lcnM6IHJlbW92ZUFsbExpc3RlbmVycyxcbiAgZW1pdDogZW1pdCxcbiAgYmluZGluZzogYmluZGluZyxcbiAgY3dkOiBjd2QsXG4gIGNoZGlyOiBjaGRpcixcbiAgdW1hc2s6IHVtYXNrLFxuICBocnRpbWU6IGhydGltZSxcbiAgcGxhdGZvcm06IHBsYXRmb3JtLFxuICByZWxlYXNlOiByZWxlYXNlLFxuICBjb25maWc6IGNvbmZpZyxcbiAgdXB0aW1lOiB1cHRpbWVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHByZXNlcnZlQ2FtZWxDYXNlID0gc3RyaW5nID0+IHtcblx0bGV0IGlzTGFzdENoYXJMb3dlciA9IGZhbHNlO1xuXHRsZXQgaXNMYXN0Q2hhclVwcGVyID0gZmFsc2U7XG5cdGxldCBpc0xhc3RMYXN0Q2hhclVwcGVyID0gZmFsc2U7XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyBpKyspIHtcblx0XHRjb25zdCBjaGFyYWN0ZXIgPSBzdHJpbmdbaV07XG5cblx0XHRpZiAoaXNMYXN0Q2hhckxvd2VyICYmIC9bYS16QS1aXS8udGVzdChjaGFyYWN0ZXIpICYmIGNoYXJhY3Rlci50b1VwcGVyQ2FzZSgpID09PSBjaGFyYWN0ZXIpIHtcblx0XHRcdHN0cmluZyA9IHN0cmluZy5zbGljZSgwLCBpKSArICctJyArIHN0cmluZy5zbGljZShpKTtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IGZhbHNlO1xuXHRcdFx0aXNMYXN0TGFzdENoYXJVcHBlciA9IGlzTGFzdENoYXJVcHBlcjtcblx0XHRcdGlzTGFzdENoYXJVcHBlciA9IHRydWU7XG5cdFx0XHRpKys7XG5cdFx0fSBlbHNlIGlmIChpc0xhc3RDaGFyVXBwZXIgJiYgaXNMYXN0TGFzdENoYXJVcHBlciAmJiAvW2EtekEtWl0vLnRlc3QoY2hhcmFjdGVyKSAmJiBjaGFyYWN0ZXIudG9Mb3dlckNhc2UoKSA9PT0gY2hhcmFjdGVyKSB7XG5cdFx0XHRzdHJpbmcgPSBzdHJpbmcuc2xpY2UoMCwgaSAtIDEpICsgJy0nICsgc3RyaW5nLnNsaWNlKGkgLSAxKTtcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSBmYWxzZTtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IHRydWU7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlzTGFzdENoYXJMb3dlciA9IGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpID09PSBjaGFyYWN0ZXIgJiYgY2hhcmFjdGVyLnRvVXBwZXJDYXNlKCkgIT09IGNoYXJhY3Rlcjtcblx0XHRcdGlzTGFzdExhc3RDaGFyVXBwZXIgPSBpc0xhc3RDaGFyVXBwZXI7XG5cdFx0XHRpc0xhc3RDaGFyVXBwZXIgPSBjaGFyYWN0ZXIudG9VcHBlckNhc2UoKSA9PT0gY2hhcmFjdGVyICYmIGNoYXJhY3Rlci50b0xvd2VyQ2FzZSgpICE9PSBjaGFyYWN0ZXI7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0cmluZztcbn07XG5cbmNvbnN0IGNhbWVsQ2FzZSA9IChpbnB1dCwgb3B0aW9ucykgPT4ge1xuXHRpZiAoISh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnIHx8IEFycmF5LmlzQXJyYXkoaW5wdXQpKSkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBpbnB1dCB0byBiZSBgc3RyaW5nIHwgc3RyaW5nW11gJyk7XG5cdH1cblxuXHRvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7XG5cdFx0cGFzY2FsQ2FzZTogZmFsc2Vcblx0fSwgb3B0aW9ucyk7XG5cblx0Y29uc3QgcG9zdFByb2Nlc3MgPSB4ID0+IG9wdGlvbnMucGFzY2FsQ2FzZSA/IHguY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB4LnNsaWNlKDEpIDogeDtcblxuXHRpZiAoQXJyYXkuaXNBcnJheShpbnB1dCkpIHtcblx0XHRpbnB1dCA9IGlucHV0Lm1hcCh4ID0+IHgudHJpbSgpKVxuXHRcdFx0LmZpbHRlcih4ID0+IHgubGVuZ3RoKVxuXHRcdFx0LmpvaW4oJy0nKTtcblx0fSBlbHNlIHtcblx0XHRpbnB1dCA9IGlucHV0LnRyaW0oKTtcblx0fVxuXG5cdGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcblx0XHRyZXR1cm4gJyc7XG5cdH1cblxuXHRpZiAoaW5wdXQubGVuZ3RoID09PSAxKSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMucGFzY2FsQ2FzZSA/IGlucHV0LnRvVXBwZXJDYXNlKCkgOiBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuXHR9XG5cblx0Y29uc3QgaGFzVXBwZXJDYXNlID0gaW5wdXQgIT09IGlucHV0LnRvTG93ZXJDYXNlKCk7XG5cblx0aWYgKGhhc1VwcGVyQ2FzZSkge1xuXHRcdGlucHV0ID0gcHJlc2VydmVDYW1lbENhc2UoaW5wdXQpO1xuXHR9XG5cblx0aW5wdXQgPSBpbnB1dFxuXHRcdC5yZXBsYWNlKC9eW18uXFwtIF0rLywgJycpXG5cdFx0LnRvTG93ZXJDYXNlKClcblx0XHQucmVwbGFjZSgvW18uXFwtIF0rKFxcd3wkKS9nLCAoXywgcDEpID0+IHAxLnRvVXBwZXJDYXNlKCkpXG5cdFx0LnJlcGxhY2UoL1xcZCsoXFx3fCQpL2csIG0gPT4gbS50b1VwcGVyQ2FzZSgpKTtcblxuXHRyZXR1cm4gcG9zdFByb2Nlc3MoaW5wdXQpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYW1lbENhc2U7XG4vLyBUT0RPOiBSZW1vdmUgdGhpcyBmb3IgdGhlIG5leHQgbWFqb3IgcmVsZWFzZVxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGNhbWVsQ2FzZTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyByZXNvbHZlcyAuIGFuZCAuLiBlbGVtZW50cyBpbiBhIHBhdGggYXJyYXkgd2l0aCBkaXJlY3RvcnkgbmFtZXMgdGhlcmVcbi8vIG11c3QgYmUgbm8gc2xhc2hlcywgZW1wdHkgZWxlbWVudHMsIG9yIGRldmljZSBuYW1lcyAoYzpcXCkgaW4gdGhlIGFycmF5XG4vLyAoc28gYWxzbyBubyBsZWFkaW5nIGFuZCB0cmFpbGluZyBzbGFzaGVzIC0gaXQgZG9lcyBub3QgZGlzdGluZ3Vpc2hcbi8vIHJlbGF0aXZlIGFuZCBhYnNvbHV0ZSBwYXRocylcbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5KHBhcnRzLCBhbGxvd0Fib3ZlUm9vdCkge1xuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gcGFydHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgbGFzdCA9IHBhcnRzW2ldO1xuICAgIGlmIChsYXN0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKGxhc3QgPT09ICcuLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgcGF0aCBpcyBhbGxvd2VkIHRvIGdvIGFib3ZlIHRoZSByb290LCByZXN0b3JlIGxlYWRpbmcgLi5zXG4gIGlmIChhbGxvd0Fib3ZlUm9vdCkge1xuICAgIGZvciAoOyB1cC0tOyB1cCkge1xuICAgICAgcGFydHMudW5zaGlmdCgnLi4nKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFydHM7XG59XG5cbi8vIFNwbGl0IGEgZmlsZW5hbWUgaW50byBbcm9vdCwgZGlyLCBiYXNlbmFtZSwgZXh0XSwgdW5peCB2ZXJzaW9uXG4vLyAncm9vdCcgaXMganVzdCBhIHNsYXNoLCBvciBub3RoaW5nLlxudmFyIHNwbGl0UGF0aFJlID1cbiAgICAvXihcXC8/fCkoW1xcc1xcU10qPykoKD86XFwuezEsMn18W15cXC9dKz98KShcXC5bXi5cXC9dKnwpKSg/OltcXC9dKikkLztcbnZhciBzcGxpdFBhdGggPSBmdW5jdGlvbihmaWxlbmFtZSkge1xuICByZXR1cm4gc3BsaXRQYXRoUmUuZXhlYyhmaWxlbmFtZSkuc2xpY2UoMSk7XG59O1xuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZSgpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6ICcvJztcblxuICAgIC8vIFNraXAgZW1wdHkgYW5kIGludmFsaWQgZW50cmllc1xuICAgIGlmICh0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLnJlc29sdmUgbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfSBlbHNlIGlmICghcGF0aCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgcmVzb2x2ZWRQYXRoID0gcGF0aCArICcvJyArIHJlc29sdmVkUGF0aDtcbiAgICByZXNvbHZlZEFic29sdXRlID0gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbiAgfVxuXG4gIC8vIEF0IHRoaXMgcG9pbnQgdGhlIHBhdGggc2hvdWxkIGJlIHJlc29sdmVkIHRvIGEgZnVsbCBhYnNvbHV0ZSBwYXRoLCBidXRcbiAgLy8gaGFuZGxlIHJlbGF0aXZlIHBhdGhzIHRvIGJlIHNhZmUgKG1pZ2h0IGhhcHBlbiB3aGVuIHByb2Nlc3MuY3dkKCkgZmFpbHMpXG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHJlc29sdmVkUGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihyZXNvbHZlZFBhdGguc3BsaXQoJy8nKSwgZnVuY3Rpb24ocCkge1xuICAgIHJldHVybiAhIXA7XG4gIH0pLCAhcmVzb2x2ZWRBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIHJldHVybiAoKHJlc29sdmVkQWJzb2x1dGUgPyAnLycgOiAnJykgKyByZXNvbHZlZFBhdGgpIHx8ICcuJztcbn07XG5cbi8vIHBhdGgubm9ybWFsaXplKHBhdGgpXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gbm9ybWFsaXplKHBhdGgpIHtcbiAgdmFyIGlzUGF0aEFic29sdXRlID0gaXNBYnNvbHV0ZShwYXRoKSxcbiAgICAgIHRyYWlsaW5nU2xhc2ggPSBzdWJzdHIocGF0aCwgLTEpID09PSAnLyc7XG5cbiAgLy8gTm9ybWFsaXplIHRoZSBwYXRoXG4gIHBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocGF0aC5zcGxpdCgnLycpLCBmdW5jdGlvbihwKSB7XG4gICAgcmV0dXJuICEhcDtcbiAgfSksICFpc1BhdGhBYnNvbHV0ZSkuam9pbignLycpO1xuXG4gIGlmICghcGF0aCAmJiAhaXNQYXRoQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNQYXRoQWJzb2x1dGUgPyAnLycgOiAnJykgKyBwYXRoO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0IGZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0IGZ1bmN0aW9uIGpvaW4oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBub3JtYWxpemUoZmlsdGVyKHBhdGhzLCBmdW5jdGlvbihwLCBpbmRleCkge1xuICAgIGlmICh0eXBlb2YgcCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyB0byBwYXRoLmpvaW4gbXVzdCBiZSBzdHJpbmdzJyk7XG4gICAgfVxuICAgIHJldHVybiBwO1xuICB9KS5qb2luKCcvJykpO1xufVxuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnQgZnVuY3Rpb24gcmVsYXRpdmUoZnJvbSwgdG8pIHtcbiAgZnJvbSA9IHJlc29sdmUoZnJvbSkuc3Vic3RyKDEpO1xuICB0byA9IHJlc29sdmUodG8pLnN1YnN0cigxKTtcblxuICBmdW5jdGlvbiB0cmltKGFycikge1xuICAgIHZhciBzdGFydCA9IDA7XG4gICAgZm9yICg7IHN0YXJ0IDwgYXJyLmxlbmd0aDsgc3RhcnQrKykge1xuICAgICAgaWYgKGFycltzdGFydF0gIT09ICcnKSBicmVhaztcbiAgICB9XG5cbiAgICB2YXIgZW5kID0gYXJyLmxlbmd0aCAtIDE7XG4gICAgZm9yICg7IGVuZCA+PSAwOyBlbmQtLSkge1xuICAgICAgaWYgKGFycltlbmRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgaWYgKHN0YXJ0ID4gZW5kKSByZXR1cm4gW107XG4gICAgcmV0dXJuIGFyci5zbGljZShzdGFydCwgZW5kIC0gc3RhcnQgKyAxKTtcbiAgfVxuXG4gIHZhciBmcm9tUGFydHMgPSB0cmltKGZyb20uc3BsaXQoJy8nKSk7XG4gIHZhciB0b1BhcnRzID0gdHJpbSh0by5zcGxpdCgnLycpKTtcblxuICB2YXIgbGVuZ3RoID0gTWF0aC5taW4oZnJvbVBhcnRzLmxlbmd0aCwgdG9QYXJ0cy5sZW5ndGgpO1xuICB2YXIgc2FtZVBhcnRzTGVuZ3RoID0gbGVuZ3RoO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGZyb21QYXJ0c1tpXSAhPT0gdG9QYXJ0c1tpXSkge1xuICAgICAgc2FtZVBhcnRzTGVuZ3RoID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHZhciBvdXRwdXRQYXJ0cyA9IFtdO1xuICBmb3IgKHZhciBpID0gc2FtZVBhcnRzTGVuZ3RoOyBpIDwgZnJvbVBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0UGFydHMucHVzaCgnLi4nKTtcbiAgfVxuXG4gIG91dHB1dFBhcnRzID0gb3V0cHV0UGFydHMuY29uY2F0KHRvUGFydHMuc2xpY2Uoc2FtZVBhcnRzTGVuZ3RoKSk7XG5cbiAgcmV0dXJuIG91dHB1dFBhcnRzLmpvaW4oJy8nKTtcbn1cblxuZXhwb3J0IHZhciBzZXAgPSAnLyc7XG5leHBvcnQgdmFyIGRlbGltaXRlciA9ICc6JztcblxuZXhwb3J0IGZ1bmN0aW9uIGRpcm5hbWUocGF0aCkge1xuICB2YXIgcmVzdWx0ID0gc3BsaXRQYXRoKHBhdGgpLFxuICAgICAgcm9vdCA9IHJlc3VsdFswXSxcbiAgICAgIGRpciA9IHJlc3VsdFsxXTtcblxuICBpZiAoIXJvb3QgJiYgIWRpcikge1xuICAgIC8vIE5vIGRpcm5hbWUgd2hhdHNvZXZlclxuICAgIHJldHVybiAnLic7XG4gIH1cblxuICBpZiAoZGlyKSB7XG4gICAgLy8gSXQgaGFzIGEgZGlybmFtZSwgc3RyaXAgdHJhaWxpbmcgc2xhc2hcbiAgICBkaXIgPSBkaXIuc3Vic3RyKDAsIGRpci5sZW5ndGggLSAxKTtcbiAgfVxuXG4gIHJldHVybiByb290ICsgZGlyO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmFzZW5hbWUocGF0aCwgZXh0KSB7XG4gIHZhciBmID0gc3BsaXRQYXRoKHBhdGgpWzJdO1xuICAvLyBUT0RPOiBtYWtlIHRoaXMgY29tcGFyaXNvbiBjYXNlLWluc2Vuc2l0aXZlIG9uIHdpbmRvd3M/XG4gIGlmIChleHQgJiYgZi5zdWJzdHIoLTEgKiBleHQubGVuZ3RoKSA9PT0gZXh0KSB7XG4gICAgZiA9IGYuc3Vic3RyKDAsIGYubGVuZ3RoIC0gZXh0Lmxlbmd0aCk7XG4gIH1cbiAgcmV0dXJuIGY7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGV4dG5hbWUocGF0aCkge1xuICByZXR1cm4gc3BsaXRQYXRoKHBhdGgpWzNdO1xufVxuZXhwb3J0IGRlZmF1bHQge1xuICBleHRuYW1lOiBleHRuYW1lLFxuICBiYXNlbmFtZTogYmFzZW5hbWUsXG4gIGRpcm5hbWU6IGRpcm5hbWUsXG4gIHNlcDogc2VwLFxuICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgcmVsYXRpdmU6IHJlbGF0aXZlLFxuICBqb2luOiBqb2luLFxuICBpc0Fic29sdXRlOiBpc0Fic29sdXRlLFxuICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgcmVzb2x2ZTogcmVzb2x2ZVxufTtcbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InID9cbiAgICBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH0gOlxuICAgIGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cblxuaW1wb3J0ICogYXMgYmFzZTY0IGZyb20gJy4vYmFzZTY0J1xuaW1wb3J0ICogYXMgaWVlZTc1NCBmcm9tICcuL2llZWU3NTQnXG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXknXG5cbmV4cG9ydCB2YXIgSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG4vKipcbiAqIElmIGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGA6XG4gKiAgID09PSB0cnVlICAgIFVzZSBVaW50OEFycmF5IGltcGxlbWVudGF0aW9uIChmYXN0ZXN0KVxuICogICA9PT0gZmFsc2UgICBVc2UgT2JqZWN0IGltcGxlbWVudGF0aW9uIChtb3N0IGNvbXBhdGlibGUsIGV2ZW4gSUU2KVxuICpcbiAqIEJyb3dzZXJzIHRoYXQgc3VwcG9ydCB0eXBlZCBhcnJheXMgYXJlIElFIDEwKywgRmlyZWZveCA0KywgQ2hyb21lIDcrLCBTYWZhcmkgNS4xKyxcbiAqIE9wZXJhIDExLjYrLCBpT1MgNC4yKy5cbiAqXG4gKiBEdWUgdG8gdmFyaW91cyBicm93c2VyIGJ1Z3MsIHNvbWV0aW1lcyB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uIHdpbGwgYmUgdXNlZCBldmVuXG4gKiB3aGVuIHRoZSBicm93c2VyIHN1cHBvcnRzIHR5cGVkIGFycmF5cy5cbiAqXG4gKiBOb3RlOlxuICpcbiAqICAgLSBGaXJlZm94IDQtMjkgbGFja3Mgc3VwcG9ydCBmb3IgYWRkaW5nIG5ldyBwcm9wZXJ0aWVzIHRvIGBVaW50OEFycmF5YCBpbnN0YW5jZXMsXG4gKiAgICAgU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzguXG4gKlxuICogICAtIENocm9tZSA5LTEwIGlzIG1pc3NpbmcgdGhlIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24uXG4gKlxuICogICAtIElFMTAgaGFzIGEgYnJva2VuIGBUeXBlZEFycmF5LnByb3RvdHlwZS5zdWJhcnJheWAgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhcnJheXMgb2ZcbiAqICAgICBpbmNvcnJlY3QgbGVuZ3RoIGluIHNvbWUgc2l0dWF0aW9ucy5cblxuICogV2UgZGV0ZWN0IHRoZXNlIGJ1Z2d5IGJyb3dzZXJzIGFuZCBzZXQgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYCB0byBgZmFsc2VgIHNvIHRoZXlcbiAqIGdldCB0aGUgT2JqZWN0IGltcGxlbWVudGF0aW9uLCB3aGljaCBpcyBzbG93ZXIgYnV0IGJlaGF2ZXMgY29ycmVjdGx5LlxuICovXG5CdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCA9IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUICE9PSB1bmRlZmluZWRcbiAgPyBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVFxuICA6IHRydWVcblxuLypcbiAqIEV4cG9ydCBrTWF4TGVuZ3RoIGFmdGVyIHR5cGVkIGFycmF5IHN1cHBvcnQgaXMgZGV0ZXJtaW5lZC5cbiAqL1xudmFyIF9rTWF4TGVuZ3RoID0ga01heExlbmd0aCgpXG5leHBvcnQge19rTWF4TGVuZ3RoIGFzIGtNYXhMZW5ndGh9O1xuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICByZXR1cm4gdHJ1ZTtcbiAgLy8gcm9sbHVwIGlzc3Vlc1xuICAvLyB0cnkge1xuICAvLyAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAvLyAgIGFyci5fX3Byb3RvX18gPSB7XG4gIC8vICAgICBfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLFxuICAvLyAgICAgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9XG4gIC8vICAgfVxuICAvLyAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gIC8vICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gIC8vICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIC8vIH0gY2F0Y2ggKGUpIHtcbiAgLy8gICByZXR1cm4gZmFsc2VcbiAgLy8gfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBCdWZmZXIgKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgISh0aGlzIGluc3RhbmNlb2YgQnVmZmVyKSkge1xuICAgIHJldHVybiBuZXcgQnVmZmVyKGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0lmIGVuY29kaW5nIGlzIHNwZWNpZmllZCB0aGVuIHRoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJ1xuICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gYWxsb2NVbnNhZmUodGhpcywgYXJnKVxuICB9XG4gIHJldHVybiBmcm9tKHRoaXMsIGFyZywgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucG9vbFNpemUgPSA4MTkyIC8vIG5vdCB1c2VkIGJ5IHRoaXMgaW1wbGVtZW50YXRpb25cblxuLy8gVE9ETzogTGVnYWN5LCBub3QgbmVlZGVkIGFueW1vcmUuIFJlbW92ZSBpbiBuZXh0IG1ham9yIHZlcnNpb24uXG5CdWZmZXIuX2F1Z21lbnQgPSBmdW5jdGlvbiAoYXJyKSB7XG4gIGFyci5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIHJldHVybiBhcnJcbn1cblxuZnVuY3Rpb24gZnJvbSAodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBhIG51bWJlcicpXG4gIH1cblxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIHJldHVybiBmcm9tT2JqZWN0KHRoYXQsIHZhbHVlKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKG51bGwsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbmlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICBCdWZmZXIucHJvdG90eXBlLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXkucHJvdG90eXBlXG4gIEJ1ZmZlci5fX3Byb3RvX18gPSBVaW50OEFycmF5XG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wuc3BlY2llcyAmJlxuICAgICAgQnVmZmVyW1N5bWJvbC5zcGVjaWVzXSA9PT0gQnVmZmVyKSB7XG4gICAgLy8gRml4IHN1YmFycmF5KCkgaW4gRVMyMDE2LiBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvOTdcbiAgICAvLyBPYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLCBTeW1ib2wuc3BlY2llcywge1xuICAgIC8vICAgdmFsdWU6IG51bGwsXG4gICAgLy8gICBjb25maWd1cmFibGU6IHRydWVcbiAgICAvLyB9KVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFNpemUgKHNpemUpIHtcbiAgaWYgKHR5cGVvZiBzaXplICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3QgYmUgYSBudW1iZXInKVxuICB9IGVsc2UgaWYgKHNpemUgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1wic2l6ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIG5lZ2F0aXZlJylcbiAgfVxufVxuXG5mdW5jdGlvbiBhbGxvYyAodGhhdCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICBpZiAoc2l6ZSA8PSAwKSB7XG4gICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxuICB9XG4gIGlmIChmaWxsICE9PSB1bmRlZmluZWQpIHtcbiAgICAvLyBPbmx5IHBheSBhdHRlbnRpb24gdG8gZW5jb2RpbmcgaWYgaXQncyBhIHN0cmluZy4gVGhpc1xuICAgIC8vIHByZXZlbnRzIGFjY2lkZW50YWxseSBzZW5kaW5nIGluIGEgbnVtYmVyIHRoYXQgd291bGRcbiAgICAvLyBiZSBpbnRlcnByZXR0ZWQgYXMgYSBzdGFydCBvZmZzZXQuXG4gICAgcmV0dXJuIHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZydcbiAgICAgID8gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbCwgZW5jb2RpbmcpXG4gICAgICA6IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwpXG4gIH1cbiAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqIGFsbG9jKHNpemVbLCBmaWxsWywgZW5jb2RpbmddXSlcbiAqKi9cbkJ1ZmZlci5hbGxvYyA9IGZ1bmN0aW9uIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICByZXR1cm4gYWxsb2MobnVsbCwgc2l6ZSwgZmlsbCwgZW5jb2RpbmcpXG59XG5cbmZ1bmN0aW9uIGFsbG9jVW5zYWZlICh0aGF0LCBzaXplKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplIDwgMCA/IDAgOiBjaGVja2VkKHNpemUpIHwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l6ZTsgKytpKSB7XG4gICAgICB0aGF0W2ldID0gMFxuICAgIH1cbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gQnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG4vKipcbiAqIEVxdWl2YWxlbnQgdG8gU2xvd0J1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICovXG5CdWZmZXIuYWxsb2NVbnNhZmVTbG93ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgcmV0dXJuIGFsbG9jVW5zYWZlKG51bGwsIHNpemUpXG59XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmcgKHRoYXQsIHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycgfHwgZW5jb2RpbmcgPT09ICcnKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgfVxuXG4gIGlmICghQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJlbmNvZGluZ1wiIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcgZW5jb2RpbmcnKVxuICB9XG5cbiAgdmFyIGxlbmd0aCA9IGJ5dGVMZW5ndGgoc3RyaW5nLCBlbmNvZGluZykgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuXG4gIHZhciBhY3R1YWwgPSB0aGF0LndyaXRlKHN0cmluZywgZW5jb2RpbmcpXG5cbiAgaWYgKGFjdHVhbCAhPT0gbGVuZ3RoKSB7XG4gICAgLy8gV3JpdGluZyBhIGhleCBzdHJpbmcsIGZvciBleGFtcGxlLCB0aGF0IGNvbnRhaW5zIGludmFsaWQgY2hhcmFjdGVycyB3aWxsXG4gICAgLy8gY2F1c2UgZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgaW52YWxpZCBjaGFyYWN0ZXIgdG8gYmUgaWdub3JlZC4gKGUuZy5cbiAgICAvLyAnYWJ4eGNkJyB3aWxsIGJlIHRyZWF0ZWQgYXMgJ2FiJylcbiAgICB0aGF0ID0gdGhhdC5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlMaWtlICh0aGF0LCBhcnJheSkge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIDwgMCA/IDAgOiBjaGVja2VkKGFycmF5Lmxlbmd0aCkgfCAwXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgbGVuZ3RoKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgdGhhdFtpXSA9IGFycmF5W2ldICYgMjU1XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5QnVmZmVyICh0aGF0LCBhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XG4gIGFycmF5LmJ5dGVMZW5ndGggLy8gdGhpcyB0aHJvd3MgaWYgYGFycmF5YCBpcyBub3QgYSB2YWxpZCBBcnJheUJ1ZmZlclxuXG4gIGlmIChieXRlT2Zmc2V0IDwgMCB8fCBhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdvZmZzZXRcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQgKyAobGVuZ3RoIHx8IDApKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ2xlbmd0aFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5KVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldClcbiAgfSBlbHNlIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gYXJyYXlcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgdGhhdCA9IGZyb21BcnJheUxpa2UodGhhdCwgYXJyYXkpXG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAodGhhdCwgb2JqKSB7XG4gIGlmIChpbnRlcm5hbElzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuQnVmZmVyLmlzQnVmZmVyID0gaXNCdWZmZXI7XG5mdW5jdGlvbiBpbnRlcm5hbElzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIWludGVybmFsSXNCdWZmZXIoYSkgfHwgIWludGVybmFsSXNCdWZmZXIoYikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgbXVzdCBiZSBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIHZhciB4ID0gYS5sZW5ndGhcbiAgdmFyIHkgPSBiLmxlbmd0aFxuXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIWlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICB2YXIgYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKGxlbmd0aClcbiAgdmFyIHBvcyA9IDBcbiAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgYnVmID0gbGlzdFtpXVxuICAgIGlmICghaW50ZXJuYWxJc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoaW50ZXJuYWxJc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgdmFyIHN0ciA9ICcnXG4gIHZhciBtYXggPSBJTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoaW50ZXJuYWxJc0J1ZmZlcih2YWwpKSB7XG4gICAgLy8gU3BlY2lhbCBjYXNlOiBsb29raW5nIGZvciBlbXB0eSBzdHJpbmcvYnVmZmVyIGFsd2F5cyBmYWlsc1xuICAgIGlmICh2YWwubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gLTFcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDB4RkYgLy8gU2VhcmNoIGZvciBhIGJ5dGUgdmFsdWUgWzAtMjU1XVxuICAgIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJlxuICAgICAgICB0eXBlb2YgVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgaWYgKGRpcikge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCBbIHZhbCBdLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9XG5cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmFsIG11c3QgYmUgc3RyaW5nLCBudW1iZXIgb3IgQnVmZmVyJylcbn1cblxuZnVuY3Rpb24gYXJyYXlJbmRleE9mIChhcnIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICB2YXIgaW5kZXhTaXplID0gMVxuICB2YXIgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aFxuICB2YXIgdmFsTGVuZ3RoID0gdmFsLmxlbmd0aFxuXG4gIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSBTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICBpZiAoZW5jb2RpbmcgPT09ICd1Y3MyJyB8fCBlbmNvZGluZyA9PT0gJ3Vjcy0yJyB8fFxuICAgICAgICBlbmNvZGluZyA9PT0gJ3V0ZjE2bGUnIHx8IGVuY29kaW5nID09PSAndXRmLTE2bGUnKSB7XG4gICAgICBpZiAoYXJyLmxlbmd0aCA8IDIgfHwgdmFsLmxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIC0xXG4gICAgICB9XG4gICAgICBpbmRleFNpemUgPSAyXG4gICAgICBhcnJMZW5ndGggLz0gMlxuICAgICAgdmFsTGVuZ3RoIC89IDJcbiAgICAgIGJ5dGVPZmZzZXQgLz0gMlxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWQgKGJ1ZiwgaSkge1xuICAgIGlmIChpbmRleFNpemUgPT09IDEpIHtcbiAgICAgIHJldHVybiBidWZbaV1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGJ1Zi5yZWFkVUludDE2QkUoaSAqIGluZGV4U2l6ZSlcbiAgICB9XG4gIH1cblxuICB2YXIgaVxuICBpZiAoZGlyKSB7XG4gICAgdmFyIGZvdW5kSW5kZXggPSAtMVxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHJlYWQoYXJyLCBpKSA9PT0gcmVhZCh2YWwsIGZvdW5kSW5kZXggPT09IC0xID8gMCA6IGkgLSBmb3VuZEluZGV4KSkge1xuICAgICAgICBpZiAoZm91bmRJbmRleCA9PT0gLTEpIGZvdW5kSW5kZXggPSBpXG4gICAgICAgIGlmIChpIC0gZm91bmRJbmRleCArIDEgPT09IHZhbExlbmd0aCkgcmV0dXJuIGZvdW5kSW5kZXggKiBpbmRleFNpemVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ICE9PSAtMSkgaSAtPSBpIC0gZm91bmRJbmRleFxuICAgICAgICBmb3VuZEluZGV4ID0gLTFcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGJ5dGVPZmZzZXQgKyB2YWxMZW5ndGggPiBhcnJMZW5ndGgpIGJ5dGVPZmZzZXQgPSBhcnJMZW5ndGggLSB2YWxMZW5ndGhcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGZvdW5kID0gdHJ1ZVxuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWxMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAocmVhZChhcnIsIGkgKyBqKSAhPT0gcmVhZCh2YWwsIGopKSB7XG4gICAgICAgICAgZm91bmQgPSBmYWxzZVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChmb3VuZCkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmNsdWRlcyA9IGZ1bmN0aW9uIGluY2x1ZGVzICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiB0aGlzLmluZGV4T2YodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykgIT09IC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIGluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIHRydWUpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUubGFzdEluZGV4T2YgPSBmdW5jdGlvbiBsYXN0SW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZmFsc2UpXG59XG5cbmZ1bmN0aW9uIGhleFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgb2Zmc2V0ID0gTnVtYmVyKG9mZnNldCkgfHwgMFxuICB2YXIgcmVtYWluaW5nID0gYnVmLmxlbmd0aCAtIG9mZnNldFxuICBpZiAoIWxlbmd0aCkge1xuICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICB9IGVsc2Uge1xuICAgIGxlbmd0aCA9IE51bWJlcihsZW5ndGgpXG4gICAgaWYgKGxlbmd0aCA+IHJlbWFpbmluZykge1xuICAgICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gICAgfVxuICB9XG5cbiAgLy8gbXVzdCBiZSBhbiBldmVuIG51bWJlciBvZiBkaWdpdHNcbiAgdmFyIHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKHN0ckxlbiAlIDIgIT09IDApIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgaGV4IHN0cmluZycpXG5cbiAgaWYgKGxlbmd0aCA+IHN0ckxlbiAvIDIpIHtcbiAgICBsZW5ndGggPSBzdHJMZW4gLyAyXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKGlzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBsYXRpbjFXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBhc2NpaVdyaXRlKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYmFzZTY0V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihiYXNlNjRUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIHVjczJXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjE2bGVUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGUgPSBmdW5jdGlvbiB3cml0ZSAoc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCwgZW5jb2RpbmcpIHtcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZylcbiAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5jb2RpbmcgPSAndXRmOCdcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgZW5jb2RpbmcpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IG9mZnNldFxuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBvZmZzZXRbLCBsZW5ndGhdWywgZW5jb2RpbmddKVxuICB9IGVsc2UgaWYgKGlzRmluaXRlKG9mZnNldCkpIHtcbiAgICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gICAgaWYgKGlzRmluaXRlKGxlbmd0aCkpIHtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCB8IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICAvLyBsZWdhY3kgd3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0LCBsZW5ndGgpIC0gcmVtb3ZlIGluIHYwLjEzXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ0J1ZmZlci53cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXRbLCBsZW5ndGhdKSBpcyBubyBsb25nZXIgc3VwcG9ydGVkJ1xuICAgIClcbiAgfVxuXG4gIHZhciByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgdmFyIHJlcyA9IFtdXG5cbiAgdmFyIGkgPSBzdGFydFxuICB3aGlsZSAoaSA8IGVuZCkge1xuICAgIHZhciBmaXJzdEJ5dGUgPSBidWZbaV1cbiAgICB2YXIgY29kZVBvaW50ID0gbnVsbFxuICAgIHZhciBieXRlc1BlclNlcXVlbmNlID0gKGZpcnN0Qnl0ZSA+IDB4RUYpID8gNFxuICAgICAgOiAoZmlyc3RCeXRlID4gMHhERikgPyAzXG4gICAgICA6IChmaXJzdEJ5dGUgPiAweEJGKSA/IDJcbiAgICAgIDogMVxuXG4gICAgaWYgKGkgKyBieXRlc1BlclNlcXVlbmNlIDw9IGVuZCkge1xuICAgICAgdmFyIHNlY29uZEJ5dGUsIHRoaXJkQnl0ZSwgZm91cnRoQnl0ZSwgdGVtcENvZGVQb2ludFxuXG4gICAgICBzd2l0Y2ggKGJ5dGVzUGVyU2VxdWVuY2UpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGlmIChmaXJzdEJ5dGUgPCAweDgwKSB7XG4gICAgICAgICAgICBjb2RlUG9pbnQgPSBmaXJzdEJ5dGVcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHgxRikgPDwgMHg2IHwgKHNlY29uZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4QyB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKHRoaXJkQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0ZGICYmICh0ZW1wQ29kZVBvaW50IDwgMHhEODAwIHx8IHRlbXBDb2RlUG9pbnQgPiAweERGRkYpKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSA0OlxuICAgICAgICAgIHNlY29uZEJ5dGUgPSBidWZbaSArIDFdXG4gICAgICAgICAgdGhpcmRCeXRlID0gYnVmW2kgKyAyXVxuICAgICAgICAgIGZvdXJ0aEJ5dGUgPSBidWZbaSArIDNdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwICYmIChmb3VydGhCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweDEyIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweEMgfCAodGhpcmRCeXRlICYgMHgzRikgPDwgMHg2IHwgKGZvdXJ0aEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweEZGRkYgJiYgdGVtcENvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICAgICAgICAgIGNvZGVQb2ludCA9IHRlbXBDb2RlUG9pbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNvZGVQb2ludCA9PT0gbnVsbCkge1xuICAgICAgLy8gd2UgZGlkIG5vdCBnZW5lcmF0ZSBhIHZhbGlkIGNvZGVQb2ludCBzbyBpbnNlcnQgYVxuICAgICAgLy8gcmVwbGFjZW1lbnQgY2hhciAoVStGRkZEKSBhbmQgYWR2YW5jZSBvbmx5IDEgYnl0ZVxuICAgICAgY29kZVBvaW50ID0gMHhGRkZEXG4gICAgICBieXRlc1BlclNlcXVlbmNlID0gMVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50ID4gMHhGRkZGKSB7XG4gICAgICAvLyBlbmNvZGUgdG8gdXRmMTYgKHN1cnJvZ2F0ZSBwYWlyIGRhbmNlKVxuICAgICAgY29kZVBvaW50IC09IDB4MTAwMDBcbiAgICAgIHJlcy5wdXNoKGNvZGVQb2ludCA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMClcbiAgICAgIGNvZGVQb2ludCA9IDB4REMwMCB8IGNvZGVQb2ludCAmIDB4M0ZGXG4gICAgfVxuXG4gICAgcmVzLnB1c2goY29kZVBvaW50KVxuICAgIGkgKz0gYnl0ZXNQZXJTZXF1ZW5jZVxuICB9XG5cbiAgcmV0dXJuIGRlY29kZUNvZGVQb2ludHNBcnJheShyZXMpXG59XG5cbi8vIEJhc2VkIG9uIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzIyNzQ3MjcyLzY4MDc0MiwgdGhlIGJyb3dzZXIgd2l0aFxuLy8gdGhlIGxvd2VzdCBsaW1pdCBpcyBDaHJvbWUsIHdpdGggMHgxMDAwMCBhcmdzLlxuLy8gV2UgZ28gMSBtYWduaXR1ZGUgbGVzcywgZm9yIHNhZmV0eVxudmFyIE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICB2YXIgbGVuID0gY29kZVBvaW50cy5sZW5ndGhcbiAgaWYgKGxlbiA8PSBNQVhfQVJHVU1FTlRTX0xFTkdUSCkge1xuICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFN0cmluZywgY29kZVBvaW50cykgLy8gYXZvaWQgZXh0cmEgc2xpY2UoKVxuICB9XG5cbiAgLy8gRGVjb2RlIGluIGNodW5rcyB0byBhdm9pZCBcImNhbGwgc3RhY2sgc2l6ZSBleGNlZWRlZFwiLlxuICB2YXIgcmVzID0gJydcbiAgdmFyIGkgPSAwXG4gIHdoaWxlIChpIDwgbGVuKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoXG4gICAgICBTdHJpbmcsXG4gICAgICBjb2RlUG9pbnRzLnNsaWNlKGksIGkgKz0gTUFYX0FSR1VNRU5UU19MRU5HVEgpXG4gICAgKVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0gJiAweDdGKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gbGF0aW4xU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldKVxuICB9XG4gIHJldHVybiByZXRcbn1cblxuZnVuY3Rpb24gaGV4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuXG4gIGlmICghc3RhcnQgfHwgc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgfHwgZW5kIDwgMCB8fCBlbmQgPiBsZW4pIGVuZCA9IGxlblxuXG4gIHZhciBvdXQgPSAnJ1xuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIG91dCArPSB0b0hleChidWZbaV0pXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgYnl0ZXMgPSBidWYuc2xpY2Uoc3RhcnQsIGVuZClcbiAgdmFyIHJlcyA9ICcnXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSArIGJ5dGVzW2kgKyAxXSAqIDI1NilcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbiBzbGljZSAoc3RhcnQsIGVuZCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICB2YXIgbmV3QnVmXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIG5ld0J1ZiA9IHRoaXMuc3ViYXJyYXkoc3RhcnQsIGVuZClcbiAgICBuZXdCdWYuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIHZhciBzbGljZUxlbiA9IGVuZCAtIHN0YXJ0XG4gICAgbmV3QnVmID0gbmV3IEJ1ZmZlcihzbGljZUxlbiwgdW5kZWZpbmVkKVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2xpY2VMZW47ICsraSkge1xuICAgICAgbmV3QnVmW2ldID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludExFID0gZnVuY3Rpb24gcmVhZFVJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcbiAgfVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF1cbiAgdmFyIG11bCA9IDFcbiAgd2hpbGUgKGJ5dGVMZW5ndGggPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50OCA9IGZ1bmN0aW9uIHJlYWRVSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkxFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCA4KSB8IHRoaXNbb2Zmc2V0ICsgMV1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyTEUgPSBmdW5jdGlvbiByZWFkVUludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKCh0aGlzW29mZnNldF0pIHxcbiAgICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSkgK1xuICAgICAgKHRoaXNbb2Zmc2V0ICsgM10gKiAweDEwMDAwMDApXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkJFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50TEUgPSBmdW5jdGlvbiByZWFkSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50QkUgPSBmdW5jdGlvbiByZWFkSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgaSA9IGJ5dGVMZW5ndGhcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIGlmICghKHRoaXNbb2Zmc2V0XSAmIDB4ODApKSByZXR1cm4gKHRoaXNbb2Zmc2V0XSlcbiAgcmV0dXJuICgoMHhmZiAtIHRoaXNbb2Zmc2V0XSArIDEpICogLTEpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2TEUgPSBmdW5jdGlvbiByZWFkSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkJFID0gZnVuY3Rpb24gcmVhZEludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgMV0gfCAodGhpc1tvZmZzZXRdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0pIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSA8PCAyNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRJbnQzMkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRMRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdExFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUxFID0gZnVuY3Rpb24gcmVhZERvdWJsZUxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCA1MiwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlQkUgPSBmdW5jdGlvbiByZWFkRG91YmxlQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIWludGVybmFsSXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBpbnRlcm5hbElzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG5cbi8vIHRoZSBmb2xsb3dpbmcgaXMgZnJvbSBpcy1idWZmZXIsIGFsc28gYnkgRmVyb3NzIEFib3VraGFkaWplaCBhbmQgd2l0aCBzYW1lIGxpc2VuY2Vcbi8vIFRoZSBfaXNCdWZmZXIgY2hlY2sgaXMgZm9yIFNhZmFyaSA1LTcgc3VwcG9ydCwgYmVjYXVzZSBpdCdzIG1pc3Npbmdcbi8vIE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHlcbmV4cG9ydCBmdW5jdGlvbiBpc0J1ZmZlcihvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmICghIW9iai5faXNCdWZmZXIgfHwgaXNGYXN0QnVmZmVyKG9iaikgfHwgaXNTbG93QnVmZmVyKG9iaikpXG59XG5cbmZ1bmN0aW9uIGlzRmFzdEJ1ZmZlciAob2JqKSB7XG4gIHJldHVybiAhIW9iai5jb25zdHJ1Y3RvciAmJiB0eXBlb2Ygb2JqLmNvbnN0cnVjdG9yLmlzQnVmZmVyID09PSAnZnVuY3Rpb24nICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlcihvYmopXG59XG5cbi8vIEZvciBOb2RlIHYwLjEwIHN1cHBvcnQuIFJlbW92ZSB0aGlzIGV2ZW50dWFsbHkuXG5mdW5jdGlvbiBpc1Nsb3dCdWZmZXIgKG9iaikge1xuICByZXR1cm4gdHlwZW9mIG9iai5yZWFkRmxvYXRMRSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2Ygb2JqLnNsaWNlID09PSAnZnVuY3Rpb24nICYmIGlzRmFzdEJ1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCJcbnZhciBpbmhlcml0cztcbmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJyl7XG4gIGluaGVyaXRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIGluaGVyaXRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGluaGVyaXRzO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5pbXBvcnQgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdChmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGUoZm4sIG1zZykge1xuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydCBmdW5jdGlvbiBkZWJ1Z2xvZyhzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSAwO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5leHBvcnQgZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIF9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCdWZmZXIobWF5YmVCdWYpIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihtYXliZUJ1Zik7XG59XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydCBmdW5jdGlvbiBsb2coKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbn1cblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuaW1wb3J0IGluaGVyaXRzIGZyb20gJy4vaW5oZXJpdHMnO1xuZXhwb3J0IHtpbmhlcml0c31cblxuZXhwb3J0IGZ1bmN0aW9uIF9leHRlbmQob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5oZXJpdHM6IGluaGVyaXRzLFxuICBfZXh0ZW5kOiBfZXh0ZW5kLFxuICBsb2c6IGxvZyxcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc1ByaW1pdGl2ZTogaXNQcmltaXRpdmUsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzRXJyb3I6IGlzRXJyb3IsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUmVnRXhwOiBpc1JlZ0V4cCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc1N5bWJvbDogaXNTeW1ib2wsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc051bGxPclVuZGVmaW5lZDogaXNOdWxsT3JVbmRlZmluZWQsXG4gIGlzTnVsbDogaXNOdWxsLFxuICBpc0Jvb2xlYW46IGlzQm9vbGVhbixcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaW5zcGVjdDogaW5zcGVjdCxcbiAgZGVwcmVjYXRlOiBkZXByZWNhdGUsXG4gIGZvcm1hdDogZm9ybWF0LFxuICBkZWJ1Z2xvZzogZGVidWdsb2dcbn1cbiIsInZhciBjYW1lbENhc2UgPSByZXF1aXJlKCdjYW1lbGNhc2UnKVxudmFyIGRlY2FtZWxpemUgPSByZXF1aXJlKCdkZWNhbWVsaXplJylcbnZhciBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG52YXIgdG9rZW5pemVBcmdTdHJpbmcgPSByZXF1aXJlKCcuL2xpYi90b2tlbml6ZS1hcmctc3RyaW5nJylcbnZhciB1dGlsID0gcmVxdWlyZSgndXRpbCcpXG5cbmZ1bmN0aW9uIHBhcnNlIChhcmdzLCBvcHRzKSB7XG4gIGlmICghb3B0cykgb3B0cyA9IHt9XG4gIC8vIGFsbG93IGEgc3RyaW5nIGFyZ3VtZW50IHRvIGJlIHBhc3NlZCBpbiByYXRoZXJcbiAgLy8gdGhhbiBhbiBhcmd2IGFycmF5LlxuICBhcmdzID0gdG9rZW5pemVBcmdTdHJpbmcoYXJncylcblxuICAvLyBhbGlhc2VzIG1pZ2h0IGhhdmUgdHJhbnNpdGl2ZSByZWxhdGlvbnNoaXBzLCBub3JtYWxpemUgdGhpcy5cbiAgdmFyIGFsaWFzZXMgPSBjb21iaW5lQWxpYXNlcyhvcHRzLmFsaWFzIHx8IHt9KVxuICB2YXIgY29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oe1xuICAgICdzaG9ydC1vcHRpb24tZ3JvdXBzJzogdHJ1ZSxcbiAgICAnY2FtZWwtY2FzZS1leHBhbnNpb24nOiB0cnVlLFxuICAgICdkb3Qtbm90YXRpb24nOiB0cnVlLFxuICAgICdwYXJzZS1udW1iZXJzJzogdHJ1ZSxcbiAgICAnYm9vbGVhbi1uZWdhdGlvbic6IHRydWUsXG4gICAgJ25lZ2F0aW9uLXByZWZpeCc6ICduby0nLFxuICAgICdkdXBsaWNhdGUtYXJndW1lbnRzLWFycmF5JzogdHJ1ZSxcbiAgICAnZmxhdHRlbi1kdXBsaWNhdGUtYXJyYXlzJzogdHJ1ZSxcbiAgICAncG9wdWxhdGUtLSc6IGZhbHNlLFxuICAgICdjb21iaW5lLWFycmF5cyc6IGZhbHNlLFxuICAgICdzZXQtcGxhY2Vob2xkZXIta2V5JzogZmFsc2UsXG4gICAgJ2hhbHQtYXQtbm9uLW9wdGlvbic6IGZhbHNlLFxuICAgICdzdHJpcC1hbGlhc2VkJzogZmFsc2UsXG4gICAgJ3N0cmlwLWRhc2hlZCc6IGZhbHNlXG4gIH0sIG9wdHMuY29uZmlndXJhdGlvbilcbiAgdmFyIGRlZmF1bHRzID0gb3B0cy5kZWZhdWx0IHx8IHt9XG4gIHZhciBjb25maWdPYmplY3RzID0gb3B0cy5jb25maWdPYmplY3RzIHx8IFtdXG4gIHZhciBlbnZQcmVmaXggPSBvcHRzLmVudlByZWZpeFxuICB2YXIgbm90RmxhZ3NPcHRpb24gPSBjb25maWd1cmF0aW9uWydwb3B1bGF0ZS0tJ11cbiAgdmFyIG5vdEZsYWdzQXJndiA9IG5vdEZsYWdzT3B0aW9uID8gJy0tJyA6ICdfJ1xuICB2YXIgbmV3QWxpYXNlcyA9IHt9XG4gIC8vIGFsbG93IGEgaTE4biBoYW5kbGVyIHRvIGJlIHBhc3NlZCBpbiwgZGVmYXVsdCB0byBhIGZha2Ugb25lICh1dGlsLmZvcm1hdCkuXG4gIHZhciBfXyA9IG9wdHMuX18gfHwgdXRpbC5mb3JtYXRcbiAgdmFyIGVycm9yID0gbnVsbFxuICB2YXIgZmxhZ3MgPSB7XG4gICAgYWxpYXNlczoge30sXG4gICAgYXJyYXlzOiB7fSxcbiAgICBib29sczoge30sXG4gICAgc3RyaW5nczoge30sXG4gICAgbnVtYmVyczoge30sXG4gICAgY291bnRzOiB7fSxcbiAgICBub3JtYWxpemU6IHt9LFxuICAgIGNvbmZpZ3M6IHt9LFxuICAgIGRlZmF1bHRlZDoge30sXG4gICAgbmFyZ3M6IHt9LFxuICAgIGNvZXJjaW9uczoge30sXG4gICAga2V5czogW11cbiAgfVxuICB2YXIgbmVnYXRpdmUgPSAvXi1bMC05XSsoXFwuWzAtOV0rKT8vXG4gIHZhciBuZWdhdGVkQm9vbGVhbiA9IG5ldyBSZWdFeHAoJ14tLScgKyBjb25maWd1cmF0aW9uWyduZWdhdGlvbi1wcmVmaXgnXSArICcoLispJylcblxuICA7W10uY29uY2F0KG9wdHMuYXJyYXkpLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChvcHQpIHtcbiAgICB2YXIga2V5ID0gb3B0LmtleSB8fCBvcHRcblxuICAgIC8vIGFzc2lnbiB0byBmbGFnc1tib29sc3xzdHJpbmdzfG51bWJlcnNdXG4gICAgY29uc3QgYXNzaWdubWVudCA9IE9iamVjdC5rZXlzKG9wdCkubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiAoe1xuICAgICAgICBib29sZWFuOiAnYm9vbHMnLFxuICAgICAgICBzdHJpbmc6ICdzdHJpbmdzJyxcbiAgICAgICAgbnVtYmVyOiAnbnVtYmVycydcbiAgICAgIH0pW2tleV1cbiAgICB9KS5maWx0ZXIoQm9vbGVhbikucG9wKClcblxuICAgIC8vIGFzc2lnbiBrZXkgdG8gYmUgY29lcmNlZFxuICAgIGlmIChhc3NpZ25tZW50KSB7XG4gICAgICBmbGFnc1thc3NpZ25tZW50XVtrZXldID0gdHJ1ZVxuICAgIH1cblxuICAgIGZsYWdzLmFycmF5c1trZXldID0gdHJ1ZVxuICAgIGZsYWdzLmtleXMucHVzaChrZXkpXG4gIH0pXG5cbiAgO1tdLmNvbmNhdChvcHRzLmJvb2xlYW4pLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBmbGFncy5ib29sc1trZXldID0gdHJ1ZVxuICAgIGZsYWdzLmtleXMucHVzaChrZXkpXG4gIH0pXG5cbiAgO1tdLmNvbmNhdChvcHRzLnN0cmluZykuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGZsYWdzLnN0cmluZ3Nba2V5XSA9IHRydWVcbiAgICBmbGFncy5rZXlzLnB1c2goa2V5KVxuICB9KVxuXG4gIDtbXS5jb25jYXQob3B0cy5udW1iZXIpLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBmbGFncy5udW1iZXJzW2tleV0gPSB0cnVlXG4gICAgZmxhZ3Mua2V5cy5wdXNoKGtleSlcbiAgfSlcblxuICA7W10uY29uY2F0KG9wdHMuY291bnQpLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBmbGFncy5jb3VudHNba2V5XSA9IHRydWVcbiAgICBmbGFncy5rZXlzLnB1c2goa2V5KVxuICB9KVxuXG4gIDtbXS5jb25jYXQob3B0cy5ub3JtYWxpemUpLmZpbHRlcihCb29sZWFuKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBmbGFncy5ub3JtYWxpemVba2V5XSA9IHRydWVcbiAgICBmbGFncy5rZXlzLnB1c2goa2V5KVxuICB9KVxuXG4gIE9iamVjdC5rZXlzKG9wdHMubmFyZyB8fCB7fSkuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgIGZsYWdzLm5hcmdzW2tdID0gb3B0cy5uYXJnW2tdXG4gICAgZmxhZ3Mua2V5cy5wdXNoKGspXG4gIH0pXG5cbiAgT2JqZWN0LmtleXMob3B0cy5jb2VyY2UgfHwge30pLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICBmbGFncy5jb2VyY2lvbnNba10gPSBvcHRzLmNvZXJjZVtrXVxuICAgIGZsYWdzLmtleXMucHVzaChrKVxuICB9KVxuXG4gIGlmIChBcnJheS5pc0FycmF5KG9wdHMuY29uZmlnKSB8fCB0eXBlb2Ygb3B0cy5jb25maWcgPT09ICdzdHJpbmcnKSB7XG4gICAgO1tdLmNvbmNhdChvcHRzLmNvbmZpZykuZmlsdGVyKEJvb2xlYW4pLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgZmxhZ3MuY29uZmlnc1trZXldID0gdHJ1ZVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgT2JqZWN0LmtleXMob3B0cy5jb25maWcgfHwge30pLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgIGZsYWdzLmNvbmZpZ3Nba10gPSBvcHRzLmNvbmZpZ1trXVxuICAgIH0pXG4gIH1cblxuICAvLyBjcmVhdGUgYSBsb29rdXAgdGFibGUgdGhhdCB0YWtlcyBpbnRvIGFjY291bnQgYWxsXG4gIC8vIGNvbWJpbmF0aW9ucyBvZiBhbGlhc2VzOiB7ZjogWydmb28nXSwgZm9vOiBbJ2YnXX1cbiAgZXh0ZW5kQWxpYXNlcyhvcHRzLmtleSwgYWxpYXNlcywgb3B0cy5kZWZhdWx0LCBmbGFncy5hcnJheXMpXG5cbiAgLy8gYXBwbHkgZGVmYXVsdCB2YWx1ZXMgdG8gYWxsIGFsaWFzZXMuXG4gIE9iamVjdC5rZXlzKGRlZmF1bHRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAoZmxhZ3MuYWxpYXNlc1trZXldIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uIChhbGlhcykge1xuICAgICAgZGVmYXVsdHNbYWxpYXNdID0gZGVmYXVsdHNba2V5XVxuICAgIH0pXG4gIH0pXG5cbiAgdmFyIGFyZ3YgPSB7IF86IFtdIH1cblxuICBPYmplY3Qua2V5cyhmbGFncy5ib29scykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChkZWZhdWx0cywga2V5KSkge1xuICAgICAgc2V0QXJnKGtleSwgZGVmYXVsdHNba2V5XSlcbiAgICAgIHNldERlZmF1bHRlZChrZXkpXG4gICAgfVxuICB9KVxuXG4gIHZhciBub3RGbGFncyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGFyZyA9IGFyZ3NbaV1cbiAgICB2YXIgYnJva2VuXG4gICAgdmFyIGtleVxuICAgIHZhciBsZXR0ZXJzXG4gICAgdmFyIG1cbiAgICB2YXIgbmV4dFxuICAgIHZhciB2YWx1ZVxuXG4gICAgLy8gLS0gc2VwYXJhdGVkIGJ5ID1cbiAgICBpZiAoYXJnLm1hdGNoKC9eLS0uKz0vKSB8fCAoXG4gICAgICAhY29uZmlndXJhdGlvblsnc2hvcnQtb3B0aW9uLWdyb3VwcyddICYmIGFyZy5tYXRjaCgvXi0uKz0vKVxuICAgICkpIHtcbiAgICAgIC8vIFVzaW5nIFtcXHNcXFNdIGluc3RlYWQgb2YgLiBiZWNhdXNlIGpzIGRvZXNuJ3Qgc3VwcG9ydCB0aGVcbiAgICAgIC8vICdkb3RhbGwnIHJlZ2V4IG1vZGlmaWVyLiBTZWU6XG4gICAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xMDY4MzA4LzEzMjE2XG4gICAgICBtID0gYXJnLm1hdGNoKC9eLS0/KFtePV0rKT0oW1xcc1xcU10qKSQvKVxuXG4gICAgICAvLyBuYXJncyBmb3JtYXQgPSAnLS1mPW1vbmtleSB3YXNoaW5nIGNhdCdcbiAgICAgIGlmIChjaGVja0FsbEFsaWFzZXMobVsxXSwgZmxhZ3MubmFyZ3MpKSB7XG4gICAgICAgIGFyZ3Muc3BsaWNlKGkgKyAxLCAwLCBtWzJdKVxuICAgICAgICBpID0gZWF0TmFyZ3MoaSwgbVsxXSwgYXJncylcbiAgICAgIC8vIGFycmF5cyBmb3JtYXQgPSAnLS1mPWEgYiBjJ1xuICAgICAgfSBlbHNlIGlmIChjaGVja0FsbEFsaWFzZXMobVsxXSwgZmxhZ3MuYXJyYXlzKSAmJiBhcmdzLmxlbmd0aCA+IGkgKyAxKSB7XG4gICAgICAgIGFyZ3Muc3BsaWNlKGkgKyAxLCAwLCBtWzJdKVxuICAgICAgICBpID0gZWF0QXJyYXkoaSwgbVsxXSwgYXJncylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldEFyZyhtWzFdLCBtWzJdKVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJnLm1hdGNoKG5lZ2F0ZWRCb29sZWFuKSAmJiBjb25maWd1cmF0aW9uWydib29sZWFuLW5lZ2F0aW9uJ10pIHtcbiAgICAgIGtleSA9IGFyZy5tYXRjaChuZWdhdGVkQm9vbGVhbilbMV1cbiAgICAgIHNldEFyZyhrZXksIGZhbHNlKVxuXG4gICAgLy8gLS0gc2VwZXJhdGVkIGJ5IHNwYWNlLlxuICAgIH0gZWxzZSBpZiAoYXJnLm1hdGNoKC9eLS0uKy8pIHx8IChcbiAgICAgICFjb25maWd1cmF0aW9uWydzaG9ydC1vcHRpb24tZ3JvdXBzJ10gJiYgYXJnLm1hdGNoKC9eLVteLV0rLylcbiAgICApKSB7XG4gICAgICBrZXkgPSBhcmcubWF0Y2goL14tLT8oLispLylbMV1cblxuICAgICAgLy8gbmFyZ3MgZm9ybWF0ID0gJy0tZm9vIGEgYiBjJ1xuICAgICAgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLm5hcmdzKSkge1xuICAgICAgICBpID0gZWF0TmFyZ3MoaSwga2V5LCBhcmdzKVxuICAgICAgLy8gYXJyYXkgZm9ybWF0ID0gJy0tZm9vIGEgYiBjJ1xuICAgICAgfSBlbHNlIGlmIChjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5hcnJheXMpICYmIGFyZ3MubGVuZ3RoID4gaSArIDEpIHtcbiAgICAgICAgaSA9IGVhdEFycmF5KGksIGtleSwgYXJncylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHQgPSBmbGFncy5uYXJnc1trZXldID09PSAwID8gdW5kZWZpbmVkIDogYXJnc1tpICsgMV1cblxuICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkICYmICghbmV4dC5tYXRjaCgvXi0vKSB8fFxuICAgICAgICAgIG5leHQubWF0Y2gobmVnYXRpdmUpKSAmJlxuICAgICAgICAgICFjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5ib29scykgJiZcbiAgICAgICAgICAhY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuY291bnRzKSkge1xuICAgICAgICAgIHNldEFyZyhrZXksIG5leHQpXG4gICAgICAgICAgaSsrXG4gICAgICAgIH0gZWxzZSBpZiAoL14odHJ1ZXxmYWxzZSkkLy50ZXN0KG5leHQpKSB7XG4gICAgICAgICAgc2V0QXJnKGtleSwgbmV4dClcbiAgICAgICAgICBpKytcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRBcmcoa2V5LCBkZWZhdWx0VmFsdWUoa2V5KSlcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgLy8gZG90LW5vdGF0aW9uIGZsYWcgc2VwZXJhdGVkIGJ5ICc9Jy5cbiAgICB9IGVsc2UgaWYgKGFyZy5tYXRjaCgvXi0uXFwuLis9LykpIHtcbiAgICAgIG0gPSBhcmcubWF0Y2goL14tKFtePV0rKT0oW1xcc1xcU10qKSQvKVxuICAgICAgc2V0QXJnKG1bMV0sIG1bMl0pXG5cbiAgICAvLyBkb3Qtbm90YXRpb24gZmxhZyBzZXBlcmF0ZWQgYnkgc3BhY2UuXG4gICAgfSBlbHNlIGlmIChhcmcubWF0Y2goL14tLlxcLi4rLykpIHtcbiAgICAgIG5leHQgPSBhcmdzW2kgKyAxXVxuICAgICAga2V5ID0gYXJnLm1hdGNoKC9eLSguXFwuLispLylbMV1cblxuICAgICAgaWYgKG5leHQgIT09IHVuZGVmaW5lZCAmJiAhbmV4dC5tYXRjaCgvXi0vKSAmJlxuICAgICAgICAhY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuYm9vbHMpICYmXG4gICAgICAgICFjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5jb3VudHMpKSB7XG4gICAgICAgIHNldEFyZyhrZXksIG5leHQpXG4gICAgICAgIGkrK1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0QXJnKGtleSwgZGVmYXVsdFZhbHVlKGtleSkpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcmcubWF0Y2goL14tW14tXSsvKSAmJiAhYXJnLm1hdGNoKG5lZ2F0aXZlKSkge1xuICAgICAgbGV0dGVycyA9IGFyZy5zbGljZSgxLCAtMSkuc3BsaXQoJycpXG4gICAgICBicm9rZW4gPSBmYWxzZVxuXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxldHRlcnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbmV4dCA9IGFyZy5zbGljZShqICsgMilcblxuICAgICAgICBpZiAobGV0dGVyc1tqICsgMV0gJiYgbGV0dGVyc1tqICsgMV0gPT09ICc9Jykge1xuICAgICAgICAgIHZhbHVlID0gYXJnLnNsaWNlKGogKyAzKVxuICAgICAgICAgIGtleSA9IGxldHRlcnNbal1cblxuICAgICAgICAgIC8vIG5hcmdzIGZvcm1hdCA9ICctZj1tb25rZXkgd2FzaGluZyBjYXQnXG4gICAgICAgICAgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLm5hcmdzKSkge1xuICAgICAgICAgICAgYXJncy5zcGxpY2UoaSArIDEsIDAsIHZhbHVlKVxuICAgICAgICAgICAgaSA9IGVhdE5hcmdzKGksIGtleSwgYXJncylcbiAgICAgICAgICAvLyBhcnJheSBmb3JtYXQgPSAnLWY9YSBiIGMnXG4gICAgICAgICAgfSBlbHNlIGlmIChjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5hcnJheXMpICYmIGFyZ3MubGVuZ3RoID4gaSArIDEpIHtcbiAgICAgICAgICAgIGFyZ3Muc3BsaWNlKGkgKyAxLCAwLCB2YWx1ZSlcbiAgICAgICAgICAgIGkgPSBlYXRBcnJheShpLCBrZXksIGFyZ3MpXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldEFyZyhrZXksIHZhbHVlKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyb2tlbiA9IHRydWVcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG5leHQgPT09ICctJykge1xuICAgICAgICAgIHNldEFyZyhsZXR0ZXJzW2pdLCBuZXh0KVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyBjdXJyZW50IGxldHRlciBpcyBhbiBhbHBoYWJldGljIGNoYXJhY3RlciBhbmQgbmV4dCB2YWx1ZSBpcyBhIG51bWJlclxuICAgICAgICBpZiAoL1tBLVphLXpdLy50ZXN0KGxldHRlcnNbal0pICYmXG4gICAgICAgICAgL14tP1xcZCsoXFwuXFxkKik/KGUtP1xcZCspPyQvLnRlc3QobmV4dCkpIHtcbiAgICAgICAgICBzZXRBcmcobGV0dGVyc1tqXSwgbmV4dClcbiAgICAgICAgICBicm9rZW4gPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZXR0ZXJzW2ogKyAxXSAmJiBsZXR0ZXJzW2ogKyAxXS5tYXRjaCgvXFxXLykpIHtcbiAgICAgICAgICBzZXRBcmcobGV0dGVyc1tqXSwgbmV4dClcbiAgICAgICAgICBicm9rZW4gPSB0cnVlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRBcmcobGV0dGVyc1tqXSwgZGVmYXVsdFZhbHVlKGxldHRlcnNbal0pKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGtleSA9IGFyZy5zbGljZSgtMSlbMF1cblxuICAgICAgaWYgKCFicm9rZW4gJiYga2V5ICE9PSAnLScpIHtcbiAgICAgICAgLy8gbmFyZ3MgZm9ybWF0ID0gJy1mIGEgYiBjJ1xuICAgICAgICBpZiAoY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MubmFyZ3MpKSB7XG4gICAgICAgICAgaSA9IGVhdE5hcmdzKGksIGtleSwgYXJncylcbiAgICAgICAgLy8gYXJyYXkgZm9ybWF0ID0gJy1mIGEgYiBjJ1xuICAgICAgICB9IGVsc2UgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmFycmF5cykgJiYgYXJncy5sZW5ndGggPiBpICsgMSkge1xuICAgICAgICAgIGkgPSBlYXRBcnJheShpLCBrZXksIGFyZ3MpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCA9IGFyZ3NbaSArIDFdXG5cbiAgICAgICAgICBpZiAobmV4dCAhPT0gdW5kZWZpbmVkICYmICghL14oLXwtLSlbXi1dLy50ZXN0KG5leHQpIHx8XG4gICAgICAgICAgICBuZXh0Lm1hdGNoKG5lZ2F0aXZlKSkgJiZcbiAgICAgICAgICAgICFjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5ib29scykgJiZcbiAgICAgICAgICAgICFjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5jb3VudHMpKSB7XG4gICAgICAgICAgICBzZXRBcmcoa2V5LCBuZXh0KVxuICAgICAgICAgICAgaSsrXG4gICAgICAgICAgfSBlbHNlIGlmICgvXih0cnVlfGZhbHNlKSQvLnRlc3QobmV4dCkpIHtcbiAgICAgICAgICAgIHNldEFyZyhrZXksIG5leHQpXG4gICAgICAgICAgICBpKytcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0QXJnKGtleSwgZGVmYXVsdFZhbHVlKGtleSkpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcmcgPT09ICctLScpIHtcbiAgICAgIG5vdEZsYWdzID0gYXJncy5zbGljZShpICsgMSlcbiAgICAgIGJyZWFrXG4gICAgfSBlbHNlIGlmIChjb25maWd1cmF0aW9uWydoYWx0LWF0LW5vbi1vcHRpb24nXSkge1xuICAgICAgbm90RmxhZ3MgPSBhcmdzLnNsaWNlKGkpXG4gICAgICBicmVha1xuICAgIH0gZWxzZSB7XG4gICAgICBhcmd2Ll8ucHVzaChtYXliZUNvZXJjZU51bWJlcignXycsIGFyZykpXG4gICAgfVxuICB9XG5cbiAgLy8gb3JkZXIgb2YgcHJlY2VkZW5jZTpcbiAgLy8gMS4gY29tbWFuZCBsaW5lIGFyZ1xuICAvLyAyLiB2YWx1ZSBmcm9tIGVudiB2YXJcbiAgLy8gMy4gdmFsdWUgZnJvbSBjb25maWcgZmlsZVxuICAvLyA0LiB2YWx1ZSBmcm9tIGNvbmZpZyBvYmplY3RzXG4gIC8vIDUuIGNvbmZpZ3VyZWQgZGVmYXVsdCB2YWx1ZVxuICBhcHBseUVudlZhcnMoYXJndiwgdHJ1ZSkgLy8gc3BlY2lhbCBjYXNlOiBjaGVjayBlbnYgdmFycyB0aGF0IHBvaW50IHRvIGNvbmZpZyBmaWxlXG4gIGFwcGx5RW52VmFycyhhcmd2LCBmYWxzZSlcbiAgc2V0Q29uZmlnKGFyZ3YpXG4gIHNldENvbmZpZ09iamVjdHMoKVxuICBhcHBseURlZmF1bHRzQW5kQWxpYXNlcyhhcmd2LCBmbGFncy5hbGlhc2VzLCBkZWZhdWx0cylcbiAgYXBwbHlDb2VyY2lvbnMoYXJndilcbiAgaWYgKGNvbmZpZ3VyYXRpb25bJ3NldC1wbGFjZWhvbGRlci1rZXknXSkgc2V0UGxhY2Vob2xkZXJLZXlzKGFyZ3YpXG5cbiAgLy8gZm9yIGFueSBjb3VudHMgZWl0aGVyIG5vdCBpbiBhcmdzIG9yIHdpdGhvdXQgYW4gZXhwbGljaXQgZGVmYXVsdCwgc2V0IHRvIDBcbiAgT2JqZWN0LmtleXMoZmxhZ3MuY291bnRzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoIWhhc0tleShhcmd2LCBrZXkuc3BsaXQoJy4nKSkpIHNldEFyZyhrZXksIDApXG4gIH0pXG5cbiAgLy8gJy0tJyBkZWZhdWx0cyB0byB1bmRlZmluZWQuXG4gIGlmIChub3RGbGFnc09wdGlvbiAmJiBub3RGbGFncy5sZW5ndGgpIGFyZ3Zbbm90RmxhZ3NBcmd2XSA9IFtdXG4gIG5vdEZsYWdzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGFyZ3Zbbm90RmxhZ3NBcmd2XS5wdXNoKGtleSlcbiAgfSlcblxuICBpZiAoY29uZmlndXJhdGlvblsnY2FtZWwtY2FzZS1leHBhbnNpb24nXSAmJiBjb25maWd1cmF0aW9uWydzdHJpcC1kYXNoZWQnXSkge1xuICAgIE9iamVjdC5rZXlzKGFyZ3YpLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAnLS0nICYmIGtleS5pbmNsdWRlcygnLScpKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBkZWxldGUgYXJndltrZXldXG4gICAgfSlcbiAgfVxuXG4gIGlmIChjb25maWd1cmF0aW9uWydzdHJpcC1hbGlhc2VkJ10pIHtcbiAgICAvLyBYWFggU3dpdGNoIHRvIFtdLmNvbmNhdCguLi5PYmplY3QudmFsdWVzKGFsaWFzZXMpKSBvbmNlIG5vZGUuanMgNiBpcyBkcm9wcGVkXG4gICAgO1tdLmNvbmNhdCguLi5PYmplY3Qua2V5cyhhbGlhc2VzKS5tYXAoayA9PiBhbGlhc2VzW2tdKSkuZm9yRWFjaChhbGlhcyA9PiB7XG4gICAgICBpZiAoY29uZmlndXJhdGlvblsnY2FtZWwtY2FzZS1leHBhbnNpb24nXSkge1xuICAgICAgICBkZWxldGUgYXJndlthbGlhcy5zcGxpdCgnLicpLm1hcChwcm9wID0+IGNhbWVsQ2FzZShwcm9wKSkuam9pbignLicpXVxuICAgICAgfVxuXG4gICAgICBkZWxldGUgYXJndlthbGlhc11cbiAgICB9KVxuICB9XG5cbiAgLy8gaG93IG1hbnkgYXJndW1lbnRzIHNob3VsZCB3ZSBjb25zdW1lLCBiYXNlZFxuICAvLyBvbiB0aGUgbmFyZ3Mgb3B0aW9uP1xuICBmdW5jdGlvbiBlYXROYXJncyAoaSwga2V5LCBhcmdzKSB7XG4gICAgdmFyIGlpXG4gICAgY29uc3QgdG9FYXQgPSBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5uYXJncylcblxuICAgIC8vIG5hcmdzIHdpbGwgbm90IGNvbnN1bWUgZmxhZyBhcmd1bWVudHMsIGUuZy4sIC1hYmMsIC0tZm9vLFxuICAgIC8vIGFuZCB0ZXJtaW5hdGVzIHdoZW4gb25lIGlzIG9ic2VydmVkLlxuICAgIHZhciBhdmFpbGFibGUgPSAwXG4gICAgZm9yIChpaSA9IGkgKyAxOyBpaSA8IGFyZ3MubGVuZ3RoOyBpaSsrKSB7XG4gICAgICBpZiAoIWFyZ3NbaWldLm1hdGNoKC9eLVteMC05XS8pKSBhdmFpbGFibGUrK1xuICAgICAgZWxzZSBicmVha1xuICAgIH1cblxuICAgIGlmIChhdmFpbGFibGUgPCB0b0VhdCkgZXJyb3IgPSBFcnJvcihfXygnTm90IGVub3VnaCBhcmd1bWVudHMgZm9sbG93aW5nOiAlcycsIGtleSkpXG5cbiAgICBjb25zdCBjb25zdW1lZCA9IE1hdGgubWluKGF2YWlsYWJsZSwgdG9FYXQpXG4gICAgZm9yIChpaSA9IGkgKyAxOyBpaSA8IChjb25zdW1lZCArIGkgKyAxKTsgaWkrKykge1xuICAgICAgc2V0QXJnKGtleSwgYXJnc1tpaV0pXG4gICAgfVxuXG4gICAgcmV0dXJuIChpICsgY29uc3VtZWQpXG4gIH1cblxuICAvLyBpZiBhbiBvcHRpb24gaXMgYW4gYXJyYXksIGVhdCBhbGwgbm9uLWh5cGhlbmF0ZWQgYXJndW1lbnRzXG4gIC8vIGZvbGxvd2luZyBpdC4uLiBZVU0hXG4gIC8vIGUuZy4sIC0tZm9vIGFwcGxlIGJhbmFuYSBjYXQgYmVjb21lcyBbXCJhcHBsZVwiLCBcImJhbmFuYVwiLCBcImNhdFwiXVxuICBmdW5jdGlvbiBlYXRBcnJheSAoaSwga2V5LCBhcmdzKSB7XG4gICAgdmFyIHN0YXJ0ID0gaSArIDFcbiAgICB2YXIgYXJnc1RvU2V0ID0gW11cbiAgICB2YXIgbXVsdGlwbGVBcnJheUZsYWcgPSBpID4gMFxuICAgIGZvciAodmFyIGlpID0gaSArIDE7IGlpIDwgYXJncy5sZW5ndGg7IGlpKyspIHtcbiAgICAgIGlmICgvXi0vLnRlc3QoYXJnc1tpaV0pICYmICFuZWdhdGl2ZS50ZXN0KGFyZ3NbaWldKSkge1xuICAgICAgICBpZiAoaWkgPT09IHN0YXJ0KSB7XG4gICAgICAgICAgc2V0QXJnKGtleSwgZGVmYXVsdEZvclR5cGUoJ2FycmF5JykpXG4gICAgICAgIH1cbiAgICAgICAgbXVsdGlwbGVBcnJheUZsYWcgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpID0gaWlcbiAgICAgIGFyZ3NUb1NldC5wdXNoKGFyZ3NbaWldKVxuICAgIH1cbiAgICBpZiAobXVsdGlwbGVBcnJheUZsYWcpIHtcbiAgICAgIHNldEFyZyhrZXksIGFyZ3NUb1NldC5tYXAoZnVuY3Rpb24gKGFyZykge1xuICAgICAgICByZXR1cm4gcHJvY2Vzc1ZhbHVlKGtleSwgYXJnKVxuICAgICAgfSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFyZ3NUb1NldC5mb3JFYWNoKGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgc2V0QXJnKGtleSwgYXJnKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gaVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0QXJnIChrZXksIHZhbCkge1xuICAgIHVuc2V0RGVmYXVsdGVkKGtleSlcblxuICAgIGlmICgvLS8udGVzdChrZXkpICYmIGNvbmZpZ3VyYXRpb25bJ2NhbWVsLWNhc2UtZXhwYW5zaW9uJ10pIHtcbiAgICAgIHZhciBhbGlhcyA9IGtleS5zcGxpdCgnLicpLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4gY2FtZWxDYXNlKHByb3ApXG4gICAgICB9KS5qb2luKCcuJylcbiAgICAgIGFkZE5ld0FsaWFzKGtleSwgYWxpYXMpXG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gcHJvY2Vzc1ZhbHVlKGtleSwgdmFsKVxuXG4gICAgdmFyIHNwbGl0S2V5ID0ga2V5LnNwbGl0KCcuJylcbiAgICBzZXRLZXkoYXJndiwgc3BsaXRLZXksIHZhbHVlKVxuXG4gICAgLy8gaGFuZGxlIHBvcHVsYXRpbmcgYWxpYXNlcyBvZiB0aGUgZnVsbCBrZXlcbiAgICBpZiAoZmxhZ3MuYWxpYXNlc1trZXldICYmIGZsYWdzLmFsaWFzZXNba2V5XS5mb3JFYWNoKSB7XG4gICAgICBmbGFncy5hbGlhc2VzW2tleV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICB4ID0geC5zcGxpdCgnLicpXG4gICAgICAgIHNldEtleShhcmd2LCB4LCB2YWx1ZSlcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8gaGFuZGxlIHBvcHVsYXRpbmcgYWxpYXNlcyBvZiB0aGUgZmlyc3QgZWxlbWVudCBvZiB0aGUgZG90LW5vdGF0aW9uIGtleVxuICAgIGlmIChzcGxpdEtleS5sZW5ndGggPiAxICYmIGNvbmZpZ3VyYXRpb25bJ2RvdC1ub3RhdGlvbiddKSB7XG4gICAgICA7KGZsYWdzLmFsaWFzZXNbc3BsaXRLZXlbMF1dIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHggPSB4LnNwbGl0KCcuJylcblxuICAgICAgICAvLyBleHBhbmQgYWxpYXMgd2l0aCBuZXN0ZWQgb2JqZWN0cyBpbiBrZXlcbiAgICAgICAgdmFyIGEgPSBbXS5jb25jYXQoc3BsaXRLZXkpXG4gICAgICAgIGEuc2hpZnQoKSAvLyBudWtlIHRoZSBvbGQga2V5LlxuICAgICAgICB4ID0geC5jb25jYXQoYSlcblxuICAgICAgICBzZXRLZXkoYXJndiwgeCwgdmFsdWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIFNldCBub3JtYWxpemUgZ2V0dGVyIGFuZCBzZXR0ZXIgd2hlbiBrZXkgaXMgaW4gJ25vcm1hbGl6ZScgYnV0IGlzbid0IGFuIGFycmF5XG4gICAgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLm5vcm1hbGl6ZSkgJiYgIWNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmFycmF5cykpIHtcbiAgICAgIHZhciBrZXlzID0gW2tleV0uY29uY2F0KGZsYWdzLmFsaWFzZXNba2V5XSB8fCBbXSlcbiAgICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGFyZ3YuX19kZWZpbmVTZXR0ZXJfXyhrZXksIGZ1bmN0aW9uICh2KSB7XG4gICAgICAgICAgdmFsID0gcGF0aC5ub3JtYWxpemUodilcbiAgICAgICAgfSlcblxuICAgICAgICBhcmd2Ll9fZGVmaW5lR2V0dGVyX18oa2V5LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnID8gcGF0aC5ub3JtYWxpemUodmFsKSA6IHZhbFxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhZGROZXdBbGlhcyAoa2V5LCBhbGlhcykge1xuICAgIGlmICghKGZsYWdzLmFsaWFzZXNba2V5XSAmJiBmbGFncy5hbGlhc2VzW2tleV0ubGVuZ3RoKSkge1xuICAgICAgZmxhZ3MuYWxpYXNlc1trZXldID0gW2FsaWFzXVxuICAgICAgbmV3QWxpYXNlc1thbGlhc10gPSB0cnVlXG4gICAgfVxuICAgIGlmICghKGZsYWdzLmFsaWFzZXNbYWxpYXNdICYmIGZsYWdzLmFsaWFzZXNbYWxpYXNdLmxlbmd0aCkpIHtcbiAgICAgIGFkZE5ld0FsaWFzKGFsaWFzLCBrZXkpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1ZhbHVlIChrZXksIHZhbCkge1xuICAgIC8vIHN0cmluZ3MgbWF5IGJlIHF1b3RlZCwgY2xlYW4gdGhpcyB1cCBhcyB3ZSBhc3NpZ24gdmFsdWVzLlxuICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJlxuICAgICAgKHZhbFswXSA9PT0gXCInXCIgfHwgdmFsWzBdID09PSAnXCInKSAmJlxuICAgICAgdmFsW3ZhbC5sZW5ndGggLSAxXSA9PT0gdmFsWzBdXG4gICAgKSB7XG4gICAgICB2YWwgPSB2YWwuc3Vic3RyaW5nKDEsIHZhbC5sZW5ndGggLSAxKVxuICAgIH1cblxuICAgIC8vIGhhbmRsZSBwYXJzaW5nIGJvb2xlYW4gYXJndW1lbnRzIC0tZm9vPXRydWUgLS1iYXIgZmFsc2UuXG4gICAgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmJvb2xzKSB8fCBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5jb3VudHMpKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHZhbCA9IHZhbCA9PT0gJ3RydWUnXG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gbWF5YmVDb2VyY2VOdW1iZXIoa2V5LCB2YWwpXG5cbiAgICAvLyBpbmNyZW1lbnQgYSBjb3VudCBnaXZlbiBhcyBhcmcgKGVpdGhlciBubyB2YWx1ZSBvciB2YWx1ZSBwYXJzZWQgYXMgYm9vbGVhbilcbiAgICBpZiAoY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuY291bnRzKSAmJiAoaXNVbmRlZmluZWQodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSkge1xuICAgICAgdmFsdWUgPSBpbmNyZW1lbnRcbiAgICB9XG5cbiAgICAvLyBTZXQgbm9ybWFsaXplZCB2YWx1ZSB3aGVuIGtleSBpcyBpbiAnbm9ybWFsaXplJyBhbmQgaW4gJ2FycmF5cydcbiAgICBpZiAoY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3Mubm9ybWFsaXplKSAmJiBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5hcnJheXMpKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB2YWx1ZSA9IHZhbC5tYXAocGF0aC5ub3JtYWxpemUpXG4gICAgICBlbHNlIHZhbHVlID0gcGF0aC5ub3JtYWxpemUodmFsKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIGZ1bmN0aW9uIG1heWJlQ29lcmNlTnVtYmVyIChrZXksIHZhbHVlKSB7XG4gICAgaWYgKCFjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5zdHJpbmdzKSAmJiAhY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuY29lcmNpb25zKSkge1xuICAgICAgY29uc3Qgc2hvdWxkQ29lcmNlTnVtYmVyID0gaXNOdW1iZXIodmFsdWUpICYmIGNvbmZpZ3VyYXRpb25bJ3BhcnNlLW51bWJlcnMnXSAmJiAoXG4gICAgICAgIE51bWJlci5pc1NhZmVJbnRlZ2VyKE1hdGguZmxvb3IodmFsdWUpKVxuICAgICAgKVxuICAgICAgaWYgKHNob3VsZENvZXJjZU51bWJlciB8fCAoIWlzVW5kZWZpbmVkKHZhbHVlKSAmJiBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5udW1iZXJzKSkpIHZhbHVlID0gTnVtYmVyKHZhbHVlKVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWVcbiAgfVxuXG4gIC8vIHNldCBhcmdzIGZyb20gY29uZmlnLmpzb24gZmlsZSwgdGhpcyBzaG91bGQgYmVcbiAgLy8gYXBwbGllZCBsYXN0IHNvIHRoYXQgZGVmYXVsdHMgY2FuIGJlIGFwcGxpZWQuXG4gIGZ1bmN0aW9uIHNldENvbmZpZyAoYXJndikge1xuICAgIHZhciBjb25maWdMb29rdXAgPSB7fVxuXG4gICAgLy8gZXhwYW5kIGRlZmF1bHRzL2FsaWFzZXMsIGluLWNhc2UgYW55IGhhcHBlbiB0byByZWZlcmVuY2VcbiAgICAvLyB0aGUgY29uZmlnLmpzb24gZmlsZS5cbiAgICBhcHBseURlZmF1bHRzQW5kQWxpYXNlcyhjb25maWdMb29rdXAsIGZsYWdzLmFsaWFzZXMsIGRlZmF1bHRzKVxuXG4gICAgT2JqZWN0LmtleXMoZmxhZ3MuY29uZmlncykuZm9yRWFjaChmdW5jdGlvbiAoY29uZmlnS2V5KSB7XG4gICAgICB2YXIgY29uZmlnUGF0aCA9IGFyZ3ZbY29uZmlnS2V5XSB8fCBjb25maWdMb29rdXBbY29uZmlnS2V5XVxuICAgICAgaWYgKGNvbmZpZ1BhdGgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgY29uZmlnID0gbnVsbFxuICAgICAgICAgIHZhciByZXNvbHZlZENvbmZpZ1BhdGggPSBwYXRoLnJlc29sdmUocHJvY2Vzcy5jd2QoKSwgY29uZmlnUGF0aClcblxuICAgICAgICAgIGlmICh0eXBlb2YgZmxhZ3MuY29uZmlnc1tjb25maWdLZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25maWcgPSBmbGFncy5jb25maWdzW2NvbmZpZ0tleV0ocmVzb2x2ZWRDb25maWdQYXRoKVxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICBjb25maWcgPSBlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY29uZmlnIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICAgICAgZXJyb3IgPSBjb25maWdcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZyA9IHJlcXVpcmUocmVzb2x2ZWRDb25maWdQYXRoKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHNldENvbmZpZ09iamVjdChjb25maWcpXG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgaWYgKGFyZ3ZbY29uZmlnS2V5XSkgZXJyb3IgPSBFcnJvcihfXygnSW52YWxpZCBKU09OIGNvbmZpZyBmaWxlOiAlcycsIGNvbmZpZ1BhdGgpKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHNldCBhcmdzIGZyb20gY29uZmlnIG9iamVjdC5cbiAgLy8gaXQgcmVjdXJzaXZlbHkgY2hlY2tzIG5lc3RlZCBvYmplY3RzLlxuICBmdW5jdGlvbiBzZXRDb25maWdPYmplY3QgKGNvbmZpZywgcHJldikge1xuICAgIE9iamVjdC5rZXlzKGNvbmZpZykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBjb25maWdba2V5XVxuICAgICAgdmFyIGZ1bGxLZXkgPSBwcmV2ID8gcHJldiArICcuJyArIGtleSA6IGtleVxuXG4gICAgICAvLyBpZiB0aGUgdmFsdWUgaXMgYW4gaW5uZXIgb2JqZWN0IGFuZCB3ZSBoYXZlIGRvdC1ub3RhdGlvblxuICAgICAgLy8gZW5hYmxlZCwgdHJlYXQgaW5uZXIgb2JqZWN0cyBpbiBjb25maWcgdGhlIHNhbWUgYXNcbiAgICAgIC8vIGhlYXZpbHkgbmVzdGVkIGRvdCBub3RhdGlvbnMgKGZvby5iYXIuYXBwbGUpLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgIT09IG51bGwgJiYgIUFycmF5LmlzQXJyYXkodmFsdWUpICYmIGNvbmZpZ3VyYXRpb25bJ2RvdC1ub3RhdGlvbiddKSB7XG4gICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBhbiBvYmplY3QgYnV0IG5vdCBhbiBhcnJheSwgY2hlY2sgbmVzdGVkIG9iamVjdFxuICAgICAgICBzZXRDb25maWdPYmplY3QodmFsdWUsIGZ1bGxLZXkpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBzZXR0aW5nIGFyZ3VtZW50cyB2aWEgQ0xJIHRha2VzIHByZWNlZGVuY2Ugb3ZlclxuICAgICAgICAvLyB2YWx1ZXMgd2l0aGluIHRoZSBjb25maWcgZmlsZS5cbiAgICAgICAgaWYgKCFoYXNLZXkoYXJndiwgZnVsbEtleS5zcGxpdCgnLicpKSB8fCAoZmxhZ3MuZGVmYXVsdGVkW2Z1bGxLZXldKSB8fCAoZmxhZ3MuYXJyYXlzW2Z1bGxLZXldICYmIGNvbmZpZ3VyYXRpb25bJ2NvbWJpbmUtYXJyYXlzJ10pKSB7XG4gICAgICAgICAgc2V0QXJnKGZ1bGxLZXksIHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8vIHNldCBhbGwgY29uZmlnIG9iamVjdHMgcGFzc2VkIGluIG9wdHNcbiAgZnVuY3Rpb24gc2V0Q29uZmlnT2JqZWN0cyAoKSB7XG4gICAgaWYgKHR5cGVvZiBjb25maWdPYmplY3RzID09PSAndW5kZWZpbmVkJykgcmV0dXJuXG4gICAgY29uZmlnT2JqZWN0cy5mb3JFYWNoKGZ1bmN0aW9uIChjb25maWdPYmplY3QpIHtcbiAgICAgIHNldENvbmZpZ09iamVjdChjb25maWdPYmplY3QpXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5RW52VmFycyAoYXJndiwgY29uZmlnT25seSkge1xuICAgIGlmICh0eXBlb2YgZW52UHJlZml4ID09PSAndW5kZWZpbmVkJykgcmV0dXJuXG5cbiAgICB2YXIgcHJlZml4ID0gdHlwZW9mIGVudlByZWZpeCA9PT0gJ3N0cmluZycgPyBlbnZQcmVmaXggOiAnJ1xuICAgIE9iamVjdC5rZXlzKHByb2Nlc3MuZW52KS5mb3JFYWNoKGZ1bmN0aW9uIChlbnZWYXIpIHtcbiAgICAgIGlmIChwcmVmaXggPT09ICcnIHx8IGVudlZhci5sYXN0SW5kZXhPZihwcmVmaXgsIDApID09PSAwKSB7XG4gICAgICAgIC8vIGdldCBhcnJheSBvZiBuZXN0ZWQga2V5cyBhbmQgY29udmVydCB0aGVtIHRvIGNhbWVsIGNhc2VcbiAgICAgICAgdmFyIGtleXMgPSBlbnZWYXIuc3BsaXQoJ19fJykubWFwKGZ1bmN0aW9uIChrZXksIGkpIHtcbiAgICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAga2V5ID0ga2V5LnN1YnN0cmluZyhwcmVmaXgubGVuZ3RoKVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gY2FtZWxDYXNlKGtleSlcbiAgICAgICAgfSlcblxuICAgICAgICBpZiAoKChjb25maWdPbmx5ICYmIGZsYWdzLmNvbmZpZ3Nba2V5cy5qb2luKCcuJyldKSB8fCAhY29uZmlnT25seSkgJiYgKCFoYXNLZXkoYXJndiwga2V5cykgfHwgZmxhZ3MuZGVmYXVsdGVkW2tleXMuam9pbignLicpXSkpIHtcbiAgICAgICAgICBzZXRBcmcoa2V5cy5qb2luKCcuJyksIHByb2Nlc3MuZW52W2VudlZhcl0pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlDb2VyY2lvbnMgKGFyZ3YpIHtcbiAgICB2YXIgY29lcmNlXG4gICAgdmFyIGFwcGxpZWQgPSB7fVxuICAgIE9iamVjdC5rZXlzKGFyZ3YpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFhcHBsaWVkLmhhc093blByb3BlcnR5KGtleSkpIHsgLy8gSWYgd2UgaGF2ZW4ndCBhbHJlYWR5IGNvZXJjZWQgdGhpcyBvcHRpb24gdmlhIG9uZSBvZiBpdHMgYWxpYXNlc1xuICAgICAgICBjb2VyY2UgPSBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5jb2VyY2lvbnMpXG4gICAgICAgIGlmICh0eXBlb2YgY29lcmNlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGNvZXJjZShhcmd2W2tleV0pXG4gICAgICAgICAgICA7KFtdLmNvbmNhdChmbGFncy5hbGlhc2VzW2tleV0gfHwgW10sIGtleSkpLmZvckVhY2goYWxpID0+IHtcbiAgICAgICAgICAgICAgYXBwbGllZFthbGldID0gYXJndlthbGldID0gdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBlcnJvciA9IGVyclxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBzZXRQbGFjZWhvbGRlcktleXMgKGFyZ3YpIHtcbiAgICBmbGFncy5rZXlzLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgLy8gZG9uJ3Qgc2V0IHBsYWNlaG9sZGVyIGtleXMgZm9yIGRvdCBub3RhdGlvbiBvcHRpb25zICdmb28uYmFyJy5cbiAgICAgIGlmICh+a2V5LmluZGV4T2YoJy4nKSkgcmV0dXJuXG4gICAgICBpZiAodHlwZW9mIGFyZ3Zba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIGFyZ3Zba2V5XSA9IHVuZGVmaW5lZFxuICAgIH0pXG4gICAgcmV0dXJuIGFyZ3ZcbiAgfVxuXG4gIGZ1bmN0aW9uIGFwcGx5RGVmYXVsdHNBbmRBbGlhc2VzIChvYmosIGFsaWFzZXMsIGRlZmF1bHRzKSB7XG4gICAgT2JqZWN0LmtleXMoZGVmYXVsdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgaWYgKCFoYXNLZXkob2JqLCBrZXkuc3BsaXQoJy4nKSkpIHtcbiAgICAgICAgc2V0S2V5KG9iaiwga2V5LnNwbGl0KCcuJyksIGRlZmF1bHRzW2tleV0pXG5cbiAgICAgICAgOyhhbGlhc2VzW2tleV0gfHwgW10pLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICBpZiAoaGFzS2V5KG9iaiwgeC5zcGxpdCgnLicpKSkgcmV0dXJuXG4gICAgICAgICAgc2V0S2V5KG9iaiwgeC5zcGxpdCgnLicpLCBkZWZhdWx0c1trZXldKVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICBmdW5jdGlvbiBoYXNLZXkgKG9iaiwga2V5cykge1xuICAgIHZhciBvID0gb2JqXG5cbiAgICBpZiAoIWNvbmZpZ3VyYXRpb25bJ2RvdC1ub3RhdGlvbiddKSBrZXlzID0gW2tleXMuam9pbignLicpXVxuXG4gICAga2V5cy5zbGljZSgwLCAtMSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBvID0gKG9ba2V5XSB8fCB7fSlcbiAgICB9KVxuXG4gICAgdmFyIGtleSA9IGtleXNba2V5cy5sZW5ndGggLSAxXVxuXG4gICAgaWYgKHR5cGVvZiBvICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlXG4gICAgZWxzZSByZXR1cm4ga2V5IGluIG9cbiAgfVxuXG4gIGZ1bmN0aW9uIHNldEtleSAob2JqLCBrZXlzLCB2YWx1ZSkge1xuICAgIHZhciBvID0gb2JqXG5cbiAgICBpZiAoIWNvbmZpZ3VyYXRpb25bJ2RvdC1ub3RhdGlvbiddKSBrZXlzID0gW2tleXMuam9pbignLicpXVxuXG4gICAga2V5cy5zbGljZSgwLCAtMSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5LCBpbmRleCkge1xuICAgICAgLy8gVE9ETyhiY29lKTogaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiB5YXJncywgc3dpdGNoIHRvXG4gICAgICAvLyBPYmplY3QuY3JlYXRlKG51bGwpIGZvciBkb3Qgbm90YXRpb246XG4gICAgICBrZXkgPSBzYW5pdGl6ZUtleShrZXkpXG5cbiAgICAgIGlmICh0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgb1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb1trZXldID0ge31cbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBvW2tleV0gIT09ICdvYmplY3QnIHx8IEFycmF5LmlzQXJyYXkob1trZXldKSkge1xuICAgICAgICAvLyBlbnN1cmUgdGhhdCBvW2tleV0gaXMgYW4gYXJyYXksIGFuZCB0aGF0IHRoZSBsYXN0IGl0ZW0gaXMgYW4gZW1wdHkgb2JqZWN0LlxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShvW2tleV0pKSB7XG4gICAgICAgICAgb1trZXldLnB1c2goe30pXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgb1trZXldID0gW29ba2V5XSwge31dXG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZSB3YW50IHRvIHVwZGF0ZSB0aGUgZW1wdHkgb2JqZWN0IGF0IHRoZSBlbmQgb2YgdGhlIG9ba2V5XSBhcnJheSwgc28gc2V0IG8gdG8gdGhhdCBvYmplY3RcbiAgICAgICAgbyA9IG9ba2V5XVtvW2tleV0ubGVuZ3RoIC0gMV1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG8gPSBvW2tleV1cbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gVE9ETyhiY29lKTogaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiB5YXJncywgc3dpdGNoIHRvXG4gICAgLy8gT2JqZWN0LmNyZWF0ZShudWxsKSBmb3IgZG90IG5vdGF0aW9uOlxuICAgIGNvbnN0IGtleSA9IHNhbml0aXplS2V5KGtleXNba2V5cy5sZW5ndGggLSAxXSlcblxuICAgIGNvbnN0IGlzVHlwZUFycmF5ID0gY2hlY2tBbGxBbGlhc2VzKGtleXMuam9pbignLicpLCBmbGFncy5hcnJheXMpXG4gICAgY29uc3QgaXNWYWx1ZUFycmF5ID0gQXJyYXkuaXNBcnJheSh2YWx1ZSlcbiAgICBsZXQgZHVwbGljYXRlID0gY29uZmlndXJhdGlvblsnZHVwbGljYXRlLWFyZ3VtZW50cy1hcnJheSddXG5cbiAgICAvLyBuYXJncyBoYXMgaGlnaGVyIHByaW9yaXR5IHRoYW4gZHVwbGljYXRlXG4gICAgaWYgKCFkdXBsaWNhdGUgJiYgY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MubmFyZ3MpKSB7XG4gICAgICBkdXBsaWNhdGUgPSB0cnVlXG4gICAgICBpZiAoKCFpc1VuZGVmaW5lZChvW2tleV0pICYmIGZsYWdzLm5hcmdzW2tleV0gPT09IDEpIHx8IChBcnJheS5pc0FycmF5KG9ba2V5XSkgJiYgb1trZXldLmxlbmd0aCA9PT0gZmxhZ3MubmFyZ3Nba2V5XSkpIHtcbiAgICAgICAgb1trZXldID0gdW5kZWZpbmVkXG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZhbHVlID09PSBpbmNyZW1lbnQpIHtcbiAgICAgIG9ba2V5XSA9IGluY3JlbWVudChvW2tleV0pXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG9ba2V5XSkpIHtcbiAgICAgIGlmIChkdXBsaWNhdGUgJiYgaXNUeXBlQXJyYXkgJiYgaXNWYWx1ZUFycmF5KSB7XG4gICAgICAgIG9ba2V5XSA9IGNvbmZpZ3VyYXRpb25bJ2ZsYXR0ZW4tZHVwbGljYXRlLWFycmF5cyddID8gb1trZXldLmNvbmNhdCh2YWx1ZSkgOiAoQXJyYXkuaXNBcnJheShvW2tleV1bMF0pID8gb1trZXldIDogW29ba2V5XV0pLmNvbmNhdChbdmFsdWVdKVxuICAgICAgfSBlbHNlIGlmICghZHVwbGljYXRlICYmIEJvb2xlYW4oaXNUeXBlQXJyYXkpID09PSBCb29sZWFuKGlzVmFsdWVBcnJheSkpIHtcbiAgICAgICAgb1trZXldID0gdmFsdWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9ba2V5XSA9IG9ba2V5XS5jb25jYXQoW3ZhbHVlXSlcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9ba2V5XSA9PT0gdW5kZWZpbmVkICYmIGlzVHlwZUFycmF5KSB7XG4gICAgICBvW2tleV0gPSBpc1ZhbHVlQXJyYXkgPyB2YWx1ZSA6IFt2YWx1ZV1cbiAgICB9IGVsc2UgaWYgKGR1cGxpY2F0ZSAmJiAhKG9ba2V5XSA9PT0gdW5kZWZpbmVkIHx8IGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmJvb2xzKSB8fCBjaGVja0FsbEFsaWFzZXMoa2V5cy5qb2luKCcuJyksIGZsYWdzLmJvb2xzKSB8fCBjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5jb3VudHMpKSkge1xuICAgICAgb1trZXldID0gWyBvW2tleV0sIHZhbHVlIF1cbiAgICB9IGVsc2Uge1xuICAgICAgb1trZXldID0gdmFsdWVcbiAgICB9XG4gIH1cblxuICAvLyBleHRlbmQgdGhlIGFsaWFzZXMgbGlzdCB3aXRoIGluZmVycmVkIGFsaWFzZXMuXG4gIGZ1bmN0aW9uIGV4dGVuZEFsaWFzZXMgKC4uLmFyZ3MpIHtcbiAgICBhcmdzLmZvckVhY2goZnVuY3Rpb24gKG9iaikge1xuICAgICAgT2JqZWN0LmtleXMob2JqIHx8IHt9KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgLy8gc2hvcnQtY2lyY3VpdCBpZiB3ZSd2ZSBhbHJlYWR5IGFkZGVkIGEga2V5XG4gICAgICAgIC8vIHRvIHRoZSBhbGlhc2VzIGFycmF5LCBmb3IgZXhhbXBsZSBpdCBtaWdodFxuICAgICAgICAvLyBleGlzdCBpbiBib3RoICdvcHRzLmRlZmF1bHQnIGFuZCAnb3B0cy5rZXknLlxuICAgICAgICBpZiAoZmxhZ3MuYWxpYXNlc1trZXldKSByZXR1cm5cblxuICAgICAgICBmbGFncy5hbGlhc2VzW2tleV0gPSBbXS5jb25jYXQoYWxpYXNlc1trZXldIHx8IFtdKVxuICAgICAgICAvLyBGb3IgXCItLW9wdGlvbi1uYW1lXCIsIGFsc28gc2V0IGFyZ3Yub3B0aW9uTmFtZVxuICAgICAgICBmbGFncy5hbGlhc2VzW2tleV0uY29uY2F0KGtleSkuZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIGlmICgvLS8udGVzdCh4KSAmJiBjb25maWd1cmF0aW9uWydjYW1lbC1jYXNlLWV4cGFuc2lvbiddKSB7XG4gICAgICAgICAgICB2YXIgYyA9IGNhbWVsQ2FzZSh4KVxuICAgICAgICAgICAgaWYgKGMgIT09IGtleSAmJiBmbGFncy5hbGlhc2VzW2tleV0uaW5kZXhPZihjKSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgZmxhZ3MuYWxpYXNlc1trZXldLnB1c2goYylcbiAgICAgICAgICAgICAgbmV3QWxpYXNlc1tjXSA9IHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIC8vIEZvciBcIi0tb3B0aW9uTmFtZVwiLCBhbHNvIHNldCBhcmd2WydvcHRpb24tbmFtZSddXG4gICAgICAgIGZsYWdzLmFsaWFzZXNba2V5XS5jb25jYXQoa2V5KS5mb3JFYWNoKGZ1bmN0aW9uICh4KSB7XG4gICAgICAgICAgaWYgKHgubGVuZ3RoID4gMSAmJiAvW0EtWl0vLnRlc3QoeCkgJiYgY29uZmlndXJhdGlvblsnY2FtZWwtY2FzZS1leHBhbnNpb24nXSkge1xuICAgICAgICAgICAgdmFyIGMgPSBkZWNhbWVsaXplKHgsICctJylcbiAgICAgICAgICAgIGlmIChjICE9PSBrZXkgJiYgZmxhZ3MuYWxpYXNlc1trZXldLmluZGV4T2YoYykgPT09IC0xKSB7XG4gICAgICAgICAgICAgIGZsYWdzLmFsaWFzZXNba2V5XS5wdXNoKGMpXG4gICAgICAgICAgICAgIG5ld0FsaWFzZXNbY10gPSB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICBmbGFncy5hbGlhc2VzW2tleV0uZm9yRWFjaChmdW5jdGlvbiAoeCkge1xuICAgICAgICAgIGZsYWdzLmFsaWFzZXNbeF0gPSBba2V5XS5jb25jYXQoZmxhZ3MuYWxpYXNlc1trZXldLmZpbHRlcihmdW5jdGlvbiAoeSkge1xuICAgICAgICAgICAgcmV0dXJuIHggIT09IHlcbiAgICAgICAgICB9KSlcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8vIGNoZWNrIGlmIGEgZmxhZyBpcyBzZXQgZm9yIGFueSBvZiBhIGtleSdzIGFsaWFzZXMuXG4gIGZ1bmN0aW9uIGNoZWNrQWxsQWxpYXNlcyAoa2V5LCBmbGFnKSB7XG4gICAgdmFyIGlzU2V0ID0gZmFsc2VcbiAgICB2YXIgdG9DaGVjayA9IFtdLmNvbmNhdChmbGFncy5hbGlhc2VzW2tleV0gfHwgW10sIGtleSlcblxuICAgIHRvQ2hlY2suZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBpZiAoZmxhZ1trZXldKSBpc1NldCA9IGZsYWdba2V5XVxuICAgIH0pXG5cbiAgICByZXR1cm4gaXNTZXRcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldERlZmF1bHRlZCAoa2V5KSB7XG4gICAgW10uY29uY2F0KGZsYWdzLmFsaWFzZXNba2V5XSB8fCBbXSwga2V5KS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7XG4gICAgICBmbGFncy5kZWZhdWx0ZWRba10gPSB0cnVlXG4gICAgfSlcbiAgfVxuXG4gIGZ1bmN0aW9uIHVuc2V0RGVmYXVsdGVkIChrZXkpIHtcbiAgICBbXS5jb25jYXQoZmxhZ3MuYWxpYXNlc1trZXldIHx8IFtdLCBrZXkpLmZvckVhY2goZnVuY3Rpb24gKGspIHtcbiAgICAgIGRlbGV0ZSBmbGFncy5kZWZhdWx0ZWRba11cbiAgICB9KVxuICB9XG5cbiAgLy8gbWFrZSBhIGJlc3QgZWZmb3IgdG8gcGljayBhIGRlZmF1bHQgdmFsdWVcbiAgLy8gZm9yIGFuIG9wdGlvbiBiYXNlZCBvbiBuYW1lIGFuZCB0eXBlLlxuICBmdW5jdGlvbiBkZWZhdWx0VmFsdWUgKGtleSkge1xuICAgIGlmICghY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MuYm9vbHMpICYmXG4gICAgICAgICFjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5jb3VudHMpICYmXG4gICAgICAgIGAke2tleX1gIGluIGRlZmF1bHRzKSB7XG4gICAgICByZXR1cm4gZGVmYXVsdHNba2V5XVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGVmYXVsdEZvclR5cGUoZ3Vlc3NUeXBlKGtleSkpXG4gICAgfVxuICB9XG5cbiAgLy8gcmV0dXJuIGEgZGVmYXVsdCB2YWx1ZSwgZ2l2ZW4gdGhlIHR5cGUgb2YgYSBmbGFnLixcbiAgLy8gZS5nLiwga2V5IG9mIHR5cGUgJ3N0cmluZycgd2lsbCBkZWZhdWx0IHRvICcnLCByYXRoZXIgdGhhbiAndHJ1ZScuXG4gIGZ1bmN0aW9uIGRlZmF1bHRGb3JUeXBlICh0eXBlKSB7XG4gICAgdmFyIGRlZiA9IHtcbiAgICAgIGJvb2xlYW46IHRydWUsXG4gICAgICBzdHJpbmc6ICcnLFxuICAgICAgbnVtYmVyOiB1bmRlZmluZWQsXG4gICAgICBhcnJheTogW11cbiAgICB9XG5cbiAgICByZXR1cm4gZGVmW3R5cGVdXG4gIH1cblxuICAvLyBnaXZlbiBhIGZsYWcsIGVuZm9yY2UgYSBkZWZhdWx0IHR5cGUuXG4gIGZ1bmN0aW9uIGd1ZXNzVHlwZSAoa2V5KSB7XG4gICAgdmFyIHR5cGUgPSAnYm9vbGVhbidcblxuICAgIGlmIChjaGVja0FsbEFsaWFzZXMoa2V5LCBmbGFncy5zdHJpbmdzKSkgdHlwZSA9ICdzdHJpbmcnXG4gICAgZWxzZSBpZiAoY2hlY2tBbGxBbGlhc2VzKGtleSwgZmxhZ3MubnVtYmVycykpIHR5cGUgPSAnbnVtYmVyJ1xuICAgIGVsc2UgaWYgKGNoZWNrQWxsQWxpYXNlcyhrZXksIGZsYWdzLmFycmF5cykpIHR5cGUgPSAnYXJyYXknXG5cbiAgICByZXR1cm4gdHlwZVxuICB9XG5cbiAgZnVuY3Rpb24gaXNOdW1iZXIgKHgpIHtcbiAgICBpZiAoeCA9PT0gbnVsbCB8fCB4ID09PSB1bmRlZmluZWQpIHJldHVybiBmYWxzZVxuICAgIC8vIGlmIGxvYWRlZCBmcm9tIGNvbmZpZywgbWF5IGFscmVhZHkgYmUgYSBudW1iZXIuXG4gICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykgcmV0dXJuIHRydWVcbiAgICAvLyBoZXhhZGVjaW1hbC5cbiAgICBpZiAoL14weFswLTlhLWZdKyQvaS50ZXN0KHgpKSByZXR1cm4gdHJ1ZVxuICAgIC8vIGRvbid0IHRyZWF0IDAxMjMgYXMgYSBudW1iZXI7IGFzIGl0IGRyb3BzIHRoZSBsZWFkaW5nICcwJy5cbiAgICBpZiAoeC5sZW5ndGggPiAxICYmIHhbMF0gPT09ICcwJykgcmV0dXJuIGZhbHNlXG4gICAgcmV0dXJuIC9eWy1dPyg/OlxcZCsoPzpcXC5cXGQqKT98XFwuXFxkKykoZVstK10/XFxkKyk/JC8udGVzdCh4KVxuICB9XG5cbiAgZnVuY3Rpb24gaXNVbmRlZmluZWQgKG51bSkge1xuICAgIHJldHVybiBudW0gPT09IHVuZGVmaW5lZFxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBhcmd2OiBhcmd2LFxuICAgIGVycm9yOiBlcnJvcixcbiAgICBhbGlhc2VzOiBmbGFncy5hbGlhc2VzLFxuICAgIG5ld0FsaWFzZXM6IG5ld0FsaWFzZXMsXG4gICAgY29uZmlndXJhdGlvbjogY29uZmlndXJhdGlvblxuICB9XG59XG5cbi8vIGlmIGFueSBhbGlhc2VzIHJlZmVyZW5jZSBlYWNoIG90aGVyLCB3ZSBzaG91bGRcbi8vIG1lcmdlIHRoZW0gdG9nZXRoZXIuXG5mdW5jdGlvbiBjb21iaW5lQWxpYXNlcyAoYWxpYXNlcykge1xuICB2YXIgYWxpYXNBcnJheXMgPSBbXVxuICB2YXIgY2hhbmdlID0gdHJ1ZVxuICB2YXIgY29tYmluZWQgPSB7fVxuXG4gIC8vIHR1cm4gYWxpYXMgbG9va3VwIGhhc2gge2tleTogWydhbGlhczEnLCAnYWxpYXMyJ119IGludG9cbiAgLy8gYSBzaW1wbGUgYXJyYXkgWydrZXknLCAnYWxpYXMxJywgJ2FsaWFzMiddXG4gIE9iamVjdC5rZXlzKGFsaWFzZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIGFsaWFzQXJyYXlzLnB1c2goXG4gICAgICBbXS5jb25jYXQoYWxpYXNlc1trZXldLCBrZXkpXG4gICAgKVxuICB9KVxuXG4gIC8vIGNvbWJpbmUgYXJyYXlzIHVudGlsIHplcm8gY2hhbmdlcyBhcmVcbiAgLy8gbWFkZSBpbiBhbiBpdGVyYXRpb24uXG4gIHdoaWxlIChjaGFuZ2UpIHtcbiAgICBjaGFuZ2UgPSBmYWxzZVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYWxpYXNBcnJheXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAodmFyIGlpID0gaSArIDE7IGlpIDwgYWxpYXNBcnJheXMubGVuZ3RoOyBpaSsrKSB7XG4gICAgICAgIHZhciBpbnRlcnNlY3QgPSBhbGlhc0FycmF5c1tpXS5maWx0ZXIoZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICByZXR1cm4gYWxpYXNBcnJheXNbaWldLmluZGV4T2YodikgIT09IC0xXG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYgKGludGVyc2VjdC5sZW5ndGgpIHtcbiAgICAgICAgICBhbGlhc0FycmF5c1tpXSA9IGFsaWFzQXJyYXlzW2ldLmNvbmNhdChhbGlhc0FycmF5c1tpaV0pXG4gICAgICAgICAgYWxpYXNBcnJheXMuc3BsaWNlKGlpLCAxKVxuICAgICAgICAgIGNoYW5nZSA9IHRydWVcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gbWFwIGFycmF5cyBiYWNrIHRvIHRoZSBoYXNoLWxvb2t1cCAoZGUtZHVwZSB3aGlsZVxuICAvLyB3ZSdyZSBhdCBpdCkuXG4gIGFsaWFzQXJyYXlzLmZvckVhY2goZnVuY3Rpb24gKGFsaWFzQXJyYXkpIHtcbiAgICBhbGlhc0FycmF5ID0gYWxpYXNBcnJheS5maWx0ZXIoZnVuY3Rpb24gKHYsIGksIHNlbGYpIHtcbiAgICAgIHJldHVybiBzZWxmLmluZGV4T2YodikgPT09IGlcbiAgICB9KVxuICAgIGNvbWJpbmVkW2FsaWFzQXJyYXkucG9wKCldID0gYWxpYXNBcnJheVxuICB9KVxuXG4gIHJldHVybiBjb21iaW5lZFxufVxuXG4vLyB0aGlzIGZ1bmN0aW9uIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuIGEgY291bnQgaXMgZ2l2ZW4gYXMgYW4gYXJnXG4vLyBpdCBpcyBOT1QgY2FsbGVkIHRvIHNldCBhIGRlZmF1bHQgdmFsdWVcbi8vIHRodXMgd2UgY2FuIHN0YXJ0IHRoZSBjb3VudCBhdCAxIGluc3RlYWQgb2YgMFxuZnVuY3Rpb24gaW5jcmVtZW50IChvcmlnKSB7XG4gIHJldHVybiBvcmlnICE9PSB1bmRlZmluZWQgPyBvcmlnICsgMSA6IDFcbn1cblxuZnVuY3Rpb24gUGFyc2VyIChhcmdzLCBvcHRzKSB7XG4gIHZhciByZXN1bHQgPSBwYXJzZShhcmdzLnNsaWNlKCksIG9wdHMpXG5cbiAgcmV0dXJuIHJlc3VsdC5hcmd2XG59XG5cbi8vIHBhcnNlIGFyZ3VtZW50cyBhbmQgcmV0dXJuIGRldGFpbGVkXG4vLyBtZXRhIGluZm9ybWF0aW9uLCBhbGlhc2VzLCBldGMuXG5QYXJzZXIuZGV0YWlsZWQgPSBmdW5jdGlvbiAoYXJncywgb3B0cykge1xuICByZXR1cm4gcGFyc2UoYXJncy5zbGljZSgpLCBvcHRzKVxufVxuXG4vLyBUT0RPKGJjb2UpOiBpbiB0aGUgbmV4dCBtYWpvciB2ZXJzaW9uIG9mIHlhcmdzLCBzd2l0Y2ggdG9cbi8vIE9iamVjdC5jcmVhdGUobnVsbCkgZm9yIGRvdCBub3RhdGlvbjpcbmZ1bmN0aW9uIHNhbml0aXplS2V5IChrZXkpIHtcbiAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycpIHJldHVybiAnX19fcHJvdG9fX18nXG4gIHJldHVybiBrZXlcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQYXJzZXJcbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHN0ciwgc2VwKSB7XG5cdGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGEgc3RyaW5nJyk7XG5cdH1cblxuXHRzZXAgPSB0eXBlb2Ygc2VwID09PSAndW5kZWZpbmVkJyA/ICdfJyA6IHNlcDtcblxuXHRyZXR1cm4gc3RyXG5cdFx0LnJlcGxhY2UoLyhbYS16XFxkXSkoW0EtWl0pL2csICckMScgKyBzZXAgKyAnJDInKVxuXHRcdC5yZXBsYWNlKC8oW0EtWl0rKShbQS1aXVthLXpcXGRdKykvZywgJyQxJyArIHNlcCArICckMicpXG5cdFx0LnRvTG93ZXJDYXNlKCk7XG59O1xuIiwiLy8gdGFrZSBhbiB1bi1zcGxpdCBhcmd2IHN0cmluZyBhbmQgdG9rZW5pemUgaXQuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChhcmdTdHJpbmcpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJnU3RyaW5nKSkge1xuICAgIHJldHVybiBhcmdTdHJpbmcubWFwKGUgPT4gdHlwZW9mIGUgIT09ICdzdHJpbmcnID8gZSArICcnIDogZSlcbiAgfVxuXG4gIGFyZ1N0cmluZyA9IGFyZ1N0cmluZy50cmltKClcblxuICB2YXIgaSA9IDBcbiAgdmFyIHByZXZDID0gbnVsbFxuICB2YXIgYyA9IG51bGxcbiAgdmFyIG9wZW5pbmcgPSBudWxsXG4gIHZhciBhcmdzID0gW11cblxuICBmb3IgKHZhciBpaSA9IDA7IGlpIDwgYXJnU3RyaW5nLmxlbmd0aDsgaWkrKykge1xuICAgIHByZXZDID0gY1xuICAgIGMgPSBhcmdTdHJpbmcuY2hhckF0KGlpKVxuXG4gICAgLy8gc3BsaXQgb24gc3BhY2VzIHVubGVzcyB3ZSdyZSBpbiBxdW90ZXMuXG4gICAgaWYgKGMgPT09ICcgJyAmJiAhb3BlbmluZykge1xuICAgICAgaWYgKCEocHJldkMgPT09ICcgJykpIHtcbiAgICAgICAgaSsrXG4gICAgICB9XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIC8vIGRvbid0IHNwbGl0IHRoZSBzdHJpbmcgaWYgd2UncmUgaW4gbWF0Y2hpbmdcbiAgICAvLyBvcGVuaW5nIG9yIGNsb3Npbmcgc2luZ2xlIGFuZCBkb3VibGUgcXVvdGVzLlxuICAgIGlmIChjID09PSBvcGVuaW5nKSB7XG4gICAgICBvcGVuaW5nID0gbnVsbFxuICAgIH0gZWxzZSBpZiAoKGMgPT09IFwiJ1wiIHx8IGMgPT09ICdcIicpICYmICFvcGVuaW5nKSB7XG4gICAgICBvcGVuaW5nID0gY1xuICAgIH1cblxuICAgIGlmICghYXJnc1tpXSkgYXJnc1tpXSA9ICcnXG4gICAgYXJnc1tpXSArPSBjXG4gIH1cblxuICByZXR1cm4gYXJnc1xufVxuIiwidmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodGFyZ2V0W2tleV0sIG9wdGlvbnMpO1xuXHRcdH0pO1xuXHR9XG5cdE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAoIW9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pIHx8ICF0YXJnZXRba2V5XSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxuZXhwb3J0IGRlZmF1bHQgZGVlcG1lcmdlXzE7XG4iLCJjb25zdCBBTElBUyA9IFN5bWJvbC5mb3IoJ3lhbWwuYWxpYXMnKTtcbmNvbnN0IERPQyA9IFN5bWJvbC5mb3IoJ3lhbWwuZG9jdW1lbnQnKTtcbmNvbnN0IE1BUCA9IFN5bWJvbC5mb3IoJ3lhbWwubWFwJyk7XG5jb25zdCBQQUlSID0gU3ltYm9sLmZvcigneWFtbC5wYWlyJyk7XG5jb25zdCBTQ0FMQVIgPSBTeW1ib2wuZm9yKCd5YW1sLnNjYWxhcicpO1xuY29uc3QgU0VRID0gU3ltYm9sLmZvcigneWFtbC5zZXEnKTtcbmNvbnN0IE5PREVfVFlQRSA9IFN5bWJvbC5mb3IoJ3lhbWwubm9kZS50eXBlJyk7XG5jb25zdCBpc0FsaWFzID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBBTElBUztcbmNvbnN0IGlzRG9jdW1lbnQgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IERPQztcbmNvbnN0IGlzTWFwID0gKG5vZGUpID0+ICEhbm9kZSAmJiB0eXBlb2Ygbm9kZSA9PT0gJ29iamVjdCcgJiYgbm9kZVtOT0RFX1RZUEVdID09PSBNQVA7XG5jb25zdCBpc1BhaXIgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFBBSVI7XG5jb25zdCBpc1NjYWxhciA9IChub2RlKSA9PiAhIW5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnICYmIG5vZGVbTk9ERV9UWVBFXSA9PT0gU0NBTEFSO1xuY29uc3QgaXNTZXEgPSAobm9kZSkgPT4gISFub2RlICYmIHR5cGVvZiBub2RlID09PSAnb2JqZWN0JyAmJiBub2RlW05PREVfVFlQRV0gPT09IFNFUTtcbmZ1bmN0aW9uIGlzQ29sbGVjdGlvbihub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2FzZSBNQVA6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzTm9kZShub2RlKSB7XG4gICAgaWYgKG5vZGUgJiYgdHlwZW9mIG5vZGUgPT09ICdvYmplY3QnKVxuICAgICAgICBzd2l0Y2ggKG5vZGVbTk9ERV9UWVBFXSkge1xuICAgICAgICAgICAgY2FzZSBBTElBUzpcbiAgICAgICAgICAgIGNhc2UgTUFQOlxuICAgICAgICAgICAgY2FzZSBTQ0FMQVI6XG4gICAgICAgICAgICBjYXNlIFNFUTpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmNvbnN0IGhhc0FuY2hvciA9IChub2RlKSA9PiAoaXNTY2FsYXIobm9kZSkgfHwgaXNDb2xsZWN0aW9uKG5vZGUpKSAmJiAhIW5vZGUuYW5jaG9yO1xuXG5leHBvcnQgeyBBTElBUywgRE9DLCBNQVAsIE5PREVfVFlQRSwgUEFJUiwgU0NBTEFSLCBTRVEsIGhhc0FuY2hvciwgaXNBbGlhcywgaXNDb2xsZWN0aW9uLCBpc0RvY3VtZW50LCBpc01hcCwgaXNOb2RlLCBpc1BhaXIsIGlzU2NhbGFyLCBpc1NlcSB9O1xuIiwiaW1wb3J0IHsgaXNEb2N1bWVudCwgaXNOb2RlLCBpc1BhaXIsIGlzQ29sbGVjdGlvbiwgaXNNYXAsIGlzU2VxLCBpc1NjYWxhciwgaXNBbGlhcyB9IGZyb20gJy4vbm9kZXMvaWRlbnRpdHkuanMnO1xuXG5jb25zdCBCUkVBSyA9IFN5bWJvbCgnYnJlYWsgdmlzaXQnKTtcbmNvbnN0IFNLSVAgPSBTeW1ib2woJ3NraXAgY2hpbGRyZW4nKTtcbmNvbnN0IFJFTU9WRSA9IFN5bWJvbCgncmVtb3ZlIG5vZGUnKTtcbi8qKlxuICogQXBwbHkgYSB2aXNpdG9yIHRvIGFuIEFTVCBub2RlIG9yIGRvY3VtZW50LlxuICpcbiAqIFdhbGtzIHRocm91Z2ggdGhlIHRyZWUgKGRlcHRoLWZpcnN0KSBzdGFydGluZyBmcm9tIGBub2RlYCwgY2FsbGluZyBhXG4gKiBgdmlzaXRvcmAgZnVuY3Rpb24gd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gKiAgIC0gYGtleWA6IEZvciBzZXF1ZW5jZSB2YWx1ZXMgYW5kIG1hcCBgUGFpcmAsIHRoZSBub2RlJ3MgaW5kZXggaW4gdGhlXG4gKiAgICAgY29sbGVjdGlvbi4gV2l0aGluIGEgYFBhaXJgLCBgJ2tleSdgIG9yIGAndmFsdWUnYCwgY29ycmVzcG9uZGluZ2x5LlxuICogICAgIGBudWxsYCBmb3IgdGhlIHJvb3Qgbm9kZS5cbiAqICAgLSBgbm9kZWA6IFRoZSBjdXJyZW50IG5vZGUuXG4gKiAgIC0gYHBhdGhgOiBUaGUgYW5jZXN0cnkgb2YgdGhlIGN1cnJlbnQgbm9kZS5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSB2aXNpdG9yIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHRyYXZlcnNhbDpcbiAqICAgLSBgdW5kZWZpbmVkYCAoZGVmYXVsdCk6IERvIG5vdGhpbmcgYW5kIGNvbnRpbnVlXG4gKiAgIC0gYHZpc2l0LlNLSVBgOiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoaXMgbm9kZSwgY29udGludWUgd2l0aCBuZXh0XG4gKiAgICAgc2libGluZ1xuICogICAtIGB2aXNpdC5CUkVBS2A6IFRlcm1pbmF0ZSB0cmF2ZXJzYWwgY29tcGxldGVseVxuICogICAtIGB2aXNpdC5SRU1PVkVgOiBSZW1vdmUgdGhlIGN1cnJlbnQgbm9kZSwgdGhlbiBjb250aW51ZSB3aXRoIHRoZSBuZXh0IG9uZVxuICogICAtIGBOb2RlYDogUmVwbGFjZSB0aGUgY3VycmVudCBub2RlLCB0aGVuIGNvbnRpbnVlIGJ5IHZpc2l0aW5nIGl0XG4gKiAgIC0gYG51bWJlcmA6IFdoaWxlIGl0ZXJhdGluZyB0aGUgaXRlbXMgb2YgYSBzZXF1ZW5jZSBvciBtYXAsIHNldCB0aGUgaW5kZXhcbiAqICAgICBvZiB0aGUgbmV4dCBzdGVwLiBUaGlzIGlzIHVzZWZ1bCBlc3BlY2lhbGx5IGlmIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudFxuICogICAgIG5vZGUgaGFzIGNoYW5nZWQuXG4gKlxuICogSWYgYHZpc2l0b3JgIGlzIGEgc2luZ2xlIGZ1bmN0aW9uLCBpdCB3aWxsIGJlIGNhbGxlZCB3aXRoIGFsbCB2YWx1ZXNcbiAqIGVuY291bnRlcmVkIGluIHRoZSB0cmVlLCBpbmNsdWRpbmcgZS5nLiBgbnVsbGAgdmFsdWVzLiBBbHRlcm5hdGl2ZWx5LFxuICogc2VwYXJhdGUgdmlzaXRvciBmdW5jdGlvbnMgbWF5IGJlIGRlZmluZWQgZm9yIGVhY2ggYE1hcGAsIGBQYWlyYCwgYFNlcWAsXG4gKiBgQWxpYXNgIGFuZCBgU2NhbGFyYCBub2RlLiBUbyBkZWZpbmUgdGhlIHNhbWUgdmlzaXRvciBmdW5jdGlvbiBmb3IgbW9yZSB0aGFuXG4gKiBvbmUgbm9kZSB0eXBlLCB1c2UgdGhlIGBDb2xsZWN0aW9uYCAobWFwIGFuZCBzZXEpLCBgVmFsdWVgIChtYXAsIHNlcSAmIHNjYWxhcilcbiAqIGFuZCBgTm9kZWAgKGFsaWFzLCBtYXAsIHNlcSAmIHNjYWxhcikgdGFyZ2V0cy4gT2YgYWxsIHRoZXNlLCBvbmx5IHRoZSBtb3N0XG4gKiBzcGVjaWZpYyBkZWZpbmVkIG9uZSB3aWxsIGJlIHVzZWQgZm9yIGVhY2ggbm9kZS5cbiAqL1xuZnVuY3Rpb24gdmlzaXQobm9kZSwgdmlzaXRvcikge1xuICAgIGNvbnN0IHZpc2l0b3JfID0gaW5pdFZpc2l0b3IodmlzaXRvcik7XG4gICAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICAgY29uc3QgY2QgPSB2aXNpdF8obnVsbCwgbm9kZS5jb250ZW50cywgdmlzaXRvcl8sIE9iamVjdC5mcmVlemUoW25vZGVdKSk7XG4gICAgICAgIGlmIChjZCA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgbm9kZS5jb250ZW50cyA9IG51bGw7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgdmlzaXRfKG51bGwsIG5vZGUsIHZpc2l0b3JfLCBPYmplY3QuZnJlZXplKFtdKSk7XG59XG4vLyBXaXRob3V0IHRoZSBgYXMgc3ltYm9sYCBjYXN0cywgVFMgZGVjbGFyZXMgdGhlc2UgaW4gdGhlIGB2aXNpdGBcbi8vIG5hbWVzcGFjZSB1c2luZyBgdmFyYCwgYnV0IHRoZW4gY29tcGxhaW5zIGFib3V0IHRoYXQgYmVjYXVzZVxuLy8gYHVuaXF1ZSBzeW1ib2xgIG11c3QgYmUgYGNvbnN0YC5cbi8qKiBUZXJtaW5hdGUgdmlzaXQgdHJhdmVyc2FsIGNvbXBsZXRlbHkgKi9cbnZpc2l0LkJSRUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBub2RlICovXG52aXNpdC5TS0lQID0gU0tJUDtcbi8qKiBSZW1vdmUgdGhlIGN1cnJlbnQgbm9kZSAqL1xudmlzaXQuUkVNT1ZFID0gUkVNT1ZFO1xuZnVuY3Rpb24gdmlzaXRfKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgIGNvbnN0IGN0cmwgPSBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpO1xuICAgIGlmIChpc05vZGUoY3RybCkgfHwgaXNQYWlyKGN0cmwpKSB7XG4gICAgICAgIHJlcGxhY2VOb2RlKGtleSwgcGF0aCwgY3RybCk7XG4gICAgICAgIHJldHVybiB2aXNpdF8oa2V5LCBjdHJsLCB2aXNpdG9yLCBwYXRoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjdHJsICE9PSAnc3ltYm9sJykge1xuICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKG5vZGUpKSB7XG4gICAgICAgICAgICBwYXRoID0gT2JqZWN0LmZyZWV6ZShwYXRoLmNvbmNhdChub2RlKSk7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGUuaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaSA9IHZpc2l0XyhpLCBub2RlLml0ZW1zW2ldLCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNpID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgaSA9IGNpIC0gMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCUkVBSztcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gUkVNT1ZFKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vZGUuaXRlbXMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBpIC09IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGFpcihub2RlKSkge1xuICAgICAgICAgICAgcGF0aCA9IE9iamVjdC5mcmVlemUocGF0aC5jb25jYXQobm9kZSkpO1xuICAgICAgICAgICAgY29uc3QgY2sgPSB2aXNpdF8oJ2tleScsIG5vZGUua2V5LCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjayA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2sgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLmtleSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjdiA9IHZpc2l0XygndmFsdWUnLCBub2RlLnZhbHVlLCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjdiA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY3YgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLnZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY3RybDtcbn1cbi8qKlxuICogQXBwbHkgYW4gYXN5bmMgdmlzaXRvciB0byBhbiBBU1Qgbm9kZSBvciBkb2N1bWVudC5cbiAqXG4gKiBXYWxrcyB0aHJvdWdoIHRoZSB0cmVlIChkZXB0aC1maXJzdCkgc3RhcnRpbmcgZnJvbSBgbm9kZWAsIGNhbGxpbmcgYVxuICogYHZpc2l0b3JgIGZ1bmN0aW9uIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogICAtIGBrZXlgOiBGb3Igc2VxdWVuY2UgdmFsdWVzIGFuZCBtYXAgYFBhaXJgLCB0aGUgbm9kZSdzIGluZGV4IGluIHRoZVxuICogICAgIGNvbGxlY3Rpb24uIFdpdGhpbiBhIGBQYWlyYCwgYCdrZXknYCBvciBgJ3ZhbHVlJ2AsIGNvcnJlc3BvbmRpbmdseS5cbiAqICAgICBgbnVsbGAgZm9yIHRoZSByb290IG5vZGUuXG4gKiAgIC0gYG5vZGVgOiBUaGUgY3VycmVudCBub2RlLlxuICogICAtIGBwYXRoYDogVGhlIGFuY2VzdHJ5IG9mIHRoZSBjdXJyZW50IG5vZGUuXG4gKlxuICogVGhlIHJldHVybiB2YWx1ZSBvZiB0aGUgdmlzaXRvciBtYXkgYmUgdXNlZCB0byBjb250cm9sIHRoZSB0cmF2ZXJzYWw6XG4gKiAgIC0gYFByb21pc2VgOiBNdXN0IHJlc29sdmUgdG8gb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzXG4gKiAgIC0gYHVuZGVmaW5lZGAgKGRlZmF1bHQpOiBEbyBub3RoaW5nIGFuZCBjb250aW51ZVxuICogICAtIGB2aXNpdC5TS0lQYDogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUsIGNvbnRpbnVlIHdpdGggbmV4dFxuICogICAgIHNpYmxpbmdcbiAqICAgLSBgdmlzaXQuQlJFQUtgOiBUZXJtaW5hdGUgdHJhdmVyc2FsIGNvbXBsZXRlbHlcbiAqICAgLSBgdmlzaXQuUkVNT1ZFYDogUmVtb3ZlIHRoZSBjdXJyZW50IG5vZGUsIHRoZW4gY29udGludWUgd2l0aCB0aGUgbmV4dCBvbmVcbiAqICAgLSBgTm9kZWA6IFJlcGxhY2UgdGhlIGN1cnJlbnQgbm9kZSwgdGhlbiBjb250aW51ZSBieSB2aXNpdGluZyBpdFxuICogICAtIGBudW1iZXJgOiBXaGlsZSBpdGVyYXRpbmcgdGhlIGl0ZW1zIG9mIGEgc2VxdWVuY2Ugb3IgbWFwLCBzZXQgdGhlIGluZGV4XG4gKiAgICAgb2YgdGhlIG5leHQgc3RlcC4gVGhpcyBpcyB1c2VmdWwgZXNwZWNpYWxseSBpZiB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnRcbiAqICAgICBub2RlIGhhcyBjaGFuZ2VkLlxuICpcbiAqIElmIGB2aXNpdG9yYCBpcyBhIHNpbmdsZSBmdW5jdGlvbiwgaXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbGwgdmFsdWVzXG4gKiBlbmNvdW50ZXJlZCBpbiB0aGUgdHJlZSwgaW5jbHVkaW5nIGUuZy4gYG51bGxgIHZhbHVlcy4gQWx0ZXJuYXRpdmVseSxcbiAqIHNlcGFyYXRlIHZpc2l0b3IgZnVuY3Rpb25zIG1heSBiZSBkZWZpbmVkIGZvciBlYWNoIGBNYXBgLCBgUGFpcmAsIGBTZXFgLFxuICogYEFsaWFzYCBhbmQgYFNjYWxhcmAgbm9kZS4gVG8gZGVmaW5lIHRoZSBzYW1lIHZpc2l0b3IgZnVuY3Rpb24gZm9yIG1vcmUgdGhhblxuICogb25lIG5vZGUgdHlwZSwgdXNlIHRoZSBgQ29sbGVjdGlvbmAgKG1hcCBhbmQgc2VxKSwgYFZhbHVlYCAobWFwLCBzZXEgJiBzY2FsYXIpXG4gKiBhbmQgYE5vZGVgIChhbGlhcywgbWFwLCBzZXEgJiBzY2FsYXIpIHRhcmdldHMuIE9mIGFsbCB0aGVzZSwgb25seSB0aGUgbW9zdFxuICogc3BlY2lmaWMgZGVmaW5lZCBvbmUgd2lsbCBiZSB1c2VkIGZvciBlYWNoIG5vZGUuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHZpc2l0QXN5bmMobm9kZSwgdmlzaXRvcikge1xuICAgIGNvbnN0IHZpc2l0b3JfID0gaW5pdFZpc2l0b3IodmlzaXRvcik7XG4gICAgaWYgKGlzRG9jdW1lbnQobm9kZSkpIHtcbiAgICAgICAgY29uc3QgY2QgPSBhd2FpdCB2aXNpdEFzeW5jXyhudWxsLCBub2RlLmNvbnRlbnRzLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbbm9kZV0pKTtcbiAgICAgICAgaWYgKGNkID09PSBSRU1PVkUpXG4gICAgICAgICAgICBub2RlLmNvbnRlbnRzID0gbnVsbDtcbiAgICB9XG4gICAgZWxzZVxuICAgICAgICBhd2FpdCB2aXNpdEFzeW5jXyhudWxsLCBub2RlLCB2aXNpdG9yXywgT2JqZWN0LmZyZWV6ZShbXSkpO1xufVxuLy8gV2l0aG91dCB0aGUgYGFzIHN5bWJvbGAgY2FzdHMsIFRTIGRlY2xhcmVzIHRoZXNlIGluIHRoZSBgdmlzaXRgXG4vLyBuYW1lc3BhY2UgdXNpbmcgYHZhcmAsIGJ1dCB0aGVuIGNvbXBsYWlucyBhYm91dCB0aGF0IGJlY2F1c2Vcbi8vIGB1bmlxdWUgc3ltYm9sYCBtdXN0IGJlIGBjb25zdGAuXG4vKiogVGVybWluYXRlIHZpc2l0IHRyYXZlcnNhbCBjb21wbGV0ZWx5ICovXG52aXNpdEFzeW5jLkJSRUFLID0gQlJFQUs7XG4vKiogRG8gbm90IHZpc2l0IHRoZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCBub2RlICovXG52aXNpdEFzeW5jLlNLSVAgPSBTS0lQO1xuLyoqIFJlbW92ZSB0aGUgY3VycmVudCBub2RlICovXG52aXNpdEFzeW5jLlJFTU9WRSA9IFJFTU9WRTtcbmFzeW5jIGZ1bmN0aW9uIHZpc2l0QXN5bmNfKGtleSwgbm9kZSwgdmlzaXRvciwgcGF0aCkge1xuICAgIGNvbnN0IGN0cmwgPSBhd2FpdCBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpO1xuICAgIGlmIChpc05vZGUoY3RybCkgfHwgaXNQYWlyKGN0cmwpKSB7XG4gICAgICAgIHJlcGxhY2VOb2RlKGtleSwgcGF0aCwgY3RybCk7XG4gICAgICAgIHJldHVybiB2aXNpdEFzeW5jXyhrZXksIGN0cmwsIHZpc2l0b3IsIHBhdGgpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGN0cmwgIT09ICdzeW1ib2wnKSB7XG4gICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGggPSBPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpID0gYXdhaXQgdmlzaXRBc3luY18oaSwgbm9kZS5pdGVtc1tpXSwgdmlzaXRvciwgcGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjaSA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICAgICAgICAgIGkgPSBjaSAtIDE7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IEJSRUFLKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2kgPT09IFJFTU9WRSkge1xuICAgICAgICAgICAgICAgICAgICBub2RlLml0ZW1zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BhaXIobm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGggPSBPYmplY3QuZnJlZXplKHBhdGguY29uY2F0KG5vZGUpKTtcbiAgICAgICAgICAgIGNvbnN0IGNrID0gYXdhaXQgdmlzaXRBc3luY18oJ2tleScsIG5vZGUua2V5LCB2aXNpdG9yLCBwYXRoKTtcbiAgICAgICAgICAgIGlmIChjayA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgcmV0dXJuIEJSRUFLO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2sgPT09IFJFTU9WRSlcbiAgICAgICAgICAgICAgICBub2RlLmtleSA9IG51bGw7XG4gICAgICAgICAgICBjb25zdCBjdiA9IGF3YWl0IHZpc2l0QXN5bmNfKCd2YWx1ZScsIG5vZGUudmFsdWUsIHZpc2l0b3IsIHBhdGgpO1xuICAgICAgICAgICAgaWYgKGN2ID09PSBCUkVBSylcbiAgICAgICAgICAgICAgICByZXR1cm4gQlJFQUs7XG4gICAgICAgICAgICBlbHNlIGlmIChjdiA9PT0gUkVNT1ZFKVxuICAgICAgICAgICAgICAgIG5vZGUudmFsdWUgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjdHJsO1xufVxuZnVuY3Rpb24gaW5pdFZpc2l0b3IodmlzaXRvcikge1xuICAgIGlmICh0eXBlb2YgdmlzaXRvciA9PT0gJ29iamVjdCcgJiZcbiAgICAgICAgKHZpc2l0b3IuQ29sbGVjdGlvbiB8fCB2aXNpdG9yLk5vZGUgfHwgdmlzaXRvci5WYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgQWxpYXM6IHZpc2l0b3IuTm9kZSxcbiAgICAgICAgICAgIE1hcDogdmlzaXRvci5Ob2RlLFxuICAgICAgICAgICAgU2NhbGFyOiB2aXNpdG9yLk5vZGUsXG4gICAgICAgICAgICBTZXE6IHZpc2l0b3IuTm9kZVxuICAgICAgICB9LCB2aXNpdG9yLlZhbHVlICYmIHtcbiAgICAgICAgICAgIE1hcDogdmlzaXRvci5WYWx1ZSxcbiAgICAgICAgICAgIFNjYWxhcjogdmlzaXRvci5WYWx1ZSxcbiAgICAgICAgICAgIFNlcTogdmlzaXRvci5WYWx1ZVxuICAgICAgICB9LCB2aXNpdG9yLkNvbGxlY3Rpb24gJiYge1xuICAgICAgICAgICAgTWFwOiB2aXNpdG9yLkNvbGxlY3Rpb24sXG4gICAgICAgICAgICBTZXE6IHZpc2l0b3IuQ29sbGVjdGlvblxuICAgICAgICB9LCB2aXNpdG9yKTtcbiAgICB9XG4gICAgcmV0dXJuIHZpc2l0b3I7XG59XG5mdW5jdGlvbiBjYWxsVmlzaXRvcihrZXksIG5vZGUsIHZpc2l0b3IsIHBhdGgpIHtcbiAgICBpZiAodHlwZW9mIHZpc2l0b3IgPT09ICdmdW5jdGlvbicpXG4gICAgICAgIHJldHVybiB2aXNpdG9yKGtleSwgbm9kZSwgcGF0aCk7XG4gICAgaWYgKGlzTWFwKG5vZGUpKVxuICAgICAgICByZXR1cm4gdmlzaXRvci5NYXA/LihrZXksIG5vZGUsIHBhdGgpO1xuICAgIGlmIChpc1NlcShub2RlKSlcbiAgICAgICAgcmV0dXJuIHZpc2l0b3IuU2VxPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNQYWlyKG5vZGUpKVxuICAgICAgICByZXR1cm4gdmlzaXRvci5QYWlyPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICBpZiAoaXNTY2FsYXIobm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLlNjYWxhcj8uKGtleSwgbm9kZSwgcGF0aCk7XG4gICAgaWYgKGlzQWxpYXMobm9kZSkpXG4gICAgICAgIHJldHVybiB2aXNpdG9yLkFsaWFzPy4oa2V5LCBub2RlLCBwYXRoKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuZnVuY3Rpb24gcmVwbGFjZU5vZGUoa2V5LCBwYXRoLCBub2RlKSB7XG4gICAgY29uc3QgcGFyZW50ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgIGlmIChpc0NvbGxlY3Rpb24ocGFyZW50KSkge1xuICAgICAgICBwYXJlbnQuaXRlbXNba2V5XSA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGFpcihwYXJlbnQpKSB7XG4gICAgICAgIGlmIChrZXkgPT09ICdrZXknKVxuICAgICAgICAgICAgcGFyZW50LmtleSA9IG5vZGU7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBhcmVudC52YWx1ZSA9IG5vZGU7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzRG9jdW1lbnQocGFyZW50KSkge1xuICAgICAgICBwYXJlbnQuY29udGVudHMgPSBub2RlO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgcHQgPSBpc0FsaWFzKHBhcmVudCkgPyAnYWxpYXMnIDogJ3NjYWxhcic7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IHJlcGxhY2Ugbm9kZSB3aXRoICR7cHR9IHBhcmVudGApO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgdmlzaXQsIHZpc2l0QXN5bmMgfTtcbiIsImltcG9ydCB7IGlzTm9kZSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IHZpc2l0IH0gZnJvbSAnLi4vdmlzaXQuanMnO1xuXG5jb25zdCBlc2NhcGVDaGFycyA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgICcsJzogJyUyQycsXG4gICAgJ1snOiAnJTVCJyxcbiAgICAnXSc6ICclNUQnLFxuICAgICd7JzogJyU3QicsXG4gICAgJ30nOiAnJTdEJ1xufTtcbmNvbnN0IGVzY2FwZVRhZ05hbWUgPSAodG4pID0+IHRuLnJlcGxhY2UoL1shLFtcXF17fV0vZywgY2ggPT4gZXNjYXBlQ2hhcnNbY2hdKTtcbmNsYXNzIERpcmVjdGl2ZXMge1xuICAgIGNvbnN0cnVjdG9yKHlhbWwsIHRhZ3MpIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBkaXJlY3RpdmVzLWVuZC9kb2Mtc3RhcnQgbWFya2VyIGAtLS1gLiBJZiBgbnVsbGAsIGEgbWFya2VyIG1heSBzdGlsbCBiZVxuICAgICAgICAgKiBpbmNsdWRlZCBpbiB0aGUgZG9jdW1lbnQncyBzdHJpbmdpZmllZCByZXByZXNlbnRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZG9jU3RhcnQgPSBudWxsO1xuICAgICAgICAvKiogVGhlIGRvYy1lbmQgbWFya2VyIGAuLi5gLiAgKi9cbiAgICAgICAgdGhpcy5kb2NFbmQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy55YW1sID0gT2JqZWN0LmFzc2lnbih7fSwgRGlyZWN0aXZlcy5kZWZhdWx0WWFtbCwgeWFtbCk7XG4gICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5hc3NpZ24oe30sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MsIHRhZ3MpO1xuICAgIH1cbiAgICBjbG9uZSgpIHtcbiAgICAgICAgY29uc3QgY29weSA9IG5ldyBEaXJlY3RpdmVzKHRoaXMueWFtbCwgdGhpcy50YWdzKTtcbiAgICAgICAgY29weS5kb2NTdGFydCA9IHRoaXMuZG9jU3RhcnQ7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEdXJpbmcgcGFyc2luZywgZ2V0IGEgRGlyZWN0aXZlcyBpbnN0YW5jZSBmb3IgdGhlIGN1cnJlbnQgZG9jdW1lbnQgYW5kXG4gICAgICogdXBkYXRlIHRoZSBzdHJlYW0gc3RhdGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHZlcnNpb24ncyBzcGVjLlxuICAgICAqL1xuICAgIGF0RG9jdW1lbnQoKSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IG5ldyBEaXJlY3RpdmVzKHRoaXMueWFtbCwgdGhpcy50YWdzKTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnlhbWwudmVyc2lvbikge1xuICAgICAgICAgICAgY2FzZSAnMS4xJzpcbiAgICAgICAgICAgICAgICB0aGlzLmF0TmV4dERvY3VtZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzEuMic6XG4gICAgICAgICAgICAgICAgdGhpcy5hdE5leHREb2N1bWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMueWFtbCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXhwbGljaXQ6IERpcmVjdGl2ZXMuZGVmYXVsdFlhbWwuZXhwbGljaXQsXG4gICAgICAgICAgICAgICAgICAgIHZlcnNpb246ICcxLjInXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLnRhZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBEaXJlY3RpdmVzLmRlZmF1bHRUYWdzKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gb25FcnJvciAtIE1heSBiZSBjYWxsZWQgZXZlbiBpZiB0aGUgYWN0aW9uIHdhcyBzdWNjZXNzZnVsXG4gICAgICogQHJldHVybnMgYHRydWVgIG9uIHN1Y2Nlc3NcbiAgICAgKi9cbiAgICBhZGQobGluZSwgb25FcnJvcikge1xuICAgICAgICBpZiAodGhpcy5hdE5leHREb2N1bWVudCkge1xuICAgICAgICAgICAgdGhpcy55YW1sID0geyBleHBsaWNpdDogRGlyZWN0aXZlcy5kZWZhdWx0WWFtbC5leHBsaWNpdCwgdmVyc2lvbjogJzEuMScgfTtcbiAgICAgICAgICAgIHRoaXMudGFncyA9IE9iamVjdC5hc3NpZ24oe30sIERpcmVjdGl2ZXMuZGVmYXVsdFRhZ3MpO1xuICAgICAgICAgICAgdGhpcy5hdE5leHREb2N1bWVudCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhcnRzID0gbGluZS50cmltKCkuc3BsaXQoL1sgXFx0XSsvKTtcbiAgICAgICAgY29uc3QgbmFtZSA9IHBhcnRzLnNoaWZ0KCk7XG4gICAgICAgIHN3aXRjaCAobmFtZSkge1xuICAgICAgICAgICAgY2FzZSAnJVRBRyc6IHtcbiAgICAgICAgICAgICAgICBpZiAocGFydHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IoMCwgJyVUQUcgZGlyZWN0aXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgdHdvIHBhcnRzJyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPCAyKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBbaGFuZGxlLCBwcmVmaXhdID0gcGFydHM7XG4gICAgICAgICAgICAgICAgdGhpcy50YWdzW2hhbmRsZV0gPSBwcmVmaXg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICclWUFNTCc6IHtcbiAgICAgICAgICAgICAgICB0aGlzLnlhbWwuZXhwbGljaXQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmIChwYXJ0cy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcigwLCAnJVlBTUwgZGlyZWN0aXZlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHBhcnQnKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBbdmVyc2lvbl0gPSBwYXJ0cztcbiAgICAgICAgICAgICAgICBpZiAodmVyc2lvbiA9PT0gJzEuMScgfHwgdmVyc2lvbiA9PT0gJzEuMicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy55YW1sLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSAvXlxcZCtcXC5cXGQrJC8udGVzdCh2ZXJzaW9uKTtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcig2LCBgVW5zdXBwb3J0ZWQgWUFNTCB2ZXJzaW9uICR7dmVyc2lvbn1gLCBpc1ZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgb25FcnJvcigwLCBgVW5rbm93biBkaXJlY3RpdmUgJHtuYW1lfWAsIHRydWUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlcyBhIHRhZywgbWF0Y2hpbmcgaGFuZGxlcyB0byB0aG9zZSBkZWZpbmVkIGluICVUQUcgZGlyZWN0aXZlcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIFJlc29sdmVkIHRhZywgd2hpY2ggbWF5IGFsc28gYmUgdGhlIG5vbi1zcGVjaWZpYyB0YWcgYCchJ2Agb3IgYVxuICAgICAqICAgYCchbG9jYWwnYCB0YWcsIG9yIGBudWxsYCBpZiB1bnJlc29sdmFibGUuXG4gICAgICovXG4gICAgdGFnTmFtZShzb3VyY2UsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gJyEnKVxuICAgICAgICAgICAgcmV0dXJuICchJzsgLy8gbm9uLXNwZWNpZmljIHRhZ1xuICAgICAgICBpZiAoc291cmNlWzBdICE9PSAnIScpIHtcbiAgICAgICAgICAgIG9uRXJyb3IoYE5vdCBhIHZhbGlkIHRhZzogJHtzb3VyY2V9YCk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc291cmNlWzFdID09PSAnPCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHZlcmJhdGltID0gc291cmNlLnNsaWNlKDIsIC0xKTtcbiAgICAgICAgICAgIGlmICh2ZXJiYXRpbSA9PT0gJyEnIHx8IHZlcmJhdGltID09PSAnISEnKSB7XG4gICAgICAgICAgICAgICAgb25FcnJvcihgVmVyYmF0aW0gdGFncyBhcmVuJ3QgcmVzb2x2ZWQsIHNvICR7c291cmNlfSBpcyBpbnZhbGlkLmApO1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNvdXJjZVtzb3VyY2UubGVuZ3RoIC0gMV0gIT09ICc+JylcbiAgICAgICAgICAgICAgICBvbkVycm9yKCdWZXJiYXRpbSB0YWdzIG11c3QgZW5kIHdpdGggYSA+Jyk7XG4gICAgICAgICAgICByZXR1cm4gdmVyYmF0aW07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgWywgaGFuZGxlLCBzdWZmaXhdID0gc291cmNlLm1hdGNoKC9eKC4qISkoW14hXSopJC9zKTtcbiAgICAgICAgaWYgKCFzdWZmaXgpXG4gICAgICAgICAgICBvbkVycm9yKGBUaGUgJHtzb3VyY2V9IHRhZyBoYXMgbm8gc3VmZml4YCk7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHRoaXMudGFnc1toYW5kbGVdO1xuICAgICAgICBpZiAocHJlZml4KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmVmaXggKyBkZWNvZGVVUklDb21wb25lbnQoc3VmZml4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoU3RyaW5nKGVycm9yKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZSA9PT0gJyEnKVxuICAgICAgICAgICAgcmV0dXJuIHNvdXJjZTsgLy8gbG9jYWwgdGFnXG4gICAgICAgIG9uRXJyb3IoYENvdWxkIG5vdCByZXNvbHZlIHRhZzogJHtzb3VyY2V9YCk7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIGZ1bGx5IHJlc29sdmVkIHRhZywgcmV0dXJucyBpdHMgcHJpbnRhYmxlIHN0cmluZyBmb3JtLFxuICAgICAqIHRha2luZyBpbnRvIGFjY291bnQgY3VycmVudCB0YWcgcHJlZml4ZXMgYW5kIGRlZmF1bHRzLlxuICAgICAqL1xuICAgIHRhZ1N0cmluZyh0YWcpIHtcbiAgICAgICAgZm9yIChjb25zdCBbaGFuZGxlLCBwcmVmaXhdIG9mIE9iamVjdC5lbnRyaWVzKHRoaXMudGFncykpIHtcbiAgICAgICAgICAgIGlmICh0YWcuc3RhcnRzV2l0aChwcmVmaXgpKVxuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGUgKyBlc2NhcGVUYWdOYW1lKHRhZy5zdWJzdHJpbmcocHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0YWdbMF0gPT09ICchJyA/IHRhZyA6IGAhPCR7dGFnfT5gO1xuICAgIH1cbiAgICB0b1N0cmluZyhkb2MpIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSB0aGlzLnlhbWwuZXhwbGljaXRcbiAgICAgICAgICAgID8gW2AlWUFNTCAke3RoaXMueWFtbC52ZXJzaW9uIHx8ICcxLjInfWBdXG4gICAgICAgICAgICA6IFtdO1xuICAgICAgICBjb25zdCB0YWdFbnRyaWVzID0gT2JqZWN0LmVudHJpZXModGhpcy50YWdzKTtcbiAgICAgICAgbGV0IHRhZ05hbWVzO1xuICAgICAgICBpZiAoZG9jICYmIHRhZ0VudHJpZXMubGVuZ3RoID4gMCAmJiBpc05vZGUoZG9jLmNvbnRlbnRzKSkge1xuICAgICAgICAgICAgY29uc3QgdGFncyA9IHt9O1xuICAgICAgICAgICAgdmlzaXQoZG9jLmNvbnRlbnRzLCAoX2tleSwgbm9kZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChpc05vZGUobm9kZSkgJiYgbm9kZS50YWcpXG4gICAgICAgICAgICAgICAgICAgIHRhZ3Nbbm9kZS50YWddID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGFnTmFtZXMgPSBPYmplY3Qua2V5cyh0YWdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0YWdOYW1lcyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IFtoYW5kbGUsIHByZWZpeF0gb2YgdGFnRW50cmllcykge1xuICAgICAgICAgICAgaWYgKGhhbmRsZSA9PT0gJyEhJyAmJiBwcmVmaXggPT09ICd0YWc6eWFtbC5vcmcsMjAwMjonKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCFkb2MgfHwgdGFnTmFtZXMuc29tZSh0biA9PiB0bi5zdGFydHNXaXRoKHByZWZpeCkpKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goYCVUQUcgJHtoYW5kbGV9ICR7cHJlZml4fWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICB9XG59XG5EaXJlY3RpdmVzLmRlZmF1bHRZYW1sID0geyBleHBsaWNpdDogZmFsc2UsIHZlcnNpb246ICcxLjInIH07XG5EaXJlY3RpdmVzLmRlZmF1bHRUYWdzID0geyAnISEnOiAndGFnOnlhbWwub3JnLDIwMDI6JyB9O1xuXG5leHBvcnQgeyBEaXJlY3RpdmVzIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciwgaXNDb2xsZWN0aW9uIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tICcuLi92aXNpdC5qcyc7XG5cbi8qKlxuICogVmVyaWZ5IHRoYXQgdGhlIGlucHV0IHN0cmluZyBpcyBhIHZhbGlkIGFuY2hvci5cbiAqXG4gKiBXaWxsIHRocm93IG9uIGVycm9ycy5cbiAqL1xuZnVuY3Rpb24gYW5jaG9ySXNWYWxpZChhbmNob3IpIHtcbiAgICBpZiAoL1tcXHgwMC1cXHgxOVxccyxbXFxde31dLy50ZXN0KGFuY2hvcikpIHtcbiAgICAgICAgY29uc3Qgc2EgPSBKU09OLnN0cmluZ2lmeShhbmNob3IpO1xuICAgICAgICBjb25zdCBtc2cgPSBgQW5jaG9yIG11c3Qgbm90IGNvbnRhaW4gd2hpdGVzcGFjZSBvciBjb250cm9sIGNoYXJhY3RlcnM6ICR7c2F9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gYW5jaG9yTmFtZXMocm9vdCkge1xuICAgIGNvbnN0IGFuY2hvcnMgPSBuZXcgU2V0KCk7XG4gICAgdmlzaXQocm9vdCwge1xuICAgICAgICBWYWx1ZShfa2V5LCBub2RlKSB7XG4gICAgICAgICAgICBpZiAobm9kZS5hbmNob3IpXG4gICAgICAgICAgICAgICAgYW5jaG9ycy5hZGQobm9kZS5hbmNob3IpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGFuY2hvcnM7XG59XG4vKiogRmluZCBhIG5ldyBhbmNob3IgbmFtZSB3aXRoIHRoZSBnaXZlbiBgcHJlZml4YCBhbmQgYSBvbmUtaW5kZXhlZCBzdWZmaXguICovXG5mdW5jdGlvbiBmaW5kTmV3QW5jaG9yKHByZWZpeCwgZXhjbHVkZSkge1xuICAgIGZvciAobGV0IGkgPSAxOyB0cnVlOyArK2kpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGAke3ByZWZpeH0ke2l9YDtcbiAgICAgICAgaWYgKCFleGNsdWRlLmhhcyhuYW1lKSlcbiAgICAgICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vZGVBbmNob3JzKGRvYywgcHJlZml4KSB7XG4gICAgY29uc3QgYWxpYXNPYmplY3RzID0gW107XG4gICAgY29uc3Qgc291cmNlT2JqZWN0cyA9IG5ldyBNYXAoKTtcbiAgICBsZXQgcHJldkFuY2hvcnMgPSBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICAgIG9uQW5jaG9yOiAoc291cmNlKSA9PiB7XG4gICAgICAgICAgICBhbGlhc09iamVjdHMucHVzaChzb3VyY2UpO1xuICAgICAgICAgICAgaWYgKCFwcmV2QW5jaG9ycylcbiAgICAgICAgICAgICAgICBwcmV2QW5jaG9ycyA9IGFuY2hvck5hbWVzKGRvYyk7XG4gICAgICAgICAgICBjb25zdCBhbmNob3IgPSBmaW5kTmV3QW5jaG9yKHByZWZpeCwgcHJldkFuY2hvcnMpO1xuICAgICAgICAgICAgcHJldkFuY2hvcnMuYWRkKGFuY2hvcik7XG4gICAgICAgICAgICByZXR1cm4gYW5jaG9yO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogV2l0aCBjaXJjdWxhciByZWZlcmVuY2VzLCB0aGUgc291cmNlIG5vZGUgaXMgb25seSByZXNvbHZlZCBhZnRlciBhbGxcbiAgICAgICAgICogb2YgaXRzIGNoaWxkIG5vZGVzIGFyZS4gVGhpcyBpcyB3aHkgYW5jaG9ycyBhcmUgc2V0IG9ubHkgYWZ0ZXIgYWxsIG9mXG4gICAgICAgICAqIHRoZSBub2RlcyBoYXZlIGJlZW4gY3JlYXRlZC5cbiAgICAgICAgICovXG4gICAgICAgIHNldEFuY2hvcnM6ICgpID0+IHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlIG9mIGFsaWFzT2JqZWN0cykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlZiA9IHNvdXJjZU9iamVjdHMuZ2V0KHNvdXJjZSk7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZWYgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAgICAgICAgIHJlZi5hbmNob3IgJiZcbiAgICAgICAgICAgICAgICAgICAgKGlzU2NhbGFyKHJlZi5ub2RlKSB8fCBpc0NvbGxlY3Rpb24ocmVmLm5vZGUpKSkge1xuICAgICAgICAgICAgICAgICAgICByZWYubm9kZS5hbmNob3IgPSByZWYuYW5jaG9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoJ0ZhaWxlZCB0byByZXNvbHZlIHJlcGVhdGVkIG9iamVjdCAodGhpcyBzaG91bGQgbm90IGhhcHBlbiknKTtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3Iuc291cmNlID0gc291cmNlO1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHNvdXJjZU9iamVjdHNcbiAgICB9O1xufVxuXG5leHBvcnQgeyBhbmNob3JJc1ZhbGlkLCBhbmNob3JOYW1lcywgY3JlYXRlTm9kZUFuY2hvcnMsIGZpbmROZXdBbmNob3IgfTtcbiIsIi8qKlxuICogQXBwbGllcyB0aGUgSlNPTi5wYXJzZSByZXZpdmVyIGFsZ29yaXRobSBhcyBkZWZpbmVkIGluIHRoZSBFQ01BLTI2MiBzcGVjLFxuICogaW4gc2VjdGlvbiAyNC41LjEuMSBcIlJ1bnRpbWUgU2VtYW50aWNzOiBJbnRlcm5hbGl6ZUpTT05Qcm9wZXJ0eVwiIG9mIHRoZVxuICogMjAyMSBlZGl0aW9uOiBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWpzb24ucGFyc2VcbiAqXG4gKiBJbmNsdWRlcyBleHRlbnNpb25zIGZvciBoYW5kbGluZyBNYXAgYW5kIFNldCBvYmplY3RzLlxuICovXG5mdW5jdGlvbiBhcHBseVJldml2ZXIocmV2aXZlciwgb2JqLCBrZXksIHZhbCkge1xuICAgIGlmICh2YWwgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHZhbC5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHYwID0gdmFsW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IHYxID0gYXBwbHlSZXZpdmVyKHJldml2ZXIsIHZhbCwgU3RyaW5nKGkpLCB2MCk7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1hcnJheS1kZWxldGVcbiAgICAgICAgICAgICAgICBpZiAodjEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHZhbFtpXTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApXG4gICAgICAgICAgICAgICAgICAgIHZhbFtpXSA9IHYxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrIG9mIEFycmF5LmZyb20odmFsLmtleXMoKSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2MCA9IHZhbC5nZXQoayk7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCBrLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIHZhbC5kZWxldGUoayk7XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodjEgIT09IHYwKVxuICAgICAgICAgICAgICAgICAgICB2YWwuc2V0KGssIHYxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh2YWwgaW5zdGFuY2VvZiBTZXQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdjAgb2YgQXJyYXkuZnJvbSh2YWwpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCB2MCwgdjApO1xuICAgICAgICAgICAgICAgIGlmICh2MSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgICAgICB2YWwuZGVsZXRlKHYwKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmICh2MSAhPT0gdjApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsLmRlbGV0ZSh2MCk7XG4gICAgICAgICAgICAgICAgICAgIHZhbC5hZGQodjEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2ssIHYwXSBvZiBPYmplY3QuZW50cmllcyh2YWwpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdjEgPSBhcHBseVJldml2ZXIocmV2aXZlciwgdmFsLCBrLCB2MCk7XG4gICAgICAgICAgICAgICAgaWYgKHYxID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB2YWxba107XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodjEgIT09IHYwKVxuICAgICAgICAgICAgICAgICAgICB2YWxba10gPSB2MTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmV2aXZlci5jYWxsKG9iaiwga2V5LCB2YWwpO1xufVxuXG5leHBvcnQgeyBhcHBseVJldml2ZXIgfTtcbiIsImltcG9ydCB7IGhhc0FuY2hvciB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IGNvbnZlcnQgYW55IG5vZGUgb3IgaXRzIGNvbnRlbnRzIHRvIG5hdGl2ZSBKYXZhU2NyaXB0XG4gKlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIGlucHV0IHZhbHVlXG4gKiBAcGFyYW0gYXJnIC0gSWYgYHZhbHVlYCBkZWZpbmVzIGEgYHRvSlNPTigpYCBtZXRob2QsIHVzZSB0aGlzXG4gKiAgIGFzIGl0cyBmaXJzdCBhcmd1bWVudFxuICogQHBhcmFtIGN0eCAtIENvbnZlcnNpb24gY29udGV4dCwgb3JpZ2luYWxseSBzZXQgaW4gRG9jdW1lbnQjdG9KUygpLiBJZlxuICogICBgeyBrZWVwOiB0cnVlIH1gIGlzIG5vdCBzZXQsIG91dHB1dCBzaG91bGQgYmUgc3VpdGFibGUgZm9yIEpTT05cbiAqICAgc3RyaW5naWZpY2F0aW9uLlxuICovXG5mdW5jdGlvbiB0b0pTKHZhbHVlLCBhcmcsIGN0eCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLXJldHVyblxuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlLm1hcCgodiwgaSkgPT4gdG9KUyh2LCBTdHJpbmcoaSksIGN0eCkpO1xuICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWNhbGxcbiAgICAgICAgaWYgKCFjdHggfHwgIWhhc0FuY2hvcih2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudG9KU09OKGFyZywgY3R4KTtcbiAgICAgICAgY29uc3QgZGF0YSA9IHsgYWxpYXNDb3VudDogMCwgY291bnQ6IDEsIHJlczogdW5kZWZpbmVkIH07XG4gICAgICAgIGN0eC5hbmNob3JzLnNldCh2YWx1ZSwgZGF0YSk7XG4gICAgICAgIGN0eC5vbkNyZWF0ZSA9IHJlcyA9PiB7XG4gICAgICAgICAgICBkYXRhLnJlcyA9IHJlcztcbiAgICAgICAgICAgIGRlbGV0ZSBjdHgub25DcmVhdGU7XG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IHJlcyA9IHZhbHVlLnRvSlNPTihhcmcsIGN0eCk7XG4gICAgICAgIGlmIChjdHgub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUocmVzKTtcbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgJiYgIWN0eD8ua2VlcClcbiAgICAgICAgcmV0dXJuIE51bWJlcih2YWx1ZSk7XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5leHBvcnQgeyB0b0pTIH07XG4iLCJpbXBvcnQgeyBhcHBseVJldml2ZXIgfSBmcm9tICcuLi9kb2MvYXBwbHlSZXZpdmVyLmpzJztcbmltcG9ydCB7IE5PREVfVFlQRSwgaXNEb2N1bWVudCB9IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4vdG9KUy5qcyc7XG5cbmNsYXNzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBOT0RFX1RZUEUsIHsgdmFsdWU6IHR5cGUgfSk7XG4gICAgfVxuICAgIC8qKiBDcmVhdGUgYSBjb3B5IG9mIHRoaXMgbm9kZS4gICovXG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGhpcykpO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSlcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB0aGlzLnJhbmdlLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKiogQSBwbGFpbiBKYXZhU2NyaXB0IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgbm9kZS4gKi9cbiAgICB0b0pTKGRvYywgeyBtYXBBc01hcCwgbWF4QWxpYXNDb3VudCwgb25BbmNob3IsIHJldml2ZXIgfSA9IHt9KSB7XG4gICAgICAgIGlmICghaXNEb2N1bWVudChkb2MpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBkb2N1bWVudCBhcmd1bWVudCBpcyByZXF1aXJlZCcpO1xuICAgICAgICBjb25zdCBjdHggPSB7XG4gICAgICAgICAgICBhbmNob3JzOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBkb2MsXG4gICAgICAgICAgICBrZWVwOiB0cnVlLFxuICAgICAgICAgICAgbWFwQXNNYXA6IG1hcEFzTWFwID09PSB0cnVlLFxuICAgICAgICAgICAgbWFwS2V5V2FybmVkOiBmYWxzZSxcbiAgICAgICAgICAgIG1heEFsaWFzQ291bnQ6IHR5cGVvZiBtYXhBbGlhc0NvdW50ID09PSAnbnVtYmVyJyA/IG1heEFsaWFzQ291bnQgOiAxMDBcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gdG9KUyh0aGlzLCAnJywgY3R4KTtcbiAgICAgICAgaWYgKHR5cGVvZiBvbkFuY2hvciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBjb3VudCwgcmVzIH0gb2YgY3R4LmFuY2hvcnMudmFsdWVzKCkpXG4gICAgICAgICAgICAgICAgb25BbmNob3IocmVzLCBjb3VudCk7XG4gICAgICAgIHJldHVybiB0eXBlb2YgcmV2aXZlciA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgPyBhcHBseVJldml2ZXIocmV2aXZlciwgeyAnJzogcmVzIH0sICcnLCByZXMpXG4gICAgICAgICAgICA6IHJlcztcbiAgICB9XG59XG5cbmV4cG9ydCB7IE5vZGVCYXNlIH07XG4iLCJpbXBvcnQgeyBhbmNob3JJc1ZhbGlkIH0gZnJvbSAnLi4vZG9jL2FuY2hvcnMuanMnO1xuaW1wb3J0IHsgdmlzaXQgfSBmcm9tICcuLi92aXNpdC5qcyc7XG5pbXBvcnQgeyBBTElBUywgaXNBbGlhcywgaXNDb2xsZWN0aW9uLCBpc1BhaXIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuL3RvSlMuanMnO1xuXG5jbGFzcyBBbGlhcyBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2UpIHtcbiAgICAgICAgc3VwZXIoQUxJQVMpO1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICd0YWcnLCB7XG4gICAgICAgICAgICBzZXQoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdBbGlhcyBub2RlcyBjYW5ub3QgaGF2ZSB0YWdzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXNvbHZlIHRoZSB2YWx1ZSBvZiB0aGlzIGFsaWFzIHdpdGhpbiBgZG9jYCwgZmluZGluZyB0aGUgbGFzdFxuICAgICAqIGluc3RhbmNlIG9mIHRoZSBgc291cmNlYCBhbmNob3IgYmVmb3JlIHRoaXMgbm9kZS5cbiAgICAgKi9cbiAgICByZXNvbHZlKGRvYykge1xuICAgICAgICBsZXQgZm91bmQgPSB1bmRlZmluZWQ7XG4gICAgICAgIHZpc2l0KGRvYywge1xuICAgICAgICAgICAgTm9kZTogKF9rZXksIG5vZGUpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAobm9kZSA9PT0gdGhpcylcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpc2l0LkJSRUFLO1xuICAgICAgICAgICAgICAgIGlmIChub2RlLmFuY2hvciA9PT0gdGhpcy5zb3VyY2UpXG4gICAgICAgICAgICAgICAgICAgIGZvdW5kID0gbm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmb3VuZDtcbiAgICB9XG4gICAgdG9KU09OKF9hcmcsIGN0eCkge1xuICAgICAgICBpZiAoIWN0eClcbiAgICAgICAgICAgIHJldHVybiB7IHNvdXJjZTogdGhpcy5zb3VyY2UgfTtcbiAgICAgICAgY29uc3QgeyBhbmNob3JzLCBkb2MsIG1heEFsaWFzQ291bnQgfSA9IGN0eDtcbiAgICAgICAgY29uc3Qgc291cmNlID0gdGhpcy5yZXNvbHZlKGRvYyk7XG4gICAgICAgIGlmICghc291cmNlKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgVW5yZXNvbHZlZCBhbGlhcyAodGhlIGFuY2hvciBtdXN0IGJlIHNldCBiZWZvcmUgdGhlIGFsaWFzKTogJHt0aGlzLnNvdXJjZX1gO1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGRhdGEgPSBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgICAgIC8vIFJlc29sdmUgYW5jaG9ycyBmb3IgTm9kZS5wcm90b3R5cGUudG9KUygpXG4gICAgICAgICAgICB0b0pTKHNvdXJjZSwgbnVsbCwgY3R4KTtcbiAgICAgICAgICAgIGRhdGEgPSBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICB9XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWRhdGEgfHwgZGF0YS5yZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gJ1RoaXMgc2hvdWxkIG5vdCBoYXBwZW46IEFsaWFzIGFuY2hvciB3YXMgbm90IHJlc29sdmVkPyc7XG4gICAgICAgICAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IobXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4QWxpYXNDb3VudCA+PSAwKSB7XG4gICAgICAgICAgICBkYXRhLmNvdW50ICs9IDE7XG4gICAgICAgICAgICBpZiAoZGF0YS5hbGlhc0NvdW50ID09PSAwKVxuICAgICAgICAgICAgICAgIGRhdGEuYWxpYXNDb3VudCA9IGdldEFsaWFzQ291bnQoZG9jLCBzb3VyY2UsIGFuY2hvcnMpO1xuICAgICAgICAgICAgaWYgKGRhdGEuY291bnQgKiBkYXRhLmFsaWFzQ291bnQgPiBtYXhBbGlhc0NvdW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gJ0V4Y2Vzc2l2ZSBhbGlhcyBjb3VudCBpbmRpY2F0ZXMgYSByZXNvdXJjZSBleGhhdXN0aW9uIGF0dGFjayc7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRhdGEucmVzO1xuICAgIH1cbiAgICB0b1N0cmluZyhjdHgsIF9vbkNvbW1lbnQsIF9vbkNob21wS2VlcCkge1xuICAgICAgICBjb25zdCBzcmMgPSBgKiR7dGhpcy5zb3VyY2V9YDtcbiAgICAgICAgaWYgKGN0eCkge1xuICAgICAgICAgICAgYW5jaG9ySXNWYWxpZCh0aGlzLnNvdXJjZSk7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMudmVyaWZ5QWxpYXNPcmRlciAmJiAhY3R4LmFuY2hvcnMuaGFzKHRoaXMuc291cmNlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1zZyA9IGBVbnJlc29sdmVkIGFsaWFzICh0aGUgYW5jaG9yIG11c3QgYmUgc2V0IGJlZm9yZSB0aGUgYWxpYXMpOiAke3RoaXMuc291cmNlfWA7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoY3R4LmltcGxpY2l0S2V5KVxuICAgICAgICAgICAgICAgIHJldHVybiBgJHtzcmN9IGA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNyYztcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRBbGlhc0NvdW50KGRvYywgbm9kZSwgYW5jaG9ycykge1xuICAgIGlmIChpc0FsaWFzKG5vZGUpKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IG5vZGUucmVzb2x2ZShkb2MpO1xuICAgICAgICBjb25zdCBhbmNob3IgPSBhbmNob3JzICYmIHNvdXJjZSAmJiBhbmNob3JzLmdldChzb3VyY2UpO1xuICAgICAgICByZXR1cm4gYW5jaG9yID8gYW5jaG9yLmNvdW50ICogYW5jaG9yLmFsaWFzQ291bnQgOiAwO1xuICAgIH1cbiAgICBlbHNlIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpIHtcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIG5vZGUuaXRlbXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGMgPSBnZXRBbGlhc0NvdW50KGRvYywgaXRlbSwgYW5jaG9ycyk7XG4gICAgICAgICAgICBpZiAoYyA+IGNvdW50KVxuICAgICAgICAgICAgICAgIGNvdW50ID0gYztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY291bnQ7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGFpcihub2RlKSkge1xuICAgICAgICBjb25zdCBrYyA9IGdldEFsaWFzQ291bnQoZG9jLCBub2RlLmtleSwgYW5jaG9ycyk7XG4gICAgICAgIGNvbnN0IHZjID0gZ2V0QWxpYXNDb3VudChkb2MsIG5vZGUudmFsdWUsIGFuY2hvcnMpO1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoa2MsIHZjKTtcbiAgICB9XG4gICAgcmV0dXJuIDE7XG59XG5cbmV4cG9ydCB7IEFsaWFzIH07XG4iLCJpbXBvcnQgeyBTQ0FMQVIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcbmltcG9ydCB7IHRvSlMgfSBmcm9tICcuL3RvSlMuanMnO1xuXG5jb25zdCBpc1NjYWxhclZhbHVlID0gKHZhbHVlKSA9PiAhdmFsdWUgfHwgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKTtcbmNsYXNzIFNjYWxhciBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSkge1xuICAgICAgICBzdXBlcihTQ0FMQVIpO1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIHRvSlNPTihhcmcsIGN0eCkge1xuICAgICAgICByZXR1cm4gY3R4Py5rZWVwID8gdGhpcy52YWx1ZSA6IHRvSlModGhpcy52YWx1ZSwgYXJnLCBjdHgpO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLnZhbHVlKTtcbiAgICB9XG59XG5TY2FsYXIuQkxPQ0tfRk9MREVEID0gJ0JMT0NLX0ZPTERFRCc7XG5TY2FsYXIuQkxPQ0tfTElURVJBTCA9ICdCTE9DS19MSVRFUkFMJztcblNjYWxhci5QTEFJTiA9ICdQTEFJTic7XG5TY2FsYXIuUVVPVEVfRE9VQkxFID0gJ1FVT1RFX0RPVUJMRSc7XG5TY2FsYXIuUVVPVEVfU0lOR0xFID0gJ1FVT1RFX1NJTkdMRSc7XG5cbmV4cG9ydCB7IFNjYWxhciwgaXNTY2FsYXJWYWx1ZSB9O1xuIiwiaW1wb3J0IHsgQWxpYXMgfSBmcm9tICcuLi9ub2Rlcy9BbGlhcy5qcyc7XG5pbXBvcnQgeyBpc05vZGUsIGlzUGFpciwgTUFQLCBTRVEsIGlzRG9jdW1lbnQgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5jb25zdCBkZWZhdWx0VGFnUHJlZml4ID0gJ3RhZzp5YW1sLm9yZywyMDAyOic7XG5mdW5jdGlvbiBmaW5kVGFnT2JqZWN0KHZhbHVlLCB0YWdOYW1lLCB0YWdzKSB7XG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0YWdzLmZpbHRlcih0ID0+IHQudGFnID09PSB0YWdOYW1lKTtcbiAgICAgICAgY29uc3QgdGFnT2JqID0gbWF0Y2guZmluZCh0ID0+ICF0LmZvcm1hdCkgPz8gbWF0Y2hbMF07XG4gICAgICAgIGlmICghdGFnT2JqKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYWcgJHt0YWdOYW1lfSBub3QgZm91bmRgKTtcbiAgICAgICAgcmV0dXJuIHRhZ09iajtcbiAgICB9XG4gICAgcmV0dXJuIHRhZ3MuZmluZCh0ID0+IHQuaWRlbnRpZnk/Lih2YWx1ZSkgJiYgIXQuZm9ybWF0KTtcbn1cbmZ1bmN0aW9uIGNyZWF0ZU5vZGUodmFsdWUsIHRhZ05hbWUsIGN0eCkge1xuICAgIGlmIChpc0RvY3VtZW50KHZhbHVlKSlcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5jb250ZW50cztcbiAgICBpZiAoaXNOb2RlKHZhbHVlKSlcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIGlmIChpc1BhaXIodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IGN0eC5zY2hlbWFbTUFQXS5jcmVhdGVOb2RlPy4oY3R4LnNjaGVtYSwgbnVsbCwgY3R4KTtcbiAgICAgICAgbWFwLml0ZW1zLnB1c2godmFsdWUpO1xuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIgfHxcbiAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBCb29sZWFuIHx8XG4gICAgICAgICh0eXBlb2YgQmlnSW50ICE9PSAndW5kZWZpbmVkJyAmJiB2YWx1ZSBpbnN0YW5jZW9mIEJpZ0ludCkgLy8gbm90IHN1cHBvcnRlZCBldmVyeXdoZXJlXG4gICAgKSB7XG4gICAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtc2VyaWFsaXplanNvbnByb3BlcnR5XG4gICAgICAgIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgIH1cbiAgICBjb25zdCB7IGFsaWFzRHVwbGljYXRlT2JqZWN0cywgb25BbmNob3IsIG9uVGFnT2JqLCBzY2hlbWEsIHNvdXJjZU9iamVjdHMgfSA9IGN0eDtcbiAgICAvLyBEZXRlY3QgZHVwbGljYXRlIHJlZmVyZW5jZXMgdG8gdGhlIHNhbWUgb2JqZWN0ICYgdXNlIEFsaWFzIG5vZGVzIGZvciBhbGxcbiAgICAvLyBhZnRlciBmaXJzdC4gVGhlIGByZWZgIHdyYXBwZXIgYWxsb3dzIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIHRvIHJlc29sdmUuXG4gICAgbGV0IHJlZiA9IHVuZGVmaW5lZDtcbiAgICBpZiAoYWxpYXNEdXBsaWNhdGVPYmplY3RzICYmIHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmVmID0gc291cmNlT2JqZWN0cy5nZXQodmFsdWUpO1xuICAgICAgICBpZiAocmVmKSB7XG4gICAgICAgICAgICBpZiAoIXJlZi5hbmNob3IpXG4gICAgICAgICAgICAgICAgcmVmLmFuY2hvciA9IG9uQW5jaG9yKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBuZXcgQWxpYXMocmVmLmFuY2hvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWYgPSB7IGFuY2hvcjogbnVsbCwgbm9kZTogbnVsbCB9O1xuICAgICAgICAgICAgc291cmNlT2JqZWN0cy5zZXQodmFsdWUsIHJlZik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRhZ05hbWU/LnN0YXJ0c1dpdGgoJyEhJykpXG4gICAgICAgIHRhZ05hbWUgPSBkZWZhdWx0VGFnUHJlZml4ICsgdGFnTmFtZS5zbGljZSgyKTtcbiAgICBsZXQgdGFnT2JqID0gZmluZFRhZ09iamVjdCh2YWx1ZSwgdGFnTmFtZSwgc2NoZW1hLnRhZ3MpO1xuICAgIGlmICghdGFnT2JqKSB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudG9KU09OID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVuc2FmZS1jYWxsXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnRvSlNPTigpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBTY2FsYXIodmFsdWUpO1xuICAgICAgICAgICAgaWYgKHJlZilcbiAgICAgICAgICAgICAgICByZWYubm9kZSA9IG5vZGU7XG4gICAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgfVxuICAgICAgICB0YWdPYmogPVxuICAgICAgICAgICAgdmFsdWUgaW5zdGFuY2VvZiBNYXBcbiAgICAgICAgICAgICAgICA/IHNjaGVtYVtNQVBdXG4gICAgICAgICAgICAgICAgOiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KHZhbHVlKVxuICAgICAgICAgICAgICAgICAgICA/IHNjaGVtYVtTRVFdXG4gICAgICAgICAgICAgICAgICAgIDogc2NoZW1hW01BUF07XG4gICAgfVxuICAgIGlmIChvblRhZ09iaikge1xuICAgICAgICBvblRhZ09iaih0YWdPYmopO1xuICAgICAgICBkZWxldGUgY3R4Lm9uVGFnT2JqO1xuICAgIH1cbiAgICBjb25zdCBub2RlID0gdGFnT2JqPy5jcmVhdGVOb2RlXG4gICAgICAgID8gdGFnT2JqLmNyZWF0ZU5vZGUoY3R4LnNjaGVtYSwgdmFsdWUsIGN0eClcbiAgICAgICAgOiB0eXBlb2YgdGFnT2JqPy5ub2RlQ2xhc3M/LmZyb20gPT09ICdmdW5jdGlvbidcbiAgICAgICAgICAgID8gdGFnT2JqLm5vZGVDbGFzcy5mcm9tKGN0eC5zY2hlbWEsIHZhbHVlLCBjdHgpXG4gICAgICAgICAgICA6IG5ldyBTY2FsYXIodmFsdWUpO1xuICAgIGlmICh0YWdOYW1lKVxuICAgICAgICBub2RlLnRhZyA9IHRhZ05hbWU7XG4gICAgZWxzZSBpZiAoIXRhZ09iai5kZWZhdWx0KVxuICAgICAgICBub2RlLnRhZyA9IHRhZ09iai50YWc7XG4gICAgaWYgKHJlZilcbiAgICAgICAgcmVmLm5vZGUgPSBub2RlO1xuICAgIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgeyBjcmVhdGVOb2RlIH07XG4iLCJpbXBvcnQgeyBjcmVhdGVOb2RlIH0gZnJvbSAnLi4vZG9jL2NyZWF0ZU5vZGUuanMnO1xuaW1wb3J0IHsgaXNOb2RlLCBpc1BhaXIsIGlzQ29sbGVjdGlvbiwgaXNTY2FsYXIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IE5vZGVCYXNlIH0gZnJvbSAnLi9Ob2RlLmpzJztcblxuZnVuY3Rpb24gY29sbGVjdGlvbkZyb21QYXRoKHNjaGVtYSwgcGF0aCwgdmFsdWUpIHtcbiAgICBsZXQgdiA9IHZhbHVlO1xuICAgIGZvciAobGV0IGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIGNvbnN0IGsgPSBwYXRoW2ldO1xuICAgICAgICBpZiAodHlwZW9mIGsgPT09ICdudW1iZXInICYmIE51bWJlci5pc0ludGVnZXIoaykgJiYgayA+PSAwKSB7XG4gICAgICAgICAgICBjb25zdCBhID0gW107XG4gICAgICAgICAgICBhW2tdID0gdjtcbiAgICAgICAgICAgIHYgPSBhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdiA9IG5ldyBNYXAoW1trLCB2XV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjcmVhdGVOb2RlKHYsIHVuZGVmaW5lZCwge1xuICAgICAgICBhbGlhc0R1cGxpY2F0ZU9iamVjdHM6IGZhbHNlLFxuICAgICAgICBrZWVwVW5kZWZpbmVkOiBmYWxzZSxcbiAgICAgICAgb25BbmNob3I6ICgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBzaG91bGQgbm90IGhhcHBlbiwgcGxlYXNlIHJlcG9ydCBhIGJ1Zy4nKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICBzb3VyY2VPYmplY3RzOiBuZXcgTWFwKClcbiAgICB9KTtcbn1cbi8vIFR5cGUgZ3VhcmQgaXMgaW50ZW50aW9uYWxseSBhIGxpdHRsZSB3cm9uZyBzbyBhcyB0byBiZSBtb3JlIHVzZWZ1bCxcbi8vIGFzIGl0IGRvZXMgbm90IGNvdmVyIHVudHlwYWJsZSBlbXB0eSBub24tc3RyaW5nIGl0ZXJhYmxlcyAoZS5nLiBbXSkuXG5jb25zdCBpc0VtcHR5UGF0aCA9IChwYXRoKSA9PiBwYXRoID09IG51bGwgfHxcbiAgICAodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmICEhcGF0aFtTeW1ib2wuaXRlcmF0b3JdKCkubmV4dCgpLmRvbmUpO1xuY2xhc3MgQ29sbGVjdGlvbiBleHRlbmRzIE5vZGVCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlLCBzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIodHlwZSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnc2NoZW1hJywge1xuICAgICAgICAgICAgdmFsdWU6IHNjaGVtYSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGNvcHkgb2YgdGhpcyBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNjaGVtYSAtIElmIGRlZmluZWQsIG92ZXJ3cml0ZXMgdGhlIG9yaWdpbmFsJ3Mgc2NoZW1hXG4gICAgICovXG4gICAgY2xvbmUoc2NoZW1hKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModGhpcykpO1xuICAgICAgICBpZiAoc2NoZW1hKVxuICAgICAgICAgICAgY29weS5zY2hlbWEgPSBzY2hlbWE7XG4gICAgICAgIGNvcHkuaXRlbXMgPSBjb3B5Lml0ZW1zLm1hcChpdCA9PiBpc05vZGUoaXQpIHx8IGlzUGFpcihpdCkgPyBpdC5jbG9uZShzY2hlbWEpIDogaXQpO1xuICAgICAgICBpZiAodGhpcy5yYW5nZSlcbiAgICAgICAgICAgIGNvcHkucmFuZ2UgPSB0aGlzLnJhbmdlLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgdmFsdWUgdG8gdGhlIGNvbGxlY3Rpb24uIEZvciBgISFtYXBgIGFuZCBgISFvbWFwYCB0aGUgdmFsdWUgbXVzdFxuICAgICAqIGJlIGEgUGFpciBpbnN0YW5jZSBvciBhIGB7IGtleSwgdmFsdWUgfWAgb2JqZWN0LCB3aGljaCBtYXkgbm90IGhhdmUgYSBrZXlcbiAgICAgKiB0aGF0IGFscmVhZHkgZXhpc3RzIGluIHRoZSBtYXAuXG4gICAgICovXG4gICAgYWRkSW4ocGF0aCwgdmFsdWUpIHtcbiAgICAgICAgaWYgKGlzRW1wdHlQYXRoKHBhdGgpKVxuICAgICAgICAgICAgdGhpcy5hZGQodmFsdWUpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICAgICAgaWYgKGlzQ29sbGVjdGlvbihub2RlKSlcbiAgICAgICAgICAgICAgICBub2RlLmFkZEluKHJlc3QsIHZhbHVlKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKG5vZGUgPT09IHVuZGVmaW5lZCAmJiB0aGlzLnNjaGVtYSlcbiAgICAgICAgICAgICAgICB0aGlzLnNldChrZXksIGNvbGxlY3Rpb25Gcm9tUGF0aCh0aGlzLnNjaGVtYSwgcmVzdCwgdmFsdWUpKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIFlBTUwgY29sbGVjdGlvbiBhdCAke2tleX0uIFJlbWFpbmluZyBwYXRoOiAke3Jlc3R9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhlIGNvbGxlY3Rpb24uXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBkZWxldGVJbihwYXRoKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgaWYgKHJlc3QubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICBpZiAoaXNDb2xsZWN0aW9uKG5vZGUpKVxuICAgICAgICAgICAgcmV0dXJuIG5vZGUuZGVsZXRlSW4ocmVzdCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgWUFNTCBjb2xsZWN0aW9uIGF0ICR7a2V5fS4gUmVtYWluaW5nIHBhdGg6ICR7cmVzdH1gKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpdGVtIGF0IGBrZXlgLCBvciBgdW5kZWZpbmVkYCBpZiBub3QgZm91bmQuIEJ5IGRlZmF1bHQgdW53cmFwc1xuICAgICAqIHNjYWxhciB2YWx1ZXMgZnJvbSB0aGVpciBzdXJyb3VuZGluZyBub2RlOyB0byBkaXNhYmxlIHNldCBga2VlcFNjYWxhcmAgdG9cbiAgICAgKiBgdHJ1ZWAgKGNvbGxlY3Rpb25zIGFyZSBhbHdheXMgcmV0dXJuZWQgaW50YWN0KS5cbiAgICAgKi9cbiAgICBnZXRJbihwYXRoLCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0KGtleSwgdHJ1ZSk7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHJldHVybiAha2VlcFNjYWxhciAmJiBpc1NjYWxhcihub2RlKSA/IG5vZGUudmFsdWUgOiBub2RlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKG5vZGUpID8gbm9kZS5nZXRJbihyZXN0LCBrZWVwU2NhbGFyKSA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaGFzQWxsTnVsbFZhbHVlcyhhbGxvd1NjYWxhcikge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtcy5ldmVyeShub2RlID0+IHtcbiAgICAgICAgICAgIGlmICghaXNQYWlyKG5vZGUpKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBub2RlLnZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIChuID09IG51bGwgfHxcbiAgICAgICAgICAgICAgICAoYWxsb3dTY2FsYXIgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNTY2FsYXIobikgJiZcbiAgICAgICAgICAgICAgICAgICAgbi52YWx1ZSA9PSBudWxsICYmXG4gICAgICAgICAgICAgICAgICAgICFuLmNvbW1lbnRCZWZvcmUgJiZcbiAgICAgICAgICAgICAgICAgICAgIW4uY29tbWVudCAmJlxuICAgICAgICAgICAgICAgICAgICAhbi50YWcpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgY29sbGVjdGlvbiBpbmNsdWRlcyBhIHZhbHVlIHdpdGggdGhlIGtleSBga2V5YC5cbiAgICAgKi9cbiAgICBoYXNJbihwYXRoKSB7XG4gICAgICAgIGNvbnN0IFtrZXksIC4uLnJlc3RdID0gcGF0aDtcbiAgICAgICAgaWYgKHJlc3QubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGFzKGtleSk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldChrZXksIHRydWUpO1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKG5vZGUpID8gbm9kZS5oYXNJbihyZXN0KSA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgaW4gdGhpcyBjb2xsZWN0aW9uLiBGb3IgYCEhc2V0YCwgYHZhbHVlYCBuZWVkcyB0byBiZSBhXG4gICAgICogYm9vbGVhbiB0byBhZGQvcmVtb3ZlIHRoZSBpdGVtIGZyb20gdGhlIHNldC5cbiAgICAgKi9cbiAgICBzZXRJbihwYXRoLCB2YWx1ZSkge1xuICAgICAgICBjb25zdCBba2V5LCAuLi5yZXN0XSA9IHBhdGg7XG4gICAgICAgIGlmIChyZXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBub2RlID0gdGhpcy5nZXQoa2V5LCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChpc0NvbGxlY3Rpb24obm9kZSkpXG4gICAgICAgICAgICAgICAgbm9kZS5zZXRJbihyZXN0LCB2YWx1ZSk7XG4gICAgICAgICAgICBlbHNlIGlmIChub2RlID09PSB1bmRlZmluZWQgJiYgdGhpcy5zY2hlbWEpXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoa2V5LCBjb2xsZWN0aW9uRnJvbVBhdGgodGhpcy5zY2hlbWEsIHJlc3QsIHZhbHVlKSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCBZQU1MIGNvbGxlY3Rpb24gYXQgJHtrZXl9LiBSZW1haW5pbmcgcGF0aDogJHtyZXN0fWApO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgeyBDb2xsZWN0aW9uLCBjb2xsZWN0aW9uRnJvbVBhdGgsIGlzRW1wdHlQYXRoIH07XG4iLCIvKipcbiAqIFN0cmluZ2lmaWVzIGEgY29tbWVudC5cbiAqXG4gKiBFbXB0eSBjb21tZW50IGxpbmVzIGFyZSBsZWZ0IGVtcHR5LFxuICogbGluZXMgY29uc2lzdGluZyBvZiBhIHNpbmdsZSBzcGFjZSBhcmUgcmVwbGFjZWQgYnkgYCNgLFxuICogYW5kIGFsbCBvdGhlciBsaW5lcyBhcmUgcHJlZml4ZWQgd2l0aCBhIGAjYC5cbiAqL1xuY29uc3Qgc3RyaW5naWZ5Q29tbWVudCA9IChzdHIpID0+IHN0ci5yZXBsYWNlKC9eKD8hJCkoPzogJCk/L2dtLCAnIycpO1xuZnVuY3Rpb24gaW5kZW50Q29tbWVudChjb21tZW50LCBpbmRlbnQpIHtcbiAgICBpZiAoL15cXG4rJC8udGVzdChjb21tZW50KSlcbiAgICAgICAgcmV0dXJuIGNvbW1lbnQuc3Vic3RyaW5nKDEpO1xuICAgIHJldHVybiBpbmRlbnQgPyBjb21tZW50LnJlcGxhY2UoL14oPyEgKiQpL2dtLCBpbmRlbnQpIDogY29tbWVudDtcbn1cbmNvbnN0IGxpbmVDb21tZW50ID0gKHN0ciwgaW5kZW50LCBjb21tZW50KSA9PiBzdHIuZW5kc1dpdGgoJ1xcbicpXG4gICAgPyBpbmRlbnRDb21tZW50KGNvbW1lbnQsIGluZGVudClcbiAgICA6IGNvbW1lbnQuaW5jbHVkZXMoJ1xcbicpXG4gICAgICAgID8gJ1xcbicgKyBpbmRlbnRDb21tZW50KGNvbW1lbnQsIGluZGVudClcbiAgICAgICAgOiAoc3RyLmVuZHNXaXRoKCcgJykgPyAnJyA6ICcgJykgKyBjb21tZW50O1xuXG5leHBvcnQgeyBpbmRlbnRDb21tZW50LCBsaW5lQ29tbWVudCwgc3RyaW5naWZ5Q29tbWVudCB9O1xuIiwiY29uc3QgRk9MRF9GTE9XID0gJ2Zsb3cnO1xuY29uc3QgRk9MRF9CTE9DSyA9ICdibG9jayc7XG5jb25zdCBGT0xEX1FVT1RFRCA9ICdxdW90ZWQnO1xuLyoqXG4gKiBUcmllcyB0byBrZWVwIGlucHV0IGF0IHVwIHRvIGBsaW5lV2lkdGhgIGNoYXJhY3RlcnMsIHNwbGl0dGluZyBvbmx5IG9uIHNwYWNlc1xuICogbm90IGZvbGxvd2VkIGJ5IG5ld2xpbmVzIG9yIHNwYWNlcyB1bmxlc3MgYG1vZGVgIGlzIGAncXVvdGVkJ2AuIExpbmVzIGFyZVxuICogdGVybWluYXRlZCB3aXRoIGBcXG5gIGFuZCBzdGFydGVkIHdpdGggYGluZGVudGAuXG4gKi9cbmZ1bmN0aW9uIGZvbGRGbG93TGluZXModGV4dCwgaW5kZW50LCBtb2RlID0gJ2Zsb3cnLCB7IGluZGVudEF0U3RhcnQsIGxpbmVXaWR0aCA9IDgwLCBtaW5Db250ZW50V2lkdGggPSAyMCwgb25Gb2xkLCBvbk92ZXJmbG93IH0gPSB7fSkge1xuICAgIGlmICghbGluZVdpZHRoIHx8IGxpbmVXaWR0aCA8IDApXG4gICAgICAgIHJldHVybiB0ZXh0O1xuICAgIGlmIChsaW5lV2lkdGggPCBtaW5Db250ZW50V2lkdGgpXG4gICAgICAgIG1pbkNvbnRlbnRXaWR0aCA9IDA7XG4gICAgY29uc3QgZW5kU3RlcCA9IE1hdGgubWF4KDEgKyBtaW5Db250ZW50V2lkdGgsIDEgKyBsaW5lV2lkdGggLSBpbmRlbnQubGVuZ3RoKTtcbiAgICBpZiAodGV4dC5sZW5ndGggPD0gZW5kU3RlcClcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgY29uc3QgZm9sZHMgPSBbXTtcbiAgICBjb25zdCBlc2NhcGVkRm9sZHMgPSB7fTtcbiAgICBsZXQgZW5kID0gbGluZVdpZHRoIC0gaW5kZW50Lmxlbmd0aDtcbiAgICBpZiAodHlwZW9mIGluZGVudEF0U3RhcnQgPT09ICdudW1iZXInKSB7XG4gICAgICAgIGlmIChpbmRlbnRBdFN0YXJ0ID4gbGluZVdpZHRoIC0gTWF0aC5tYXgoMiwgbWluQ29udGVudFdpZHRoKSlcbiAgICAgICAgICAgIGZvbGRzLnB1c2goMCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGVuZCA9IGxpbmVXaWR0aCAtIGluZGVudEF0U3RhcnQ7XG4gICAgfVxuICAgIGxldCBzcGxpdCA9IHVuZGVmaW5lZDtcbiAgICBsZXQgcHJldiA9IHVuZGVmaW5lZDtcbiAgICBsZXQgb3ZlcmZsb3cgPSBmYWxzZTtcbiAgICBsZXQgaSA9IC0xO1xuICAgIGxldCBlc2NTdGFydCA9IC0xO1xuICAgIGxldCBlc2NFbmQgPSAtMTtcbiAgICBpZiAobW9kZSA9PT0gRk9MRF9CTE9DSykge1xuICAgICAgICBpID0gY29uc3VtZU1vcmVJbmRlbnRlZExpbmVzKHRleHQsIGksIGluZGVudC5sZW5ndGgpO1xuICAgICAgICBpZiAoaSAhPT0gLTEpXG4gICAgICAgICAgICBlbmQgPSBpICsgZW5kU3RlcDtcbiAgICB9XG4gICAgZm9yIChsZXQgY2g7IChjaCA9IHRleHRbKGkgKz0gMSldKTspIHtcbiAgICAgICAgaWYgKG1vZGUgPT09IEZPTERfUVVPVEVEICYmIGNoID09PSAnXFxcXCcpIHtcbiAgICAgICAgICAgIGVzY1N0YXJ0ID0gaTtcbiAgICAgICAgICAgIHN3aXRjaCAodGV4dFtpICsgMV0pIHtcbiAgICAgICAgICAgICAgICBjYXNlICd4JzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSAzO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd1JzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSA1O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdVJzpcbiAgICAgICAgICAgICAgICAgICAgaSArPSA5O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlc2NFbmQgPSBpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGlmIChtb2RlID09PSBGT0xEX0JMT0NLKVxuICAgICAgICAgICAgICAgIGkgPSBjb25zdW1lTW9yZUluZGVudGVkTGluZXModGV4dCwgaSwgaW5kZW50Lmxlbmd0aCk7XG4gICAgICAgICAgICBlbmQgPSBpICsgaW5kZW50Lmxlbmd0aCArIGVuZFN0ZXA7XG4gICAgICAgICAgICBzcGxpdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJyAnICYmXG4gICAgICAgICAgICAgICAgcHJldiAmJlxuICAgICAgICAgICAgICAgIHByZXYgIT09ICcgJyAmJlxuICAgICAgICAgICAgICAgIHByZXYgIT09ICdcXG4nICYmXG4gICAgICAgICAgICAgICAgcHJldiAhPT0gJ1xcdCcpIHtcbiAgICAgICAgICAgICAgICAvLyBzcGFjZSBzdXJyb3VuZGVkIGJ5IG5vbi1zcGFjZSBjYW4gYmUgcmVwbGFjZWQgd2l0aCBuZXdsaW5lICsgaW5kZW50XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dCA9IHRleHRbaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmIChuZXh0ICYmIG5leHQgIT09ICcgJyAmJiBuZXh0ICE9PSAnXFxuJyAmJiBuZXh0ICE9PSAnXFx0JylcbiAgICAgICAgICAgICAgICAgICAgc3BsaXQgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGkgPj0gZW5kKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNwbGl0KSB7XG4gICAgICAgICAgICAgICAgICAgIGZvbGRzLnB1c2goc3BsaXQpO1xuICAgICAgICAgICAgICAgICAgICBlbmQgPSBzcGxpdCArIGVuZFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtb2RlID09PSBGT0xEX1FVT1RFRCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aGl0ZS1zcGFjZSBjb2xsZWN0ZWQgYXQgZW5kIG1heSBzdHJldGNoIHBhc3QgbGluZVdpZHRoXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChwcmV2ID09PSAnICcgfHwgcHJldiA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBjaDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoID0gdGV4dFsoaSArPSAxKV07XG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gQWNjb3VudCBmb3IgbmV3bGluZSBlc2NhcGUsIGJ1dCBkb24ndCBicmVhayBwcmVjZWRpbmcgZXNjYXBlXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGogPSBpID4gZXNjRW5kICsgMSA/IGkgLSAyIDogZXNjU3RhcnQgLSAxO1xuICAgICAgICAgICAgICAgICAgICAvLyBCYWlsIG91dCBpZiBsaW5lV2lkdGggJiBtaW5Db250ZW50V2lkdGggYXJlIHNob3J0ZXIgdGhhbiBhbiBlc2NhcGUgc3RyaW5nXG4gICAgICAgICAgICAgICAgICAgIGlmIChlc2NhcGVkRm9sZHNbal0pXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgICAgICAgICAgICAgZm9sZHMucHVzaChqKTtcbiAgICAgICAgICAgICAgICAgICAgZXNjYXBlZEZvbGRzW2pdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgZW5kID0gaiArIGVuZFN0ZXA7XG4gICAgICAgICAgICAgICAgICAgIHNwbGl0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBwcmV2ID0gY2g7XG4gICAgfVxuICAgIGlmIChvdmVyZmxvdyAmJiBvbk92ZXJmbG93KVxuICAgICAgICBvbk92ZXJmbG93KCk7XG4gICAgaWYgKGZvbGRzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuIHRleHQ7XG4gICAgaWYgKG9uRm9sZClcbiAgICAgICAgb25Gb2xkKCk7XG4gICAgbGV0IHJlcyA9IHRleHQuc2xpY2UoMCwgZm9sZHNbMF0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZm9sZHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgZm9sZCA9IGZvbGRzW2ldO1xuICAgICAgICBjb25zdCBlbmQgPSBmb2xkc1tpICsgMV0gfHwgdGV4dC5sZW5ndGg7XG4gICAgICAgIGlmIChmb2xkID09PSAwKVxuICAgICAgICAgICAgcmVzID0gYFxcbiR7aW5kZW50fSR7dGV4dC5zbGljZSgwLCBlbmQpfWA7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKG1vZGUgPT09IEZPTERfUVVPVEVEICYmIGVzY2FwZWRGb2xkc1tmb2xkXSlcbiAgICAgICAgICAgICAgICByZXMgKz0gYCR7dGV4dFtmb2xkXX1cXFxcYDtcbiAgICAgICAgICAgIHJlcyArPSBgXFxuJHtpbmRlbnR9JHt0ZXh0LnNsaWNlKGZvbGQgKyAxLCBlbmQpfWA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbi8qKlxuICogUHJlc3VtZXMgYGkgKyAxYCBpcyBhdCB0aGUgc3RhcnQgb2YgYSBsaW5lXG4gKiBAcmV0dXJucyBpbmRleCBvZiBsYXN0IG5ld2xpbmUgaW4gbW9yZS1pbmRlbnRlZCBibG9ja1xuICovXG5mdW5jdGlvbiBjb25zdW1lTW9yZUluZGVudGVkTGluZXModGV4dCwgaSwgaW5kZW50KSB7XG4gICAgbGV0IGVuZCA9IGk7XG4gICAgbGV0IHN0YXJ0ID0gaSArIDE7XG4gICAgbGV0IGNoID0gdGV4dFtzdGFydF07XG4gICAgd2hpbGUgKGNoID09PSAnICcgfHwgY2ggPT09ICdcXHQnKSB7XG4gICAgICAgIGlmIChpIDwgc3RhcnQgKyBpbmRlbnQpIHtcbiAgICAgICAgICAgIGNoID0gdGV4dFsrK2ldO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZG8ge1xuICAgICAgICAgICAgICAgIGNoID0gdGV4dFsrK2ldO1xuICAgICAgICAgICAgfSB3aGlsZSAoY2ggJiYgY2ggIT09ICdcXG4nKTtcbiAgICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgICBzdGFydCA9IGkgKyAxO1xuICAgICAgICAgICAgY2ggPSB0ZXh0W3N0YXJ0XTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZW5kO1xufVxuXG5leHBvcnQgeyBGT0xEX0JMT0NLLCBGT0xEX0ZMT1csIEZPTERfUVVPVEVELCBmb2xkRmxvd0xpbmVzIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgZm9sZEZsb3dMaW5lcywgRk9MRF9RVU9URUQsIEZPTERfRkxPVywgRk9MRF9CTE9DSyB9IGZyb20gJy4vZm9sZEZsb3dMaW5lcy5qcyc7XG5cbmNvbnN0IGdldEZvbGRPcHRpb25zID0gKGN0eCwgaXNCbG9jaykgPT4gKHtcbiAgICBpbmRlbnRBdFN0YXJ0OiBpc0Jsb2NrID8gY3R4LmluZGVudC5sZW5ndGggOiBjdHguaW5kZW50QXRTdGFydCxcbiAgICBsaW5lV2lkdGg6IGN0eC5vcHRpb25zLmxpbmVXaWR0aCxcbiAgICBtaW5Db250ZW50V2lkdGg6IGN0eC5vcHRpb25zLm1pbkNvbnRlbnRXaWR0aFxufSk7XG4vLyBBbHNvIGNoZWNrcyBmb3IgbGluZXMgc3RhcnRpbmcgd2l0aCAlLCBhcyBwYXJzaW5nIHRoZSBvdXRwdXQgYXMgWUFNTCAxLjEgd2lsbFxuLy8gcHJlc3VtZSB0aGF0J3Mgc3RhcnRpbmcgYSBuZXcgZG9jdW1lbnQuXG5jb25zdCBjb250YWluc0RvY3VtZW50TWFya2VyID0gKHN0cikgPT4gL14oJXwtLS18XFwuXFwuXFwuKS9tLnRlc3Qoc3RyKTtcbmZ1bmN0aW9uIGxpbmVMZW5ndGhPdmVyTGltaXQoc3RyLCBsaW5lV2lkdGgsIGluZGVudExlbmd0aCkge1xuICAgIGlmICghbGluZVdpZHRoIHx8IGxpbmVXaWR0aCA8IDApXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBjb25zdCBsaW1pdCA9IGxpbmVXaWR0aCAtIGluZGVudExlbmd0aDtcbiAgICBjb25zdCBzdHJMZW4gPSBzdHIubGVuZ3RoO1xuICAgIGlmIChzdHJMZW4gPD0gbGltaXQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMCwgc3RhcnQgPSAwOyBpIDwgc3RyTGVuOyArK2kpIHtcbiAgICAgICAgaWYgKHN0cltpXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgIGlmIChpIC0gc3RhcnQgPiBsaW1pdClcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICBpZiAoc3RyTGVuIC0gc3RhcnQgPD0gbGltaXQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuZnVuY3Rpb24gZG91YmxlUXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpIHtcbiAgICBjb25zdCBqc29uID0gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIGlmIChjdHgub3B0aW9ucy5kb3VibGVRdW90ZWRBc0pTT04pXG4gICAgICAgIHJldHVybiBqc29uO1xuICAgIGNvbnN0IHsgaW1wbGljaXRLZXkgfSA9IGN0eDtcbiAgICBjb25zdCBtaW5NdWx0aUxpbmVMZW5ndGggPSBjdHgub3B0aW9ucy5kb3VibGVRdW90ZWRNaW5NdWx0aUxpbmVMZW5ndGg7XG4gICAgY29uc3QgaW5kZW50ID0gY3R4LmluZGVudCB8fCAoY29udGFpbnNEb2N1bWVudE1hcmtlcih2YWx1ZSkgPyAnICAnIDogJycpO1xuICAgIGxldCBzdHIgPSAnJztcbiAgICBsZXQgc3RhcnQgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwLCBjaCA9IGpzb25baV07IGNoOyBjaCA9IGpzb25bKytpXSkge1xuICAgICAgICBpZiAoY2ggPT09ICcgJyAmJiBqc29uW2kgKyAxXSA9PT0gJ1xcXFwnICYmIGpzb25baSArIDJdID09PSAnbicpIHtcbiAgICAgICAgICAgIC8vIHNwYWNlIGJlZm9yZSBuZXdsaW5lIG5lZWRzIHRvIGJlIGVzY2FwZWQgdG8gbm90IGJlIGZvbGRlZFxuICAgICAgICAgICAgc3RyICs9IGpzb24uc2xpY2Uoc3RhcnQsIGkpICsgJ1xcXFwgJztcbiAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgIHN0YXJ0ID0gaTtcbiAgICAgICAgICAgIGNoID0gJ1xcXFwnO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJ1xcXFwnKVxuICAgICAgICAgICAgc3dpdGNoIChqc29uW2kgKyAxXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3UnOlxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0ganNvbi5zbGljZShzdGFydCwgaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2RlID0ganNvbi5zdWJzdHIoaSArIDIsIDQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMDAwMCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXDAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDA3JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcYSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzAwMGInOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFx2JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMDAxYic6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXGUnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcwMDg1JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcTic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJzAwYTAnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFxfJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnMjAyOCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXEwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICcyMDI5JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9ICdcXFxcUCc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlLnN1YnN0cigwLCAyKSA9PT0gJzAwJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSAnXFxcXHgnICsgY29kZS5zdWJzdHIoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBqc29uLnN1YnN0cihpLCA2KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gNTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbic6XG4gICAgICAgICAgICAgICAgICAgIGlmIChpbXBsaWNpdEtleSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAganNvbltpICsgMl0gPT09ICdcIicgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGpzb24ubGVuZ3RoIDwgbWluTXVsdGlMaW5lTGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb2xkaW5nIHdpbGwgZWF0IGZpcnN0IG5ld2xpbmVcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0ciArPSBqc29uLnNsaWNlKHN0YXJ0LCBpKSArICdcXG5cXG4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGpzb25baSArIDJdID09PSAnXFxcXCcgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqc29uW2kgKyAzXSA9PT0gJ24nICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAganNvbltpICsgNF0gIT09ICdcIicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgc3RyICs9IGluZGVudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNwYWNlIGFmdGVyIG5ld2xpbmUgbmVlZHMgdG8gYmUgZXNjYXBlZCB0byBub3QgYmUgZm9sZGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoanNvbltpICsgMl0gPT09ICcgJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHIgKz0gJ1xcXFwnO1xuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgfVxuICAgIHN0ciA9IHN0YXJ0ID8gc3RyICsganNvbi5zbGljZShzdGFydCkgOiBqc29uO1xuICAgIHJldHVybiBpbXBsaWNpdEtleVxuICAgICAgICA/IHN0clxuICAgICAgICA6IGZvbGRGbG93TGluZXMoc3RyLCBpbmRlbnQsIEZPTERfUVVPVEVELCBnZXRGb2xkT3B0aW9ucyhjdHgsIGZhbHNlKSk7XG59XG5mdW5jdGlvbiBzaW5nbGVRdW90ZWRTdHJpbmcodmFsdWUsIGN0eCkge1xuICAgIGlmIChjdHgub3B0aW9ucy5zaW5nbGVRdW90ZSA9PT0gZmFsc2UgfHxcbiAgICAgICAgKGN0eC5pbXBsaWNpdEtleSAmJiB2YWx1ZS5pbmNsdWRlcygnXFxuJykpIHx8XG4gICAgICAgIC9bIFxcdF1cXG58XFxuWyBcXHRdLy50ZXN0KHZhbHVlKSAvLyBzaW5nbGUgcXVvdGVkIHN0cmluZyBjYW4ndCBoYXZlIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZSBhcm91bmQgbmV3bGluZVxuICAgIClcbiAgICAgICAgcmV0dXJuIGRvdWJsZVF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICBjb25zdCBpbmRlbnQgPSBjdHguaW5kZW50IHx8IChjb250YWluc0RvY3VtZW50TWFya2VyKHZhbHVlKSA/ICcgICcgOiAnJyk7XG4gICAgY29uc3QgcmVzID0gXCInXCIgKyB2YWx1ZS5yZXBsYWNlKC8nL2csIFwiJydcIikucmVwbGFjZSgvXFxuKy9nLCBgJCZcXG4ke2luZGVudH1gKSArIFwiJ1wiO1xuICAgIHJldHVybiBjdHguaW1wbGljaXRLZXlcbiAgICAgICAgPyByZXNcbiAgICAgICAgOiBmb2xkRmxvd0xpbmVzKHJlcywgaW5kZW50LCBGT0xEX0ZMT1csIGdldEZvbGRPcHRpb25zKGN0eCwgZmFsc2UpKTtcbn1cbmZ1bmN0aW9uIHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KSB7XG4gICAgY29uc3QgeyBzaW5nbGVRdW90ZSB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgbGV0IHFzO1xuICAgIGlmIChzaW5nbGVRdW90ZSA9PT0gZmFsc2UpXG4gICAgICAgIHFzID0gZG91YmxlUXVvdGVkU3RyaW5nO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBoYXNEb3VibGUgPSB2YWx1ZS5pbmNsdWRlcygnXCInKTtcbiAgICAgICAgY29uc3QgaGFzU2luZ2xlID0gdmFsdWUuaW5jbHVkZXMoXCInXCIpO1xuICAgICAgICBpZiAoaGFzRG91YmxlICYmICFoYXNTaW5nbGUpXG4gICAgICAgICAgICBxcyA9IHNpbmdsZVF1b3RlZFN0cmluZztcbiAgICAgICAgZWxzZSBpZiAoaGFzU2luZ2xlICYmICFoYXNEb3VibGUpXG4gICAgICAgICAgICBxcyA9IGRvdWJsZVF1b3RlZFN0cmluZztcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcXMgPSBzaW5nbGVRdW90ZSA/IHNpbmdsZVF1b3RlZFN0cmluZyA6IGRvdWJsZVF1b3RlZFN0cmluZztcbiAgICB9XG4gICAgcmV0dXJuIHFzKHZhbHVlLCBjdHgpO1xufVxuLy8gVGhlIG5lZ2F0aXZlIGxvb2tiZWhpbmQgYXZvaWRzIGEgcG9seW5vbWlhbCBzZWFyY2gsXG4vLyBidXQgaXNuJ3Qgc3VwcG9ydGVkIHlldCBvbiBTYWZhcmk6IGh0dHBzOi8vY2FuaXVzZS5jb20vanMtcmVnZXhwLWxvb2tiZWhpbmRcbmxldCBibG9ja0VuZE5ld2xpbmVzO1xudHJ5IHtcbiAgICBibG9ja0VuZE5ld2xpbmVzID0gbmV3IFJlZ0V4cCgnKF58KD88IVxcbikpXFxuKyg/IVxcbnwkKScsICdnJyk7XG59XG5jYXRjaCB7XG4gICAgYmxvY2tFbmROZXdsaW5lcyA9IC9cXG4rKD8hXFxufCQpL2c7XG59XG5mdW5jdGlvbiBibG9ja1N0cmluZyh7IGNvbW1lbnQsIHR5cGUsIHZhbHVlIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgIGNvbnN0IHsgYmxvY2tRdW90ZSwgY29tbWVudFN0cmluZywgbGluZVdpZHRoIH0gPSBjdHgub3B0aW9ucztcbiAgICAvLyAxLiBCbG9jayBjYW4ndCBlbmQgaW4gd2hpdGVzcGFjZSB1bmxlc3MgdGhlIGxhc3QgbGluZSBpcyBub24tZW1wdHkuXG4gICAgLy8gMi4gU3RyaW5ncyBjb25zaXN0aW5nIG9mIG9ubHkgd2hpdGVzcGFjZSBhcmUgYmVzdCByZW5kZXJlZCBleHBsaWNpdGx5LlxuICAgIGlmICghYmxvY2tRdW90ZSB8fCAvXFxuW1xcdCBdKyQvLnRlc3QodmFsdWUpIHx8IC9eXFxzKiQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgfVxuICAgIGNvbnN0IGluZGVudCA9IGN0eC5pbmRlbnQgfHxcbiAgICAgICAgKGN0eC5mb3JjZUJsb2NrSW5kZW50IHx8IGNvbnRhaW5zRG9jdW1lbnRNYXJrZXIodmFsdWUpID8gJyAgJyA6ICcnKTtcbiAgICBjb25zdCBsaXRlcmFsID0gYmxvY2tRdW90ZSA9PT0gJ2xpdGVyYWwnXG4gICAgICAgID8gdHJ1ZVxuICAgICAgICA6IGJsb2NrUXVvdGUgPT09ICdmb2xkZWQnIHx8IHR5cGUgPT09IFNjYWxhci5CTE9DS19GT0xERURcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDogdHlwZSA9PT0gU2NhbGFyLkJMT0NLX0xJVEVSQUxcbiAgICAgICAgICAgICAgICA/IHRydWVcbiAgICAgICAgICAgICAgICA6ICFsaW5lTGVuZ3RoT3ZlckxpbWl0KHZhbHVlLCBsaW5lV2lkdGgsIGluZGVudC5sZW5ndGgpO1xuICAgIGlmICghdmFsdWUpXG4gICAgICAgIHJldHVybiBsaXRlcmFsID8gJ3xcXG4nIDogJz5cXG4nO1xuICAgIC8vIGRldGVybWluZSBjaG9tcGluZyBmcm9tIHdoaXRlc3BhY2UgYXQgdmFsdWUgZW5kXG4gICAgbGV0IGNob21wO1xuICAgIGxldCBlbmRTdGFydDtcbiAgICBmb3IgKGVuZFN0YXJ0ID0gdmFsdWUubGVuZ3RoOyBlbmRTdGFydCA+IDA7IC0tZW5kU3RhcnQpIHtcbiAgICAgICAgY29uc3QgY2ggPSB2YWx1ZVtlbmRTdGFydCAtIDFdO1xuICAgICAgICBpZiAoY2ggIT09ICdcXG4nICYmIGNoICE9PSAnXFx0JyAmJiBjaCAhPT0gJyAnKVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgfVxuICAgIGxldCBlbmQgPSB2YWx1ZS5zdWJzdHJpbmcoZW5kU3RhcnQpO1xuICAgIGNvbnN0IGVuZE5sUG9zID0gZW5kLmluZGV4T2YoJ1xcbicpO1xuICAgIGlmIChlbmRObFBvcyA9PT0gLTEpIHtcbiAgICAgICAgY2hvbXAgPSAnLSc7IC8vIHN0cmlwXG4gICAgfVxuICAgIGVsc2UgaWYgKHZhbHVlID09PSBlbmQgfHwgZW5kTmxQb3MgIT09IGVuZC5sZW5ndGggLSAxKSB7XG4gICAgICAgIGNob21wID0gJysnOyAvLyBrZWVwXG4gICAgICAgIGlmIChvbkNob21wS2VlcClcbiAgICAgICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjaG9tcCA9ICcnOyAvLyBjbGlwXG4gICAgfVxuICAgIGlmIChlbmQpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCAtZW5kLmxlbmd0aCk7XG4gICAgICAgIGlmIChlbmRbZW5kLmxlbmd0aCAtIDFdID09PSAnXFxuJylcbiAgICAgICAgICAgIGVuZCA9IGVuZC5zbGljZSgwLCAtMSk7XG4gICAgICAgIGVuZCA9IGVuZC5yZXBsYWNlKGJsb2NrRW5kTmV3bGluZXMsIGAkJiR7aW5kZW50fWApO1xuICAgIH1cbiAgICAvLyBkZXRlcm1pbmUgaW5kZW50IGluZGljYXRvciBmcm9tIHdoaXRlc3BhY2UgYXQgdmFsdWUgc3RhcnRcbiAgICBsZXQgc3RhcnRXaXRoU3BhY2UgPSBmYWxzZTtcbiAgICBsZXQgc3RhcnRFbmQ7XG4gICAgbGV0IHN0YXJ0TmxQb3MgPSAtMTtcbiAgICBmb3IgKHN0YXJ0RW5kID0gMDsgc3RhcnRFbmQgPCB2YWx1ZS5sZW5ndGg7ICsrc3RhcnRFbmQpIHtcbiAgICAgICAgY29uc3QgY2ggPSB2YWx1ZVtzdGFydEVuZF07XG4gICAgICAgIGlmIChjaCA9PT0gJyAnKVxuICAgICAgICAgICAgc3RhcnRXaXRoU3BhY2UgPSB0cnVlO1xuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJ1xcbicpXG4gICAgICAgICAgICBzdGFydE5sUG9zID0gc3RhcnRFbmQ7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBsZXQgc3RhcnQgPSB2YWx1ZS5zdWJzdHJpbmcoMCwgc3RhcnRObFBvcyA8IHN0YXJ0RW5kID8gc3RhcnRObFBvcyArIDEgOiBzdGFydEVuZCk7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWUuc3Vic3RyaW5nKHN0YXJ0Lmxlbmd0aCk7XG4gICAgICAgIHN0YXJ0ID0gc3RhcnQucmVwbGFjZSgvXFxuKy9nLCBgJCYke2luZGVudH1gKTtcbiAgICB9XG4gICAgY29uc3QgaW5kZW50U2l6ZSA9IGluZGVudCA/ICcyJyA6ICcxJzsgLy8gcm9vdCBpcyBhdCAtMVxuICAgIC8vIExlYWRpbmcgfCBvciA+IGlzIGFkZGVkIGxhdGVyXG4gICAgbGV0IGhlYWRlciA9IChzdGFydFdpdGhTcGFjZSA/IGluZGVudFNpemUgOiAnJykgKyBjaG9tcDtcbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgICBoZWFkZXIgKz0gJyAnICsgY29tbWVudFN0cmluZyhjb21tZW50LnJlcGxhY2UoLyA/W1xcclxcbl0rL2csICcgJykpO1xuICAgICAgICBpZiAob25Db21tZW50KVxuICAgICAgICAgICAgb25Db21tZW50KCk7XG4gICAgfVxuICAgIGlmICghbGl0ZXJhbCkge1xuICAgICAgICBjb25zdCBmb2xkZWRWYWx1ZSA9IHZhbHVlXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxuKy9nLCAnXFxuJCYnKVxuICAgICAgICAgICAgLnJlcGxhY2UoLyg/Ol58XFxuKShbXFx0IF0uKikoPzooW1xcblxcdCBdKilcXG4oPyFbXFxuXFx0IF0pKT8vZywgJyQxJDInKSAvLyBtb3JlLWluZGVudGVkIGxpbmVzIGFyZW4ndCBmb2xkZWRcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgIF4gbW9yZS1pbmQuIF4gZW1wdHkgICAgIF4gY2FwdHVyZSBuZXh0IGVtcHR5IGxpbmVzIG9ubHkgYXQgZW5kIG9mIGluZGVudFxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcbisvZywgYCQmJHtpbmRlbnR9YCk7XG4gICAgICAgIGxldCBsaXRlcmFsRmFsbGJhY2sgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgZm9sZE9wdGlvbnMgPSBnZXRGb2xkT3B0aW9ucyhjdHgsIHRydWUpO1xuICAgICAgICBpZiAoYmxvY2tRdW90ZSAhPT0gJ2ZvbGRlZCcgJiYgdHlwZSAhPT0gU2NhbGFyLkJMT0NLX0ZPTERFRCkge1xuICAgICAgICAgICAgZm9sZE9wdGlvbnMub25PdmVyZmxvdyA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICBsaXRlcmFsRmFsbGJhY2sgPSB0cnVlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBib2R5ID0gZm9sZEZsb3dMaW5lcyhgJHtzdGFydH0ke2ZvbGRlZFZhbHVlfSR7ZW5kfWAsIGluZGVudCwgRk9MRF9CTE9DSywgZm9sZE9wdGlvbnMpO1xuICAgICAgICBpZiAoIWxpdGVyYWxGYWxsYmFjaylcbiAgICAgICAgICAgIHJldHVybiBgPiR7aGVhZGVyfVxcbiR7aW5kZW50fSR7Ym9keX1gO1xuICAgIH1cbiAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1xcbisvZywgYCQmJHtpbmRlbnR9YCk7XG4gICAgcmV0dXJuIGB8JHtoZWFkZXJ9XFxuJHtpbmRlbnR9JHtzdGFydH0ke3ZhbHVlfSR7ZW5kfWA7XG59XG5mdW5jdGlvbiBwbGFpblN0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBjb25zdCB7IHR5cGUsIHZhbHVlIH0gPSBpdGVtO1xuICAgIGNvbnN0IHsgYWN0dWFsU3RyaW5nLCBpbXBsaWNpdEtleSwgaW5kZW50LCBpbmRlbnRTdGVwLCBpbkZsb3cgfSA9IGN0eDtcbiAgICBpZiAoKGltcGxpY2l0S2V5ICYmIHZhbHVlLmluY2x1ZGVzKCdcXG4nKSkgfHxcbiAgICAgICAgKGluRmxvdyAmJiAvW1tcXF17fSxdLy50ZXN0KHZhbHVlKSkpIHtcbiAgICAgICAgcmV0dXJuIHF1b3RlZFN0cmluZyh2YWx1ZSwgY3R4KTtcbiAgICB9XG4gICAgaWYgKCF2YWx1ZSB8fFxuICAgICAgICAvXltcXG5cXHQgLFtcXF17fSMmKiF8PidcIiVAYF18Xls/LV0kfF5bPy1dWyBcXHRdfFtcXG46XVsgXFx0XXxbIFxcdF1cXG58W1xcblxcdCBdI3xbXFxuXFx0IDpdJC8udGVzdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gbm90IGFsbG93ZWQ6XG4gICAgICAgIC8vIC0gZW1wdHkgc3RyaW5nLCAnLScgb3IgJz8nXG4gICAgICAgIC8vIC0gc3RhcnQgd2l0aCBhbiBpbmRpY2F0b3IgY2hhcmFjdGVyIChleGNlcHQgWz86LV0pIG9yIC9bPy1dIC9cbiAgICAgICAgLy8gLSAnXFxuICcsICc6ICcgb3IgJyBcXG4nIGFueXdoZXJlXG4gICAgICAgIC8vIC0gJyMnIG5vdCBwcmVjZWRlZCBieSBhIG5vbi1zcGFjZSBjaGFyXG4gICAgICAgIC8vIC0gZW5kIHdpdGggJyAnIG9yICc6J1xuICAgICAgICByZXR1cm4gaW1wbGljaXRLZXkgfHwgaW5GbG93IHx8ICF2YWx1ZS5pbmNsdWRlcygnXFxuJylcbiAgICAgICAgICAgID8gcXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpXG4gICAgICAgICAgICA6IGJsb2NrU3RyaW5nKGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgfVxuICAgIGlmICghaW1wbGljaXRLZXkgJiZcbiAgICAgICAgIWluRmxvdyAmJlxuICAgICAgICB0eXBlICE9PSBTY2FsYXIuUExBSU4gJiZcbiAgICAgICAgdmFsdWUuaW5jbHVkZXMoJ1xcbicpKSB7XG4gICAgICAgIC8vIFdoZXJlIGFsbG93ZWQgJiB0eXBlIG5vdCBzZXQgZXhwbGljaXRseSwgcHJlZmVyIGJsb2NrIHN0eWxlIGZvciBtdWx0aWxpbmUgc3RyaW5nc1xuICAgICAgICByZXR1cm4gYmxvY2tTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICB9XG4gICAgaWYgKGNvbnRhaW5zRG9jdW1lbnRNYXJrZXIodmFsdWUpKSB7XG4gICAgICAgIGlmIChpbmRlbnQgPT09ICcnKSB7XG4gICAgICAgICAgICBjdHguZm9yY2VCbG9ja0luZGVudCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gYmxvY2tTdHJpbmcoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpbXBsaWNpdEtleSAmJiBpbmRlbnQgPT09IGluZGVudFN0ZXApIHtcbiAgICAgICAgICAgIHJldHVybiBxdW90ZWRTdHJpbmcodmFsdWUsIGN0eCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgc3RyID0gdmFsdWUucmVwbGFjZSgvXFxuKy9nLCBgJCZcXG4ke2luZGVudH1gKTtcbiAgICAvLyBWZXJpZnkgdGhhdCBvdXRwdXQgd2lsbCBiZSBwYXJzZWQgYXMgYSBzdHJpbmcsIGFzIGUuZy4gcGxhaW4gbnVtYmVycyBhbmRcbiAgICAvLyBib29sZWFucyBnZXQgcGFyc2VkIHdpdGggdGhvc2UgdHlwZXMgaW4gdjEuMiAoZS5nLiAnNDInLCAndHJ1ZScgJiAnMC45ZS0zJyksXG4gICAgLy8gYW5kIG90aGVycyBpbiB2MS4xLlxuICAgIGlmIChhY3R1YWxTdHJpbmcpIHtcbiAgICAgICAgY29uc3QgdGVzdCA9ICh0YWcpID0+IHRhZy5kZWZhdWx0ICYmIHRhZy50YWcgIT09ICd0YWc6eWFtbC5vcmcsMjAwMjpzdHInICYmIHRhZy50ZXN0Py50ZXN0KHN0cik7XG4gICAgICAgIGNvbnN0IHsgY29tcGF0LCB0YWdzIH0gPSBjdHguZG9jLnNjaGVtYTtcbiAgICAgICAgaWYgKHRhZ3Muc29tZSh0ZXN0KSB8fCBjb21wYXQ/LnNvbWUodGVzdCkpXG4gICAgICAgICAgICByZXR1cm4gcXVvdGVkU3RyaW5nKHZhbHVlLCBjdHgpO1xuICAgIH1cbiAgICByZXR1cm4gaW1wbGljaXRLZXlcbiAgICAgICAgPyBzdHJcbiAgICAgICAgOiBmb2xkRmxvd0xpbmVzKHN0ciwgaW5kZW50LCBGT0xEX0ZMT1csIGdldEZvbGRPcHRpb25zKGN0eCwgZmFsc2UpKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeVN0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICBjb25zdCB7IGltcGxpY2l0S2V5LCBpbkZsb3cgfSA9IGN0eDtcbiAgICBjb25zdCBzcyA9IHR5cGVvZiBpdGVtLnZhbHVlID09PSAnc3RyaW5nJ1xuICAgICAgICA/IGl0ZW1cbiAgICAgICAgOiBPYmplY3QuYXNzaWduKHt9LCBpdGVtLCB7IHZhbHVlOiBTdHJpbmcoaXRlbS52YWx1ZSkgfSk7XG4gICAgbGV0IHsgdHlwZSB9ID0gaXRlbTtcbiAgICBpZiAodHlwZSAhPT0gU2NhbGFyLlFVT1RFX0RPVUJMRSkge1xuICAgICAgICAvLyBmb3JjZSBkb3VibGUgcXVvdGVzIG9uIGNvbnRyb2wgY2hhcmFjdGVycyAmIHVucGFpcmVkIHN1cnJvZ2F0ZXNcbiAgICAgICAgaWYgKC9bXFx4MDAtXFx4MDhcXHgwYi1cXHgxZlxceDdmLVxceDlmXFx1e0Q4MDB9LVxcdXtERkZGfV0vdS50ZXN0KHNzLnZhbHVlKSlcbiAgICAgICAgICAgIHR5cGUgPSBTY2FsYXIuUVVPVEVfRE9VQkxFO1xuICAgIH1cbiAgICBjb25zdCBfc3RyaW5naWZ5ID0gKF90eXBlKSA9PiB7XG4gICAgICAgIHN3aXRjaCAoX3R5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLkJMT0NLX0ZPTERFRDpcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLkJMT0NLX0xJVEVSQUw6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGltcGxpY2l0S2V5IHx8IGluRmxvd1xuICAgICAgICAgICAgICAgICAgICA/IHF1b3RlZFN0cmluZyhzcy52YWx1ZSwgY3R4KSAvLyBibG9ja3MgYXJlIG5vdCB2YWxpZCBpbnNpZGUgZmxvdyBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgICAgIDogYmxvY2tTdHJpbmcoc3MsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgICAgICAgICBjYXNlIFNjYWxhci5RVU9URV9ET1VCTEU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRvdWJsZVF1b3RlZFN0cmluZyhzcy52YWx1ZSwgY3R4KTtcbiAgICAgICAgICAgIGNhc2UgU2NhbGFyLlFVT1RFX1NJTkdMRTpcbiAgICAgICAgICAgICAgICByZXR1cm4gc2luZ2xlUXVvdGVkU3RyaW5nKHNzLnZhbHVlLCBjdHgpO1xuICAgICAgICAgICAgY2FzZSBTY2FsYXIuUExBSU46XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBsYWluU3RyaW5nKHNzLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgbGV0IHJlcyA9IF9zdHJpbmdpZnkodHlwZSk7XG4gICAgaWYgKHJlcyA9PT0gbnVsbCkge1xuICAgICAgICBjb25zdCB7IGRlZmF1bHRLZXlUeXBlLCBkZWZhdWx0U3RyaW5nVHlwZSB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHQgPSAoaW1wbGljaXRLZXkgJiYgZGVmYXVsdEtleVR5cGUpIHx8IGRlZmF1bHRTdHJpbmdUeXBlO1xuICAgICAgICByZXMgPSBfc3RyaW5naWZ5KHQpO1xuICAgICAgICBpZiAocmVzID09PSBudWxsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBkZWZhdWx0IHN0cmluZyB0eXBlICR7dH1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuZXhwb3J0IHsgc3RyaW5naWZ5U3RyaW5nIH07XG4iLCJpbXBvcnQgeyBhbmNob3JJc1ZhbGlkIH0gZnJvbSAnLi4vZG9jL2FuY2hvcnMuanMnO1xuaW1wb3J0IHsgaXNQYWlyLCBpc0FsaWFzLCBpc05vZGUsIGlzU2NhbGFyLCBpc0NvbGxlY3Rpb24gfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlDb21tZW50IH0gZnJvbSAnLi9zdHJpbmdpZnlDb21tZW50LmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVN0cmluZyB9IGZyb20gJy4vc3RyaW5naWZ5U3RyaW5nLmpzJztcblxuZnVuY3Rpb24gY3JlYXRlU3RyaW5naWZ5Q29udGV4dChkb2MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBvcHQgPSBPYmplY3QuYXNzaWduKHtcbiAgICAgICAgYmxvY2tRdW90ZTogdHJ1ZSxcbiAgICAgICAgY29tbWVudFN0cmluZzogc3RyaW5naWZ5Q29tbWVudCxcbiAgICAgICAgZGVmYXVsdEtleVR5cGU6IG51bGwsXG4gICAgICAgIGRlZmF1bHRTdHJpbmdUeXBlOiAnUExBSU4nLFxuICAgICAgICBkaXJlY3RpdmVzOiBudWxsLFxuICAgICAgICBkb3VibGVRdW90ZWRBc0pTT046IGZhbHNlLFxuICAgICAgICBkb3VibGVRdW90ZWRNaW5NdWx0aUxpbmVMZW5ndGg6IDQwLFxuICAgICAgICBmYWxzZVN0cjogJ2ZhbHNlJyxcbiAgICAgICAgZmxvd0NvbGxlY3Rpb25QYWRkaW5nOiB0cnVlLFxuICAgICAgICBpbmRlbnRTZXE6IHRydWUsXG4gICAgICAgIGxpbmVXaWR0aDogODAsXG4gICAgICAgIG1pbkNvbnRlbnRXaWR0aDogMjAsXG4gICAgICAgIG51bGxTdHI6ICdudWxsJyxcbiAgICAgICAgc2ltcGxlS2V5czogZmFsc2UsXG4gICAgICAgIHNpbmdsZVF1b3RlOiBudWxsLFxuICAgICAgICB0cnVlU3RyOiAndHJ1ZScsXG4gICAgICAgIHZlcmlmeUFsaWFzT3JkZXI6IHRydWVcbiAgICB9LCBkb2Muc2NoZW1hLnRvU3RyaW5nT3B0aW9ucywgb3B0aW9ucyk7XG4gICAgbGV0IGluRmxvdztcbiAgICBzd2l0Y2ggKG9wdC5jb2xsZWN0aW9uU3R5bGUpIHtcbiAgICAgICAgY2FzZSAnYmxvY2snOlxuICAgICAgICAgICAgaW5GbG93ID0gZmFsc2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZmxvdyc6XG4gICAgICAgICAgICBpbkZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICBpbkZsb3cgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBhbmNob3JzOiBuZXcgU2V0KCksXG4gICAgICAgIGRvYyxcbiAgICAgICAgZmxvd0NvbGxlY3Rpb25QYWRkaW5nOiBvcHQuZmxvd0NvbGxlY3Rpb25QYWRkaW5nID8gJyAnIDogJycsXG4gICAgICAgIGluZGVudDogJycsXG4gICAgICAgIGluZGVudFN0ZXA6IHR5cGVvZiBvcHQuaW5kZW50ID09PSAnbnVtYmVyJyA/ICcgJy5yZXBlYXQob3B0LmluZGVudCkgOiAnICAnLFxuICAgICAgICBpbkZsb3csXG4gICAgICAgIG9wdGlvbnM6IG9wdFxuICAgIH07XG59XG5mdW5jdGlvbiBnZXRUYWdPYmplY3QodGFncywgaXRlbSkge1xuICAgIGlmIChpdGVtLnRhZykge1xuICAgICAgICBjb25zdCBtYXRjaCA9IHRhZ3MuZmlsdGVyKHQgPT4gdC50YWcgPT09IGl0ZW0udGFnKTtcbiAgICAgICAgaWYgKG1hdGNoLmxlbmd0aCA+IDApXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2guZmluZCh0ID0+IHQuZm9ybWF0ID09PSBpdGVtLmZvcm1hdCkgPz8gbWF0Y2hbMF07XG4gICAgfVxuICAgIGxldCB0YWdPYmogPSB1bmRlZmluZWQ7XG4gICAgbGV0IG9iajtcbiAgICBpZiAoaXNTY2FsYXIoaXRlbSkpIHtcbiAgICAgICAgb2JqID0gaXRlbS52YWx1ZTtcbiAgICAgICAgbGV0IG1hdGNoID0gdGFncy5maWx0ZXIodCA9PiB0LmlkZW50aWZ5Py4ob2JqKSk7XG4gICAgICAgIGlmIChtYXRjaC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjb25zdCB0ZXN0TWF0Y2ggPSBtYXRjaC5maWx0ZXIodCA9PiB0LnRlc3QpO1xuICAgICAgICAgICAgaWYgKHRlc3RNYXRjaC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgICAgIG1hdGNoID0gdGVzdE1hdGNoO1xuICAgICAgICB9XG4gICAgICAgIHRhZ09iaiA9XG4gICAgICAgICAgICBtYXRjaC5maW5kKHQgPT4gdC5mb3JtYXQgPT09IGl0ZW0uZm9ybWF0KSA/PyBtYXRjaC5maW5kKHQgPT4gIXQuZm9ybWF0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIG9iaiA9IGl0ZW07XG4gICAgICAgIHRhZ09iaiA9IHRhZ3MuZmluZCh0ID0+IHQubm9kZUNsYXNzICYmIG9iaiBpbnN0YW5jZW9mIHQubm9kZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKCF0YWdPYmopIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IG9iaj8uY29uc3RydWN0b3I/Lm5hbWUgPz8gdHlwZW9mIG9iajtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUYWcgbm90IHJlc29sdmVkIGZvciAke25hbWV9IHZhbHVlYCk7XG4gICAgfVxuICAgIHJldHVybiB0YWdPYmo7XG59XG4vLyBuZWVkcyB0byBiZSBjYWxsZWQgYmVmb3JlIHZhbHVlIHN0cmluZ2lmaWVyIHRvIGFsbG93IGZvciBjaXJjdWxhciBhbmNob3IgcmVmc1xuZnVuY3Rpb24gc3RyaW5naWZ5UHJvcHMobm9kZSwgdGFnT2JqLCB7IGFuY2hvcnMsIGRvYyB9KSB7XG4gICAgaWYgKCFkb2MuZGlyZWN0aXZlcylcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIGNvbnN0IHByb3BzID0gW107XG4gICAgY29uc3QgYW5jaG9yID0gKGlzU2NhbGFyKG5vZGUpIHx8IGlzQ29sbGVjdGlvbihub2RlKSkgJiYgbm9kZS5hbmNob3I7XG4gICAgaWYgKGFuY2hvciAmJiBhbmNob3JJc1ZhbGlkKGFuY2hvcikpIHtcbiAgICAgICAgYW5jaG9ycy5hZGQoYW5jaG9yKTtcbiAgICAgICAgcHJvcHMucHVzaChgJiR7YW5jaG9yfWApO1xuICAgIH1cbiAgICBjb25zdCB0YWcgPSBub2RlLnRhZyA/IG5vZGUudGFnIDogdGFnT2JqLmRlZmF1bHQgPyBudWxsIDogdGFnT2JqLnRhZztcbiAgICBpZiAodGFnKVxuICAgICAgICBwcm9wcy5wdXNoKGRvYy5kaXJlY3RpdmVzLnRhZ1N0cmluZyh0YWcpKTtcbiAgICByZXR1cm4gcHJvcHMuam9pbignICcpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5KGl0ZW0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgIGlmIChpc1BhaXIoaXRlbSkpXG4gICAgICAgIHJldHVybiBpdGVtLnRvU3RyaW5nKGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCk7XG4gICAgaWYgKGlzQWxpYXMoaXRlbSkpIHtcbiAgICAgICAgaWYgKGN0eC5kb2MuZGlyZWN0aXZlcylcbiAgICAgICAgICAgIHJldHVybiBpdGVtLnRvU3RyaW5nKGN0eCk7XG4gICAgICAgIGlmIChjdHgucmVzb2x2ZWRBbGlhc2VzPy5oYXMoaXRlbSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYENhbm5vdCBzdHJpbmdpZnkgY2lyY3VsYXIgc3RydWN0dXJlIHdpdGhvdXQgYWxpYXMgbm9kZXNgKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChjdHgucmVzb2x2ZWRBbGlhc2VzKVxuICAgICAgICAgICAgICAgIGN0eC5yZXNvbHZlZEFsaWFzZXMuYWRkKGl0ZW0pO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGN0eC5yZXNvbHZlZEFsaWFzZXMgPSBuZXcgU2V0KFtpdGVtXSk7XG4gICAgICAgICAgICBpdGVtID0gaXRlbS5yZXNvbHZlKGN0eC5kb2MpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGxldCB0YWdPYmogPSB1bmRlZmluZWQ7XG4gICAgY29uc3Qgbm9kZSA9IGlzTm9kZShpdGVtKVxuICAgICAgICA/IGl0ZW1cbiAgICAgICAgOiBjdHguZG9jLmNyZWF0ZU5vZGUoaXRlbSwgeyBvblRhZ09iajogbyA9PiAodGFnT2JqID0gbykgfSk7XG4gICAgaWYgKCF0YWdPYmopXG4gICAgICAgIHRhZ09iaiA9IGdldFRhZ09iamVjdChjdHguZG9jLnNjaGVtYS50YWdzLCBub2RlKTtcbiAgICBjb25zdCBwcm9wcyA9IHN0cmluZ2lmeVByb3BzKG5vZGUsIHRhZ09iaiwgY3R4KTtcbiAgICBpZiAocHJvcHMubGVuZ3RoID4gMClcbiAgICAgICAgY3R4LmluZGVudEF0U3RhcnQgPSAoY3R4LmluZGVudEF0U3RhcnQgPz8gMCkgKyBwcm9wcy5sZW5ndGggKyAxO1xuICAgIGNvbnN0IHN0ciA9IHR5cGVvZiB0YWdPYmouc3RyaW5naWZ5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdGFnT2JqLnN0cmluZ2lmeShub2RlLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApXG4gICAgICAgIDogaXNTY2FsYXIobm9kZSlcbiAgICAgICAgICAgID8gc3RyaW5naWZ5U3RyaW5nKG5vZGUsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcClcbiAgICAgICAgICAgIDogbm9kZS50b1N0cmluZyhjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIGlmICghcHJvcHMpXG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgcmV0dXJuIGlzU2NhbGFyKG5vZGUpIHx8IHN0clswXSA9PT0gJ3snIHx8IHN0clswXSA9PT0gJ1snXG4gICAgICAgID8gYCR7cHJvcHN9ICR7c3RyfWBcbiAgICAgICAgOiBgJHtwcm9wc31cXG4ke2N0eC5pbmRlbnR9JHtzdHJ9YDtcbn1cblxuZXhwb3J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCwgc3RyaW5naWZ5IH07XG4iLCJmdW5jdGlvbiBkZWJ1Zyhsb2dMZXZlbCwgLi4ubWVzc2FnZXMpIHtcbiAgICBpZiAobG9nTGV2ZWwgPT09ICdkZWJ1ZycpXG4gICAgICAgIGNvbnNvbGUubG9nKC4uLm1lc3NhZ2VzKTtcbn1cbmZ1bmN0aW9uIHdhcm4obG9nTGV2ZWwsIHdhcm5pbmcpIHtcbiAgICBpZiAobG9nTGV2ZWwgPT09ICdkZWJ1ZycgfHwgbG9nTGV2ZWwgPT09ICd3YXJuJykge1xuICAgICAgICBjb25zb2xlLndhcm4od2FybmluZyk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBkZWJ1Zywgd2FybiB9O1xuIiwiaW1wb3J0IHsgaXNTY2FsYXIsIGlzQWxpYXMsIGlzU2VxLCBpc01hcCB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5cbi8vIElmIHRoZSB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggYSBtZXJnZSBrZXkgaXMgYSBzaW5nbGUgbWFwcGluZyBub2RlLCBlYWNoIG9mXG4vLyBpdHMga2V5L3ZhbHVlIHBhaXJzIGlzIGluc2VydGVkIGludG8gdGhlIGN1cnJlbnQgbWFwcGluZywgdW5sZXNzIHRoZSBrZXlcbi8vIGFscmVhZHkgZXhpc3RzIGluIGl0LiBJZiB0aGUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBtZXJnZSBrZXkgaXMgYVxuLy8gc2VxdWVuY2UsIHRoZW4gdGhpcyBzZXF1ZW5jZSBpcyBleHBlY3RlZCB0byBjb250YWluIG1hcHBpbmcgbm9kZXMgYW5kIGVhY2hcbi8vIG9mIHRoZXNlIG5vZGVzIGlzIG1lcmdlZCBpbiB0dXJuIGFjY29yZGluZyB0byBpdHMgb3JkZXIgaW4gdGhlIHNlcXVlbmNlLlxuLy8gS2V5cyBpbiBtYXBwaW5nIG5vZGVzIGVhcmxpZXIgaW4gdGhlIHNlcXVlbmNlIG92ZXJyaWRlIGtleXMgc3BlY2lmaWVkIGluXG4vLyBsYXRlciBtYXBwaW5nIG5vZGVzLiAtLSBodHRwOi8veWFtbC5vcmcvdHlwZS9tZXJnZS5odG1sXG5jb25zdCBNRVJHRV9LRVkgPSAnPDwnO1xuY29uc3QgbWVyZ2UgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09PSBNRVJHRV9LRVkgfHxcbiAgICAgICAgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgJiYgdmFsdWUuZGVzY3JpcHRpb24gPT09IE1FUkdFX0tFWSksXG4gICAgZGVmYXVsdDogJ2tleScsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UnLFxuICAgIHRlc3Q6IC9ePDwkLyxcbiAgICByZXNvbHZlOiAoKSA9PiBPYmplY3QuYXNzaWduKG5ldyBTY2FsYXIoU3ltYm9sKE1FUkdFX0tFWSkpLCB7XG4gICAgICAgIGFkZFRvSlNNYXA6IGFkZE1lcmdlVG9KU01hcFxuICAgIH0pLFxuICAgIHN0cmluZ2lmeTogKCkgPT4gTUVSR0VfS0VZXG59O1xuY29uc3QgaXNNZXJnZUtleSA9IChjdHgsIGtleSkgPT4gKG1lcmdlLmlkZW50aWZ5KGtleSkgfHxcbiAgICAoaXNTY2FsYXIoa2V5KSAmJlxuICAgICAgICAoIWtleS50eXBlIHx8IGtleS50eXBlID09PSBTY2FsYXIuUExBSU4pICYmXG4gICAgICAgIG1lcmdlLmlkZW50aWZ5KGtleS52YWx1ZSkpKSAmJlxuICAgIGN0eD8uZG9jLnNjaGVtYS50YWdzLnNvbWUodGFnID0+IHRhZy50YWcgPT09IG1lcmdlLnRhZyAmJiB0YWcuZGVmYXVsdCk7XG5mdW5jdGlvbiBhZGRNZXJnZVRvSlNNYXAoY3R4LCBtYXAsIHZhbHVlKSB7XG4gICAgdmFsdWUgPSBjdHggJiYgaXNBbGlhcyh2YWx1ZSkgPyB2YWx1ZS5yZXNvbHZlKGN0eC5kb2MpIDogdmFsdWU7XG4gICAgaWYgKGlzU2VxKHZhbHVlKSlcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiB2YWx1ZS5pdGVtcylcbiAgICAgICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIGl0KTtcbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSlcbiAgICAgICAgZm9yIChjb25zdCBpdCBvZiB2YWx1ZSlcbiAgICAgICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIGl0KTtcbiAgICBlbHNlXG4gICAgICAgIG1lcmdlVmFsdWUoY3R4LCBtYXAsIHZhbHVlKTtcbn1cbmZ1bmN0aW9uIG1lcmdlVmFsdWUoY3R4LCBtYXAsIHZhbHVlKSB7XG4gICAgY29uc3Qgc291cmNlID0gY3R4ICYmIGlzQWxpYXModmFsdWUpID8gdmFsdWUucmVzb2x2ZShjdHguZG9jKSA6IHZhbHVlO1xuICAgIGlmICghaXNNYXAoc291cmNlKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNZXJnZSBzb3VyY2VzIG11c3QgYmUgbWFwcyBvciBtYXAgYWxpYXNlcycpO1xuICAgIGNvbnN0IHNyY01hcCA9IHNvdXJjZS50b0pTT04obnVsbCwgY3R4LCBNYXApO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIHNyY01hcCkge1xuICAgICAgICBpZiAobWFwIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBpZiAoIW1hcC5oYXMoa2V5KSlcbiAgICAgICAgICAgICAgICBtYXAuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hcCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgbWFwLmFkZChrZXkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobWFwLCBrZXkpKSB7XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWFwLCBrZXksIHtcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cblxuZXhwb3J0IHsgYWRkTWVyZ2VUb0pTTWFwLCBpc01lcmdlS2V5LCBtZXJnZSB9O1xuIiwiaW1wb3J0IHsgd2FybiB9IGZyb20gJy4uL2xvZy5qcyc7XG5pbXBvcnQgeyBpc01lcmdlS2V5LCBhZGRNZXJnZVRvSlNNYXAgfSBmcm9tICcuLi9zY2hlbWEveWFtbC0xLjEvbWVyZ2UuanMnO1xuaW1wb3J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCB9IGZyb20gJy4uL3N0cmluZ2lmeS9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLmpzJztcblxuZnVuY3Rpb24gYWRkUGFpclRvSlNNYXAoY3R4LCBtYXAsIHsga2V5LCB2YWx1ZSB9KSB7XG4gICAgaWYgKGlzTm9kZShrZXkpICYmIGtleS5hZGRUb0pTTWFwKVxuICAgICAgICBrZXkuYWRkVG9KU01hcChjdHgsIG1hcCwgdmFsdWUpO1xuICAgIC8vIFRPRE86IFNob3VsZCBkcm9wIHRoaXMgc3BlY2lhbCBjYXNlIGZvciBiYXJlIDw8IGhhbmRsaW5nXG4gICAgZWxzZSBpZiAoaXNNZXJnZUtleShjdHgsIGtleSkpXG4gICAgICAgIGFkZE1lcmdlVG9KU01hcChjdHgsIG1hcCwgdmFsdWUpO1xuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBqc0tleSA9IHRvSlMoa2V5LCAnJywgY3R4KTtcbiAgICAgICAgaWYgKG1hcCBpbnN0YW5jZW9mIE1hcCkge1xuICAgICAgICAgICAgbWFwLnNldChqc0tleSwgdG9KUyh2YWx1ZSwganNLZXksIGN0eCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hcCBpbnN0YW5jZW9mIFNldCkge1xuICAgICAgICAgICAgbWFwLmFkZChqc0tleSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBzdHJpbmdLZXkgPSBzdHJpbmdpZnlLZXkoa2V5LCBqc0tleSwgY3R4KTtcbiAgICAgICAgICAgIGNvbnN0IGpzVmFsdWUgPSB0b0pTKHZhbHVlLCBzdHJpbmdLZXksIGN0eCk7XG4gICAgICAgICAgICBpZiAoc3RyaW5nS2V5IGluIG1hcClcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobWFwLCBzdHJpbmdLZXksIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGpzVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBtYXBbc3RyaW5nS2V5XSA9IGpzVmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcDtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUtleShrZXksIGpzS2V5LCBjdHgpIHtcbiAgICBpZiAoanNLZXkgPT09IG51bGwpXG4gICAgICAgIHJldHVybiAnJztcbiAgICBpZiAodHlwZW9mIGpzS2V5ICE9PSAnb2JqZWN0JylcbiAgICAgICAgcmV0dXJuIFN0cmluZyhqc0tleSk7XG4gICAgaWYgKGlzTm9kZShrZXkpICYmIGN0eD8uZG9jKSB7XG4gICAgICAgIGNvbnN0IHN0ckN0eCA9IGNyZWF0ZVN0cmluZ2lmeUNvbnRleHQoY3R4LmRvYywge30pO1xuICAgICAgICBzdHJDdHguYW5jaG9ycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgZm9yIChjb25zdCBub2RlIG9mIGN0eC5hbmNob3JzLmtleXMoKSlcbiAgICAgICAgICAgIHN0ckN0eC5hbmNob3JzLmFkZChub2RlLmFuY2hvcik7XG4gICAgICAgIHN0ckN0eC5pbkZsb3cgPSB0cnVlO1xuICAgICAgICBzdHJDdHguaW5TdHJpbmdpZnlLZXkgPSB0cnVlO1xuICAgICAgICBjb25zdCBzdHJLZXkgPSBrZXkudG9TdHJpbmcoc3RyQ3R4KTtcbiAgICAgICAgaWYgKCFjdHgubWFwS2V5V2FybmVkKSB7XG4gICAgICAgICAgICBsZXQganNvblN0ciA9IEpTT04uc3RyaW5naWZ5KHN0cktleSk7XG4gICAgICAgICAgICBpZiAoanNvblN0ci5sZW5ndGggPiA0MClcbiAgICAgICAgICAgICAgICBqc29uU3RyID0ganNvblN0ci5zdWJzdHJpbmcoMCwgMzYpICsgJy4uLlwiJztcbiAgICAgICAgICAgIHdhcm4oY3R4LmRvYy5vcHRpb25zLmxvZ0xldmVsLCBgS2V5cyB3aXRoIGNvbGxlY3Rpb24gdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWQgZHVlIHRvIEpTIE9iamVjdCByZXN0cmljdGlvbnM6ICR7anNvblN0cn0uIFNldCBtYXBBc01hcDogdHJ1ZSB0byB1c2Ugb2JqZWN0IGtleXMuYCk7XG4gICAgICAgICAgICBjdHgubWFwS2V5V2FybmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyS2V5O1xuICAgIH1cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoanNLZXkpO1xufVxuXG5leHBvcnQgeyBhZGRQYWlyVG9KU01hcCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4uL2RvYy9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeVBhaXIgfSBmcm9tICcuLi9zdHJpbmdpZnkvc3RyaW5naWZ5UGFpci5qcyc7XG5pbXBvcnQgeyBhZGRQYWlyVG9KU01hcCB9IGZyb20gJy4vYWRkUGFpclRvSlNNYXAuanMnO1xuaW1wb3J0IHsgTk9ERV9UWVBFLCBQQUlSLCBpc05vZGUgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcblxuZnVuY3Rpb24gY3JlYXRlUGFpcihrZXksIHZhbHVlLCBjdHgpIHtcbiAgICBjb25zdCBrID0gY3JlYXRlTm9kZShrZXksIHVuZGVmaW5lZCwgY3R4KTtcbiAgICBjb25zdCB2ID0gY3JlYXRlTm9kZSh2YWx1ZSwgdW5kZWZpbmVkLCBjdHgpO1xuICAgIHJldHVybiBuZXcgUGFpcihrLCB2KTtcbn1cbmNsYXNzIFBhaXIge1xuICAgIGNvbnN0cnVjdG9yKGtleSwgdmFsdWUgPSBudWxsKSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBOT0RFX1RZUEUsIHsgdmFsdWU6IFBBSVIgfSk7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgfVxuICAgIGNsb25lKHNjaGVtYSkge1xuICAgICAgICBsZXQgeyBrZXksIHZhbHVlIH0gPSB0aGlzO1xuICAgICAgICBpZiAoaXNOb2RlKGtleSkpXG4gICAgICAgICAgICBrZXkgPSBrZXkuY2xvbmUoc2NoZW1hKTtcbiAgICAgICAgaWYgKGlzTm9kZSh2YWx1ZSkpXG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLmNsb25lKHNjaGVtYSk7XG4gICAgICAgIHJldHVybiBuZXcgUGFpcihrZXksIHZhbHVlKTtcbiAgICB9XG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAgICBjb25zdCBwYWlyID0gY3R4Py5tYXBBc01hcCA/IG5ldyBNYXAoKSA6IHt9O1xuICAgICAgICByZXR1cm4gYWRkUGFpclRvSlNNYXAoY3R4LCBwYWlyLCB0aGlzKTtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIHJldHVybiBjdHg/LmRvY1xuICAgICAgICAgICAgPyBzdHJpbmdpZnlQYWlyKHRoaXMsIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcClcbiAgICAgICAgICAgIDogSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH07XG4iLCJpbXBvcnQgeyBpc0NvbGxlY3Rpb24sIGlzTm9kZSwgaXNTY2FsYXIsIGlzU2VxIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeSB9IGZyb20gJy4vc3RyaW5naWZ5LmpzJztcbmltcG9ydCB7IGxpbmVDb21tZW50LCBpbmRlbnRDb21tZW50IH0gZnJvbSAnLi9zdHJpbmdpZnlDb21tZW50LmpzJztcblxuZnVuY3Rpb24gc3RyaW5naWZ5UGFpcih7IGtleSwgdmFsdWUgfSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgY29uc3QgeyBhbGxOdWxsVmFsdWVzLCBkb2MsIGluZGVudCwgaW5kZW50U3RlcCwgb3B0aW9uczogeyBjb21tZW50U3RyaW5nLCBpbmRlbnRTZXEsIHNpbXBsZUtleXMgfSB9ID0gY3R4O1xuICAgIGxldCBrZXlDb21tZW50ID0gKGlzTm9kZShrZXkpICYmIGtleS5jb21tZW50KSB8fCBudWxsO1xuICAgIGlmIChzaW1wbGVLZXlzKSB7XG4gICAgICAgIGlmIChrZXlDb21tZW50KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dpdGggc2ltcGxlIGtleXMsIGtleSBub2RlcyBjYW5ub3QgaGF2ZSBjb21tZW50cycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0NvbGxlY3Rpb24oa2V5KSB8fCAoIWlzTm9kZShrZXkpICYmIHR5cGVvZiBrZXkgPT09ICdvYmplY3QnKSkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gJ1dpdGggc2ltcGxlIGtleXMsIGNvbGxlY3Rpb24gY2Fubm90IGJlIHVzZWQgYXMgYSBrZXkgdmFsdWUnO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGV4cGxpY2l0S2V5ID0gIXNpbXBsZUtleXMgJiZcbiAgICAgICAgKCFrZXkgfHxcbiAgICAgICAgICAgIChrZXlDb21tZW50ICYmIHZhbHVlID09IG51bGwgJiYgIWN0eC5pbkZsb3cpIHx8XG4gICAgICAgICAgICBpc0NvbGxlY3Rpb24oa2V5KSB8fFxuICAgICAgICAgICAgKGlzU2NhbGFyKGtleSlcbiAgICAgICAgICAgICAgICA/IGtleS50eXBlID09PSBTY2FsYXIuQkxPQ0tfRk9MREVEIHx8IGtleS50eXBlID09PSBTY2FsYXIuQkxPQ0tfTElURVJBTFxuICAgICAgICAgICAgICAgIDogdHlwZW9mIGtleSA9PT0gJ29iamVjdCcpKTtcbiAgICBjdHggPSBPYmplY3QuYXNzaWduKHt9LCBjdHgsIHtcbiAgICAgICAgYWxsTnVsbFZhbHVlczogZmFsc2UsXG4gICAgICAgIGltcGxpY2l0S2V5OiAhZXhwbGljaXRLZXkgJiYgKHNpbXBsZUtleXMgfHwgIWFsbE51bGxWYWx1ZXMpLFxuICAgICAgICBpbmRlbnQ6IGluZGVudCArIGluZGVudFN0ZXBcbiAgICB9KTtcbiAgICBsZXQga2V5Q29tbWVudERvbmUgPSBmYWxzZTtcbiAgICBsZXQgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgbGV0IHN0ciA9IHN0cmluZ2lmeShrZXksIGN0eCwgKCkgPT4gKGtleUNvbW1lbnREb25lID0gdHJ1ZSksICgpID0+IChjaG9tcEtlZXAgPSB0cnVlKSk7XG4gICAgaWYgKCFleHBsaWNpdEtleSAmJiAhY3R4LmluRmxvdyAmJiBzdHIubGVuZ3RoID4gMTAyNCkge1xuICAgICAgICBpZiAoc2ltcGxlS2V5cylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2l0aCBzaW1wbGUga2V5cywgc2luZ2xlIGxpbmUgc2NhbGFyIG11c3Qgbm90IHNwYW4gbW9yZSB0aGFuIDEwMjQgY2hhcmFjdGVycycpO1xuICAgICAgICBleHBsaWNpdEtleSA9IHRydWU7XG4gICAgfVxuICAgIGlmIChjdHguaW5GbG93KSB7XG4gICAgICAgIGlmIChhbGxOdWxsVmFsdWVzIHx8IHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIGlmIChrZXlDb21tZW50RG9uZSAmJiBvbkNvbW1lbnQpXG4gICAgICAgICAgICAgICAgb25Db21tZW50KCk7XG4gICAgICAgICAgICByZXR1cm4gc3RyID09PSAnJyA/ICc/JyA6IGV4cGxpY2l0S2V5ID8gYD8gJHtzdHJ9YCA6IHN0cjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICgoYWxsTnVsbFZhbHVlcyAmJiAhc2ltcGxlS2V5cykgfHwgKHZhbHVlID09IG51bGwgJiYgZXhwbGljaXRLZXkpKSB7XG4gICAgICAgIHN0ciA9IGA/ICR7c3RyfWA7XG4gICAgICAgIGlmIChrZXlDb21tZW50ICYmICFrZXlDb21tZW50RG9uZSkge1xuICAgICAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyhrZXlDb21tZW50KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2hvbXBLZWVwICYmIG9uQ2hvbXBLZWVwKVxuICAgICAgICAgICAgb25DaG9tcEtlZXAoKTtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgaWYgKGtleUNvbW1lbnREb25lKVxuICAgICAgICBrZXlDb21tZW50ID0gbnVsbDtcbiAgICBpZiAoZXhwbGljaXRLZXkpIHtcbiAgICAgICAgaWYgKGtleUNvbW1lbnQpXG4gICAgICAgICAgICBzdHIgKz0gbGluZUNvbW1lbnQoc3RyLCBjdHguaW5kZW50LCBjb21tZW50U3RyaW5nKGtleUNvbW1lbnQpKTtcbiAgICAgICAgc3RyID0gYD8gJHtzdHJ9XFxuJHtpbmRlbnR9OmA7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBzdHIgPSBgJHtzdHJ9OmA7XG4gICAgICAgIGlmIChrZXlDb21tZW50KVxuICAgICAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyhrZXlDb21tZW50KSk7XG4gICAgfVxuICAgIGxldCB2c2IsIHZjYiwgdmFsdWVDb21tZW50O1xuICAgIGlmIChpc05vZGUodmFsdWUpKSB7XG4gICAgICAgIHZzYiA9ICEhdmFsdWUuc3BhY2VCZWZvcmU7XG4gICAgICAgIHZjYiA9IHZhbHVlLmNvbW1lbnRCZWZvcmU7XG4gICAgICAgIHZhbHVlQ29tbWVudCA9IHZhbHVlLmNvbW1lbnQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB2c2IgPSBmYWxzZTtcbiAgICAgICAgdmNiID0gbnVsbDtcbiAgICAgICAgdmFsdWVDb21tZW50ID0gbnVsbDtcbiAgICAgICAgaWYgKHZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpXG4gICAgICAgICAgICB2YWx1ZSA9IGRvYy5jcmVhdGVOb2RlKHZhbHVlKTtcbiAgICB9XG4gICAgY3R4LmltcGxpY2l0S2V5ID0gZmFsc2U7XG4gICAgaWYgKCFleHBsaWNpdEtleSAmJiAha2V5Q29tbWVudCAmJiBpc1NjYWxhcih2YWx1ZSkpXG4gICAgICAgIGN0eC5pbmRlbnRBdFN0YXJ0ID0gc3RyLmxlbmd0aCArIDE7XG4gICAgY2hvbXBLZWVwID0gZmFsc2U7XG4gICAgaWYgKCFpbmRlbnRTZXEgJiZcbiAgICAgICAgaW5kZW50U3RlcC5sZW5ndGggPj0gMiAmJlxuICAgICAgICAhY3R4LmluRmxvdyAmJlxuICAgICAgICAhZXhwbGljaXRLZXkgJiZcbiAgICAgICAgaXNTZXEodmFsdWUpICYmXG4gICAgICAgICF2YWx1ZS5mbG93ICYmXG4gICAgICAgICF2YWx1ZS50YWcgJiZcbiAgICAgICAgIXZhbHVlLmFuY2hvcikge1xuICAgICAgICAvLyBJZiBpbmRlbnRTZXEgPT09IGZhbHNlLCBjb25zaWRlciAnLSAnIGFzIHBhcnQgb2YgaW5kZW50YXRpb24gd2hlcmUgcG9zc2libGVcbiAgICAgICAgY3R4LmluZGVudCA9IGN0eC5pbmRlbnQuc3Vic3RyaW5nKDIpO1xuICAgIH1cbiAgICBsZXQgdmFsdWVDb21tZW50RG9uZSA9IGZhbHNlO1xuICAgIGNvbnN0IHZhbHVlU3RyID0gc3RyaW5naWZ5KHZhbHVlLCBjdHgsICgpID0+ICh2YWx1ZUNvbW1lbnREb25lID0gdHJ1ZSksICgpID0+IChjaG9tcEtlZXAgPSB0cnVlKSk7XG4gICAgbGV0IHdzID0gJyAnO1xuICAgIGlmIChrZXlDb21tZW50IHx8IHZzYiB8fCB2Y2IpIHtcbiAgICAgICAgd3MgPSB2c2IgPyAnXFxuJyA6ICcnO1xuICAgICAgICBpZiAodmNiKSB7XG4gICAgICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcodmNiKTtcbiAgICAgICAgICAgIHdzICs9IGBcXG4ke2luZGVudENvbW1lbnQoY3MsIGN0eC5pbmRlbnQpfWA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlU3RyID09PSAnJyAmJiAhY3R4LmluRmxvdykge1xuICAgICAgICAgICAgaWYgKHdzID09PSAnXFxuJylcbiAgICAgICAgICAgICAgICB3cyA9ICdcXG5cXG4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgd3MgKz0gYFxcbiR7Y3R4LmluZGVudH1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKCFleHBsaWNpdEtleSAmJiBpc0NvbGxlY3Rpb24odmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHZzMCA9IHZhbHVlU3RyWzBdO1xuICAgICAgICBjb25zdCBubDAgPSB2YWx1ZVN0ci5pbmRleE9mKCdcXG4nKTtcbiAgICAgICAgY29uc3QgaGFzTmV3bGluZSA9IG5sMCAhPT0gLTE7XG4gICAgICAgIGNvbnN0IGZsb3cgPSBjdHguaW5GbG93ID8/IHZhbHVlLmZsb3cgPz8gdmFsdWUuaXRlbXMubGVuZ3RoID09PSAwO1xuICAgICAgICBpZiAoaGFzTmV3bGluZSB8fCAhZmxvdykge1xuICAgICAgICAgICAgbGV0IGhhc1Byb3BzTGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGhhc05ld2xpbmUgJiYgKHZzMCA9PT0gJyYnIHx8IHZzMCA9PT0gJyEnKSkge1xuICAgICAgICAgICAgICAgIGxldCBzcDAgPSB2YWx1ZVN0ci5pbmRleE9mKCcgJyk7XG4gICAgICAgICAgICAgICAgaWYgKHZzMCA9PT0gJyYnICYmXG4gICAgICAgICAgICAgICAgICAgIHNwMCAhPT0gLTEgJiZcbiAgICAgICAgICAgICAgICAgICAgc3AwIDwgbmwwICYmXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlU3RyW3NwMCArIDFdID09PSAnIScpIHtcbiAgICAgICAgICAgICAgICAgICAgc3AwID0gdmFsdWVTdHIuaW5kZXhPZignICcsIHNwMCArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoc3AwID09PSAtMSB8fCBubDAgPCBzcDApXG4gICAgICAgICAgICAgICAgICAgIGhhc1Byb3BzTGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWhhc1Byb3BzTGluZSlcbiAgICAgICAgICAgICAgICB3cyA9IGBcXG4ke2N0eC5pbmRlbnR9YDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZVN0ciA9PT0gJycgfHwgdmFsdWVTdHJbMF0gPT09ICdcXG4nKSB7XG4gICAgICAgIHdzID0gJyc7XG4gICAgfVxuICAgIHN0ciArPSB3cyArIHZhbHVlU3RyO1xuICAgIGlmIChjdHguaW5GbG93KSB7XG4gICAgICAgIGlmICh2YWx1ZUNvbW1lbnREb25lICYmIG9uQ29tbWVudClcbiAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgIH1cbiAgICBlbHNlIGlmICh2YWx1ZUNvbW1lbnQgJiYgIXZhbHVlQ29tbWVudERvbmUpIHtcbiAgICAgICAgc3RyICs9IGxpbmVDb21tZW50KHN0ciwgY3R4LmluZGVudCwgY29tbWVudFN0cmluZyh2YWx1ZUNvbW1lbnQpKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoY2hvbXBLZWVwICYmIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeVBhaXIgfTtcbiIsImltcG9ydCB7IGlzTm9kZSwgaXNQYWlyIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgbGluZUNvbW1lbnQsIGluZGVudENvbW1lbnQgfSBmcm9tICcuL3N0cmluZ2lmeUNvbW1lbnQuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlDb2xsZWN0aW9uKGNvbGxlY3Rpb24sIGN0eCwgb3B0aW9ucykge1xuICAgIGNvbnN0IGZsb3cgPSBjdHguaW5GbG93ID8/IGNvbGxlY3Rpb24uZmxvdztcbiAgICBjb25zdCBzdHJpbmdpZnkgPSBmbG93ID8gc3RyaW5naWZ5Rmxvd0NvbGxlY3Rpb24gOiBzdHJpbmdpZnlCbG9ja0NvbGxlY3Rpb247XG4gICAgcmV0dXJuIHN0cmluZ2lmeShjb2xsZWN0aW9uLCBjdHgsIG9wdGlvbnMpO1xufVxuZnVuY3Rpb24gc3RyaW5naWZ5QmxvY2tDb2xsZWN0aW9uKHsgY29tbWVudCwgaXRlbXMgfSwgY3R4LCB7IGJsb2NrSXRlbVByZWZpeCwgZmxvd0NoYXJzLCBpdGVtSW5kZW50LCBvbkNob21wS2VlcCwgb25Db21tZW50IH0pIHtcbiAgICBjb25zdCB7IGluZGVudCwgb3B0aW9uczogeyBjb21tZW50U3RyaW5nIH0gfSA9IGN0eDtcbiAgICBjb25zdCBpdGVtQ3R4ID0gT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7IGluZGVudDogaXRlbUluZGVudCwgdHlwZTogbnVsbCB9KTtcbiAgICBsZXQgY2hvbXBLZWVwID0gZmFsc2U7IC8vIGZsYWcgZm9yIHRoZSBwcmVjZWRpbmcgbm9kZSdzIHN0YXR1c1xuICAgIGNvbnN0IGxpbmVzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCBpdGVtID0gaXRlbXNbaV07XG4gICAgICAgIGxldCBjb21tZW50ID0gbnVsbDtcbiAgICAgICAgaWYgKGlzTm9kZShpdGVtKSkge1xuICAgICAgICAgICAgaWYgKCFjaG9tcEtlZXAgJiYgaXRlbS5zcGFjZUJlZm9yZSlcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgICAgIGFkZENvbW1lbnRCZWZvcmUoY3R4LCBsaW5lcywgaXRlbS5jb21tZW50QmVmb3JlLCBjaG9tcEtlZXApO1xuICAgICAgICAgICAgaWYgKGl0ZW0uY29tbWVudClcbiAgICAgICAgICAgICAgICBjb21tZW50ID0gaXRlbS5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzUGFpcihpdGVtKSkge1xuICAgICAgICAgICAgY29uc3QgaWsgPSBpc05vZGUoaXRlbS5rZXkpID8gaXRlbS5rZXkgOiBudWxsO1xuICAgICAgICAgICAgaWYgKGlrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjaG9tcEtlZXAgJiYgaWsuc3BhY2VCZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgICAgIGFkZENvbW1lbnRCZWZvcmUoY3R4LCBsaW5lcywgaWsuY29tbWVudEJlZm9yZSwgY2hvbXBLZWVwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjaG9tcEtlZXAgPSBmYWxzZTtcbiAgICAgICAgbGV0IHN0ciA9IHN0cmluZ2lmeShpdGVtLCBpdGVtQ3R4LCAoKSA9PiAoY29tbWVudCA9IG51bGwpLCAoKSA9PiAoY2hvbXBLZWVwID0gdHJ1ZSkpO1xuICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGl0ZW1JbmRlbnQsIGNvbW1lbnRTdHJpbmcoY29tbWVudCkpO1xuICAgICAgICBpZiAoY2hvbXBLZWVwICYmIGNvbW1lbnQpXG4gICAgICAgICAgICBjaG9tcEtlZXAgPSBmYWxzZTtcbiAgICAgICAgbGluZXMucHVzaChibG9ja0l0ZW1QcmVmaXggKyBzdHIpO1xuICAgIH1cbiAgICBsZXQgc3RyO1xuICAgIGlmIChsaW5lcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgc3RyID0gZmxvd0NoYXJzLnN0YXJ0ICsgZmxvd0NoYXJzLmVuZDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHN0ciA9IGxpbmVzWzBdO1xuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV07XG4gICAgICAgICAgICBzdHIgKz0gbGluZSA/IGBcXG4ke2luZGVudH0ke2xpbmV9YCA6ICdcXG4nO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgIHN0ciArPSAnXFxuJyArIGluZGVudENvbW1lbnQoY29tbWVudFN0cmluZyhjb21tZW50KSwgaW5kZW50KTtcbiAgICAgICAgaWYgKG9uQ29tbWVudClcbiAgICAgICAgICAgIG9uQ29tbWVudCgpO1xuICAgIH1cbiAgICBlbHNlIGlmIChjaG9tcEtlZXAgJiYgb25DaG9tcEtlZXApXG4gICAgICAgIG9uQ2hvbXBLZWVwKCk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeUZsb3dDb2xsZWN0aW9uKHsgaXRlbXMgfSwgY3R4LCB7IGZsb3dDaGFycywgaXRlbUluZGVudCB9KSB7XG4gICAgY29uc3QgeyBpbmRlbnQsIGluZGVudFN0ZXAsIGZsb3dDb2xsZWN0aW9uUGFkZGluZzogZmNQYWRkaW5nLCBvcHRpb25zOiB7IGNvbW1lbnRTdHJpbmcgfSB9ID0gY3R4O1xuICAgIGl0ZW1JbmRlbnQgKz0gaW5kZW50U3RlcDtcbiAgICBjb25zdCBpdGVtQ3R4ID0gT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7XG4gICAgICAgIGluZGVudDogaXRlbUluZGVudCxcbiAgICAgICAgaW5GbG93OiB0cnVlLFxuICAgICAgICB0eXBlOiBudWxsXG4gICAgfSk7XG4gICAgbGV0IHJlcU5ld2xpbmUgPSBmYWxzZTtcbiAgICBsZXQgbGluZXNBdFZhbHVlID0gMDtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2ldO1xuICAgICAgICBsZXQgY29tbWVudCA9IG51bGw7XG4gICAgICAgIGlmIChpc05vZGUoaXRlbSkpIHtcbiAgICAgICAgICAgIGlmIChpdGVtLnNwYWNlQmVmb3JlKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgYWRkQ29tbWVudEJlZm9yZShjdHgsIGxpbmVzLCBpdGVtLmNvbW1lbnRCZWZvcmUsIGZhbHNlKTtcbiAgICAgICAgICAgIGlmIChpdGVtLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgY29tbWVudCA9IGl0ZW0uY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BhaXIoaXRlbSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGlrID0gaXNOb2RlKGl0ZW0ua2V5KSA/IGl0ZW0ua2V5IDogbnVsbDtcbiAgICAgICAgICAgIGlmIChpaykge1xuICAgICAgICAgICAgICAgIGlmIChpay5zcGFjZUJlZm9yZSlcbiAgICAgICAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgICAgICAgICAgICAgYWRkQ29tbWVudEJlZm9yZShjdHgsIGxpbmVzLCBpay5jb21tZW50QmVmb3JlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlrLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgaXYgPSBpc05vZGUoaXRlbS52YWx1ZSkgPyBpdGVtLnZhbHVlIDogbnVsbDtcbiAgICAgICAgICAgIGlmIChpdikge1xuICAgICAgICAgICAgICAgIGlmIChpdi5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gaXYuY29tbWVudDtcbiAgICAgICAgICAgICAgICBpZiAoaXYuY29tbWVudEJlZm9yZSlcbiAgICAgICAgICAgICAgICAgICAgcmVxTmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdGVtLnZhbHVlID09IG51bGwgJiYgaWs/LmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBjb21tZW50ID0gaWsuY29tbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICBsZXQgc3RyID0gc3RyaW5naWZ5KGl0ZW0sIGl0ZW1DdHgsICgpID0+IChjb21tZW50ID0gbnVsbCkpO1xuICAgICAgICBpZiAoaSA8IGl0ZW1zLmxlbmd0aCAtIDEpXG4gICAgICAgICAgICBzdHIgKz0gJywnO1xuICAgICAgICBpZiAoY29tbWVudClcbiAgICAgICAgICAgIHN0ciArPSBsaW5lQ29tbWVudChzdHIsIGl0ZW1JbmRlbnQsIGNvbW1lbnRTdHJpbmcoY29tbWVudCkpO1xuICAgICAgICBpZiAoIXJlcU5ld2xpbmUgJiYgKGxpbmVzLmxlbmd0aCA+IGxpbmVzQXRWYWx1ZSB8fCBzdHIuaW5jbHVkZXMoJ1xcbicpKSlcbiAgICAgICAgICAgIHJlcU5ld2xpbmUgPSB0cnVlO1xuICAgICAgICBsaW5lcy5wdXNoKHN0cik7XG4gICAgICAgIGxpbmVzQXRWYWx1ZSA9IGxpbmVzLmxlbmd0aDtcbiAgICB9XG4gICAgY29uc3QgeyBzdGFydCwgZW5kIH0gPSBmbG93Q2hhcnM7XG4gICAgaWYgKGxpbmVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gc3RhcnQgKyBlbmQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIXJlcU5ld2xpbmUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGxpbmVzLnJlZHVjZSgoc3VtLCBsaW5lKSA9PiBzdW0gKyBsaW5lLmxlbmd0aCArIDIsIDIpO1xuICAgICAgICAgICAgcmVxTmV3bGluZSA9IGN0eC5vcHRpb25zLmxpbmVXaWR0aCA+IDAgJiYgbGVuID4gY3R4Lm9wdGlvbnMubGluZVdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIGlmIChyZXFOZXdsaW5lKSB7XG4gICAgICAgICAgICBsZXQgc3RyID0gc3RhcnQ7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpXG4gICAgICAgICAgICAgICAgc3RyICs9IGxpbmUgPyBgXFxuJHtpbmRlbnRTdGVwfSR7aW5kZW50fSR7bGluZX1gIDogJ1xcbic7XG4gICAgICAgICAgICByZXR1cm4gYCR7c3RyfVxcbiR7aW5kZW50fSR7ZW5kfWA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYCR7c3RhcnR9JHtmY1BhZGRpbmd9JHtsaW5lcy5qb2luKCcgJyl9JHtmY1BhZGRpbmd9JHtlbmR9YDtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZENvbW1lbnRCZWZvcmUoeyBpbmRlbnQsIG9wdGlvbnM6IHsgY29tbWVudFN0cmluZyB9IH0sIGxpbmVzLCBjb21tZW50LCBjaG9tcEtlZXApIHtcbiAgICBpZiAoY29tbWVudCAmJiBjaG9tcEtlZXApXG4gICAgICAgIGNvbW1lbnQgPSBjb21tZW50LnJlcGxhY2UoL15cXG4rLywgJycpO1xuICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgIGNvbnN0IGljID0gaW5kZW50Q29tbWVudChjb21tZW50U3RyaW5nKGNvbW1lbnQpLCBpbmRlbnQpO1xuICAgICAgICBsaW5lcy5wdXNoKGljLnRyaW1TdGFydCgpKTsgLy8gQXZvaWQgZG91YmxlIGluZGVudCBvbiBmaXJzdCBsaW5lXG4gICAgfVxufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlDb2xsZWN0aW9uIH07XG4iLCJpbXBvcnQgeyBzdHJpbmdpZnlDb2xsZWN0aW9uIH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeUNvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgYWRkUGFpclRvSlNNYXAgfSBmcm9tICcuL2FkZFBhaXJUb0pTTWFwLmpzJztcbmltcG9ydCB7IENvbGxlY3Rpb24gfSBmcm9tICcuL0NvbGxlY3Rpb24uanMnO1xuaW1wb3J0IHsgaXNQYWlyLCBpc1NjYWxhciwgTUFQIH0gZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH0gZnJvbSAnLi9QYWlyLmpzJztcbmltcG9ydCB7IGlzU2NhbGFyVmFsdWUgfSBmcm9tICcuL1NjYWxhci5qcyc7XG5cbmZ1bmN0aW9uIGZpbmRQYWlyKGl0ZW1zLCBrZXkpIHtcbiAgICBjb25zdCBrID0gaXNTY2FsYXIoa2V5KSA/IGtleS52YWx1ZSA6IGtleTtcbiAgICBmb3IgKGNvbnN0IGl0IG9mIGl0ZW1zKSB7XG4gICAgICAgIGlmIChpc1BhaXIoaXQpKSB7XG4gICAgICAgICAgICBpZiAoaXQua2V5ID09PSBrZXkgfHwgaXQua2V5ID09PSBrKVxuICAgICAgICAgICAgICAgIHJldHVybiBpdDtcbiAgICAgICAgICAgIGlmIChpc1NjYWxhcihpdC5rZXkpICYmIGl0LmtleS52YWx1ZSA9PT0gaylcbiAgICAgICAgICAgICAgICByZXR1cm4gaXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cbmNsYXNzIFlBTUxNYXAgZXh0ZW5kcyBDb2xsZWN0aW9uIHtcbiAgICBzdGF0aWMgZ2V0IHRhZ05hbWUoKSB7XG4gICAgICAgIHJldHVybiAndGFnOnlhbWwub3JnLDIwMDI6bWFwJztcbiAgICB9XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hKSB7XG4gICAgICAgIHN1cGVyKE1BUCwgc2NoZW1hKTtcbiAgICAgICAgdGhpcy5pdGVtcyA9IFtdO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIGdlbmVyaWMgY29sbGVjdGlvbiBwYXJzaW5nIG1ldGhvZCB0aGF0IGNhbiBiZSBleHRlbmRlZFxuICAgICAqIHRvIG90aGVyIG5vZGUgY2xhc3NlcyB0aGF0IGluaGVyaXQgZnJvbSBZQU1MTWFwXG4gICAgICovXG4gICAgc3RhdGljIGZyb20oc2NoZW1hLCBvYmosIGN0eCkge1xuICAgICAgICBjb25zdCB7IGtlZXBVbmRlZmluZWQsIHJlcGxhY2VyIH0gPSBjdHg7XG4gICAgICAgIGNvbnN0IG1hcCA9IG5ldyB0aGlzKHNjaGVtYSk7XG4gICAgICAgIGNvbnN0IGFkZCA9IChrZXksIHZhbHVlKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIHZhbHVlID0gcmVwbGFjZXIuY2FsbChvYmosIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXBsYWNlcikgJiYgIXJlcGxhY2VyLmluY2x1ZGVzKGtleSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgfHwga2VlcFVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBtYXAuaXRlbXMucHVzaChjcmVhdGVQYWlyKGtleSwgdmFsdWUsIGN0eCkpO1xuICAgICAgICB9O1xuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgTWFwKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBvYmopXG4gICAgICAgICAgICAgICAgYWRkKGtleSwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob2JqKSlcbiAgICAgICAgICAgICAgICBhZGQoa2V5LCBvYmpba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEuc29ydE1hcEVudHJpZXMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIG1hcC5pdGVtcy5zb3J0KHNjaGVtYS5zb3J0TWFwRW50cmllcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWRkcyBhIHZhbHVlIHRvIHRoZSBjb2xsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIG92ZXJ3cml0ZSAtIElmIG5vdCBzZXQgYHRydWVgLCB1c2luZyBhIGtleSB0aGF0IGlzIGFscmVhZHkgaW4gdGhlXG4gICAgICogICBjb2xsZWN0aW9uIHdpbGwgdGhyb3cuIE90aGVyd2lzZSwgb3ZlcndyaXRlcyB0aGUgcHJldmlvdXMgdmFsdWUuXG4gICAgICovXG4gICAgYWRkKHBhaXIsIG92ZXJ3cml0ZSkge1xuICAgICAgICBsZXQgX3BhaXI7XG4gICAgICAgIGlmIChpc1BhaXIocGFpcikpXG4gICAgICAgICAgICBfcGFpciA9IHBhaXI7XG4gICAgICAgIGVsc2UgaWYgKCFwYWlyIHx8IHR5cGVvZiBwYWlyICE9PSAnb2JqZWN0JyB8fCAhKCdrZXknIGluIHBhaXIpKSB7XG4gICAgICAgICAgICAvLyBJbiBUeXBlU2NyaXB0LCB0aGlzIG5ldmVyIGhhcHBlbnMuXG4gICAgICAgICAgICBfcGFpciA9IG5ldyBQYWlyKHBhaXIsIHBhaXI/LnZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBfcGFpciA9IG5ldyBQYWlyKHBhaXIua2V5LCBwYWlyLnZhbHVlKTtcbiAgICAgICAgY29uc3QgcHJldiA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIF9wYWlyLmtleSk7XG4gICAgICAgIGNvbnN0IHNvcnRFbnRyaWVzID0gdGhpcy5zY2hlbWE/LnNvcnRNYXBFbnRyaWVzO1xuICAgICAgICBpZiAocHJldikge1xuICAgICAgICAgICAgaWYgKCFvdmVyd3JpdGUpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBLZXkgJHtfcGFpci5rZXl9IGFscmVhZHkgc2V0YCk7XG4gICAgICAgICAgICAvLyBGb3Igc2NhbGFycywga2VlcCB0aGUgb2xkIG5vZGUgJiBpdHMgY29tbWVudHMgYW5kIGFuY2hvcnNcbiAgICAgICAgICAgIGlmIChpc1NjYWxhcihwcmV2LnZhbHVlKSAmJiBpc1NjYWxhclZhbHVlKF9wYWlyLnZhbHVlKSlcbiAgICAgICAgICAgICAgICBwcmV2LnZhbHVlLnZhbHVlID0gX3BhaXIudmFsdWU7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcHJldi52YWx1ZSA9IF9wYWlyLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHNvcnRFbnRyaWVzKSB7XG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy5pdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBzb3J0RW50cmllcyhfcGFpciwgaXRlbSkgPCAwKTtcbiAgICAgICAgICAgIGlmIChpID09PSAtMSlcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2goX3BhaXIpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKGksIDAsIF9wYWlyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChfcGFpcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICBjb25zdCBpdCA9IGZpbmRQYWlyKHRoaXMuaXRlbXMsIGtleSk7XG4gICAgICAgIGlmICghaXQpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IGRlbCA9IHRoaXMuaXRlbXMuc3BsaWNlKHRoaXMuaXRlbXMuaW5kZXhPZihpdCksIDEpO1xuICAgICAgICByZXR1cm4gZGVsLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIGdldChrZXksIGtlZXBTY2FsYXIpIHtcbiAgICAgICAgY29uc3QgaXQgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgICAgICBjb25zdCBub2RlID0gaXQ/LnZhbHVlO1xuICAgICAgICByZXR1cm4gKCFrZWVwU2NhbGFyICYmIGlzU2NhbGFyKG5vZGUpID8gbm9kZS52YWx1ZSA6IG5vZGUpID8/IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gISFmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLmFkZChuZXcgUGFpcihrZXksIHZhbHVlKSwgdHJ1ZSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjdHggLSBDb252ZXJzaW9uIGNvbnRleHQsIG9yaWdpbmFsbHkgc2V0IGluIERvY3VtZW50I3RvSlMoKVxuICAgICAqIEBwYXJhbSB7Q2xhc3N9IFR5cGUgLSBJZiBzZXQsIGZvcmNlcyB0aGUgcmV0dXJuZWQgY29sbGVjdGlvbiB0eXBlXG4gICAgICogQHJldHVybnMgSW5zdGFuY2Ugb2YgVHlwZSwgTWFwLCBvciBPYmplY3RcbiAgICAgKi9cbiAgICB0b0pTT04oXywgY3R4LCBUeXBlKSB7XG4gICAgICAgIGNvbnN0IG1hcCA9IFR5cGUgPyBuZXcgVHlwZSgpIDogY3R4Py5tYXBBc01hcCA/IG5ldyBNYXAoKSA6IHt9O1xuICAgICAgICBpZiAoY3R4Py5vbkNyZWF0ZSlcbiAgICAgICAgICAgIGN0eC5vbkNyZWF0ZShtYXApO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcylcbiAgICAgICAgICAgIGFkZFBhaXJUb0pTTWFwKGN0eCwgbWFwLCBpdGVtKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG4gICAgdG9TdHJpbmcoY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIGlmICghY3R4KVxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMpO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcykge1xuICAgICAgICAgICAgaWYgKCFpc1BhaXIoaXRlbSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNYXAgaXRlbXMgbXVzdCBhbGwgYmUgcGFpcnM7IGZvdW5kICR7SlNPTi5zdHJpbmdpZnkoaXRlbSl9IGluc3RlYWRgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWN0eC5hbGxOdWxsVmFsdWVzICYmIHRoaXMuaGFzQWxsTnVsbFZhbHVlcyhmYWxzZSkpXG4gICAgICAgICAgICBjdHggPSBPYmplY3QuYXNzaWduKHt9LCBjdHgsIHsgYWxsTnVsbFZhbHVlczogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeUNvbGxlY3Rpb24odGhpcywgY3R4LCB7XG4gICAgICAgICAgICBibG9ja0l0ZW1QcmVmaXg6ICcnLFxuICAgICAgICAgICAgZmxvd0NoYXJzOiB7IHN0YXJ0OiAneycsIGVuZDogJ30nIH0sXG4gICAgICAgICAgICBpdGVtSW5kZW50OiBjdHguaW5kZW50IHx8ICcnLFxuICAgICAgICAgICAgb25DaG9tcEtlZXAsXG4gICAgICAgICAgICBvbkNvbW1lbnRcbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5leHBvcnQgeyBZQU1MTWFwLCBmaW5kUGFpciB9O1xuIiwiaW1wb3J0IHsgaXNNYXAgfSBmcm9tICcuLi8uLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5cbmNvbnN0IG1hcCA9IHtcbiAgICBjb2xsZWN0aW9uOiAnbWFwJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIG5vZGVDbGFzczogWUFNTE1hcCxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjptYXAnLFxuICAgIHJlc29sdmUobWFwLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICghaXNNYXAobWFwKSlcbiAgICAgICAgICAgIG9uRXJyb3IoJ0V4cGVjdGVkIGEgbWFwcGluZyBmb3IgdGhpcyB0YWcnKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9LFxuICAgIGNyZWF0ZU5vZGU6IChzY2hlbWEsIG9iaiwgY3R4KSA9PiBZQU1MTWFwLmZyb20oc2NoZW1hLCBvYmosIGN0eClcbn07XG5cbmV4cG9ydCB7IG1hcCB9O1xuIiwiaW1wb3J0IHsgY3JlYXRlTm9kZSB9IGZyb20gJy4uL2RvYy9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeUNvbGxlY3Rpb24gfSBmcm9tICcuLi9zdHJpbmdpZnkvc3RyaW5naWZ5Q29sbGVjdGlvbi5qcyc7XG5pbXBvcnQgeyBDb2xsZWN0aW9uIH0gZnJvbSAnLi9Db2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IFNFUSwgaXNTY2FsYXIgfSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IGlzU2NhbGFyVmFsdWUgfSBmcm9tICcuL1NjYWxhci5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi90b0pTLmpzJztcblxuY2xhc3MgWUFNTFNlcSBleHRlbmRzIENvbGxlY3Rpb24ge1xuICAgIHN0YXRpYyBnZXQgdGFnTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuICd0YWc6eWFtbC5vcmcsMjAwMjpzZXEnO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihzY2hlbWEpIHtcbiAgICAgICAgc3VwZXIoU0VRLCBzY2hlbWEpO1xuICAgICAgICB0aGlzLml0ZW1zID0gW107XG4gICAgfVxuICAgIGFkZCh2YWx1ZSkge1xuICAgICAgICB0aGlzLml0ZW1zLnB1c2godmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGEgdmFsdWUgZnJvbSB0aGUgY29sbGVjdGlvbi5cbiAgICAgKlxuICAgICAqIGBrZXlgIG11c3QgY29udGFpbiBhIHJlcHJlc2VudGF0aW9uIG9mIGFuIGludGVnZXIgZm9yIHRoaXMgdG8gc3VjY2VlZC5cbiAgICAgKiBJdCBtYXkgYmUgd3JhcHBlZCBpbiBhIGBTY2FsYXJgLlxuICAgICAqXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZSBpdGVtIHdhcyBmb3VuZCBhbmQgcmVtb3ZlZC5cbiAgICAgKi9cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGFzSXRlbUluZGV4KGtleSk7XG4gICAgICAgIGlmICh0eXBlb2YgaWR4ICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgZGVsID0gdGhpcy5pdGVtcy5zcGxpY2UoaWR4LCAxKTtcbiAgICAgICAgcmV0dXJuIGRlbC5sZW5ndGggPiAwO1xuICAgIH1cbiAgICBnZXQoa2V5LCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGFzSXRlbUluZGV4KGtleSk7XG4gICAgICAgIGlmICh0eXBlb2YgaWR4ICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IGl0ID0gdGhpcy5pdGVtc1tpZHhdO1xuICAgICAgICByZXR1cm4gIWtlZXBTY2FsYXIgJiYgaXNTY2FsYXIoaXQpID8gaXQudmFsdWUgOiBpdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBjb2xsZWN0aW9uIGluY2x1ZGVzIGEgdmFsdWUgd2l0aCB0aGUga2V5IGBrZXlgLlxuICAgICAqXG4gICAgICogYGtleWAgbXVzdCBjb250YWluIGEgcmVwcmVzZW50YXRpb24gb2YgYW4gaW50ZWdlciBmb3IgdGhpcyB0byBzdWNjZWVkLlxuICAgICAqIEl0IG1heSBiZSB3cmFwcGVkIGluIGEgYFNjYWxhcmAuXG4gICAgICovXG4gICAgaGFzKGtleSkge1xuICAgICAgICBjb25zdCBpZHggPSBhc0l0ZW1JbmRleChrZXkpO1xuICAgICAgICByZXR1cm4gdHlwZW9mIGlkeCA9PT0gJ251bWJlcicgJiYgaWR4IDwgdGhpcy5pdGVtcy5sZW5ndGg7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgYSB2YWx1ZSBpbiB0aGlzIGNvbGxlY3Rpb24uIEZvciBgISFzZXRgLCBgdmFsdWVgIG5lZWRzIHRvIGJlIGFcbiAgICAgKiBib29sZWFuIHRvIGFkZC9yZW1vdmUgdGhlIGl0ZW0gZnJvbSB0aGUgc2V0LlxuICAgICAqXG4gICAgICogSWYgYGtleWAgZG9lcyBub3QgY29udGFpbiBhIHJlcHJlc2VudGF0aW9uIG9mIGFuIGludGVnZXIsIHRoaXMgd2lsbCB0aHJvdy5cbiAgICAgKiBJdCBtYXkgYmUgd3JhcHBlZCBpbiBhIGBTY2FsYXJgLlxuICAgICAqL1xuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGFzSXRlbUluZGV4KGtleSk7XG4gICAgICAgIGlmICh0eXBlb2YgaWR4ICE9PSAnbnVtYmVyJylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgYSB2YWxpZCBpbmRleCwgbm90ICR7a2V5fS5gKTtcbiAgICAgICAgY29uc3QgcHJldiA9IHRoaXMuaXRlbXNbaWR4XTtcbiAgICAgICAgaWYgKGlzU2NhbGFyKHByZXYpICYmIGlzU2NhbGFyVmFsdWUodmFsdWUpKVxuICAgICAgICAgICAgcHJldi52YWx1ZSA9IHZhbHVlO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLml0ZW1zW2lkeF0gPSB2YWx1ZTtcbiAgICB9XG4gICAgdG9KU09OKF8sIGN0eCkge1xuICAgICAgICBjb25zdCBzZXEgPSBbXTtcbiAgICAgICAgaWYgKGN0eD8ub25DcmVhdGUpXG4gICAgICAgICAgICBjdHgub25DcmVhdGUoc2VxKTtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdGhpcy5pdGVtcylcbiAgICAgICAgICAgIHNlcS5wdXNoKHRvSlMoaXRlbSwgU3RyaW5nKGkrKyksIGN0eCkpO1xuICAgICAgICByZXR1cm4gc2VxO1xuICAgIH1cbiAgICB0b1N0cmluZyhjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICAgICAgaWYgKCFjdHgpXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgICAgIHJldHVybiBzdHJpbmdpZnlDb2xsZWN0aW9uKHRoaXMsIGN0eCwge1xuICAgICAgICAgICAgYmxvY2tJdGVtUHJlZml4OiAnLSAnLFxuICAgICAgICAgICAgZmxvd0NoYXJzOiB7IHN0YXJ0OiAnWycsIGVuZDogJ10nIH0sXG4gICAgICAgICAgICBpdGVtSW5kZW50OiAoY3R4LmluZGVudCB8fCAnJykgKyAnICAnLFxuICAgICAgICAgICAgb25DaG9tcEtlZXAsXG4gICAgICAgICAgICBvbkNvbW1lbnRcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKHNjaGVtYSwgb2JqLCBjdHgpIHtcbiAgICAgICAgY29uc3QgeyByZXBsYWNlciB9ID0gY3R4O1xuICAgICAgICBjb25zdCBzZXEgPSBuZXcgdGhpcyhzY2hlbWEpO1xuICAgICAgICBpZiAob2JqICYmIFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3Qob2JqKSkge1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaXQgb2Ygb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBvYmogaW5zdGFuY2VvZiBTZXQgPyBpdCA6IFN0cmluZyhpKyspO1xuICAgICAgICAgICAgICAgICAgICBpdCA9IHJlcGxhY2VyLmNhbGwob2JqLCBrZXksIGl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2VxLml0ZW1zLnB1c2goY3JlYXRlTm9kZShpdCwgdW5kZWZpbmVkLCBjdHgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VxO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzSXRlbUluZGV4KGtleSkge1xuICAgIGxldCBpZHggPSBpc1NjYWxhcihrZXkpID8ga2V5LnZhbHVlIDoga2V5O1xuICAgIGlmIChpZHggJiYgdHlwZW9mIGlkeCA9PT0gJ3N0cmluZycpXG4gICAgICAgIGlkeCA9IE51bWJlcihpZHgpO1xuICAgIHJldHVybiB0eXBlb2YgaWR4ID09PSAnbnVtYmVyJyAmJiBOdW1iZXIuaXNJbnRlZ2VyKGlkeCkgJiYgaWR4ID49IDBcbiAgICAgICAgPyBpZHhcbiAgICAgICAgOiBudWxsO1xufVxuXG5leHBvcnQgeyBZQU1MU2VxIH07XG4iLCJpbXBvcnQgeyBpc1NlcSB9IGZyb20gJy4uLy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFlBTUxTZXEgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MU2VxLmpzJztcblxuY29uc3Qgc2VxID0ge1xuICAgIGNvbGxlY3Rpb246ICdzZXEnLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgbm9kZUNsYXNzOiBZQU1MU2VxLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnNlcScsXG4gICAgcmVzb2x2ZShzZXEsIG9uRXJyb3IpIHtcbiAgICAgICAgaWYgKCFpc1NlcShzZXEpKVxuICAgICAgICAgICAgb25FcnJvcignRXhwZWN0ZWQgYSBzZXF1ZW5jZSBmb3IgdGhpcyB0YWcnKTtcbiAgICAgICAgcmV0dXJuIHNlcTtcbiAgICB9LFxuICAgIGNyZWF0ZU5vZGU6IChzY2hlbWEsIG9iaiwgY3R4KSA9PiBZQU1MU2VxLmZyb20oc2NoZW1hLCBvYmosIGN0eClcbn07XG5cbmV4cG9ydCB7IHNlcSB9O1xuIiwiaW1wb3J0IHsgc3RyaW5naWZ5U3RyaW5nIH0gZnJvbSAnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeVN0cmluZy5qcyc7XG5cbmNvbnN0IHN0cmluZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnN0cicsXG4gICAgcmVzb2x2ZTogc3RyID0+IHN0cixcbiAgICBzdHJpbmdpZnkoaXRlbSwgY3R4LCBvbkNvbW1lbnQsIG9uQ2hvbXBLZWVwKSB7XG4gICAgICAgIGN0eCA9IE9iamVjdC5hc3NpZ24oeyBhY3R1YWxTdHJpbmc6IHRydWUgfSwgY3R4KTtcbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeVN0cmluZyhpdGVtLCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IHN0cmluZyB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuY29uc3QgbnVsbFRhZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT0gbnVsbCxcbiAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgU2NhbGFyKG51bGwpLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6bnVsbCcsXG4gICAgdGVzdDogL14oPzp+fFtObl11bGx8TlVMTCk/JC8sXG4gICAgcmVzb2x2ZTogKCkgPT4gbmV3IFNjYWxhcihudWxsKSxcbiAgICBzdHJpbmdpZnk6ICh7IHNvdXJjZSB9LCBjdHgpID0+IHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnICYmIG51bGxUYWcudGVzdC50ZXN0KHNvdXJjZSlcbiAgICAgICAgPyBzb3VyY2VcbiAgICAgICAgOiBjdHgub3B0aW9ucy5udWxsU3RyXG59O1xuXG5leHBvcnQgeyBudWxsVGFnIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5jb25zdCBib29sVGFnID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLFxuICAgIHRlc3Q6IC9eKD86W1R0XXJ1ZXxUUlVFfFtGZl1hbHNlfEZBTFNFKSQvLFxuICAgIHJlc29sdmU6IHN0ciA9PiBuZXcgU2NhbGFyKHN0clswXSA9PT0gJ3QnIHx8IHN0clswXSA9PT0gJ1QnKSxcbiAgICBzdHJpbmdpZnkoeyBzb3VyY2UsIHZhbHVlIH0sIGN0eCkge1xuICAgICAgICBpZiAoc291cmNlICYmIGJvb2xUYWcudGVzdC50ZXN0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN2ID0gc291cmNlWzBdID09PSAndCcgfHwgc291cmNlWzBdID09PSAnVCc7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHN2KVxuICAgICAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlID8gY3R4Lm9wdGlvbnMudHJ1ZVN0ciA6IGN0eC5vcHRpb25zLmZhbHNlU3RyO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IGJvb2xUYWcgfTtcbiIsImZ1bmN0aW9uIHN0cmluZ2lmeU51bWJlcih7IGZvcm1hdCwgbWluRnJhY3Rpb25EaWdpdHMsIHRhZywgdmFsdWUgfSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnKVxuICAgICAgICByZXR1cm4gU3RyaW5nKHZhbHVlKTtcbiAgICBjb25zdCBudW0gPSB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInID8gdmFsdWUgOiBOdW1iZXIodmFsdWUpO1xuICAgIGlmICghaXNGaW5pdGUobnVtKSlcbiAgICAgICAgcmV0dXJuIGlzTmFOKG51bSkgPyAnLm5hbicgOiBudW0gPCAwID8gJy0uaW5mJyA6ICcuaW5mJztcbiAgICBsZXQgbiA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcbiAgICBpZiAoIWZvcm1hdCAmJlxuICAgICAgICBtaW5GcmFjdGlvbkRpZ2l0cyAmJlxuICAgICAgICAoIXRhZyB8fCB0YWcgPT09ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcpICYmXG4gICAgICAgIC9eXFxkLy50ZXN0KG4pKSB7XG4gICAgICAgIGxldCBpID0gbi5pbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChpIDwgMCkge1xuICAgICAgICAgICAgaSA9IG4ubGVuZ3RoO1xuICAgICAgICAgICAgbiArPSAnLic7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGQgPSBtaW5GcmFjdGlvbkRpZ2l0cyAtIChuLmxlbmd0aCAtIGkgLSAxKTtcbiAgICAgICAgd2hpbGUgKGQtLSA+IDApXG4gICAgICAgICAgICBuICs9ICcwJztcbiAgICB9XG4gICAgcmV0dXJuIG47XG59XG5cbmV4cG9ydCB7IHN0cmluZ2lmeU51bWJlciB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG5jb25zdCBmbG9hdE5hTiA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXig/OlstK10/XFwuKD86aW5mfEluZnxJTkYpfFxcLm5hbnxcXC5OYU58XFwuTkFOKSQvLFxuICAgIHJlc29sdmU6IHN0ciA9PiBzdHIuc2xpY2UoLTMpLnRvTG93ZXJDYXNlKCkgPT09ICduYW4nXG4gICAgICAgID8gTmFOXG4gICAgICAgIDogc3RyWzBdID09PSAnLSdcbiAgICAgICAgICAgID8gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZXG4gICAgICAgICAgICA6IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlclxufTtcbmNvbnN0IGZsb2F0RXhwID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIGZvcm1hdDogJ0VYUCcsXG4gICAgdGVzdDogL15bLStdPyg/OlxcLlswLTldK3xbMC05XSsoPzpcXC5bMC05XSopPylbZUVdWy0rXT9bMC05XSskLyxcbiAgICByZXNvbHZlOiBzdHIgPT4gcGFyc2VGbG9hdChzdHIpLFxuICAgIHN0cmluZ2lmeShub2RlKSB7XG4gICAgICAgIGNvbnN0IG51bSA9IE51bWJlcihub2RlLnZhbHVlKTtcbiAgICAgICAgcmV0dXJuIGlzRmluaXRlKG51bSkgPyBudW0udG9FeHBvbmVudGlhbCgpIDogc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xuICAgIH1cbn07XG5jb25zdCBmbG9hdCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICB0ZXN0OiAvXlstK10/KD86XFwuWzAtOV0rfFswLTldK1xcLlswLTldKikkLyxcbiAgICByZXNvbHZlKHN0cikge1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IFNjYWxhcihwYXJzZUZsb2F0KHN0cikpO1xuICAgICAgICBjb25zdCBkb3QgPSBzdHIuaW5kZXhPZignLicpO1xuICAgICAgICBpZiAoZG90ICE9PSAtMSAmJiBzdHJbc3RyLmxlbmd0aCAtIDFdID09PSAnMCcpXG4gICAgICAgICAgICBub2RlLm1pbkZyYWN0aW9uRGlnaXRzID0gc3RyLmxlbmd0aCAtIGRvdCAtIDE7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH0sXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5cbmV4cG9ydCB7IGZsb2F0LCBmbG9hdEV4cCwgZmxvYXROYU4gfTtcbiIsImltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG5jb25zdCBpbnRJZGVudGlmeSA9ICh2YWx1ZSkgPT4gdHlwZW9mIHZhbHVlID09PSAnYmlnaW50JyB8fCBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKTtcbmNvbnN0IGludFJlc29sdmUgPSAoc3RyLCBvZmZzZXQsIHJhZGl4LCB7IGludEFzQmlnSW50IH0pID0+IChpbnRBc0JpZ0ludCA/IEJpZ0ludChzdHIpIDogcGFyc2VJbnQoc3RyLnN1YnN0cmluZyhvZmZzZXQpLCByYWRpeCkpO1xuZnVuY3Rpb24gaW50U3RyaW5naWZ5KG5vZGUsIHJhZGl4LCBwcmVmaXgpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSBub2RlO1xuICAgIGlmIChpbnRJZGVudGlmeSh2YWx1ZSkgJiYgdmFsdWUgPj0gMClcbiAgICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlLnRvU3RyaW5nKHJhZGl4KTtcbiAgICByZXR1cm4gc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xufVxuY29uc3QgaW50T2N0ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiBpbnRJZGVudGlmeSh2YWx1ZSkgJiYgdmFsdWUgPj0gMCxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnT0NUJyxcbiAgICB0ZXN0OiAvXjBvWzAtN10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDgsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCA4LCAnMG8nKVxufTtcbmNvbnN0IGludCA9IHtcbiAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjppbnQnLFxuICAgIHRlc3Q6IC9eWy0rXT9bMC05XSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMCwgMTAsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5jb25zdCBpbnRIZXggPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IGludElkZW50aWZ5KHZhbHVlKSAmJiB2YWx1ZSA+PSAwLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYXQ6ICdIRVgnLFxuICAgIHRlc3Q6IC9eMHhbMC05YS1mQS1GXSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMiwgMTYsIG9wdCksXG4gICAgc3RyaW5naWZ5OiBub2RlID0+IGludFN0cmluZ2lmeShub2RlLCAxNiwgJzB4Jylcbn07XG5cbmV4cG9ydCB7IGludCwgaW50SGV4LCBpbnRPY3QgfTtcbiIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4uL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgbnVsbFRhZyB9IGZyb20gJy4uL2NvbW1vbi9udWxsLmpzJztcbmltcG9ydCB7IHNlcSB9IGZyb20gJy4uL2NvbW1vbi9zZXEuanMnO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnLi4vY29tbW9uL3N0cmluZy5qcyc7XG5pbXBvcnQgeyBib29sVGFnIH0gZnJvbSAnLi9ib29sLmpzJztcbmltcG9ydCB7IGZsb2F0TmFOLCBmbG9hdEV4cCwgZmxvYXQgfSBmcm9tICcuL2Zsb2F0LmpzJztcbmltcG9ydCB7IGludE9jdCwgaW50LCBpbnRIZXggfSBmcm9tICcuL2ludC5qcyc7XG5cbmNvbnN0IHNjaGVtYSA9IFtcbiAgICBtYXAsXG4gICAgc2VxLFxuICAgIHN0cmluZyxcbiAgICBudWxsVGFnLFxuICAgIGJvb2xUYWcsXG4gICAgaW50T2N0LFxuICAgIGludCxcbiAgICBpbnRIZXgsXG4gICAgZmxvYXROYU4sXG4gICAgZmxvYXRFeHAsXG4gICAgZmxvYXRcbl07XG5cbmV4cG9ydCB7IHNjaGVtYSB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4uL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgc2VxIH0gZnJvbSAnLi4vY29tbW9uL3NlcS5qcyc7XG5cbmZ1bmN0aW9uIGludElkZW50aWZ5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSk7XG59XG5jb25zdCBzdHJpbmdpZnlKU09OID0gKHsgdmFsdWUgfSkgPT4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuY29uc3QganNvblNjYWxhcnMgPSBbXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6c3RyJyxcbiAgICAgICAgcmVzb2x2ZTogc3RyID0+IHN0cixcbiAgICAgICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlKU09OXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSA9PSBudWxsLFxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgU2NhbGFyKG51bGwpLFxuICAgICAgICBkZWZhdWx0OiB0cnVlLFxuICAgICAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpudWxsJyxcbiAgICAgICAgdGVzdDogL15udWxsJC8sXG4gICAgICAgIHJlc29sdmU6ICgpID0+IG51bGwsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnYm9vbGVhbicsXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmJvb2wnLFxuICAgICAgICB0ZXN0OiAvXnRydWUkfF5mYWxzZSQvLFxuICAgICAgICByZXNvbHZlOiBzdHIgPT4gc3RyID09PSAndHJ1ZScsXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogaW50SWRlbnRpZnksXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgICAgIHRlc3Q6IC9eLT8oPzowfFsxLTldWzAtOV0qKSQvLFxuICAgICAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgeyBpbnRBc0JpZ0ludCB9KSA9PiBpbnRBc0JpZ0ludCA/IEJpZ0ludChzdHIpIDogcGFyc2VJbnQoc3RyLCAxMCksXG4gICAgICAgIHN0cmluZ2lmeTogKHsgdmFsdWUgfSkgPT4gaW50SWRlbnRpZnkodmFsdWUpID8gdmFsdWUudG9TdHJpbmcoKSA6IEpTT04uc3RyaW5naWZ5KHZhbHVlKVxuICAgIH0sXG4gICAge1xuICAgICAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcbiAgICAgICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgICAgICB0ZXN0OiAvXi0/KD86MHxbMS05XVswLTldKikoPzpcXC5bMC05XSopPyg/OltlRV1bLStdP1swLTldKyk/JC8sXG4gICAgICAgIHJlc29sdmU6IHN0ciA9PiBwYXJzZUZsb2F0KHN0ciksXG4gICAgICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5SlNPTlxuICAgIH1cbl07XG5jb25zdCBqc29uRXJyb3IgPSB7XG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICcnLFxuICAgIHRlc3Q6IC9eLyxcbiAgICByZXNvbHZlKHN0ciwgb25FcnJvcikge1xuICAgICAgICBvbkVycm9yKGBVbnJlc29sdmVkIHBsYWluIHNjYWxhciAke0pTT04uc3RyaW5naWZ5KHN0cil9YCk7XG4gICAgICAgIHJldHVybiBzdHI7XG4gICAgfVxufTtcbmNvbnN0IHNjaGVtYSA9IFttYXAsIHNlcV0uY29uY2F0KGpzb25TY2FsYXJzLCBqc29uRXJyb3IpO1xuXG5leHBvcnQgeyBzY2hlbWEgfTtcbiIsImltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uLy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlTdHJpbmcgfSBmcm9tICcuLi8uLi9zdHJpbmdpZnkvc3RyaW5naWZ5U3RyaW5nLmpzJztcblxuY29uc3QgYmluYXJ5ID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXksIC8vIEJ1ZmZlciBpbmhlcml0cyBmcm9tIFVpbnQ4QXJyYXlcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpiaW5hcnknLFxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCdWZmZXIgaW4gbm9kZSBhbmQgYW4gVWludDhBcnJheSBpbiBicm93c2Vyc1xuICAgICAqXG4gICAgICogVG8gdXNlIHRoZSByZXN1bHRpbmcgYnVmZmVyIGFzIGFuIGltYWdlLCB5b3UnbGwgd2FudCB0byBkbyBzb21ldGhpbmcgbGlrZTpcbiAgICAgKlxuICAgICAqICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtidWZmZXJdLCB7IHR5cGU6ICdpbWFnZS9qcGVnJyB9KVxuICAgICAqICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI3Bob3RvJykuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKVxuICAgICAqL1xuICAgIHJlc29sdmUoc3JjLCBvbkVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYXRvYiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgLy8gT24gSUUgMTEsIGF0b2IoKSBjYW4ndCBoYW5kbGUgbmV3bGluZXNcbiAgICAgICAgICAgIGNvbnN0IHN0ciA9IGF0b2Ioc3JjLnJlcGxhY2UoL1tcXG5cXHJdL2csICcnKSk7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShzdHIubGVuZ3RoKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGJ1ZmZlcltpXSA9IHN0ci5jaGFyQ29kZUF0KGkpO1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG9uRXJyb3IoJ1RoaXMgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCByZWFkaW5nIGJpbmFyeSB0YWdzOyBlaXRoZXIgQnVmZmVyIG9yIGF0b2IgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgICAgIHJldHVybiBzcmM7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHN0cmluZ2lmeSh7IGNvbW1lbnQsIHR5cGUsIHZhbHVlIH0sIGN0eCwgb25Db21tZW50LCBvbkNob21wS2VlcCkge1xuICAgICAgICBjb25zdCBidWYgPSB2YWx1ZTsgLy8gY2hlY2tlZCBlYXJsaWVyIGJ5IGJpbmFyeS5pZGVudGlmeSgpXG4gICAgICAgIGxldCBzdHI7XG4gICAgICAgIGlmICh0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgbGV0IHMgPSAnJztcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYnVmLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pO1xuICAgICAgICAgICAgc3RyID0gYnRvYShzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhpcyBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IHdyaXRpbmcgYmluYXJ5IHRhZ3M7IGVpdGhlciBCdWZmZXIgb3IgYnRvYSBpcyByZXF1aXJlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdHlwZSlcbiAgICAgICAgICAgIHR5cGUgPSBTY2FsYXIuQkxPQ0tfTElURVJBTDtcbiAgICAgICAgaWYgKHR5cGUgIT09IFNjYWxhci5RVU9URV9ET1VCTEUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVXaWR0aCA9IE1hdGgubWF4KGN0eC5vcHRpb25zLmxpbmVXaWR0aCAtIGN0eC5pbmRlbnQubGVuZ3RoLCBjdHgub3B0aW9ucy5taW5Db250ZW50V2lkdGgpO1xuICAgICAgICAgICAgY29uc3QgbiA9IE1hdGguY2VpbChzdHIubGVuZ3RoIC8gbGluZVdpZHRoKTtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gbmV3IEFycmF5KG4pO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDAsIG8gPSAwOyBpIDwgbjsgKytpLCBvICs9IGxpbmVXaWR0aCkge1xuICAgICAgICAgICAgICAgIGxpbmVzW2ldID0gc3RyLnN1YnN0cihvLCBsaW5lV2lkdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3RyID0gbGluZXMuam9pbih0eXBlID09PSBTY2FsYXIuQkxPQ0tfTElURVJBTCA/ICdcXG4nIDogJyAnKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc3RyaW5naWZ5U3RyaW5nKHsgY29tbWVudCwgdHlwZSwgdmFsdWU6IHN0ciB9LCBjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IGJpbmFyeSB9O1xuIiwiaW1wb3J0IHsgaXNTZXEsIGlzUGFpciwgaXNNYXAgfSBmcm9tICcuLi8uLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyLCBjcmVhdGVQYWlyIH0gZnJvbSAnLi4vLi4vbm9kZXMvUGFpci5qcyc7XG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uLy4uL25vZGVzL1lBTUxTZXEuanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlUGFpcnMoc2VxLCBvbkVycm9yKSB7XG4gICAgaWYgKGlzU2VxKHNlcSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZXEuaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGxldCBpdGVtID0gc2VxLml0ZW1zW2ldO1xuICAgICAgICAgICAgaWYgKGlzUGFpcihpdGVtKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGlzTWFwKGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uaXRlbXMubGVuZ3RoID4gMSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcignRWFjaCBwYWlyIG11c3QgaGF2ZSBpdHMgb3duIHNlcXVlbmNlIGluZGljYXRvcicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhaXIgPSBpdGVtLml0ZW1zWzBdIHx8IG5ldyBQYWlyKG5ldyBTY2FsYXIobnVsbCkpO1xuICAgICAgICAgICAgICAgIGlmIChpdGVtLmNvbW1lbnRCZWZvcmUpXG4gICAgICAgICAgICAgICAgICAgIHBhaXIua2V5LmNvbW1lbnRCZWZvcmUgPSBwYWlyLmtleS5jb21tZW50QmVmb3JlXG4gICAgICAgICAgICAgICAgICAgICAgICA/IGAke2l0ZW0uY29tbWVudEJlZm9yZX1cXG4ke3BhaXIua2V5LmNvbW1lbnRCZWZvcmV9YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpdGVtLmNvbW1lbnRCZWZvcmU7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uY29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbiA9IHBhaXIudmFsdWUgPz8gcGFpci5rZXk7XG4gICAgICAgICAgICAgICAgICAgIGNuLmNvbW1lbnQgPSBjbi5jb21tZW50XG4gICAgICAgICAgICAgICAgICAgICAgICA/IGAke2l0ZW0uY29tbWVudH1cXG4ke2NuLmNvbW1lbnR9YFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBpdGVtLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGl0ZW0gPSBwYWlyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VxLml0ZW1zW2ldID0gaXNQYWlyKGl0ZW0pID8gaXRlbSA6IG5ldyBQYWlyKGl0ZW0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgb25FcnJvcignRXhwZWN0ZWQgYSBzZXF1ZW5jZSBmb3IgdGhpcyB0YWcnKTtcbiAgICByZXR1cm4gc2VxO1xufVxuZnVuY3Rpb24gY3JlYXRlUGFpcnMoc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSB7XG4gICAgY29uc3QgeyByZXBsYWNlciB9ID0gY3R4O1xuICAgIGNvbnN0IHBhaXJzID0gbmV3IFlBTUxTZXEoc2NoZW1hKTtcbiAgICBwYWlycy50YWcgPSAndGFnOnlhbWwub3JnLDIwMDI6cGFpcnMnO1xuICAgIGxldCBpID0gMDtcbiAgICBpZiAoaXRlcmFibGUgJiYgU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChpdGVyYWJsZSkpXG4gICAgICAgIGZvciAobGV0IGl0IG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIGl0ID0gcmVwbGFjZXIuY2FsbChpdGVyYWJsZSwgU3RyaW5nKGkrKyksIGl0KTtcbiAgICAgICAgICAgIGxldCBrZXksIHZhbHVlO1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaXQpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICBrZXkgPSBpdFswXTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBpdFsxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBFeHBlY3RlZCBba2V5LCB2YWx1ZV0gdHVwbGU6ICR7aXR9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpdCAmJiBpdCBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhpdCk7XG4gICAgICAgICAgICAgICAgaWYgKGtleXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IGtleXNbMF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gaXRba2V5XTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEV4cGVjdGVkIHR1cGxlIHdpdGggb25lIGtleSwgbm90ICR7a2V5cy5sZW5ndGh9IGtleXNgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBrZXkgPSBpdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhaXJzLml0ZW1zLnB1c2goY3JlYXRlUGFpcihrZXksIHZhbHVlLCBjdHgpKTtcbiAgICAgICAgfVxuICAgIHJldHVybiBwYWlycztcbn1cbmNvbnN0IHBhaXJzID0ge1xuICAgIGNvbGxlY3Rpb246ICdzZXEnLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOnBhaXJzJyxcbiAgICByZXNvbHZlOiByZXNvbHZlUGFpcnMsXG4gICAgY3JlYXRlTm9kZTogY3JlYXRlUGFpcnNcbn07XG5cbmV4cG9ydCB7IGNyZWF0ZVBhaXJzLCBwYWlycywgcmVzb2x2ZVBhaXJzIH07XG4iLCJpbXBvcnQgeyBpc1NjYWxhciwgaXNQYWlyIH0gZnJvbSAnLi4vLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgdG9KUyB9IGZyb20gJy4uLy4uL25vZGVzL3RvSlMuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCB9IGZyb20gJy4uLy4uL25vZGVzL1lBTUxNYXAuanMnO1xuaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uLy4uL25vZGVzL1lBTUxTZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVBhaXJzLCBjcmVhdGVQYWlycyB9IGZyb20gJy4vcGFpcnMuanMnO1xuXG5jbGFzcyBZQU1MT01hcCBleHRlbmRzIFlBTUxTZXEge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmFkZCA9IFlBTUxNYXAucHJvdG90eXBlLmFkZC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmRlbGV0ZSA9IFlBTUxNYXAucHJvdG90eXBlLmRlbGV0ZS5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmdldCA9IFlBTUxNYXAucHJvdG90eXBlLmdldC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhcyA9IFlBTUxNYXAucHJvdG90eXBlLmhhcy5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnNldCA9IFlBTUxNYXAucHJvdG90eXBlLnNldC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLnRhZyA9IFlBTUxPTWFwLnRhZztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSWYgYGN0eGAgaXMgZ2l2ZW4sIHRoZSByZXR1cm4gdHlwZSBpcyBhY3R1YWxseSBgTWFwPHVua25vd24sIHVua25vd24+YCxcbiAgICAgKiBidXQgVHlwZVNjcmlwdCB3b24ndCBhbGxvdyB3aWRlbmluZyB0aGUgc2lnbmF0dXJlIG9mIGEgY2hpbGQgbWV0aG9kLlxuICAgICAqL1xuICAgIHRvSlNPTihfLCBjdHgpIHtcbiAgICAgICAgaWYgKCFjdHgpXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIudG9KU09OKF8pO1xuICAgICAgICBjb25zdCBtYXAgPSBuZXcgTWFwKCk7XG4gICAgICAgIGlmIChjdHg/Lm9uQ3JlYXRlKVxuICAgICAgICAgICAgY3R4Lm9uQ3JlYXRlKG1hcCk7XG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiB0aGlzLml0ZW1zKSB7XG4gICAgICAgICAgICBsZXQga2V5LCB2YWx1ZTtcbiAgICAgICAgICAgIGlmIChpc1BhaXIocGFpcikpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSB0b0pTKHBhaXIua2V5LCAnJywgY3R4KTtcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRvSlMocGFpci52YWx1ZSwga2V5LCBjdHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5ID0gdG9KUyhwYWlyLCAnJywgY3R4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXAuaGFzKGtleSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPcmRlcmVkIG1hcHMgbXVzdCBub3QgaW5jbHVkZSBkdXBsaWNhdGUga2V5cycpO1xuICAgICAgICAgICAgbWFwLnNldChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwO1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbShzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpIHtcbiAgICAgICAgY29uc3QgcGFpcnMgPSBjcmVhdGVQYWlycyhzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpO1xuICAgICAgICBjb25zdCBvbWFwID0gbmV3IHRoaXMoKTtcbiAgICAgICAgb21hcC5pdGVtcyA9IHBhaXJzLml0ZW1zO1xuICAgICAgICByZXR1cm4gb21hcDtcbiAgICB9XG59XG5ZQU1MT01hcC50YWcgPSAndGFnOnlhbWwub3JnLDIwMDI6b21hcCc7XG5jb25zdCBvbWFwID0ge1xuICAgIGNvbGxlY3Rpb246ICdzZXEnLFxuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSBpbnN0YW5jZW9mIE1hcCxcbiAgICBub2RlQ2xhc3M6IFlBTUxPTWFwLFxuICAgIGRlZmF1bHQ6IGZhbHNlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOm9tYXAnLFxuICAgIHJlc29sdmUoc2VxLCBvbkVycm9yKSB7XG4gICAgICAgIGNvbnN0IHBhaXJzID0gcmVzb2x2ZVBhaXJzKHNlcSwgb25FcnJvcik7XG4gICAgICAgIGNvbnN0IHNlZW5LZXlzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgeyBrZXkgfSBvZiBwYWlycy5pdGVtcykge1xuICAgICAgICAgICAgaWYgKGlzU2NhbGFyKGtleSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2VlbktleXMuaW5jbHVkZXMoa2V5LnZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGBPcmRlcmVkIG1hcHMgbXVzdCBub3QgaW5jbHVkZSBkdXBsaWNhdGUga2V5czogJHtrZXkudmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZWVuS2V5cy5wdXNoKGtleS52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKG5ldyBZQU1MT01hcCgpLCBwYWlycyk7XG4gICAgfSxcbiAgICBjcmVhdGVOb2RlOiAoc2NoZW1hLCBpdGVyYWJsZSwgY3R4KSA9PiBZQU1MT01hcC5mcm9tKHNjaGVtYSwgaXRlcmFibGUsIGN0eClcbn07XG5cbmV4cG9ydCB7IFlBTUxPTWFwLCBvbWFwIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuXG5mdW5jdGlvbiBib29sU3RyaW5naWZ5KHsgdmFsdWUsIHNvdXJjZSB9LCBjdHgpIHtcbiAgICBjb25zdCBib29sT2JqID0gdmFsdWUgPyB0cnVlVGFnIDogZmFsc2VUYWc7XG4gICAgaWYgKHNvdXJjZSAmJiBib29sT2JqLnRlc3QudGVzdChzb3VyY2UpKVxuICAgICAgICByZXR1cm4gc291cmNlO1xuICAgIHJldHVybiB2YWx1ZSA/IGN0eC5vcHRpb25zLnRydWVTdHIgOiBjdHgub3B0aW9ucy5mYWxzZVN0cjtcbn1cbmNvbnN0IHRydWVUYWcgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlID09PSB0cnVlLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6Ym9vbCcsXG4gICAgdGVzdDogL14oPzpZfHl8W1l5XWVzfFlFU3xbVHRdcnVlfFRSVUV8W09vXW58T04pJC8sXG4gICAgcmVzb2x2ZTogKCkgPT4gbmV3IFNjYWxhcih0cnVlKSxcbiAgICBzdHJpbmdpZnk6IGJvb2xTdHJpbmdpZnlcbn07XG5jb25zdCBmYWxzZVRhZyA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdmFsdWUgPT09IGZhbHNlLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6Ym9vbCcsXG4gICAgdGVzdDogL14oPzpOfG58W05uXW98Tk98W0ZmXWFsc2V8RkFMU0V8W09vXWZmfE9GRikkLyxcbiAgICByZXNvbHZlOiAoKSA9PiBuZXcgU2NhbGFyKGZhbHNlKSxcbiAgICBzdHJpbmdpZnk6IGJvb2xTdHJpbmdpZnlcbn07XG5cbmV4cG9ydCB7IGZhbHNlVGFnLCB0cnVlVGFnIH07XG4iLCJpbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgc3RyaW5naWZ5TnVtYmVyIH0gZnJvbSAnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcyc7XG5cbmNvbnN0IGZsb2F0TmFOID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIHRlc3Q6IC9eKD86Wy0rXT9cXC4oPzppbmZ8SW5mfElORil8XFwubmFufFxcLk5hTnxcXC5OQU4pJC8sXG4gICAgcmVzb2x2ZTogKHN0cikgPT4gc3RyLnNsaWNlKC0zKS50b0xvd2VyQ2FzZSgpID09PSAnbmFuJ1xuICAgICAgICA/IE5hTlxuICAgICAgICA6IHN0clswXSA9PT0gJy0nXG4gICAgICAgICAgICA/IE51bWJlci5ORUdBVElWRV9JTkZJTklUWVxuICAgICAgICAgICAgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgc3RyaW5naWZ5OiBzdHJpbmdpZnlOdW1iZXJcbn07XG5jb25zdCBmbG9hdEV4cCA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmZsb2F0JyxcbiAgICBmb3JtYXQ6ICdFWFAnLFxuICAgIHRlc3Q6IC9eWy0rXT8oPzpbMC05XVswLTlfXSopPyg/OlxcLlswLTlfXSopP1tlRV1bLStdP1swLTldKyQvLFxuICAgIHJlc29sdmU6IChzdHIpID0+IHBhcnNlRmxvYXQoc3RyLnJlcGxhY2UoL18vZywgJycpKSxcbiAgICBzdHJpbmdpZnkobm9kZSkge1xuICAgICAgICBjb25zdCBudW0gPSBOdW1iZXIobm9kZS52YWx1ZSk7XG4gICAgICAgIHJldHVybiBpc0Zpbml0ZShudW0pID8gbnVtLnRvRXhwb25lbnRpYWwoKSA6IHN0cmluZ2lmeU51bWJlcihub2RlKTtcbiAgICB9XG59O1xuY29uc3QgZmxvYXQgPSB7XG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpmbG9hdCcsXG4gICAgdGVzdDogL15bLStdPyg/OlswLTldWzAtOV9dKik/XFwuWzAtOV9dKiQvLFxuICAgIHJlc29sdmUoc3RyKSB7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgU2NhbGFyKHBhcnNlRmxvYXQoc3RyLnJlcGxhY2UoL18vZywgJycpKSk7XG4gICAgICAgIGNvbnN0IGRvdCA9IHN0ci5pbmRleE9mKCcuJyk7XG4gICAgICAgIGlmIChkb3QgIT09IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBmID0gc3RyLnN1YnN0cmluZyhkb3QgKyAxKS5yZXBsYWNlKC9fL2csICcnKTtcbiAgICAgICAgICAgIGlmIChmW2YubGVuZ3RoIC0gMV0gPT09ICcwJylcbiAgICAgICAgICAgICAgICBub2RlLm1pbkZyYWN0aW9uRGlnaXRzID0gZi5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeU51bWJlclxufTtcblxuZXhwb3J0IHsgZmxvYXQsIGZsb2F0RXhwLCBmbG9hdE5hTiB9O1xuIiwiaW1wb3J0IHsgc3RyaW5naWZ5TnVtYmVyIH0gZnJvbSAnLi4vLi4vc3RyaW5naWZ5L3N0cmluZ2lmeU51bWJlci5qcyc7XG5cbmNvbnN0IGludElkZW50aWZ5ID0gKHZhbHVlKSA9PiB0eXBlb2YgdmFsdWUgPT09ICdiaWdpbnQnIHx8IE51bWJlci5pc0ludGVnZXIodmFsdWUpO1xuZnVuY3Rpb24gaW50UmVzb2x2ZShzdHIsIG9mZnNldCwgcmFkaXgsIHsgaW50QXNCaWdJbnQgfSkge1xuICAgIGNvbnN0IHNpZ24gPSBzdHJbMF07XG4gICAgaWYgKHNpZ24gPT09ICctJyB8fCBzaWduID09PSAnKycpXG4gICAgICAgIG9mZnNldCArPSAxO1xuICAgIHN0ciA9IHN0ci5zdWJzdHJpbmcob2Zmc2V0KS5yZXBsYWNlKC9fL2csICcnKTtcbiAgICBpZiAoaW50QXNCaWdJbnQpIHtcbiAgICAgICAgc3dpdGNoIChyYWRpeCkge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIHN0ciA9IGAwYiR7c3RyfWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgc3RyID0gYDBvJHtzdHJ9YDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTY6XG4gICAgICAgICAgICAgICAgc3RyID0gYDB4JHtzdHJ9YDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuID0gQmlnSW50KHN0cik7XG4gICAgICAgIHJldHVybiBzaWduID09PSAnLScgPyBCaWdJbnQoLTEpICogbiA6IG47XG4gICAgfVxuICAgIGNvbnN0IG4gPSBwYXJzZUludChzdHIsIHJhZGl4KTtcbiAgICByZXR1cm4gc2lnbiA9PT0gJy0nID8gLTEgKiBuIDogbjtcbn1cbmZ1bmN0aW9uIGludFN0cmluZ2lmeShub2RlLCByYWRpeCwgcHJlZml4KSB7XG4gICAgY29uc3QgeyB2YWx1ZSB9ID0gbm9kZTtcbiAgICBpZiAoaW50SWRlbnRpZnkodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHN0ciA9IHZhbHVlLnRvU3RyaW5nKHJhZGl4KTtcbiAgICAgICAgcmV0dXJuIHZhbHVlIDwgMCA/ICctJyArIHByZWZpeCArIHN0ci5zdWJzdHIoMSkgOiBwcmVmaXggKyBzdHI7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmdpZnlOdW1iZXIobm9kZSk7XG59XG5jb25zdCBpbnRCaW4gPSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICBmb3JtYXQ6ICdCSU4nLFxuICAgIHRlc3Q6IC9eWy0rXT8wYlswLTFfXSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMiwgMiwgb3B0KSxcbiAgICBzdHJpbmdpZnk6IG5vZGUgPT4gaW50U3RyaW5naWZ5KG5vZGUsIDIsICcwYicpXG59O1xuY29uc3QgaW50T2N0ID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnT0NUJyxcbiAgICB0ZXN0OiAvXlstK10/MFswLTdfXSskLyxcbiAgICByZXNvbHZlOiAoc3RyLCBfb25FcnJvciwgb3B0KSA9PiBpbnRSZXNvbHZlKHN0ciwgMSwgOCwgb3B0KSxcbiAgICBzdHJpbmdpZnk6IG5vZGUgPT4gaW50U3RyaW5naWZ5KG5vZGUsIDgsICcwJylcbn07XG5jb25zdCBpbnQgPSB7XG4gICAgaWRlbnRpZnk6IGludElkZW50aWZ5LFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6aW50JyxcbiAgICB0ZXN0OiAvXlstK10/WzAtOV1bMC05X10qJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDAsIDEwLCBvcHQpLFxuICAgIHN0cmluZ2lmeTogc3RyaW5naWZ5TnVtYmVyXG59O1xuY29uc3QgaW50SGV4ID0ge1xuICAgIGlkZW50aWZ5OiBpbnRJZGVudGlmeSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnSEVYJyxcbiAgICB0ZXN0OiAvXlstK10/MHhbMC05YS1mQS1GX10rJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIG9wdCkgPT4gaW50UmVzb2x2ZShzdHIsIDIsIDE2LCBvcHQpLFxuICAgIHN0cmluZ2lmeTogbm9kZSA9PiBpbnRTdHJpbmdpZnkobm9kZSwgMTYsICcweCcpXG59O1xuXG5leHBvcnQgeyBpbnQsIGludEJpbiwgaW50SGV4LCBpbnRPY3QgfTtcbiIsImltcG9ydCB7IGlzTWFwLCBpc1BhaXIsIGlzU2NhbGFyIH0gZnJvbSAnLi4vLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgUGFpciwgY3JlYXRlUGFpciB9IGZyb20gJy4uLy4uL25vZGVzL1BhaXIuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCwgZmluZFBhaXIgfSBmcm9tICcuLi8uLi9ub2Rlcy9ZQU1MTWFwLmpzJztcblxuY2xhc3MgWUFNTFNldCBleHRlbmRzIFlBTUxNYXAge1xuICAgIGNvbnN0cnVjdG9yKHNjaGVtYSkge1xuICAgICAgICBzdXBlcihzY2hlbWEpO1xuICAgICAgICB0aGlzLnRhZyA9IFlBTUxTZXQudGFnO1xuICAgIH1cbiAgICBhZGQoa2V5KSB7XG4gICAgICAgIGxldCBwYWlyO1xuICAgICAgICBpZiAoaXNQYWlyKGtleSkpXG4gICAgICAgICAgICBwYWlyID0ga2V5O1xuICAgICAgICBlbHNlIGlmIChrZXkgJiZcbiAgICAgICAgICAgIHR5cGVvZiBrZXkgPT09ICdvYmplY3QnICYmXG4gICAgICAgICAgICAna2V5JyBpbiBrZXkgJiZcbiAgICAgICAgICAgICd2YWx1ZScgaW4ga2V5ICYmXG4gICAgICAgICAgICBrZXkudmFsdWUgPT09IG51bGwpXG4gICAgICAgICAgICBwYWlyID0gbmV3IFBhaXIoa2V5LmtleSwgbnVsbCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHBhaXIgPSBuZXcgUGFpcihrZXksIG51bGwpO1xuICAgICAgICBjb25zdCBwcmV2ID0gZmluZFBhaXIodGhpcy5pdGVtcywgcGFpci5rZXkpO1xuICAgICAgICBpZiAoIXByZXYpXG4gICAgICAgICAgICB0aGlzLml0ZW1zLnB1c2gocGFpcik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIElmIGBrZWVwUGFpcmAgaXMgYHRydWVgLCByZXR1cm5zIHRoZSBQYWlyIG1hdGNoaW5nIGBrZXlgLlxuICAgICAqIE90aGVyd2lzZSwgcmV0dXJucyB0aGUgdmFsdWUgb2YgdGhhdCBQYWlyJ3Mga2V5LlxuICAgICAqL1xuICAgIGdldChrZXksIGtlZXBQYWlyKSB7XG4gICAgICAgIGNvbnN0IHBhaXIgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgICAgICByZXR1cm4gIWtlZXBQYWlyICYmIGlzUGFpcihwYWlyKVxuICAgICAgICAgICAgPyBpc1NjYWxhcihwYWlyLmtleSlcbiAgICAgICAgICAgICAgICA/IHBhaXIua2V5LnZhbHVlXG4gICAgICAgICAgICAgICAgOiBwYWlyLmtleVxuICAgICAgICAgICAgOiBwYWlyO1xuICAgIH1cbiAgICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEV4cGVjdGVkIGJvb2xlYW4gdmFsdWUgZm9yIHNldChrZXksIHZhbHVlKSBpbiBhIFlBTUwgc2V0LCBub3QgJHt0eXBlb2YgdmFsdWV9YCk7XG4gICAgICAgIGNvbnN0IHByZXYgPSBmaW5kUGFpcih0aGlzLml0ZW1zLCBrZXkpO1xuICAgICAgICBpZiAocHJldiAmJiAhdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMuc3BsaWNlKHRoaXMuaXRlbXMuaW5kZXhPZihwcmV2KSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIXByZXYgJiYgdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuaXRlbXMucHVzaChuZXcgUGFpcihrZXkpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0b0pTT04oXywgY3R4KSB7XG4gICAgICAgIHJldHVybiBzdXBlci50b0pTT04oXywgY3R4LCBTZXQpO1xuICAgIH1cbiAgICB0b1N0cmluZyhjdHgsIG9uQ29tbWVudCwgb25DaG9tcEtlZXApIHtcbiAgICAgICAgaWYgKCFjdHgpXG4gICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcyk7XG4gICAgICAgIGlmICh0aGlzLmhhc0FsbE51bGxWYWx1ZXModHJ1ZSkpXG4gICAgICAgICAgICByZXR1cm4gc3VwZXIudG9TdHJpbmcoT2JqZWN0LmFzc2lnbih7fSwgY3R4LCB7IGFsbE51bGxWYWx1ZXM6IHRydWUgfSksIG9uQ29tbWVudCwgb25DaG9tcEtlZXApO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NldCBpdGVtcyBtdXN0IGFsbCBoYXZlIG51bGwgdmFsdWVzJyk7XG4gICAgfVxuICAgIHN0YXRpYyBmcm9tKHNjaGVtYSwgaXRlcmFibGUsIGN0eCkge1xuICAgICAgICBjb25zdCB7IHJlcGxhY2VyIH0gPSBjdHg7XG4gICAgICAgIGNvbnN0IHNldCA9IG5ldyB0aGlzKHNjaGVtYSk7XG4gICAgICAgIGlmIChpdGVyYWJsZSAmJiBTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGl0ZXJhYmxlKSlcbiAgICAgICAgICAgIGZvciAobGV0IHZhbHVlIG9mIGl0ZXJhYmxlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSByZXBsYWNlci5jYWxsKGl0ZXJhYmxlLCB2YWx1ZSwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHNldC5pdGVtcy5wdXNoKGNyZWF0ZVBhaXIodmFsdWUsIG51bGwsIGN0eCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0O1xuICAgIH1cbn1cbllBTUxTZXQudGFnID0gJ3RhZzp5YW1sLm9yZywyMDAyOnNldCc7XG5jb25zdCBzZXQgPSB7XG4gICAgY29sbGVjdGlvbjogJ21hcCcsXG4gICAgaWRlbnRpZnk6IHZhbHVlID0+IHZhbHVlIGluc3RhbmNlb2YgU2V0LFxuICAgIG5vZGVDbGFzczogWUFNTFNldCxcbiAgICBkZWZhdWx0OiBmYWxzZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjpzZXQnLFxuICAgIGNyZWF0ZU5vZGU6IChzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpID0+IFlBTUxTZXQuZnJvbShzY2hlbWEsIGl0ZXJhYmxlLCBjdHgpLFxuICAgIHJlc29sdmUobWFwLCBvbkVycm9yKSB7XG4gICAgICAgIGlmIChpc01hcChtYXApKSB7XG4gICAgICAgICAgICBpZiAobWFwLmhhc0FsbE51bGxWYWx1ZXModHJ1ZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24obmV3IFlBTUxTZXQoKSwgbWFwKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvbkVycm9yKCdTZXQgaXRlbXMgbXVzdCBhbGwgaGF2ZSBudWxsIHZhbHVlcycpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG9uRXJyb3IoJ0V4cGVjdGVkIGEgbWFwcGluZyBmb3IgdGhpcyB0YWcnKTtcbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG59O1xuXG5leHBvcnQgeyBZQU1MU2V0LCBzZXQgfTtcbiIsImltcG9ydCB7IHN0cmluZ2lmeU51bWJlciB9IGZyb20gJy4uLy4uL3N0cmluZ2lmeS9zdHJpbmdpZnlOdW1iZXIuanMnO1xuXG4vKiogSW50ZXJuYWwgdHlwZXMgaGFuZGxlIGJpZ2ludCBhcyBudW1iZXIsIGJlY2F1c2UgVFMgY2FuJ3QgZmlndXJlIGl0IG91dC4gKi9cbmZ1bmN0aW9uIHBhcnNlU2V4YWdlc2ltYWwoc3RyLCBhc0JpZ0ludCkge1xuICAgIGNvbnN0IHNpZ24gPSBzdHJbMF07XG4gICAgY29uc3QgcGFydHMgPSBzaWduID09PSAnLScgfHwgc2lnbiA9PT0gJysnID8gc3RyLnN1YnN0cmluZygxKSA6IHN0cjtcbiAgICBjb25zdCBudW0gPSAobikgPT4gYXNCaWdJbnQgPyBCaWdJbnQobikgOiBOdW1iZXIobik7XG4gICAgY29uc3QgcmVzID0gcGFydHNcbiAgICAgICAgLnJlcGxhY2UoL18vZywgJycpXG4gICAgICAgIC5zcGxpdCgnOicpXG4gICAgICAgIC5yZWR1Y2UoKHJlcywgcCkgPT4gcmVzICogbnVtKDYwKSArIG51bShwKSwgbnVtKDApKTtcbiAgICByZXR1cm4gKHNpZ24gPT09ICctJyA/IG51bSgtMSkgKiByZXMgOiByZXMpO1xufVxuLyoqXG4gKiBoaGhoOm1tOnNzLnNzc1xuICpcbiAqIEludGVybmFsIHR5cGVzIGhhbmRsZSBiaWdpbnQgYXMgbnVtYmVyLCBiZWNhdXNlIFRTIGNhbid0IGZpZ3VyZSBpdCBvdXQuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNleGFnZXNpbWFsKG5vZGUpIHtcbiAgICBsZXQgeyB2YWx1ZSB9ID0gbm9kZTtcbiAgICBsZXQgbnVtID0gKG4pID0+IG47XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2JpZ2ludCcpXG4gICAgICAgIG51bSA9IG4gPT4gQmlnSW50KG4pO1xuICAgIGVsc2UgaWYgKGlzTmFOKHZhbHVlKSB8fCAhaXNGaW5pdGUodmFsdWUpKVxuICAgICAgICByZXR1cm4gc3RyaW5naWZ5TnVtYmVyKG5vZGUpO1xuICAgIGxldCBzaWduID0gJyc7XG4gICAgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgICBzaWduID0gJy0nO1xuICAgICAgICB2YWx1ZSAqPSBudW0oLTEpO1xuICAgIH1cbiAgICBjb25zdCBfNjAgPSBudW0oNjApO1xuICAgIGNvbnN0IHBhcnRzID0gW3ZhbHVlICUgXzYwXTsgLy8gc2Vjb25kcywgaW5jbHVkaW5nIG1zXG4gICAgaWYgKHZhbHVlIDwgNjApIHtcbiAgICAgICAgcGFydHMudW5zaGlmdCgwKTsgLy8gYXQgbGVhc3Qgb25lIDogaXMgcmVxdWlyZWRcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIC0gcGFydHNbMF0pIC8gXzYwO1xuICAgICAgICBwYXJ0cy51bnNoaWZ0KHZhbHVlICUgXzYwKTsgLy8gbWludXRlc1xuICAgICAgICBpZiAodmFsdWUgPj0gNjApIHtcbiAgICAgICAgICAgIHZhbHVlID0gKHZhbHVlIC0gcGFydHNbMF0pIC8gXzYwO1xuICAgICAgICAgICAgcGFydHMudW5zaGlmdCh2YWx1ZSk7IC8vIGhvdXJzXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChzaWduICtcbiAgICAgICAgcGFydHNcbiAgICAgICAgICAgIC5tYXAobiA9PiBTdHJpbmcobikucGFkU3RhcnQoMiwgJzAnKSlcbiAgICAgICAgICAgIC5qb2luKCc6JylcbiAgICAgICAgICAgIC5yZXBsYWNlKC8wMDAwMDBcXGQqJC8sICcnKSAvLyAlIDYwIG1heSBpbnRyb2R1Y2UgZXJyb3JcbiAgICApO1xufVxuY29uc3QgaW50VGltZSA9IHtcbiAgICBpZGVudGlmeTogdmFsdWUgPT4gdHlwZW9mIHZhbHVlID09PSAnYmlnaW50JyB8fCBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKSxcbiAgICBkZWZhdWx0OiB0cnVlLFxuICAgIHRhZzogJ3RhZzp5YW1sLm9yZywyMDAyOmludCcsXG4gICAgZm9ybWF0OiAnVElNRScsXG4gICAgdGVzdDogL15bLStdP1swLTldWzAtOV9dKig/OjpbMC01XT9bMC05XSkrJC8sXG4gICAgcmVzb2x2ZTogKHN0ciwgX29uRXJyb3IsIHsgaW50QXNCaWdJbnQgfSkgPT4gcGFyc2VTZXhhZ2VzaW1hbChzdHIsIGludEFzQmlnSW50KSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVNleGFnZXNpbWFsXG59O1xuY29uc3QgZmxvYXRUaW1lID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInLFxuICAgIGRlZmF1bHQ6IHRydWUsXG4gICAgdGFnOiAndGFnOnlhbWwub3JnLDIwMDI6ZmxvYXQnLFxuICAgIGZvcm1hdDogJ1RJTUUnLFxuICAgIHRlc3Q6IC9eWy0rXT9bMC05XVswLTlfXSooPzo6WzAtNV0/WzAtOV0pK1xcLlswLTlfXSokLyxcbiAgICByZXNvbHZlOiBzdHIgPT4gcGFyc2VTZXhhZ2VzaW1hbChzdHIsIGZhbHNlKSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVNleGFnZXNpbWFsXG59O1xuY29uc3QgdGltZXN0YW1wID0ge1xuICAgIGlkZW50aWZ5OiB2YWx1ZSA9PiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUsXG4gICAgZGVmYXVsdDogdHJ1ZSxcbiAgICB0YWc6ICd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnLFxuICAgIC8vIElmIHRoZSB0aW1lIHpvbmUgaXMgb21pdHRlZCwgdGhlIHRpbWVzdGFtcCBpcyBhc3N1bWVkIHRvIGJlIHNwZWNpZmllZCBpbiBVVEMuIFRoZSB0aW1lIHBhcnRcbiAgICAvLyBtYXkgYmUgb21pdHRlZCBhbHRvZ2V0aGVyLCByZXN1bHRpbmcgaW4gYSBkYXRlIGZvcm1hdC4gSW4gc3VjaCBhIGNhc2UsIHRoZSB0aW1lIHBhcnQgaXNcbiAgICAvLyBhc3N1bWVkIHRvIGJlIDAwOjAwOjAwWiAoc3RhcnQgb2YgZGF5LCBVVEMpLlxuICAgIHRlc3Q6IFJlZ0V4cCgnXihbMC05XXs0fSktKFswLTldezEsMn0pLShbMC05XXsxLDJ9KScgKyAvLyBZWVlZLU1tLURkXG4gICAgICAgICcoPzonICsgLy8gdGltZSBpcyBvcHRpb25hbFxuICAgICAgICAnKD86dHxUfFsgXFxcXHRdKyknICsgLy8gdCB8IFQgfCB3aGl0ZXNwYWNlXG4gICAgICAgICcoWzAtOV17MSwyfSk6KFswLTldezEsMn0pOihbMC05XXsxLDJ9KFxcXFwuWzAtOV0rKT8pJyArIC8vIEhoOk1tOlNzKC5zcyk/XG4gICAgICAgICcoPzpbIFxcXFx0XSooWnxbLStdWzAxMl0/WzAtOV0oPzo6WzAtOV17Mn0pPykpPycgKyAvLyBaIHwgKzUgfCAtMDM6MzBcbiAgICAgICAgJyk/JCcpLFxuICAgIHJlc29sdmUoc3RyKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gc3RyLm1hdGNoKHRpbWVzdGFtcC50ZXN0KTtcbiAgICAgICAgaWYgKCFtYXRjaClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignISF0aW1lc3RhbXAgZXhwZWN0cyBhIGRhdGUsIHN0YXJ0aW5nIHdpdGggeXl5eS1tbS1kZCcpO1xuICAgICAgICBjb25zdCBbLCB5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZF0gPSBtYXRjaC5tYXAoTnVtYmVyKTtcbiAgICAgICAgY29uc3QgbWlsbGlzZWMgPSBtYXRjaFs3XSA/IE51bWJlcigobWF0Y2hbN10gKyAnMDAnKS5zdWJzdHIoMSwgMykpIDogMDtcbiAgICAgICAgbGV0IGRhdGUgPSBEYXRlLlVUQyh5ZWFyLCBtb250aCAtIDEsIGRheSwgaG91ciB8fCAwLCBtaW51dGUgfHwgMCwgc2Vjb25kIHx8IDAsIG1pbGxpc2VjKTtcbiAgICAgICAgY29uc3QgdHogPSBtYXRjaFs4XTtcbiAgICAgICAgaWYgKHR6ICYmIHR6ICE9PSAnWicpIHtcbiAgICAgICAgICAgIGxldCBkID0gcGFyc2VTZXhhZ2VzaW1hbCh0eiwgZmFsc2UpO1xuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGQpIDwgMzApXG4gICAgICAgICAgICAgICAgZCAqPSA2MDtcbiAgICAgICAgICAgIGRhdGUgLT0gNjAwMDAgKiBkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKTtcbiAgICB9LFxuICAgIHN0cmluZ2lmeTogKHsgdmFsdWUgfSkgPT4gdmFsdWUudG9JU09TdHJpbmcoKS5yZXBsYWNlKC8oVDAwOjAwOjAwKT9cXC4wMDBaJC8sICcnKVxufTtcblxuZXhwb3J0IHsgZmxvYXRUaW1lLCBpbnRUaW1lLCB0aW1lc3RhbXAgfTtcbiIsImltcG9ydCB7IG1hcCB9IGZyb20gJy4uL2NvbW1vbi9tYXAuanMnO1xuaW1wb3J0IHsgbnVsbFRhZyB9IGZyb20gJy4uL2NvbW1vbi9udWxsLmpzJztcbmltcG9ydCB7IHNlcSB9IGZyb20gJy4uL2NvbW1vbi9zZXEuanMnO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnLi4vY29tbW9uL3N0cmluZy5qcyc7XG5pbXBvcnQgeyBiaW5hcnkgfSBmcm9tICcuL2JpbmFyeS5qcyc7XG5pbXBvcnQgeyB0cnVlVGFnLCBmYWxzZVRhZyB9IGZyb20gJy4vYm9vbC5qcyc7XG5pbXBvcnQgeyBmbG9hdE5hTiwgZmxvYXRFeHAsIGZsb2F0IH0gZnJvbSAnLi9mbG9hdC5qcyc7XG5pbXBvcnQgeyBpbnRCaW4sIGludE9jdCwgaW50LCBpbnRIZXggfSBmcm9tICcuL2ludC5qcyc7XG5pbXBvcnQgeyBtZXJnZSB9IGZyb20gJy4vbWVyZ2UuanMnO1xuaW1wb3J0IHsgb21hcCB9IGZyb20gJy4vb21hcC5qcyc7XG5pbXBvcnQgeyBwYWlycyB9IGZyb20gJy4vcGFpcnMuanMnO1xuaW1wb3J0IHsgc2V0IH0gZnJvbSAnLi9zZXQuanMnO1xuaW1wb3J0IHsgaW50VGltZSwgZmxvYXRUaW1lLCB0aW1lc3RhbXAgfSBmcm9tICcuL3RpbWVzdGFtcC5qcyc7XG5cbmNvbnN0IHNjaGVtYSA9IFtcbiAgICBtYXAsXG4gICAgc2VxLFxuICAgIHN0cmluZyxcbiAgICBudWxsVGFnLFxuICAgIHRydWVUYWcsXG4gICAgZmFsc2VUYWcsXG4gICAgaW50QmluLFxuICAgIGludE9jdCxcbiAgICBpbnQsXG4gICAgaW50SGV4LFxuICAgIGZsb2F0TmFOLFxuICAgIGZsb2F0RXhwLFxuICAgIGZsb2F0LFxuICAgIGJpbmFyeSxcbiAgICBtZXJnZSxcbiAgICBvbWFwLFxuICAgIHBhaXJzLFxuICAgIHNldCxcbiAgICBpbnRUaW1lLFxuICAgIGZsb2F0VGltZSxcbiAgICB0aW1lc3RhbXBcbl07XG5cbmV4cG9ydCB7IHNjaGVtYSB9O1xuIiwiaW1wb3J0IHsgbWFwIH0gZnJvbSAnLi9jb21tb24vbWFwLmpzJztcbmltcG9ydCB7IG51bGxUYWcgfSBmcm9tICcuL2NvbW1vbi9udWxsLmpzJztcbmltcG9ydCB7IHNlcSB9IGZyb20gJy4vY29tbW9uL3NlcS5qcyc7XG5pbXBvcnQgeyBzdHJpbmcgfSBmcm9tICcuL2NvbW1vbi9zdHJpbmcuanMnO1xuaW1wb3J0IHsgYm9vbFRhZyB9IGZyb20gJy4vY29yZS9ib29sLmpzJztcbmltcG9ydCB7IGZsb2F0LCBmbG9hdEV4cCwgZmxvYXROYU4gfSBmcm9tICcuL2NvcmUvZmxvYXQuanMnO1xuaW1wb3J0IHsgaW50LCBpbnRIZXgsIGludE9jdCB9IGZyb20gJy4vY29yZS9pbnQuanMnO1xuaW1wb3J0IHsgc2NoZW1hIH0gZnJvbSAnLi9jb3JlL3NjaGVtYS5qcyc7XG5pbXBvcnQgeyBzY2hlbWEgYXMgc2NoZW1hJDEgfSBmcm9tICcuL2pzb24vc2NoZW1hLmpzJztcbmltcG9ydCB7IGJpbmFyeSB9IGZyb20gJy4veWFtbC0xLjEvYmluYXJ5LmpzJztcbmltcG9ydCB7IG1lcmdlIH0gZnJvbSAnLi95YW1sLTEuMS9tZXJnZS5qcyc7XG5pbXBvcnQgeyBvbWFwIH0gZnJvbSAnLi95YW1sLTEuMS9vbWFwLmpzJztcbmltcG9ydCB7IHBhaXJzIH0gZnJvbSAnLi95YW1sLTEuMS9wYWlycy5qcyc7XG5pbXBvcnQgeyBzY2hlbWEgYXMgc2NoZW1hJDIgfSBmcm9tICcuL3lhbWwtMS4xL3NjaGVtYS5qcyc7XG5pbXBvcnQgeyBzZXQgfSBmcm9tICcuL3lhbWwtMS4xL3NldC5qcyc7XG5pbXBvcnQgeyB0aW1lc3RhbXAsIGZsb2F0VGltZSwgaW50VGltZSB9IGZyb20gJy4veWFtbC0xLjEvdGltZXN0YW1wLmpzJztcblxuY29uc3Qgc2NoZW1hcyA9IG5ldyBNYXAoW1xuICAgIFsnY29yZScsIHNjaGVtYV0sXG4gICAgWydmYWlsc2FmZScsIFttYXAsIHNlcSwgc3RyaW5nXV0sXG4gICAgWydqc29uJywgc2NoZW1hJDFdLFxuICAgIFsneWFtbDExJywgc2NoZW1hJDJdLFxuICAgIFsneWFtbC0xLjEnLCBzY2hlbWEkMl1cbl0pO1xuY29uc3QgdGFnc0J5TmFtZSA9IHtcbiAgICBiaW5hcnksXG4gICAgYm9vbDogYm9vbFRhZyxcbiAgICBmbG9hdCxcbiAgICBmbG9hdEV4cCxcbiAgICBmbG9hdE5hTixcbiAgICBmbG9hdFRpbWUsXG4gICAgaW50LFxuICAgIGludEhleCxcbiAgICBpbnRPY3QsXG4gICAgaW50VGltZSxcbiAgICBtYXAsXG4gICAgbWVyZ2UsXG4gICAgbnVsbDogbnVsbFRhZyxcbiAgICBvbWFwLFxuICAgIHBhaXJzLFxuICAgIHNlcSxcbiAgICBzZXQsXG4gICAgdGltZXN0YW1wXG59O1xuY29uc3QgY29yZUtub3duVGFncyA9IHtcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5JzogYmluYXJ5LFxuICAgICd0YWc6eWFtbC5vcmcsMjAwMjptZXJnZSc6IG1lcmdlLFxuICAgICd0YWc6eWFtbC5vcmcsMjAwMjpvbWFwJzogb21hcCxcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6cGFpcnMnOiBwYWlycyxcbiAgICAndGFnOnlhbWwub3JnLDIwMDI6c2V0Jzogc2V0LFxuICAgICd0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAnOiB0aW1lc3RhbXBcbn07XG5mdW5jdGlvbiBnZXRUYWdzKGN1c3RvbVRhZ3MsIHNjaGVtYU5hbWUsIGFkZE1lcmdlVGFnKSB7XG4gICAgY29uc3Qgc2NoZW1hVGFncyA9IHNjaGVtYXMuZ2V0KHNjaGVtYU5hbWUpO1xuICAgIGlmIChzY2hlbWFUYWdzICYmICFjdXN0b21UYWdzKSB7XG4gICAgICAgIHJldHVybiBhZGRNZXJnZVRhZyAmJiAhc2NoZW1hVGFncy5pbmNsdWRlcyhtZXJnZSlcbiAgICAgICAgICAgID8gc2NoZW1hVGFncy5jb25jYXQobWVyZ2UpXG4gICAgICAgICAgICA6IHNjaGVtYVRhZ3Muc2xpY2UoKTtcbiAgICB9XG4gICAgbGV0IHRhZ3MgPSBzY2hlbWFUYWdzO1xuICAgIGlmICghdGFncykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjdXN0b21UYWdzKSlcbiAgICAgICAgICAgIHRhZ3MgPSBbXTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBrZXlzID0gQXJyYXkuZnJvbShzY2hlbWFzLmtleXMoKSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKGtleSA9PiBrZXkgIT09ICd5YW1sMTEnKVxuICAgICAgICAgICAgICAgIC5tYXAoa2V5ID0+IEpTT04uc3RyaW5naWZ5KGtleSkpXG4gICAgICAgICAgICAgICAgLmpvaW4oJywgJyk7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gc2NoZW1hIFwiJHtzY2hlbWFOYW1lfVwiOyB1c2Ugb25lIG9mICR7a2V5c30gb3IgZGVmaW5lIGN1c3RvbVRhZ3MgYXJyYXlgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheShjdXN0b21UYWdzKSkge1xuICAgICAgICBmb3IgKGNvbnN0IHRhZyBvZiBjdXN0b21UYWdzKVxuICAgICAgICAgICAgdGFncyA9IHRhZ3MuY29uY2F0KHRhZyk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjdXN0b21UYWdzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRhZ3MgPSBjdXN0b21UYWdzKHRhZ3Muc2xpY2UoKSk7XG4gICAgfVxuICAgIGlmIChhZGRNZXJnZVRhZylcbiAgICAgICAgdGFncyA9IHRhZ3MuY29uY2F0KG1lcmdlKTtcbiAgICByZXR1cm4gdGFncy5yZWR1Y2UoKHRhZ3MsIHRhZykgPT4ge1xuICAgICAgICBjb25zdCB0YWdPYmogPSB0eXBlb2YgdGFnID09PSAnc3RyaW5nJyA/IHRhZ3NCeU5hbWVbdGFnXSA6IHRhZztcbiAgICAgICAgaWYgKCF0YWdPYmopIHtcbiAgICAgICAgICAgIGNvbnN0IHRhZ05hbWUgPSBKU09OLnN0cmluZ2lmeSh0YWcpO1xuICAgICAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRhZ3NCeU5hbWUpXG4gICAgICAgICAgICAgICAgLm1hcChrZXkgPT4gSlNPTi5zdHJpbmdpZnkoa2V5KSlcbiAgICAgICAgICAgICAgICAuam9pbignLCAnKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBjdXN0b20gdGFnICR7dGFnTmFtZX07IHVzZSBvbmUgb2YgJHtrZXlzfWApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGFncy5pbmNsdWRlcyh0YWdPYmopKVxuICAgICAgICAgICAgdGFncy5wdXNoKHRhZ09iaik7XG4gICAgICAgIHJldHVybiB0YWdzO1xuICAgIH0sIFtdKTtcbn1cblxuZXhwb3J0IHsgY29yZUtub3duVGFncywgZ2V0VGFncyB9O1xuIiwiaW1wb3J0IHsgTUFQLCBTQ0FMQVIsIFNFUSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJy4vY29tbW9uL21hcC5qcyc7XG5pbXBvcnQgeyBzZXEgfSBmcm9tICcuL2NvbW1vbi9zZXEuanMnO1xuaW1wb3J0IHsgc3RyaW5nIH0gZnJvbSAnLi9jb21tb24vc3RyaW5nLmpzJztcbmltcG9ydCB7IGdldFRhZ3MsIGNvcmVLbm93blRhZ3MgfSBmcm9tICcuL3RhZ3MuanMnO1xuXG5jb25zdCBzb3J0TWFwRW50cmllc0J5S2V5ID0gKGEsIGIpID0+IGEua2V5IDwgYi5rZXkgPyAtMSA6IGEua2V5ID4gYi5rZXkgPyAxIDogMDtcbmNsYXNzIFNjaGVtYSB7XG4gICAgY29uc3RydWN0b3IoeyBjb21wYXQsIGN1c3RvbVRhZ3MsIG1lcmdlLCByZXNvbHZlS25vd25UYWdzLCBzY2hlbWEsIHNvcnRNYXBFbnRyaWVzLCB0b1N0cmluZ0RlZmF1bHRzIH0pIHtcbiAgICAgICAgdGhpcy5jb21wYXQgPSBBcnJheS5pc0FycmF5KGNvbXBhdClcbiAgICAgICAgICAgID8gZ2V0VGFncyhjb21wYXQsICdjb21wYXQnKVxuICAgICAgICAgICAgOiBjb21wYXRcbiAgICAgICAgICAgICAgICA/IGdldFRhZ3MobnVsbCwgY29tcGF0KVxuICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgdGhpcy5uYW1lID0gKHR5cGVvZiBzY2hlbWEgPT09ICdzdHJpbmcnICYmIHNjaGVtYSkgfHwgJ2NvcmUnO1xuICAgICAgICB0aGlzLmtub3duVGFncyA9IHJlc29sdmVLbm93blRhZ3MgPyBjb3JlS25vd25UYWdzIDoge307XG4gICAgICAgIHRoaXMudGFncyA9IGdldFRhZ3MoY3VzdG9tVGFncywgdGhpcy5uYW1lLCBtZXJnZSk7XG4gICAgICAgIHRoaXMudG9TdHJpbmdPcHRpb25zID0gdG9TdHJpbmdEZWZhdWx0cyA/PyBudWxsO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgTUFQLCB7IHZhbHVlOiBtYXAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBTQ0FMQVIsIHsgdmFsdWU6IHN0cmluZyB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFNFUSwgeyB2YWx1ZTogc2VxIH0pO1xuICAgICAgICAvLyBVc2VkIGJ5IGNyZWF0ZU1hcCgpXG4gICAgICAgIHRoaXMuc29ydE1hcEVudHJpZXMgPVxuICAgICAgICAgICAgdHlwZW9mIHNvcnRNYXBFbnRyaWVzID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICAgICAgPyBzb3J0TWFwRW50cmllc1xuICAgICAgICAgICAgICAgIDogc29ydE1hcEVudHJpZXMgPT09IHRydWVcbiAgICAgICAgICAgICAgICAgICAgPyBzb3J0TWFwRW50cmllc0J5S2V5XG4gICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICB9XG4gICAgY2xvbmUoKSB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBPYmplY3QuY3JlYXRlKFNjaGVtYS5wcm90b3R5cGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHRoaXMpKTtcbiAgICAgICAgY29weS50YWdzID0gdGhpcy50YWdzLnNsaWNlKCk7XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgU2NoZW1hIH07XG4iLCJpbXBvcnQgeyBBbGlhcyB9IGZyb20gJy4uL25vZGVzL0FsaWFzLmpzJztcbmltcG9ydCB7IGlzRW1wdHlQYXRoLCBjb2xsZWN0aW9uRnJvbVBhdGggfSBmcm9tICcuLi9ub2Rlcy9Db2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IE5PREVfVFlQRSwgRE9DLCBpc05vZGUsIGlzQ29sbGVjdGlvbiwgaXNTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyIH0gZnJvbSAnLi4vbm9kZXMvUGFpci5qcyc7XG5pbXBvcnQgeyB0b0pTIH0gZnJvbSAnLi4vbm9kZXMvdG9KUy5qcyc7XG5pbXBvcnQgeyBTY2hlbWEgfSBmcm9tICcuLi9zY2hlbWEvU2NoZW1hLmpzJztcbmltcG9ydCB7IHN0cmluZ2lmeURvY3VtZW50IH0gZnJvbSAnLi4vc3RyaW5naWZ5L3N0cmluZ2lmeURvY3VtZW50LmpzJztcbmltcG9ydCB7IGFuY2hvck5hbWVzLCBmaW5kTmV3QW5jaG9yLCBjcmVhdGVOb2RlQW5jaG9ycyB9IGZyb20gJy4vYW5jaG9ycy5qcyc7XG5pbXBvcnQgeyBhcHBseVJldml2ZXIgfSBmcm9tICcuL2FwcGx5UmV2aXZlci5qcyc7XG5pbXBvcnQgeyBjcmVhdGVOb2RlIH0gZnJvbSAnLi9jcmVhdGVOb2RlLmpzJztcbmltcG9ydCB7IERpcmVjdGl2ZXMgfSBmcm9tICcuL2RpcmVjdGl2ZXMuanMnO1xuXG5jbGFzcyBEb2N1bWVudCB7XG4gICAgY29uc3RydWN0b3IodmFsdWUsIHJlcGxhY2VyLCBvcHRpb25zKSB7XG4gICAgICAgIC8qKiBBIGNvbW1lbnQgYmVmb3JlIHRoaXMgRG9jdW1lbnQgKi9cbiAgICAgICAgdGhpcy5jb21tZW50QmVmb3JlID0gbnVsbDtcbiAgICAgICAgLyoqIEEgY29tbWVudCBpbW1lZGlhdGVseSBhZnRlciB0aGlzIERvY3VtZW50ICovXG4gICAgICAgIHRoaXMuY29tbWVudCA9IG51bGw7XG4gICAgICAgIC8qKiBFcnJvcnMgZW5jb3VudGVyZWQgZHVyaW5nIHBhcnNpbmcuICovXG4gICAgICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgICAgIC8qKiBXYXJuaW5ncyBlbmNvdW50ZXJlZCBkdXJpbmcgcGFyc2luZy4gKi9cbiAgICAgICAgdGhpcy53YXJuaW5ncyA9IFtdO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgTk9ERV9UWVBFLCB7IHZhbHVlOiBET0MgfSk7XG4gICAgICAgIGxldCBfcmVwbGFjZXIgPSBudWxsO1xuICAgICAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nIHx8IEFycmF5LmlzQXJyYXkocmVwbGFjZXIpKSB7XG4gICAgICAgICAgICBfcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgJiYgcmVwbGFjZXIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZXBsYWNlcjtcbiAgICAgICAgICAgIHJlcGxhY2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9wdCA9IE9iamVjdC5hc3NpZ24oe1xuICAgICAgICAgICAgaW50QXNCaWdJbnQ6IGZhbHNlLFxuICAgICAgICAgICAga2VlcFNvdXJjZVRva2VuczogZmFsc2UsXG4gICAgICAgICAgICBsb2dMZXZlbDogJ3dhcm4nLFxuICAgICAgICAgICAgcHJldHR5RXJyb3JzOiB0cnVlLFxuICAgICAgICAgICAgc3RyaWN0OiB0cnVlLFxuICAgICAgICAgICAgc3RyaW5nS2V5czogZmFsc2UsXG4gICAgICAgICAgICB1bmlxdWVLZXlzOiB0cnVlLFxuICAgICAgICAgICAgdmVyc2lvbjogJzEuMidcbiAgICAgICAgfSwgb3B0aW9ucyk7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdDtcbiAgICAgICAgbGV0IHsgdmVyc2lvbiB9ID0gb3B0O1xuICAgICAgICBpZiAob3B0aW9ucz8uX2RpcmVjdGl2ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IG9wdGlvbnMuX2RpcmVjdGl2ZXMuYXREb2N1bWVudCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlcy55YW1sLmV4cGxpY2l0KVxuICAgICAgICAgICAgICAgIHZlcnNpb24gPSB0aGlzLmRpcmVjdGl2ZXMueWFtbC52ZXJzaW9uO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IG5ldyBEaXJlY3RpdmVzKHsgdmVyc2lvbiB9KTtcbiAgICAgICAgdGhpcy5zZXRTY2hlbWEodmVyc2lvbiwgb3B0aW9ucyk7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgY2FuJ3QgcmVhbGx5IGtub3cgdGhhdCB0aGlzIG1hdGNoZXMgQ29udGVudHMuXG4gICAgICAgIHRoaXMuY29udGVudHMgPVxuICAgICAgICAgICAgdmFsdWUgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB0aGlzLmNyZWF0ZU5vZGUodmFsdWUsIF9yZXBsYWNlciwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIGRlZXAgY29weSBvZiB0aGlzIERvY3VtZW50IGFuZCBpdHMgY29udGVudHMuXG4gICAgICpcbiAgICAgKiBDdXN0b20gTm9kZSB2YWx1ZXMgdGhhdCBpbmhlcml0IGZyb20gYE9iamVjdGAgc3RpbGwgcmVmZXIgdG8gdGhlaXIgb3JpZ2luYWwgaW5zdGFuY2VzLlxuICAgICAqL1xuICAgIGNsb25lKCkge1xuICAgICAgICBjb25zdCBjb3B5ID0gT2JqZWN0LmNyZWF0ZShEb2N1bWVudC5wcm90b3R5cGUsIHtcbiAgICAgICAgICAgIFtOT0RFX1RZUEVdOiB7IHZhbHVlOiBET0MgfVxuICAgICAgICB9KTtcbiAgICAgICAgY29weS5jb21tZW50QmVmb3JlID0gdGhpcy5jb21tZW50QmVmb3JlO1xuICAgICAgICBjb3B5LmNvbW1lbnQgPSB0aGlzLmNvbW1lbnQ7XG4gICAgICAgIGNvcHkuZXJyb3JzID0gdGhpcy5lcnJvcnMuc2xpY2UoKTtcbiAgICAgICAgY29weS53YXJuaW5ncyA9IHRoaXMud2FybmluZ3Muc2xpY2UoKTtcbiAgICAgICAgY29weS5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlcylcbiAgICAgICAgICAgIGNvcHkuZGlyZWN0aXZlcyA9IHRoaXMuZGlyZWN0aXZlcy5jbG9uZSgpO1xuICAgICAgICBjb3B5LnNjaGVtYSA9IHRoaXMuc2NoZW1hLmNsb25lKCk7XG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgY2FuJ3QgcmVhbGx5IGtub3cgdGhhdCB0aGlzIG1hdGNoZXMgQ29udGVudHMuXG4gICAgICAgIGNvcHkuY29udGVudHMgPSBpc05vZGUodGhpcy5jb250ZW50cylcbiAgICAgICAgICAgID8gdGhpcy5jb250ZW50cy5jbG9uZShjb3B5LnNjaGVtYSlcbiAgICAgICAgICAgIDogdGhpcy5jb250ZW50cztcbiAgICAgICAgaWYgKHRoaXMucmFuZ2UpXG4gICAgICAgICAgICBjb3B5LnJhbmdlID0gdGhpcy5yYW5nZS5zbGljZSgpO1xuICAgICAgICByZXR1cm4gY29weTtcbiAgICB9XG4gICAgLyoqIEFkZHMgYSB2YWx1ZSB0byB0aGUgZG9jdW1lbnQuICovXG4gICAgYWRkKHZhbHVlKSB7XG4gICAgICAgIGlmIChhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpKVxuICAgICAgICAgICAgdGhpcy5jb250ZW50cy5hZGQodmFsdWUpO1xuICAgIH1cbiAgICAvKiogQWRkcyBhIHZhbHVlIHRvIHRoZSBkb2N1bWVudC4gKi9cbiAgICBhZGRJbihwYXRoLCB2YWx1ZSkge1xuICAgICAgICBpZiAoYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSlcbiAgICAgICAgICAgIHRoaXMuY29udGVudHMuYWRkSW4ocGF0aCwgdmFsdWUpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcgYEFsaWFzYCBub2RlLCBlbnN1cmluZyB0aGF0IHRoZSB0YXJnZXQgYG5vZGVgIGhhcyB0aGUgcmVxdWlyZWQgYW5jaG9yLlxuICAgICAqXG4gICAgICogSWYgYG5vZGVgIGFscmVhZHkgaGFzIGFuIGFuY2hvciwgYG5hbWVgIGlzIGlnbm9yZWQuXG4gICAgICogT3RoZXJ3aXNlLCB0aGUgYG5vZGUuYW5jaG9yYCB2YWx1ZSB3aWxsIGJlIHNldCB0byBgbmFtZWAsXG4gICAgICogb3IgaWYgYW4gYW5jaG9yIHdpdGggdGhhdCBuYW1lIGlzIGFscmVhZHkgcHJlc2VudCBpbiB0aGUgZG9jdW1lbnQsXG4gICAgICogYG5hbWVgIHdpbGwgYmUgdXNlZCBhcyBhIHByZWZpeCBmb3IgYSBuZXcgdW5pcXVlIGFuY2hvci5cbiAgICAgKiBJZiBgbmFtZWAgaXMgdW5kZWZpbmVkLCB0aGUgZ2VuZXJhdGVkIGFuY2hvciB3aWxsIHVzZSAnYScgYXMgYSBwcmVmaXguXG4gICAgICovXG4gICAgY3JlYXRlQWxpYXMobm9kZSwgbmFtZSkge1xuICAgICAgICBpZiAoIW5vZGUuYW5jaG9yKSB7XG4gICAgICAgICAgICBjb25zdCBwcmV2ID0gYW5jaG9yTmFtZXModGhpcyk7XG4gICAgICAgICAgICBub2RlLmFuY2hvciA9XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9wcmVmZXItbnVsbGlzaC1jb2FsZXNjaW5nXG4gICAgICAgICAgICAgICAgIW5hbWUgfHwgcHJldi5oYXMobmFtZSkgPyBmaW5kTmV3QW5jaG9yKG5hbWUgfHwgJ2EnLCBwcmV2KSA6IG5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBbGlhcyhub2RlLmFuY2hvcik7XG4gICAgfVxuICAgIGNyZWF0ZU5vZGUodmFsdWUsIHJlcGxhY2VyLCBvcHRpb25zKSB7XG4gICAgICAgIGxldCBfcmVwbGFjZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0eXBlb2YgcmVwbGFjZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHZhbHVlID0gcmVwbGFjZXIuY2FsbCh7ICcnOiB2YWx1ZSB9LCAnJywgdmFsdWUpO1xuICAgICAgICAgICAgX3JlcGxhY2VyID0gcmVwbGFjZXI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoQXJyYXkuaXNBcnJheShyZXBsYWNlcikpIHtcbiAgICAgICAgICAgIGNvbnN0IGtleVRvU3RyID0gKHYpID0+IHR5cGVvZiB2ID09PSAnbnVtYmVyJyB8fCB2IGluc3RhbmNlb2YgU3RyaW5nIHx8IHYgaW5zdGFuY2VvZiBOdW1iZXI7XG4gICAgICAgICAgICBjb25zdCBhc1N0ciA9IHJlcGxhY2VyLmZpbHRlcihrZXlUb1N0cikubWFwKFN0cmluZyk7XG4gICAgICAgICAgICBpZiAoYXNTdHIubGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICByZXBsYWNlciA9IHJlcGxhY2VyLmNvbmNhdChhc1N0cik7XG4gICAgICAgICAgICBfcmVwbGFjZXIgPSByZXBsYWNlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgJiYgcmVwbGFjZXIpIHtcbiAgICAgICAgICAgIG9wdGlvbnMgPSByZXBsYWNlcjtcbiAgICAgICAgICAgIHJlcGxhY2VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgYWxpYXNEdXBsaWNhdGVPYmplY3RzLCBhbmNob3JQcmVmaXgsIGZsb3csIGtlZXBVbmRlZmluZWQsIG9uVGFnT2JqLCB0YWcgfSA9IG9wdGlvbnMgPz8ge307XG4gICAgICAgIGNvbnN0IHsgb25BbmNob3IsIHNldEFuY2hvcnMsIHNvdXJjZU9iamVjdHMgfSA9IGNyZWF0ZU5vZGVBbmNob3JzKHRoaXMsIFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L3ByZWZlci1udWxsaXNoLWNvYWxlc2NpbmdcbiAgICAgICAgYW5jaG9yUHJlZml4IHx8ICdhJyk7XG4gICAgICAgIGNvbnN0IGN0eCA9IHtcbiAgICAgICAgICAgIGFsaWFzRHVwbGljYXRlT2JqZWN0czogYWxpYXNEdXBsaWNhdGVPYmplY3RzID8/IHRydWUsXG4gICAgICAgICAgICBrZWVwVW5kZWZpbmVkOiBrZWVwVW5kZWZpbmVkID8/IGZhbHNlLFxuICAgICAgICAgICAgb25BbmNob3IsXG4gICAgICAgICAgICBvblRhZ09iaixcbiAgICAgICAgICAgIHJlcGxhY2VyOiBfcmVwbGFjZXIsXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMuc2NoZW1hLFxuICAgICAgICAgICAgc291cmNlT2JqZWN0c1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBub2RlID0gY3JlYXRlTm9kZSh2YWx1ZSwgdGFnLCBjdHgpO1xuICAgICAgICBpZiAoZmxvdyAmJiBpc0NvbGxlY3Rpb24obm9kZSkpXG4gICAgICAgICAgICBub2RlLmZsb3cgPSB0cnVlO1xuICAgICAgICBzZXRBbmNob3JzKCk7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0IGEga2V5IGFuZCBhIHZhbHVlIGludG8gYSBgUGFpcmAgdXNpbmcgdGhlIGN1cnJlbnQgc2NoZW1hLFxuICAgICAqIHJlY3Vyc2l2ZWx5IHdyYXBwaW5nIGFsbCB2YWx1ZXMgYXMgYFNjYWxhcmAgb3IgYENvbGxlY3Rpb25gIG5vZGVzLlxuICAgICAqL1xuICAgIGNyZWF0ZVBhaXIoa2V5LCB2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGsgPSB0aGlzLmNyZWF0ZU5vZGUoa2V5LCBudWxsLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgdiA9IHRoaXMuY3JlYXRlTm9kZSh2YWx1ZSwgbnVsbCwgb3B0aW9ucyk7XG4gICAgICAgIHJldHVybiBuZXcgUGFpcihrLCB2KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhlIGRvY3VtZW50LlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgaXRlbSB3YXMgZm91bmQgYW5kIHJlbW92ZWQuXG4gICAgICovXG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICByZXR1cm4gYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSA/IHRoaXMuY29udGVudHMuZGVsZXRlKGtleSkgOiBmYWxzZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHZhbHVlIGZyb20gdGhlIGRvY3VtZW50LlxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGUgaXRlbSB3YXMgZm91bmQgYW5kIHJlbW92ZWQuXG4gICAgICovXG4gICAgZGVsZXRlSW4ocGF0aCkge1xuICAgICAgICBpZiAoaXNFbXB0eVBhdGgocGF0aCkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnRzID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBQcmVzdW1lZCBpbXBvc3NpYmxlIGlmIFN0cmljdCBleHRlbmRzIGZhbHNlXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzID0gbnVsbDtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhc3NlcnRDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpXG4gICAgICAgICAgICA/IHRoaXMuY29udGVudHMuZGVsZXRlSW4ocGF0aClcbiAgICAgICAgICAgIDogZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgaXRlbSBhdCBga2V5YCwgb3IgYHVuZGVmaW5lZGAgaWYgbm90IGZvdW5kLiBCeSBkZWZhdWx0IHVud3JhcHNcbiAgICAgKiBzY2FsYXIgdmFsdWVzIGZyb20gdGhlaXIgc3Vycm91bmRpbmcgbm9kZTsgdG8gZGlzYWJsZSBzZXQgYGtlZXBTY2FsYXJgIHRvXG4gICAgICogYHRydWVgIChjb2xsZWN0aW9ucyBhcmUgYWx3YXlzIHJldHVybmVkIGludGFjdCkuXG4gICAgICovXG4gICAgZ2V0KGtleSwga2VlcFNjYWxhcikge1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpXG4gICAgICAgICAgICA/IHRoaXMuY29udGVudHMuZ2V0KGtleSwga2VlcFNjYWxhcilcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGl0ZW0gYXQgYHBhdGhgLCBvciBgdW5kZWZpbmVkYCBpZiBub3QgZm91bmQuIEJ5IGRlZmF1bHQgdW53cmFwc1xuICAgICAqIHNjYWxhciB2YWx1ZXMgZnJvbSB0aGVpciBzdXJyb3VuZGluZyBub2RlOyB0byBkaXNhYmxlIHNldCBga2VlcFNjYWxhcmAgdG9cbiAgICAgKiBgdHJ1ZWAgKGNvbGxlY3Rpb25zIGFyZSBhbHdheXMgcmV0dXJuZWQgaW50YWN0KS5cbiAgICAgKi9cbiAgICBnZXRJbihwYXRoLCBrZWVwU2NhbGFyKSB7XG4gICAgICAgIGlmIChpc0VtcHR5UGF0aChwYXRoKSlcbiAgICAgICAgICAgIHJldHVybiAha2VlcFNjYWxhciAmJiBpc1NjYWxhcih0aGlzLmNvbnRlbnRzKVxuICAgICAgICAgICAgICAgID8gdGhpcy5jb250ZW50cy52YWx1ZVxuICAgICAgICAgICAgICAgIDogdGhpcy5jb250ZW50cztcbiAgICAgICAgcmV0dXJuIGlzQ29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKVxuICAgICAgICAgICAgPyB0aGlzLmNvbnRlbnRzLmdldEluKHBhdGgsIGtlZXBTY2FsYXIpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBkb2N1bWVudCBpbmNsdWRlcyBhIHZhbHVlIHdpdGggdGhlIGtleSBga2V5YC5cbiAgICAgKi9cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0NvbGxlY3Rpb24odGhpcy5jb250ZW50cykgPyB0aGlzLmNvbnRlbnRzLmhhcyhrZXkpIDogZmFsc2U7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZG9jdW1lbnQgaW5jbHVkZXMgYSB2YWx1ZSBhdCBgcGF0aGAuXG4gICAgICovXG4gICAgaGFzSW4ocGF0aCkge1xuICAgICAgICBpZiAoaXNFbXB0eVBhdGgocGF0aCkpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50cyAhPT0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gaXNDb2xsZWN0aW9uKHRoaXMuY29udGVudHMpID8gdGhpcy5jb250ZW50cy5oYXNJbihwYXRoKSA6IGZhbHNlO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgdmFsdWUgaW4gdGhpcyBkb2N1bWVudC4gRm9yIGAhIXNldGAsIGB2YWx1ZWAgbmVlZHMgdG8gYmUgYVxuICAgICAqIGJvb2xlYW4gdG8gYWRkL3JlbW92ZSB0aGUgaXRlbSBmcm9tIHRoZSBzZXQuXG4gICAgICovXG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuY29udGVudHMgPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBjYW4ndCByZWFsbHkga25vdyB0aGF0IHRoaXMgbWF0Y2hlcyBDb250ZW50cy5cbiAgICAgICAgICAgIHRoaXMuY29udGVudHMgPSBjb2xsZWN0aW9uRnJvbVBhdGgodGhpcy5zY2hlbWEsIFtrZXldLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50cy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyBhIHZhbHVlIGluIHRoaXMgZG9jdW1lbnQuIEZvciBgISFzZXRgLCBgdmFsdWVgIG5lZWRzIHRvIGJlIGFcbiAgICAgKiBib29sZWFuIHRvIGFkZC9yZW1vdmUgdGhlIGl0ZW0gZnJvbSB0aGUgc2V0LlxuICAgICAqL1xuICAgIHNldEluKHBhdGgsIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0VtcHR5UGF0aChwYXRoKSkge1xuICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBXZSBjYW4ndCByZWFsbHkga25vdyB0aGF0IHRoaXMgbWF0Y2hlcyBDb250ZW50cy5cbiAgICAgICAgICAgIHRoaXMuY29udGVudHMgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmNvbnRlbnRzID09IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgV2UgY2FuJ3QgcmVhbGx5IGtub3cgdGhhdCB0aGlzIG1hdGNoZXMgQ29udGVudHMuXG4gICAgICAgICAgICB0aGlzLmNvbnRlbnRzID0gY29sbGVjdGlvbkZyb21QYXRoKHRoaXMuc2NoZW1hLCBBcnJheS5mcm9tKHBhdGgpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXNzZXJ0Q29sbGVjdGlvbih0aGlzLmNvbnRlbnRzKSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZW50cy5zZXRJbihwYXRoLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hhbmdlIHRoZSBZQU1MIHZlcnNpb24gYW5kIHNjaGVtYSB1c2VkIGJ5IHRoZSBkb2N1bWVudC5cbiAgICAgKiBBIGBudWxsYCB2ZXJzaW9uIGRpc2FibGVzIHN1cHBvcnQgZm9yIGRpcmVjdGl2ZXMsIGV4cGxpY2l0IHRhZ3MsIGFuY2hvcnMsIGFuZCBhbGlhc2VzLlxuICAgICAqIEl0IGFsc28gcmVxdWlyZXMgdGhlIGBzY2hlbWFgIG9wdGlvbiB0byBiZSBnaXZlbiBhcyBhIGBTY2hlbWFgIGluc3RhbmNlIHZhbHVlLlxuICAgICAqXG4gICAgICogT3ZlcnJpZGVzIGFsbCBwcmV2aW91c2x5IHNldCBzY2hlbWEgb3B0aW9ucy5cbiAgICAgKi9cbiAgICBzZXRTY2hlbWEodmVyc2lvbiwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmVyc2lvbiA9PT0gJ251bWJlcicpXG4gICAgICAgICAgICB2ZXJzaW9uID0gU3RyaW5nKHZlcnNpb24pO1xuICAgICAgICBsZXQgb3B0O1xuICAgICAgICBzd2l0Y2ggKHZlcnNpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJzEuMSc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlcylcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzLnlhbWwudmVyc2lvbiA9ICcxLjEnO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzID0gbmV3IERpcmVjdGl2ZXMoeyB2ZXJzaW9uOiAnMS4xJyB9KTtcbiAgICAgICAgICAgICAgICBvcHQgPSB7IHJlc29sdmVLbm93blRhZ3M6IGZhbHNlLCBzY2hlbWE6ICd5YW1sLTEuMScgfTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJzEuMic6XG4gICAgICAgICAgICBjYXNlICduZXh0JzpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kaXJlY3RpdmVzKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGl2ZXMueWFtbC52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IG5ldyBEaXJlY3RpdmVzKHsgdmVyc2lvbiB9KTtcbiAgICAgICAgICAgICAgICBvcHQgPSB7IHJlc29sdmVLbm93blRhZ3M6IHRydWUsIHNjaGVtYTogJ2NvcmUnIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIG51bGw6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aXZlcylcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZGlyZWN0aXZlcztcbiAgICAgICAgICAgICAgICBvcHQgPSBudWxsO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN2ID0gSlNPTi5zdHJpbmdpZnkodmVyc2lvbik7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBFeHBlY3RlZCAnMS4xJywgJzEuMicgb3IgbnVsbCBhcyBmaXJzdCBhcmd1bWVudCwgYnV0IGZvdW5kOiAke3N2fWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIE5vdCB1c2luZyBgaW5zdGFuY2VvZiBTY2hlbWFgIHRvIGFsbG93IGZvciBkdWNrIHR5cGluZ1xuICAgICAgICBpZiAob3B0aW9ucy5zY2hlbWEgaW5zdGFuY2VvZiBPYmplY3QpXG4gICAgICAgICAgICB0aGlzLnNjaGVtYSA9IG9wdGlvbnMuc2NoZW1hO1xuICAgICAgICBlbHNlIGlmIChvcHQpXG4gICAgICAgICAgICB0aGlzLnNjaGVtYSA9IG5ldyBTY2hlbWEoT2JqZWN0LmFzc2lnbihvcHQsIG9wdGlvbnMpKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBXaXRoIGEgbnVsbCBZQU1MIHZlcnNpb24sIHRoZSB7IHNjaGVtYTogU2NoZW1hIH0gb3B0aW9uIGlzIHJlcXVpcmVkYCk7XG4gICAgfVxuICAgIC8vIGpzb24gJiBqc29uQXJnIGFyZSBvbmx5IHVzZWQgZnJvbSB0b0pTT04oKVxuICAgIHRvSlMoeyBqc29uLCBqc29uQXJnLCBtYXBBc01hcCwgbWF4QWxpYXNDb3VudCwgb25BbmNob3IsIHJldml2ZXIgfSA9IHt9KSB7XG4gICAgICAgIGNvbnN0IGN0eCA9IHtcbiAgICAgICAgICAgIGFuY2hvcnM6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIGRvYzogdGhpcyxcbiAgICAgICAgICAgIGtlZXA6ICFqc29uLFxuICAgICAgICAgICAgbWFwQXNNYXA6IG1hcEFzTWFwID09PSB0cnVlLFxuICAgICAgICAgICAgbWFwS2V5V2FybmVkOiBmYWxzZSxcbiAgICAgICAgICAgIG1heEFsaWFzQ291bnQ6IHR5cGVvZiBtYXhBbGlhc0NvdW50ID09PSAnbnVtYmVyJyA/IG1heEFsaWFzQ291bnQgOiAxMDBcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzID0gdG9KUyh0aGlzLmNvbnRlbnRzLCBqc29uQXJnID8/ICcnLCBjdHgpO1xuICAgICAgICBpZiAodHlwZW9mIG9uQW5jaG9yID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgZm9yIChjb25zdCB7IGNvdW50LCByZXMgfSBvZiBjdHguYW5jaG9ycy52YWx1ZXMoKSlcbiAgICAgICAgICAgICAgICBvbkFuY2hvcihyZXMsIGNvdW50KTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiByZXZpdmVyID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IGFwcGx5UmV2aXZlcihyZXZpdmVyLCB7ICcnOiByZXMgfSwgJycsIHJlcylcbiAgICAgICAgICAgIDogcmVzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBIEpTT04gcmVwcmVzZW50YXRpb24gb2YgdGhlIGRvY3VtZW50IGBjb250ZW50c2AuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ganNvbkFyZyBVc2VkIGJ5IGBKU09OLnN0cmluZ2lmeWAgdG8gaW5kaWNhdGUgdGhlIGFycmF5IGluZGV4IG9yXG4gICAgICogICBwcm9wZXJ0eSBuYW1lLlxuICAgICAqL1xuICAgIHRvSlNPTihqc29uQXJnLCBvbkFuY2hvcikge1xuICAgICAgICByZXR1cm4gdGhpcy50b0pTKHsganNvbjogdHJ1ZSwganNvbkFyZywgbWFwQXNNYXA6IGZhbHNlLCBvbkFuY2hvciB9KTtcbiAgICB9XG4gICAgLyoqIEEgWUFNTCByZXByZXNlbnRhdGlvbiBvZiB0aGUgZG9jdW1lbnQuICovXG4gICAgdG9TdHJpbmcob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGlmICh0aGlzLmVycm9ycy5sZW5ndGggPiAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEb2N1bWVudCB3aXRoIGVycm9ycyBjYW5ub3QgYmUgc3RyaW5naWZpZWQnKTtcbiAgICAgICAgaWYgKCdpbmRlbnQnIGluIG9wdGlvbnMgJiZcbiAgICAgICAgICAgICghTnVtYmVyLmlzSW50ZWdlcihvcHRpb25zLmluZGVudCkgfHwgTnVtYmVyKG9wdGlvbnMuaW5kZW50KSA8PSAwKSkge1xuICAgICAgICAgICAgY29uc3QgcyA9IEpTT04uc3RyaW5naWZ5KG9wdGlvbnMuaW5kZW50KTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgXCJpbmRlbnRcIiBvcHRpb24gbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIsIG5vdCAke3N9YCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cmluZ2lmeURvY3VtZW50KHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFzc2VydENvbGxlY3Rpb24oY29udGVudHMpIHtcbiAgICBpZiAoaXNDb2xsZWN0aW9uKGNvbnRlbnRzKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdFeHBlY3RlZCBhIFlBTUwgY29sbGVjdGlvbiBhcyBkb2N1bWVudCBjb250ZW50cycpO1xufVxuXG5leHBvcnQgeyBEb2N1bWVudCB9O1xuIiwiaW1wb3J0IHsgaXNOb2RlIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgY3JlYXRlU3RyaW5naWZ5Q29udGV4dCwgc3RyaW5naWZ5IH0gZnJvbSAnLi9zdHJpbmdpZnkuanMnO1xuaW1wb3J0IHsgaW5kZW50Q29tbWVudCwgbGluZUNvbW1lbnQgfSBmcm9tICcuL3N0cmluZ2lmeUNvbW1lbnQuanMnO1xuXG5mdW5jdGlvbiBzdHJpbmdpZnlEb2N1bWVudChkb2MsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBsaW5lcyA9IFtdO1xuICAgIGxldCBoYXNEaXJlY3RpdmVzID0gb3B0aW9ucy5kaXJlY3RpdmVzID09PSB0cnVlO1xuICAgIGlmIChvcHRpb25zLmRpcmVjdGl2ZXMgIT09IGZhbHNlICYmIGRvYy5kaXJlY3RpdmVzKSB7XG4gICAgICAgIGNvbnN0IGRpciA9IGRvYy5kaXJlY3RpdmVzLnRvU3RyaW5nKGRvYyk7XG4gICAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goZGlyKTtcbiAgICAgICAgICAgIGhhc0RpcmVjdGl2ZXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGRvYy5kaXJlY3RpdmVzLmRvY1N0YXJ0KVxuICAgICAgICAgICAgaGFzRGlyZWN0aXZlcyA9IHRydWU7XG4gICAgfVxuICAgIGlmIChoYXNEaXJlY3RpdmVzKVxuICAgICAgICBsaW5lcy5wdXNoKCctLS0nKTtcbiAgICBjb25zdCBjdHggPSBjcmVhdGVTdHJpbmdpZnlDb250ZXh0KGRvYywgb3B0aW9ucyk7XG4gICAgY29uc3QgeyBjb21tZW50U3RyaW5nIH0gPSBjdHgub3B0aW9ucztcbiAgICBpZiAoZG9jLmNvbW1lbnRCZWZvcmUpIHtcbiAgICAgICAgaWYgKGxpbmVzLmxlbmd0aCAhPT0gMSlcbiAgICAgICAgICAgIGxpbmVzLnVuc2hpZnQoJycpO1xuICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcoZG9jLmNvbW1lbnRCZWZvcmUpO1xuICAgICAgICBsaW5lcy51bnNoaWZ0KGluZGVudENvbW1lbnQoY3MsICcnKSk7XG4gICAgfVxuICAgIGxldCBjaG9tcEtlZXAgPSBmYWxzZTtcbiAgICBsZXQgY29udGVudENvbW1lbnQgPSBudWxsO1xuICAgIGlmIChkb2MuY29udGVudHMpIHtcbiAgICAgICAgaWYgKGlzTm9kZShkb2MuY29udGVudHMpKSB7XG4gICAgICAgICAgICBpZiAoZG9jLmNvbnRlbnRzLnNwYWNlQmVmb3JlICYmIGhhc0RpcmVjdGl2ZXMpXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnJyk7XG4gICAgICAgICAgICBpZiAoZG9jLmNvbnRlbnRzLmNvbW1lbnRCZWZvcmUpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjcyA9IGNvbW1lbnRTdHJpbmcoZG9jLmNvbnRlbnRzLmNvbW1lbnRCZWZvcmUpO1xuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goaW5kZW50Q29tbWVudChjcywgJycpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRvcC1sZXZlbCBibG9jayBzY2FsYXJzIG5lZWQgdG8gYmUgaW5kZW50ZWQgaWYgZm9sbG93ZWQgYnkgYSBjb21tZW50XG4gICAgICAgICAgICBjdHguZm9yY2VCbG9ja0luZGVudCA9ICEhZG9jLmNvbW1lbnQ7XG4gICAgICAgICAgICBjb250ZW50Q29tbWVudCA9IGRvYy5jb250ZW50cy5jb21tZW50O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9uQ2hvbXBLZWVwID0gY29udGVudENvbW1lbnQgPyB1bmRlZmluZWQgOiAoKSA9PiAoY2hvbXBLZWVwID0gdHJ1ZSk7XG4gICAgICAgIGxldCBib2R5ID0gc3RyaW5naWZ5KGRvYy5jb250ZW50cywgY3R4LCAoKSA9PiAoY29udGVudENvbW1lbnQgPSBudWxsKSwgb25DaG9tcEtlZXApO1xuICAgICAgICBpZiAoY29udGVudENvbW1lbnQpXG4gICAgICAgICAgICBib2R5ICs9IGxpbmVDb21tZW50KGJvZHksICcnLCBjb21tZW50U3RyaW5nKGNvbnRlbnRDb21tZW50KSk7XG4gICAgICAgIGlmICgoYm9keVswXSA9PT0gJ3wnIHx8IGJvZHlbMF0gPT09ICc+JykgJiZcbiAgICAgICAgICAgIGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdID09PSAnLS0tJykge1xuICAgICAgICAgICAgLy8gVG9wLWxldmVsIGJsb2NrIHNjYWxhcnMgd2l0aCBhIHByZWNlZGluZyBkb2MgbWFya2VyIG91Z2h0IHRvIHVzZSB0aGVcbiAgICAgICAgICAgIC8vIHNhbWUgbGluZSBmb3IgdGhlaXIgaGVhZGVyLlxuICAgICAgICAgICAgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0gPSBgLS0tICR7Ym9keX1gO1xuICAgICAgICB9XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYm9keSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsaW5lcy5wdXNoKHN0cmluZ2lmeShkb2MuY29udGVudHMsIGN0eCkpO1xuICAgIH1cbiAgICBpZiAoZG9jLmRpcmVjdGl2ZXM/LmRvY0VuZCkge1xuICAgICAgICBpZiAoZG9jLmNvbW1lbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNzID0gY29tbWVudFN0cmluZyhkb2MuY29tbWVudCk7XG4gICAgICAgICAgICBpZiAoY3MuaW5jbHVkZXMoJ1xcbicpKSB7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaCgnLi4uJyk7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChpbmRlbnRDb21tZW50KGNzLCAnJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChgLi4uICR7Y3N9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKCcuLi4nKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgbGV0IGRjID0gZG9jLmNvbW1lbnQ7XG4gICAgICAgIGlmIChkYyAmJiBjaG9tcEtlZXApXG4gICAgICAgICAgICBkYyA9IGRjLnJlcGxhY2UoL15cXG4rLywgJycpO1xuICAgICAgICBpZiAoZGMpIHtcbiAgICAgICAgICAgIGlmICgoIWNob21wS2VlcCB8fCBjb250ZW50Q29tbWVudCkgJiYgbGluZXNbbGluZXMubGVuZ3RoIC0gMV0gIT09ICcnKVxuICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goJycpO1xuICAgICAgICAgICAgbGluZXMucHVzaChpbmRlbnRDb21tZW50KGNvbW1lbnRTdHJpbmcoZGMpLCAnJykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKSArICdcXG4nO1xufVxuXG5leHBvcnQgeyBzdHJpbmdpZnlEb2N1bWVudCB9O1xuIiwiY2xhc3MgWUFNTEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG5hbWUsIHBvcywgY29kZSwgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgICAgICB0aGlzLnBvcyA9IHBvcztcbiAgICB9XG59XG5jbGFzcyBZQU1MUGFyc2VFcnJvciBleHRlbmRzIFlBTUxFcnJvciB7XG4gICAgY29uc3RydWN0b3IocG9zLCBjb2RlLCBtZXNzYWdlKSB7XG4gICAgICAgIHN1cGVyKCdZQU1MUGFyc2VFcnJvcicsIHBvcywgY29kZSwgbWVzc2FnZSk7XG4gICAgfVxufVxuY2xhc3MgWUFNTFdhcm5pbmcgZXh0ZW5kcyBZQU1MRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHBvcywgY29kZSwgbWVzc2FnZSkge1xuICAgICAgICBzdXBlcignWUFNTFdhcm5pbmcnLCBwb3MsIGNvZGUsIG1lc3NhZ2UpO1xuICAgIH1cbn1cbmNvbnN0IHByZXR0aWZ5RXJyb3IgPSAoc3JjLCBsYykgPT4gKGVycm9yKSA9PiB7XG4gICAgaWYgKGVycm9yLnBvc1swXSA9PT0gLTEpXG4gICAgICAgIHJldHVybjtcbiAgICBlcnJvci5saW5lUG9zID0gZXJyb3IucG9zLm1hcChwb3MgPT4gbGMubGluZVBvcyhwb3MpKTtcbiAgICBjb25zdCB7IGxpbmUsIGNvbCB9ID0gZXJyb3IubGluZVBvc1swXTtcbiAgICBlcnJvci5tZXNzYWdlICs9IGAgYXQgbGluZSAke2xpbmV9LCBjb2x1bW4gJHtjb2x9YDtcbiAgICBsZXQgY2kgPSBjb2wgLSAxO1xuICAgIGxldCBsaW5lU3RyID0gc3JjXG4gICAgICAgIC5zdWJzdHJpbmcobGMubGluZVN0YXJ0c1tsaW5lIC0gMV0sIGxjLmxpbmVTdGFydHNbbGluZV0pXG4gICAgICAgIC5yZXBsYWNlKC9bXFxuXFxyXSskLywgJycpO1xuICAgIC8vIFRyaW0gdG8gbWF4IDgwIGNoYXJzLCBrZWVwaW5nIGNvbCBwb3NpdGlvbiBuZWFyIHRoZSBtaWRkbGVcbiAgICBpZiAoY2kgPj0gNjAgJiYgbGluZVN0ci5sZW5ndGggPiA4MCkge1xuICAgICAgICBjb25zdCB0cmltU3RhcnQgPSBNYXRoLm1pbihjaSAtIDM5LCBsaW5lU3RyLmxlbmd0aCAtIDc5KTtcbiAgICAgICAgbGluZVN0ciA9ICfigKYnICsgbGluZVN0ci5zdWJzdHJpbmcodHJpbVN0YXJ0KTtcbiAgICAgICAgY2kgLT0gdHJpbVN0YXJ0IC0gMTtcbiAgICB9XG4gICAgaWYgKGxpbmVTdHIubGVuZ3RoID4gODApXG4gICAgICAgIGxpbmVTdHIgPSBsaW5lU3RyLnN1YnN0cmluZygwLCA3OSkgKyAn4oCmJztcbiAgICAvLyBJbmNsdWRlIHByZXZpb3VzIGxpbmUgaW4gY29udGV4dCBpZiBwb2ludGluZyBhdCBsaW5lIHN0YXJ0XG4gICAgaWYgKGxpbmUgPiAxICYmIC9eICokLy50ZXN0KGxpbmVTdHIuc3Vic3RyaW5nKDAsIGNpKSkpIHtcbiAgICAgICAgLy8gUmVnZXhwIHdvbid0IG1hdGNoIGlmIHN0YXJ0IGlzIHRyaW1tZWRcbiAgICAgICAgbGV0IHByZXYgPSBzcmMuc3Vic3RyaW5nKGxjLmxpbmVTdGFydHNbbGluZSAtIDJdLCBsYy5saW5lU3RhcnRzW2xpbmUgLSAxXSk7XG4gICAgICAgIGlmIChwcmV2Lmxlbmd0aCA+IDgwKVxuICAgICAgICAgICAgcHJldiA9IHByZXYuc3Vic3RyaW5nKDAsIDc5KSArICfigKZcXG4nO1xuICAgICAgICBsaW5lU3RyID0gcHJldiArIGxpbmVTdHI7XG4gICAgfVxuICAgIGlmICgvW14gXS8udGVzdChsaW5lU3RyKSkge1xuICAgICAgICBsZXQgY291bnQgPSAxO1xuICAgICAgICBjb25zdCBlbmQgPSBlcnJvci5saW5lUG9zWzFdO1xuICAgICAgICBpZiAoZW5kICYmIGVuZC5saW5lID09PSBsaW5lICYmIGVuZC5jb2wgPiBjb2wpIHtcbiAgICAgICAgICAgIGNvdW50ID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oZW5kLmNvbCAtIGNvbCwgODAgLSBjaSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBvaW50ZXIgPSAnICcucmVwZWF0KGNpKSArICdeJy5yZXBlYXQoY291bnQpO1xuICAgICAgICBlcnJvci5tZXNzYWdlICs9IGA6XFxuXFxuJHtsaW5lU3RyfVxcbiR7cG9pbnRlcn1cXG5gO1xuICAgIH1cbn07XG5cbmV4cG9ydCB7IFlBTUxFcnJvciwgWUFNTFBhcnNlRXJyb3IsIFlBTUxXYXJuaW5nLCBwcmV0dGlmeUVycm9yIH07XG4iLCJmdW5jdGlvbiByZXNvbHZlUHJvcHModG9rZW5zLCB7IGZsb3csIGluZGljYXRvciwgbmV4dCwgb2Zmc2V0LCBvbkVycm9yLCBwYXJlbnRJbmRlbnQsIHN0YXJ0T25OZXdsaW5lIH0pIHtcbiAgICBsZXQgc3BhY2VCZWZvcmUgPSBmYWxzZTtcbiAgICBsZXQgYXROZXdsaW5lID0gc3RhcnRPbk5ld2xpbmU7XG4gICAgbGV0IGhhc1NwYWNlID0gc3RhcnRPbk5ld2xpbmU7XG4gICAgbGV0IGNvbW1lbnQgPSAnJztcbiAgICBsZXQgY29tbWVudFNlcCA9ICcnO1xuICAgIGxldCBoYXNOZXdsaW5lID0gZmFsc2U7XG4gICAgbGV0IHJlcVNwYWNlID0gZmFsc2U7XG4gICAgbGV0IHRhYiA9IG51bGw7XG4gICAgbGV0IGFuY2hvciA9IG51bGw7XG4gICAgbGV0IHRhZyA9IG51bGw7XG4gICAgbGV0IG5ld2xpbmVBZnRlclByb3AgPSBudWxsO1xuICAgIGxldCBjb21tYSA9IG51bGw7XG4gICAgbGV0IGZvdW5kID0gbnVsbDtcbiAgICBsZXQgc3RhcnQgPSBudWxsO1xuICAgIGZvciAoY29uc3QgdG9rZW4gb2YgdG9rZW5zKSB7XG4gICAgICAgIGlmIChyZXFTcGFjZSkge1xuICAgICAgICAgICAgaWYgKHRva2VuLnR5cGUgIT09ICdzcGFjZScgJiZcbiAgICAgICAgICAgICAgICB0b2tlbi50eXBlICE9PSAnbmV3bGluZScgJiZcbiAgICAgICAgICAgICAgICB0b2tlbi50eXBlICE9PSAnY29tbWEnKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4ub2Zmc2V0LCAnTUlTU0lOR19DSEFSJywgJ1RhZ3MgYW5kIGFuY2hvcnMgbXVzdCBiZSBzZXBhcmF0ZWQgZnJvbSB0aGUgbmV4dCB0b2tlbiBieSB3aGl0ZSBzcGFjZScpO1xuICAgICAgICAgICAgcmVxU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGFiKSB7XG4gICAgICAgICAgICBpZiAoYXROZXdsaW5lICYmIHRva2VuLnR5cGUgIT09ICdjb21tZW50JyAmJiB0b2tlbi50eXBlICE9PSAnbmV3bGluZScpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRhYiwgJ1RBQl9BU19JTkRFTlQnLCAnVGFicyBhcmUgbm90IGFsbG93ZWQgYXMgaW5kZW50YXRpb24nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRhYiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgLy8gQXQgdGhlIGRvYyBsZXZlbCwgdGFicyBhdCBsaW5lIHN0YXJ0IG1heSBiZSBwYXJzZWRcbiAgICAgICAgICAgICAgICAvLyBhcyBsZWFkaW5nIHdoaXRlIHNwYWNlIHJhdGhlciB0aGFuIGluZGVudGF0aW9uLlxuICAgICAgICAgICAgICAgIC8vIEluIGEgZmxvdyBjb2xsZWN0aW9uLCBvbmx5IHRoZSBwYXJzZXIgaGFuZGxlcyBpbmRlbnQuXG4gICAgICAgICAgICAgICAgaWYgKCFmbG93ICYmXG4gICAgICAgICAgICAgICAgICAgIChpbmRpY2F0b3IgIT09ICdkb2Mtc3RhcnQnIHx8IG5leHQ/LnR5cGUgIT09ICdmbG93LWNvbGxlY3Rpb24nKSAmJlxuICAgICAgICAgICAgICAgICAgICB0b2tlbi5zb3VyY2UuaW5jbHVkZXMoJ1xcdCcpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRhYiA9IHRva2VuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21tZW50Jzoge1xuICAgICAgICAgICAgICAgIGlmICghaGFzU3BhY2UpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdNSVNTSU5HX0NIQVInLCAnQ29tbWVudHMgbXVzdCBiZSBzZXBhcmF0ZWQgZnJvbSBvdGhlciB0b2tlbnMgYnkgd2hpdGUgc3BhY2UgY2hhcmFjdGVycycpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gdG9rZW4uc291cmNlLnN1YnN0cmluZygxKSB8fCAnICc7XG4gICAgICAgICAgICAgICAgaWYgKCFjb21tZW50KVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gY2I7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBjb21tZW50ICs9IGNvbW1lbnRTZXAgKyBjYjtcbiAgICAgICAgICAgICAgICBjb21tZW50U2VwID0gJyc7XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBpZiAoYXROZXdsaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudCArPSB0b2tlbi5zb3VyY2U7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFmb3VuZCB8fCBpbmRpY2F0b3IgIT09ICdzZXEtaXRlbS1pbmQnKVxuICAgICAgICAgICAgICAgICAgICAgICAgc3BhY2VCZWZvcmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGNvbW1lbnRTZXAgKz0gdG9rZW4uc291cmNlO1xuICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaGFzTmV3bGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvciB8fCB0YWcpXG4gICAgICAgICAgICAgICAgICAgIG5ld2xpbmVBZnRlclByb3AgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdhbmNob3InOlxuICAgICAgICAgICAgICAgIGlmIChhbmNob3IpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdNVUxUSVBMRV9BTkNIT1JTJywgJ0Egbm9kZSBjYW4gaGF2ZSBhdCBtb3N0IG9uZSBhbmNob3InKTtcbiAgICAgICAgICAgICAgICBpZiAodG9rZW4uc291cmNlLmVuZHNXaXRoKCc6JykpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4ub2Zmc2V0ICsgdG9rZW4uc291cmNlLmxlbmd0aCAtIDEsICdCQURfQUxJQVMnLCAnQW5jaG9yIGVuZGluZyBpbiA6IGlzIGFtYmlndW91cycsIHRydWUpO1xuICAgICAgICAgICAgICAgIGFuY2hvciA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB0b2tlbi5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXFTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0YWcnOiB7XG4gICAgICAgICAgICAgICAgaWYgKHRhZylcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ01VTFRJUExFX1RBR1MnLCAnQSBub2RlIGNhbiBoYXZlIGF0IG1vc3Qgb25lIHRhZycpO1xuICAgICAgICAgICAgICAgIHRhZyA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGlmIChzdGFydCA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB0b2tlbi5vZmZzZXQ7XG4gICAgICAgICAgICAgICAgYXROZXdsaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICByZXFTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIGluZGljYXRvcjpcbiAgICAgICAgICAgICAgICAvLyBDb3VsZCBoZXJlIGhhbmRsZSBwcmVjZWRpbmcgY29tbWVudHMgZGlmZmVyZW50bHlcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yIHx8IHRhZylcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ0JBRF9QUk9QX09SREVSJywgYEFuY2hvcnMgYW5kIHRhZ3MgbXVzdCBiZSBhZnRlciB0aGUgJHt0b2tlbi5zb3VyY2V9IGluZGljYXRvcmApO1xuICAgICAgICAgICAgICAgIGlmIChmb3VuZClcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih0b2tlbiwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCAke3Rva2VuLnNvdXJjZX0gaW4gJHtmbG93ID8/ICdjb2xsZWN0aW9uJ31gKTtcbiAgICAgICAgICAgICAgICBmb3VuZCA9IHRva2VuO1xuICAgICAgICAgICAgICAgIGF0TmV3bGluZSA9XG4gICAgICAgICAgICAgICAgICAgIGluZGljYXRvciA9PT0gJ3NlcS1pdGVtLWluZCcgfHwgaW5kaWNhdG9yID09PSAnZXhwbGljaXQta2V5LWluZCc7XG4gICAgICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgICAgICAgICAgICBpZiAoZmxvdykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29tbWEpXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICwgaW4gJHtmbG93fWApO1xuICAgICAgICAgICAgICAgICAgICBjb21tYSA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzU3BhY2UgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZWxzZSBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICR7dG9rZW4udHlwZX0gdG9rZW5gKTtcbiAgICAgICAgICAgICAgICBhdE5ld2xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGxhc3QgPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IGVuZCA9IGxhc3QgPyBsYXN0Lm9mZnNldCArIGxhc3Quc291cmNlLmxlbmd0aCA6IG9mZnNldDtcbiAgICBpZiAocmVxU3BhY2UgJiZcbiAgICAgICAgbmV4dCAmJlxuICAgICAgICBuZXh0LnR5cGUgIT09ICdzcGFjZScgJiZcbiAgICAgICAgbmV4dC50eXBlICE9PSAnbmV3bGluZScgJiZcbiAgICAgICAgbmV4dC50eXBlICE9PSAnY29tbWEnICYmXG4gICAgICAgIChuZXh0LnR5cGUgIT09ICdzY2FsYXInIHx8IG5leHQuc291cmNlICE9PSAnJykpIHtcbiAgICAgICAgb25FcnJvcihuZXh0Lm9mZnNldCwgJ01JU1NJTkdfQ0hBUicsICdUYWdzIGFuZCBhbmNob3JzIG11c3QgYmUgc2VwYXJhdGVkIGZyb20gdGhlIG5leHQgdG9rZW4gYnkgd2hpdGUgc3BhY2UnKTtcbiAgICB9XG4gICAgaWYgKHRhYiAmJlxuICAgICAgICAoKGF0TmV3bGluZSAmJiB0YWIuaW5kZW50IDw9IHBhcmVudEluZGVudCkgfHxcbiAgICAgICAgICAgIG5leHQ/LnR5cGUgPT09ICdibG9jay1tYXAnIHx8XG4gICAgICAgICAgICBuZXh0Py50eXBlID09PSAnYmxvY2stc2VxJykpXG4gICAgICAgIG9uRXJyb3IodGFiLCAnVEFCX0FTX0lOREVOVCcsICdUYWJzIGFyZSBub3QgYWxsb3dlZCBhcyBpbmRlbnRhdGlvbicpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvbW1hLFxuICAgICAgICBmb3VuZCxcbiAgICAgICAgc3BhY2VCZWZvcmUsXG4gICAgICAgIGNvbW1lbnQsXG4gICAgICAgIGhhc05ld2xpbmUsXG4gICAgICAgIGFuY2hvcixcbiAgICAgICAgdGFnLFxuICAgICAgICBuZXdsaW5lQWZ0ZXJQcm9wLFxuICAgICAgICBlbmQsXG4gICAgICAgIHN0YXJ0OiBzdGFydCA/PyBlbmRcbiAgICB9O1xufVxuXG5leHBvcnQgeyByZXNvbHZlUHJvcHMgfTtcbiIsImZ1bmN0aW9uIGNvbnRhaW5zTmV3bGluZShrZXkpIHtcbiAgICBpZiAoIWtleSlcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgc3dpdGNoIChrZXkudHlwZSkge1xuICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgaWYgKGtleS5zb3VyY2UuaW5jbHVkZXMoJ1xcbicpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgaWYgKGtleS5lbmQpXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiBrZXkuZW5kKVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3QudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGl0IG9mIGtleS5pdGVtcykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgaXQuc3RhcnQpXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdC50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdC50eXBlID09PSAnbmV3bGluZScpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRhaW5zTmV3bGluZShpdC5rZXkpIHx8IGNvbnRhaW5zTmV3bGluZShpdC52YWx1ZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgeyBjb250YWluc05ld2xpbmUgfTtcbiIsImltcG9ydCB7IGNvbnRhaW5zTmV3bGluZSB9IGZyb20gJy4vdXRpbC1jb250YWlucy1uZXdsaW5lLmpzJztcblxuZnVuY3Rpb24gZmxvd0luZGVudENoZWNrKGluZGVudCwgZmMsIG9uRXJyb3IpIHtcbiAgICBpZiAoZmM/LnR5cGUgPT09ICdmbG93LWNvbGxlY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IGVuZCA9IGZjLmVuZFswXTtcbiAgICAgICAgaWYgKGVuZC5pbmRlbnQgPT09IGluZGVudCAmJlxuICAgICAgICAgICAgKGVuZC5zb3VyY2UgPT09ICddJyB8fCBlbmQuc291cmNlID09PSAnfScpICYmXG4gICAgICAgICAgICBjb250YWluc05ld2xpbmUoZmMpKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSAnRmxvdyBlbmQgaW5kaWNhdG9yIHNob3VsZCBiZSBtb3JlIGluZGVudGVkIHRoYW4gcGFyZW50JztcbiAgICAgICAgICAgIG9uRXJyb3IoZW5kLCAnQkFEX0lOREVOVCcsIG1zZywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IGZsb3dJbmRlbnRDaGVjayB9O1xuIiwiaW1wb3J0IHsgaXNTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5cbmZ1bmN0aW9uIG1hcEluY2x1ZGVzKGN0eCwgaXRlbXMsIHNlYXJjaCkge1xuICAgIGNvbnN0IHsgdW5pcXVlS2V5cyB9ID0gY3R4Lm9wdGlvbnM7XG4gICAgaWYgKHVuaXF1ZUtleXMgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgY29uc3QgaXNFcXVhbCA9IHR5cGVvZiB1bmlxdWVLZXlzID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gdW5pcXVlS2V5c1xuICAgICAgICA6IChhLCBiKSA9PiBhID09PSBiIHx8IChpc1NjYWxhcihhKSAmJiBpc1NjYWxhcihiKSAmJiBhLnZhbHVlID09PSBiLnZhbHVlKTtcbiAgICByZXR1cm4gaXRlbXMuc29tZShwYWlyID0+IGlzRXF1YWwocGFpci5rZXksIHNlYXJjaCkpO1xufVxuXG5leHBvcnQgeyBtYXBJbmNsdWRlcyB9O1xuIiwiaW1wb3J0IHsgUGFpciB9IGZyb20gJy4uL25vZGVzL1BhaXIuanMnO1xuaW1wb3J0IHsgWUFNTE1hcCB9IGZyb20gJy4uL25vZGVzL1lBTUxNYXAuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVByb3BzIH0gZnJvbSAnLi9yZXNvbHZlLXByb3BzLmpzJztcbmltcG9ydCB7IGNvbnRhaW5zTmV3bGluZSB9IGZyb20gJy4vdXRpbC1jb250YWlucy1uZXdsaW5lLmpzJztcbmltcG9ydCB7IGZsb3dJbmRlbnRDaGVjayB9IGZyb20gJy4vdXRpbC1mbG93LWluZGVudC1jaGVjay5qcyc7XG5pbXBvcnQgeyBtYXBJbmNsdWRlcyB9IGZyb20gJy4vdXRpbC1tYXAtaW5jbHVkZXMuanMnO1xuXG5jb25zdCBzdGFydENvbE1zZyA9ICdBbGwgbWFwcGluZyBpdGVtcyBtdXN0IHN0YXJ0IGF0IHRoZSBzYW1lIGNvbHVtbic7XG5mdW5jdGlvbiByZXNvbHZlQmxvY2tNYXAoeyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9LCBjdHgsIGJtLCBvbkVycm9yLCB0YWcpIHtcbiAgICBjb25zdCBOb2RlQ2xhc3MgPSB0YWc/Lm5vZGVDbGFzcyA/PyBZQU1MTWFwO1xuICAgIGNvbnN0IG1hcCA9IG5ldyBOb2RlQ2xhc3MoY3R4LnNjaGVtYSk7XG4gICAgaWYgKGN0eC5hdFJvb3QpXG4gICAgICAgIGN0eC5hdFJvb3QgPSBmYWxzZTtcbiAgICBsZXQgb2Zmc2V0ID0gYm0ub2Zmc2V0O1xuICAgIGxldCBjb21tZW50RW5kID0gbnVsbDtcbiAgICBmb3IgKGNvbnN0IGNvbGxJdGVtIG9mIGJtLml0ZW1zKSB7XG4gICAgICAgIGNvbnN0IHsgc3RhcnQsIGtleSwgc2VwLCB2YWx1ZSB9ID0gY29sbEl0ZW07XG4gICAgICAgIC8vIGtleSBwcm9wZXJ0aWVzXG4gICAgICAgIGNvbnN0IGtleVByb3BzID0gcmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgICAgICAgICBpbmRpY2F0b3I6ICdleHBsaWNpdC1rZXktaW5kJyxcbiAgICAgICAgICAgIG5leHQ6IGtleSA/PyBzZXA/LlswXSxcbiAgICAgICAgICAgIG9mZnNldCxcbiAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICBwYXJlbnRJbmRlbnQ6IGJtLmluZGVudCxcbiAgICAgICAgICAgIHN0YXJ0T25OZXdsaW5lOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBpbXBsaWNpdEtleSA9ICFrZXlQcm9wcy5mb3VuZDtcbiAgICAgICAgaWYgKGltcGxpY2l0S2V5KSB7XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleS50eXBlID09PSAnYmxvY2stc2VxJylcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsICdCTE9DS19BU19JTVBMSUNJVF9LRVknLCAnQSBibG9jayBzZXF1ZW5jZSBtYXkgbm90IGJlIHVzZWQgYXMgYW4gaW1wbGljaXQgbWFwIGtleScpO1xuICAgICAgICAgICAgICAgIGVsc2UgaWYgKCdpbmRlbnQnIGluIGtleSAmJiBrZXkuaW5kZW50ICE9PSBibS5pbmRlbnQpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkFEX0lOREVOVCcsIHN0YXJ0Q29sTXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgha2V5UHJvcHMuYW5jaG9yICYmICFrZXlQcm9wcy50YWcgJiYgIXNlcCkge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRFbmQgPSBrZXlQcm9wcy5lbmQ7XG4gICAgICAgICAgICAgICAgaWYgKGtleVByb3BzLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcC5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLmNvbW1lbnQgKz0gJ1xcbicgKyBrZXlQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAuY29tbWVudCA9IGtleVByb3BzLmNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGtleVByb3BzLm5ld2xpbmVBZnRlclByb3AgfHwgY29udGFpbnNOZXdsaW5lKGtleSkpIHtcbiAgICAgICAgICAgICAgICBvbkVycm9yKGtleSA/PyBzdGFydFtzdGFydC5sZW5ndGggLSAxXSwgJ01VTFRJTElORV9JTVBMSUNJVF9LRVknLCAnSW1wbGljaXQga2V5cyBuZWVkIHRvIGJlIG9uIGEgc2luZ2xlIGxpbmUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChrZXlQcm9wcy5mb3VuZD8uaW5kZW50ICE9PSBibS5pbmRlbnQpIHtcbiAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkFEX0lOREVOVCcsIHN0YXJ0Q29sTXNnKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBrZXkgdmFsdWVcbiAgICAgICAgY3R4LmF0S2V5ID0gdHJ1ZTtcbiAgICAgICAgY29uc3Qga2V5U3RhcnQgPSBrZXlQcm9wcy5lbmQ7XG4gICAgICAgIGNvbnN0IGtleU5vZGUgPSBrZXlcbiAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCBrZXksIGtleVByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwga2V5U3RhcnQsIHN0YXJ0LCBudWxsLCBrZXlQcm9wcywgb25FcnJvcik7XG4gICAgICAgIGlmIChjdHguc2NoZW1hLmNvbXBhdClcbiAgICAgICAgICAgIGZsb3dJbmRlbnRDaGVjayhibS5pbmRlbnQsIGtleSwgb25FcnJvcik7XG4gICAgICAgIGN0eC5hdEtleSA9IGZhbHNlO1xuICAgICAgICBpZiAobWFwSW5jbHVkZXMoY3R4LCBtYXAuaXRlbXMsIGtleU5vZGUpKVxuICAgICAgICAgICAgb25FcnJvcihrZXlTdGFydCwgJ0RVUExJQ0FURV9LRVknLCAnTWFwIGtleXMgbXVzdCBiZSB1bmlxdWUnKTtcbiAgICAgICAgLy8gdmFsdWUgcHJvcGVydGllc1xuICAgICAgICBjb25zdCB2YWx1ZVByb3BzID0gcmVzb2x2ZVByb3BzKHNlcCA/PyBbXSwge1xuICAgICAgICAgICAgaW5kaWNhdG9yOiAnbWFwLXZhbHVlLWluZCcsXG4gICAgICAgICAgICBuZXh0OiB2YWx1ZSxcbiAgICAgICAgICAgIG9mZnNldDoga2V5Tm9kZS5yYW5nZVsyXSxcbiAgICAgICAgICAgIG9uRXJyb3IsXG4gICAgICAgICAgICBwYXJlbnRJbmRlbnQ6IGJtLmluZGVudCxcbiAgICAgICAgICAgIHN0YXJ0T25OZXdsaW5lOiAha2V5IHx8IGtleS50eXBlID09PSAnYmxvY2stc2NhbGFyJ1xuICAgICAgICB9KTtcbiAgICAgICAgb2Zmc2V0ID0gdmFsdWVQcm9wcy5lbmQ7XG4gICAgICAgIGlmICh2YWx1ZVByb3BzLmZvdW5kKSB7XG4gICAgICAgICAgICBpZiAoaW1wbGljaXRLZXkpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWU/LnR5cGUgPT09ICdibG9jay1tYXAnICYmICF2YWx1ZVByb3BzLmhhc05ld2xpbmUpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0LCAnQkxPQ0tfQVNfSU1QTElDSVRfS0VZJywgJ05lc3RlZCBtYXBwaW5ncyBhcmUgbm90IGFsbG93ZWQgaW4gY29tcGFjdCBtYXBwaW5ncycpO1xuICAgICAgICAgICAgICAgIGlmIChjdHgub3B0aW9ucy5zdHJpY3QgJiZcbiAgICAgICAgICAgICAgICAgICAga2V5UHJvcHMuc3RhcnQgPCB2YWx1ZVByb3BzLmZvdW5kLm9mZnNldCAtIDEwMjQpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5Tm9kZS5yYW5nZSwgJ0tFWV9PVkVSXzEwMjRfQ0hBUlMnLCAnVGhlIDogaW5kaWNhdG9yIG11c3QgYmUgYXQgbW9zdCAxMDI0IGNoYXJzIGFmdGVyIHRoZSBzdGFydCBvZiBhbiBpbXBsaWNpdCBibG9jayBtYXBwaW5nIGtleScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gdmFsdWUgdmFsdWVcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlTm9kZSA9IHZhbHVlXG4gICAgICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIHZhbHVlLCB2YWx1ZVByb3BzLCBvbkVycm9yKVxuICAgICAgICAgICAgICAgIDogY29tcG9zZUVtcHR5Tm9kZShjdHgsIG9mZnNldCwgc2VwLCBudWxsLCB2YWx1ZVByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChjdHguc2NoZW1hLmNvbXBhdClcbiAgICAgICAgICAgICAgICBmbG93SW5kZW50Q2hlY2soYm0uaW5kZW50LCB2YWx1ZSwgb25FcnJvcik7XG4gICAgICAgICAgICBvZmZzZXQgPSB2YWx1ZU5vZGUucmFuZ2VbMl07XG4gICAgICAgICAgICBjb25zdCBwYWlyID0gbmV3IFBhaXIoa2V5Tm9kZSwgdmFsdWVOb2RlKTtcbiAgICAgICAgICAgIGlmIChjdHgub3B0aW9ucy5rZWVwU291cmNlVG9rZW5zKVxuICAgICAgICAgICAgICAgIHBhaXIuc3JjVG9rZW4gPSBjb2xsSXRlbTtcbiAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHBhaXIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8ga2V5IHdpdGggbm8gdmFsdWVcbiAgICAgICAgICAgIGlmIChpbXBsaWNpdEtleSlcbiAgICAgICAgICAgICAgICBvbkVycm9yKGtleU5vZGUucmFuZ2UsICdNSVNTSU5HX0NIQVInLCAnSW1wbGljaXQgbWFwIGtleXMgbmVlZCB0byBiZSBmb2xsb3dlZCBieSBtYXAgdmFsdWVzJyk7XG4gICAgICAgICAgICBpZiAodmFsdWVQcm9wcy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleU5vZGUuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAga2V5Tm9kZS5jb21tZW50ICs9ICdcXG4nICsgdmFsdWVQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAga2V5Tm9kZS5jb21tZW50ID0gdmFsdWVQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFpciA9IG5ldyBQYWlyKGtleU5vZGUpO1xuICAgICAgICAgICAgaWYgKGN0eC5vcHRpb25zLmtlZXBTb3VyY2VUb2tlbnMpXG4gICAgICAgICAgICAgICAgcGFpci5zcmNUb2tlbiA9IGNvbGxJdGVtO1xuICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2gocGFpcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbW1lbnRFbmQgJiYgY29tbWVudEVuZCA8IG9mZnNldClcbiAgICAgICAgb25FcnJvcihjb21tZW50RW5kLCAnSU1QT1NTSUJMRScsICdNYXAgY29tbWVudCB3aXRoIHRyYWlsaW5nIGNvbnRlbnQnKTtcbiAgICBtYXAucmFuZ2UgPSBbYm0ub2Zmc2V0LCBvZmZzZXQsIGNvbW1lbnRFbmQgPz8gb2Zmc2V0XTtcbiAgICByZXR1cm4gbWFwO1xufVxuXG5leHBvcnQgeyByZXNvbHZlQmxvY2tNYXAgfTtcbiIsImZ1bmN0aW9uIHJlc29sdmVFbmQoZW5kLCBvZmZzZXQsIHJlcVNwYWNlLCBvbkVycm9yKSB7XG4gICAgbGV0IGNvbW1lbnQgPSAnJztcbiAgICBpZiAoZW5kKSB7XG4gICAgICAgIGxldCBoYXNTcGFjZSA9IGZhbHNlO1xuICAgICAgICBsZXQgc2VwID0gJyc7XG4gICAgICAgIGZvciAoY29uc3QgdG9rZW4gb2YgZW5kKSB7XG4gICAgICAgICAgICBjb25zdCB7IHNvdXJjZSwgdHlwZSB9ID0gdG9rZW47XG4gICAgICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgICAgIGhhc1NwYWNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcVNwYWNlICYmICFoYXNTcGFjZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdNSVNTSU5HX0NIQVInLCAnQ29tbWVudHMgbXVzdCBiZSBzZXBhcmF0ZWQgZnJvbSBvdGhlciB0b2tlbnMgYnkgd2hpdGUgc3BhY2UgY2hhcmFjdGVycycpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjYiA9IHNvdXJjZS5zdWJzdHJpbmcoMSkgfHwgJyAnO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tZW50ID0gY2I7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1lbnQgKz0gc2VwICsgY2I7XG4gICAgICAgICAgICAgICAgICAgIHNlcCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgc2VwICs9IHNvdXJjZTtcbiAgICAgICAgICAgICAgICAgICAgaGFzU3BhY2UgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBVbmV4cGVjdGVkICR7dHlwZX0gYXQgbm9kZSBlbmRgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9mZnNldCArPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGNvbW1lbnQsIG9mZnNldCB9O1xufVxuXG5leHBvcnQgeyByZXNvbHZlRW5kIH07XG4iLCJpbXBvcnQgeyBpc1BhaXIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBQYWlyIH0gZnJvbSAnLi4vbm9kZXMvUGFpci5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5pbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRW5kIH0gZnJvbSAnLi9yZXNvbHZlLWVuZC5qcyc7XG5pbXBvcnQgeyByZXNvbHZlUHJvcHMgfSBmcm9tICcuL3Jlc29sdmUtcHJvcHMuanMnO1xuaW1wb3J0IHsgY29udGFpbnNOZXdsaW5lIH0gZnJvbSAnLi91dGlsLWNvbnRhaW5zLW5ld2xpbmUuanMnO1xuaW1wb3J0IHsgbWFwSW5jbHVkZXMgfSBmcm9tICcuL3V0aWwtbWFwLWluY2x1ZGVzLmpzJztcblxuY29uc3QgYmxvY2tNc2cgPSAnQmxvY2sgY29sbGVjdGlvbnMgYXJlIG5vdCBhbGxvd2VkIHdpdGhpbiBmbG93IGNvbGxlY3Rpb25zJztcbmNvbnN0IGlzQmxvY2sgPSAodG9rZW4pID0+IHRva2VuICYmICh0b2tlbi50eXBlID09PSAnYmxvY2stbWFwJyB8fCB0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJyk7XG5mdW5jdGlvbiByZXNvbHZlRmxvd0NvbGxlY3Rpb24oeyBjb21wb3NlTm9kZSwgY29tcG9zZUVtcHR5Tm9kZSB9LCBjdHgsIGZjLCBvbkVycm9yLCB0YWcpIHtcbiAgICBjb25zdCBpc01hcCA9IGZjLnN0YXJ0LnNvdXJjZSA9PT0gJ3snO1xuICAgIGNvbnN0IGZjTmFtZSA9IGlzTWFwID8gJ2Zsb3cgbWFwJyA6ICdmbG93IHNlcXVlbmNlJztcbiAgICBjb25zdCBOb2RlQ2xhc3MgPSAodGFnPy5ub2RlQ2xhc3MgPz8gKGlzTWFwID8gWUFNTE1hcCA6IFlBTUxTZXEpKTtcbiAgICBjb25zdCBjb2xsID0gbmV3IE5vZGVDbGFzcyhjdHguc2NoZW1hKTtcbiAgICBjb2xsLmZsb3cgPSB0cnVlO1xuICAgIGNvbnN0IGF0Um9vdCA9IGN0eC5hdFJvb3Q7XG4gICAgaWYgKGF0Um9vdClcbiAgICAgICAgY3R4LmF0Um9vdCA9IGZhbHNlO1xuICAgIGlmIChjdHguYXRLZXkpXG4gICAgICAgIGN0eC5hdEtleSA9IGZhbHNlO1xuICAgIGxldCBvZmZzZXQgPSBmYy5vZmZzZXQgKyBmYy5zdGFydC5zb3VyY2UubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZmMuaXRlbXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgY29sbEl0ZW0gPSBmYy5pdGVtc1tpXTtcbiAgICAgICAgY29uc3QgeyBzdGFydCwga2V5LCBzZXAsIHZhbHVlIH0gPSBjb2xsSXRlbTtcbiAgICAgICAgY29uc3QgcHJvcHMgPSByZXNvbHZlUHJvcHMoc3RhcnQsIHtcbiAgICAgICAgICAgIGZsb3c6IGZjTmFtZSxcbiAgICAgICAgICAgIGluZGljYXRvcjogJ2V4cGxpY2l0LWtleS1pbmQnLFxuICAgICAgICAgICAgbmV4dDoga2V5ID8/IHNlcD8uWzBdLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgIHBhcmVudEluZGVudDogZmMuaW5kZW50LFxuICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXByb3BzLmZvdW5kKSB7XG4gICAgICAgICAgICBpZiAoIXByb3BzLmFuY2hvciAmJiAhcHJvcHMudGFnICYmICFzZXAgJiYgIXZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IDAgJiYgcHJvcHMuY29tbWEpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3IocHJvcHMuY29tbWEsICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgLCBpbiAke2ZjTmFtZX1gKTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpIDwgZmMuaXRlbXMubGVuZ3RoIC0gMSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihwcm9wcy5zdGFydCwgJ1VORVhQRUNURURfVE9LRU4nLCBgVW5leHBlY3RlZCBlbXB0eSBpdGVtIGluICR7ZmNOYW1lfWApO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wcy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsLmNvbW1lbnQgKz0gJ1xcbicgKyBwcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsLmNvbW1lbnQgPSBwcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvZmZzZXQgPSBwcm9wcy5lbmQ7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWlzTWFwICYmIGN0eC5vcHRpb25zLnN0cmljdCAmJiBjb250YWluc05ld2xpbmUoa2V5KSlcbiAgICAgICAgICAgICAgICBvbkVycm9yKGtleSwgLy8gY2hlY2tlZCBieSBjb250YWluc05ld2xpbmUoKVxuICAgICAgICAgICAgICAgICdNVUxUSUxJTkVfSU1QTElDSVRfS0VZJywgJ0ltcGxpY2l0IGtleXMgb2YgZmxvdyBzZXF1ZW5jZSBwYWlycyBuZWVkIHRvIGJlIG9uIGEgc2luZ2xlIGxpbmUnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHByb3BzLmNvbW1hKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IocHJvcHMuY29tbWEsICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuZXhwZWN0ZWQgLCBpbiAke2ZjTmFtZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmICghcHJvcHMuY29tbWEpXG4gICAgICAgICAgICAgICAgb25FcnJvcihwcm9wcy5zdGFydCwgJ01JU1NJTkdfQ0hBUicsIGBNaXNzaW5nICwgYmV0d2VlbiAke2ZjTmFtZX0gaXRlbXNgKTtcbiAgICAgICAgICAgIGlmIChwcm9wcy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgbGV0IHByZXZJdGVtQ29tbWVudCA9ICcnO1xuICAgICAgICAgICAgICAgIGxvb3A6IGZvciAoY29uc3Qgc3Qgb2Ygc3RhcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb21tYSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmV2SXRlbUNvbW1lbnQgPSBzdC5zb3VyY2Uuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHByZXZJdGVtQ29tbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcHJldiA9IGNvbGwuaXRlbXNbY29sbC5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzUGFpcihwcmV2KSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXYgPSBwcmV2LnZhbHVlID8/IHByZXYua2V5O1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJldi5jb21tZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJldi5jb21tZW50ICs9ICdcXG4nICsgcHJldkl0ZW1Db21tZW50O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2LmNvbW1lbnQgPSBwcmV2SXRlbUNvbW1lbnQ7XG4gICAgICAgICAgICAgICAgICAgIHByb3BzLmNvbW1lbnQgPSBwcm9wcy5jb21tZW50LnN1YnN0cmluZyhwcmV2SXRlbUNvbW1lbnQubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICghaXNNYXAgJiYgIXNlcCAmJiAhcHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgIC8vIGl0ZW0gaXMgYSB2YWx1ZSBpbiBhIHNlcVxuICAgICAgICAgICAgLy8g4oaSIGtleSAmIHNlcCBhcmUgZW1wdHksIHN0YXJ0IGRvZXMgbm90IGluY2x1ZGUgPyBvciA6XG4gICAgICAgICAgICBjb25zdCB2YWx1ZU5vZGUgPSB2YWx1ZVxuICAgICAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwgcHJvcHMuZW5kLCBzZXAsIG51bGwsIHByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGNvbGwuaXRlbXMucHVzaCh2YWx1ZU5vZGUpO1xuICAgICAgICAgICAgb2Zmc2V0ID0gdmFsdWVOb2RlLnJhbmdlWzJdO1xuICAgICAgICAgICAgaWYgKGlzQmxvY2sodmFsdWUpKVxuICAgICAgICAgICAgICAgIG9uRXJyb3IodmFsdWVOb2RlLnJhbmdlLCAnQkxPQ0tfSU5fRkxPVycsIGJsb2NrTXNnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIGl0ZW0gaXMgYSBrZXkrdmFsdWUgcGFpclxuICAgICAgICAgICAgLy8ga2V5IHZhbHVlXG4gICAgICAgICAgICBjdHguYXRLZXkgPSB0cnVlO1xuICAgICAgICAgICAgY29uc3Qga2V5U3RhcnQgPSBwcm9wcy5lbmQ7XG4gICAgICAgICAgICBjb25zdCBrZXlOb2RlID0ga2V5XG4gICAgICAgICAgICAgICAgPyBjb21wb3NlTm9kZShjdHgsIGtleSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICAgICAgOiBjb21wb3NlRW1wdHlOb2RlKGN0eCwga2V5U3RhcnQsIHN0YXJ0LCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoaXNCbG9jayhrZXkpKVxuICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5Tm9kZS5yYW5nZSwgJ0JMT0NLX0lOX0ZMT1cnLCBibG9ja01zZyk7XG4gICAgICAgICAgICBjdHguYXRLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIHZhbHVlIHByb3BlcnRpZXNcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlUHJvcHMgPSByZXNvbHZlUHJvcHMoc2VwID8/IFtdLCB7XG4gICAgICAgICAgICAgICAgZmxvdzogZmNOYW1lLFxuICAgICAgICAgICAgICAgIGluZGljYXRvcjogJ21hcC12YWx1ZS1pbmQnLFxuICAgICAgICAgICAgICAgIG5leHQ6IHZhbHVlLFxuICAgICAgICAgICAgICAgIG9mZnNldDoga2V5Tm9kZS5yYW5nZVsyXSxcbiAgICAgICAgICAgICAgICBvbkVycm9yLFxuICAgICAgICAgICAgICAgIHBhcmVudEluZGVudDogZmMuaW5kZW50LFxuICAgICAgICAgICAgICAgIHN0YXJ0T25OZXdsaW5lOiBmYWxzZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAodmFsdWVQcm9wcy5mb3VuZCkge1xuICAgICAgICAgICAgICAgIGlmICghaXNNYXAgJiYgIXByb3BzLmZvdW5kICYmIGN0eC5vcHRpb25zLnN0cmljdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiBzZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3QgPT09IHZhbHVlUHJvcHMuZm91bmQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdC50eXBlID09PSAnbmV3bGluZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcihzdCwgJ01VTFRJTElORV9JTVBMSUNJVF9LRVknLCAnSW1wbGljaXQga2V5cyBvZiBmbG93IHNlcXVlbmNlIHBhaXJzIG5lZWQgdG8gYmUgb24gYSBzaW5nbGUgbGluZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wcy5zdGFydCA8IHZhbHVlUHJvcHMuZm91bmQub2Zmc2V0IC0gMTAyNClcbiAgICAgICAgICAgICAgICAgICAgICAgIG9uRXJyb3IodmFsdWVQcm9wcy5mb3VuZCwgJ0tFWV9PVkVSXzEwMjRfQ0hBUlMnLCAnVGhlIDogaW5kaWNhdG9yIG11c3QgYmUgYXQgbW9zdCAxMDI0IGNoYXJzIGFmdGVyIHRoZSBzdGFydCBvZiBhbiBpbXBsaWNpdCBmbG93IHNlcXVlbmNlIGtleScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKCdzb3VyY2UnIGluIHZhbHVlICYmIHZhbHVlLnNvdXJjZSAmJiB2YWx1ZS5zb3VyY2VbMF0gPT09ICc6JylcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih2YWx1ZSwgJ01JU1NJTkdfQ0hBUicsIGBNaXNzaW5nIHNwYWNlIGFmdGVyIDogaW4gJHtmY05hbWV9YCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHZhbHVlUHJvcHMuc3RhcnQsICdNSVNTSU5HX0NIQVInLCBgTWlzc2luZyAsIG9yIDogYmV0d2VlbiAke2ZjTmFtZX0gaXRlbXNgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHZhbHVlIHZhbHVlXG4gICAgICAgICAgICBjb25zdCB2YWx1ZU5vZGUgPSB2YWx1ZVxuICAgICAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgdmFsdWVQcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgICAgICA6IHZhbHVlUHJvcHMuZm91bmRcbiAgICAgICAgICAgICAgICAgICAgPyBjb21wb3NlRW1wdHlOb2RlKGN0eCwgdmFsdWVQcm9wcy5lbmQsIHNlcCwgbnVsbCwgdmFsdWVQcm9wcywgb25FcnJvcilcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgaWYgKHZhbHVlTm9kZSkge1xuICAgICAgICAgICAgICAgIGlmIChpc0Jsb2NrKHZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcih2YWx1ZU5vZGUucmFuZ2UsICdCTE9DS19JTl9GTE9XJywgYmxvY2tNc2cpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAodmFsdWVQcm9wcy5jb21tZW50KSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleU5vZGUuY29tbWVudClcbiAgICAgICAgICAgICAgICAgICAga2V5Tm9kZS5jb21tZW50ICs9ICdcXG4nICsgdmFsdWVQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAga2V5Tm9kZS5jb21tZW50ID0gdmFsdWVQcm9wcy5jb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgcGFpciA9IG5ldyBQYWlyKGtleU5vZGUsIHZhbHVlTm9kZSk7XG4gICAgICAgICAgICBpZiAoY3R4Lm9wdGlvbnMua2VlcFNvdXJjZVRva2VucylcbiAgICAgICAgICAgICAgICBwYWlyLnNyY1Rva2VuID0gY29sbEl0ZW07XG4gICAgICAgICAgICBpZiAoaXNNYXApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBjb2xsO1xuICAgICAgICAgICAgICAgIGlmIChtYXBJbmNsdWRlcyhjdHgsIG1hcC5pdGVtcywga2V5Tm9kZSkpXG4gICAgICAgICAgICAgICAgICAgIG9uRXJyb3Ioa2V5U3RhcnQsICdEVVBMSUNBVEVfS0VZJywgJ01hcCBrZXlzIG11c3QgYmUgdW5pcXVlJyk7XG4gICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2gocGFpcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtYXAgPSBuZXcgWUFNTE1hcChjdHguc2NoZW1hKTtcbiAgICAgICAgICAgICAgICBtYXAuZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2gocGFpcik7XG4gICAgICAgICAgICAgICAgY29uc3QgZW5kUmFuZ2UgPSAodmFsdWVOb2RlID8/IGtleU5vZGUpLnJhbmdlO1xuICAgICAgICAgICAgICAgIG1hcC5yYW5nZSA9IFtrZXlOb2RlLnJhbmdlWzBdLCBlbmRSYW5nZVsxXSwgZW5kUmFuZ2VbMl1dO1xuICAgICAgICAgICAgICAgIGNvbGwuaXRlbXMucHVzaChtYXApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb2Zmc2V0ID0gdmFsdWVOb2RlID8gdmFsdWVOb2RlLnJhbmdlWzJdIDogdmFsdWVQcm9wcy5lbmQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgZXhwZWN0ZWRFbmQgPSBpc01hcCA/ICd9JyA6ICddJztcbiAgICBjb25zdCBbY2UsIC4uLmVlXSA9IGZjLmVuZDtcbiAgICBsZXQgY2VQb3MgPSBvZmZzZXQ7XG4gICAgaWYgKGNlICYmIGNlLnNvdXJjZSA9PT0gZXhwZWN0ZWRFbmQpXG4gICAgICAgIGNlUG9zID0gY2Uub2Zmc2V0ICsgY2Uuc291cmNlLmxlbmd0aDtcbiAgICBlbHNlIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IGZjTmFtZVswXS50b1VwcGVyQ2FzZSgpICsgZmNOYW1lLnN1YnN0cmluZygxKTtcbiAgICAgICAgY29uc3QgbXNnID0gYXRSb290XG4gICAgICAgICAgICA/IGAke25hbWV9IG11c3QgZW5kIHdpdGggYSAke2V4cGVjdGVkRW5kfWBcbiAgICAgICAgICAgIDogYCR7bmFtZX0gaW4gYmxvY2sgY29sbGVjdGlvbiBtdXN0IGJlIHN1ZmZpY2llbnRseSBpbmRlbnRlZCBhbmQgZW5kIHdpdGggYSAke2V4cGVjdGVkRW5kfWA7XG4gICAgICAgIG9uRXJyb3Iob2Zmc2V0LCBhdFJvb3QgPyAnTUlTU0lOR19DSEFSJyA6ICdCQURfSU5ERU5UJywgbXNnKTtcbiAgICAgICAgaWYgKGNlICYmIGNlLnNvdXJjZS5sZW5ndGggIT09IDEpXG4gICAgICAgICAgICBlZS51bnNoaWZ0KGNlKTtcbiAgICB9XG4gICAgaWYgKGVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgZW5kID0gcmVzb2x2ZUVuZChlZSwgY2VQb3MsIGN0eC5vcHRpb25zLnN0cmljdCwgb25FcnJvcik7XG4gICAgICAgIGlmIChlbmQuY29tbWVudCkge1xuICAgICAgICAgICAgaWYgKGNvbGwuY29tbWVudClcbiAgICAgICAgICAgICAgICBjb2xsLmNvbW1lbnQgKz0gJ1xcbicgKyBlbmQuY29tbWVudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBjb2xsLmNvbW1lbnQgPSBlbmQuY29tbWVudDtcbiAgICAgICAgfVxuICAgICAgICBjb2xsLnJhbmdlID0gW2ZjLm9mZnNldCwgY2VQb3MsIGVuZC5vZmZzZXRdO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY29sbC5yYW5nZSA9IFtmYy5vZmZzZXQsIGNlUG9zLCBjZVBvc107XG4gICAgfVxuICAgIHJldHVybiBjb2xsO1xufVxuXG5leHBvcnQgeyByZXNvbHZlRmxvd0NvbGxlY3Rpb24gfTtcbiIsImltcG9ydCB7IGlzTm9kZSB9IGZyb20gJy4uL25vZGVzL2lkZW50aXR5LmpzJztcbmltcG9ydCB7IFNjYWxhciB9IGZyb20gJy4uL25vZGVzL1NjYWxhci5qcyc7XG5pbXBvcnQgeyBZQU1MTWFwIH0gZnJvbSAnLi4vbm9kZXMvWUFNTE1hcC5qcyc7XG5pbXBvcnQgeyBZQU1MU2VxIH0gZnJvbSAnLi4vbm9kZXMvWUFNTFNlcS5qcyc7XG5pbXBvcnQgeyByZXNvbHZlQmxvY2tNYXAgfSBmcm9tICcuL3Jlc29sdmUtYmxvY2stbWFwLmpzJztcbmltcG9ydCB7IHJlc29sdmVCbG9ja1NlcSB9IGZyb20gJy4vcmVzb2x2ZS1ibG9jay1zZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUZsb3dDb2xsZWN0aW9uIH0gZnJvbSAnLi9yZXNvbHZlLWZsb3ctY29sbGVjdGlvbi5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWdOYW1lLCB0YWcpIHtcbiAgICBjb25zdCBjb2xsID0gdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLW1hcCdcbiAgICAgICAgPyByZXNvbHZlQmxvY2tNYXAoQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZylcbiAgICAgICAgOiB0b2tlbi50eXBlID09PSAnYmxvY2stc2VxJ1xuICAgICAgICAgICAgPyByZXNvbHZlQmxvY2tTZXEoQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZylcbiAgICAgICAgICAgIDogcmVzb2x2ZUZsb3dDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWcpO1xuICAgIGNvbnN0IENvbGwgPSBjb2xsLmNvbnN0cnVjdG9yO1xuICAgIC8vIElmIHdlIGdvdCBhIHRhZ05hbWUgbWF0Y2hpbmcgdGhlIGNsYXNzLCBvciB0aGUgdGFnIG5hbWUgaXMgJyEnLFxuICAgIC8vIHRoZW4gdXNlIHRoZSB0YWdOYW1lIGZyb20gdGhlIG5vZGUgY2xhc3MgdXNlZCB0byBjcmVhdGUgaXQuXG4gICAgaWYgKHRhZ05hbWUgPT09ICchJyB8fCB0YWdOYW1lID09PSBDb2xsLnRhZ05hbWUpIHtcbiAgICAgICAgY29sbC50YWcgPSBDb2xsLnRhZ05hbWU7XG4gICAgICAgIHJldHVybiBjb2xsO1xuICAgIH1cbiAgICBpZiAodGFnTmFtZSlcbiAgICAgICAgY29sbC50YWcgPSB0YWdOYW1lO1xuICAgIHJldHVybiBjb2xsO1xufVxuZnVuY3Rpb24gY29tcG9zZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIHByb3BzLCBvbkVycm9yKSB7XG4gICAgY29uc3QgdGFnVG9rZW4gPSBwcm9wcy50YWc7XG4gICAgY29uc3QgdGFnTmFtZSA9ICF0YWdUb2tlblxuICAgICAgICA/IG51bGxcbiAgICAgICAgOiBjdHguZGlyZWN0aXZlcy50YWdOYW1lKHRhZ1Rva2VuLnNvdXJjZSwgbXNnID0+IG9uRXJyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpKTtcbiAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNlcScpIHtcbiAgICAgICAgY29uc3QgeyBhbmNob3IsIG5ld2xpbmVBZnRlclByb3A6IG5sIH0gPSBwcm9wcztcbiAgICAgICAgY29uc3QgbGFzdFByb3AgPSBhbmNob3IgJiYgdGFnVG9rZW5cbiAgICAgICAgICAgID8gYW5jaG9yLm9mZnNldCA+IHRhZ1Rva2VuLm9mZnNldFxuICAgICAgICAgICAgICAgID8gYW5jaG9yXG4gICAgICAgICAgICAgICAgOiB0YWdUb2tlblxuICAgICAgICAgICAgOiAoYW5jaG9yID8/IHRhZ1Rva2VuKTtcbiAgICAgICAgaWYgKGxhc3RQcm9wICYmICghbmwgfHwgbmwub2Zmc2V0IDwgbGFzdFByb3Aub2Zmc2V0KSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdNaXNzaW5nIG5ld2xpbmUgYWZ0ZXIgYmxvY2sgc2VxdWVuY2UgcHJvcHMnO1xuICAgICAgICAgICAgb25FcnJvcihsYXN0UHJvcCwgJ01JU1NJTkdfQ0hBUicsIG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGV4cFR5cGUgPSB0b2tlbi50eXBlID09PSAnYmxvY2stbWFwJ1xuICAgICAgICA/ICdtYXAnXG4gICAgICAgIDogdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNlcSdcbiAgICAgICAgICAgID8gJ3NlcSdcbiAgICAgICAgICAgIDogdG9rZW4uc3RhcnQuc291cmNlID09PSAneydcbiAgICAgICAgICAgICAgICA/ICdtYXAnXG4gICAgICAgICAgICAgICAgOiAnc2VxJztcbiAgICAvLyBzaG9ydGN1dDogY2hlY2sgaWYgaXQncyBhIGdlbmVyaWMgWUFNTE1hcCBvciBZQU1MU2VxXG4gICAgLy8gYmVmb3JlIGp1bXBpbmcgaW50byB0aGUgY3VzdG9tIHRhZyBsb2dpYy5cbiAgICBpZiAoIXRhZ1Rva2VuIHx8XG4gICAgICAgICF0YWdOYW1lIHx8XG4gICAgICAgIHRhZ05hbWUgPT09ICchJyB8fFxuICAgICAgICAodGFnTmFtZSA9PT0gWUFNTE1hcC50YWdOYW1lICYmIGV4cFR5cGUgPT09ICdtYXAnKSB8fFxuICAgICAgICAodGFnTmFtZSA9PT0gWUFNTFNlcS50YWdOYW1lICYmIGV4cFR5cGUgPT09ICdzZXEnKSkge1xuICAgICAgICByZXR1cm4gcmVzb2x2ZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIG9uRXJyb3IsIHRhZ05hbWUpO1xuICAgIH1cbiAgICBsZXQgdGFnID0gY3R4LnNjaGVtYS50YWdzLmZpbmQodCA9PiB0LnRhZyA9PT0gdGFnTmFtZSAmJiB0LmNvbGxlY3Rpb24gPT09IGV4cFR5cGUpO1xuICAgIGlmICghdGFnKSB7XG4gICAgICAgIGNvbnN0IGt0ID0gY3R4LnNjaGVtYS5rbm93blRhZ3NbdGFnTmFtZV07XG4gICAgICAgIGlmIChrdCAmJiBrdC5jb2xsZWN0aW9uID09PSBleHBUeXBlKSB7XG4gICAgICAgICAgICBjdHguc2NoZW1hLnRhZ3MucHVzaChPYmplY3QuYXNzaWduKHt9LCBrdCwgeyBkZWZhdWx0OiBmYWxzZSB9KSk7XG4gICAgICAgICAgICB0YWcgPSBrdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChrdD8uY29sbGVjdGlvbikge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IodGFnVG9rZW4sICdCQURfQ09MTEVDVElPTl9UWVBFJywgYCR7a3QudGFnfSB1c2VkIGZvciAke2V4cFR5cGV9IGNvbGxlY3Rpb24sIGJ1dCBleHBlY3RzICR7a3QuY29sbGVjdGlvbn1gLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIG9uRXJyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBgVW5yZXNvbHZlZCB0YWc6ICR7dGFnTmFtZX1gLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlQ29sbGVjdGlvbihDTiwgY3R4LCB0b2tlbiwgb25FcnJvciwgdGFnTmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgY29sbCA9IHJlc29sdmVDb2xsZWN0aW9uKENOLCBjdHgsIHRva2VuLCBvbkVycm9yLCB0YWdOYW1lLCB0YWcpO1xuICAgIGNvbnN0IHJlcyA9IHRhZy5yZXNvbHZlPy4oY29sbCwgbXNnID0+IG9uRXJyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpLCBjdHgub3B0aW9ucykgPz8gY29sbDtcbiAgICBjb25zdCBub2RlID0gaXNOb2RlKHJlcylcbiAgICAgICAgPyByZXNcbiAgICAgICAgOiBuZXcgU2NhbGFyKHJlcyk7XG4gICAgbm9kZS5yYW5nZSA9IGNvbGwucmFuZ2U7XG4gICAgbm9kZS50YWcgPSB0YWdOYW1lO1xuICAgIGlmICh0YWc/LmZvcm1hdClcbiAgICAgICAgbm9kZS5mb3JtYXQgPSB0YWcuZm9ybWF0O1xuICAgIHJldHVybiBub2RlO1xufVxuXG5leHBvcnQgeyBjb21wb3NlQ29sbGVjdGlvbiB9O1xuIiwiaW1wb3J0IHsgWUFNTFNlcSB9IGZyb20gJy4uL25vZGVzL1lBTUxTZXEuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVByb3BzIH0gZnJvbSAnLi9yZXNvbHZlLXByb3BzLmpzJztcbmltcG9ydCB7IGZsb3dJbmRlbnRDaGVjayB9IGZyb20gJy4vdXRpbC1mbG93LWluZGVudC1jaGVjay5qcyc7XG5cbmZ1bmN0aW9uIHJlc29sdmVCbG9ja1NlcSh7IGNvbXBvc2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH0sIGN0eCwgYnMsIG9uRXJyb3IsIHRhZykge1xuICAgIGNvbnN0IE5vZGVDbGFzcyA9IHRhZz8ubm9kZUNsYXNzID8/IFlBTUxTZXE7XG4gICAgY29uc3Qgc2VxID0gbmV3IE5vZGVDbGFzcyhjdHguc2NoZW1hKTtcbiAgICBpZiAoY3R4LmF0Um9vdClcbiAgICAgICAgY3R4LmF0Um9vdCA9IGZhbHNlO1xuICAgIGlmIChjdHguYXRLZXkpXG4gICAgICAgIGN0eC5hdEtleSA9IGZhbHNlO1xuICAgIGxldCBvZmZzZXQgPSBicy5vZmZzZXQ7XG4gICAgbGV0IGNvbW1lbnRFbmQgPSBudWxsO1xuICAgIGZvciAoY29uc3QgeyBzdGFydCwgdmFsdWUgfSBvZiBicy5pdGVtcykge1xuICAgICAgICBjb25zdCBwcm9wcyA9IHJlc29sdmVQcm9wcyhzdGFydCwge1xuICAgICAgICAgICAgaW5kaWNhdG9yOiAnc2VxLWl0ZW0taW5kJyxcbiAgICAgICAgICAgIG5leHQ6IHZhbHVlLFxuICAgICAgICAgICAgb2Zmc2V0LFxuICAgICAgICAgICAgb25FcnJvcixcbiAgICAgICAgICAgIHBhcmVudEluZGVudDogYnMuaW5kZW50LFxuICAgICAgICAgICAgc3RhcnRPbk5ld2xpbmU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIGlmICghcHJvcHMuZm91bmQpIHtcbiAgICAgICAgICAgIGlmIChwcm9wcy5hbmNob3IgfHwgcHJvcHMudGFnIHx8IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlLnR5cGUgPT09ICdibG9jay1zZXEnKVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHByb3BzLmVuZCwgJ0JBRF9JTkRFTlQnLCAnQWxsIHNlcXVlbmNlIGl0ZW1zIG11c3Qgc3RhcnQgYXQgdGhlIHNhbWUgY29sdW1uJyk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ01JU1NJTkdfQ0hBUicsICdTZXF1ZW5jZSBpdGVtIHdpdGhvdXQgLSBpbmRpY2F0b3InKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbW1lbnRFbmQgPSBwcm9wcy5lbmQ7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLmNvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIHNlcS5jb21tZW50ID0gcHJvcHMuY29tbWVudDtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBub2RlID0gdmFsdWVcbiAgICAgICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgICAgICA6IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCBwcm9wcy5lbmQsIHN0YXJ0LCBudWxsLCBwcm9wcywgb25FcnJvcik7XG4gICAgICAgIGlmIChjdHguc2NoZW1hLmNvbXBhdClcbiAgICAgICAgICAgIGZsb3dJbmRlbnRDaGVjayhicy5pbmRlbnQsIHZhbHVlLCBvbkVycm9yKTtcbiAgICAgICAgb2Zmc2V0ID0gbm9kZS5yYW5nZVsyXTtcbiAgICAgICAgc2VxLml0ZW1zLnB1c2gobm9kZSk7XG4gICAgfVxuICAgIHNlcS5yYW5nZSA9IFticy5vZmZzZXQsIG9mZnNldCwgY29tbWVudEVuZCA/PyBvZmZzZXRdO1xuICAgIHJldHVybiBzZXE7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVCbG9ja1NlcSB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZUJsb2NrU2NhbGFyKGN0eCwgc2NhbGFyLCBvbkVycm9yKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBzY2FsYXIub2Zmc2V0O1xuICAgIGNvbnN0IGhlYWRlciA9IHBhcnNlQmxvY2tTY2FsYXJIZWFkZXIoc2NhbGFyLCBjdHgub3B0aW9ucy5zdHJpY3QsIG9uRXJyb3IpO1xuICAgIGlmICghaGVhZGVyKVxuICAgICAgICByZXR1cm4geyB2YWx1ZTogJycsIHR5cGU6IG51bGwsIGNvbW1lbnQ6ICcnLCByYW5nZTogW3N0YXJ0LCBzdGFydCwgc3RhcnRdIH07XG4gICAgY29uc3QgdHlwZSA9IGhlYWRlci5tb2RlID09PSAnPicgPyBTY2FsYXIuQkxPQ0tfRk9MREVEIDogU2NhbGFyLkJMT0NLX0xJVEVSQUw7XG4gICAgY29uc3QgbGluZXMgPSBzY2FsYXIuc291cmNlID8gc3BsaXRMaW5lcyhzY2FsYXIuc291cmNlKSA6IFtdO1xuICAgIC8vIGRldGVybWluZSB0aGUgZW5kIG9mIGNvbnRlbnQgJiBzdGFydCBvZiBjaG9tcGluZ1xuICAgIGxldCBjaG9tcFN0YXJ0ID0gbGluZXMubGVuZ3RoO1xuICAgIGZvciAobGV0IGkgPSBsaW5lcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICBjb25zdCBjb250ZW50ID0gbGluZXNbaV1bMV07XG4gICAgICAgIGlmIChjb250ZW50ID09PSAnJyB8fCBjb250ZW50ID09PSAnXFxyJylcbiAgICAgICAgICAgIGNob21wU3RhcnQgPSBpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gc2hvcnRjdXQgZm9yIGVtcHR5IGNvbnRlbnRzXG4gICAgaWYgKGNob21wU3RhcnQgPT09IDApIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBoZWFkZXIuY2hvbXAgPT09ICcrJyAmJiBsaW5lcy5sZW5ndGggPiAwXG4gICAgICAgICAgICA/ICdcXG4nLnJlcGVhdChNYXRoLm1heCgxLCBsaW5lcy5sZW5ndGggLSAxKSlcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIGxldCBlbmQgPSBzdGFydCArIGhlYWRlci5sZW5ndGg7XG4gICAgICAgIGlmIChzY2FsYXIuc291cmNlKVxuICAgICAgICAgICAgZW5kICs9IHNjYWxhci5zb3VyY2UubGVuZ3RoO1xuICAgICAgICByZXR1cm4geyB2YWx1ZSwgdHlwZSwgY29tbWVudDogaGVhZGVyLmNvbW1lbnQsIHJhbmdlOiBbc3RhcnQsIGVuZCwgZW5kXSB9O1xuICAgIH1cbiAgICAvLyBmaW5kIHRoZSBpbmRlbnRhdGlvbiBsZXZlbCB0byB0cmltIGZyb20gc3RhcnRcbiAgICBsZXQgdHJpbUluZGVudCA9IHNjYWxhci5pbmRlbnQgKyBoZWFkZXIuaW5kZW50O1xuICAgIGxldCBvZmZzZXQgPSBzY2FsYXIub2Zmc2V0ICsgaGVhZGVyLmxlbmd0aDtcbiAgICBsZXQgY29udGVudFN0YXJ0ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNob21wU3RhcnQ7ICsraSkge1xuICAgICAgICBjb25zdCBbaW5kZW50LCBjb250ZW50XSA9IGxpbmVzW2ldO1xuICAgICAgICBpZiAoY29udGVudCA9PT0gJycgfHwgY29udGVudCA9PT0gJ1xccicpIHtcbiAgICAgICAgICAgIGlmIChoZWFkZXIuaW5kZW50ID09PSAwICYmIGluZGVudC5sZW5ndGggPiB0cmltSW5kZW50KVxuICAgICAgICAgICAgICAgIHRyaW1JbmRlbnQgPSBpbmRlbnQubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKGluZGVudC5sZW5ndGggPCB0cmltSW5kZW50KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9ICdCbG9jayBzY2FsYXJzIHdpdGggbW9yZS1pbmRlbnRlZCBsZWFkaW5nIGVtcHR5IGxpbmVzIG11c3QgdXNlIGFuIGV4cGxpY2l0IGluZGVudGF0aW9uIGluZGljYXRvcic7XG4gICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQgKyBpbmRlbnQubGVuZ3RoLCAnTUlTU0lOR19DSEFSJywgbWVzc2FnZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaGVhZGVyLmluZGVudCA9PT0gMClcbiAgICAgICAgICAgICAgICB0cmltSW5kZW50ID0gaW5kZW50Lmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnRlbnRTdGFydCA9IGk7XG4gICAgICAgICAgICBpZiAodHJpbUluZGVudCA9PT0gMCAmJiAhY3R4LmF0Um9vdCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnQmxvY2sgc2NhbGFyIHZhbHVlcyBpbiBjb2xsZWN0aW9ucyBtdXN0IGJlIGluZGVudGVkJztcbiAgICAgICAgICAgICAgICBvbkVycm9yKG9mZnNldCwgJ0JBRF9JTkRFTlQnLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIG9mZnNldCArPSBpbmRlbnQubGVuZ3RoICsgY29udGVudC5sZW5ndGggKyAxO1xuICAgIH1cbiAgICAvLyBpbmNsdWRlIHRyYWlsaW5nIG1vcmUtaW5kZW50ZWQgZW1wdHkgbGluZXMgaW4gY29udGVudFxuICAgIGZvciAobGV0IGkgPSBsaW5lcy5sZW5ndGggLSAxOyBpID49IGNob21wU3RhcnQ7IC0taSkge1xuICAgICAgICBpZiAobGluZXNbaV1bMF0ubGVuZ3RoID4gdHJpbUluZGVudClcbiAgICAgICAgICAgIGNob21wU3RhcnQgPSBpICsgMTtcbiAgICB9XG4gICAgbGV0IHZhbHVlID0gJyc7XG4gICAgbGV0IHNlcCA9ICcnO1xuICAgIGxldCBwcmV2TW9yZUluZGVudGVkID0gZmFsc2U7XG4gICAgLy8gbGVhZGluZyB3aGl0ZXNwYWNlIGlzIGtlcHQgaW50YWN0XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb250ZW50U3RhcnQ7ICsraSlcbiAgICAgICAgdmFsdWUgKz0gbGluZXNbaV1bMF0uc2xpY2UodHJpbUluZGVudCkgKyAnXFxuJztcbiAgICBmb3IgKGxldCBpID0gY29udGVudFN0YXJ0OyBpIDwgY2hvbXBTdGFydDsgKytpKSB7XG4gICAgICAgIGxldCBbaW5kZW50LCBjb250ZW50XSA9IGxpbmVzW2ldO1xuICAgICAgICBvZmZzZXQgKz0gaW5kZW50Lmxlbmd0aCArIGNvbnRlbnQubGVuZ3RoICsgMTtcbiAgICAgICAgY29uc3QgY3JsZiA9IGNvbnRlbnRbY29udGVudC5sZW5ndGggLSAxXSA9PT0gJ1xccic7XG4gICAgICAgIGlmIChjcmxmKVxuICAgICAgICAgICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UoMCwgLTEpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgYWxyZWFkeSBjYXVnaHQgaW4gbGV4ZXIgKi9cbiAgICAgICAgaWYgKGNvbnRlbnQgJiYgaW5kZW50Lmxlbmd0aCA8IHRyaW1JbmRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IHNyYyA9IGhlYWRlci5pbmRlbnRcbiAgICAgICAgICAgICAgICA/ICdleHBsaWNpdCBpbmRlbnRhdGlvbiBpbmRpY2F0b3InXG4gICAgICAgICAgICAgICAgOiAnZmlyc3QgbGluZSc7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYEJsb2NrIHNjYWxhciBsaW5lcyBtdXN0IG5vdCBiZSBsZXNzIGluZGVudGVkIHRoYW4gdGhlaXIgJHtzcmN9YDtcbiAgICAgICAgICAgIG9uRXJyb3Iob2Zmc2V0IC0gY29udGVudC5sZW5ndGggLSAoY3JsZiA/IDIgOiAxKSwgJ0JBRF9JTkRFTlQnLCBtZXNzYWdlKTtcbiAgICAgICAgICAgIGluZGVudCA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlID09PSBTY2FsYXIuQkxPQ0tfTElURVJBTCkge1xuICAgICAgICAgICAgdmFsdWUgKz0gc2VwICsgaW5kZW50LnNsaWNlKHRyaW1JbmRlbnQpICsgY29udGVudDtcbiAgICAgICAgICAgIHNlcCA9ICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGluZGVudC5sZW5ndGggPiB0cmltSW5kZW50IHx8IGNvbnRlbnRbMF0gPT09ICdcXHQnKSB7XG4gICAgICAgICAgICAvLyBtb3JlLWluZGVudGVkIGNvbnRlbnQgd2l0aGluIGEgZm9sZGVkIGJsb2NrXG4gICAgICAgICAgICBpZiAoc2VwID09PSAnICcpXG4gICAgICAgICAgICAgICAgc2VwID0gJ1xcbic7XG4gICAgICAgICAgICBlbHNlIGlmICghcHJldk1vcmVJbmRlbnRlZCAmJiBzZXAgPT09ICdcXG4nKVxuICAgICAgICAgICAgICAgIHNlcCA9ICdcXG5cXG4nO1xuICAgICAgICAgICAgdmFsdWUgKz0gc2VwICsgaW5kZW50LnNsaWNlKHRyaW1JbmRlbnQpICsgY29udGVudDtcbiAgICAgICAgICAgIHNlcCA9ICdcXG4nO1xuICAgICAgICAgICAgcHJldk1vcmVJbmRlbnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY29udGVudCA9PT0gJycpIHtcbiAgICAgICAgICAgIC8vIGVtcHR5IGxpbmVcbiAgICAgICAgICAgIGlmIChzZXAgPT09ICdcXG4nKVxuICAgICAgICAgICAgICAgIHZhbHVlICs9ICdcXG4nO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHNlcCA9ICdcXG4nO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFsdWUgKz0gc2VwICsgY29udGVudDtcbiAgICAgICAgICAgIHNlcCA9ICcgJztcbiAgICAgICAgICAgIHByZXZNb3JlSW5kZW50ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzd2l0Y2ggKGhlYWRlci5jaG9tcCkge1xuICAgICAgICBjYXNlICctJzpcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcrJzpcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBjaG9tcFN0YXJ0OyBpIDwgbGluZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gJ1xcbicgKyBsaW5lc1tpXVswXS5zbGljZSh0cmltSW5kZW50KTtcbiAgICAgICAgICAgIGlmICh2YWx1ZVt2YWx1ZS5sZW5ndGggLSAxXSAhPT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gJ1xcbic7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHZhbHVlICs9ICdcXG4nO1xuICAgIH1cbiAgICBjb25zdCBlbmQgPSBzdGFydCArIGhlYWRlci5sZW5ndGggKyBzY2FsYXIuc291cmNlLmxlbmd0aDtcbiAgICByZXR1cm4geyB2YWx1ZSwgdHlwZSwgY29tbWVudDogaGVhZGVyLmNvbW1lbnQsIHJhbmdlOiBbc3RhcnQsIGVuZCwgZW5kXSB9O1xufVxuZnVuY3Rpb24gcGFyc2VCbG9ja1NjYWxhckhlYWRlcih7IG9mZnNldCwgcHJvcHMgfSwgc3RyaWN0LCBvbkVycm9yKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmIHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgaWYgKHByb3BzWzBdLnR5cGUgIT09ICdibG9jay1zY2FsYXItaGVhZGVyJykge1xuICAgICAgICBvbkVycm9yKHByb3BzWzBdLCAnSU1QT1NTSUJMRScsICdCbG9jayBzY2FsYXIgaGVhZGVyIG5vdCBmb3VuZCcpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3QgeyBzb3VyY2UgfSA9IHByb3BzWzBdO1xuICAgIGNvbnN0IG1vZGUgPSBzb3VyY2VbMF07XG4gICAgbGV0IGluZGVudCA9IDA7XG4gICAgbGV0IGNob21wID0gJyc7XG4gICAgbGV0IGVycm9yID0gLTE7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgY2ggPSBzb3VyY2VbaV07XG4gICAgICAgIGlmICghY2hvbXAgJiYgKGNoID09PSAnLScgfHwgY2ggPT09ICcrJykpXG4gICAgICAgICAgICBjaG9tcCA9IGNoO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBOdW1iZXIoY2gpO1xuICAgICAgICAgICAgaWYgKCFpbmRlbnQgJiYgbilcbiAgICAgICAgICAgICAgICBpbmRlbnQgPSBuO1xuICAgICAgICAgICAgZWxzZSBpZiAoZXJyb3IgPT09IC0xKVxuICAgICAgICAgICAgICAgIGVycm9yID0gb2Zmc2V0ICsgaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZXJyb3IgIT09IC0xKVxuICAgICAgICBvbkVycm9yKGVycm9yLCAnVU5FWFBFQ1RFRF9UT0tFTicsIGBCbG9jayBzY2FsYXIgaGVhZGVyIGluY2x1ZGVzIGV4dHJhIGNoYXJhY3RlcnM6ICR7c291cmNlfWApO1xuICAgIGxldCBoYXNTcGFjZSA9IGZhbHNlO1xuICAgIGxldCBjb21tZW50ID0gJyc7XG4gICAgbGV0IGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBwcm9wcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IHByb3BzW2ldO1xuICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBoYXNTcGFjZSA9IHRydWU7XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgbGVuZ3RoICs9IHRva2VuLnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICBpZiAoc3RyaWN0ICYmICFoYXNTcGFjZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gJ0NvbW1lbnRzIG11c3QgYmUgc2VwYXJhdGVkIGZyb20gb3RoZXIgdG9rZW5zIGJ5IHdoaXRlIHNwYWNlIGNoYXJhY3RlcnMnO1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnTUlTU0lOR19DSEFSJywgbWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGxlbmd0aCArPSB0b2tlbi5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGNvbW1lbnQgPSB0b2tlbi5zb3VyY2Uuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdVTkVYUEVDVEVEX1RPS0VOJywgdG9rZW4ubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgbGVuZ3RoICs9IHRva2VuLnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgVW5leHBlY3RlZCB0b2tlbiBpbiBibG9jayBzY2FsYXIgaGVhZGVyOiAke3Rva2VuLnR5cGV9YDtcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRzID0gdG9rZW4uc291cmNlO1xuICAgICAgICAgICAgICAgIGlmICh0cyAmJiB0eXBlb2YgdHMgPT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgICAgICBsZW5ndGggKz0gdHMubGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IG1vZGUsIGluZGVudCwgY2hvbXAsIGNvbW1lbnQsIGxlbmd0aCB9O1xufVxuLyoqIEByZXR1cm5zIEFycmF5IG9mIGxpbmVzIHNwbGl0IHVwIGFzIGBbaW5kZW50LCBjb250ZW50XWAgKi9cbmZ1bmN0aW9uIHNwbGl0TGluZXMoc291cmNlKSB7XG4gICAgY29uc3Qgc3BsaXQgPSBzb3VyY2Uuc3BsaXQoL1xcbiggKikvKTtcbiAgICBjb25zdCBmaXJzdCA9IHNwbGl0WzBdO1xuICAgIGNvbnN0IG0gPSBmaXJzdC5tYXRjaCgvXiggKikvKTtcbiAgICBjb25zdCBsaW5lMCA9IG0/LlsxXVxuICAgICAgICA/IFttWzFdLCBmaXJzdC5zbGljZShtWzFdLmxlbmd0aCldXG4gICAgICAgIDogWycnLCBmaXJzdF07XG4gICAgY29uc3QgbGluZXMgPSBbbGluZTBdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc3BsaXQubGVuZ3RoOyBpICs9IDIpXG4gICAgICAgIGxpbmVzLnB1c2goW3NwbGl0W2ldLCBzcGxpdFtpICsgMV1dKTtcbiAgICByZXR1cm4gbGluZXM7XG59XG5cbmV4cG9ydCB7IHJlc29sdmVCbG9ja1NjYWxhciB9O1xuIiwiaW1wb3J0IHsgU2NhbGFyIH0gZnJvbSAnLi4vbm9kZXMvU2NhbGFyLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZUZsb3dTY2FsYXIoc2NhbGFyLCBzdHJpY3QsIG9uRXJyb3IpIHtcbiAgICBjb25zdCB7IG9mZnNldCwgdHlwZSwgc291cmNlLCBlbmQgfSA9IHNjYWxhcjtcbiAgICBsZXQgX3R5cGU7XG4gICAgbGV0IHZhbHVlO1xuICAgIGNvbnN0IF9vbkVycm9yID0gKHJlbCwgY29kZSwgbXNnKSA9PiBvbkVycm9yKG9mZnNldCArIHJlbCwgY29kZSwgbXNnKTtcbiAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgIF90eXBlID0gU2NhbGFyLlBMQUlOO1xuICAgICAgICAgICAgdmFsdWUgPSBwbGFpblZhbHVlKHNvdXJjZSwgX29uRXJyb3IpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIF90eXBlID0gU2NhbGFyLlFVT1RFX1NJTkdMRTtcbiAgICAgICAgICAgIHZhbHVlID0gc2luZ2xlUXVvdGVkVmFsdWUoc291cmNlLCBfb25FcnJvcik7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgX3R5cGUgPSBTY2FsYXIuUVVPVEVfRE9VQkxFO1xuICAgICAgICAgICAgdmFsdWUgPSBkb3VibGVRdW90ZWRWYWx1ZShzb3VyY2UsIF9vbkVycm9yKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgb25FcnJvcihzY2FsYXIsICdVTkVYUEVDVEVEX1RPS0VOJywgYEV4cGVjdGVkIGEgZmxvdyBzY2FsYXIgdmFsdWUsIGJ1dCBmb3VuZDogJHt0eXBlfWApO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogJycsXG4gICAgICAgICAgICAgICAgdHlwZTogbnVsbCxcbiAgICAgICAgICAgICAgICBjb21tZW50OiAnJyxcbiAgICAgICAgICAgICAgICByYW5nZTogW29mZnNldCwgb2Zmc2V0ICsgc291cmNlLmxlbmd0aCwgb2Zmc2V0ICsgc291cmNlLmxlbmd0aF1cbiAgICAgICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlRW5kID0gb2Zmc2V0ICsgc291cmNlLmxlbmd0aDtcbiAgICBjb25zdCByZSA9IHJlc29sdmVFbmQoZW5kLCB2YWx1ZUVuZCwgc3RyaWN0LCBvbkVycm9yKTtcbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgdHlwZTogX3R5cGUsXG4gICAgICAgIGNvbW1lbnQ6IHJlLmNvbW1lbnQsXG4gICAgICAgIHJhbmdlOiBbb2Zmc2V0LCB2YWx1ZUVuZCwgcmUub2Zmc2V0XVxuICAgIH07XG59XG5mdW5jdGlvbiBwbGFpblZhbHVlKHNvdXJjZSwgb25FcnJvcikge1xuICAgIGxldCBiYWRDaGFyID0gJyc7XG4gICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgY2FzZSAnXFx0JzpcbiAgICAgICAgICAgIGJhZENoYXIgPSAnYSB0YWIgY2hhcmFjdGVyJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICcsJzpcbiAgICAgICAgICAgIGJhZENoYXIgPSAnZmxvdyBpbmRpY2F0b3IgY2hhcmFjdGVyICwnO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJyUnOlxuICAgICAgICAgICAgYmFkQ2hhciA9ICdkaXJlY3RpdmUgaW5kaWNhdG9yIGNoYXJhY3RlciAlJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICd8JzpcbiAgICAgICAgY2FzZSAnPic6IHtcbiAgICAgICAgICAgIGJhZENoYXIgPSBgYmxvY2sgc2NhbGFyIGluZGljYXRvciAke3NvdXJjZVswXX1gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnQCc6XG4gICAgICAgIGNhc2UgJ2AnOiB7XG4gICAgICAgICAgICBiYWRDaGFyID0gYHJlc2VydmVkIGNoYXJhY3RlciAke3NvdXJjZVswXX1gO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGJhZENoYXIpXG4gICAgICAgIG9uRXJyb3IoMCwgJ0JBRF9TQ0FMQVJfU1RBUlQnLCBgUGxhaW4gdmFsdWUgY2Fubm90IHN0YXJ0IHdpdGggJHtiYWRDaGFyfWApO1xuICAgIHJldHVybiBmb2xkTGluZXMoc291cmNlKTtcbn1cbmZ1bmN0aW9uIHNpbmdsZVF1b3RlZFZhbHVlKHNvdXJjZSwgb25FcnJvcikge1xuICAgIGlmIChzb3VyY2Vbc291cmNlLmxlbmd0aCAtIDFdICE9PSBcIidcIiB8fCBzb3VyY2UubGVuZ3RoID09PSAxKVxuICAgICAgICBvbkVycm9yKHNvdXJjZS5sZW5ndGgsICdNSVNTSU5HX0NIQVInLCBcIk1pc3NpbmcgY2xvc2luZyAncXVvdGVcIik7XG4gICAgcmV0dXJuIGZvbGRMaW5lcyhzb3VyY2Uuc2xpY2UoMSwgLTEpKS5yZXBsYWNlKC8nJy9nLCBcIidcIik7XG59XG5mdW5jdGlvbiBmb2xkTGluZXMoc291cmNlKSB7XG4gICAgLyoqXG4gICAgICogVGhlIG5lZ2F0aXZlIGxvb2tiZWhpbmQgaGVyZSBhbmQgaW4gdGhlIGByZWAgUmVnRXhwIGlzIHRvXG4gICAgICogcHJldmVudCBjYXVzaW5nIGEgcG9seW5vbWlhbCBzZWFyY2ggdGltZSBpbiBjZXJ0YWluIGNhc2VzLlxuICAgICAqXG4gICAgICogVGhlIHRyeS1jYXRjaCBpcyBmb3IgU2FmYXJpLCB3aGljaCBkb2Vzbid0IHN1cHBvcnQgdGhpcyB5ZXQ6XG4gICAgICogaHR0cHM6Ly9jYW5pdXNlLmNvbS9qcy1yZWdleHAtbG9va2JlaGluZFxuICAgICAqL1xuICAgIGxldCBmaXJzdCwgbGluZTtcbiAgICB0cnkge1xuICAgICAgICBmaXJzdCA9IG5ldyBSZWdFeHAoJyguKj8pKD88IVsgXFx0XSlbIFxcdF0qXFxyP1xcbicsICdzeScpO1xuICAgICAgICBsaW5lID0gbmV3IFJlZ0V4cCgnWyBcXHRdKiguKj8pKD86KD88IVsgXFx0XSlbIFxcdF0qKT9cXHI/XFxuJywgJ3N5Jyk7XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgZmlyc3QgPSAvKC4qPylbIFxcdF0qXFxyP1xcbi9zeTtcbiAgICAgICAgbGluZSA9IC9bIFxcdF0qKC4qPylbIFxcdF0qXFxyP1xcbi9zeTtcbiAgICB9XG4gICAgbGV0IG1hdGNoID0gZmlyc3QuZXhlYyhzb3VyY2UpO1xuICAgIGlmICghbWF0Y2gpXG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgbGV0IHJlcyA9IG1hdGNoWzFdO1xuICAgIGxldCBzZXAgPSAnICc7XG4gICAgbGV0IHBvcyA9IGZpcnN0Lmxhc3RJbmRleDtcbiAgICBsaW5lLmxhc3RJbmRleCA9IHBvcztcbiAgICB3aGlsZSAoKG1hdGNoID0gbGluZS5leGVjKHNvdXJjZSkpKSB7XG4gICAgICAgIGlmIChtYXRjaFsxXSA9PT0gJycpIHtcbiAgICAgICAgICAgIGlmIChzZXAgPT09ICdcXG4nKVxuICAgICAgICAgICAgICAgIHJlcyArPSBzZXA7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgc2VwID0gJ1xcbic7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXMgKz0gc2VwICsgbWF0Y2hbMV07XG4gICAgICAgICAgICBzZXAgPSAnICc7XG4gICAgICAgIH1cbiAgICAgICAgcG9zID0gbGluZS5sYXN0SW5kZXg7XG4gICAgfVxuICAgIGNvbnN0IGxhc3QgPSAvWyBcXHRdKiguKikvc3k7XG4gICAgbGFzdC5sYXN0SW5kZXggPSBwb3M7XG4gICAgbWF0Y2ggPSBsYXN0LmV4ZWMoc291cmNlKTtcbiAgICByZXR1cm4gcmVzICsgc2VwICsgKG1hdGNoPy5bMV0gPz8gJycpO1xufVxuZnVuY3Rpb24gZG91YmxlUXVvdGVkVmFsdWUoc291cmNlLCBvbkVycm9yKSB7XG4gICAgbGV0IHJlcyA9ICcnO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc291cmNlLmxlbmd0aCAtIDE7ICsraSkge1xuICAgICAgICBjb25zdCBjaCA9IHNvdXJjZVtpXTtcbiAgICAgICAgaWYgKGNoID09PSAnXFxyJyAmJiBzb3VyY2VbaSArIDFdID09PSAnXFxuJylcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBpZiAoY2ggPT09ICdcXG4nKSB7XG4gICAgICAgICAgICBjb25zdCB7IGZvbGQsIG9mZnNldCB9ID0gZm9sZE5ld2xpbmUoc291cmNlLCBpKTtcbiAgICAgICAgICAgIHJlcyArPSBmb2xkO1xuICAgICAgICAgICAgaSA9IG9mZnNldDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjaCA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IHNvdXJjZVsrK2ldO1xuICAgICAgICAgICAgY29uc3QgY2MgPSBlc2NhcGVDb2Rlc1tuZXh0XTtcbiAgICAgICAgICAgIGlmIChjYylcbiAgICAgICAgICAgICAgICByZXMgKz0gY2M7XG4gICAgICAgICAgICBlbHNlIGlmIChuZXh0ID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgIC8vIHNraXAgZXNjYXBlZCBuZXdsaW5lcywgYnV0IHN0aWxsIHRyaW0gdGhlIGZvbGxvd2luZyBsaW5lXG4gICAgICAgICAgICAgICAgbmV4dCA9IHNvdXJjZVtpICsgMV07XG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHQgPT09ICcgJyB8fCBuZXh0ID09PSAnXFx0JylcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHNvdXJjZVsrK2kgKyAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5leHQgPT09ICdcXHInICYmIHNvdXJjZVtpICsgMV0gPT09ICdcXG4nKSB7XG4gICAgICAgICAgICAgICAgLy8gc2tpcCBlc2NhcGVkIENSTEYgbmV3bGluZXMsIGJ1dCBzdGlsbCB0cmltIHRoZSBmb2xsb3dpbmcgbGluZVxuICAgICAgICAgICAgICAgIG5leHQgPSBzb3VyY2VbKytpICsgMV07XG4gICAgICAgICAgICAgICAgd2hpbGUgKG5leHQgPT09ICcgJyB8fCBuZXh0ID09PSAnXFx0JylcbiAgICAgICAgICAgICAgICAgICAgbmV4dCA9IHNvdXJjZVsrK2kgKyAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKG5leHQgPT09ICd4JyB8fCBuZXh0ID09PSAndScgfHwgbmV4dCA9PT0gJ1UnKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0geyB4OiAyLCB1OiA0LCBVOiA4IH1bbmV4dF07XG4gICAgICAgICAgICAgICAgcmVzICs9IHBhcnNlQ2hhckNvZGUoc291cmNlLCBpICsgMSwgbGVuZ3RoLCBvbkVycm9yKTtcbiAgICAgICAgICAgICAgICBpICs9IGxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhdyA9IHNvdXJjZS5zdWJzdHIoaSAtIDEsIDIpO1xuICAgICAgICAgICAgICAgIG9uRXJyb3IoaSAtIDEsICdCQURfRFFfRVNDQVBFJywgYEludmFsaWQgZXNjYXBlIHNlcXVlbmNlICR7cmF3fWApO1xuICAgICAgICAgICAgICAgIHJlcyArPSByYXc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcpIHtcbiAgICAgICAgICAgIC8vIHRyaW0gdHJhaWxpbmcgd2hpdGVzcGFjZVxuICAgICAgICAgICAgY29uc3Qgd3NTdGFydCA9IGk7XG4gICAgICAgICAgICBsZXQgbmV4dCA9IHNvdXJjZVtpICsgMV07XG4gICAgICAgICAgICB3aGlsZSAobmV4dCA9PT0gJyAnIHx8IG5leHQgPT09ICdcXHQnKVxuICAgICAgICAgICAgICAgIG5leHQgPSBzb3VyY2VbKytpICsgMV07XG4gICAgICAgICAgICBpZiAobmV4dCAhPT0gJ1xcbicgJiYgIShuZXh0ID09PSAnXFxyJyAmJiBzb3VyY2VbaSArIDJdID09PSAnXFxuJykpXG4gICAgICAgICAgICAgICAgcmVzICs9IGkgPiB3c1N0YXJ0ID8gc291cmNlLnNsaWNlKHdzU3RhcnQsIGkgKyAxKSA6IGNoO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzICs9IGNoO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzb3VyY2Vbc291cmNlLmxlbmd0aCAtIDFdICE9PSAnXCInIHx8IHNvdXJjZS5sZW5ndGggPT09IDEpXG4gICAgICAgIG9uRXJyb3Ioc291cmNlLmxlbmd0aCwgJ01JU1NJTkdfQ0hBUicsICdNaXNzaW5nIGNsb3NpbmcgXCJxdW90ZScpO1xuICAgIHJldHVybiByZXM7XG59XG4vKipcbiAqIEZvbGQgYSBzaW5nbGUgbmV3bGluZSBpbnRvIGEgc3BhY2UsIG11bHRpcGxlIG5ld2xpbmVzIHRvIE4gLSAxIG5ld2xpbmVzLlxuICogUHJlc3VtZXMgYHNvdXJjZVtvZmZzZXRdID09PSAnXFxuJ2BcbiAqL1xuZnVuY3Rpb24gZm9sZE5ld2xpbmUoc291cmNlLCBvZmZzZXQpIHtcbiAgICBsZXQgZm9sZCA9ICcnO1xuICAgIGxldCBjaCA9IHNvdXJjZVtvZmZzZXQgKyAxXTtcbiAgICB3aGlsZSAoY2ggPT09ICcgJyB8fCBjaCA9PT0gJ1xcdCcgfHwgY2ggPT09ICdcXG4nIHx8IGNoID09PSAnXFxyJykge1xuICAgICAgICBpZiAoY2ggPT09ICdcXHInICYmIHNvdXJjZVtvZmZzZXQgKyAyXSAhPT0gJ1xcbicpXG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgaWYgKGNoID09PSAnXFxuJylcbiAgICAgICAgICAgIGZvbGQgKz0gJ1xcbic7XG4gICAgICAgIG9mZnNldCArPSAxO1xuICAgICAgICBjaCA9IHNvdXJjZVtvZmZzZXQgKyAxXTtcbiAgICB9XG4gICAgaWYgKCFmb2xkKVxuICAgICAgICBmb2xkID0gJyAnO1xuICAgIHJldHVybiB7IGZvbGQsIG9mZnNldCB9O1xufVxuY29uc3QgZXNjYXBlQ29kZXMgPSB7XG4gICAgJzAnOiAnXFwwJywgLy8gbnVsbCBjaGFyYWN0ZXJcbiAgICBhOiAnXFx4MDcnLCAvLyBiZWxsIGNoYXJhY3RlclxuICAgIGI6ICdcXGInLCAvLyBiYWNrc3BhY2VcbiAgICBlOiAnXFx4MWInLCAvLyBlc2NhcGUgY2hhcmFjdGVyXG4gICAgZjogJ1xcZicsIC8vIGZvcm0gZmVlZFxuICAgIG46ICdcXG4nLCAvLyBsaW5lIGZlZWRcbiAgICByOiAnXFxyJywgLy8gY2FycmlhZ2UgcmV0dXJuXG4gICAgdDogJ1xcdCcsIC8vIGhvcml6b250YWwgdGFiXG4gICAgdjogJ1xcdicsIC8vIHZlcnRpY2FsIHRhYlxuICAgIE46ICdcXHUwMDg1JywgLy8gVW5pY29kZSBuZXh0IGxpbmVcbiAgICBfOiAnXFx1MDBhMCcsIC8vIFVuaWNvZGUgbm9uLWJyZWFraW5nIHNwYWNlXG4gICAgTDogJ1xcdTIwMjgnLCAvLyBVbmljb2RlIGxpbmUgc2VwYXJhdG9yXG4gICAgUDogJ1xcdTIwMjknLCAvLyBVbmljb2RlIHBhcmFncmFwaCBzZXBhcmF0b3JcbiAgICAnICc6ICcgJyxcbiAgICAnXCInOiAnXCInLFxuICAgICcvJzogJy8nLFxuICAgICdcXFxcJzogJ1xcXFwnLFxuICAgICdcXHQnOiAnXFx0J1xufTtcbmZ1bmN0aW9uIHBhcnNlQ2hhckNvZGUoc291cmNlLCBvZmZzZXQsIGxlbmd0aCwgb25FcnJvcikge1xuICAgIGNvbnN0IGNjID0gc291cmNlLnN1YnN0cihvZmZzZXQsIGxlbmd0aCk7XG4gICAgY29uc3Qgb2sgPSBjYy5sZW5ndGggPT09IGxlbmd0aCAmJiAvXlswLTlhLWZBLUZdKyQvLnRlc3QoY2MpO1xuICAgIGNvbnN0IGNvZGUgPSBvayA/IHBhcnNlSW50KGNjLCAxNikgOiBOYU47XG4gICAgaWYgKGlzTmFOKGNvZGUpKSB7XG4gICAgICAgIGNvbnN0IHJhdyA9IHNvdXJjZS5zdWJzdHIob2Zmc2V0IC0gMiwgbGVuZ3RoICsgMik7XG4gICAgICAgIG9uRXJyb3Iob2Zmc2V0IC0gMiwgJ0JBRF9EUV9FU0NBUEUnLCBgSW52YWxpZCBlc2NhcGUgc2VxdWVuY2UgJHtyYXd9YCk7XG4gICAgICAgIHJldHVybiByYXc7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcuZnJvbUNvZGVQb2ludChjb2RlKTtcbn1cblxuZXhwb3J0IHsgcmVzb2x2ZUZsb3dTY2FsYXIgfTtcbiIsImltcG9ydCB7IGlzU2NhbGFyLCBTQ0FMQVIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9TY2FsYXIuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUJsb2NrU2NhbGFyIH0gZnJvbSAnLi9yZXNvbHZlLWJsb2NrLXNjYWxhci5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRmxvd1NjYWxhciB9IGZyb20gJy4vcmVzb2x2ZS1mbG93LXNjYWxhci5qcyc7XG5cbmZ1bmN0aW9uIGNvbXBvc2VTY2FsYXIoY3R4LCB0b2tlbiwgdGFnVG9rZW4sIG9uRXJyb3IpIHtcbiAgICBjb25zdCB7IHZhbHVlLCB0eXBlLCBjb21tZW50LCByYW5nZSB9ID0gdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcidcbiAgICAgICAgPyByZXNvbHZlQmxvY2tTY2FsYXIoY3R4LCB0b2tlbiwgb25FcnJvcilcbiAgICAgICAgOiByZXNvbHZlRmxvd1NjYWxhcih0b2tlbiwgY3R4Lm9wdGlvbnMuc3RyaWN0LCBvbkVycm9yKTtcbiAgICBjb25zdCB0YWdOYW1lID0gdGFnVG9rZW5cbiAgICAgICAgPyBjdHguZGlyZWN0aXZlcy50YWdOYW1lKHRhZ1Rva2VuLnNvdXJjZSwgbXNnID0+IG9uRXJyb3IodGFnVG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2cpKVxuICAgICAgICA6IG51bGw7XG4gICAgbGV0IHRhZztcbiAgICBpZiAoY3R4Lm9wdGlvbnMuc3RyaW5nS2V5cyAmJiBjdHguYXRLZXkpIHtcbiAgICAgICAgdGFnID0gY3R4LnNjaGVtYVtTQ0FMQVJdO1xuICAgIH1cbiAgICBlbHNlIGlmICh0YWdOYW1lKVxuICAgICAgICB0YWcgPSBmaW5kU2NhbGFyVGFnQnlOYW1lKGN0eC5zY2hlbWEsIHZhbHVlLCB0YWdOYW1lLCB0YWdUb2tlbiwgb25FcnJvcik7XG4gICAgZWxzZSBpZiAodG9rZW4udHlwZSA9PT0gJ3NjYWxhcicpXG4gICAgICAgIHRhZyA9IGZpbmRTY2FsYXJUYWdCeVRlc3QoY3R4LCB2YWx1ZSwgdG9rZW4sIG9uRXJyb3IpO1xuICAgIGVsc2VcbiAgICAgICAgdGFnID0gY3R4LnNjaGVtYVtTQ0FMQVJdO1xuICAgIGxldCBzY2FsYXI7XG4gICAgdHJ5IHtcbiAgICAgICAgY29uc3QgcmVzID0gdGFnLnJlc29sdmUodmFsdWUsIG1zZyA9PiBvbkVycm9yKHRhZ1Rva2VuID8/IHRva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnKSwgY3R4Lm9wdGlvbnMpO1xuICAgICAgICBzY2FsYXIgPSBpc1NjYWxhcihyZXMpID8gcmVzIDogbmV3IFNjYWxhcihyZXMpO1xuICAgIH1cbiAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc3QgbXNnID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiBTdHJpbmcoZXJyb3IpO1xuICAgICAgICBvbkVycm9yKHRhZ1Rva2VuID8/IHRva2VuLCAnVEFHX1JFU09MVkVfRkFJTEVEJywgbXNnKTtcbiAgICAgICAgc2NhbGFyID0gbmV3IFNjYWxhcih2YWx1ZSk7XG4gICAgfVxuICAgIHNjYWxhci5yYW5nZSA9IHJhbmdlO1xuICAgIHNjYWxhci5zb3VyY2UgPSB2YWx1ZTtcbiAgICBpZiAodHlwZSlcbiAgICAgICAgc2NhbGFyLnR5cGUgPSB0eXBlO1xuICAgIGlmICh0YWdOYW1lKVxuICAgICAgICBzY2FsYXIudGFnID0gdGFnTmFtZTtcbiAgICBpZiAodGFnLmZvcm1hdClcbiAgICAgICAgc2NhbGFyLmZvcm1hdCA9IHRhZy5mb3JtYXQ7XG4gICAgaWYgKGNvbW1lbnQpXG4gICAgICAgIHNjYWxhci5jb21tZW50ID0gY29tbWVudDtcbiAgICByZXR1cm4gc2NhbGFyO1xufVxuZnVuY3Rpb24gZmluZFNjYWxhclRhZ0J5TmFtZShzY2hlbWEsIHZhbHVlLCB0YWdOYW1lLCB0YWdUb2tlbiwgb25FcnJvcikge1xuICAgIGlmICh0YWdOYW1lID09PSAnIScpXG4gICAgICAgIHJldHVybiBzY2hlbWFbU0NBTEFSXTsgLy8gbm9uLXNwZWNpZmljIHRhZ1xuICAgIGNvbnN0IG1hdGNoV2l0aFRlc3QgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHRhZyBvZiBzY2hlbWEudGFncykge1xuICAgICAgICBpZiAoIXRhZy5jb2xsZWN0aW9uICYmIHRhZy50YWcgPT09IHRhZ05hbWUpIHtcbiAgICAgICAgICAgIGlmICh0YWcuZGVmYXVsdCAmJiB0YWcudGVzdClcbiAgICAgICAgICAgICAgICBtYXRjaFdpdGhUZXN0LnB1c2godGFnKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAoY29uc3QgdGFnIG9mIG1hdGNoV2l0aFRlc3QpXG4gICAgICAgIGlmICh0YWcudGVzdD8udGVzdCh2YWx1ZSkpXG4gICAgICAgICAgICByZXR1cm4gdGFnO1xuICAgIGNvbnN0IGt0ID0gc2NoZW1hLmtub3duVGFnc1t0YWdOYW1lXTtcbiAgICBpZiAoa3QgJiYgIWt0LmNvbGxlY3Rpb24pIHtcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgdGhlIGtub3duIHRhZyBpcyBhdmFpbGFibGUgZm9yIHN0cmluZ2lmeWluZyxcbiAgICAgICAgLy8gYnV0IGRvZXMgbm90IGdldCB1c2VkIGJ5IGRlZmF1bHQuXG4gICAgICAgIHNjaGVtYS50YWdzLnB1c2goT2JqZWN0LmFzc2lnbih7fSwga3QsIHsgZGVmYXVsdDogZmFsc2UsIHRlc3Q6IHVuZGVmaW5lZCB9KSk7XG4gICAgICAgIHJldHVybiBrdDtcbiAgICB9XG4gICAgb25FcnJvcih0YWdUb2tlbiwgJ1RBR19SRVNPTFZFX0ZBSUxFRCcsIGBVbnJlc29sdmVkIHRhZzogJHt0YWdOYW1lfWAsIHRhZ05hbWUgIT09ICd0YWc6eWFtbC5vcmcsMjAwMjpzdHInKTtcbiAgICByZXR1cm4gc2NoZW1hW1NDQUxBUl07XG59XG5mdW5jdGlvbiBmaW5kU2NhbGFyVGFnQnlUZXN0KHsgYXRLZXksIGRpcmVjdGl2ZXMsIHNjaGVtYSB9LCB2YWx1ZSwgdG9rZW4sIG9uRXJyb3IpIHtcbiAgICBjb25zdCB0YWcgPSBzY2hlbWEudGFncy5maW5kKHRhZyA9PiAodGFnLmRlZmF1bHQgPT09IHRydWUgfHwgKGF0S2V5ICYmIHRhZy5kZWZhdWx0ID09PSAna2V5JykpICYmXG4gICAgICAgIHRhZy50ZXN0Py50ZXN0KHZhbHVlKSkgfHwgc2NoZW1hW1NDQUxBUl07XG4gICAgaWYgKHNjaGVtYS5jb21wYXQpIHtcbiAgICAgICAgY29uc3QgY29tcGF0ID0gc2NoZW1hLmNvbXBhdC5maW5kKHRhZyA9PiB0YWcuZGVmYXVsdCAmJiB0YWcudGVzdD8udGVzdCh2YWx1ZSkpID8/XG4gICAgICAgICAgICBzY2hlbWFbU0NBTEFSXTtcbiAgICAgICAgaWYgKHRhZy50YWcgIT09IGNvbXBhdC50YWcpIHtcbiAgICAgICAgICAgIGNvbnN0IHRzID0gZGlyZWN0aXZlcy50YWdTdHJpbmcodGFnLnRhZyk7XG4gICAgICAgICAgICBjb25zdCBjcyA9IGRpcmVjdGl2ZXMudGFnU3RyaW5nKGNvbXBhdC50YWcpO1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYFZhbHVlIG1heSBiZSBwYXJzZWQgYXMgZWl0aGVyICR7dHN9IG9yICR7Y3N9YDtcbiAgICAgICAgICAgIG9uRXJyb3IodG9rZW4sICdUQUdfUkVTT0xWRV9GQUlMRUQnLCBtc2csIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YWc7XG59XG5cbmV4cG9ydCB7IGNvbXBvc2VTY2FsYXIgfTtcbiIsImltcG9ydCB7IEFsaWFzIH0gZnJvbSAnLi4vbm9kZXMvQWxpYXMuanMnO1xuaW1wb3J0IHsgaXNTY2FsYXIgfSBmcm9tICcuLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBjb21wb3NlQ29sbGVjdGlvbiB9IGZyb20gJy4vY29tcG9zZS1jb2xsZWN0aW9uLmpzJztcbmltcG9ydCB7IGNvbXBvc2VTY2FsYXIgfSBmcm9tICcuL2NvbXBvc2Utc2NhbGFyLmpzJztcbmltcG9ydCB7IHJlc29sdmVFbmQgfSBmcm9tICcuL3Jlc29sdmUtZW5kLmpzJztcbmltcG9ydCB7IGVtcHR5U2NhbGFyUG9zaXRpb24gfSBmcm9tICcuL3V0aWwtZW1wdHktc2NhbGFyLXBvc2l0aW9uLmpzJztcblxuY29uc3QgQ04gPSB7IGNvbXBvc2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH07XG5mdW5jdGlvbiBjb21wb3NlTm9kZShjdHgsIHRva2VuLCBwcm9wcywgb25FcnJvcikge1xuICAgIGNvbnN0IGF0S2V5ID0gY3R4LmF0S2V5O1xuICAgIGNvbnN0IHsgc3BhY2VCZWZvcmUsIGNvbW1lbnQsIGFuY2hvciwgdGFnIH0gPSBwcm9wcztcbiAgICBsZXQgbm9kZTtcbiAgICBsZXQgaXNTcmNUb2tlbiA9IHRydWU7XG4gICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgICAgIG5vZGUgPSBjb21wb3NlQWxpYXMoY3R4LCB0b2tlbiwgb25FcnJvcik7XG4gICAgICAgICAgICBpZiAoYW5jaG9yIHx8IHRhZylcbiAgICAgICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnQUxJQVNfUFJPUFMnLCAnQW4gYWxpYXMgbm9kZSBtdXN0IG5vdCBzcGVjaWZ5IGFueSBwcm9wZXJ0aWVzJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhcic6XG4gICAgICAgICAgICBub2RlID0gY29tcG9zZVNjYWxhcihjdHgsIHRva2VuLCB0YWcsIG9uRXJyb3IpO1xuICAgICAgICAgICAgaWYgKGFuY2hvcilcbiAgICAgICAgICAgICAgICBub2RlLmFuY2hvciA9IGFuY2hvci5zb3VyY2Uuc3Vic3RyaW5nKDEpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2Jsb2NrLW1hcCc6XG4gICAgICAgIGNhc2UgJ2Jsb2NrLXNlcSc6XG4gICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6XG4gICAgICAgICAgICBub2RlID0gY29tcG9zZUNvbGxlY3Rpb24oQ04sIGN0eCwgdG9rZW4sIHByb3BzLCBvbkVycm9yKTtcbiAgICAgICAgICAgIGlmIChhbmNob3IpXG4gICAgICAgICAgICAgICAgbm9kZS5hbmNob3IgPSBhbmNob3Iuc291cmNlLnN1YnN0cmluZygxKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gdG9rZW4udHlwZSA9PT0gJ2Vycm9yJ1xuICAgICAgICAgICAgICAgID8gdG9rZW4ubWVzc2FnZVxuICAgICAgICAgICAgICAgIDogYFVuc3VwcG9ydGVkIHRva2VuICh0eXBlOiAke3Rva2VuLnR5cGV9KWA7XG4gICAgICAgICAgICBvbkVycm9yKHRva2VuLCAnVU5FWFBFQ1RFRF9UT0tFTicsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgbm9kZSA9IGNvbXBvc2VFbXB0eU5vZGUoY3R4LCB0b2tlbi5vZmZzZXQsIHVuZGVmaW5lZCwgbnVsbCwgcHJvcHMsIG9uRXJyb3IpO1xuICAgICAgICAgICAgaXNTcmNUb2tlbiA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChhbmNob3IgJiYgbm9kZS5hbmNob3IgPT09ICcnKVxuICAgICAgICBvbkVycm9yKGFuY2hvciwgJ0JBRF9BTElBUycsICdBbmNob3IgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZycpO1xuICAgIGlmIChhdEtleSAmJlxuICAgICAgICBjdHgub3B0aW9ucy5zdHJpbmdLZXlzICYmXG4gICAgICAgICghaXNTY2FsYXIobm9kZSkgfHxcbiAgICAgICAgICAgIHR5cGVvZiBub2RlLnZhbHVlICE9PSAnc3RyaW5nJyB8fFxuICAgICAgICAgICAgKG5vZGUudGFnICYmIG5vZGUudGFnICE9PSAndGFnOnlhbWwub3JnLDIwMDI6c3RyJykpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9ICdXaXRoIHN0cmluZ0tleXMsIGFsbCBrZXlzIG11c3QgYmUgc3RyaW5ncyc7XG4gICAgICAgIG9uRXJyb3IodGFnID8/IHRva2VuLCAnTk9OX1NUUklOR19LRVknLCBtc2cpO1xuICAgIH1cbiAgICBpZiAoc3BhY2VCZWZvcmUpXG4gICAgICAgIG5vZGUuc3BhY2VCZWZvcmUgPSB0cnVlO1xuICAgIGlmIChjb21tZW50KSB7XG4gICAgICAgIGlmICh0b2tlbi50eXBlID09PSAnc2NhbGFyJyAmJiB0b2tlbi5zb3VyY2UgPT09ICcnKVxuICAgICAgICAgICAgbm9kZS5jb21tZW50ID0gY29tbWVudDtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgbm9kZS5jb21tZW50QmVmb3JlID0gY29tbWVudDtcbiAgICB9XG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUeXBlIGNoZWNraW5nIG1pc3NlcyBtZWFuaW5nIG9mIGlzU3JjVG9rZW5cbiAgICBpZiAoY3R4Lm9wdGlvbnMua2VlcFNvdXJjZVRva2VucyAmJiBpc1NyY1Rva2VuKVxuICAgICAgICBub2RlLnNyY1Rva2VuID0gdG9rZW47XG4gICAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBjb21wb3NlRW1wdHlOb2RlKGN0eCwgb2Zmc2V0LCBiZWZvcmUsIHBvcywgeyBzcGFjZUJlZm9yZSwgY29tbWVudCwgYW5jaG9yLCB0YWcsIGVuZCB9LCBvbkVycm9yKSB7XG4gICAgY29uc3QgdG9rZW4gPSB7XG4gICAgICAgIHR5cGU6ICdzY2FsYXInLFxuICAgICAgICBvZmZzZXQ6IGVtcHR5U2NhbGFyUG9zaXRpb24ob2Zmc2V0LCBiZWZvcmUsIHBvcyksXG4gICAgICAgIGluZGVudDogLTEsXG4gICAgICAgIHNvdXJjZTogJydcbiAgICB9O1xuICAgIGNvbnN0IG5vZGUgPSBjb21wb3NlU2NhbGFyKGN0eCwgdG9rZW4sIHRhZywgb25FcnJvcik7XG4gICAgaWYgKGFuY2hvcikge1xuICAgICAgICBub2RlLmFuY2hvciA9IGFuY2hvci5zb3VyY2Uuc3Vic3RyaW5nKDEpO1xuICAgICAgICBpZiAobm9kZS5hbmNob3IgPT09ICcnKVxuICAgICAgICAgICAgb25FcnJvcihhbmNob3IsICdCQURfQUxJQVMnLCAnQW5jaG9yIGNhbm5vdCBiZSBhbiBlbXB0eSBzdHJpbmcnKTtcbiAgICB9XG4gICAgaWYgKHNwYWNlQmVmb3JlKVxuICAgICAgICBub2RlLnNwYWNlQmVmb3JlID0gdHJ1ZTtcbiAgICBpZiAoY29tbWVudCkge1xuICAgICAgICBub2RlLmNvbW1lbnQgPSBjb21tZW50O1xuICAgICAgICBub2RlLnJhbmdlWzJdID0gZW5kO1xuICAgIH1cbiAgICByZXR1cm4gbm9kZTtcbn1cbmZ1bmN0aW9uIGNvbXBvc2VBbGlhcyh7IG9wdGlvbnMgfSwgeyBvZmZzZXQsIHNvdXJjZSwgZW5kIH0sIG9uRXJyb3IpIHtcbiAgICBjb25zdCBhbGlhcyA9IG5ldyBBbGlhcyhzb3VyY2Uuc3Vic3RyaW5nKDEpKTtcbiAgICBpZiAoYWxpYXMuc291cmNlID09PSAnJylcbiAgICAgICAgb25FcnJvcihvZmZzZXQsICdCQURfQUxJQVMnLCAnQWxpYXMgY2Fubm90IGJlIGFuIGVtcHR5IHN0cmluZycpO1xuICAgIGlmIChhbGlhcy5zb3VyY2UuZW5kc1dpdGgoJzonKSlcbiAgICAgICAgb25FcnJvcihvZmZzZXQgKyBzb3VyY2UubGVuZ3RoIC0gMSwgJ0JBRF9BTElBUycsICdBbGlhcyBlbmRpbmcgaW4gOiBpcyBhbWJpZ3VvdXMnLCB0cnVlKTtcbiAgICBjb25zdCB2YWx1ZUVuZCA9IG9mZnNldCArIHNvdXJjZS5sZW5ndGg7XG4gICAgY29uc3QgcmUgPSByZXNvbHZlRW5kKGVuZCwgdmFsdWVFbmQsIG9wdGlvbnMuc3RyaWN0LCBvbkVycm9yKTtcbiAgICBhbGlhcy5yYW5nZSA9IFtvZmZzZXQsIHZhbHVlRW5kLCByZS5vZmZzZXRdO1xuICAgIGlmIChyZS5jb21tZW50KVxuICAgICAgICBhbGlhcy5jb21tZW50ID0gcmUuY29tbWVudDtcbiAgICByZXR1cm4gYWxpYXM7XG59XG5cbmV4cG9ydCB7IGNvbXBvc2VFbXB0eU5vZGUsIGNvbXBvc2VOb2RlIH07XG4iLCJmdW5jdGlvbiBlbXB0eVNjYWxhclBvc2l0aW9uKG9mZnNldCwgYmVmb3JlLCBwb3MpIHtcbiAgICBpZiAoYmVmb3JlKSB7XG4gICAgICAgIGlmIChwb3MgPT09IG51bGwpXG4gICAgICAgICAgICBwb3MgPSBiZWZvcmUubGVuZ3RoO1xuICAgICAgICBmb3IgKGxldCBpID0gcG9zIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgICAgIGxldCBzdCA9IGJlZm9yZVtpXTtcbiAgICAgICAgICAgIHN3aXRjaCAoc3QudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0IC09IHN0LnNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGVjaG5pY2FsbHksIGFuIGVtcHR5IHNjYWxhciBpcyBpbW1lZGlhdGVseSBhZnRlciB0aGUgbGFzdCBub24tZW1wdHlcbiAgICAgICAgICAgIC8vIG5vZGUsIGJ1dCBpdCdzIG1vcmUgdXNlZnVsIHRvIHBsYWNlIGl0IGFmdGVyIGFueSB3aGl0ZXNwYWNlLlxuICAgICAgICAgICAgc3QgPSBiZWZvcmVbKytpXTtcbiAgICAgICAgICAgIHdoaWxlIChzdD8udHlwZSA9PT0gJ3NwYWNlJykge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSBzdC5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgIHN0ID0gYmVmb3JlWysraV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2Zmc2V0O1xufVxuXG5leHBvcnQgeyBlbXB0eVNjYWxhclBvc2l0aW9uIH07XG4iLCJpbXBvcnQgeyBEaXJlY3RpdmVzIH0gZnJvbSAnLi4vZG9jL2RpcmVjdGl2ZXMuanMnO1xuaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICcuLi9kb2MvRG9jdW1lbnQuanMnO1xuaW1wb3J0IHsgWUFNTFdhcm5pbmcsIFlBTUxQYXJzZUVycm9yIH0gZnJvbSAnLi4vZXJyb3JzLmpzJztcbmltcG9ydCB7IGlzQ29sbGVjdGlvbiwgaXNQYWlyIH0gZnJvbSAnLi4vbm9kZXMvaWRlbnRpdHkuanMnO1xuaW1wb3J0IHsgY29tcG9zZURvYyB9IGZyb20gJy4vY29tcG9zZS1kb2MuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZCB9IGZyb20gJy4vcmVzb2x2ZS1lbmQuanMnO1xuXG5mdW5jdGlvbiBnZXRFcnJvclBvcyhzcmMpIHtcbiAgICBpZiAodHlwZW9mIHNyYyA9PT0gJ251bWJlcicpXG4gICAgICAgIHJldHVybiBbc3JjLCBzcmMgKyAxXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShzcmMpKVxuICAgICAgICByZXR1cm4gc3JjLmxlbmd0aCA9PT0gMiA/IHNyYyA6IFtzcmNbMF0sIHNyY1sxXV07XG4gICAgY29uc3QgeyBvZmZzZXQsIHNvdXJjZSB9ID0gc3JjO1xuICAgIHJldHVybiBbb2Zmc2V0LCBvZmZzZXQgKyAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycgPyBzb3VyY2UubGVuZ3RoIDogMSldO1xufVxuZnVuY3Rpb24gcGFyc2VQcmVsdWRlKHByZWx1ZGUpIHtcbiAgICBsZXQgY29tbWVudCA9ICcnO1xuICAgIGxldCBhdENvbW1lbnQgPSBmYWxzZTtcbiAgICBsZXQgYWZ0ZXJFbXB0eUxpbmUgPSBmYWxzZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZWx1ZGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3Qgc291cmNlID0gcHJlbHVkZVtpXTtcbiAgICAgICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgICAgICAgIGNhc2UgJyMnOlxuICAgICAgICAgICAgICAgIGNvbW1lbnQgKz1cbiAgICAgICAgICAgICAgICAgICAgKGNvbW1lbnQgPT09ICcnID8gJycgOiBhZnRlckVtcHR5TGluZSA/ICdcXG5cXG4nIDogJ1xcbicpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIChzb3VyY2Uuc3Vic3RyaW5nKDEpIHx8ICcgJyk7XG4gICAgICAgICAgICAgICAgYXRDb21tZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhZnRlckVtcHR5TGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnJSc6XG4gICAgICAgICAgICAgICAgaWYgKHByZWx1ZGVbaSArIDFdPy5bMF0gIT09ICcjJylcbiAgICAgICAgICAgICAgICAgICAgaSArPSAxO1xuICAgICAgICAgICAgICAgIGF0Q29tbWVudCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBUaGlzIG1heSBiZSB3cm9uZyBhZnRlciBkb2MtZW5kLCBidXQgaW4gdGhhdCBjYXNlIGl0IGRvZXNuJ3QgbWF0dGVyXG4gICAgICAgICAgICAgICAgaWYgKCFhdENvbW1lbnQpXG4gICAgICAgICAgICAgICAgICAgIGFmdGVyRW1wdHlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBhdENvbW1lbnQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBjb21tZW50LCBhZnRlckVtcHR5TGluZSB9O1xufVxuLyoqXG4gKiBDb21wb3NlIGEgc3RyZWFtIG9mIENTVCBub2RlcyBpbnRvIGEgc3RyZWFtIG9mIFlBTUwgRG9jdW1lbnRzLlxuICpcbiAqIGBgYHRzXG4gKiBpbXBvcnQgeyBDb21wb3NlciwgUGFyc2VyIH0gZnJvbSAneWFtbCdcbiAqXG4gKiBjb25zdCBzcmM6IHN0cmluZyA9IC4uLlxuICogY29uc3QgdG9rZW5zID0gbmV3IFBhcnNlcigpLnBhcnNlKHNyYylcbiAqIGNvbnN0IGRvY3MgPSBuZXcgQ29tcG9zZXIoKS5jb21wb3NlKHRva2VucylcbiAqIGBgYFxuICovXG5jbGFzcyBDb21wb3NlciB7XG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuZG9jID0gbnVsbDtcbiAgICAgICAgdGhpcy5hdERpcmVjdGl2ZXMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wcmVsdWRlID0gW107XG4gICAgICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgICAgIHRoaXMud2FybmluZ3MgPSBbXTtcbiAgICAgICAgdGhpcy5vbkVycm9yID0gKHNvdXJjZSwgY29kZSwgbWVzc2FnZSwgd2FybmluZykgPT4ge1xuICAgICAgICAgICAgY29uc3QgcG9zID0gZ2V0RXJyb3JQb3Moc291cmNlKTtcbiAgICAgICAgICAgIGlmICh3YXJuaW5nKVxuICAgICAgICAgICAgICAgIHRoaXMud2FybmluZ3MucHVzaChuZXcgWUFNTFdhcm5pbmcocG9zLCBjb2RlLCBtZXNzYWdlKSk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChuZXcgWUFNTFBhcnNlRXJyb3IocG9zLCBjb2RlLCBtZXNzYWdlKSk7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvcHJlZmVyLW51bGxpc2gtY29hbGVzY2luZ1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZXMgPSBuZXcgRGlyZWN0aXZlcyh7IHZlcnNpb246IG9wdGlvbnMudmVyc2lvbiB8fCAnMS4yJyB9KTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB9XG4gICAgZGVjb3JhdGUoZG9jLCBhZnRlckRvYykge1xuICAgICAgICBjb25zdCB7IGNvbW1lbnQsIGFmdGVyRW1wdHlMaW5lIH0gPSBwYXJzZVByZWx1ZGUodGhpcy5wcmVsdWRlKTtcbiAgICAgICAgLy9jb25zb2xlLmxvZyh7IGRjOiBkb2MuY29tbWVudCwgcHJlbHVkZSwgY29tbWVudCB9KVxuICAgICAgICBpZiAoY29tbWVudCkge1xuICAgICAgICAgICAgY29uc3QgZGMgPSBkb2MuY29udGVudHM7XG4gICAgICAgICAgICBpZiAoYWZ0ZXJEb2MpIHtcbiAgICAgICAgICAgICAgICBkb2MuY29tbWVudCA9IGRvYy5jb21tZW50ID8gYCR7ZG9jLmNvbW1lbnR9XFxuJHtjb21tZW50fWAgOiBjb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoYWZ0ZXJFbXB0eUxpbmUgfHwgZG9jLmRpcmVjdGl2ZXMuZG9jU3RhcnQgfHwgIWRjKSB7XG4gICAgICAgICAgICAgICAgZG9jLmNvbW1lbnRCZWZvcmUgPSBjb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNDb2xsZWN0aW9uKGRjKSAmJiAhZGMuZmxvdyAmJiBkYy5pdGVtcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgbGV0IGl0ID0gZGMuaXRlbXNbMF07XG4gICAgICAgICAgICAgICAgaWYgKGlzUGFpcihpdCkpXG4gICAgICAgICAgICAgICAgICAgIGl0ID0gaXQua2V5O1xuICAgICAgICAgICAgICAgIGNvbnN0IGNiID0gaXQuY29tbWVudEJlZm9yZTtcbiAgICAgICAgICAgICAgICBpdC5jb21tZW50QmVmb3JlID0gY2IgPyBgJHtjb21tZW50fVxcbiR7Y2J9YCA6IGNvbW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYiA9IGRjLmNvbW1lbnRCZWZvcmU7XG4gICAgICAgICAgICAgICAgZGMuY29tbWVudEJlZm9yZSA9IGNiID8gYCR7Y29tbWVudH1cXG4ke2NifWAgOiBjb21tZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChhZnRlckRvYykge1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoZG9jLmVycm9ycywgdGhpcy5lcnJvcnMpO1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoZG9jLndhcm5pbmdzLCB0aGlzLndhcm5pbmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRvYy5lcnJvcnMgPSB0aGlzLmVycm9ycztcbiAgICAgICAgICAgIGRvYy53YXJuaW5ncyA9IHRoaXMud2FybmluZ3M7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wcmVsdWRlID0gW107XG4gICAgICAgIHRoaXMuZXJyb3JzID0gW107XG4gICAgICAgIHRoaXMud2FybmluZ3MgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3VycmVudCBzdHJlYW0gc3RhdHVzIGluZm9ybWF0aW9uLlxuICAgICAqXG4gICAgICogTW9zdGx5IHVzZWZ1bCBhdCB0aGUgZW5kIG9mIGlucHV0IGZvciBhbiBlbXB0eSBzdHJlYW0uXG4gICAgICovXG4gICAgc3RyZWFtSW5mbygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbW1lbnQ6IHBhcnNlUHJlbHVkZSh0aGlzLnByZWx1ZGUpLmNvbW1lbnQsXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiB0aGlzLmRpcmVjdGl2ZXMsXG4gICAgICAgICAgICBlcnJvcnM6IHRoaXMuZXJyb3JzLFxuICAgICAgICAgICAgd2FybmluZ3M6IHRoaXMud2FybmluZ3NcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ29tcG9zZSB0b2tlbnMgaW50byBkb2N1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9yY2VEb2MgLSBJZiB0aGUgc3RyZWFtIGNvbnRhaW5zIG5vIGRvY3VtZW50LCBzdGlsbCBlbWl0IGEgZmluYWwgZG9jdW1lbnQgaW5jbHVkaW5nIGFueSBjb21tZW50cyBhbmQgZGlyZWN0aXZlcyB0aGF0IHdvdWxkIGJlIGFwcGxpZWQgdG8gYSBzdWJzZXF1ZW50IGRvY3VtZW50LlxuICAgICAqIEBwYXJhbSBlbmRPZmZzZXQgLSBTaG91bGQgYmUgc2V0IGlmIGBmb3JjZURvY2AgaXMgYWxzbyBzZXQsIHRvIHNldCB0aGUgZG9jdW1lbnQgcmFuZ2UgZW5kIGFuZCB0byBpbmRpY2F0ZSBlcnJvcnMgY29ycmVjdGx5LlxuICAgICAqL1xuICAgICpjb21wb3NlKHRva2VucywgZm9yY2VEb2MgPSBmYWxzZSwgZW5kT2Zmc2V0ID0gLTEpIHtcbiAgICAgICAgZm9yIChjb25zdCB0b2tlbiBvZiB0b2tlbnMpXG4gICAgICAgICAgICB5aWVsZCogdGhpcy5uZXh0KHRva2VuKTtcbiAgICAgICAgeWllbGQqIHRoaXMuZW5kKGZvcmNlRG9jLCBlbmRPZmZzZXQpO1xuICAgIH1cbiAgICAvKiogQWR2YW5jZSB0aGUgY29tcG9zZXIgYnkgb25lIENTVCB0b2tlbi4gKi9cbiAgICAqbmV4dCh0b2tlbikge1xuICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RpcmVjdGl2ZSc6XG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzLmFkZCh0b2tlbi5zb3VyY2UsIChvZmZzZXQsIG1lc3NhZ2UsIHdhcm5pbmcpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9zID0gZ2V0RXJyb3JQb3ModG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICBwb3NbMF0gKz0gb2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IocG9zLCAnQkFEX0RJUkVDVElWRScsIG1lc3NhZ2UsIHdhcm5pbmcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMucHJlbHVkZS5wdXNoKHRva2VuLnNvdXJjZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5hdERpcmVjdGl2ZXMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZG9jdW1lbnQnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZG9jID0gY29tcG9zZURvYyh0aGlzLm9wdGlvbnMsIHRoaXMuZGlyZWN0aXZlcywgdG9rZW4sIHRoaXMub25FcnJvcik7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXREaXJlY3RpdmVzICYmICFkb2MuZGlyZWN0aXZlcy5kb2NTdGFydClcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKHRva2VuLCAnTUlTU0lOR19DSEFSJywgJ01pc3NpbmcgZGlyZWN0aXZlcy1lbmQvZG9jLXN0YXJ0IGluZGljYXRvciBsaW5lJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNvcmF0ZShkb2MsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5kb2MpXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuZG9jO1xuICAgICAgICAgICAgICAgIHRoaXMuZG9jID0gZG9jO1xuICAgICAgICAgICAgICAgIHRoaXMuYXREaXJlY3RpdmVzID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdieXRlLW9yZGVyLW1hcmsnOlxuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICB0aGlzLnByZWx1ZGUucHVzaCh0b2tlbi5zb3VyY2UpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZXJyb3InOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbXNnID0gdG9rZW4uc291cmNlXG4gICAgICAgICAgICAgICAgICAgID8gYCR7dG9rZW4ubWVzc2FnZX06ICR7SlNPTi5zdHJpbmdpZnkodG9rZW4uc291cmNlKX1gXG4gICAgICAgICAgICAgICAgICAgIDogdG9rZW4ubWVzc2FnZTtcbiAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IG5ldyBZQU1MUGFyc2VFcnJvcihnZXRFcnJvclBvcyh0b2tlbiksICdVTkVYUEVDVEVEX1RPS0VOJywgbXNnKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hdERpcmVjdGl2ZXMgfHwgIXRoaXMuZG9jKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKGVycm9yKTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jLmVycm9ycy5wdXNoKGVycm9yKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2RvYy1lbmQnOiB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRvYykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSAnVW5leHBlY3RlZCBkb2MtZW5kIHdpdGhvdXQgcHJlY2VkaW5nIGRvY3VtZW50JztcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcnMucHVzaChuZXcgWUFNTFBhcnNlRXJyb3IoZ2V0RXJyb3JQb3ModG9rZW4pLCAnVU5FWFBFQ1RFRF9UT0tFTicsIG1zZykpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kb2MuZGlyZWN0aXZlcy5kb2NFbmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IHJlc29sdmVFbmQodG9rZW4uZW5kLCB0b2tlbi5vZmZzZXQgKyB0b2tlbi5zb3VyY2UubGVuZ3RoLCB0aGlzLmRvYy5vcHRpb25zLnN0cmljdCwgdGhpcy5vbkVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29yYXRlKHRoaXMuZG9jLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoZW5kLmNvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGMgPSB0aGlzLmRvYy5jb21tZW50O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvYy5jb21tZW50ID0gZGMgPyBgJHtkY31cXG4ke2VuZC5jb21tZW50fWAgOiBlbmQuY29tbWVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5kb2MucmFuZ2VbMl0gPSBlbmQub2Zmc2V0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aGlzLmVycm9ycy5wdXNoKG5ldyBZQU1MUGFyc2VFcnJvcihnZXRFcnJvclBvcyh0b2tlbiksICdVTkVYUEVDVEVEX1RPS0VOJywgYFVuc3VwcG9ydGVkIHRva2VuICR7dG9rZW4udHlwZX1gKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbCBhdCBlbmQgb2YgaW5wdXQgdG8geWllbGQgYW55IHJlbWFpbmluZyBkb2N1bWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBmb3JjZURvYyAtIElmIHRoZSBzdHJlYW0gY29udGFpbnMgbm8gZG9jdW1lbnQsIHN0aWxsIGVtaXQgYSBmaW5hbCBkb2N1bWVudCBpbmNsdWRpbmcgYW55IGNvbW1lbnRzIGFuZCBkaXJlY3RpdmVzIHRoYXQgd291bGQgYmUgYXBwbGllZCB0byBhIHN1YnNlcXVlbnQgZG9jdW1lbnQuXG4gICAgICogQHBhcmFtIGVuZE9mZnNldCAtIFNob3VsZCBiZSBzZXQgaWYgYGZvcmNlRG9jYCBpcyBhbHNvIHNldCwgdG8gc2V0IHRoZSBkb2N1bWVudCByYW5nZSBlbmQgYW5kIHRvIGluZGljYXRlIGVycm9ycyBjb3JyZWN0bHkuXG4gICAgICovXG4gICAgKmVuZChmb3JjZURvYyA9IGZhbHNlLCBlbmRPZmZzZXQgPSAtMSkge1xuICAgICAgICBpZiAodGhpcy5kb2MpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUodGhpcy5kb2MsIHRydWUpO1xuICAgICAgICAgICAgeWllbGQgdGhpcy5kb2M7XG4gICAgICAgICAgICB0aGlzLmRvYyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoZm9yY2VEb2MpIHtcbiAgICAgICAgICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHsgX2RpcmVjdGl2ZXM6IHRoaXMuZGlyZWN0aXZlcyB9LCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgY29uc3QgZG9jID0gbmV3IERvY3VtZW50KHVuZGVmaW5lZCwgb3B0cyk7XG4gICAgICAgICAgICBpZiAodGhpcy5hdERpcmVjdGl2ZXMpXG4gICAgICAgICAgICAgICAgdGhpcy5vbkVycm9yKGVuZE9mZnNldCwgJ01JU1NJTkdfQ0hBUicsICdNaXNzaW5nIGRpcmVjdGl2ZXMtZW5kIGluZGljYXRvciBsaW5lJyk7XG4gICAgICAgICAgICBkb2MucmFuZ2UgPSBbMCwgZW5kT2Zmc2V0LCBlbmRPZmZzZXRdO1xuICAgICAgICAgICAgdGhpcy5kZWNvcmF0ZShkb2MsIGZhbHNlKTtcbiAgICAgICAgICAgIHlpZWxkIGRvYztcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgQ29tcG9zZXIgfTtcbiIsImltcG9ydCB7IERvY3VtZW50IH0gZnJvbSAnLi4vZG9jL0RvY3VtZW50LmpzJztcbmltcG9ydCB7IGNvbXBvc2VOb2RlLCBjb21wb3NlRW1wdHlOb2RlIH0gZnJvbSAnLi9jb21wb3NlLW5vZGUuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZUVuZCB9IGZyb20gJy4vcmVzb2x2ZS1lbmQuanMnO1xuaW1wb3J0IHsgcmVzb2x2ZVByb3BzIH0gZnJvbSAnLi9yZXNvbHZlLXByb3BzLmpzJztcblxuZnVuY3Rpb24gY29tcG9zZURvYyhvcHRpb25zLCBkaXJlY3RpdmVzLCB7IG9mZnNldCwgc3RhcnQsIHZhbHVlLCBlbmQgfSwgb25FcnJvcikge1xuICAgIGNvbnN0IG9wdHMgPSBPYmplY3QuYXNzaWduKHsgX2RpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMgfSwgb3B0aW9ucyk7XG4gICAgY29uc3QgZG9jID0gbmV3IERvY3VtZW50KHVuZGVmaW5lZCwgb3B0cyk7XG4gICAgY29uc3QgY3R4ID0ge1xuICAgICAgICBhdEtleTogZmFsc2UsXG4gICAgICAgIGF0Um9vdDogdHJ1ZSxcbiAgICAgICAgZGlyZWN0aXZlczogZG9jLmRpcmVjdGl2ZXMsXG4gICAgICAgIG9wdGlvbnM6IGRvYy5vcHRpb25zLFxuICAgICAgICBzY2hlbWE6IGRvYy5zY2hlbWFcbiAgICB9O1xuICAgIGNvbnN0IHByb3BzID0gcmVzb2x2ZVByb3BzKHN0YXJ0LCB7XG4gICAgICAgIGluZGljYXRvcjogJ2RvYy1zdGFydCcsXG4gICAgICAgIG5leHQ6IHZhbHVlID8/IGVuZD8uWzBdLFxuICAgICAgICBvZmZzZXQsXG4gICAgICAgIG9uRXJyb3IsXG4gICAgICAgIHBhcmVudEluZGVudDogMCxcbiAgICAgICAgc3RhcnRPbk5ld2xpbmU6IHRydWVcbiAgICB9KTtcbiAgICBpZiAocHJvcHMuZm91bmQpIHtcbiAgICAgICAgZG9jLmRpcmVjdGl2ZXMuZG9jU3RhcnQgPSB0cnVlO1xuICAgICAgICBpZiAodmFsdWUgJiZcbiAgICAgICAgICAgICh2YWx1ZS50eXBlID09PSAnYmxvY2stbWFwJyB8fCB2YWx1ZS50eXBlID09PSAnYmxvY2stc2VxJykgJiZcbiAgICAgICAgICAgICFwcm9wcy5oYXNOZXdsaW5lKVxuICAgICAgICAgICAgb25FcnJvcihwcm9wcy5lbmQsICdNSVNTSU5HX0NIQVInLCAnQmxvY2sgY29sbGVjdGlvbiBjYW5ub3Qgc3RhcnQgb24gc2FtZSBsaW5lIHdpdGggZGlyZWN0aXZlcy1lbmQgbWFya2VyJyk7XG4gICAgfVxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSWYgQ29udGVudHMgaXMgc2V0LCBsZXQncyB0cnVzdCB0aGUgdXNlclxuICAgIGRvYy5jb250ZW50cyA9IHZhbHVlXG4gICAgICAgID8gY29tcG9zZU5vZGUoY3R4LCB2YWx1ZSwgcHJvcHMsIG9uRXJyb3IpXG4gICAgICAgIDogY29tcG9zZUVtcHR5Tm9kZShjdHgsIHByb3BzLmVuZCwgc3RhcnQsIG51bGwsIHByb3BzLCBvbkVycm9yKTtcbiAgICBjb25zdCBjb250ZW50RW5kID0gZG9jLmNvbnRlbnRzLnJhbmdlWzJdO1xuICAgIGNvbnN0IHJlID0gcmVzb2x2ZUVuZChlbmQsIGNvbnRlbnRFbmQsIGZhbHNlLCBvbkVycm9yKTtcbiAgICBpZiAocmUuY29tbWVudClcbiAgICAgICAgZG9jLmNvbW1lbnQgPSByZS5jb21tZW50O1xuICAgIGRvYy5yYW5nZSA9IFtvZmZzZXQsIGNvbnRlbnRFbmQsIHJlLm9mZnNldF07XG4gICAgcmV0dXJuIGRvYztcbn1cblxuZXhwb3J0IHsgY29tcG9zZURvYyB9O1xuIiwiaW1wb3J0IHsgcmVzb2x2ZUJsb2NrU2NhbGFyIH0gZnJvbSAnLi4vY29tcG9zZS9yZXNvbHZlLWJsb2NrLXNjYWxhci5qcyc7XG5pbXBvcnQgeyByZXNvbHZlRmxvd1NjYWxhciB9IGZyb20gJy4uL2NvbXBvc2UvcmVzb2x2ZS1mbG93LXNjYWxhci5qcyc7XG5pbXBvcnQgeyBZQU1MUGFyc2VFcnJvciB9IGZyb20gJy4uL2Vycm9ycy5qcyc7XG5pbXBvcnQgeyBzdHJpbmdpZnlTdHJpbmcgfSBmcm9tICcuLi9zdHJpbmdpZnkvc3RyaW5naWZ5U3RyaW5nLmpzJztcblxuZnVuY3Rpb24gcmVzb2x2ZUFzU2NhbGFyKHRva2VuLCBzdHJpY3QgPSB0cnVlLCBvbkVycm9yKSB7XG4gICAgaWYgKHRva2VuKSB7XG4gICAgICAgIGNvbnN0IF9vbkVycm9yID0gKHBvcywgY29kZSwgbWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdHlwZW9mIHBvcyA9PT0gJ251bWJlcicgPyBwb3MgOiBBcnJheS5pc0FycmF5KHBvcykgPyBwb3NbMF0gOiBwb3Mub2Zmc2V0O1xuICAgICAgICAgICAgaWYgKG9uRXJyb3IpXG4gICAgICAgICAgICAgICAgb25FcnJvcihvZmZzZXQsIGNvZGUsIG1lc3NhZ2UpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBZQU1MUGFyc2VFcnJvcihbb2Zmc2V0LCBvZmZzZXQgKyAxXSwgY29kZSwgbWVzc2FnZSk7XG4gICAgICAgIH07XG4gICAgICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUZsb3dTY2FsYXIodG9rZW4sIHN0cmljdCwgX29uRXJyb3IpO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzb2x2ZUJsb2NrU2NhbGFyKHsgb3B0aW9uczogeyBzdHJpY3QgfSB9LCB0b2tlbiwgX29uRXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgc2NhbGFyIHRva2VuIHdpdGggYHZhbHVlYFxuICpcbiAqIFZhbHVlcyB0aGF0IHJlcHJlc2VudCBhbiBhY3R1YWwgc3RyaW5nIGJ1dCBtYXkgYmUgcGFyc2VkIGFzIGEgZGlmZmVyZW50IHR5cGUgc2hvdWxkIHVzZSBhIGB0eXBlYCBvdGhlciB0aGFuIGAnUExBSU4nYCxcbiAqIGFzIHRoaXMgZnVuY3Rpb24gZG9lcyBub3Qgc3VwcG9ydCBhbnkgc2NoZW1hIG9wZXJhdGlvbnMgYW5kIHdvbid0IGNoZWNrIGZvciBzdWNoIGNvbmZsaWN0cy5cbiAqXG4gKiBAcGFyYW0gdmFsdWUgVGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgdmFsdWUsIHdoaWNoIHdpbGwgaGF2ZSBpdHMgY29udGVudCBwcm9wZXJseSBpbmRlbnRlZC5cbiAqIEBwYXJhbSBjb250ZXh0LmVuZCBDb21tZW50cyBhbmQgd2hpdGVzcGFjZSBhZnRlciB0aGUgZW5kIG9mIHRoZSB2YWx1ZSwgb3IgYWZ0ZXIgdGhlIGJsb2NrIHNjYWxhciBoZWFkZXIuIElmIHVuZGVmaW5lZCwgYSBuZXdsaW5lIHdpbGwgYmUgYWRkZWQuXG4gKiBAcGFyYW0gY29udGV4dC5pbXBsaWNpdEtleSBCZWluZyB3aXRoaW4gYW4gaW1wbGljaXQga2V5IG1heSBhZmZlY3QgdGhlIHJlc29sdmVkIHR5cGUgb2YgdGhlIHRva2VuJ3MgdmFsdWUuXG4gKiBAcGFyYW0gY29udGV4dC5pbmRlbnQgVGhlIGluZGVudCBsZXZlbCBvZiB0aGUgdG9rZW4uXG4gKiBAcGFyYW0gY29udGV4dC5pbkZsb3cgSXMgdGhpcyBzY2FsYXIgd2l0aGluIGEgZmxvdyBjb2xsZWN0aW9uPyBUaGlzIG1heSBhZmZlY3QgdGhlIHJlc29sdmVkIHR5cGUgb2YgdGhlIHRva2VuJ3MgdmFsdWUuXG4gKiBAcGFyYW0gY29udGV4dC5vZmZzZXQgVGhlIG9mZnNldCBwb3NpdGlvbiBvZiB0aGUgdG9rZW4uXG4gKiBAcGFyYW0gY29udGV4dC50eXBlIFRoZSBwcmVmZXJyZWQgdHlwZSBvZiB0aGUgc2NhbGFyIHRva2VuLiBJZiB1bmRlZmluZWQsIHRoZSBwcmV2aW91cyB0eXBlIG9mIHRoZSBgdG9rZW5gIHdpbGwgYmUgdXNlZCwgZGVmYXVsdGluZyB0byBgJ1BMQUlOJ2AuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVNjYWxhclRva2VuKHZhbHVlLCBjb250ZXh0KSB7XG4gICAgY29uc3QgeyBpbXBsaWNpdEtleSA9IGZhbHNlLCBpbmRlbnQsIGluRmxvdyA9IGZhbHNlLCBvZmZzZXQgPSAtMSwgdHlwZSA9ICdQTEFJTicgfSA9IGNvbnRleHQ7XG4gICAgY29uc3Qgc291cmNlID0gc3RyaW5naWZ5U3RyaW5nKHsgdHlwZSwgdmFsdWUgfSwge1xuICAgICAgICBpbXBsaWNpdEtleSxcbiAgICAgICAgaW5kZW50OiBpbmRlbnQgPiAwID8gJyAnLnJlcGVhdChpbmRlbnQpIDogJycsXG4gICAgICAgIGluRmxvdyxcbiAgICAgICAgb3B0aW9uczogeyBibG9ja1F1b3RlOiB0cnVlLCBsaW5lV2lkdGg6IC0xIH1cbiAgICB9KTtcbiAgICBjb25zdCBlbmQgPSBjb250ZXh0LmVuZCA/PyBbXG4gICAgICAgIHsgdHlwZTogJ25ld2xpbmUnLCBvZmZzZXQ6IC0xLCBpbmRlbnQsIHNvdXJjZTogJ1xcbicgfVxuICAgIF07XG4gICAgc3dpdGNoIChzb3VyY2VbMF0pIHtcbiAgICAgICAgY2FzZSAnfCc6XG4gICAgICAgIGNhc2UgJz4nOiB7XG4gICAgICAgICAgICBjb25zdCBoZSA9IHNvdXJjZS5pbmRleE9mKCdcXG4nKTtcbiAgICAgICAgICAgIGNvbnN0IGhlYWQgPSBzb3VyY2Uuc3Vic3RyaW5nKDAsIGhlKTtcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSBzb3VyY2Uuc3Vic3RyaW5nKGhlICsgMSkgKyAnXFxuJztcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gW1xuICAgICAgICAgICAgICAgIHsgdHlwZTogJ2Jsb2NrLXNjYWxhci1oZWFkZXInLCBvZmZzZXQsIGluZGVudCwgc291cmNlOiBoZWFkIH1cbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoIWFkZEVuZHRvQmxvY2tQcm9wcyhwcm9wcywgZW5kKSlcbiAgICAgICAgICAgICAgICBwcm9wcy5wdXNoKHsgdHlwZTogJ25ld2xpbmUnLCBvZmZzZXQ6IC0xLCBpbmRlbnQsIHNvdXJjZTogJ1xcbicgfSk7XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiAnYmxvY2stc2NhbGFyJywgb2Zmc2V0LCBpbmRlbnQsIHByb3BzLCBzb3VyY2U6IGJvZHkgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiAnZG91YmxlLXF1b3RlZC1zY2FsYXInLCBvZmZzZXQsIGluZGVudCwgc291cmNlLCBlbmQgfTtcbiAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICdzaW5nbGUtcXVvdGVkLXNjYWxhcicsIG9mZnNldCwgaW5kZW50LCBzb3VyY2UsIGVuZCB9O1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ3NjYWxhcicsIG9mZnNldCwgaW5kZW50LCBzb3VyY2UsIGVuZCB9O1xuICAgIH1cbn1cbi8qKlxuICogU2V0IHRoZSB2YWx1ZSBvZiBgdG9rZW5gIHRvIHRoZSBnaXZlbiBzdHJpbmcgYHZhbHVlYCwgb3ZlcndyaXRpbmcgYW55IHByZXZpb3VzIGNvbnRlbnRzIGFuZCB0eXBlIHRoYXQgaXQgbWF5IGhhdmUuXG4gKlxuICogQmVzdCBlZmZvcnRzIGFyZSBtYWRlIHRvIHJldGFpbiBhbnkgY29tbWVudHMgcHJldmlvdXNseSBhc3NvY2lhdGVkIHdpdGggdGhlIGB0b2tlbmAsXG4gKiB0aG91Z2ggYWxsIGNvbnRlbnRzIHdpdGhpbiBhIGNvbGxlY3Rpb24ncyBgaXRlbXNgIHdpbGwgYmUgb3ZlcndyaXR0ZW4uXG4gKlxuICogVmFsdWVzIHRoYXQgcmVwcmVzZW50IGFuIGFjdHVhbCBzdHJpbmcgYnV0IG1heSBiZSBwYXJzZWQgYXMgYSBkaWZmZXJlbnQgdHlwZSBzaG91bGQgdXNlIGEgYHR5cGVgIG90aGVyIHRoYW4gYCdQTEFJTidgLFxuICogYXMgdGhpcyBmdW5jdGlvbiBkb2VzIG5vdCBzdXBwb3J0IGFueSBzY2hlbWEgb3BlcmF0aW9ucyBhbmQgd29uJ3QgY2hlY2sgZm9yIHN1Y2ggY29uZmxpY3RzLlxuICpcbiAqIEBwYXJhbSB0b2tlbiBBbnkgdG9rZW4uIElmIGl0IGRvZXMgbm90IGluY2x1ZGUgYW4gYGluZGVudGAgdmFsdWUsIHRoZSB2YWx1ZSB3aWxsIGJlIHN0cmluZ2lmaWVkIGFzIGlmIGl0IHdlcmUgYW4gaW1wbGljaXQga2V5LlxuICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIHZhbHVlLCB3aGljaCB3aWxsIGhhdmUgaXRzIGNvbnRlbnQgcHJvcGVybHkgaW5kZW50ZWQuXG4gKiBAcGFyYW0gY29udGV4dC5hZnRlcktleSBJbiBtb3N0IGNhc2VzLCB2YWx1ZXMgYWZ0ZXIgYSBrZXkgc2hvdWxkIGhhdmUgYW4gYWRkaXRpb25hbCBsZXZlbCBvZiBpbmRlbnRhdGlvbi5cbiAqIEBwYXJhbSBjb250ZXh0LmltcGxpY2l0S2V5IEJlaW5nIHdpdGhpbiBhbiBpbXBsaWNpdCBrZXkgbWF5IGFmZmVjdCB0aGUgcmVzb2x2ZWQgdHlwZSBvZiB0aGUgdG9rZW4ncyB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0LmluRmxvdyBCZWluZyB3aXRoaW4gYSBmbG93IGNvbGxlY3Rpb24gbWF5IGFmZmVjdCB0aGUgcmVzb2x2ZWQgdHlwZSBvZiB0aGUgdG9rZW4ncyB2YWx1ZS5cbiAqIEBwYXJhbSBjb250ZXh0LnR5cGUgVGhlIHByZWZlcnJlZCB0eXBlIG9mIHRoZSBzY2FsYXIgdG9rZW4uIElmIHVuZGVmaW5lZCwgdGhlIHByZXZpb3VzIHR5cGUgb2YgdGhlIGB0b2tlbmAgd2lsbCBiZSB1c2VkLCBkZWZhdWx0aW5nIHRvIGAnUExBSU4nYC5cbiAqL1xuZnVuY3Rpb24gc2V0U2NhbGFyVmFsdWUodG9rZW4sIHZhbHVlLCBjb250ZXh0ID0ge30pIHtcbiAgICBsZXQgeyBhZnRlcktleSA9IGZhbHNlLCBpbXBsaWNpdEtleSA9IGZhbHNlLCBpbkZsb3cgPSBmYWxzZSwgdHlwZSB9ID0gY29udGV4dDtcbiAgICBsZXQgaW5kZW50ID0gJ2luZGVudCcgaW4gdG9rZW4gPyB0b2tlbi5pbmRlbnQgOiBudWxsO1xuICAgIGlmIChhZnRlcktleSAmJiB0eXBlb2YgaW5kZW50ID09PSAnbnVtYmVyJylcbiAgICAgICAgaW5kZW50ICs9IDI7XG4gICAgaWYgKCF0eXBlKVxuICAgICAgICBzd2l0Y2ggKHRva2VuLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICB0eXBlID0gJ1FVT1RFX1NJTkdMRSc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgdHlwZSA9ICdRVU9URV9ET1VCTEUnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IHRva2VuLnByb3BzWzBdO1xuICAgICAgICAgICAgICAgIGlmIChoZWFkZXIudHlwZSAhPT0gJ2Jsb2NrLXNjYWxhci1oZWFkZXInKVxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgYmxvY2sgc2NhbGFyIGhlYWRlcicpO1xuICAgICAgICAgICAgICAgIHR5cGUgPSBoZWFkZXIuc291cmNlWzBdID09PSAnPicgPyAnQkxPQ0tfRk9MREVEJyA6ICdCTE9DS19MSVRFUkFMJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdHlwZSA9ICdQTEFJTic7XG4gICAgICAgIH1cbiAgICBjb25zdCBzb3VyY2UgPSBzdHJpbmdpZnlTdHJpbmcoeyB0eXBlLCB2YWx1ZSB9LCB7XG4gICAgICAgIGltcGxpY2l0S2V5OiBpbXBsaWNpdEtleSB8fCBpbmRlbnQgPT09IG51bGwsXG4gICAgICAgIGluZGVudDogaW5kZW50ICE9PSBudWxsICYmIGluZGVudCA+IDAgPyAnICcucmVwZWF0KGluZGVudCkgOiAnJyxcbiAgICAgICAgaW5GbG93LFxuICAgICAgICBvcHRpb25zOiB7IGJsb2NrUXVvdGU6IHRydWUsIGxpbmVXaWR0aDogLTEgfVxuICAgIH0pO1xuICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICBjYXNlICc+JzpcbiAgICAgICAgICAgIHNldEJsb2NrU2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgc2V0Rmxvd1NjYWxhclZhbHVlKHRva2VuLCBzb3VyY2UsICdkb3VibGUtcXVvdGVkLXNjYWxhcicpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCInXCI6XG4gICAgICAgICAgICBzZXRGbG93U2NhbGFyVmFsdWUodG9rZW4sIHNvdXJjZSwgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHNldEZsb3dTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlLCAnc2NhbGFyJyk7XG4gICAgfVxufVxuZnVuY3Rpb24gc2V0QmxvY2tTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlKSB7XG4gICAgY29uc3QgaGUgPSBzb3VyY2UuaW5kZXhPZignXFxuJyk7XG4gICAgY29uc3QgaGVhZCA9IHNvdXJjZS5zdWJzdHJpbmcoMCwgaGUpO1xuICAgIGNvbnN0IGJvZHkgPSBzb3VyY2Uuc3Vic3RyaW5nKGhlICsgMSkgKyAnXFxuJztcbiAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNjYWxhcicpIHtcbiAgICAgICAgY29uc3QgaGVhZGVyID0gdG9rZW4ucHJvcHNbMF07XG4gICAgICAgIGlmIChoZWFkZXIudHlwZSAhPT0gJ2Jsb2NrLXNjYWxhci1oZWFkZXInKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGJsb2NrIHNjYWxhciBoZWFkZXInKTtcbiAgICAgICAgaGVhZGVyLnNvdXJjZSA9IGhlYWQ7XG4gICAgICAgIHRva2VuLnNvdXJjZSA9IGJvZHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCB7IG9mZnNldCB9ID0gdG9rZW47XG4gICAgICAgIGNvbnN0IGluZGVudCA9ICdpbmRlbnQnIGluIHRva2VuID8gdG9rZW4uaW5kZW50IDogLTE7XG4gICAgICAgIGNvbnN0IHByb3BzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiAnYmxvY2stc2NhbGFyLWhlYWRlcicsIG9mZnNldCwgaW5kZW50LCBzb3VyY2U6IGhlYWQgfVxuICAgICAgICBdO1xuICAgICAgICBpZiAoIWFkZEVuZHRvQmxvY2tQcm9wcyhwcm9wcywgJ2VuZCcgaW4gdG9rZW4gPyB0b2tlbi5lbmQgOiB1bmRlZmluZWQpKVxuICAgICAgICAgICAgcHJvcHMucHVzaCh7IHR5cGU6ICduZXdsaW5lJywgb2Zmc2V0OiAtMSwgaW5kZW50LCBzb3VyY2U6ICdcXG4nIH0pO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyh0b2tlbikpXG4gICAgICAgICAgICBpZiAoa2V5ICE9PSAndHlwZScgJiYga2V5ICE9PSAnb2Zmc2V0JylcbiAgICAgICAgICAgICAgICBkZWxldGUgdG9rZW5ba2V5XTtcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0b2tlbiwgeyB0eXBlOiAnYmxvY2stc2NhbGFyJywgaW5kZW50LCBwcm9wcywgc291cmNlOiBib2R5IH0pO1xuICAgIH1cbn1cbi8qKiBAcmV0dXJucyBgdHJ1ZWAgaWYgbGFzdCB0b2tlbiBpcyBhIG5ld2xpbmUgKi9cbmZ1bmN0aW9uIGFkZEVuZHRvQmxvY2tQcm9wcyhwcm9wcywgZW5kKSB7XG4gICAgaWYgKGVuZClcbiAgICAgICAgZm9yIChjb25zdCBzdCBvZiBlbmQpXG4gICAgICAgICAgICBzd2l0Y2ggKHN0LnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnB1c2goc3QpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMucHVzaChzdCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIHNldEZsb3dTY2FsYXJWYWx1ZSh0b2tlbiwgc291cmNlLCB0eXBlKSB7XG4gICAgc3dpdGNoICh0b2tlbi50eXBlKSB7XG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgIGNhc2UgJ2RvdWJsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgdG9rZW4udHlwZSA9IHR5cGU7XG4gICAgICAgICAgICB0b2tlbi5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzoge1xuICAgICAgICAgICAgY29uc3QgZW5kID0gdG9rZW4ucHJvcHMuc2xpY2UoMSk7XG4gICAgICAgICAgICBsZXQgb2EgPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgaWYgKHRva2VuLnByb3BzWzBdLnR5cGUgPT09ICdibG9jay1zY2FsYXItaGVhZGVyJylcbiAgICAgICAgICAgICAgICBvYSAtPSB0b2tlbi5wcm9wc1swXS5zb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0b2sgb2YgZW5kKVxuICAgICAgICAgICAgICAgIHRvay5vZmZzZXQgKz0gb2E7XG4gICAgICAgICAgICBkZWxldGUgdG9rZW4ucHJvcHM7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRva2VuLCB7IHR5cGUsIHNvdXJjZSwgZW5kIH0pO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnYmxvY2stbWFwJzpcbiAgICAgICAgY2FzZSAnYmxvY2stc2VxJzoge1xuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdG9rZW4ub2Zmc2V0ICsgc291cmNlLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IG5sID0geyB0eXBlOiAnbmV3bGluZScsIG9mZnNldCwgaW5kZW50OiB0b2tlbi5pbmRlbnQsIHNvdXJjZTogJ1xcbicgfTtcbiAgICAgICAgICAgIGRlbGV0ZSB0b2tlbi5pdGVtcztcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odG9rZW4sIHsgdHlwZSwgc291cmNlLCBlbmQ6IFtubF0gfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBjb25zdCBpbmRlbnQgPSAnaW5kZW50JyBpbiB0b2tlbiA/IHRva2VuLmluZGVudCA6IC0xO1xuICAgICAgICAgICAgY29uc3QgZW5kID0gJ2VuZCcgaW4gdG9rZW4gJiYgQXJyYXkuaXNBcnJheSh0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgPyB0b2tlbi5lbmQuZmlsdGVyKHN0ID0+IHN0LnR5cGUgPT09ICdzcGFjZScgfHxcbiAgICAgICAgICAgICAgICAgICAgc3QudHlwZSA9PT0gJ2NvbW1lbnQnIHx8XG4gICAgICAgICAgICAgICAgICAgIHN0LnR5cGUgPT09ICduZXdsaW5lJylcbiAgICAgICAgICAgICAgICA6IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXModG9rZW4pKVxuICAgICAgICAgICAgICAgIGlmIChrZXkgIT09ICd0eXBlJyAmJiBrZXkgIT09ICdvZmZzZXQnKVxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdG9rZW5ba2V5XTtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odG9rZW4sIHsgdHlwZSwgaW5kZW50LCBzb3VyY2UsIGVuZCB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IHsgY3JlYXRlU2NhbGFyVG9rZW4sIHJlc29sdmVBc1NjYWxhciwgc2V0U2NhbGFyVmFsdWUgfTtcbiIsIi8qKlxuICogU3RyaW5naWZ5IGEgQ1NUIGRvY3VtZW50LCB0b2tlbiwgb3IgY29sbGVjdGlvbiBpdGVtXG4gKlxuICogRmFpciB3YXJuaW5nOiBUaGlzIGFwcGxpZXMgbm8gdmFsaWRhdGlvbiB3aGF0c29ldmVyLCBhbmRcbiAqIHNpbXBseSBjb25jYXRlbmF0ZXMgdGhlIHNvdXJjZXMgaW4gdGhlaXIgbG9naWNhbCBvcmRlci5cbiAqL1xuY29uc3Qgc3RyaW5naWZ5ID0gKGNzdCkgPT4gJ3R5cGUnIGluIGNzdCA/IHN0cmluZ2lmeVRva2VuKGNzdCkgOiBzdHJpbmdpZnlJdGVtKGNzdCk7XG5mdW5jdGlvbiBzdHJpbmdpZnlUb2tlbih0b2tlbikge1xuICAgIHN3aXRjaCAodG9rZW4udHlwZSkge1xuICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOiB7XG4gICAgICAgICAgICBsZXQgcmVzID0gJyc7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRvayBvZiB0b2tlbi5wcm9wcylcbiAgICAgICAgICAgICAgICByZXMgKz0gc3RyaW5naWZ5VG9rZW4odG9rKTtcbiAgICAgICAgICAgIHJldHVybiByZXMgKyB0b2tlbi5zb3VyY2U7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnYmxvY2stbWFwJzpcbiAgICAgICAgY2FzZSAnYmxvY2stc2VxJzoge1xuICAgICAgICAgICAgbGV0IHJlcyA9ICcnO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRva2VuLml0ZW1zKVxuICAgICAgICAgICAgICAgIHJlcyArPSBzdHJpbmdpZnlJdGVtKGl0ZW0pO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdmbG93LWNvbGxlY3Rpb24nOiB7XG4gICAgICAgICAgICBsZXQgcmVzID0gdG9rZW4uc3RhcnQuc291cmNlO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRva2VuLml0ZW1zKVxuICAgICAgICAgICAgICAgIHJlcyArPSBzdHJpbmdpZnlJdGVtKGl0ZW0pO1xuICAgICAgICAgICAgZm9yIChjb25zdCBzdCBvZiB0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgcmVzICs9IHN0LnNvdXJjZTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnZG9jdW1lbnQnOiB7XG4gICAgICAgICAgICBsZXQgcmVzID0gc3RyaW5naWZ5SXRlbSh0b2tlbik7XG4gICAgICAgICAgICBpZiAodG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qgc3Qgb2YgdG9rZW4uZW5kKVxuICAgICAgICAgICAgICAgICAgICByZXMgKz0gc3Quc291cmNlO1xuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICBsZXQgcmVzID0gdG9rZW4uc291cmNlO1xuICAgICAgICAgICAgaWYgKCdlbmQnIGluIHRva2VuICYmIHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHN0IG9mIHRva2VuLmVuZClcbiAgICAgICAgICAgICAgICAgICAgcmVzICs9IHN0LnNvdXJjZTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBzdHJpbmdpZnlJdGVtKHsgc3RhcnQsIGtleSwgc2VwLCB2YWx1ZSB9KSB7XG4gICAgbGV0IHJlcyA9ICcnO1xuICAgIGZvciAoY29uc3Qgc3Qgb2Ygc3RhcnQpXG4gICAgICAgIHJlcyArPSBzdC5zb3VyY2U7XG4gICAgaWYgKGtleSlcbiAgICAgICAgcmVzICs9IHN0cmluZ2lmeVRva2VuKGtleSk7XG4gICAgaWYgKHNlcClcbiAgICAgICAgZm9yIChjb25zdCBzdCBvZiBzZXApXG4gICAgICAgICAgICByZXMgKz0gc3Quc291cmNlO1xuICAgIGlmICh2YWx1ZSlcbiAgICAgICAgcmVzICs9IHN0cmluZ2lmeVRva2VuKHZhbHVlKTtcbiAgICByZXR1cm4gcmVzO1xufVxuXG5leHBvcnQgeyBzdHJpbmdpZnkgfTtcbiIsImNvbnN0IEJSRUFLID0gU3ltYm9sKCdicmVhayB2aXNpdCcpO1xuY29uc3QgU0tJUCA9IFN5bWJvbCgnc2tpcCBjaGlsZHJlbicpO1xuY29uc3QgUkVNT1ZFID0gU3ltYm9sKCdyZW1vdmUgaXRlbScpO1xuLyoqXG4gKiBBcHBseSBhIHZpc2l0b3IgdG8gYSBDU1QgZG9jdW1lbnQgb3IgaXRlbS5cbiAqXG4gKiBXYWxrcyB0aHJvdWdoIHRoZSB0cmVlIChkZXB0aC1maXJzdCkgc3RhcnRpbmcgZnJvbSB0aGUgcm9vdCwgY2FsbGluZyBhXG4gKiBgdmlzaXRvcmAgZnVuY3Rpb24gd2l0aCB0d28gYXJndW1lbnRzIHdoZW4gZW50ZXJpbmcgZWFjaCBpdGVtOlxuICogICAtIGBpdGVtYDogVGhlIGN1cnJlbnQgaXRlbSwgd2hpY2ggaW5jbHVkZWQgdGhlIGZvbGxvd2luZyBtZW1iZXJzOlxuICogICAgIC0gYHN0YXJ0OiBTb3VyY2VUb2tlbltdYCDigJMgU291cmNlIHRva2VucyBiZWZvcmUgdGhlIGtleSBvciB2YWx1ZSxcbiAqICAgICAgIHBvc3NpYmx5IGluY2x1ZGluZyBpdHMgYW5jaG9yIG9yIHRhZy5cbiAqICAgICAtIGBrZXk/OiBUb2tlbiB8IG51bGxgIOKAkyBTZXQgZm9yIHBhaXIgdmFsdWVzLiBNYXkgdGhlbiBiZSBgbnVsbGAsIGlmXG4gKiAgICAgICB0aGUga2V5IGJlZm9yZSB0aGUgYDpgIHNlcGFyYXRvciBpcyBlbXB0eS5cbiAqICAgICAtIGBzZXA/OiBTb3VyY2VUb2tlbltdYCDigJMgU291cmNlIHRva2VucyBiZXR3ZWVuIHRoZSBrZXkgYW5kIHRoZSB2YWx1ZSxcbiAqICAgICAgIHdoaWNoIHNob3VsZCBpbmNsdWRlIHRoZSBgOmAgbWFwIHZhbHVlIGluZGljYXRvciBpZiBgdmFsdWVgIGlzIHNldC5cbiAqICAgICAtIGB2YWx1ZT86IFRva2VuYCDigJMgVGhlIHZhbHVlIG9mIGEgc2VxdWVuY2UgaXRlbSwgb3Igb2YgYSBtYXAgcGFpci5cbiAqICAgLSBgcGF0aGA6IFRoZSBzdGVwcyBmcm9tIHRoZSByb290IHRvIHRoZSBjdXJyZW50IG5vZGUsIGFzIGFuIGFycmF5IG9mXG4gKiAgICAgYFsna2V5JyB8ICd2YWx1ZScsIG51bWJlcl1gIHR1cGxlcy5cbiAqXG4gKiBUaGUgcmV0dXJuIHZhbHVlIG9mIHRoZSB2aXNpdG9yIG1heSBiZSB1c2VkIHRvIGNvbnRyb2wgdGhlIHRyYXZlcnNhbDpcbiAqICAgLSBgdW5kZWZpbmVkYCAoZGVmYXVsdCk6IERvIG5vdGhpbmcgYW5kIGNvbnRpbnVlXG4gKiAgIC0gYHZpc2l0LlNLSVBgOiBEbyBub3QgdmlzaXQgdGhlIGNoaWxkcmVuIG9mIHRoaXMgdG9rZW4sIGNvbnRpbnVlIHdpdGhcbiAqICAgICAgbmV4dCBzaWJsaW5nXG4gKiAgIC0gYHZpc2l0LkJSRUFLYDogVGVybWluYXRlIHRyYXZlcnNhbCBjb21wbGV0ZWx5XG4gKiAgIC0gYHZpc2l0LlJFTU9WRWA6IFJlbW92ZSB0aGUgY3VycmVudCBpdGVtLCB0aGVuIGNvbnRpbnVlIHdpdGggdGhlIG5leHQgb25lXG4gKiAgIC0gYG51bWJlcmA6IFNldCB0aGUgaW5kZXggb2YgdGhlIG5leHQgc3RlcC4gVGhpcyBpcyB1c2VmdWwgZXNwZWNpYWxseSBpZlxuICogICAgIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudCB0b2tlbiBoYXMgY2hhbmdlZC5cbiAqICAgLSBgZnVuY3Rpb25gOiBEZWZpbmUgdGhlIG5leHQgdmlzaXRvciBmb3IgdGhpcyBpdGVtLiBBZnRlciB0aGUgb3JpZ2luYWxcbiAqICAgICB2aXNpdG9yIGlzIGNhbGxlZCBvbiBpdGVtIGVudHJ5LCBuZXh0IHZpc2l0b3JzIGFyZSBjYWxsZWQgYWZ0ZXIgaGFuZGxpbmdcbiAqICAgICBhIG5vbi1lbXB0eSBga2V5YCBhbmQgd2hlbiBleGl0aW5nIHRoZSBpdGVtLlxuICovXG5mdW5jdGlvbiB2aXNpdChjc3QsIHZpc2l0b3IpIHtcbiAgICBpZiAoJ3R5cGUnIGluIGNzdCAmJiBjc3QudHlwZSA9PT0gJ2RvY3VtZW50JylcbiAgICAgICAgY3N0ID0geyBzdGFydDogY3N0LnN0YXJ0LCB2YWx1ZTogY3N0LnZhbHVlIH07XG4gICAgX3Zpc2l0KE9iamVjdC5mcmVlemUoW10pLCBjc3QsIHZpc2l0b3IpO1xufVxuLy8gV2l0aG91dCB0aGUgYGFzIHN5bWJvbGAgY2FzdHMsIFRTIGRlY2xhcmVzIHRoZXNlIGluIHRoZSBgdmlzaXRgXG4vLyBuYW1lc3BhY2UgdXNpbmcgYHZhcmAsIGJ1dCB0aGVuIGNvbXBsYWlucyBhYm91dCB0aGF0IGJlY2F1c2Vcbi8vIGB1bmlxdWUgc3ltYm9sYCBtdXN0IGJlIGBjb25zdGAuXG4vKiogVGVybWluYXRlIHZpc2l0IHRyYXZlcnNhbCBjb21wbGV0ZWx5ICovXG52aXNpdC5CUkVBSyA9IEJSRUFLO1xuLyoqIERvIG5vdCB2aXNpdCB0aGUgY2hpbGRyZW4gb2YgdGhlIGN1cnJlbnQgaXRlbSAqL1xudmlzaXQuU0tJUCA9IFNLSVA7XG4vKiogUmVtb3ZlIHRoZSBjdXJyZW50IGl0ZW0gKi9cbnZpc2l0LlJFTU9WRSA9IFJFTU9WRTtcbi8qKiBGaW5kIHRoZSBpdGVtIGF0IGBwYXRoYCBmcm9tIGBjc3RgIGFzIHRoZSByb290ICovXG52aXNpdC5pdGVtQXRQYXRoID0gKGNzdCwgcGF0aCkgPT4ge1xuICAgIGxldCBpdGVtID0gY3N0O1xuICAgIGZvciAoY29uc3QgW2ZpZWxkLCBpbmRleF0gb2YgcGF0aCkge1xuICAgICAgICBjb25zdCB0b2sgPSBpdGVtPy5bZmllbGRdO1xuICAgICAgICBpZiAodG9rICYmICdpdGVtcycgaW4gdG9rKSB7XG4gICAgICAgICAgICBpdGVtID0gdG9rLml0ZW1zW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gaXRlbTtcbn07XG4vKipcbiAqIEdldCB0aGUgaW1tZWRpYXRlIHBhcmVudCBjb2xsZWN0aW9uIG9mIHRoZSBpdGVtIGF0IGBwYXRoYCBmcm9tIGBjc3RgIGFzIHRoZSByb290LlxuICpcbiAqIFRocm93cyBhbiBlcnJvciBpZiB0aGUgY29sbGVjdGlvbiBpcyBub3QgZm91bmQsIHdoaWNoIHNob3VsZCBuZXZlciBoYXBwZW4gaWYgdGhlIGl0ZW0gaXRzZWxmIGV4aXN0cy5cbiAqL1xudmlzaXQucGFyZW50Q29sbGVjdGlvbiA9IChjc3QsIHBhdGgpID0+IHtcbiAgICBjb25zdCBwYXJlbnQgPSB2aXNpdC5pdGVtQXRQYXRoKGNzdCwgcGF0aC5zbGljZSgwLCAtMSkpO1xuICAgIGNvbnN0IGZpZWxkID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdWzBdO1xuICAgIGNvbnN0IGNvbGwgPSBwYXJlbnQ/LltmaWVsZF07XG4gICAgaWYgKGNvbGwgJiYgJ2l0ZW1zJyBpbiBjb2xsKVxuICAgICAgICByZXR1cm4gY29sbDtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1BhcmVudCBjb2xsZWN0aW9uIG5vdCBmb3VuZCcpO1xufTtcbmZ1bmN0aW9uIF92aXNpdChwYXRoLCBpdGVtLCB2aXNpdG9yKSB7XG4gICAgbGV0IGN0cmwgPSB2aXNpdG9yKGl0ZW0sIHBhdGgpO1xuICAgIGlmICh0eXBlb2YgY3RybCA9PT0gJ3N5bWJvbCcpXG4gICAgICAgIHJldHVybiBjdHJsO1xuICAgIGZvciAoY29uc3QgZmllbGQgb2YgWydrZXknLCAndmFsdWUnXSkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGl0ZW1bZmllbGRdO1xuICAgICAgICBpZiAodG9rZW4gJiYgJ2l0ZW1zJyBpbiB0b2tlbikge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b2tlbi5pdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNpID0gX3Zpc2l0KE9iamVjdC5mcmVlemUocGF0aC5jb25jYXQoW1tmaWVsZCwgaV1dKSksIHRva2VuLml0ZW1zW2ldLCB2aXNpdG9yKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNpID09PSAnbnVtYmVyJylcbiAgICAgICAgICAgICAgICAgICAgaSA9IGNpIC0gMTtcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gQlJFQUspXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBCUkVBSztcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChjaSA9PT0gUkVNT1ZFKSB7XG4gICAgICAgICAgICAgICAgICAgIHRva2VuLml0ZW1zLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICAgICAgaSAtPSAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0eXBlb2YgY3RybCA9PT0gJ2Z1bmN0aW9uJyAmJiBmaWVsZCA9PT0gJ2tleScpXG4gICAgICAgICAgICAgICAgY3RybCA9IGN0cmwoaXRlbSwgcGF0aCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHR5cGVvZiBjdHJsID09PSAnZnVuY3Rpb24nID8gY3RybChpdGVtLCBwYXRoKSA6IGN0cmw7XG59XG5cbmV4cG9ydCB7IHZpc2l0IH07XG4iLCJleHBvcnQgeyBjcmVhdGVTY2FsYXJUb2tlbiwgcmVzb2x2ZUFzU2NhbGFyLCBzZXRTY2FsYXJWYWx1ZSB9IGZyb20gJy4vY3N0LXNjYWxhci5qcyc7XG5leHBvcnQgeyBzdHJpbmdpZnkgfSBmcm9tICcuL2NzdC1zdHJpbmdpZnkuanMnO1xuZXhwb3J0IHsgdmlzaXQgfSBmcm9tICcuL2NzdC12aXNpdC5qcyc7XG5cbi8qKiBUaGUgYnl0ZSBvcmRlciBtYXJrICovXG5jb25zdCBCT00gPSAnXFx1e0ZFRkZ9Jztcbi8qKiBTdGFydCBvZiBkb2MtbW9kZSAqL1xuY29uc3QgRE9DVU1FTlQgPSAnXFx4MDInOyAvLyBDMDogU3RhcnQgb2YgVGV4dFxuLyoqIFVuZXhwZWN0ZWQgZW5kIG9mIGZsb3ctbW9kZSAqL1xuY29uc3QgRkxPV19FTkQgPSAnXFx4MTgnOyAvLyBDMDogQ2FuY2VsXG4vKiogTmV4dCB0b2tlbiBpcyBhIHNjYWxhciB2YWx1ZSAqL1xuY29uc3QgU0NBTEFSID0gJ1xceDFmJzsgLy8gQzA6IFVuaXQgU2VwYXJhdG9yXG4vKiogQHJldHVybnMgYHRydWVgIGlmIGB0b2tlbmAgaXMgYSBmbG93IG9yIGJsb2NrIGNvbGxlY3Rpb24gKi9cbmNvbnN0IGlzQ29sbGVjdGlvbiA9ICh0b2tlbikgPT4gISF0b2tlbiAmJiAnaXRlbXMnIGluIHRva2VuO1xuLyoqIEByZXR1cm5zIGB0cnVlYCBpZiBgdG9rZW5gIGlzIGEgZmxvdyBvciBibG9jayBzY2FsYXI7IG5vdCBhbiBhbGlhcyAqL1xuY29uc3QgaXNTY2FsYXIgPSAodG9rZW4pID0+ICEhdG9rZW4gJiZcbiAgICAodG9rZW4udHlwZSA9PT0gJ3NjYWxhcicgfHxcbiAgICAgICAgdG9rZW4udHlwZSA9PT0gJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJyB8fFxuICAgICAgICB0b2tlbi50eXBlID09PSAnZG91YmxlLXF1b3RlZC1zY2FsYXInIHx8XG4gICAgICAgIHRva2VuLnR5cGUgPT09ICdibG9jay1zY2FsYXInKTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKiogR2V0IGEgcHJpbnRhYmxlIHJlcHJlc2VudGF0aW9uIG9mIGEgbGV4ZXIgdG9rZW4gKi9cbmZ1bmN0aW9uIHByZXR0eVRva2VuKHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICBjYXNlIEJPTTpcbiAgICAgICAgICAgIHJldHVybiAnPEJPTT4nO1xuICAgICAgICBjYXNlIERPQ1VNRU5UOlxuICAgICAgICAgICAgcmV0dXJuICc8RE9DPic7XG4gICAgICAgIGNhc2UgRkxPV19FTkQ6XG4gICAgICAgICAgICByZXR1cm4gJzxGTE9XX0VORD4nO1xuICAgICAgICBjYXNlIFNDQUxBUjpcbiAgICAgICAgICAgIHJldHVybiAnPFNDQUxBUj4nO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRva2VuKTtcbiAgICB9XG59XG4vKiogSWRlbnRpZnkgdGhlIHR5cGUgb2YgYSBsZXhlciB0b2tlbi4gTWF5IHJldHVybiBgbnVsbGAgZm9yIHVua25vd24gdG9rZW5zLiAqL1xuZnVuY3Rpb24gdG9rZW5UeXBlKHNvdXJjZSkge1xuICAgIHN3aXRjaCAoc291cmNlKSB7XG4gICAgICAgIGNhc2UgQk9NOlxuICAgICAgICAgICAgcmV0dXJuICdieXRlLW9yZGVyLW1hcmsnO1xuICAgICAgICBjYXNlIERPQ1VNRU5UOlxuICAgICAgICAgICAgcmV0dXJuICdkb2MtbW9kZSc7XG4gICAgICAgIGNhc2UgRkxPV19FTkQ6XG4gICAgICAgICAgICByZXR1cm4gJ2Zsb3ctZXJyb3ItZW5kJztcbiAgICAgICAgY2FzZSBTQ0FMQVI6XG4gICAgICAgICAgICByZXR1cm4gJ3NjYWxhcic7XG4gICAgICAgIGNhc2UgJy0tLSc6XG4gICAgICAgICAgICByZXR1cm4gJ2RvYy1zdGFydCc7XG4gICAgICAgIGNhc2UgJy4uLic6XG4gICAgICAgICAgICByZXR1cm4gJ2RvYy1lbmQnO1xuICAgICAgICBjYXNlICcnOlxuICAgICAgICBjYXNlICdcXG4nOlxuICAgICAgICBjYXNlICdcXHJcXG4nOlxuICAgICAgICAgICAgcmV0dXJuICduZXdsaW5lJztcbiAgICAgICAgY2FzZSAnLSc6XG4gICAgICAgICAgICByZXR1cm4gJ3NlcS1pdGVtLWluZCc7XG4gICAgICAgIGNhc2UgJz8nOlxuICAgICAgICAgICAgcmV0dXJuICdleHBsaWNpdC1rZXktaW5kJztcbiAgICAgICAgY2FzZSAnOic6XG4gICAgICAgICAgICByZXR1cm4gJ21hcC12YWx1ZS1pbmQnO1xuICAgICAgICBjYXNlICd7JzpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1tYXAtc3RhcnQnO1xuICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgIHJldHVybiAnZmxvdy1tYXAtZW5kJztcbiAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgICByZXR1cm4gJ2Zsb3ctc2VxLXN0YXJ0JztcbiAgICAgICAgY2FzZSAnXSc6XG4gICAgICAgICAgICByZXR1cm4gJ2Zsb3ctc2VxLWVuZCc7XG4gICAgICAgIGNhc2UgJywnOlxuICAgICAgICAgICAgcmV0dXJuICdjb21tYSc7XG4gICAgfVxuICAgIHN3aXRjaCAoc291cmNlWzBdKSB7XG4gICAgICAgIGNhc2UgJyAnOlxuICAgICAgICBjYXNlICdcXHQnOlxuICAgICAgICAgICAgcmV0dXJuICdzcGFjZSc7XG4gICAgICAgIGNhc2UgJyMnOlxuICAgICAgICAgICAgcmV0dXJuICdjb21tZW50JztcbiAgICAgICAgY2FzZSAnJSc6XG4gICAgICAgICAgICByZXR1cm4gJ2RpcmVjdGl2ZS1saW5lJztcbiAgICAgICAgY2FzZSAnKic6XG4gICAgICAgICAgICByZXR1cm4gJ2FsaWFzJztcbiAgICAgICAgY2FzZSAnJic6XG4gICAgICAgICAgICByZXR1cm4gJ2FuY2hvcic7XG4gICAgICAgIGNhc2UgJyEnOlxuICAgICAgICAgICAgcmV0dXJuICd0YWcnO1xuICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgcmV0dXJuICdzaW5nbGUtcXVvdGVkLXNjYWxhcic7XG4gICAgICAgIGNhc2UgJ1wiJzpcbiAgICAgICAgICAgIHJldHVybiAnZG91YmxlLXF1b3RlZC1zY2FsYXInO1xuICAgICAgICBjYXNlICd8JzpcbiAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICByZXR1cm4gJ2Jsb2NrLXNjYWxhci1oZWFkZXInO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IHsgQk9NLCBET0NVTUVOVCwgRkxPV19FTkQsIFNDQUxBUiwgaXNDb2xsZWN0aW9uLCBpc1NjYWxhciwgcHJldHR5VG9rZW4sIHRva2VuVHlwZSB9O1xuIiwiaW1wb3J0IHsgQk9NLCBET0NVTUVOVCwgRkxPV19FTkQsIFNDQUxBUiB9IGZyb20gJy4vY3N0LmpzJztcblxuLypcblNUQVJUIC0+IHN0cmVhbVxuXG5zdHJlYW1cbiAgZGlyZWN0aXZlIC0+IGxpbmUtZW5kIC0+IHN0cmVhbVxuICBpbmRlbnQgKyBsaW5lLWVuZCAtPiBzdHJlYW1cbiAgW2Vsc2VdIC0+IGxpbmUtc3RhcnRcblxubGluZS1lbmRcbiAgY29tbWVudCAtPiBsaW5lLWVuZFxuICBuZXdsaW5lIC0+IC5cbiAgaW5wdXQtZW5kIC0+IEVORFxuXG5saW5lLXN0YXJ0XG4gIGRvYy1zdGFydCAtPiBkb2NcbiAgZG9jLWVuZCAtPiBzdHJlYW1cbiAgW2Vsc2VdIC0+IGluZGVudCAtPiBibG9jay1zdGFydFxuXG5ibG9jay1zdGFydFxuICBzZXEtaXRlbS1zdGFydCAtPiBibG9jay1zdGFydFxuICBleHBsaWNpdC1rZXktc3RhcnQgLT4gYmxvY2stc3RhcnRcbiAgbWFwLXZhbHVlLXN0YXJ0IC0+IGJsb2NrLXN0YXJ0XG4gIFtlbHNlXSAtPiBkb2NcblxuZG9jXG4gIGxpbmUtZW5kIC0+IGxpbmUtc3RhcnRcbiAgc3BhY2VzIC0+IGRvY1xuICBhbmNob3IgLT4gZG9jXG4gIHRhZyAtPiBkb2NcbiAgZmxvdy1zdGFydCAtPiBmbG93IC0+IGRvY1xuICBmbG93LWVuZCAtPiBlcnJvciAtPiBkb2NcbiAgc2VxLWl0ZW0tc3RhcnQgLT4gZXJyb3IgLT4gZG9jXG4gIGV4cGxpY2l0LWtleS1zdGFydCAtPiBlcnJvciAtPiBkb2NcbiAgbWFwLXZhbHVlLXN0YXJ0IC0+IGRvY1xuICBhbGlhcyAtPiBkb2NcbiAgcXVvdGUtc3RhcnQgLT4gcXVvdGVkLXNjYWxhciAtPiBkb2NcbiAgYmxvY2stc2NhbGFyLWhlYWRlciAtPiBsaW5lLWVuZCAtPiBibG9jay1zY2FsYXIobWluKSAtPiBsaW5lLXN0YXJ0XG4gIFtlbHNlXSAtPiBwbGFpbi1zY2FsYXIoZmFsc2UsIG1pbikgLT4gZG9jXG5cbmZsb3dcbiAgbGluZS1lbmQgLT4gZmxvd1xuICBzcGFjZXMgLT4gZmxvd1xuICBhbmNob3IgLT4gZmxvd1xuICB0YWcgLT4gZmxvd1xuICBmbG93LXN0YXJ0IC0+IGZsb3cgLT4gZmxvd1xuICBmbG93LWVuZCAtPiAuXG4gIHNlcS1pdGVtLXN0YXJ0IC0+IGVycm9yIC0+IGZsb3dcbiAgZXhwbGljaXQta2V5LXN0YXJ0IC0+IGZsb3dcbiAgbWFwLXZhbHVlLXN0YXJ0IC0+IGZsb3dcbiAgYWxpYXMgLT4gZmxvd1xuICBxdW90ZS1zdGFydCAtPiBxdW90ZWQtc2NhbGFyIC0+IGZsb3dcbiAgY29tbWEgLT4gZmxvd1xuICBbZWxzZV0gLT4gcGxhaW4tc2NhbGFyKHRydWUsIDApIC0+IGZsb3dcblxucXVvdGVkLXNjYWxhclxuICBxdW90ZS1lbmQgLT4gLlxuICBbZWxzZV0gLT4gcXVvdGVkLXNjYWxhclxuXG5ibG9jay1zY2FsYXIobWluKVxuICBuZXdsaW5lICsgcGVlayhpbmRlbnQgPCBtaW4pIC0+IC5cbiAgW2Vsc2VdIC0+IGJsb2NrLXNjYWxhcihtaW4pXG5cbnBsYWluLXNjYWxhcihpcy1mbG93LCBtaW4pXG4gIHNjYWxhci1lbmQoaXMtZmxvdykgLT4gLlxuICBwZWVrKG5ld2xpbmUgKyAoaW5kZW50IDwgbWluKSkgLT4gLlxuICBbZWxzZV0gLT4gcGxhaW4tc2NhbGFyKG1pbilcbiovXG5mdW5jdGlvbiBpc0VtcHR5KGNoKSB7XG4gICAgc3dpdGNoIChjaCkge1xuICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgY2FzZSAnICc6XG4gICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgIGNhc2UgJ1xccic6XG4gICAgICAgIGNhc2UgJ1xcdCc6XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5jb25zdCBoZXhEaWdpdHMgPSBuZXcgU2V0KCcwMTIzNDU2Nzg5QUJDREVGYWJjZGVmJyk7XG5jb25zdCB0YWdDaGFycyA9IG5ldyBTZXQoXCIwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei0jOy8/OkAmPSskXy4hfionKClcIik7XG5jb25zdCBmbG93SW5kaWNhdG9yQ2hhcnMgPSBuZXcgU2V0KCcsW117fScpO1xuY29uc3QgaW52YWxpZEFuY2hvckNoYXJzID0gbmV3IFNldCgnICxbXXt9XFxuXFxyXFx0Jyk7XG5jb25zdCBpc05vdEFuY2hvckNoYXIgPSAoY2gpID0+ICFjaCB8fCBpbnZhbGlkQW5jaG9yQ2hhcnMuaGFzKGNoKTtcbi8qKlxuICogU3BsaXRzIGFuIGlucHV0IHN0cmluZyBpbnRvIGxleGljYWwgdG9rZW5zLCBpLmUuIHNtYWxsZXIgc3RyaW5ncyB0aGF0IGFyZVxuICogZWFzaWx5IGlkZW50aWZpYWJsZSBieSBgdG9rZW5zLnRva2VuVHlwZSgpYC5cbiAqXG4gKiBMZXhpbmcgc3RhcnRzIGFsd2F5cyBpbiBhIFwic3RyZWFtXCIgY29udGV4dC4gSW5jb21wbGV0ZSBpbnB1dCBtYXkgYmUgYnVmZmVyZWRcbiAqIHVudGlsIGEgY29tcGxldGUgdG9rZW4gY2FuIGJlIGVtaXR0ZWQuXG4gKlxuICogSW4gYWRkaXRpb24gdG8gc2xpY2VzIG9mIHRoZSBvcmlnaW5hbCBpbnB1dCwgdGhlIGZvbGxvd2luZyBjb250cm9sIGNoYXJhY3RlcnNcbiAqIG1heSBhbHNvIGJlIGVtaXR0ZWQ6XG4gKlxuICogLSBgXFx4MDJgIChTdGFydCBvZiBUZXh0KTogQSBkb2N1bWVudCBzdGFydHMgd2l0aCB0aGUgbmV4dCB0b2tlblxuICogLSBgXFx4MThgIChDYW5jZWwpOiBVbmV4cGVjdGVkIGVuZCBvZiBmbG93LW1vZGUgKGluZGljYXRlcyBhbiBlcnJvcilcbiAqIC0gYFxceDFmYCAoVW5pdCBTZXBhcmF0b3IpOiBOZXh0IHRva2VuIGlzIGEgc2NhbGFyIHZhbHVlXG4gKiAtIGBcXHV7RkVGRn1gIChCeXRlIG9yZGVyIG1hcmspOiBFbWl0dGVkIHNlcGFyYXRlbHkgb3V0c2lkZSBkb2N1bWVudHNcbiAqL1xuY2xhc3MgTGV4ZXIge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAvKipcbiAgICAgICAgICogRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBidWZmZXIgbWFya3MgdGhlIGVuZCBvZlxuICAgICAgICAgKiBhbGwgaW5wdXRcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYXRFbmQgPSBmYWxzZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEV4cGxpY2l0IGluZGVudCBzZXQgaW4gYmxvY2sgc2NhbGFyIGhlYWRlciwgYXMgYW4gb2Zmc2V0IGZyb20gdGhlIGN1cnJlbnRcbiAgICAgICAgICogbWluaW11bSBpbmRlbnQsIHNvIGUuZy4gc2V0IHRvIDEgZnJvbSBhIGhlYWRlciBgfDIrYC4gU2V0IHRvIC0xIGlmIG5vdFxuICAgICAgICAgKiBleHBsaWNpdGx5IHNldC5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuYmxvY2tTY2FsYXJJbmRlbnQgPSAtMTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEJsb2NrIHNjYWxhcnMgdGhhdCBpbmNsdWRlIGEgKyAoa2VlcCkgY2hvbXBpbmcgaW5kaWNhdG9yIGluIHRoZWlyIGhlYWRlclxuICAgICAgICAgKiBpbmNsdWRlIHRyYWlsaW5nIGVtcHR5IGxpbmVzLCB3aGljaCBhcmUgb3RoZXJ3aXNlIGV4Y2x1ZGVkIGZyb20gdGhlXG4gICAgICAgICAqIHNjYWxhcidzIGNvbnRlbnRzLlxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5ibG9ja1NjYWxhcktlZXAgPSBmYWxzZTtcbiAgICAgICAgLyoqIEN1cnJlbnQgaW5wdXQgKi9cbiAgICAgICAgdGhpcy5idWZmZXIgPSAnJztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZsYWcgbm90aW5nIHdoZXRoZXIgdGhlIG1hcCB2YWx1ZSBpbmRpY2F0b3IgOiBjYW4gaW1tZWRpYXRlbHkgZm9sbG93IHRoaXNcbiAgICAgICAgICogbm9kZSB3aXRoaW4gYSBmbG93IGNvbnRleHQuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgLyoqIENvdW50IG9mIHN1cnJvdW5kaW5nIGZsb3cgY29sbGVjdGlvbiBsZXZlbHMuICovXG4gICAgICAgIHRoaXMuZmxvd0xldmVsID0gMDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1pbmltdW0gbGV2ZWwgb2YgaW5kZW50YXRpb24gcmVxdWlyZWQgZm9yIG5leHQgbGluZXMgdG8gYmUgcGFyc2VkIGFzIGFcbiAgICAgICAgICogcGFydCBvZiB0aGUgY3VycmVudCBzY2FsYXIgdmFsdWUuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmluZGVudE5leHQgPSAwO1xuICAgICAgICAvKiogSW5kZW50YXRpb24gbGV2ZWwgb2YgdGhlIGN1cnJlbnQgbGluZS4gKi9cbiAgICAgICAgdGhpcy5pbmRlbnRWYWx1ZSA9IDA7XG4gICAgICAgIC8qKiBQb3NpdGlvbiBvZiB0aGUgbmV4dCBcXG4gY2hhcmFjdGVyLiAqL1xuICAgICAgICB0aGlzLmxpbmVFbmRQb3MgPSBudWxsO1xuICAgICAgICAvKiogU3RvcmVzIHRoZSBzdGF0ZSBvZiB0aGUgbGV4ZXIgaWYgcmVhY2hpbmcgdGhlIGVuZCBvZiBpbmNwb21wbGV0ZSBpbnB1dCAqL1xuICAgICAgICB0aGlzLm5leHQgPSBudWxsO1xuICAgICAgICAvKiogQSBwb2ludGVyIHRvIGBidWZmZXJgOyB0aGUgY3VycmVudCBwb3NpdGlvbiBvZiB0aGUgbGV4ZXIuICovXG4gICAgICAgIHRoaXMucG9zID0gMDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgWUFNTCB0b2tlbnMgZnJvbSB0aGUgYHNvdXJjZWAgc3RyaW5nLiBJZiBgaW5jb21wbGV0ZWAsXG4gICAgICogYSBwYXJ0IG9mIHRoZSBsYXN0IGxpbmUgbWF5IGJlIGxlZnQgYXMgYSBidWZmZXIgZm9yIHRoZSBuZXh0IGNhbGwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIGdlbmVyYXRvciBvZiBsZXhpY2FsIHRva2Vuc1xuICAgICAqL1xuICAgICpsZXgoc291cmNlLCBpbmNvbXBsZXRlID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2UgIT09ICdzdHJpbmcnKVxuICAgICAgICAgICAgICAgIHRocm93IFR5cGVFcnJvcignc291cmNlIGlzIG5vdCBhIHN0cmluZycpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlciA/IHRoaXMuYnVmZmVyICsgc291cmNlIDogc291cmNlO1xuICAgICAgICAgICAgdGhpcy5saW5lRW5kUG9zID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0RW5kID0gIWluY29tcGxldGU7XG4gICAgICAgIGxldCBuZXh0ID0gdGhpcy5uZXh0ID8/ICdzdHJlYW0nO1xuICAgICAgICB3aGlsZSAobmV4dCAmJiAoaW5jb21wbGV0ZSB8fCB0aGlzLmhhc0NoYXJzKDEpKSlcbiAgICAgICAgICAgIG5leHQgPSB5aWVsZCogdGhpcy5wYXJzZU5leHQobmV4dCk7XG4gICAgfVxuICAgIGF0TGluZUVuZCgpIHtcbiAgICAgICAgbGV0IGkgPSB0aGlzLnBvcztcbiAgICAgICAgbGV0IGNoID0gdGhpcy5idWZmZXJbaV07XG4gICAgICAgIHdoaWxlIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFx0JylcbiAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgaWYgKCFjaCB8fCBjaCA9PT0gJyMnIHx8IGNoID09PSAnXFxuJylcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoY2ggPT09ICdcXHInKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyW2kgKyAxXSA9PT0gJ1xcbic7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY2hhckF0KG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMucG9zICsgbl07XG4gICAgfVxuICAgIGNvbnRpbnVlU2NhbGFyKG9mZnNldCkge1xuICAgICAgICBsZXQgY2ggPSB0aGlzLmJ1ZmZlcltvZmZzZXRdO1xuICAgICAgICBpZiAodGhpcy5pbmRlbnROZXh0ID4gMCkge1xuICAgICAgICAgICAgbGV0IGluZGVudCA9IDA7XG4gICAgICAgICAgICB3aGlsZSAoY2ggPT09ICcgJylcbiAgICAgICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraW5kZW50ICsgb2Zmc2V0XTtcbiAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xccicpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5idWZmZXJbaW5kZW50ICsgb2Zmc2V0ICsgMV07XG4gICAgICAgICAgICAgICAgaWYgKG5leHQgPT09ICdcXG4nIHx8ICghbmV4dCAmJiAhdGhpcy5hdEVuZCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZmZzZXQgKyBpbmRlbnQgKyAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNoID09PSAnXFxuJyB8fCBpbmRlbnQgPj0gdGhpcy5pbmRlbnROZXh0IHx8ICghY2ggJiYgIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICAgICAgPyBvZmZzZXQgKyBpbmRlbnRcbiAgICAgICAgICAgICAgICA6IC0xO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjaCA9PT0gJy0nIHx8IGNoID09PSAnLicpIHtcbiAgICAgICAgICAgIGNvbnN0IGR0ID0gdGhpcy5idWZmZXIuc3Vic3RyKG9mZnNldCwgMyk7XG4gICAgICAgICAgICBpZiAoKGR0ID09PSAnLS0tJyB8fCBkdCA9PT0gJy4uLicpICYmIGlzRW1wdHkodGhpcy5idWZmZXJbb2Zmc2V0ICsgM10pKVxuICAgICAgICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2Zmc2V0O1xuICAgIH1cbiAgICBnZXRMaW5lKCkge1xuICAgICAgICBsZXQgZW5kID0gdGhpcy5saW5lRW5kUG9zO1xuICAgICAgICBpZiAodHlwZW9mIGVuZCAhPT0gJ251bWJlcicgfHwgKGVuZCAhPT0gLTEgJiYgZW5kIDwgdGhpcy5wb3MpKSB7XG4gICAgICAgICAgICBlbmQgPSB0aGlzLmJ1ZmZlci5pbmRleE9mKCdcXG4nLCB0aGlzLnBvcyk7XG4gICAgICAgICAgICB0aGlzLmxpbmVFbmRQb3MgPSBlbmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVuZCA9PT0gLTEpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hdEVuZCA/IHRoaXMuYnVmZmVyLnN1YnN0cmluZyh0aGlzLnBvcykgOiBudWxsO1xuICAgICAgICBpZiAodGhpcy5idWZmZXJbZW5kIC0gMV0gPT09ICdcXHInKVxuICAgICAgICAgICAgZW5kIC09IDE7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5zdWJzdHJpbmcodGhpcy5wb3MsIGVuZCk7XG4gICAgfVxuICAgIGhhc0NoYXJzKG4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zICsgbiA8PSB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gICAgfVxuICAgIHNldE5leHQoc3RhdGUpIHtcbiAgICAgICAgdGhpcy5idWZmZXIgPSB0aGlzLmJ1ZmZlci5zdWJzdHJpbmcodGhpcy5wb3MpO1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMubGluZUVuZFBvcyA9IG51bGw7XG4gICAgICAgIHRoaXMubmV4dCA9IHN0YXRlO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcGVlayhuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5zdWJzdHIodGhpcy5wb3MsIG4pO1xuICAgIH1cbiAgICAqcGFyc2VOZXh0KG5leHQpIHtcbiAgICAgICAgc3dpdGNoIChuZXh0KSB7XG4gICAgICAgICAgICBjYXNlICdzdHJlYW0nOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVN0cmVhbSgpO1xuICAgICAgICAgICAgY2FzZSAnbGluZS1zdGFydCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlTGluZVN0YXJ0KCk7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zdGFydCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTdGFydCgpO1xuICAgICAgICAgICAgY2FzZSAnZG9jJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VEb2N1bWVudCgpO1xuICAgICAgICAgICAgY2FzZSAnZmxvdyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlRmxvd0NvbGxlY3Rpb24oKTtcbiAgICAgICAgICAgIGNhc2UgJ3F1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZVF1b3RlZFNjYWxhcigpO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VCbG9ja1NjYWxhcigpO1xuICAgICAgICAgICAgY2FzZSAncGxhaW4tc2NhbGFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VQbGFpblNjYWxhcigpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpwYXJzZVN0cmVhbSgpIHtcbiAgICAgICAgbGV0IGxpbmUgPSB0aGlzLmdldExpbmUoKTtcbiAgICAgICAgaWYgKGxpbmUgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdzdHJlYW0nKTtcbiAgICAgICAgaWYgKGxpbmVbMF0gPT09IEJPTSkge1xuICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgbGluZSA9IGxpbmUuc3Vic3RyaW5nKDEpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChsaW5lWzBdID09PSAnJScpIHtcbiAgICAgICAgICAgIGxldCBkaXJFbmQgPSBsaW5lLmxlbmd0aDtcbiAgICAgICAgICAgIGxldCBjcyA9IGxpbmUuaW5kZXhPZignIycpO1xuICAgICAgICAgICAgd2hpbGUgKGNzICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoID0gbGluZVtjcyAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFx0Jykge1xuICAgICAgICAgICAgICAgICAgICBkaXJFbmQgPSBjcyAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY3MgPSBsaW5lLmluZGV4T2YoJyMnLCBjcyArIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2ggPSBsaW5lW2RpckVuZCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJyAnIHx8IGNoID09PSAnXFx0JylcbiAgICAgICAgICAgICAgICAgICAgZGlyRW5kIC09IDE7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IG4gPSAoeWllbGQqIHRoaXMucHVzaENvdW50KGRpckVuZCkpICsgKHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSkpO1xuICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KGxpbmUubGVuZ3RoIC0gbik7IC8vIHBvc3NpYmxlIGNvbW1lbnRcbiAgICAgICAgICAgIHRoaXMucHVzaE5ld2xpbmUoKTtcbiAgICAgICAgICAgIHJldHVybiAnc3RyZWFtJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hdExpbmVFbmQoKSkge1xuICAgICAgICAgICAgY29uc3Qgc3AgPSB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpO1xuICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KGxpbmUubGVuZ3RoIC0gc3ApO1xuICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaE5ld2xpbmUoKTtcbiAgICAgICAgICAgIHJldHVybiAnc3RyZWFtJztcbiAgICAgICAgfVxuICAgICAgICB5aWVsZCBET0NVTUVOVDtcbiAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlTGluZVN0YXJ0KCk7XG4gICAgfVxuICAgICpwYXJzZUxpbmVTdGFydCgpIHtcbiAgICAgICAgY29uc3QgY2ggPSB0aGlzLmNoYXJBdCgwKTtcbiAgICAgICAgaWYgKCFjaCAmJiAhdGhpcy5hdEVuZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2xpbmUtc3RhcnQnKTtcbiAgICAgICAgaWYgKGNoID09PSAnLScgfHwgY2ggPT09ICcuJykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmF0RW5kICYmICF0aGlzLmhhc0NoYXJzKDQpKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2xpbmUtc3RhcnQnKTtcbiAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLnBlZWsoMyk7XG4gICAgICAgICAgICBpZiAoKHMgPT09ICctLS0nIHx8IHMgPT09ICcuLi4nKSAmJiBpc0VtcHR5KHRoaXMuY2hhckF0KDMpKSkge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgzKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGVudFZhbHVlID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGVudE5leHQgPSAwO1xuICAgICAgICAgICAgICAgIHJldHVybiBzID09PSAnLS0tJyA/ICdkb2MnIDogJ3N0cmVhbSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbmRlbnRWYWx1ZSA9IHlpZWxkKiB0aGlzLnB1c2hTcGFjZXMoZmFsc2UpO1xuICAgICAgICBpZiAodGhpcy5pbmRlbnROZXh0ID4gdGhpcy5pbmRlbnRWYWx1ZSAmJiAhaXNFbXB0eSh0aGlzLmNoYXJBdCgxKSkpXG4gICAgICAgICAgICB0aGlzLmluZGVudE5leHQgPSB0aGlzLmluZGVudFZhbHVlO1xuICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VCbG9ja1N0YXJ0KCk7XG4gICAgfVxuICAgICpwYXJzZUJsb2NrU3RhcnQoKSB7XG4gICAgICAgIGNvbnN0IFtjaDAsIGNoMV0gPSB0aGlzLnBlZWsoMik7XG4gICAgICAgIGlmICghY2gxICYmICF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnYmxvY2stc3RhcnQnKTtcbiAgICAgICAgaWYgKChjaDAgPT09ICctJyB8fCBjaDAgPT09ICc/JyB8fCBjaDAgPT09ICc6JykgJiYgaXNFbXB0eShjaDEpKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gKHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKSkgKyAoeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKSk7XG4gICAgICAgICAgICB0aGlzLmluZGVudE5leHQgPSB0aGlzLmluZGVudFZhbHVlICsgMTtcbiAgICAgICAgICAgIHRoaXMuaW5kZW50VmFsdWUgKz0gbjtcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU3RhcnQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ2RvYyc7XG4gICAgfVxuICAgICpwYXJzZURvY3VtZW50KCkge1xuICAgICAgICB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpO1xuICAgICAgICBjb25zdCBsaW5lID0gdGhpcy5nZXRMaW5lKCk7XG4gICAgICAgIGlmIChsaW5lID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnZG9jJyk7XG4gICAgICAgIGxldCBuID0geWllbGQqIHRoaXMucHVzaEluZGljYXRvcnMoKTtcbiAgICAgICAgc3dpdGNoIChsaW5lW25dKSB7XG4gICAgICAgICAgICBjYXNlICcjJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQobGluZS5sZW5ndGggLSBuKTtcbiAgICAgICAgICAgIC8vIGZhbGx0aHJvdWdoXG4gICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoTmV3bGluZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wYXJzZUxpbmVTdGFydCgpO1xuICAgICAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgICBjYXNlICdbJzpcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93TGV2ZWwgPSAxO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZmxvdyc7XG4gICAgICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICAgIGNhc2UgJ10nOlxuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYW4gZXJyb3JcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb2MnO1xuICAgICAgICAgICAgY2FzZSAnKic6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaFVudGlsKGlzTm90QW5jaG9yQ2hhcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb2MnO1xuICAgICAgICAgICAgY2FzZSAnXCInOlxuICAgICAgICAgICAgY2FzZSBcIidcIjpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VRdW90ZWRTY2FsYXIoKTtcbiAgICAgICAgICAgIGNhc2UgJ3wnOlxuICAgICAgICAgICAgY2FzZSAnPic6XG4gICAgICAgICAgICAgICAgbiArPSB5aWVsZCogdGhpcy5wYXJzZUJsb2NrU2NhbGFySGVhZGVyKCk7XG4gICAgICAgICAgICAgICAgbiArPSB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hDb3VudChsaW5lLmxlbmd0aCAtIG4pO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hOZXdsaW5lKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlQmxvY2tTY2FsYXIoKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlUGxhaW5TY2FsYXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqcGFyc2VGbG93Q29sbGVjdGlvbigpIHtcbiAgICAgICAgbGV0IG5sLCBzcDtcbiAgICAgICAgbGV0IGluZGVudCA9IC0xO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICBubCA9IHlpZWxkKiB0aGlzLnB1c2hOZXdsaW5lKCk7XG4gICAgICAgICAgICBpZiAobmwgPiAwKSB7XG4gICAgICAgICAgICAgICAgc3AgPSB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKGZhbHNlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGVudFZhbHVlID0gaW5kZW50ID0gc3A7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzcCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzcCArPSB5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpO1xuICAgICAgICB9IHdoaWxlIChubCArIHNwID4gMCk7XG4gICAgICAgIGNvbnN0IGxpbmUgPSB0aGlzLmdldExpbmUoKTtcbiAgICAgICAgaWYgKGxpbmUgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdmbG93Jyk7XG4gICAgICAgIGlmICgoaW5kZW50ICE9PSAtMSAmJiBpbmRlbnQgPCB0aGlzLmluZGVudE5leHQgJiYgbGluZVswXSAhPT0gJyMnKSB8fFxuICAgICAgICAgICAgKGluZGVudCA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIChsaW5lLnN0YXJ0c1dpdGgoJy0tLScpIHx8IGxpbmUuc3RhcnRzV2l0aCgnLi4uJykpICYmXG4gICAgICAgICAgICAgICAgaXNFbXB0eShsaW5lWzNdKSkpIHtcbiAgICAgICAgICAgIC8vIEFsbG93aW5nIGZvciB0aGUgdGVybWluYWwgXSBvciB9IGF0IHRoZSBzYW1lIChyYXRoZXIgdGhhbiBncmVhdGVyKVxuICAgICAgICAgICAgLy8gaW5kZW50IGxldmVsIGFzIHRoZSBpbml0aWFsIFsgb3IgeyBpcyB0ZWNobmljYWxseSBpbnZhbGlkLCBidXRcbiAgICAgICAgICAgIC8vIGZhaWxpbmcgaGVyZSB3b3VsZCBiZSBzdXJwcmlzaW5nIHRvIHVzZXJzLlxuICAgICAgICAgICAgY29uc3QgYXRGbG93RW5kTWFya2VyID0gaW5kZW50ID09PSB0aGlzLmluZGVudE5leHQgLSAxICYmXG4gICAgICAgICAgICAgICAgdGhpcy5mbG93TGV2ZWwgPT09IDEgJiZcbiAgICAgICAgICAgICAgICAobGluZVswXSA9PT0gJ10nIHx8IGxpbmVbMF0gPT09ICd9Jyk7XG4gICAgICAgICAgICBpZiAoIWF0Rmxvd0VuZE1hcmtlcikge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYW4gZXJyb3JcbiAgICAgICAgICAgICAgICB0aGlzLmZsb3dMZXZlbCA9IDA7XG4gICAgICAgICAgICAgICAgeWllbGQgRkxPV19FTkQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlTGluZVN0YXJ0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG4gPSAwO1xuICAgICAgICB3aGlsZSAobGluZVtuXSA9PT0gJywnKSB7XG4gICAgICAgICAgICBuICs9IHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgICAgIG4gKz0geWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG4gKz0geWllbGQqIHRoaXMucHVzaEluZGljYXRvcnMoKTtcbiAgICAgICAgc3dpdGNoIChsaW5lW25dKSB7XG4gICAgICAgICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2Zsb3cnO1xuICAgICAgICAgICAgY2FzZSAnIyc6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KGxpbmUubGVuZ3RoIC0gbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgIGNhc2UgJ3snOlxuICAgICAgICAgICAgY2FzZSAnWyc6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0xldmVsICs9IDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuICdmbG93JztcbiAgICAgICAgICAgIGNhc2UgJ30nOlxuICAgICAgICAgICAgY2FzZSAnXSc6XG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucHVzaENvdW50KDEpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93TGV2ZWwgLT0gMTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mbG93TGV2ZWwgPyAnZmxvdycgOiAnZG9jJztcbiAgICAgICAgICAgIGNhc2UgJyonOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hVbnRpbChpc05vdEFuY2hvckNoYXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiAnZmxvdyc7XG4gICAgICAgICAgICBjYXNlICdcIic6XG4gICAgICAgICAgICBjYXNlIFwiJ1wiOlxuICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlUXVvdGVkU2NhbGFyKCk7XG4gICAgICAgICAgICBjYXNlICc6Jzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLmNoYXJBdCgxKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mbG93S2V5IHx8IGlzRW1wdHkobmV4dCkgfHwgbmV4dCA9PT0gJywnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmxvd0tleSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wdXNoQ291bnQoMSk7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZmxvdyc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gZmFsbHRocm91Z2hcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5mbG93S2V5ID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnBhcnNlUGxhaW5TY2FsYXIoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqcGFyc2VRdW90ZWRTY2FsYXIoKSB7XG4gICAgICAgIGNvbnN0IHF1b3RlID0gdGhpcy5jaGFyQXQoMCk7XG4gICAgICAgIGxldCBlbmQgPSB0aGlzLmJ1ZmZlci5pbmRleE9mKHF1b3RlLCB0aGlzLnBvcyArIDEpO1xuICAgICAgICBpZiAocXVvdGUgPT09IFwiJ1wiKSB7XG4gICAgICAgICAgICB3aGlsZSAoZW5kICE9PSAtMSAmJiB0aGlzLmJ1ZmZlcltlbmQgKyAxXSA9PT0gXCInXCIpXG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5idWZmZXIuaW5kZXhPZihcIidcIiwgZW5kICsgMik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBkb3VibGUtcXVvdGVcbiAgICAgICAgICAgIHdoaWxlIChlbmQgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgbGV0IG4gPSAwO1xuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLmJ1ZmZlcltlbmQgLSAxIC0gbl0gPT09ICdcXFxcJylcbiAgICAgICAgICAgICAgICAgICAgbiArPSAxO1xuICAgICAgICAgICAgICAgIGlmIChuICUgMiA9PT0gMClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZW5kID0gdGhpcy5idWZmZXIuaW5kZXhPZignXCInLCBlbmQgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBPbmx5IGxvb2tpbmcgZm9yIG5ld2xpbmVzIHdpdGhpbiB0aGUgcXVvdGVzXG4gICAgICAgIGNvbnN0IHFiID0gdGhpcy5idWZmZXIuc3Vic3RyaW5nKDAsIGVuZCk7XG4gICAgICAgIGxldCBubCA9IHFiLmluZGV4T2YoJ1xcbicsIHRoaXMucG9zKTtcbiAgICAgICAgaWYgKG5sICE9PSAtMSkge1xuICAgICAgICAgICAgd2hpbGUgKG5sICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNzID0gdGhpcy5jb250aW51ZVNjYWxhcihubCArIDEpO1xuICAgICAgICAgICAgICAgIGlmIChjcyA9PT0gLTEpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIG5sID0gcWIuaW5kZXhPZignXFxuJywgY3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5sICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIHRoaXMgaXMgYW4gZXJyb3IgY2F1c2VkIGJ5IGFuIHVuZXhwZWN0ZWQgdW5pbmRlbnRcbiAgICAgICAgICAgICAgICBlbmQgPSBubCAtIChxYltubCAtIDFdID09PSAnXFxyJyA/IDIgOiAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoZW5kID09PSAtMSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmF0RW5kKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ3F1b3RlZC1zY2FsYXInKTtcbiAgICAgICAgICAgIGVuZCA9IHRoaXMuYnVmZmVyLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChlbmQgKyAxLCBmYWxzZSk7XG4gICAgICAgIHJldHVybiB0aGlzLmZsb3dMZXZlbCA/ICdmbG93JyA6ICdkb2MnO1xuICAgIH1cbiAgICAqcGFyc2VCbG9ja1NjYWxhckhlYWRlcigpIHtcbiAgICAgICAgdGhpcy5ibG9ja1NjYWxhckluZGVudCA9IC0xO1xuICAgICAgICB0aGlzLmJsb2NrU2NhbGFyS2VlcCA9IGZhbHNlO1xuICAgICAgICBsZXQgaSA9IHRoaXMucG9zO1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgY29uc3QgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICAgICAgaWYgKGNoID09PSAnKycpXG4gICAgICAgICAgICAgICAgdGhpcy5ibG9ja1NjYWxhcktlZXAgPSB0cnVlO1xuICAgICAgICAgICAgZWxzZSBpZiAoY2ggPiAnMCcgJiYgY2ggPD0gJzknKVxuICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tTY2FsYXJJbmRlbnQgPSBOdW1iZXIoY2gpIC0gMTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNoICE9PSAnLScpXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnB1c2hVbnRpbChjaCA9PiBpc0VtcHR5KGNoKSB8fCBjaCA9PT0gJyMnKTtcbiAgICB9XG4gICAgKnBhcnNlQmxvY2tTY2FsYXIoKSB7XG4gICAgICAgIGxldCBubCA9IHRoaXMucG9zIC0gMTsgLy8gbWF5IGJlIC0xIGlmIHRoaXMucG9zID09PSAwXG4gICAgICAgIGxldCBpbmRlbnQgPSAwO1xuICAgICAgICBsZXQgY2g7XG4gICAgICAgIGxvb3A6IGZvciAobGV0IGkgPSB0aGlzLnBvczsgKGNoID0gdGhpcy5idWZmZXJbaV0pOyArK2kpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoY2gpIHtcbiAgICAgICAgICAgICAgICBjYXNlICcgJzpcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50ICs9IDE7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ1xcbic6XG4gICAgICAgICAgICAgICAgICAgIG5sID0gaTtcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnXFxyJzoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0ID0gdGhpcy5idWZmZXJbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIW5leHQgJiYgIXRoaXMuYXRFbmQpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zZXROZXh0KCdibG9jay1zY2FsYXInKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5leHQgPT09ICdcXG4nKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfSAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjaCAmJiAhdGhpcy5hdEVuZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ2Jsb2NrLXNjYWxhcicpO1xuICAgICAgICBpZiAoaW5kZW50ID49IHRoaXMuaW5kZW50TmV4dCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuYmxvY2tTY2FsYXJJbmRlbnQgPT09IC0xKVxuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IGluZGVudDtcbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50TmV4dCA9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmxvY2tTY2FsYXJJbmRlbnQgKyAodGhpcy5pbmRlbnROZXh0ID09PSAwID8gMSA6IHRoaXMuaW5kZW50TmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgY29uc3QgY3MgPSB0aGlzLmNvbnRpbnVlU2NhbGFyKG5sICsgMSk7XG4gICAgICAgICAgICAgICAgaWYgKGNzID09PSAtMSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgbmwgPSB0aGlzLmJ1ZmZlci5pbmRleE9mKCdcXG4nLCBjcyk7XG4gICAgICAgICAgICB9IHdoaWxlIChubCAhPT0gLTEpO1xuICAgICAgICAgICAgaWYgKG5sID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy5hdEVuZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0TmV4dCgnYmxvY2stc2NhbGFyJyk7XG4gICAgICAgICAgICAgICAgbmwgPSB0aGlzLmJ1ZmZlci5sZW5ndGg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gVHJhaWxpbmcgaW5zdWZmaWNpZW50bHkgaW5kZW50ZWQgdGFicyBhcmUgaW52YWxpZC5cbiAgICAgICAgLy8gVG8gY2F0Y2ggdGhhdCBkdXJpbmcgcGFyc2luZywgd2UgaW5jbHVkZSB0aGVtIGluIHRoZSBibG9jayBzY2FsYXIgdmFsdWUuXG4gICAgICAgIGxldCBpID0gbmwgKyAxO1xuICAgICAgICBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICB3aGlsZSAoY2ggPT09ICcgJylcbiAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKytpXTtcbiAgICAgICAgaWYgKGNoID09PSAnXFx0Jykge1xuICAgICAgICAgICAgd2hpbGUgKGNoID09PSAnXFx0JyB8fCBjaCA9PT0gJyAnIHx8IGNoID09PSAnXFxyJyB8fCBjaCA9PT0gJ1xcbicpXG4gICAgICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICAgICAgbmwgPSBpIC0gMTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghdGhpcy5ibG9ja1NjYWxhcktlZXApIHtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICBsZXQgaSA9IG5sIC0gMTtcbiAgICAgICAgICAgICAgICBsZXQgY2ggPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgICAgICAgICBpZiAoY2ggPT09ICdcXHInKVxuICAgICAgICAgICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWy0taV07XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdENoYXIgPSBpOyAvLyBEcm9wIHRoZSBsaW5lIGlmIGxhc3QgY2hhciBub3QgbW9yZSBpbmRlbnRlZFxuICAgICAgICAgICAgICAgIHdoaWxlIChjaCA9PT0gJyAnKVxuICAgICAgICAgICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWy0taV07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxuJyAmJiBpID49IHRoaXMucG9zICYmIGkgKyAxICsgaW5kZW50ID4gbGFzdENoYXIpXG4gICAgICAgICAgICAgICAgICAgIG5sID0gaTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfSB3aGlsZSAodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQgU0NBTEFSO1xuICAgICAgICB5aWVsZCogdGhpcy5wdXNoVG9JbmRleChubCArIDEsIHRydWUpO1xuICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucGFyc2VMaW5lU3RhcnQoKTtcbiAgICB9XG4gICAgKnBhcnNlUGxhaW5TY2FsYXIoKSB7XG4gICAgICAgIGNvbnN0IGluRmxvdyA9IHRoaXMuZmxvd0xldmVsID4gMDtcbiAgICAgICAgbGV0IGVuZCA9IHRoaXMucG9zIC0gMTtcbiAgICAgICAgbGV0IGkgPSB0aGlzLnBvcyAtIDE7XG4gICAgICAgIGxldCBjaDtcbiAgICAgICAgd2hpbGUgKChjaCA9IHRoaXMuYnVmZmVyWysraV0pKSB7XG4gICAgICAgICAgICBpZiAoY2ggPT09ICc6Jykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG5leHQgPSB0aGlzLmJ1ZmZlcltpICsgMV07XG4gICAgICAgICAgICAgICAgaWYgKGlzRW1wdHkobmV4dCkgfHwgKGluRmxvdyAmJiBmbG93SW5kaWNhdG9yQ2hhcnMuaGFzKG5leHQpKSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzRW1wdHkoY2gpKSB7XG4gICAgICAgICAgICAgICAgbGV0IG5leHQgPSB0aGlzLmJ1ZmZlcltpICsgMV07XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxyJykge1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCA9PT0gJ1xcbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgKz0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoID0gJ1xcbic7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0ID0gdGhpcy5idWZmZXJbaSArIDFdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChuZXh0ID09PSAnIycgfHwgKGluRmxvdyAmJiBmbG93SW5kaWNhdG9yQ2hhcnMuaGFzKG5leHQpKSlcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgaWYgKGNoID09PSAnXFxuJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjcyA9IHRoaXMuY29udGludWVTY2FsYXIoaSArIDEpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3MgPT09IC0xKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGkgPSBNYXRoLm1heChpLCBjcyAtIDIpOyAvLyB0byBhZHZhbmNlLCBidXQgc3RpbGwgYWNjb3VudCBmb3IgJyAjJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChpbkZsb3cgJiYgZmxvd0luZGljYXRvckNoYXJzLmhhcyhjaCkpXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGVuZCA9IGk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjaCAmJiAhdGhpcy5hdEVuZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldE5leHQoJ3BsYWluLXNjYWxhcicpO1xuICAgICAgICB5aWVsZCBTQ0FMQVI7XG4gICAgICAgIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KGVuZCArIDEsIHRydWUpO1xuICAgICAgICByZXR1cm4gaW5GbG93ID8gJ2Zsb3cnIDogJ2RvYyc7XG4gICAgfVxuICAgICpwdXNoQ291bnQobikge1xuICAgICAgICBpZiAobiA+IDApIHtcbiAgICAgICAgICAgIHlpZWxkIHRoaXMuYnVmZmVyLnN1YnN0cih0aGlzLnBvcywgbik7XG4gICAgICAgICAgICB0aGlzLnBvcyArPSBuO1xuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgICpwdXNoVG9JbmRleChpLCBhbGxvd0VtcHR5KSB7XG4gICAgICAgIGNvbnN0IHMgPSB0aGlzLmJ1ZmZlci5zbGljZSh0aGlzLnBvcywgaSk7XG4gICAgICAgIGlmIChzKSB7XG4gICAgICAgICAgICB5aWVsZCBzO1xuICAgICAgICAgICAgdGhpcy5wb3MgKz0gcy5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm4gcy5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYWxsb3dFbXB0eSlcbiAgICAgICAgICAgIHlpZWxkICcnO1xuICAgICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgKnB1c2hJbmRpY2F0b3JzKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuY2hhckF0KDApKSB7XG4gICAgICAgICAgICBjYXNlICchJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKCh5aWVsZCogdGhpcy5wdXNoVGFnKCkpICtcbiAgICAgICAgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hTcGFjZXModHJ1ZSkpICtcbiAgICAgICAgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hJbmRpY2F0b3JzKCkpKTtcbiAgICAgICAgICAgIGNhc2UgJyYnOlxuICAgICAgICAgICAgICAgIHJldHVybiAoKHlpZWxkKiB0aGlzLnB1c2hVbnRpbChpc05vdEFuY2hvckNoYXIpKSArXG4gICAgICAgICAgICAgICAgICAgICh5aWVsZCogdGhpcy5wdXNoU3BhY2VzKHRydWUpKSArXG4gICAgICAgICAgICAgICAgICAgICh5aWVsZCogdGhpcy5wdXNoSW5kaWNhdG9ycygpKSk7XG4gICAgICAgICAgICBjYXNlICctJzogLy8gdGhpcyBpcyBhbiBlcnJvclxuICAgICAgICAgICAgY2FzZSAnPyc6IC8vIHRoaXMgaXMgYW4gZXJyb3Igb3V0c2lkZSBmbG93IGNvbGxlY3Rpb25zXG4gICAgICAgICAgICBjYXNlICc6Jzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGluRmxvdyA9IHRoaXMuZmxvd0xldmVsID4gMDtcbiAgICAgICAgICAgICAgICBjb25zdCBjaDEgPSB0aGlzLmNoYXJBdCgxKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNFbXB0eShjaDEpIHx8IChpbkZsb3cgJiYgZmxvd0luZGljYXRvckNoYXJzLmhhcyhjaDEpKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWluRmxvdylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50TmV4dCA9IHRoaXMuaW5kZW50VmFsdWUgKyAxO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLmZsb3dLZXkpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZsb3dLZXkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgoeWllbGQqIHRoaXMucHVzaENvdW50KDEpKSArXG4gICAgICAgICAgICAgICAgICAgICAgICAoeWllbGQqIHRoaXMucHVzaFNwYWNlcyh0cnVlKSkgK1xuICAgICAgICAgICAgICAgICAgICAgICAgKHlpZWxkKiB0aGlzLnB1c2hJbmRpY2F0b3JzKCkpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgICpwdXNoVGFnKCkge1xuICAgICAgICBpZiAodGhpcy5jaGFyQXQoMSkgPT09ICc8Jykge1xuICAgICAgICAgICAgbGV0IGkgPSB0aGlzLnBvcyArIDI7XG4gICAgICAgICAgICBsZXQgY2ggPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgICAgIHdoaWxlICghaXNFbXB0eShjaCkgJiYgY2ggIT09ICc+JylcbiAgICAgICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaFRvSW5kZXgoY2ggPT09ICc+JyA/IGkgKyAxIDogaSwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgbGV0IGkgPSB0aGlzLnBvcyArIDE7XG4gICAgICAgICAgICBsZXQgY2ggPSB0aGlzLmJ1ZmZlcltpXTtcbiAgICAgICAgICAgIHdoaWxlIChjaCkge1xuICAgICAgICAgICAgICAgIGlmICh0YWdDaGFycy5oYXMoY2gpKVxuICAgICAgICAgICAgICAgICAgICBjaCA9IHRoaXMuYnVmZmVyWysraV07XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoY2ggPT09ICclJyAmJlxuICAgICAgICAgICAgICAgICAgICBoZXhEaWdpdHMuaGFzKHRoaXMuYnVmZmVyW2kgKyAxXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgaGV4RGlnaXRzLmhhcyh0aGlzLmJ1ZmZlcltpICsgMl0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGNoID0gdGhpcy5idWZmZXJbKGkgKz0gMyldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnB1c2hUb0luZGV4KGksIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqcHVzaE5ld2xpbmUoKSB7XG4gICAgICAgIGNvbnN0IGNoID0gdGhpcy5idWZmZXJbdGhpcy5wb3NdO1xuICAgICAgICBpZiAoY2ggPT09ICdcXG4nKVxuICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnB1c2hDb3VudCgxKTtcbiAgICAgICAgZWxzZSBpZiAoY2ggPT09ICdcXHInICYmIHRoaXMuY2hhckF0KDEpID09PSAnXFxuJylcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5wdXNoQ291bnQoMik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgIH1cbiAgICAqcHVzaFNwYWNlcyhhbGxvd1RhYnMpIHtcbiAgICAgICAgbGV0IGkgPSB0aGlzLnBvcyAtIDE7XG4gICAgICAgIGxldCBjaDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICB9IHdoaWxlIChjaCA9PT0gJyAnIHx8IChhbGxvd1RhYnMgJiYgY2ggPT09ICdcXHQnKSk7XG4gICAgICAgIGNvbnN0IG4gPSBpIC0gdGhpcy5wb3M7XG4gICAgICAgIGlmIChuID4gMCkge1xuICAgICAgICAgICAgeWllbGQgdGhpcy5idWZmZXIuc3Vic3RyKHRoaXMucG9zLCBuKTtcbiAgICAgICAgICAgIHRoaXMucG9zID0gaTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbjtcbiAgICB9XG4gICAgKnB1c2hVbnRpbCh0ZXN0KSB7XG4gICAgICAgIGxldCBpID0gdGhpcy5wb3M7XG4gICAgICAgIGxldCBjaCA9IHRoaXMuYnVmZmVyW2ldO1xuICAgICAgICB3aGlsZSAoIXRlc3QoY2gpKVxuICAgICAgICAgICAgY2ggPSB0aGlzLmJ1ZmZlclsrK2ldO1xuICAgICAgICByZXR1cm4geWllbGQqIHRoaXMucHVzaFRvSW5kZXgoaSwgZmFsc2UpO1xuICAgIH1cbn1cblxuZXhwb3J0IHsgTGV4ZXIgfTtcbiIsIi8qKlxuICogVHJhY2tzIG5ld2xpbmVzIGR1cmluZyBwYXJzaW5nIGluIG9yZGVyIHRvIHByb3ZpZGUgYW4gZWZmaWNpZW50IEFQSSBmb3JcbiAqIGRldGVybWluaW5nIHRoZSBvbmUtaW5kZXhlZCBgeyBsaW5lLCBjb2wgfWAgcG9zaXRpb24gZm9yIGFueSBvZmZzZXRcbiAqIHdpdGhpbiB0aGUgaW5wdXQuXG4gKi9cbmNsYXNzIExpbmVDb3VudGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5saW5lU3RhcnRzID0gW107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaG91bGQgYmUgY2FsbGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLCBjYWxsXG4gICAgICAgICAqIGBsaW5lQ291bnRlci5saW5lU3RhcnRzLnNvcnQoKWAgYmVmb3JlIGNhbGxpbmcgYGxpbmVQb3MoKWAuXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmFkZE5ld0xpbmUgPSAob2Zmc2V0KSA9PiB0aGlzLmxpbmVTdGFydHMucHVzaChvZmZzZXQpO1xuICAgICAgICAvKipcbiAgICAgICAgICogUGVyZm9ybXMgYSBiaW5hcnkgc2VhcmNoIGFuZCByZXR1cm5zIHRoZSAxLWluZGV4ZWQgeyBsaW5lLCBjb2wgfVxuICAgICAgICAgKiBwb3NpdGlvbiBvZiBgb2Zmc2V0YC4gSWYgYGxpbmUgPT09IDBgLCBgYWRkTmV3TGluZWAgaGFzIG5ldmVyIGJlZW5cbiAgICAgICAgICogY2FsbGVkIG9yIGBvZmZzZXRgIGlzIGJlZm9yZSB0aGUgZmlyc3Qga25vd24gbmV3bGluZS5cbiAgICAgICAgICovXG4gICAgICAgIHRoaXMubGluZVBvcyA9IChvZmZzZXQpID0+IHtcbiAgICAgICAgICAgIGxldCBsb3cgPSAwO1xuICAgICAgICAgICAgbGV0IGhpZ2ggPSB0aGlzLmxpbmVTdGFydHMubGVuZ3RoO1xuICAgICAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBtaWQgPSAobG93ICsgaGlnaCkgPj4gMTsgLy8gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxpbmVTdGFydHNbbWlkXSA8IG9mZnNldClcbiAgICAgICAgICAgICAgICAgICAgbG93ID0gbWlkICsgMTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5saW5lU3RhcnRzW2xvd10gPT09IG9mZnNldClcbiAgICAgICAgICAgICAgICByZXR1cm4geyBsaW5lOiBsb3cgKyAxLCBjb2w6IDEgfTtcbiAgICAgICAgICAgIGlmIChsb3cgPT09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbGluZTogMCwgY29sOiBvZmZzZXQgfTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gdGhpcy5saW5lU3RhcnRzW2xvdyAtIDFdO1xuICAgICAgICAgICAgcmV0dXJuIHsgbGluZTogbG93LCBjb2w6IG9mZnNldCAtIHN0YXJ0ICsgMSB9O1xuICAgICAgICB9O1xuICAgIH1cbn1cblxuZXhwb3J0IHsgTGluZUNvdW50ZXIgfTtcbiIsImltcG9ydCB7IHRva2VuVHlwZSB9IGZyb20gJy4vY3N0LmpzJztcbmltcG9ydCB7IExleGVyIH0gZnJvbSAnLi9sZXhlci5qcyc7XG5cbmZ1bmN0aW9uIGluY2x1ZGVzVG9rZW4obGlzdCwgdHlwZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSlcbiAgICAgICAgaWYgKGxpc3RbaV0udHlwZSA9PT0gdHlwZSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGZpbmROb25FbXB0eUluZGV4KGxpc3QpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgc3dpdGNoIChsaXN0W2ldLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgY2FzZSAnbmV3bGluZSc6XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbmZ1bmN0aW9uIGlzRmxvd1Rva2VuKHRva2VuKSB7XG4gICAgc3dpdGNoICh0b2tlbj8udHlwZSkge1xuICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICBjYXNlICdmbG93LWNvbGxlY3Rpb24nOlxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0UHJldlByb3BzKHBhcmVudCkge1xuICAgIHN3aXRjaCAocGFyZW50LnR5cGUpIHtcbiAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5zdGFydDtcbiAgICAgICAgY2FzZSAnYmxvY2stbWFwJzoge1xuICAgICAgICAgICAgY29uc3QgaXQgPSBwYXJlbnQuaXRlbXNbcGFyZW50Lml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgcmV0dXJuIGl0LnNlcCA/PyBpdC5zdGFydDtcbiAgICAgICAgfVxuICAgICAgICBjYXNlICdibG9jay1zZXEnOlxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudC5pdGVtc1twYXJlbnQuaXRlbXMubGVuZ3RoIC0gMV0uc3RhcnQ7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgfVxufVxuLyoqIE5vdGU6IE1heSBtb2RpZnkgaW5wdXQgYXJyYXkgKi9cbmZ1bmN0aW9uIGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KSB7XG4gICAgaWYgKHByZXYubGVuZ3RoID09PSAwKVxuICAgICAgICByZXR1cm4gW107XG4gICAgbGV0IGkgPSBwcmV2Lmxlbmd0aDtcbiAgICBsb29wOiB3aGlsZSAoLS1pID49IDApIHtcbiAgICAgICAgc3dpdGNoIChwcmV2W2ldLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1zdGFydCc6XG4gICAgICAgICAgICBjYXNlICdleHBsaWNpdC1rZXktaW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOlxuICAgICAgICAgICAgY2FzZSAnc2VxLWl0ZW0taW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGJyZWFrIGxvb3A7XG4gICAgICAgIH1cbiAgICB9XG4gICAgd2hpbGUgKHByZXZbKytpXT8udHlwZSA9PT0gJ3NwYWNlJykge1xuICAgICAgICAvKiBsb29wICovXG4gICAgfVxuICAgIHJldHVybiBwcmV2LnNwbGljZShpLCBwcmV2Lmxlbmd0aCk7XG59XG5mdW5jdGlvbiBmaXhGbG93U2VxSXRlbXMoZmMpIHtcbiAgICBpZiAoZmMuc3RhcnQudHlwZSA9PT0gJ2Zsb3ctc2VxLXN0YXJ0Jykge1xuICAgICAgICBmb3IgKGNvbnN0IGl0IG9mIGZjLml0ZW1zKSB7XG4gICAgICAgICAgICBpZiAoaXQuc2VwICYmXG4gICAgICAgICAgICAgICAgIWl0LnZhbHVlICYmXG4gICAgICAgICAgICAgICAgIWluY2x1ZGVzVG9rZW4oaXQuc3RhcnQsICdleHBsaWNpdC1rZXktaW5kJykgJiZcbiAgICAgICAgICAgICAgICAhaW5jbHVkZXNUb2tlbihpdC5zZXAsICdtYXAtdmFsdWUtaW5kJykpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXQua2V5KVxuICAgICAgICAgICAgICAgICAgICBpdC52YWx1ZSA9IGl0LmtleTtcbiAgICAgICAgICAgICAgICBkZWxldGUgaXQua2V5O1xuICAgICAgICAgICAgICAgIGlmIChpc0Zsb3dUb2tlbihpdC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlLmVuZClcbiAgICAgICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGl0LnZhbHVlLmVuZCwgaXQuc2VwKTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQudmFsdWUuZW5kID0gaXQuc2VwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGl0LnN0YXJ0LCBpdC5zZXApO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBpdC5zZXA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG4vKipcbiAqIEEgWUFNTCBjb25jcmV0ZSBzeW50YXggdHJlZSAoQ1NUKSBwYXJzZXJcbiAqXG4gKiBgYGB0c1xuICogY29uc3Qgc3JjOiBzdHJpbmcgPSAuLi5cbiAqIGZvciAoY29uc3QgdG9rZW4gb2YgbmV3IFBhcnNlcigpLnBhcnNlKHNyYykpIHtcbiAqICAgLy8gdG9rZW46IFRva2VuXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBUbyB1c2UgdGhlIHBhcnNlciB3aXRoIGEgdXNlci1wcm92aWRlZCBsZXhlcjpcbiAqXG4gKiBgYGB0c1xuICogZnVuY3Rpb24qIHBhcnNlKHNvdXJjZTogc3RyaW5nLCBsZXhlcjogTGV4ZXIpIHtcbiAqICAgY29uc3QgcGFyc2VyID0gbmV3IFBhcnNlcigpXG4gKiAgIGZvciAoY29uc3QgbGV4ZW1lIG9mIGxleGVyLmxleChzb3VyY2UpKVxuICogICAgIHlpZWxkKiBwYXJzZXIubmV4dChsZXhlbWUpXG4gKiAgIHlpZWxkKiBwYXJzZXIuZW5kKClcbiAqIH1cbiAqXG4gKiBjb25zdCBzcmM6IHN0cmluZyA9IC4uLlxuICogY29uc3QgbGV4ZXIgPSBuZXcgTGV4ZXIoKVxuICogZm9yIChjb25zdCB0b2tlbiBvZiBwYXJzZShzcmMsIGxleGVyKSkge1xuICogICAvLyB0b2tlbjogVG9rZW5cbiAqIH1cbiAqIGBgYFxuICovXG5jbGFzcyBQYXJzZXIge1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBvbk5ld0xpbmUgLSBJZiBkZWZpbmVkLCBjYWxsZWQgc2VwYXJhdGVseSB3aXRoIHRoZSBzdGFydCBwb3NpdGlvbiBvZlxuICAgICAqICAgZWFjaCBuZXcgbGluZSAoaW4gYHBhcnNlKClgLCBpbmNsdWRpbmcgdGhlIHN0YXJ0IG9mIGlucHV0KS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihvbk5ld0xpbmUpIHtcbiAgICAgICAgLyoqIElmIHRydWUsIHNwYWNlIGFuZCBzZXF1ZW5jZSBpbmRpY2F0b3JzIGNvdW50IGFzIGluZGVudGF0aW9uICovXG4gICAgICAgIHRoaXMuYXROZXdMaW5lID0gdHJ1ZTtcbiAgICAgICAgLyoqIElmIHRydWUsIG5leHQgdG9rZW4gaXMgYSBzY2FsYXIgdmFsdWUgKi9cbiAgICAgICAgdGhpcy5hdFNjYWxhciA9IGZhbHNlO1xuICAgICAgICAvKiogQ3VycmVudCBpbmRlbnRhdGlvbiBsZXZlbCAqL1xuICAgICAgICB0aGlzLmluZGVudCA9IDA7XG4gICAgICAgIC8qKiBDdXJyZW50IG9mZnNldCBzaW5jZSB0aGUgc3RhcnQgb2YgcGFyc2luZyAqL1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIC8qKiBPbiB0aGUgc2FtZSBsaW5lIHdpdGggYSBibG9jayBtYXAga2V5ICovXG4gICAgICAgIHRoaXMub25LZXlMaW5lID0gZmFsc2U7XG4gICAgICAgIC8qKiBUb3AgaW5kaWNhdGVzIHRoZSBub2RlIHRoYXQncyBjdXJyZW50bHkgYmVpbmcgYnVpbHQgKi9cbiAgICAgICAgdGhpcy5zdGFjayA9IFtdO1xuICAgICAgICAvKiogVGhlIHNvdXJjZSBvZiB0aGUgY3VycmVudCB0b2tlbiwgc2V0IGluIHBhcnNlKCkgKi9cbiAgICAgICAgdGhpcy5zb3VyY2UgPSAnJztcbiAgICAgICAgLyoqIFRoZSB0eXBlIG9mIHRoZSBjdXJyZW50IHRva2VuLCBzZXQgaW4gcGFyc2UoKSAqL1xuICAgICAgICB0aGlzLnR5cGUgPSAnJztcbiAgICAgICAgLy8gTXVzdCBiZSBkZWZpbmVkIGFmdGVyIGBuZXh0KClgXG4gICAgICAgIHRoaXMubGV4ZXIgPSBuZXcgTGV4ZXIoKTtcbiAgICAgICAgdGhpcy5vbk5ld0xpbmUgPSBvbk5ld0xpbmU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFBhcnNlIGBzb3VyY2VgIGFzIGEgWUFNTCBzdHJlYW0uXG4gICAgICogSWYgYGluY29tcGxldGVgLCBhIHBhcnQgb2YgdGhlIGxhc3QgbGluZSBtYXkgYmUgbGVmdCBhcyBhIGJ1ZmZlciBmb3IgdGhlIG5leHQgY2FsbC5cbiAgICAgKlxuICAgICAqIEVycm9ycyBhcmUgbm90IHRocm93biwgYnV0IHlpZWxkZWQgYXMgYHsgdHlwZTogJ2Vycm9yJywgbWVzc2FnZSB9YCB0b2tlbnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBBIGdlbmVyYXRvciBvZiB0b2tlbnMgcmVwcmVzZW50aW5nIGVhY2ggZGlyZWN0aXZlLCBkb2N1bWVudCwgYW5kIG90aGVyIHN0cnVjdHVyZS5cbiAgICAgKi9cbiAgICAqcGFyc2Uoc291cmNlLCBpbmNvbXBsZXRlID0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRoaXMub25OZXdMaW5lICYmIHRoaXMub2Zmc2V0ID09PSAwKVxuICAgICAgICAgICAgdGhpcy5vbk5ld0xpbmUoMCk7XG4gICAgICAgIGZvciAoY29uc3QgbGV4ZW1lIG9mIHRoaXMubGV4ZXIubGV4KHNvdXJjZSwgaW5jb21wbGV0ZSkpXG4gICAgICAgICAgICB5aWVsZCogdGhpcy5uZXh0KGxleGVtZSk7XG4gICAgICAgIGlmICghaW5jb21wbGV0ZSlcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLmVuZCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZHZhbmNlIHRoZSBwYXJzZXIgYnkgdGhlIGBzb3VyY2VgIG9mIG9uZSBsZXhpY2FsIHRva2VuLlxuICAgICAqL1xuICAgICpuZXh0KHNvdXJjZSkge1xuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgaWYgKHRoaXMuYXRTY2FsYXIpIHtcbiAgICAgICAgICAgIHRoaXMuYXRTY2FsYXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdHlwZSA9IHRva2VuVHlwZShzb3VyY2UpO1xuICAgICAgICBpZiAoIXR5cGUpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBgTm90IGEgWUFNTCB0b2tlbjogJHtzb3VyY2V9YDtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCh7IHR5cGU6ICdlcnJvcicsIG9mZnNldDogdGhpcy5vZmZzZXQsIG1lc3NhZ2UsIHNvdXJjZSB9KTtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZSA9PT0gJ3NjYWxhcicpIHtcbiAgICAgICAgICAgIHRoaXMuYXROZXdMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLmF0U2NhbGFyID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudHlwZSA9ICdzY2FsYXInO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF0TmV3TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kZW50ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25OZXdMaW5lKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbk5ld0xpbmUodGhpcy5vZmZzZXQgKyBzb3VyY2UubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdE5ld0xpbmUgJiYgc291cmNlWzBdID09PSAnICcpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGVudCArPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdleHBsaWNpdC1rZXktaW5kJzpcbiAgICAgICAgICAgICAgICBjYXNlICdtYXAtdmFsdWUtaW5kJzpcbiAgICAgICAgICAgICAgICBjYXNlICdzZXEtaXRlbS1pbmQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdE5ld0xpbmUpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGVudCArPSBzb3VyY2UubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdkb2MtbW9kZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnZmxvdy1lcnJvci1lbmQnOlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdE5ld0xpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ICs9IHNvdXJjZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqIENhbGwgYXQgZW5kIG9mIGlucHV0IHRvIHB1c2ggb3V0IGFueSByZW1haW5pbmcgY29uc3RydWN0aW9ucyAqL1xuICAgICplbmQoKSB7XG4gICAgICAgIHdoaWxlICh0aGlzLnN0YWNrLmxlbmd0aCA+IDApXG4gICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICB9XG4gICAgZ2V0IHNvdXJjZVRva2VuKCkge1xuICAgICAgICBjb25zdCBzdCA9IHtcbiAgICAgICAgICAgIHR5cGU6IHRoaXMudHlwZSxcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gc3Q7XG4gICAgfVxuICAgICpzdGVwKCkge1xuICAgICAgICBjb25zdCB0b3AgPSB0aGlzLnBlZWsoMSk7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICdkb2MtZW5kJyAmJiAoIXRvcCB8fCB0b3AudHlwZSAhPT0gJ2RvYy1lbmQnKSkge1xuICAgICAgICAgICAgd2hpbGUgKHRoaXMuc3RhY2subGVuZ3RoID4gMClcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaCh7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2RvYy1lbmQnLFxuICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0b3ApXG4gICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuc3RyZWFtKCk7XG4gICAgICAgIHN3aXRjaCAodG9wLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RvY3VtZW50JzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuZG9jdW1lbnQodG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLnNjYWxhcih0b3ApO1xuICAgICAgICAgICAgY2FzZSAnYmxvY2stc2NhbGFyJzpcbiAgICAgICAgICAgICAgICByZXR1cm4geWllbGQqIHRoaXMuYmxvY2tTY2FsYXIodG9wKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLW1hcCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmJsb2NrTWFwKHRvcCk7XG4gICAgICAgICAgICBjYXNlICdibG9jay1zZXEnOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5ibG9ja1NlcXVlbmNlKHRvcCk7XG4gICAgICAgICAgICBjYXNlICdmbG93LWNvbGxlY3Rpb24nOlxuICAgICAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5mbG93Q29sbGVjdGlvbih0b3ApO1xuICAgICAgICAgICAgY2FzZSAnZG9jLWVuZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHlpZWxkKiB0aGlzLmRvY3VtZW50RW5kKHRvcCk7XG4gICAgICAgIH1cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgc2hvdWxkIG5vdCBoYXBwZW4gKi9cbiAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgfVxuICAgIHBlZWsobikge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFja1t0aGlzLnN0YWNrLmxlbmd0aCAtIG5dO1xuICAgIH1cbiAgICAqcG9wKGVycm9yKSB7XG4gICAgICAgIGNvbnN0IHRva2VuID0gZXJyb3IgPz8gdGhpcy5zdGFjay5wb3AoKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgIGlmICghdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSAnVHJpZWQgdG8gcG9wIGFuIGVtcHR5IHN0YWNrJztcbiAgICAgICAgICAgIHlpZWxkIHsgdHlwZTogJ2Vycm9yJywgb2Zmc2V0OiB0aGlzLm9mZnNldCwgc291cmNlOiAnJywgbWVzc2FnZSB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuc3RhY2subGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB5aWVsZCB0b2tlbjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IHRoaXMucGVlaygxKTtcbiAgICAgICAgICAgIGlmICh0b2tlbi50eXBlID09PSAnYmxvY2stc2NhbGFyJykge1xuICAgICAgICAgICAgICAgIC8vIEJsb2NrIHNjYWxhcnMgdXNlIHRoZWlyIHBhcmVudCByYXRoZXIgdGhhbiBoZWFkZXIgaW5kZW50XG4gICAgICAgICAgICAgICAgdG9rZW4uaW5kZW50ID0gJ2luZGVudCcgaW4gdG9wID8gdG9wLmluZGVudCA6IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0b2tlbi50eXBlID09PSAnZmxvdy1jb2xsZWN0aW9uJyAmJiB0b3AudHlwZSA9PT0gJ2RvY3VtZW50Jykge1xuICAgICAgICAgICAgICAgIC8vIElnbm9yZSBhbGwgaW5kZW50IGZvciB0b3AtbGV2ZWwgZmxvdyBjb2xsZWN0aW9uc1xuICAgICAgICAgICAgICAgIHRva2VuLmluZGVudCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ2Zsb3ctY29sbGVjdGlvbicpXG4gICAgICAgICAgICAgICAgZml4Rmxvd1NlcUl0ZW1zKHRva2VuKTtcbiAgICAgICAgICAgIHN3aXRjaCAodG9wLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdkb2N1bWVudCc6XG4gICAgICAgICAgICAgICAgICAgIHRvcC52YWx1ZSA9IHRva2VuO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdibG9jay1zY2FsYXInOlxuICAgICAgICAgICAgICAgICAgICB0b3AucHJvcHMucHVzaCh0b2tlbik7IC8vIGVycm9yXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLW1hcCc6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXQgPSB0b3AuaXRlbXNbdG9wLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCBrZXk6IHRva2VuLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQudmFsdWUgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiB0b2tlbiwgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gIWl0LmV4cGxpY2l0S2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXNlICdibG9jay1zZXEnOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ID0gdG9wLml0ZW1zW3RvcC5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wLml0ZW1zLnB1c2goeyBzdGFydDogW10sIHZhbHVlOiB0b2tlbiB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQudmFsdWUgPSB0b2tlbjtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhc2UgJ2Zsb3ctY29sbGVjdGlvbic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXQgPSB0b3AuaXRlbXNbdG9wLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWl0IHx8IGl0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wLml0ZW1zLnB1c2goeyBzdGFydDogW10sIGtleTogdG9rZW4sIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0LnNlcClcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnZhbHVlID0gdG9rZW47XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiB0b2tlbiwgc2VwOiBbXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AodG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCh0b3AudHlwZSA9PT0gJ2RvY3VtZW50JyB8fFxuICAgICAgICAgICAgICAgIHRvcC50eXBlID09PSAnYmxvY2stbWFwJyB8fFxuICAgICAgICAgICAgICAgIHRvcC50eXBlID09PSAnYmxvY2stc2VxJykgJiZcbiAgICAgICAgICAgICAgICAodG9rZW4udHlwZSA9PT0gJ2Jsb2NrLW1hcCcgfHwgdG9rZW4udHlwZSA9PT0gJ2Jsb2NrLXNlcScpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IHRva2VuLml0ZW1zW3Rva2VuLml0ZW1zLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIGlmIChsYXN0ICYmXG4gICAgICAgICAgICAgICAgICAgICFsYXN0LnNlcCAmJlxuICAgICAgICAgICAgICAgICAgICAhbGFzdC52YWx1ZSAmJlxuICAgICAgICAgICAgICAgICAgICBsYXN0LnN0YXJ0Lmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAgICAgZmluZE5vbkVtcHR5SW5kZXgobGFzdC5zdGFydCkgPT09IC0xICYmXG4gICAgICAgICAgICAgICAgICAgICh0b2tlbi5pbmRlbnQgPT09IDAgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhc3Quc3RhcnQuZXZlcnkoc3QgPT4gc3QudHlwZSAhPT0gJ2NvbW1lbnQnIHx8IHN0LmluZGVudCA8IHRva2VuLmluZGVudCkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0b3AudHlwZSA9PT0gJ2RvY3VtZW50JylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcC5lbmQgPSBsYXN0LnN0YXJ0O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICB0b3AuaXRlbXMucHVzaCh7IHN0YXJ0OiBsYXN0LnN0YXJ0IH0pO1xuICAgICAgICAgICAgICAgICAgICB0b2tlbi5pdGVtcy5zcGxpY2UoLTEsIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAqc3RyZWFtKCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgY2FzZSAnZGlyZWN0aXZlLWxpbmUnOlxuICAgICAgICAgICAgICAgIHlpZWxkIHsgdHlwZTogJ2RpcmVjdGl2ZScsIG9mZnNldDogdGhpcy5vZmZzZXQsIHNvdXJjZTogdGhpcy5zb3VyY2UgfTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlICdieXRlLW9yZGVyLW1hcmsnOlxuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLnNvdXJjZVRva2VuO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1tb2RlJzpcbiAgICAgICAgICAgIGNhc2UgJ2RvYy1zdGFydCc6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkb2MgPSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkb2N1bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBbXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2RvYy1zdGFydCcpXG4gICAgICAgICAgICAgICAgICAgIGRvYy5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChkb2MpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB5aWVsZCB7XG4gICAgICAgICAgICB0eXBlOiAnZXJyb3InLFxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgIG1lc3NhZ2U6IGBVbmV4cGVjdGVkICR7dGhpcy50eXBlfSB0b2tlbiBpbiBZQU1MIHN0cmVhbWAsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuc291cmNlXG4gICAgICAgIH07XG4gICAgfVxuICAgICpkb2N1bWVudChkb2MpIHtcbiAgICAgICAgaWYgKGRvYy52YWx1ZSlcbiAgICAgICAgICAgIHJldHVybiB5aWVsZCogdGhpcy5saW5lRW5kKGRvYyk7XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdkb2Mtc3RhcnQnOiB7XG4gICAgICAgICAgICAgICAgaWYgKGZpbmROb25FbXB0eUluZGV4KGRvYy5zdGFydCkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZG9jLnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnYW5jaG9yJzpcbiAgICAgICAgICAgIGNhc2UgJ3RhZyc6XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGRvYy5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidiA9IHRoaXMuc3RhcnRCbG9ja1ZhbHVlKGRvYyk7XG4gICAgICAgIGlmIChidilcbiAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChidik7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgeWllbGQge1xuICAgICAgICAgICAgICAgIHR5cGU6ICdlcnJvcicsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBgVW5leHBlY3RlZCAke3RoaXMudHlwZX0gdG9rZW4gaW4gWUFNTCBkb2N1bWVudGAsXG4gICAgICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqc2NhbGFyKHNjYWxhcikge1xuICAgICAgICBpZiAodGhpcy50eXBlID09PSAnbWFwLXZhbHVlLWluZCcpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2UHJvcHModGhpcy5wZWVrKDIpKTtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gZ2V0Rmlyc3RLZXlTdGFydFByb3BzKHByZXYpO1xuICAgICAgICAgICAgbGV0IHNlcDtcbiAgICAgICAgICAgIGlmIChzY2FsYXIuZW5kKSB7XG4gICAgICAgICAgICAgICAgc2VwID0gc2NhbGFyLmVuZDtcbiAgICAgICAgICAgICAgICBzZXAucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgc2NhbGFyLmVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBzZXAgPSBbdGhpcy5zb3VyY2VUb2tlbl07XG4gICAgICAgICAgICBjb25zdCBtYXAgPSB7XG4gICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgb2Zmc2V0OiBzY2FsYXIub2Zmc2V0LFxuICAgICAgICAgICAgICAgIGluZGVudDogc2NhbGFyLmluZGVudCxcbiAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtleTogc2NhbGFyLCBzZXAgfV1cbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnN0YWNrW3RoaXMuc3RhY2subGVuZ3RoIC0gMV0gPSBtYXA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgeWllbGQqIHRoaXMubGluZUVuZChzY2FsYXIpO1xuICAgIH1cbiAgICAqYmxvY2tTY2FsYXIoc2NhbGFyKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIHNjYWxhci5wcm9wcy5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ3NjYWxhcic6XG4gICAgICAgICAgICAgICAgc2NhbGFyLnNvdXJjZSA9IHRoaXMuc291cmNlO1xuICAgICAgICAgICAgICAgIC8vIGJsb2NrLXNjYWxhciBzb3VyY2UgaW5jbHVkZXMgdHJhaWxpbmcgbmV3bGluZVxuICAgICAgICAgICAgICAgIHRoaXMuYXROZXdMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGVudCA9IDA7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25OZXdMaW5lKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBubCA9IHRoaXMuc291cmNlLmluZGV4T2YoJ1xcbicpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG5sICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uTmV3TGluZSh0aGlzLm9mZnNldCArIG5sKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5sID0gdGhpcy5zb3VyY2UuaW5kZXhPZignXFxuJywgbmwpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0IHNob3VsZCBub3QgaGFwcGVuICovXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAqYmxvY2tNYXAobWFwKSB7XG4gICAgICAgIGNvbnN0IGl0ID0gbWFwLml0ZW1zW21hcC5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgLy8gaXQuc2VwIGlzIHRydWUtaXNoIGlmIHBhaXIgYWxyZWFkeSBoYXMga2V5IG9yIDogc2VwYXJhdG9yXG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSAnZW5kJyBpbiBpdC52YWx1ZSA/IGl0LnZhbHVlLmVuZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IEFycmF5LmlzQXJyYXkoZW5kKSA/IGVuZFtlbmQubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0Py50eXBlID09PSAnY29tbWVudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ/LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0LnNlcC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgaWYgKGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgIGl0LnNlcC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXRJbmRlbnRlZENvbW1lbnQoaXQuc3RhcnQsIG1hcC5pbmRlbnQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gbWFwLml0ZW1zW21hcC5pdGVtcy5sZW5ndGggLSAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZCA9IHByZXY/LnZhbHVlPy5lbmQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlbmQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoZW5kLCBpdC5zdGFydCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW5kZW50ID49IG1hcC5pbmRlbnQpIHtcbiAgICAgICAgICAgIGNvbnN0IGF0TWFwSW5kZW50ID0gIXRoaXMub25LZXlMaW5lICYmIHRoaXMuaW5kZW50ID09PSBtYXAuaW5kZW50O1xuICAgICAgICAgICAgY29uc3QgYXROZXh0SXRlbSA9IGF0TWFwSW5kZW50ICYmXG4gICAgICAgICAgICAgICAgKGl0LnNlcCB8fCBpdC5leHBsaWNpdEtleSkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnR5cGUgIT09ICdzZXEtaXRlbS1pbmQnO1xuICAgICAgICAgICAgLy8gRm9yIGVtcHR5IG5vZGVzLCBhc3NpZ24gbmV3bGluZS1zZXBhcmF0ZWQgbm90IGluZGVudGVkIGVtcHR5IHRva2VucyB0byBmb2xsb3dpbmcgbm9kZVxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gW107XG4gICAgICAgICAgICBpZiAoYXROZXh0SXRlbSAmJiBpdC5zZXAgJiYgIWl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmwgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0LnNlcC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdCA9IGl0LnNlcFtpXTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChzdC50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBubC5wdXNoKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0LmluZGVudCA+IG1hcC5pbmRlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5sLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5sLmxlbmd0aCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG5sLmxlbmd0aCA+PSAyKVxuICAgICAgICAgICAgICAgICAgICBzdGFydCA9IGl0LnNlcC5zcGxpY2UobmxbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdhbmNob3InOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3RhZyc6XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdE5leHRJdGVtIHx8IGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnNlcC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY2FzZSAnZXhwbGljaXQta2V5LWluZCc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQuc2VwICYmICFpdC5leHBsaWNpdEtleSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LmV4cGxpY2l0S2V5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChhdE5leHRJdGVtIHx8IGl0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydCwgZXhwbGljaXRLZXk6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1tYXAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSwgZXhwbGljaXRLZXk6IHRydWUgfV1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoaXQuZXhwbGljaXRLZXkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluY2x1ZGVzVG9rZW4oaXQuc3RhcnQsICduZXdsaW5lJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBnZXRGaXJzdEtleVN0YXJ0UHJvcHMoaXQuc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaW5jbHVkZXNUb2tlbihpdC5zZXAsICdtYXAtdmFsdWUtaW5kJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXk6IG51bGwsIHNlcDogW3RoaXMuc291cmNlVG9rZW5dIH1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpc0Zsb3dUb2tlbihpdC5rZXkpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWluY2x1ZGVzVG9rZW4oaXQuc2VwLCAnbmV3bGluZScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBnZXRGaXJzdEtleVN0YXJ0UHJvcHMoaXQuc3RhcnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleSA9IGl0LmtleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzZXAgPSBpdC5zZXA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciB0eXBlIGd1YXJkIGlzIHdyb25nIGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaXQua2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZSBndWFyZCBpcyB3cm9uZyBoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGl0LnNlcDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBrZXksIHNlcCB9XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoc3RhcnQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdCBhY3R1YWxseSBhdCBuZXh0IGl0ZW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdC5zZXAgPSBpdC5zZXAuY29uY2F0KHN0YXJ0LCB0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0LnNlcC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpdC5zZXApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC52YWx1ZSB8fCBhdE5leHRJdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydCwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKGluY2x1ZGVzVG9rZW4oaXQuc2VwLCAnbWFwLXZhbHVlLWluZCcpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFjay5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydDogW10sIGtleTogbnVsbCwgc2VwOiBbdGhpcy5zb3VyY2VUb2tlbl0gfV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0LnNlcC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ2FsaWFzJzpcbiAgICAgICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3NpbmdsZS1xdW90ZWQtc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdkb3VibGUtcXVvdGVkLXNjYWxhcic6IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnMgPSB0aGlzLmZsb3dTY2FsYXIodGhpcy50eXBlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0TmV4dEl0ZW0gfHwgaXQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcC5pdGVtcy5wdXNoKHsgc3RhcnQsIGtleTogZnMsIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uS2V5TGluZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goZnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihpdCwgeyBrZXk6IGZzLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBidiA9IHRoaXMuc3RhcnRCbG9ja1ZhbHVlKG1hcCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChidikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0TWFwSW5kZW50ICYmIGJ2LnR5cGUgIT09ICdibG9jay1zZXEnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwLml0ZW1zLnB1c2goeyBzdGFydCB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChidik7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICB9XG4gICAgKmJsb2NrU2VxdWVuY2Uoc2VxKSB7XG4gICAgICAgIGNvbnN0IGl0ID0gc2VxLml0ZW1zW3NlcS5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgc3dpdGNoICh0aGlzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmQgPSAnZW5kJyBpbiBpdC52YWx1ZSA/IGl0LnZhbHVlLmVuZCA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGFzdCA9IEFycmF5LmlzQXJyYXkoZW5kKSA/IGVuZFtlbmQubGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0Py50eXBlID09PSAnY29tbWVudCcpXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmQ/LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcS5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1lbnQnOlxuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgc2VxLml0ZW1zLnB1c2goeyBzdGFydDogW3RoaXMuc291cmNlVG9rZW5dIH0pO1xuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5hdEluZGVudGVkQ29tbWVudChpdC5zdGFydCwgc2VxLmluZGVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBzZXEuaXRlbXNbc2VxLml0ZW1zLmxlbmd0aCAtIDJdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kID0gcHJldj8udmFsdWU/LmVuZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGVuZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseShlbmQsIGl0LnN0YXJ0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXEuaXRlbXMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ2FuY2hvcic6XG4gICAgICAgICAgICBjYXNlICd0YWcnOlxuICAgICAgICAgICAgICAgIGlmIChpdC52YWx1ZSB8fCB0aGlzLmluZGVudCA8PSBzZXEuaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgJ3NlcS1pdGVtLWluZCc6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5kZW50ICE9PSBzZXEuaW5kZW50KVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoaXQudmFsdWUgfHwgaW5jbHVkZXNUb2tlbihpdC5zdGFydCwgJ3NlcS1pdGVtLWluZCcpKVxuICAgICAgICAgICAgICAgICAgICBzZXEuaXRlbXMucHVzaCh7IHN0YXJ0OiBbdGhpcy5zb3VyY2VUb2tlbl0gfSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBpdC5zdGFydC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pbmRlbnQgPiBzZXEuaW5kZW50KSB7XG4gICAgICAgICAgICBjb25zdCBidiA9IHRoaXMuc3RhcnRCbG9ja1ZhbHVlKHNlcSk7XG4gICAgICAgICAgICBpZiAoYnYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goYnYpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgeWllbGQqIHRoaXMuc3RlcCgpO1xuICAgIH1cbiAgICAqZmxvd0NvbGxlY3Rpb24oZmMpIHtcbiAgICAgICAgY29uc3QgaXQgPSBmYy5pdGVtc1tmYy5pdGVtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ2Zsb3ctZXJyb3ItZW5kJykge1xuICAgICAgICAgICAgbGV0IHRvcDtcbiAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB0b3AgPSB0aGlzLnBlZWsoMSk7XG4gICAgICAgICAgICB9IHdoaWxlICh0b3AgJiYgdG9wLnR5cGUgPT09ICdmbG93LWNvbGxlY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChmYy5lbmQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbW1hJzpcbiAgICAgICAgICAgICAgICBjYXNlICdleHBsaWNpdC1rZXktaW5kJzpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpdCB8fCBpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICBmYy5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIWl0IHx8IGl0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZmMuaXRlbXMucHVzaCh7IHN0YXJ0OiBbXSwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaXQsIHsga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3NwYWNlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdjb21tZW50JzpcbiAgICAgICAgICAgICAgICBjYXNlICduZXdsaW5lJzpcbiAgICAgICAgICAgICAgICBjYXNlICdhbmNob3InOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3RhZyc6XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQgfHwgaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBmYy5pdGVtcy5wdXNoKHsgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9KTtcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoaXQuc2VwKVxuICAgICAgICAgICAgICAgICAgICAgICAgaXQuc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0LnN0YXJ0LnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICAgICAgY2FzZSAnc2NhbGFyJzpcbiAgICAgICAgICAgICAgICBjYXNlICdzaW5nbGUtcXVvdGVkLXNjYWxhcic6XG4gICAgICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZzID0gdGhpcy5mbG93U2NhbGFyKHRoaXMudHlwZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghaXQgfHwgaXQudmFsdWUpXG4gICAgICAgICAgICAgICAgICAgICAgICBmYy5pdGVtcy5wdXNoKHsgc3RhcnQ6IFtdLCBrZXk6IGZzLCBzZXA6IFtdIH0pO1xuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChpdC5zZXApXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YWNrLnB1c2goZnMpO1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGl0LCB7IGtleTogZnMsIHNlcDogW10gfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FzZSAnZmxvdy1tYXAtZW5kJzpcbiAgICAgICAgICAgICAgICBjYXNlICdmbG93LXNlcS1lbmQnOlxuICAgICAgICAgICAgICAgICAgICBmYy5lbmQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgYnYgPSB0aGlzLnN0YXJ0QmxvY2tWYWx1ZShmYyk7XG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSBzaG91bGQgbm90IGhhcHBlbiAqL1xuICAgICAgICAgICAgaWYgKGJ2KVxuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2sucHVzaChidik7XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLnBlZWsoMik7XG4gICAgICAgICAgICBpZiAocGFyZW50LnR5cGUgPT09ICdibG9jay1tYXAnICYmXG4gICAgICAgICAgICAgICAgKCh0aGlzLnR5cGUgPT09ICdtYXAtdmFsdWUtaW5kJyAmJiBwYXJlbnQuaW5kZW50ID09PSBmYy5pbmRlbnQpIHx8XG4gICAgICAgICAgICAgICAgICAgICh0aGlzLnR5cGUgPT09ICduZXdsaW5lJyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIXBhcmVudC5pdGVtc1twYXJlbnQuaXRlbXMubGVuZ3RoIC0gMV0uc2VwKSkpIHtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5wb3AoKTtcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5zdGVwKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLnR5cGUgPT09ICdtYXAtdmFsdWUtaW5kJyAmJlxuICAgICAgICAgICAgICAgIHBhcmVudC50eXBlICE9PSAnZmxvdy1jb2xsZWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByZXYgPSBnZXRQcmV2UHJvcHMocGFyZW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBzdGFydCA9IGdldEZpcnN0S2V5U3RhcnRQcm9wcyhwcmV2KTtcbiAgICAgICAgICAgICAgICBmaXhGbG93U2VxSXRlbXMoZmMpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlcCA9IGZjLmVuZC5zcGxpY2UoMSwgZmMuZW5kLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgc2VwLnB1c2godGhpcy5zb3VyY2VUb2tlbik7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFwID0ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBmYy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogZmMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQsIGtleTogZmMsIHNlcCB9XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgdGhpcy5vbktleUxpbmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGggLSAxXSA9IG1hcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLmxpbmVFbmQoZmMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGZsb3dTY2FsYXIodHlwZSkge1xuICAgICAgICBpZiAodGhpcy5vbk5ld0xpbmUpIHtcbiAgICAgICAgICAgIGxldCBubCA9IHRoaXMuc291cmNlLmluZGV4T2YoJ1xcbicpICsgMTtcbiAgICAgICAgICAgIHdoaWxlIChubCAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMub25OZXdMaW5lKHRoaXMub2Zmc2V0ICsgbmwpO1xuICAgICAgICAgICAgICAgIG5sID0gdGhpcy5zb3VyY2UuaW5kZXhPZignXFxuJywgbmwpICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLnNvdXJjZVxuICAgICAgICB9O1xuICAgIH1cbiAgICBzdGFydEJsb2NrVmFsdWUocGFyZW50KSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdhbGlhcyc6XG4gICAgICAgICAgICBjYXNlICdzY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnc2luZ2xlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgY2FzZSAnZG91YmxlLXF1b3RlZC1zY2FsYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZsb3dTY2FsYXIodGhpcy50eXBlKTtcbiAgICAgICAgICAgIGNhc2UgJ2Jsb2NrLXNjYWxhci1oZWFkZXInOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1zY2FsYXInLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBwcm9wczogW3RoaXMuc291cmNlVG9rZW5dLFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6ICcnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctbWFwLXN0YXJ0JzpcbiAgICAgICAgICAgIGNhc2UgJ2Zsb3ctc2VxLXN0YXJ0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZmxvdy1jb2xsZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuc291cmNlVG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiBbXVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdzZXEtaXRlbS1pbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdibG9jay1zZXEnLFxuICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHRoaXMub2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICBpbmRlbnQ6IHRoaXMuaW5kZW50LFxuICAgICAgICAgICAgICAgICAgICBpdGVtczogW3sgc3RhcnQ6IFt0aGlzLnNvdXJjZVRva2VuXSB9XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICBjYXNlICdleHBsaWNpdC1rZXktaW5kJzoge1xuICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gZ2V0UHJldlByb3BzKHBhcmVudCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBnZXRGaXJzdEtleVN0YXJ0UHJvcHMocHJldik7XG4gICAgICAgICAgICAgICAgc3RhcnQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYmxvY2stbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgICAgICAgICAgaW5kZW50OiB0aGlzLmluZGVudCxcbiAgICAgICAgICAgICAgICAgICAgaXRlbXM6IFt7IHN0YXJ0LCBleHBsaWNpdEtleTogdHJ1ZSB9XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdtYXAtdmFsdWUtaW5kJzoge1xuICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2ID0gZ2V0UHJldlByb3BzKHBhcmVudCk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBnZXRGaXJzdEtleVN0YXJ0UHJvcHMocHJldik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2Jsb2NrLW1hcCcsXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogdGhpcy5vZmZzZXQsXG4gICAgICAgICAgICAgICAgICAgIGluZGVudDogdGhpcy5pbmRlbnQsXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiBbeyBzdGFydCwga2V5OiBudWxsLCBzZXA6IFt0aGlzLnNvdXJjZVRva2VuXSB9XVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGF0SW5kZW50ZWRDb21tZW50KHN0YXJ0LCBpbmRlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMudHlwZSAhPT0gJ2NvbW1lbnQnKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5pbmRlbnQgPD0gaW5kZW50KVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICByZXR1cm4gc3RhcnQuZXZlcnkoc3QgPT4gc3QudHlwZSA9PT0gJ25ld2xpbmUnIHx8IHN0LnR5cGUgPT09ICdzcGFjZScpO1xuICAgIH1cbiAgICAqZG9jdW1lbnRFbmQoZG9jRW5kKSB7XG4gICAgICAgIGlmICh0aGlzLnR5cGUgIT09ICdkb2MtbW9kZScpIHtcbiAgICAgICAgICAgIGlmIChkb2NFbmQuZW5kKVxuICAgICAgICAgICAgICAgIGRvY0VuZC5lbmQucHVzaCh0aGlzLnNvdXJjZVRva2VuKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBkb2NFbmQuZW5kID0gW3RoaXMuc291cmNlVG9rZW5dO1xuICAgICAgICAgICAgaWYgKHRoaXMudHlwZSA9PT0gJ25ld2xpbmUnKVxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgICpsaW5lRW5kKHRva2VuKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdjb21tYSc6XG4gICAgICAgICAgICBjYXNlICdkb2Mtc3RhcnQnOlxuICAgICAgICAgICAgY2FzZSAnZG9jLWVuZCc6XG4gICAgICAgICAgICBjYXNlICdmbG93LXNlcS1lbmQnOlxuICAgICAgICAgICAgY2FzZSAnZmxvdy1tYXAtZW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ21hcC12YWx1ZS1pbmQnOlxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnBvcCgpO1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLnN0ZXAoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ25ld2xpbmUnOlxuICAgICAgICAgICAgICAgIHRoaXMub25LZXlMaW5lID0gZmFsc2U7XG4gICAgICAgICAgICAvLyBmYWxsdGhyb3VnaFxuICAgICAgICAgICAgY2FzZSAnc3BhY2UnOlxuICAgICAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIC8vIGFsbCBvdGhlciB2YWx1ZXMgYXJlIGVycm9yc1xuICAgICAgICAgICAgICAgIGlmICh0b2tlbi5lbmQpXG4gICAgICAgICAgICAgICAgICAgIHRva2VuLmVuZC5wdXNoKHRoaXMuc291cmNlVG9rZW4pO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgdG9rZW4uZW5kID0gW3RoaXMuc291cmNlVG9rZW5dO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICduZXdsaW5lJylcbiAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMucG9wKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCB7IFBhcnNlciB9O1xuIiwiaW1wb3J0IHsgQ29tcG9zZXIgfSBmcm9tICcuL2NvbXBvc2UvY29tcG9zZXIuanMnO1xuaW1wb3J0IHsgRG9jdW1lbnQgfSBmcm9tICcuL2RvYy9Eb2N1bWVudC5qcyc7XG5pbXBvcnQgeyBwcmV0dGlmeUVycm9yLCBZQU1MUGFyc2VFcnJvciB9IGZyb20gJy4vZXJyb3JzLmpzJztcbmltcG9ydCB7IHdhcm4gfSBmcm9tICcuL2xvZy5qcyc7XG5pbXBvcnQgeyBpc0RvY3VtZW50IH0gZnJvbSAnLi9ub2Rlcy9pZGVudGl0eS5qcyc7XG5pbXBvcnQgeyBMaW5lQ291bnRlciB9IGZyb20gJy4vcGFyc2UvbGluZS1jb3VudGVyLmpzJztcbmltcG9ydCB7IFBhcnNlciB9IGZyb20gJy4vcGFyc2UvcGFyc2VyLmpzJztcblxuZnVuY3Rpb24gcGFyc2VPcHRpb25zKG9wdGlvbnMpIHtcbiAgICBjb25zdCBwcmV0dHlFcnJvcnMgPSBvcHRpb25zLnByZXR0eUVycm9ycyAhPT0gZmFsc2U7XG4gICAgY29uc3QgbGluZUNvdW50ZXIgPSBvcHRpb25zLmxpbmVDb3VudGVyIHx8IChwcmV0dHlFcnJvcnMgJiYgbmV3IExpbmVDb3VudGVyKCkpIHx8IG51bGw7XG4gICAgcmV0dXJuIHsgbGluZUNvdW50ZXIsIHByZXR0eUVycm9ycyB9O1xufVxuLyoqXG4gKiBQYXJzZSB0aGUgaW5wdXQgYXMgYSBzdHJlYW0gb2YgWUFNTCBkb2N1bWVudHMuXG4gKlxuICogRG9jdW1lbnRzIHNob3VsZCBiZSBzZXBhcmF0ZWQgZnJvbSBlYWNoIG90aGVyIGJ5IGAuLi5gIG9yIGAtLS1gIG1hcmtlciBsaW5lcy5cbiAqXG4gKiBAcmV0dXJucyBJZiBhbiBlbXB0eSBgZG9jc2AgYXJyYXkgaXMgcmV0dXJuZWQsIGl0IHdpbGwgYmUgb2YgdHlwZVxuICogICBFbXB0eVN0cmVhbSBhbmQgY29udGFpbiBhZGRpdGlvbmFsIHN0cmVhbSBpbmZvcm1hdGlvbi4gSW5cbiAqICAgVHlwZVNjcmlwdCwgeW91IHNob3VsZCB1c2UgYCdlbXB0eScgaW4gZG9jc2AgYXMgYSB0eXBlIGd1YXJkIGZvciBpdC5cbiAqL1xuZnVuY3Rpb24gcGFyc2VBbGxEb2N1bWVudHMoc291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGxpbmVDb3VudGVyLCBwcmV0dHlFcnJvcnMgfSA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKGxpbmVDb3VudGVyPy5hZGROZXdMaW5lKTtcbiAgICBjb25zdCBjb21wb3NlciA9IG5ldyBDb21wb3NlcihvcHRpb25zKTtcbiAgICBjb25zdCBkb2NzID0gQXJyYXkuZnJvbShjb21wb3Nlci5jb21wb3NlKHBhcnNlci5wYXJzZShzb3VyY2UpKSk7XG4gICAgaWYgKHByZXR0eUVycm9ycyAmJiBsaW5lQ291bnRlcilcbiAgICAgICAgZm9yIChjb25zdCBkb2Mgb2YgZG9jcykge1xuICAgICAgICAgICAgZG9jLmVycm9ycy5mb3JFYWNoKHByZXR0aWZ5RXJyb3Ioc291cmNlLCBsaW5lQ291bnRlcikpO1xuICAgICAgICAgICAgZG9jLndhcm5pbmdzLmZvckVhY2gocHJldHRpZnlFcnJvcihzb3VyY2UsIGxpbmVDb3VudGVyKSk7XG4gICAgICAgIH1cbiAgICBpZiAoZG9jcy5sZW5ndGggPiAwKVxuICAgICAgICByZXR1cm4gZG9jcztcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihbXSwgeyBlbXB0eTogdHJ1ZSB9LCBjb21wb3Nlci5zdHJlYW1JbmZvKCkpO1xufVxuLyoqIFBhcnNlIGFuIGlucHV0IHN0cmluZyBpbnRvIGEgc2luZ2xlIFlBTUwuRG9jdW1lbnQgKi9cbmZ1bmN0aW9uIHBhcnNlRG9jdW1lbnQoc291cmNlLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGxpbmVDb3VudGVyLCBwcmV0dHlFcnJvcnMgfSA9IHBhcnNlT3B0aW9ucyhvcHRpb25zKTtcbiAgICBjb25zdCBwYXJzZXIgPSBuZXcgUGFyc2VyKGxpbmVDb3VudGVyPy5hZGROZXdMaW5lKTtcbiAgICBjb25zdCBjb21wb3NlciA9IG5ldyBDb21wb3NlcihvcHRpb25zKTtcbiAgICAvLyBgZG9jYCBpcyBhbHdheXMgc2V0IGJ5IGNvbXBvc2UuZW5kKHRydWUpIGF0IHRoZSB2ZXJ5IGxhdGVzdFxuICAgIGxldCBkb2MgPSBudWxsO1xuICAgIGZvciAoY29uc3QgX2RvYyBvZiBjb21wb3Nlci5jb21wb3NlKHBhcnNlci5wYXJzZShzb3VyY2UpLCB0cnVlLCBzb3VyY2UubGVuZ3RoKSkge1xuICAgICAgICBpZiAoIWRvYylcbiAgICAgICAgICAgIGRvYyA9IF9kb2M7XG4gICAgICAgIGVsc2UgaWYgKGRvYy5vcHRpb25zLmxvZ0xldmVsICE9PSAnc2lsZW50Jykge1xuICAgICAgICAgICAgZG9jLmVycm9ycy5wdXNoKG5ldyBZQU1MUGFyc2VFcnJvcihfZG9jLnJhbmdlLnNsaWNlKDAsIDIpLCAnTVVMVElQTEVfRE9DUycsICdTb3VyY2UgY29udGFpbnMgbXVsdGlwbGUgZG9jdW1lbnRzOyBwbGVhc2UgdXNlIFlBTUwucGFyc2VBbGxEb2N1bWVudHMoKScpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChwcmV0dHlFcnJvcnMgJiYgbGluZUNvdW50ZXIpIHtcbiAgICAgICAgZG9jLmVycm9ycy5mb3JFYWNoKHByZXR0aWZ5RXJyb3Ioc291cmNlLCBsaW5lQ291bnRlcikpO1xuICAgICAgICBkb2Mud2FybmluZ3MuZm9yRWFjaChwcmV0dGlmeUVycm9yKHNvdXJjZSwgbGluZUNvdW50ZXIpKTtcbiAgICB9XG4gICAgcmV0dXJuIGRvYztcbn1cbmZ1bmN0aW9uIHBhcnNlKHNyYywgcmV2aXZlciwgb3B0aW9ucykge1xuICAgIGxldCBfcmV2aXZlciA9IHVuZGVmaW5lZDtcbiAgICBpZiAodHlwZW9mIHJldml2ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgX3Jldml2ZXIgPSByZXZpdmVyO1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgJiYgcmV2aXZlciAmJiB0eXBlb2YgcmV2aXZlciA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9IHJldml2ZXI7XG4gICAgfVxuICAgIGNvbnN0IGRvYyA9IHBhcnNlRG9jdW1lbnQoc3JjLCBvcHRpb25zKTtcbiAgICBpZiAoIWRvYylcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgZG9jLndhcm5pbmdzLmZvckVhY2god2FybmluZyA9PiB3YXJuKGRvYy5vcHRpb25zLmxvZ0xldmVsLCB3YXJuaW5nKSk7XG4gICAgaWYgKGRvYy5lcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICBpZiAoZG9jLm9wdGlvbnMubG9nTGV2ZWwgIT09ICdzaWxlbnQnKVxuICAgICAgICAgICAgdGhyb3cgZG9jLmVycm9yc1swXTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgZG9jLmVycm9ycyA9IFtdO1xuICAgIH1cbiAgICByZXR1cm4gZG9jLnRvSlMoT2JqZWN0LmFzc2lnbih7IHJldml2ZXI6IF9yZXZpdmVyIH0sIG9wdGlvbnMpKTtcbn1cbmZ1bmN0aW9uIHN0cmluZ2lmeSh2YWx1ZSwgcmVwbGFjZXIsIG9wdGlvbnMpIHtcbiAgICBsZXQgX3JlcGxhY2VyID0gbnVsbDtcbiAgICBpZiAodHlwZW9mIHJlcGxhY2VyID09PSAnZnVuY3Rpb24nIHx8IEFycmF5LmlzQXJyYXkocmVwbGFjZXIpKSB7XG4gICAgICAgIF9yZXBsYWNlciA9IHJlcGxhY2VyO1xuICAgIH1cbiAgICBlbHNlIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgJiYgcmVwbGFjZXIpIHtcbiAgICAgICAgb3B0aW9ucyA9IHJlcGxhY2VyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKVxuICAgICAgICBvcHRpb25zID0gb3B0aW9ucy5sZW5ndGg7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25zdCBpbmRlbnQgPSBNYXRoLnJvdW5kKG9wdGlvbnMpO1xuICAgICAgICBvcHRpb25zID0gaW5kZW50IDwgMSA/IHVuZGVmaW5lZCA6IGluZGVudCA+IDggPyB7IGluZGVudDogOCB9IDogeyBpbmRlbnQgfTtcbiAgICB9XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgeyBrZWVwVW5kZWZpbmVkIH0gPSBvcHRpb25zID8/IHJlcGxhY2VyID8/IHt9O1xuICAgICAgICBpZiAoIWtlZXBVbmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoaXNEb2N1bWVudCh2YWx1ZSkgJiYgIV9yZXBsYWNlcilcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRvU3RyaW5nKG9wdGlvbnMpO1xuICAgIHJldHVybiBuZXcgRG9jdW1lbnQodmFsdWUsIF9yZXBsYWNlciwgb3B0aW9ucykudG9TdHJpbmcob3B0aW9ucyk7XG59XG5cbmV4cG9ydCB7IHBhcnNlLCBwYXJzZUFsbERvY3VtZW50cywgcGFyc2VEb2N1bWVudCwgc3RyaW5naWZ5IH07XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVnZXhwQ29kZSA9IGV4cG9ydHMuZ2V0RXNtRXhwb3J0TmFtZSA9IGV4cG9ydHMuZ2V0UHJvcGVydHkgPSBleHBvcnRzLnNhZmVTdHJpbmdpZnkgPSBleHBvcnRzLnN0cmluZ2lmeSA9IGV4cG9ydHMuc3RyQ29uY2F0ID0gZXhwb3J0cy5hZGRDb2RlQXJnID0gZXhwb3J0cy5zdHIgPSBleHBvcnRzLl8gPSBleHBvcnRzLm5pbCA9IGV4cG9ydHMuX0NvZGUgPSBleHBvcnRzLk5hbWUgPSBleHBvcnRzLklERU5USUZJRVIgPSBleHBvcnRzLl9Db2RlT3JOYW1lID0gdm9pZCAwO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHRyYW5lb3VzLWNsYXNzXG5jbGFzcyBfQ29kZU9yTmFtZSB7XG59XG5leHBvcnRzLl9Db2RlT3JOYW1lID0gX0NvZGVPck5hbWU7XG5leHBvcnRzLklERU5USUZJRVIgPSAvXlthLXokX11bYS16JF8wLTldKiQvaTtcbmNsYXNzIE5hbWUgZXh0ZW5kcyBfQ29kZU9yTmFtZSB7XG4gICAgY29uc3RydWN0b3Iocykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBpZiAoIWV4cG9ydHMuSURFTlRJRklFUi50ZXN0KHMpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29kZUdlbjogbmFtZSBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclwiKTtcbiAgICAgICAgdGhpcy5zdHIgPSBzO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RyO1xuICAgIH1cbiAgICBlbXB0eVN0cigpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIHJldHVybiB7IFt0aGlzLnN0cl06IDEgfTtcbiAgICB9XG59XG5leHBvcnRzLk5hbWUgPSBOYW1lO1xuY2xhc3MgX0NvZGUgZXh0ZW5kcyBfQ29kZU9yTmFtZSB7XG4gICAgY29uc3RydWN0b3IoY29kZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9pdGVtcyA9IHR5cGVvZiBjb2RlID09PSBcInN0cmluZ1wiID8gW2NvZGVdIDogY29kZTtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0cjtcbiAgICB9XG4gICAgZW1wdHlTdHIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pdGVtcy5sZW5ndGggPiAxKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5faXRlbXNbMF07XG4gICAgICAgIHJldHVybiBpdGVtID09PSBcIlwiIHx8IGl0ZW0gPT09ICdcIlwiJztcbiAgICB9XG4gICAgZ2V0IHN0cigpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gKChfYSA9IHRoaXMuX3N0cikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogKHRoaXMuX3N0ciA9IHRoaXMuX2l0ZW1zLnJlZHVjZSgocywgYykgPT4gYCR7c30ke2N9YCwgXCJcIikpKTtcbiAgICB9XG4gICAgZ2V0IG5hbWVzKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoKF9hID0gdGhpcy5fbmFtZXMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6ICh0aGlzLl9uYW1lcyA9IHRoaXMuX2l0ZW1zLnJlZHVjZSgobmFtZXMsIGMpID0+IHtcbiAgICAgICAgICAgIGlmIChjIGluc3RhbmNlb2YgTmFtZSlcbiAgICAgICAgICAgICAgICBuYW1lc1tjLnN0cl0gPSAobmFtZXNbYy5zdHJdIHx8IDApICsgMTtcbiAgICAgICAgICAgIHJldHVybiBuYW1lcztcbiAgICAgICAgfSwge30pKSk7XG4gICAgfVxufVxuZXhwb3J0cy5fQ29kZSA9IF9Db2RlO1xuZXhwb3J0cy5uaWwgPSBuZXcgX0NvZGUoXCJcIik7XG5mdW5jdGlvbiBfKHN0cnMsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBjb2RlID0gW3N0cnNbMF1dO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGFkZENvZGVBcmcoY29kZSwgYXJnc1tpXSk7XG4gICAgICAgIGNvZGUucHVzaChzdHJzWysraV0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IF9Db2RlKGNvZGUpO1xufVxuZXhwb3J0cy5fID0gXztcbmNvbnN0IHBsdXMgPSBuZXcgX0NvZGUoXCIrXCIpO1xuZnVuY3Rpb24gc3RyKHN0cnMsIC4uLmFyZ3MpIHtcbiAgICBjb25zdCBleHByID0gW3NhZmVTdHJpbmdpZnkoc3Ryc1swXSldO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGV4cHIucHVzaChwbHVzKTtcbiAgICAgICAgYWRkQ29kZUFyZyhleHByLCBhcmdzW2ldKTtcbiAgICAgICAgZXhwci5wdXNoKHBsdXMsIHNhZmVTdHJpbmdpZnkoc3Ryc1srK2ldKSk7XG4gICAgfVxuICAgIG9wdGltaXplKGV4cHIpO1xuICAgIHJldHVybiBuZXcgX0NvZGUoZXhwcik7XG59XG5leHBvcnRzLnN0ciA9IHN0cjtcbmZ1bmN0aW9uIGFkZENvZGVBcmcoY29kZSwgYXJnKSB7XG4gICAgaWYgKGFyZyBpbnN0YW5jZW9mIF9Db2RlKVxuICAgICAgICBjb2RlLnB1c2goLi4uYXJnLl9pdGVtcyk7XG4gICAgZWxzZSBpZiAoYXJnIGluc3RhbmNlb2YgTmFtZSlcbiAgICAgICAgY29kZS5wdXNoKGFyZyk7XG4gICAgZWxzZVxuICAgICAgICBjb2RlLnB1c2goaW50ZXJwb2xhdGUoYXJnKSk7XG59XG5leHBvcnRzLmFkZENvZGVBcmcgPSBhZGRDb2RlQXJnO1xuZnVuY3Rpb24gb3B0aW1pemUoZXhwcikge1xuICAgIGxldCBpID0gMTtcbiAgICB3aGlsZSAoaSA8IGV4cHIubGVuZ3RoIC0gMSkge1xuICAgICAgICBpZiAoZXhwcltpXSA9PT0gcGx1cykge1xuICAgICAgICAgICAgY29uc3QgcmVzID0gbWVyZ2VFeHBySXRlbXMoZXhwcltpIC0gMV0sIGV4cHJbaSArIDFdKTtcbiAgICAgICAgICAgIGlmIChyZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGV4cHIuc3BsaWNlKGkgLSAxLCAzLCByZXMpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXhwcltpKytdID0gXCIrXCI7XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbn1cbmZ1bmN0aW9uIG1lcmdlRXhwckl0ZW1zKGEsIGIpIHtcbiAgICBpZiAoYiA9PT0gJ1wiXCInKVxuICAgICAgICByZXR1cm4gYTtcbiAgICBpZiAoYSA9PT0gJ1wiXCInKVxuICAgICAgICByZXR1cm4gYjtcbiAgICBpZiAodHlwZW9mIGEgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAoYiBpbnN0YW5jZW9mIE5hbWUgfHwgYVthLmxlbmd0aCAtIDFdICE9PSAnXCInKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodHlwZW9mIGIgIT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIHJldHVybiBgJHthLnNsaWNlKDAsIC0xKX0ke2J9XCJgO1xuICAgICAgICBpZiAoYlswXSA9PT0gJ1wiJylcbiAgICAgICAgICAgIHJldHVybiBhLnNsaWNlKDAsIC0xKSArIGIuc2xpY2UoMSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBiID09IFwic3RyaW5nXCIgJiYgYlswXSA9PT0gJ1wiJyAmJiAhKGEgaW5zdGFuY2VvZiBOYW1lKSlcbiAgICAgICAgcmV0dXJuIGBcIiR7YX0ke2Iuc2xpY2UoMSl9YDtcbiAgICByZXR1cm47XG59XG5mdW5jdGlvbiBzdHJDb25jYXQoYzEsIGMyKSB7XG4gICAgcmV0dXJuIGMyLmVtcHR5U3RyKCkgPyBjMSA6IGMxLmVtcHR5U3RyKCkgPyBjMiA6IHN0ciBgJHtjMX0ke2MyfWA7XG59XG5leHBvcnRzLnN0ckNvbmNhdCA9IHN0ckNvbmNhdDtcbi8vIFRPRE8gZG8gbm90IGFsbG93IGFycmF5cyBoZXJlXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZSh4KSB7XG4gICAgcmV0dXJuIHR5cGVvZiB4ID09IFwibnVtYmVyXCIgfHwgdHlwZW9mIHggPT0gXCJib29sZWFuXCIgfHwgeCA9PT0gbnVsbFxuICAgICAgICA/IHhcbiAgICAgICAgOiBzYWZlU3RyaW5naWZ5KEFycmF5LmlzQXJyYXkoeCkgPyB4LmpvaW4oXCIsXCIpIDogeCk7XG59XG5mdW5jdGlvbiBzdHJpbmdpZnkoeCkge1xuICAgIHJldHVybiBuZXcgX0NvZGUoc2FmZVN0cmluZ2lmeSh4KSk7XG59XG5leHBvcnRzLnN0cmluZ2lmeSA9IHN0cmluZ2lmeTtcbmZ1bmN0aW9uIHNhZmVTdHJpbmdpZnkoeCkge1xuICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh4KVxuICAgICAgICAucmVwbGFjZSgvXFx1MjAyOC9nLCBcIlxcXFx1MjAyOFwiKVxuICAgICAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCBcIlxcXFx1MjAyOVwiKTtcbn1cbmV4cG9ydHMuc2FmZVN0cmluZ2lmeSA9IHNhZmVTdHJpbmdpZnk7XG5mdW5jdGlvbiBnZXRQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGtleSA9PSBcInN0cmluZ1wiICYmIGV4cG9ydHMuSURFTlRJRklFUi50ZXN0KGtleSkgPyBuZXcgX0NvZGUoYC4ke2tleX1gKSA6IF8gYFske2tleX1dYDtcbn1cbmV4cG9ydHMuZ2V0UHJvcGVydHkgPSBnZXRQcm9wZXJ0eTtcbi8vRG9lcyBiZXN0IGVmZm9ydCB0byBmb3JtYXQgdGhlIG5hbWUgcHJvcGVybHlcbmZ1bmN0aW9uIGdldEVzbUV4cG9ydE5hbWUoa2V5KSB7XG4gICAgaWYgKHR5cGVvZiBrZXkgPT0gXCJzdHJpbmdcIiAmJiBleHBvcnRzLklERU5USUZJRVIudGVzdChrZXkpKSB7XG4gICAgICAgIHJldHVybiBuZXcgX0NvZGUoYCR7a2V5fWApO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvZGVHZW46IGludmFsaWQgZXhwb3J0IG5hbWU6ICR7a2V5fSwgdXNlIGV4cGxpY2l0ICRpZCBuYW1lIG1hcHBpbmdgKTtcbn1cbmV4cG9ydHMuZ2V0RXNtRXhwb3J0TmFtZSA9IGdldEVzbUV4cG9ydE5hbWU7XG5mdW5jdGlvbiByZWdleHBDb2RlKHJ4KSB7XG4gICAgcmV0dXJuIG5ldyBfQ29kZShyeC50b1N0cmluZygpKTtcbn1cbmV4cG9ydHMucmVnZXhwQ29kZSA9IHJlZ2V4cENvZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2RlLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5WYWx1ZVNjb3BlID0gZXhwb3J0cy5WYWx1ZVNjb3BlTmFtZSA9IGV4cG9ydHMuU2NvcGUgPSBleHBvcnRzLnZhcktpbmRzID0gZXhwb3J0cy5Vc2VkVmFsdWVTdGF0ZSA9IHZvaWQgMDtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuL2NvZGVcIik7XG5jbGFzcyBWYWx1ZUVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG5hbWUpIHtcbiAgICAgICAgc3VwZXIoYENvZGVHZW46IFwiY29kZVwiIGZvciAke25hbWV9IG5vdCBkZWZpbmVkYCk7XG4gICAgICAgIHRoaXMudmFsdWUgPSBuYW1lLnZhbHVlO1xuICAgIH1cbn1cbnZhciBVc2VkVmFsdWVTdGF0ZTtcbihmdW5jdGlvbiAoVXNlZFZhbHVlU3RhdGUpIHtcbiAgICBVc2VkVmFsdWVTdGF0ZVtVc2VkVmFsdWVTdGF0ZVtcIlN0YXJ0ZWRcIl0gPSAwXSA9IFwiU3RhcnRlZFwiO1xuICAgIFVzZWRWYWx1ZVN0YXRlW1VzZWRWYWx1ZVN0YXRlW1wiQ29tcGxldGVkXCJdID0gMV0gPSBcIkNvbXBsZXRlZFwiO1xufSkoVXNlZFZhbHVlU3RhdGUgfHwgKGV4cG9ydHMuVXNlZFZhbHVlU3RhdGUgPSBVc2VkVmFsdWVTdGF0ZSA9IHt9KSk7XG5leHBvcnRzLnZhcktpbmRzID0ge1xuICAgIGNvbnN0OiBuZXcgY29kZV8xLk5hbWUoXCJjb25zdFwiKSxcbiAgICBsZXQ6IG5ldyBjb2RlXzEuTmFtZShcImxldFwiKSxcbiAgICB2YXI6IG5ldyBjb2RlXzEuTmFtZShcInZhclwiKSxcbn07XG5jbGFzcyBTY29wZSB7XG4gICAgY29uc3RydWN0b3IoeyBwcmVmaXhlcywgcGFyZW50IH0gPSB7fSkge1xuICAgICAgICB0aGlzLl9uYW1lcyA9IHt9O1xuICAgICAgICB0aGlzLl9wcmVmaXhlcyA9IHByZWZpeGVzO1xuICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuICAgIHRvTmFtZShuYW1lT3JQcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIG5hbWVPclByZWZpeCBpbnN0YW5jZW9mIGNvZGVfMS5OYW1lID8gbmFtZU9yUHJlZml4IDogdGhpcy5uYW1lKG5hbWVPclByZWZpeCk7XG4gICAgfVxuICAgIG5hbWUocHJlZml4KSB7XG4gICAgICAgIHJldHVybiBuZXcgY29kZV8xLk5hbWUodGhpcy5fbmV3TmFtZShwcmVmaXgpKTtcbiAgICB9XG4gICAgX25ld05hbWUocHJlZml4KSB7XG4gICAgICAgIGNvbnN0IG5nID0gdGhpcy5fbmFtZXNbcHJlZml4XSB8fCB0aGlzLl9uYW1lR3JvdXAocHJlZml4KTtcbiAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0ke25nLmluZGV4Kyt9YDtcbiAgICB9XG4gICAgX25hbWVHcm91cChwcmVmaXgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKCgoX2IgPSAoX2EgPSB0aGlzLl9wYXJlbnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5fcHJlZml4ZXMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5oYXMocHJlZml4KSkgfHwgKHRoaXMuX3ByZWZpeGVzICYmICF0aGlzLl9wcmVmaXhlcy5oYXMocHJlZml4KSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29kZUdlbjogcHJlZml4IFwiJHtwcmVmaXh9XCIgaXMgbm90IGFsbG93ZWQgaW4gdGhpcyBzY29wZWApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAodGhpcy5fbmFtZXNbcHJlZml4XSA9IHsgcHJlZml4LCBpbmRleDogMCB9KTtcbiAgICB9XG59XG5leHBvcnRzLlNjb3BlID0gU2NvcGU7XG5jbGFzcyBWYWx1ZVNjb3BlTmFtZSBleHRlbmRzIGNvZGVfMS5OYW1lIHtcbiAgICBjb25zdHJ1Y3RvcihwcmVmaXgsIG5hbWVTdHIpIHtcbiAgICAgICAgc3VwZXIobmFtZVN0cik7XG4gICAgICAgIHRoaXMucHJlZml4ID0gcHJlZml4O1xuICAgIH1cbiAgICBzZXRWYWx1ZSh2YWx1ZSwgeyBwcm9wZXJ0eSwgaXRlbUluZGV4IH0pIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB0aGlzLnNjb3BlUGF0aCA9ICgwLCBjb2RlXzEuXykgYC4ke25ldyBjb2RlXzEuTmFtZShwcm9wZXJ0eSl9WyR7aXRlbUluZGV4fV1gO1xuICAgIH1cbn1cbmV4cG9ydHMuVmFsdWVTY29wZU5hbWUgPSBWYWx1ZVNjb3BlTmFtZTtcbmNvbnN0IGxpbmUgPSAoMCwgY29kZV8xLl8pIGBcXG5gO1xuY2xhc3MgVmFsdWVTY29wZSBleHRlbmRzIFNjb3BlIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgICAgIHN1cGVyKG9wdHMpO1xuICAgICAgICB0aGlzLl92YWx1ZXMgPSB7fTtcbiAgICAgICAgdGhpcy5fc2NvcGUgPSBvcHRzLnNjb3BlO1xuICAgICAgICB0aGlzLm9wdHMgPSB7IC4uLm9wdHMsIF9uOiBvcHRzLmxpbmVzID8gbGluZSA6IGNvZGVfMS5uaWwgfTtcbiAgICB9XG4gICAgZ2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc2NvcGU7XG4gICAgfVxuICAgIG5hbWUocHJlZml4KSB7XG4gICAgICAgIHJldHVybiBuZXcgVmFsdWVTY29wZU5hbWUocHJlZml4LCB0aGlzLl9uZXdOYW1lKHByZWZpeCkpO1xuICAgIH1cbiAgICB2YWx1ZShuYW1lT3JQcmVmaXgsIHZhbHVlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHZhbHVlLnJlZiA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ29kZUdlbjogcmVmIG11c3QgYmUgcGFzc2VkIGluIHZhbHVlXCIpO1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy50b05hbWUobmFtZU9yUHJlZml4KTtcbiAgICAgICAgY29uc3QgeyBwcmVmaXggfSA9IG5hbWU7XG4gICAgICAgIGNvbnN0IHZhbHVlS2V5ID0gKF9hID0gdmFsdWUua2V5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB2YWx1ZS5yZWY7XG4gICAgICAgIGxldCB2cyA9IHRoaXMuX3ZhbHVlc1twcmVmaXhdO1xuICAgICAgICBpZiAodnMpIHtcbiAgICAgICAgICAgIGNvbnN0IF9uYW1lID0gdnMuZ2V0KHZhbHVlS2V5KTtcbiAgICAgICAgICAgIGlmIChfbmFtZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gX25hbWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2cyA9IHRoaXMuX3ZhbHVlc1twcmVmaXhdID0gbmV3IE1hcCgpO1xuICAgICAgICB9XG4gICAgICAgIHZzLnNldCh2YWx1ZUtleSwgbmFtZSk7XG4gICAgICAgIGNvbnN0IHMgPSB0aGlzLl9zY29wZVtwcmVmaXhdIHx8ICh0aGlzLl9zY29wZVtwcmVmaXhdID0gW10pO1xuICAgICAgICBjb25zdCBpdGVtSW5kZXggPSBzLmxlbmd0aDtcbiAgICAgICAgc1tpdGVtSW5kZXhdID0gdmFsdWUucmVmO1xuICAgICAgICBuYW1lLnNldFZhbHVlKHZhbHVlLCB7IHByb3BlcnR5OiBwcmVmaXgsIGl0ZW1JbmRleCB9KTtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIGdldFZhbHVlKHByZWZpeCwga2V5T3JSZWYpIHtcbiAgICAgICAgY29uc3QgdnMgPSB0aGlzLl92YWx1ZXNbcHJlZml4XTtcbiAgICAgICAgaWYgKCF2cylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmV0dXJuIHZzLmdldChrZXlPclJlZik7XG4gICAgfVxuICAgIHNjb3BlUmVmcyhzY29wZU5hbWUsIHZhbHVlcyA9IHRoaXMuX3ZhbHVlcykge1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVkdWNlVmFsdWVzKHZhbHVlcywgKG5hbWUpID0+IHtcbiAgICAgICAgICAgIGlmIChuYW1lLnNjb3BlUGF0aCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29kZUdlbjogbmFtZSBcIiR7bmFtZX1cIiBoYXMgbm8gdmFsdWVgKTtcbiAgICAgICAgICAgIHJldHVybiAoMCwgY29kZV8xLl8pIGAke3Njb3BlTmFtZX0ke25hbWUuc2NvcGVQYXRofWA7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBzY29wZUNvZGUodmFsdWVzID0gdGhpcy5fdmFsdWVzLCB1c2VkVmFsdWVzLCBnZXRDb2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWR1Y2VWYWx1ZXModmFsdWVzLCAobmFtZSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5hbWUudmFsdWUgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvZGVHZW46IG5hbWUgXCIke25hbWV9XCIgaGFzIG5vIHZhbHVlYCk7XG4gICAgICAgICAgICByZXR1cm4gbmFtZS52YWx1ZS5jb2RlO1xuICAgICAgICB9LCB1c2VkVmFsdWVzLCBnZXRDb2RlKTtcbiAgICB9XG4gICAgX3JlZHVjZVZhbHVlcyh2YWx1ZXMsIHZhbHVlQ29kZSwgdXNlZFZhbHVlcyA9IHt9LCBnZXRDb2RlKSB7XG4gICAgICAgIGxldCBjb2RlID0gY29kZV8xLm5pbDtcbiAgICAgICAgZm9yIChjb25zdCBwcmVmaXggaW4gdmFsdWVzKSB7XG4gICAgICAgICAgICBjb25zdCB2cyA9IHZhbHVlc1twcmVmaXhdO1xuICAgICAgICAgICAgaWYgKCF2cylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVTZXQgPSAodXNlZFZhbHVlc1twcmVmaXhdID0gdXNlZFZhbHVlc1twcmVmaXhdIHx8IG5ldyBNYXAoKSk7XG4gICAgICAgICAgICB2cy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5hbWVTZXQuaGFzKG5hbWUpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgbmFtZVNldC5zZXQobmFtZSwgVXNlZFZhbHVlU3RhdGUuU3RhcnRlZCk7XG4gICAgICAgICAgICAgICAgbGV0IGMgPSB2YWx1ZUNvZGUobmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKGMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVmID0gdGhpcy5vcHRzLmVzNSA/IGV4cG9ydHMudmFyS2luZHMudmFyIDogZXhwb3J0cy52YXJLaW5kcy5jb25zdDtcbiAgICAgICAgICAgICAgICAgICAgY29kZSA9ICgwLCBjb2RlXzEuXykgYCR7Y29kZX0ke2RlZn0gJHtuYW1lfSA9ICR7Y307JHt0aGlzLm9wdHMuX259YDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoKGMgPSBnZXRDb2RlID09PSBudWxsIHx8IGdldENvZGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGdldENvZGUobmFtZSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvZGUgPSAoMCwgY29kZV8xLl8pIGAke2NvZGV9JHtjfSR7dGhpcy5vcHRzLl9ufWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihuYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmFtZVNldC5zZXQobmFtZSwgVXNlZFZhbHVlU3RhdGUuQ29tcGxldGVkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2RlO1xuICAgIH1cbn1cbmV4cG9ydHMuVmFsdWVTY29wZSA9IFZhbHVlU2NvcGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY29wZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3IgPSBleHBvcnRzLmFuZCA9IGV4cG9ydHMubm90ID0gZXhwb3J0cy5Db2RlR2VuID0gZXhwb3J0cy5vcGVyYXRvcnMgPSBleHBvcnRzLnZhcktpbmRzID0gZXhwb3J0cy5WYWx1ZVNjb3BlTmFtZSA9IGV4cG9ydHMuVmFsdWVTY29wZSA9IGV4cG9ydHMuU2NvcGUgPSBleHBvcnRzLk5hbWUgPSBleHBvcnRzLnJlZ2V4cENvZGUgPSBleHBvcnRzLnN0cmluZ2lmeSA9IGV4cG9ydHMuZ2V0UHJvcGVydHkgPSBleHBvcnRzLm5pbCA9IGV4cG9ydHMuc3RyQ29uY2F0ID0gZXhwb3J0cy5zdHIgPSBleHBvcnRzLl8gPSB2b2lkIDA7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi9jb2RlXCIpO1xuY29uc3Qgc2NvcGVfMSA9IHJlcXVpcmUoXCIuL3Njb3BlXCIpO1xudmFyIGNvZGVfMiA9IHJlcXVpcmUoXCIuL2NvZGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlXzIuXzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0clwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZV8yLnN0cjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0ckNvbmNhdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZV8yLnN0ckNvbmNhdDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5pbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZV8yLm5pbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImdldFByb3BlcnR5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlXzIuZ2V0UHJvcGVydHk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdHJpbmdpZnlcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVfMi5zdHJpbmdpZnk7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWdleHBDb2RlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlXzIucmVnZXhwQ29kZTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5hbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVfMi5OYW1lOyB9IH0pO1xudmFyIHNjb3BlXzIgPSByZXF1aXJlKFwiLi9zY29wZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlNjb3BlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzY29wZV8yLlNjb3BlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmFsdWVTY29wZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NvcGVfMi5WYWx1ZVNjb3BlOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVmFsdWVTY29wZU5hbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHNjb3BlXzIuVmFsdWVTY29wZU5hbWU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ2YXJLaW5kc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2NvcGVfMi52YXJLaW5kczsgfSB9KTtcbmV4cG9ydHMub3BlcmF0b3JzID0ge1xuICAgIEdUOiBuZXcgY29kZV8xLl9Db2RlKFwiPlwiKSxcbiAgICBHVEU6IG5ldyBjb2RlXzEuX0NvZGUoXCI+PVwiKSxcbiAgICBMVDogbmV3IGNvZGVfMS5fQ29kZShcIjxcIiksXG4gICAgTFRFOiBuZXcgY29kZV8xLl9Db2RlKFwiPD1cIiksXG4gICAgRVE6IG5ldyBjb2RlXzEuX0NvZGUoXCI9PT1cIiksXG4gICAgTkVROiBuZXcgY29kZV8xLl9Db2RlKFwiIT09XCIpLFxuICAgIE5PVDogbmV3IGNvZGVfMS5fQ29kZShcIiFcIiksXG4gICAgT1I6IG5ldyBjb2RlXzEuX0NvZGUoXCJ8fFwiKSxcbiAgICBBTkQ6IG5ldyBjb2RlXzEuX0NvZGUoXCImJlwiKSxcbiAgICBBREQ6IG5ldyBjb2RlXzEuX0NvZGUoXCIrXCIpLFxufTtcbmNsYXNzIE5vZGUge1xuICAgIG9wdGltaXplTm9kZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBvcHRpbWl6ZU5hbWVzKF9uYW1lcywgX2NvbnN0YW50cykge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG59XG5jbGFzcyBEZWYgZXh0ZW5kcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcih2YXJLaW5kLCBuYW1lLCByaHMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52YXJLaW5kID0gdmFyS2luZDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5yaHMgPSByaHM7XG4gICAgfVxuICAgIHJlbmRlcih7IGVzNSwgX24gfSkge1xuICAgICAgICBjb25zdCB2YXJLaW5kID0gZXM1ID8gc2NvcGVfMS52YXJLaW5kcy52YXIgOiB0aGlzLnZhcktpbmQ7XG4gICAgICAgIGNvbnN0IHJocyA9IHRoaXMucmhzID09PSB1bmRlZmluZWQgPyBcIlwiIDogYCA9ICR7dGhpcy5yaHN9YDtcbiAgICAgICAgcmV0dXJuIGAke3ZhcktpbmR9ICR7dGhpcy5uYW1lfSR7cmhzfTtgICsgX247XG4gICAgfVxuICAgIG9wdGltaXplTmFtZXMobmFtZXMsIGNvbnN0YW50cykge1xuICAgICAgICBpZiAoIW5hbWVzW3RoaXMubmFtZS5zdHJdKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAodGhpcy5yaHMpXG4gICAgICAgICAgICB0aGlzLnJocyA9IG9wdGltaXplRXhwcih0aGlzLnJocywgbmFtZXMsIGNvbnN0YW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJocyBpbnN0YW5jZW9mIGNvZGVfMS5fQ29kZU9yTmFtZSA/IHRoaXMucmhzLm5hbWVzIDoge307XG4gICAgfVxufVxuY2xhc3MgQXNzaWduIGV4dGVuZHMgTm9kZSB7XG4gICAgY29uc3RydWN0b3IobGhzLCByaHMsIHNpZGVFZmZlY3RzKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubGhzID0gbGhzO1xuICAgICAgICB0aGlzLnJocyA9IHJocztcbiAgICAgICAgdGhpcy5zaWRlRWZmZWN0cyA9IHNpZGVFZmZlY3RzO1xuICAgIH1cbiAgICByZW5kZXIoeyBfbiB9KSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmxoc30gPSAke3RoaXMucmhzfTtgICsgX247XG4gICAgfVxuICAgIG9wdGltaXplTmFtZXMobmFtZXMsIGNvbnN0YW50cykge1xuICAgICAgICBpZiAodGhpcy5saHMgaW5zdGFuY2VvZiBjb2RlXzEuTmFtZSAmJiAhbmFtZXNbdGhpcy5saHMuc3RyXSAmJiAhdGhpcy5zaWRlRWZmZWN0cylcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5yaHMgPSBvcHRpbWl6ZUV4cHIodGhpcy5yaHMsIG5hbWVzLCBjb25zdGFudHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0IG5hbWVzKCkge1xuICAgICAgICBjb25zdCBuYW1lcyA9IHRoaXMubGhzIGluc3RhbmNlb2YgY29kZV8xLk5hbWUgPyB7fSA6IHsgLi4udGhpcy5saHMubmFtZXMgfTtcbiAgICAgICAgcmV0dXJuIGFkZEV4cHJOYW1lcyhuYW1lcywgdGhpcy5yaHMpO1xuICAgIH1cbn1cbmNsYXNzIEFzc2lnbk9wIGV4dGVuZHMgQXNzaWduIHtcbiAgICBjb25zdHJ1Y3RvcihsaHMsIG9wLCByaHMsIHNpZGVFZmZlY3RzKSB7XG4gICAgICAgIHN1cGVyKGxocywgcmhzLCBzaWRlRWZmZWN0cyk7XG4gICAgICAgIHRoaXMub3AgPSBvcDtcbiAgICB9XG4gICAgcmVuZGVyKHsgX24gfSkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5saHN9ICR7dGhpcy5vcH09ICR7dGhpcy5yaHN9O2AgKyBfbjtcbiAgICB9XG59XG5jbGFzcyBMYWJlbCBleHRlbmRzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGxhYmVsKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbDtcbiAgICAgICAgdGhpcy5uYW1lcyA9IHt9O1xuICAgIH1cbiAgICByZW5kZXIoeyBfbiB9KSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLmxhYmVsfTpgICsgX247XG4gICAgfVxufVxuY2xhc3MgQnJlYWsgZXh0ZW5kcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihsYWJlbCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWw7XG4gICAgICAgIHRoaXMubmFtZXMgPSB7fTtcbiAgICB9XG4gICAgcmVuZGVyKHsgX24gfSkge1xuICAgICAgICBjb25zdCBsYWJlbCA9IHRoaXMubGFiZWwgPyBgICR7dGhpcy5sYWJlbH1gIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIGBicmVhayR7bGFiZWx9O2AgKyBfbjtcbiAgICB9XG59XG5jbGFzcyBUaHJvdyBleHRlbmRzIE5vZGUge1xuICAgIGNvbnN0cnVjdG9yKGVycm9yKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gICAgcmVuZGVyKHsgX24gfSkge1xuICAgICAgICByZXR1cm4gYHRocm93ICR7dGhpcy5lcnJvcn07YCArIF9uO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVycm9yLm5hbWVzO1xuICAgIH1cbn1cbmNsYXNzIEFueUNvZGUgZXh0ZW5kcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb2RlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY29kZSA9IGNvZGU7XG4gICAgfVxuICAgIHJlbmRlcih7IF9uIH0pIHtcbiAgICAgICAgcmV0dXJuIGAke3RoaXMuY29kZX07YCArIF9uO1xuICAgIH1cbiAgICBvcHRpbWl6ZU5vZGVzKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5jb2RlfWAgPyB0aGlzIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRpbWl6ZU5hbWVzKG5hbWVzLCBjb25zdGFudHMpIHtcbiAgICAgICAgdGhpcy5jb2RlID0gb3B0aW1pemVFeHByKHRoaXMuY29kZSwgbmFtZXMsIGNvbnN0YW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvZGUgaW5zdGFuY2VvZiBjb2RlXzEuX0NvZGVPck5hbWUgPyB0aGlzLmNvZGUubmFtZXMgOiB7fTtcbiAgICB9XG59XG5jbGFzcyBQYXJlbnROb2RlIGV4dGVuZHMgTm9kZSB7XG4gICAgY29uc3RydWN0b3Iobm9kZXMgPSBbXSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5vZGVzID0gbm9kZXM7XG4gICAgfVxuICAgIHJlbmRlcihvcHRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm5vZGVzLnJlZHVjZSgoY29kZSwgbikgPT4gY29kZSArIG4ucmVuZGVyKG9wdHMpLCBcIlwiKTtcbiAgICB9XG4gICAgb3B0aW1pemVOb2RlcygpIHtcbiAgICAgICAgY29uc3QgeyBub2RlcyB9ID0gdGhpcztcbiAgICAgICAgbGV0IGkgPSBub2Rlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IG4gPSBub2Rlc1tpXS5vcHRpbWl6ZU5vZGVzKCk7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShuKSlcbiAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaSwgMSwgLi4ubik7XG4gICAgICAgICAgICBlbHNlIGlmIChuKVxuICAgICAgICAgICAgICAgIG5vZGVzW2ldID0gbjtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBub2Rlcy5zcGxpY2UoaSwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5vZGVzLmxlbmd0aCA+IDAgPyB0aGlzIDogdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRpbWl6ZU5hbWVzKG5hbWVzLCBjb25zdGFudHMpIHtcbiAgICAgICAgY29uc3QgeyBub2RlcyB9ID0gdGhpcztcbiAgICAgICAgbGV0IGkgPSBub2Rlcy5sZW5ndGg7XG4gICAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgICAgIC8vIGl0ZXJhdGluZyBiYWNrd2FyZHMgaW1wcm92ZXMgMS1wYXNzIG9wdGltaXphdGlvblxuICAgICAgICAgICAgY29uc3QgbiA9IG5vZGVzW2ldO1xuICAgICAgICAgICAgaWYgKG4ub3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSlcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIHN1YnRyYWN0TmFtZXMobmFtZXMsIG4ubmFtZXMpO1xuICAgICAgICAgICAgbm9kZXMuc3BsaWNlKGksIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBub2Rlcy5sZW5ndGggPiAwID8gdGhpcyA6IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgZ2V0IG5hbWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5ub2Rlcy5yZWR1Y2UoKG5hbWVzLCBuKSA9PiBhZGROYW1lcyhuYW1lcywgbi5uYW1lcyksIHt9KTtcbiAgICB9XG59XG5jbGFzcyBCbG9ja05vZGUgZXh0ZW5kcyBQYXJlbnROb2RlIHtcbiAgICByZW5kZXIob3B0cykge1xuICAgICAgICByZXR1cm4gXCJ7XCIgKyBvcHRzLl9uICsgc3VwZXIucmVuZGVyKG9wdHMpICsgXCJ9XCIgKyBvcHRzLl9uO1xuICAgIH1cbn1cbmNsYXNzIFJvb3QgZXh0ZW5kcyBQYXJlbnROb2RlIHtcbn1cbmNsYXNzIEVsc2UgZXh0ZW5kcyBCbG9ja05vZGUge1xufVxuRWxzZS5raW5kID0gXCJlbHNlXCI7XG5jbGFzcyBJZiBleHRlbmRzIEJsb2NrTm9kZSB7XG4gICAgY29uc3RydWN0b3IoY29uZGl0aW9uLCBub2Rlcykge1xuICAgICAgICBzdXBlcihub2Rlcyk7XG4gICAgICAgIHRoaXMuY29uZGl0aW9uID0gY29uZGl0aW9uO1xuICAgIH1cbiAgICByZW5kZXIob3B0cykge1xuICAgICAgICBsZXQgY29kZSA9IGBpZigke3RoaXMuY29uZGl0aW9ufSlgICsgc3VwZXIucmVuZGVyKG9wdHMpO1xuICAgICAgICBpZiAodGhpcy5lbHNlKVxuICAgICAgICAgICAgY29kZSArPSBcImVsc2UgXCIgKyB0aGlzLmVsc2UucmVuZGVyKG9wdHMpO1xuICAgICAgICByZXR1cm4gY29kZTtcbiAgICB9XG4gICAgb3B0aW1pemVOb2RlcygpIHtcbiAgICAgICAgc3VwZXIub3B0aW1pemVOb2RlcygpO1xuICAgICAgICBjb25zdCBjb25kID0gdGhpcy5jb25kaXRpb247XG4gICAgICAgIGlmIChjb25kID09PSB0cnVlKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZXM7IC8vIGVsc2UgaXMgaWdub3JlZCBoZXJlXG4gICAgICAgIGxldCBlID0gdGhpcy5lbHNlO1xuICAgICAgICBpZiAoZSkge1xuICAgICAgICAgICAgY29uc3QgbnMgPSBlLm9wdGltaXplTm9kZXMoKTtcbiAgICAgICAgICAgIGUgPSB0aGlzLmVsc2UgPSBBcnJheS5pc0FycmF5KG5zKSA/IG5ldyBFbHNlKG5zKSA6IG5zO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlKSB7XG4gICAgICAgICAgICBpZiAoY29uZCA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgaW5zdGFuY2VvZiBJZiA/IGUgOiBlLm5vZGVzO1xuICAgICAgICAgICAgaWYgKHRoaXMubm9kZXMubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBJZihub3QoY29uZCksIGUgaW5zdGFuY2VvZiBJZiA/IFtlXSA6IGUubm9kZXMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjb25kID09PSBmYWxzZSB8fCAhdGhpcy5ub2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgb3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy5lbHNlID0gKF9hID0gdGhpcy5lbHNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKTtcbiAgICAgICAgaWYgKCEoc3VwZXIub3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSB8fCB0aGlzLmVsc2UpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB0aGlzLmNvbmRpdGlvbiA9IG9wdGltaXplRXhwcih0aGlzLmNvbmRpdGlvbiwgbmFtZXMsIGNvbnN0YW50cyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gc3VwZXIubmFtZXM7XG4gICAgICAgIGFkZEV4cHJOYW1lcyhuYW1lcywgdGhpcy5jb25kaXRpb24pO1xuICAgICAgICBpZiAodGhpcy5lbHNlKVxuICAgICAgICAgICAgYWRkTmFtZXMobmFtZXMsIHRoaXMuZWxzZS5uYW1lcyk7XG4gICAgICAgIHJldHVybiBuYW1lcztcbiAgICB9XG59XG5JZi5raW5kID0gXCJpZlwiO1xuY2xhc3MgRm9yIGV4dGVuZHMgQmxvY2tOb2RlIHtcbn1cbkZvci5raW5kID0gXCJmb3JcIjtcbmNsYXNzIEZvckxvb3AgZXh0ZW5kcyBGb3Ige1xuICAgIGNvbnN0cnVjdG9yKGl0ZXJhdGlvbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLml0ZXJhdGlvbiA9IGl0ZXJhdGlvbjtcbiAgICB9XG4gICAgcmVuZGVyKG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGBmb3IoJHt0aGlzLml0ZXJhdGlvbn0pYCArIHN1cGVyLnJlbmRlcihvcHRzKTtcbiAgICB9XG4gICAgb3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSB7XG4gICAgICAgIGlmICghc3VwZXIub3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5pdGVyYXRpb24gPSBvcHRpbWl6ZUV4cHIodGhpcy5pdGVyYXRpb24sIG5hbWVzLCBjb25zdGFudHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0IG5hbWVzKCkge1xuICAgICAgICByZXR1cm4gYWRkTmFtZXMoc3VwZXIubmFtZXMsIHRoaXMuaXRlcmF0aW9uLm5hbWVzKTtcbiAgICB9XG59XG5jbGFzcyBGb3JSYW5nZSBleHRlbmRzIEZvciB7XG4gICAgY29uc3RydWN0b3IodmFyS2luZCwgbmFtZSwgZnJvbSwgdG8pIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy52YXJLaW5kID0gdmFyS2luZDtcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcbiAgICAgICAgdGhpcy50byA9IHRvO1xuICAgIH1cbiAgICByZW5kZXIob3B0cykge1xuICAgICAgICBjb25zdCB2YXJLaW5kID0gb3B0cy5lczUgPyBzY29wZV8xLnZhcktpbmRzLnZhciA6IHRoaXMudmFyS2luZDtcbiAgICAgICAgY29uc3QgeyBuYW1lLCBmcm9tLCB0byB9ID0gdGhpcztcbiAgICAgICAgcmV0dXJuIGBmb3IoJHt2YXJLaW5kfSAke25hbWV9PSR7ZnJvbX07ICR7bmFtZX08JHt0b307ICR7bmFtZX0rKylgICsgc3VwZXIucmVuZGVyKG9wdHMpO1xuICAgIH1cbiAgICBnZXQgbmFtZXMoKSB7XG4gICAgICAgIGNvbnN0IG5hbWVzID0gYWRkRXhwck5hbWVzKHN1cGVyLm5hbWVzLCB0aGlzLmZyb20pO1xuICAgICAgICByZXR1cm4gYWRkRXhwck5hbWVzKG5hbWVzLCB0aGlzLnRvKTtcbiAgICB9XG59XG5jbGFzcyBGb3JJdGVyIGV4dGVuZHMgRm9yIHtcbiAgICBjb25zdHJ1Y3Rvcihsb29wLCB2YXJLaW5kLCBuYW1lLCBpdGVyYWJsZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmxvb3AgPSBsb29wO1xuICAgICAgICB0aGlzLnZhcktpbmQgPSB2YXJLaW5kO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLml0ZXJhYmxlID0gaXRlcmFibGU7XG4gICAgfVxuICAgIHJlbmRlcihvcHRzKSB7XG4gICAgICAgIHJldHVybiBgZm9yKCR7dGhpcy52YXJLaW5kfSAke3RoaXMubmFtZX0gJHt0aGlzLmxvb3B9ICR7dGhpcy5pdGVyYWJsZX0pYCArIHN1cGVyLnJlbmRlcihvcHRzKTtcbiAgICB9XG4gICAgb3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSB7XG4gICAgICAgIGlmICghc3VwZXIub3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdGhpcy5pdGVyYWJsZSA9IG9wdGltaXplRXhwcih0aGlzLml0ZXJhYmxlLCBuYW1lcywgY29uc3RhbnRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGdldCBuYW1lcygpIHtcbiAgICAgICAgcmV0dXJuIGFkZE5hbWVzKHN1cGVyLm5hbWVzLCB0aGlzLml0ZXJhYmxlLm5hbWVzKTtcbiAgICB9XG59XG5jbGFzcyBGdW5jIGV4dGVuZHMgQmxvY2tOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihuYW1lLCBhcmdzLCBhc3luYykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmFyZ3MgPSBhcmdzO1xuICAgICAgICB0aGlzLmFzeW5jID0gYXN5bmM7XG4gICAgfVxuICAgIHJlbmRlcihvcHRzKSB7XG4gICAgICAgIGNvbnN0IF9hc3luYyA9IHRoaXMuYXN5bmMgPyBcImFzeW5jIFwiIDogXCJcIjtcbiAgICAgICAgcmV0dXJuIGAke19hc3luY31mdW5jdGlvbiAke3RoaXMubmFtZX0oJHt0aGlzLmFyZ3N9KWAgKyBzdXBlci5yZW5kZXIob3B0cyk7XG4gICAgfVxufVxuRnVuYy5raW5kID0gXCJmdW5jXCI7XG5jbGFzcyBSZXR1cm4gZXh0ZW5kcyBQYXJlbnROb2RlIHtcbiAgICByZW5kZXIob3B0cykge1xuICAgICAgICByZXR1cm4gXCJyZXR1cm4gXCIgKyBzdXBlci5yZW5kZXIob3B0cyk7XG4gICAgfVxufVxuUmV0dXJuLmtpbmQgPSBcInJldHVyblwiO1xuY2xhc3MgVHJ5IGV4dGVuZHMgQmxvY2tOb2RlIHtcbiAgICByZW5kZXIob3B0cykge1xuICAgICAgICBsZXQgY29kZSA9IFwidHJ5XCIgKyBzdXBlci5yZW5kZXIob3B0cyk7XG4gICAgICAgIGlmICh0aGlzLmNhdGNoKVxuICAgICAgICAgICAgY29kZSArPSB0aGlzLmNhdGNoLnJlbmRlcihvcHRzKTtcbiAgICAgICAgaWYgKHRoaXMuZmluYWxseSlcbiAgICAgICAgICAgIGNvZGUgKz0gdGhpcy5maW5hbGx5LnJlbmRlcihvcHRzKTtcbiAgICAgICAgcmV0dXJuIGNvZGU7XG4gICAgfVxuICAgIG9wdGltaXplTm9kZXMoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHN1cGVyLm9wdGltaXplTm9kZXMoKTtcbiAgICAgICAgKF9hID0gdGhpcy5jYXRjaCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm9wdGltaXplTm9kZXMoKTtcbiAgICAgICAgKF9iID0gdGhpcy5maW5hbGx5KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Iub3B0aW1pemVOb2RlcygpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgb3B0aW1pemVOYW1lcyhuYW1lcywgY29uc3RhbnRzKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHN1cGVyLm9wdGltaXplTmFtZXMobmFtZXMsIGNvbnN0YW50cyk7XG4gICAgICAgIChfYSA9IHRoaXMuY2F0Y2gpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5vcHRpbWl6ZU5hbWVzKG5hbWVzLCBjb25zdGFudHMpO1xuICAgICAgICAoX2IgPSB0aGlzLmZpbmFsbHkpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vcHRpbWl6ZU5hbWVzKG5hbWVzLCBjb25zdGFudHMpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0IG5hbWVzKCkge1xuICAgICAgICBjb25zdCBuYW1lcyA9IHN1cGVyLm5hbWVzO1xuICAgICAgICBpZiAodGhpcy5jYXRjaClcbiAgICAgICAgICAgIGFkZE5hbWVzKG5hbWVzLCB0aGlzLmNhdGNoLm5hbWVzKTtcbiAgICAgICAgaWYgKHRoaXMuZmluYWxseSlcbiAgICAgICAgICAgIGFkZE5hbWVzKG5hbWVzLCB0aGlzLmZpbmFsbHkubmFtZXMpO1xuICAgICAgICByZXR1cm4gbmFtZXM7XG4gICAgfVxufVxuY2xhc3MgQ2F0Y2ggZXh0ZW5kcyBCbG9ja05vZGUge1xuICAgIGNvbnN0cnVjdG9yKGVycm9yKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcbiAgICB9XG4gICAgcmVuZGVyKG9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGBjYXRjaCgke3RoaXMuZXJyb3J9KWAgKyBzdXBlci5yZW5kZXIob3B0cyk7XG4gICAgfVxufVxuQ2F0Y2gua2luZCA9IFwiY2F0Y2hcIjtcbmNsYXNzIEZpbmFsbHkgZXh0ZW5kcyBCbG9ja05vZGUge1xuICAgIHJlbmRlcihvcHRzKSB7XG4gICAgICAgIHJldHVybiBcImZpbmFsbHlcIiArIHN1cGVyLnJlbmRlcihvcHRzKTtcbiAgICB9XG59XG5GaW5hbGx5LmtpbmQgPSBcImZpbmFsbHlcIjtcbmNsYXNzIENvZGVHZW4ge1xuICAgIGNvbnN0cnVjdG9yKGV4dFNjb3BlLCBvcHRzID0ge30pIHtcbiAgICAgICAgdGhpcy5fdmFsdWVzID0ge307XG4gICAgICAgIHRoaXMuX2Jsb2NrU3RhcnRzID0gW107XG4gICAgICAgIHRoaXMuX2NvbnN0YW50cyA9IHt9O1xuICAgICAgICB0aGlzLm9wdHMgPSB7IC4uLm9wdHMsIF9uOiBvcHRzLmxpbmVzID8gXCJcXG5cIiA6IFwiXCIgfTtcbiAgICAgICAgdGhpcy5fZXh0U2NvcGUgPSBleHRTY29wZTtcbiAgICAgICAgdGhpcy5fc2NvcGUgPSBuZXcgc2NvcGVfMS5TY29wZSh7IHBhcmVudDogZXh0U2NvcGUgfSk7XG4gICAgICAgIHRoaXMuX25vZGVzID0gW25ldyBSb290KCldO1xuICAgIH1cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Jvb3QucmVuZGVyKHRoaXMub3B0cyk7XG4gICAgfVxuICAgIC8vIHJldHVybnMgdW5pcXVlIG5hbWUgaW4gdGhlIGludGVybmFsIHNjb3BlXG4gICAgbmFtZShwcmVmaXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Njb3BlLm5hbWUocHJlZml4KTtcbiAgICB9XG4gICAgLy8gcmVzZXJ2ZXMgdW5pcXVlIG5hbWUgaW4gdGhlIGV4dGVybmFsIHNjb3BlXG4gICAgc2NvcGVOYW1lKHByZWZpeCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0U2NvcGUubmFtZShwcmVmaXgpO1xuICAgIH1cbiAgICAvLyByZXNlcnZlcyB1bmlxdWUgbmFtZSBpbiB0aGUgZXh0ZXJuYWwgc2NvcGUgYW5kIGFzc2lnbnMgdmFsdWUgdG8gaXRcbiAgICBzY29wZVZhbHVlKHByZWZpeE9yTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgY29uc3QgbmFtZSA9IHRoaXMuX2V4dFNjb3BlLnZhbHVlKHByZWZpeE9yTmFtZSwgdmFsdWUpO1xuICAgICAgICBjb25zdCB2cyA9IHRoaXMuX3ZhbHVlc1tuYW1lLnByZWZpeF0gfHwgKHRoaXMuX3ZhbHVlc1tuYW1lLnByZWZpeF0gPSBuZXcgU2V0KCkpO1xuICAgICAgICB2cy5hZGQobmFtZSk7XG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cbiAgICBnZXRTY29wZVZhbHVlKHByZWZpeCwga2V5T3JSZWYpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2V4dFNjb3BlLmdldFZhbHVlKHByZWZpeCwga2V5T3JSZWYpO1xuICAgIH1cbiAgICAvLyByZXR1cm4gY29kZSB0aGF0IGFzc2lnbnMgdmFsdWVzIGluIHRoZSBleHRlcm5hbCBzY29wZSB0byB0aGUgbmFtZXMgdGhhdCBhcmUgdXNlZCBpbnRlcm5hbGx5XG4gICAgLy8gKHNhbWUgbmFtZXMgdGhhdCB3ZXJlIHJldHVybmVkIGJ5IGdlbi5zY29wZU5hbWUgb3IgZ2VuLnNjb3BlVmFsdWUpXG4gICAgc2NvcGVSZWZzKHNjb3BlTmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0U2NvcGUuc2NvcGVSZWZzKHNjb3BlTmFtZSwgdGhpcy5fdmFsdWVzKTtcbiAgICB9XG4gICAgc2NvcGVDb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZXh0U2NvcGUuc2NvcGVDb2RlKHRoaXMuX3ZhbHVlcyk7XG4gICAgfVxuICAgIF9kZWYodmFyS2luZCwgbmFtZU9yUHJlZml4LCByaHMsIGNvbnN0YW50KSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLl9zY29wZS50b05hbWUobmFtZU9yUHJlZml4KTtcbiAgICAgICAgaWYgKHJocyAhPT0gdW5kZWZpbmVkICYmIGNvbnN0YW50KVxuICAgICAgICAgICAgdGhpcy5fY29uc3RhbnRzW25hbWUuc3RyXSA9IHJocztcbiAgICAgICAgdGhpcy5fbGVhZk5vZGUobmV3IERlZih2YXJLaW5kLCBuYW1lLCByaHMpKTtcbiAgICAgICAgcmV0dXJuIG5hbWU7XG4gICAgfVxuICAgIC8vIGBjb25zdGAgZGVjbGFyYXRpb24gKGB2YXJgIGluIGVzNSBtb2RlKVxuICAgIGNvbnN0KG5hbWVPclByZWZpeCwgcmhzLCBfY29uc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZihzY29wZV8xLnZhcktpbmRzLmNvbnN0LCBuYW1lT3JQcmVmaXgsIHJocywgX2NvbnN0YW50KTtcbiAgICB9XG4gICAgLy8gYGxldGAgZGVjbGFyYXRpb24gd2l0aCBvcHRpb25hbCBhc3NpZ25tZW50IChgdmFyYCBpbiBlczUgbW9kZSlcbiAgICBsZXQobmFtZU9yUHJlZml4LCByaHMsIF9jb25zdGFudCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmKHNjb3BlXzEudmFyS2luZHMubGV0LCBuYW1lT3JQcmVmaXgsIHJocywgX2NvbnN0YW50KTtcbiAgICB9XG4gICAgLy8gYHZhcmAgZGVjbGFyYXRpb24gd2l0aCBvcHRpb25hbCBhc3NpZ25tZW50XG4gICAgdmFyKG5hbWVPclByZWZpeCwgcmhzLCBfY29uc3RhbnQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlZihzY29wZV8xLnZhcktpbmRzLnZhciwgbmFtZU9yUHJlZml4LCByaHMsIF9jb25zdGFudCk7XG4gICAgfVxuICAgIC8vIGFzc2lnbm1lbnQgY29kZVxuICAgIGFzc2lnbihsaHMsIHJocywgc2lkZUVmZmVjdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlYWZOb2RlKG5ldyBBc3NpZ24obGhzLCByaHMsIHNpZGVFZmZlY3RzKSk7XG4gICAgfVxuICAgIC8vIGArPWAgY29kZVxuICAgIGFkZChsaHMsIHJocykge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGVhZk5vZGUobmV3IEFzc2lnbk9wKGxocywgZXhwb3J0cy5vcGVyYXRvcnMuQURELCByaHMpKTtcbiAgICB9XG4gICAgLy8gYXBwZW5kcyBwYXNzZWQgU2FmZUV4cHIgdG8gY29kZSBvciBleGVjdXRlcyBCbG9ja1xuICAgIGNvZGUoYykge1xuICAgICAgICBpZiAodHlwZW9mIGMgPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICAgICAgYygpO1xuICAgICAgICBlbHNlIGlmIChjICE9PSBjb2RlXzEubmlsKVxuICAgICAgICAgICAgdGhpcy5fbGVhZk5vZGUobmV3IEFueUNvZGUoYykpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gcmV0dXJucyBjb2RlIGZvciBvYmplY3QgbGl0ZXJhbCBmb3IgdGhlIHBhc3NlZCBhcmd1bWVudCBsaXN0IG9mIGtleS12YWx1ZSBwYWlyc1xuICAgIG9iamVjdCguLi5rZXlWYWx1ZXMpIHtcbiAgICAgICAgY29uc3QgY29kZSA9IFtcIntcIl07XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIGtleVZhbHVlcykge1xuICAgICAgICAgICAgaWYgKGNvZGUubGVuZ3RoID4gMSlcbiAgICAgICAgICAgICAgICBjb2RlLnB1c2goXCIsXCIpO1xuICAgICAgICAgICAgY29kZS5wdXNoKGtleSk7XG4gICAgICAgICAgICBpZiAoa2V5ICE9PSB2YWx1ZSB8fCB0aGlzLm9wdHMuZXM1KSB7XG4gICAgICAgICAgICAgICAgY29kZS5wdXNoKFwiOlwiKTtcbiAgICAgICAgICAgICAgICAoMCwgY29kZV8xLmFkZENvZGVBcmcpKGNvZGUsIHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb2RlLnB1c2goXCJ9XCIpO1xuICAgICAgICByZXR1cm4gbmV3IGNvZGVfMS5fQ29kZShjb2RlKTtcbiAgICB9XG4gICAgLy8gYGlmYCBjbGF1c2UgKG9yIHN0YXRlbWVudCBpZiBgdGhlbkJvZHlgIGFuZCwgb3B0aW9uYWxseSwgYGVsc2VCb2R5YCBhcmUgcGFzc2VkKVxuICAgIGlmKGNvbmRpdGlvbiwgdGhlbkJvZHksIGVsc2VCb2R5KSB7XG4gICAgICAgIHRoaXMuX2Jsb2NrTm9kZShuZXcgSWYoY29uZGl0aW9uKSk7XG4gICAgICAgIGlmICh0aGVuQm9keSAmJiBlbHNlQm9keSkge1xuICAgICAgICAgICAgdGhpcy5jb2RlKHRoZW5Cb2R5KS5lbHNlKCkuY29kZShlbHNlQm9keSkuZW5kSWYoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGVuQm9keSkge1xuICAgICAgICAgICAgdGhpcy5jb2RlKHRoZW5Cb2R5KS5lbmRJZigpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGVsc2VCb2R5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGVHZW46IFwiZWxzZVwiIGJvZHkgd2l0aG91dCBcInRoZW5cIiBib2R5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGBlbHNlIGlmYCBjbGF1c2UgLSBpbnZhbGlkIHdpdGhvdXQgYGlmYCBvciBhZnRlciBgZWxzZWAgY2xhdXNlc1xuICAgIGVsc2VJZihjb25kaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2Vsc2VOb2RlKG5ldyBJZihjb25kaXRpb24pKTtcbiAgICB9XG4gICAgLy8gYGVsc2VgIGNsYXVzZSAtIG9ubHkgdmFsaWQgYWZ0ZXIgYGlmYCBvciBgZWxzZSBpZmAgY2xhdXNlc1xuICAgIGVsc2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbHNlTm9kZShuZXcgRWxzZSgpKTtcbiAgICB9XG4gICAgLy8gZW5kIGBpZmAgc3RhdGVtZW50IChuZWVkZWQgaWYgZ2VuLmlmIHdhcyB1c2VkIG9ubHkgd2l0aCBjb25kaXRpb24pXG4gICAgZW5kSWYoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmRCbG9ja05vZGUoSWYsIEVsc2UpO1xuICAgIH1cbiAgICBfZm9yKG5vZGUsIGZvckJvZHkpIHtcbiAgICAgICAgdGhpcy5fYmxvY2tOb2RlKG5vZGUpO1xuICAgICAgICBpZiAoZm9yQm9keSlcbiAgICAgICAgICAgIHRoaXMuY29kZShmb3JCb2R5KS5lbmRGb3IoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIGEgZ2VuZXJpYyBgZm9yYCBjbGF1c2UgKG9yIHN0YXRlbWVudCBpZiBgZm9yQm9keWAgaXMgcGFzc2VkKVxuICAgIGZvcihpdGVyYXRpb24sIGZvckJvZHkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvcihuZXcgRm9yTG9vcChpdGVyYXRpb24pLCBmb3JCb2R5KTtcbiAgICB9XG4gICAgLy8gYGZvcmAgc3RhdGVtZW50IGZvciBhIHJhbmdlIG9mIHZhbHVlc1xuICAgIGZvclJhbmdlKG5hbWVPclByZWZpeCwgZnJvbSwgdG8sIGZvckJvZHksIHZhcktpbmQgPSB0aGlzLm9wdHMuZXM1ID8gc2NvcGVfMS52YXJLaW5kcy52YXIgOiBzY29wZV8xLnZhcktpbmRzLmxldCkge1xuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5fc2NvcGUudG9OYW1lKG5hbWVPclByZWZpeCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3IobmV3IEZvclJhbmdlKHZhcktpbmQsIG5hbWUsIGZyb20sIHRvKSwgKCkgPT4gZm9yQm9keShuYW1lKSk7XG4gICAgfVxuICAgIC8vIGBmb3Itb2ZgIHN0YXRlbWVudCAoaW4gZXM1IG1vZGUgcmVwbGFjZSB3aXRoIGEgbm9ybWFsIGZvciBsb29wKVxuICAgIGZvck9mKG5hbWVPclByZWZpeCwgaXRlcmFibGUsIGZvckJvZHksIHZhcktpbmQgPSBzY29wZV8xLnZhcktpbmRzLmNvbnN0KSB7XG4gICAgICAgIGNvbnN0IG5hbWUgPSB0aGlzLl9zY29wZS50b05hbWUobmFtZU9yUHJlZml4KTtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5lczUpIHtcbiAgICAgICAgICAgIGNvbnN0IGFyciA9IGl0ZXJhYmxlIGluc3RhbmNlb2YgY29kZV8xLk5hbWUgPyBpdGVyYWJsZSA6IHRoaXMudmFyKFwiX2FyclwiLCBpdGVyYWJsZSk7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JSYW5nZShcIl9pXCIsIDAsICgwLCBjb2RlXzEuXykgYCR7YXJyfS5sZW5ndGhgLCAoaSkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMudmFyKG5hbWUsICgwLCBjb2RlXzEuXykgYCR7YXJyfVske2l9XWApO1xuICAgICAgICAgICAgICAgIGZvckJvZHkobmFtZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZm9yKG5ldyBGb3JJdGVyKFwib2ZcIiwgdmFyS2luZCwgbmFtZSwgaXRlcmFibGUpLCAoKSA9PiBmb3JCb2R5KG5hbWUpKTtcbiAgICB9XG4gICAgLy8gYGZvci1pbmAgc3RhdGVtZW50LlxuICAgIC8vIFdpdGggb3B0aW9uIGBvd25Qcm9wZXJ0aWVzYCByZXBsYWNlZCB3aXRoIGEgYGZvci1vZmAgbG9vcCBmb3Igb2JqZWN0IGtleXNcbiAgICBmb3JJbihuYW1lT3JQcmVmaXgsIG9iaiwgZm9yQm9keSwgdmFyS2luZCA9IHRoaXMub3B0cy5lczUgPyBzY29wZV8xLnZhcktpbmRzLnZhciA6IHNjb3BlXzEudmFyS2luZHMuY29uc3QpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5vd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JPZihuYW1lT3JQcmVmaXgsICgwLCBjb2RlXzEuXykgYE9iamVjdC5rZXlzKCR7b2JqfSlgLCBmb3JCb2R5KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuYW1lID0gdGhpcy5fc2NvcGUudG9OYW1lKG5hbWVPclByZWZpeCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9mb3IobmV3IEZvckl0ZXIoXCJpblwiLCB2YXJLaW5kLCBuYW1lLCBvYmopLCAoKSA9PiBmb3JCb2R5KG5hbWUpKTtcbiAgICB9XG4gICAgLy8gZW5kIGBmb3JgIGxvb3BcbiAgICBlbmRGb3IoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmRCbG9ja05vZGUoRm9yKTtcbiAgICB9XG4gICAgLy8gYGxhYmVsYCBzdGF0ZW1lbnRcbiAgICBsYWJlbChsYWJlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fbGVhZk5vZGUobmV3IExhYmVsKGxhYmVsKSk7XG4gICAgfVxuICAgIC8vIGBicmVha2Agc3RhdGVtZW50XG4gICAgYnJlYWsobGFiZWwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlYWZOb2RlKG5ldyBCcmVhayhsYWJlbCkpO1xuICAgIH1cbiAgICAvLyBgcmV0dXJuYCBzdGF0ZW1lbnRcbiAgICByZXR1cm4odmFsdWUpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyBSZXR1cm4oKTtcbiAgICAgICAgdGhpcy5fYmxvY2tOb2RlKG5vZGUpO1xuICAgICAgICB0aGlzLmNvZGUodmFsdWUpO1xuICAgICAgICBpZiAobm9kZS5ub2Rlcy5sZW5ndGggIT09IDEpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGVHZW46IFwicmV0dXJuXCIgc2hvdWxkIGhhdmUgb25lIG5vZGUnKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZEJsb2NrTm9kZShSZXR1cm4pO1xuICAgIH1cbiAgICAvLyBgdHJ5YCBzdGF0ZW1lbnRcbiAgICB0cnkodHJ5Qm9keSwgY2F0Y2hDb2RlLCBmaW5hbGx5Q29kZSkge1xuICAgICAgICBpZiAoIWNhdGNoQ29kZSAmJiAhZmluYWxseUNvZGUpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvZGVHZW46IFwidHJ5XCIgd2l0aG91dCBcImNhdGNoXCIgYW5kIFwiZmluYWxseVwiJyk7XG4gICAgICAgIGNvbnN0IG5vZGUgPSBuZXcgVHJ5KCk7XG4gICAgICAgIHRoaXMuX2Jsb2NrTm9kZShub2RlKTtcbiAgICAgICAgdGhpcy5jb2RlKHRyeUJvZHkpO1xuICAgICAgICBpZiAoY2F0Y2hDb2RlKSB7XG4gICAgICAgICAgICBjb25zdCBlcnJvciA9IHRoaXMubmFtZShcImVcIik7XG4gICAgICAgICAgICB0aGlzLl9jdXJyTm9kZSA9IG5vZGUuY2F0Y2ggPSBuZXcgQ2F0Y2goZXJyb3IpO1xuICAgICAgICAgICAgY2F0Y2hDb2RlKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZmluYWxseUNvZGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJOb2RlID0gbm9kZS5maW5hbGx5ID0gbmV3IEZpbmFsbHkoKTtcbiAgICAgICAgICAgIHRoaXMuY29kZShmaW5hbGx5Q29kZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2VuZEJsb2NrTm9kZShDYXRjaCwgRmluYWxseSk7XG4gICAgfVxuICAgIC8vIGB0aHJvd2Agc3RhdGVtZW50XG4gICAgdGhyb3coZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xlYWZOb2RlKG5ldyBUaHJvdyhlcnJvcikpO1xuICAgIH1cbiAgICAvLyBzdGFydCBzZWxmLWJhbGFuY2luZyBibG9ja1xuICAgIGJsb2NrKGJvZHksIG5vZGVDb3VudCkge1xuICAgICAgICB0aGlzLl9ibG9ja1N0YXJ0cy5wdXNoKHRoaXMuX25vZGVzLmxlbmd0aCk7XG4gICAgICAgIGlmIChib2R5KVxuICAgICAgICAgICAgdGhpcy5jb2RlKGJvZHkpLmVuZEJsb2NrKG5vZGVDb3VudCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlbmQgdGhlIGN1cnJlbnQgc2VsZi1iYWxhbmNpbmcgYmxvY2tcbiAgICBlbmRCbG9jayhub2RlQ291bnQpIHtcbiAgICAgICAgY29uc3QgbGVuID0gdGhpcy5fYmxvY2tTdGFydHMucG9wKCk7XG4gICAgICAgIGlmIChsZW4gPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNvZGVHZW46IG5vdCBpbiBzZWxmLWJhbGFuY2luZyBibG9ja1wiKTtcbiAgICAgICAgY29uc3QgdG9DbG9zZSA9IHRoaXMuX25vZGVzLmxlbmd0aCAtIGxlbjtcbiAgICAgICAgaWYgKHRvQ2xvc2UgPCAwIHx8IChub2RlQ291bnQgIT09IHVuZGVmaW5lZCAmJiB0b0Nsb3NlICE9PSBub2RlQ291bnQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvZGVHZW46IHdyb25nIG51bWJlciBvZiBub2RlczogJHt0b0Nsb3NlfSB2cyAke25vZGVDb3VudH0gZXhwZWN0ZWRgKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9ub2Rlcy5sZW5ndGggPSBsZW47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBgZnVuY3Rpb25gIGhlYWRpbmcgKG9yIGRlZmluaXRpb24gaWYgZnVuY0JvZHkgaXMgcGFzc2VkKVxuICAgIGZ1bmMobmFtZSwgYXJncyA9IGNvZGVfMS5uaWwsIGFzeW5jLCBmdW5jQm9keSkge1xuICAgICAgICB0aGlzLl9ibG9ja05vZGUobmV3IEZ1bmMobmFtZSwgYXJncywgYXN5bmMpKTtcbiAgICAgICAgaWYgKGZ1bmNCb2R5KVxuICAgICAgICAgICAgdGhpcy5jb2RlKGZ1bmNCb2R5KS5lbmRGdW5jKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvLyBlbmQgZnVuY3Rpb24gZGVmaW5pdGlvblxuICAgIGVuZEZ1bmMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lbmRCbG9ja05vZGUoRnVuYyk7XG4gICAgfVxuICAgIG9wdGltaXplKG4gPSAxKSB7XG4gICAgICAgIHdoaWxlIChuLS0gPiAwKSB7XG4gICAgICAgICAgICB0aGlzLl9yb290Lm9wdGltaXplTm9kZXMoKTtcbiAgICAgICAgICAgIHRoaXMuX3Jvb3Qub3B0aW1pemVOYW1lcyh0aGlzLl9yb290Lm5hbWVzLCB0aGlzLl9jb25zdGFudHMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIF9sZWFmTm9kZShub2RlKSB7XG4gICAgICAgIHRoaXMuX2N1cnJOb2RlLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBfYmxvY2tOb2RlKG5vZGUpIHtcbiAgICAgICAgdGhpcy5fY3Vyck5vZGUubm9kZXMucHVzaChub2RlKTtcbiAgICAgICAgdGhpcy5fbm9kZXMucHVzaChub2RlKTtcbiAgICB9XG4gICAgX2VuZEJsb2NrTm9kZShOMSwgTjIpIHtcbiAgICAgICAgY29uc3QgbiA9IHRoaXMuX2N1cnJOb2RlO1xuICAgICAgICBpZiAobiBpbnN0YW5jZW9mIE4xIHx8IChOMiAmJiBuIGluc3RhbmNlb2YgTjIpKSB7XG4gICAgICAgICAgICB0aGlzLl9ub2Rlcy5wb3AoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29kZUdlbjogbm90IGluIGJsb2NrIFwiJHtOMiA/IGAke04xLmtpbmR9LyR7TjIua2luZH1gIDogTjEua2luZH1cImApO1xuICAgIH1cbiAgICBfZWxzZU5vZGUobm9kZSkge1xuICAgICAgICBjb25zdCBuID0gdGhpcy5fY3Vyck5vZGU7XG4gICAgICAgIGlmICghKG4gaW5zdGFuY2VvZiBJZikpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29kZUdlbjogXCJlbHNlXCIgd2l0aG91dCBcImlmXCInKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jdXJyTm9kZSA9IG4uZWxzZSA9IG5vZGU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBnZXQgX3Jvb3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9ub2Rlc1swXTtcbiAgICB9XG4gICAgZ2V0IF9jdXJyTm9kZSgpIHtcbiAgICAgICAgY29uc3QgbnMgPSB0aGlzLl9ub2RlcztcbiAgICAgICAgcmV0dXJuIG5zW25zLmxlbmd0aCAtIDFdO1xuICAgIH1cbiAgICBzZXQgX2N1cnJOb2RlKG5vZGUpIHtcbiAgICAgICAgY29uc3QgbnMgPSB0aGlzLl9ub2RlcztcbiAgICAgICAgbnNbbnMubGVuZ3RoIC0gMV0gPSBub2RlO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29kZUdlbiA9IENvZGVHZW47XG5mdW5jdGlvbiBhZGROYW1lcyhuYW1lcywgZnJvbSkge1xuICAgIGZvciAoY29uc3QgbiBpbiBmcm9tKVxuICAgICAgICBuYW1lc1tuXSA9IChuYW1lc1tuXSB8fCAwKSArIChmcm9tW25dIHx8IDApO1xuICAgIHJldHVybiBuYW1lcztcbn1cbmZ1bmN0aW9uIGFkZEV4cHJOYW1lcyhuYW1lcywgZnJvbSkge1xuICAgIHJldHVybiBmcm9tIGluc3RhbmNlb2YgY29kZV8xLl9Db2RlT3JOYW1lID8gYWRkTmFtZXMobmFtZXMsIGZyb20ubmFtZXMpIDogbmFtZXM7XG59XG5mdW5jdGlvbiBvcHRpbWl6ZUV4cHIoZXhwciwgbmFtZXMsIGNvbnN0YW50cykge1xuICAgIGlmIChleHByIGluc3RhbmNlb2YgY29kZV8xLk5hbWUpXG4gICAgICAgIHJldHVybiByZXBsYWNlTmFtZShleHByKTtcbiAgICBpZiAoIWNhbk9wdGltaXplKGV4cHIpKVxuICAgICAgICByZXR1cm4gZXhwcjtcbiAgICByZXR1cm4gbmV3IGNvZGVfMS5fQ29kZShleHByLl9pdGVtcy5yZWR1Y2UoKGl0ZW1zLCBjKSA9PiB7XG4gICAgICAgIGlmIChjIGluc3RhbmNlb2YgY29kZV8xLk5hbWUpXG4gICAgICAgICAgICBjID0gcmVwbGFjZU5hbWUoYyk7XG4gICAgICAgIGlmIChjIGluc3RhbmNlb2YgY29kZV8xLl9Db2RlKVxuICAgICAgICAgICAgaXRlbXMucHVzaCguLi5jLl9pdGVtcyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGl0ZW1zLnB1c2goYyk7XG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9LCBbXSkpO1xuICAgIGZ1bmN0aW9uIHJlcGxhY2VOYW1lKG4pIHtcbiAgICAgICAgY29uc3QgYyA9IGNvbnN0YW50c1tuLnN0cl07XG4gICAgICAgIGlmIChjID09PSB1bmRlZmluZWQgfHwgbmFtZXNbbi5zdHJdICE9PSAxKVxuICAgICAgICAgICAgcmV0dXJuIG47XG4gICAgICAgIGRlbGV0ZSBuYW1lc1tuLnN0cl07XG4gICAgICAgIHJldHVybiBjO1xuICAgIH1cbiAgICBmdW5jdGlvbiBjYW5PcHRpbWl6ZShlKSB7XG4gICAgICAgIHJldHVybiAoZSBpbnN0YW5jZW9mIGNvZGVfMS5fQ29kZSAmJlxuICAgICAgICAgICAgZS5faXRlbXMuc29tZSgoYykgPT4gYyBpbnN0YW5jZW9mIGNvZGVfMS5OYW1lICYmIG5hbWVzW2Muc3RyXSA9PT0gMSAmJiBjb25zdGFudHNbYy5zdHJdICE9PSB1bmRlZmluZWQpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBzdWJ0cmFjdE5hbWVzKG5hbWVzLCBmcm9tKSB7XG4gICAgZm9yIChjb25zdCBuIGluIGZyb20pXG4gICAgICAgIG5hbWVzW25dID0gKG5hbWVzW25dIHx8IDApIC0gKGZyb21bbl0gfHwgMCk7XG59XG5mdW5jdGlvbiBub3QoeCkge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PSBcImJvb2xlYW5cIiB8fCB0eXBlb2YgeCA9PSBcIm51bWJlclwiIHx8IHggPT09IG51bGwgPyAheCA6ICgwLCBjb2RlXzEuXykgYCEke3Bhcih4KX1gO1xufVxuZXhwb3J0cy5ub3QgPSBub3Q7XG5jb25zdCBhbmRDb2RlID0gbWFwcGVuZChleHBvcnRzLm9wZXJhdG9ycy5BTkQpO1xuLy8gYm9vbGVhbiBBTkQgKCYmKSBleHByZXNzaW9uIHdpdGggdGhlIHBhc3NlZCBhcmd1bWVudHNcbmZ1bmN0aW9uIGFuZCguLi5hcmdzKSB7XG4gICAgcmV0dXJuIGFyZ3MucmVkdWNlKGFuZENvZGUpO1xufVxuZXhwb3J0cy5hbmQgPSBhbmQ7XG5jb25zdCBvckNvZGUgPSBtYXBwZW5kKGV4cG9ydHMub3BlcmF0b3JzLk9SKTtcbi8vIGJvb2xlYW4gT1IgKHx8KSBleHByZXNzaW9uIHdpdGggdGhlIHBhc3NlZCBhcmd1bWVudHNcbmZ1bmN0aW9uIG9yKC4uLmFyZ3MpIHtcbiAgICByZXR1cm4gYXJncy5yZWR1Y2Uob3JDb2RlKTtcbn1cbmV4cG9ydHMub3IgPSBvcjtcbmZ1bmN0aW9uIG1hcHBlbmQob3ApIHtcbiAgICByZXR1cm4gKHgsIHkpID0+ICh4ID09PSBjb2RlXzEubmlsID8geSA6IHkgPT09IGNvZGVfMS5uaWwgPyB4IDogKDAsIGNvZGVfMS5fKSBgJHtwYXIoeCl9ICR7b3B9ICR7cGFyKHkpfWApO1xufVxuZnVuY3Rpb24gcGFyKHgpIHtcbiAgICByZXR1cm4geCBpbnN0YW5jZW9mIGNvZGVfMS5OYW1lID8geCA6ICgwLCBjb2RlXzEuXykgYCgke3h9KWA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY2hlY2tTdHJpY3RNb2RlID0gZXhwb3J0cy5nZXRFcnJvclBhdGggPSBleHBvcnRzLlR5cGUgPSBleHBvcnRzLnVzZUZ1bmMgPSBleHBvcnRzLnNldEV2YWx1YXRlZCA9IGV4cG9ydHMuZXZhbHVhdGVkUHJvcHNUb05hbWUgPSBleHBvcnRzLm1lcmdlRXZhbHVhdGVkID0gZXhwb3J0cy5lYWNoSXRlbSA9IGV4cG9ydHMudW5lc2NhcGVKc29uUG9pbnRlciA9IGV4cG9ydHMuZXNjYXBlSnNvblBvaW50ZXIgPSBleHBvcnRzLmVzY2FwZUZyYWdtZW50ID0gZXhwb3J0cy51bmVzY2FwZUZyYWdtZW50ID0gZXhwb3J0cy5zY2hlbWFSZWZPclZhbCA9IGV4cG9ydHMuc2NoZW1hSGFzUnVsZXNCdXRSZWYgPSBleHBvcnRzLnNjaGVtYUhhc1J1bGVzID0gZXhwb3J0cy5jaGVja1Vua25vd25SdWxlcyA9IGV4cG9ydHMuYWx3YXlzVmFsaWRTY2hlbWEgPSBleHBvcnRzLnRvSGFzaCA9IHZvaWQgMDtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuL2NvZGVnZW5cIik7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi9jb2RlZ2VuL2NvZGVcIik7XG4vLyBUT0RPIHJlZmFjdG9yIHRvIHVzZSBTZXRcbmZ1bmN0aW9uIHRvSGFzaChhcnIpIHtcbiAgICBjb25zdCBoYXNoID0ge307XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIGFycilcbiAgICAgICAgaGFzaFtpdGVtXSA9IHRydWU7XG4gICAgcmV0dXJuIGhhc2g7XG59XG5leHBvcnRzLnRvSGFzaCA9IHRvSGFzaDtcbmZ1bmN0aW9uIGFsd2F5c1ZhbGlkU2NoZW1hKGl0LCBzY2hlbWEpIHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSBcImJvb2xlYW5cIilcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICBpZiAoT2JqZWN0LmtleXMoc2NoZW1hKS5sZW5ndGggPT09IDApXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIGNoZWNrVW5rbm93blJ1bGVzKGl0LCBzY2hlbWEpO1xuICAgIHJldHVybiAhc2NoZW1hSGFzUnVsZXMoc2NoZW1hLCBpdC5zZWxmLlJVTEVTLmFsbCk7XG59XG5leHBvcnRzLmFsd2F5c1ZhbGlkU2NoZW1hID0gYWx3YXlzVmFsaWRTY2hlbWE7XG5mdW5jdGlvbiBjaGVja1Vua25vd25SdWxlcyhpdCwgc2NoZW1hID0gaXQuc2NoZW1hKSB7XG4gICAgY29uc3QgeyBvcHRzLCBzZWxmIH0gPSBpdDtcbiAgICBpZiAoIW9wdHMuc3RyaWN0U2NoZW1hKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKHR5cGVvZiBzY2hlbWEgPT09IFwiYm9vbGVhblwiKVxuICAgICAgICByZXR1cm47XG4gICAgY29uc3QgcnVsZXMgPSBzZWxmLlJVTEVTLmtleXdvcmRzO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNjaGVtYSkge1xuICAgICAgICBpZiAoIXJ1bGVzW2tleV0pXG4gICAgICAgICAgICBjaGVja1N0cmljdE1vZGUoaXQsIGB1bmtub3duIGtleXdvcmQ6IFwiJHtrZXl9XCJgKTtcbiAgICB9XG59XG5leHBvcnRzLmNoZWNrVW5rbm93blJ1bGVzID0gY2hlY2tVbmtub3duUnVsZXM7XG5mdW5jdGlvbiBzY2hlbWFIYXNSdWxlcyhzY2hlbWEsIHJ1bGVzKSB7XG4gICAgaWYgKHR5cGVvZiBzY2hlbWEgPT0gXCJib29sZWFuXCIpXG4gICAgICAgIHJldHVybiAhc2NoZW1hO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNjaGVtYSlcbiAgICAgICAgaWYgKHJ1bGVzW2tleV0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLnNjaGVtYUhhc1J1bGVzID0gc2NoZW1hSGFzUnVsZXM7XG5mdW5jdGlvbiBzY2hlbWFIYXNSdWxlc0J1dFJlZihzY2hlbWEsIFJVTEVTKSB7XG4gICAgaWYgKHR5cGVvZiBzY2hlbWEgPT0gXCJib29sZWFuXCIpXG4gICAgICAgIHJldHVybiAhc2NoZW1hO1xuICAgIGZvciAoY29uc3Qga2V5IGluIHNjaGVtYSlcbiAgICAgICAgaWYgKGtleSAhPT0gXCIkcmVmXCIgJiYgUlVMRVMuYWxsW2tleV0pXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG5leHBvcnRzLnNjaGVtYUhhc1J1bGVzQnV0UmVmID0gc2NoZW1hSGFzUnVsZXNCdXRSZWY7XG5mdW5jdGlvbiBzY2hlbWFSZWZPclZhbCh7IHRvcFNjaGVtYVJlZiwgc2NoZW1hUGF0aCB9LCBzY2hlbWEsIGtleXdvcmQsICRkYXRhKSB7XG4gICAgaWYgKCEkZGF0YSkge1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSBcIm51bWJlclwiIHx8IHR5cGVvZiBzY2hlbWEgPT0gXCJib29sZWFuXCIpXG4gICAgICAgICAgICByZXR1cm4gc2NoZW1hO1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSBcInN0cmluZ1wiKVxuICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCR7c2NoZW1hfWA7XG4gICAgfVxuICAgIHJldHVybiAoMCwgY29kZWdlbl8xLl8pIGAke3RvcFNjaGVtYVJlZn0ke3NjaGVtYVBhdGh9JHsoMCwgY29kZWdlbl8xLmdldFByb3BlcnR5KShrZXl3b3JkKX1gO1xufVxuZXhwb3J0cy5zY2hlbWFSZWZPclZhbCA9IHNjaGVtYVJlZk9yVmFsO1xuZnVuY3Rpb24gdW5lc2NhcGVGcmFnbWVudChzdHIpIHtcbiAgICByZXR1cm4gdW5lc2NhcGVKc29uUG9pbnRlcihkZWNvZGVVUklDb21wb25lbnQoc3RyKSk7XG59XG5leHBvcnRzLnVuZXNjYXBlRnJhZ21lbnQgPSB1bmVzY2FwZUZyYWdtZW50O1xuZnVuY3Rpb24gZXNjYXBlRnJhZ21lbnQoc3RyKSB7XG4gICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChlc2NhcGVKc29uUG9pbnRlcihzdHIpKTtcbn1cbmV4cG9ydHMuZXNjYXBlRnJhZ21lbnQgPSBlc2NhcGVGcmFnbWVudDtcbmZ1bmN0aW9uIGVzY2FwZUpzb25Qb2ludGVyKHN0cikge1xuICAgIGlmICh0eXBlb2Ygc3RyID09IFwibnVtYmVyXCIpXG4gICAgICAgIHJldHVybiBgJHtzdHJ9YDtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL34vZywgXCJ+MFwiKS5yZXBsYWNlKC9cXC8vZywgXCJ+MVwiKTtcbn1cbmV4cG9ydHMuZXNjYXBlSnNvblBvaW50ZXIgPSBlc2NhcGVKc29uUG9pbnRlcjtcbmZ1bmN0aW9uIHVuZXNjYXBlSnNvblBvaW50ZXIoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC9+MS9nLCBcIi9cIikucmVwbGFjZSgvfjAvZywgXCJ+XCIpO1xufVxuZXhwb3J0cy51bmVzY2FwZUpzb25Qb2ludGVyID0gdW5lc2NhcGVKc29uUG9pbnRlcjtcbmZ1bmN0aW9uIGVhY2hJdGVtKHhzLCBmKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoeHMpKSB7XG4gICAgICAgIGZvciAoY29uc3QgeCBvZiB4cylcbiAgICAgICAgICAgIGYoeCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmKHhzKTtcbiAgICB9XG59XG5leHBvcnRzLmVhY2hJdGVtID0gZWFjaEl0ZW07XG5mdW5jdGlvbiBtYWtlTWVyZ2VFdmFsdWF0ZWQoeyBtZXJnZU5hbWVzLCBtZXJnZVRvTmFtZSwgbWVyZ2VWYWx1ZXMsIHJlc3VsdFRvTmFtZSwgfSkge1xuICAgIHJldHVybiAoZ2VuLCBmcm9tLCB0bywgdG9OYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcyA9IHRvID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gZnJvbVxuICAgICAgICAgICAgOiB0byBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lXG4gICAgICAgICAgICAgICAgPyAoZnJvbSBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lID8gbWVyZ2VOYW1lcyhnZW4sIGZyb20sIHRvKSA6IG1lcmdlVG9OYW1lKGdlbiwgZnJvbSwgdG8pLCB0bylcbiAgICAgICAgICAgICAgICA6IGZyb20gaW5zdGFuY2VvZiBjb2RlZ2VuXzEuTmFtZVxuICAgICAgICAgICAgICAgICAgICA/IChtZXJnZVRvTmFtZShnZW4sIHRvLCBmcm9tKSwgZnJvbSlcbiAgICAgICAgICAgICAgICAgICAgOiBtZXJnZVZhbHVlcyhmcm9tLCB0byk7XG4gICAgICAgIHJldHVybiB0b05hbWUgPT09IGNvZGVnZW5fMS5OYW1lICYmICEocmVzIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUpID8gcmVzdWx0VG9OYW1lKGdlbiwgcmVzKSA6IHJlcztcbiAgICB9O1xufVxuZXhwb3J0cy5tZXJnZUV2YWx1YXRlZCA9IHtcbiAgICBwcm9wczogbWFrZU1lcmdlRXZhbHVhdGVkKHtcbiAgICAgICAgbWVyZ2VOYW1lczogKGdlbiwgZnJvbSwgdG8pID0+IGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke3RvfSAhPT0gdHJ1ZSAmJiAke2Zyb219ICE9PSB1bmRlZmluZWRgLCAoKSA9PiB7XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtmcm9tfSA9PT0gdHJ1ZWAsICgpID0+IGdlbi5hc3NpZ24odG8sIHRydWUpLCAoKSA9PiBnZW4uYXNzaWduKHRvLCAoMCwgY29kZWdlbl8xLl8pIGAke3RvfSB8fCB7fWApLmNvZGUoKDAsIGNvZGVnZW5fMS5fKSBgT2JqZWN0LmFzc2lnbigke3RvfSwgJHtmcm9tfSlgKSk7XG4gICAgICAgIH0pLFxuICAgICAgICBtZXJnZVRvTmFtZTogKGdlbiwgZnJvbSwgdG8pID0+IGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke3RvfSAhPT0gdHJ1ZWAsICgpID0+IHtcbiAgICAgICAgICAgIGlmIChmcm9tID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih0bywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHRvLCAoMCwgY29kZWdlbl8xLl8pIGAke3RvfSB8fCB7fWApO1xuICAgICAgICAgICAgICAgIHNldEV2YWx1YXRlZChnZW4sIHRvLCBmcm9tKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgICAgIG1lcmdlVmFsdWVzOiAoZnJvbSwgdG8pID0+IChmcm9tID09PSB0cnVlID8gdHJ1ZSA6IHsgLi4uZnJvbSwgLi4udG8gfSksXG4gICAgICAgIHJlc3VsdFRvTmFtZTogZXZhbHVhdGVkUHJvcHNUb05hbWUsXG4gICAgfSksXG4gICAgaXRlbXM6IG1ha2VNZXJnZUV2YWx1YXRlZCh7XG4gICAgICAgIG1lcmdlTmFtZXM6IChnZW4sIGZyb20sIHRvKSA9PiBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHt0b30gIT09IHRydWUgJiYgJHtmcm9tfSAhPT0gdW5kZWZpbmVkYCwgKCkgPT4gZ2VuLmFzc2lnbih0bywgKDAsIGNvZGVnZW5fMS5fKSBgJHtmcm9tfSA9PT0gdHJ1ZSA/IHRydWUgOiAke3RvfSA+ICR7ZnJvbX0gPyAke3RvfSA6ICR7ZnJvbX1gKSksXG4gICAgICAgIG1lcmdlVG9OYW1lOiAoZ2VuLCBmcm9tLCB0bykgPT4gZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7dG99ICE9PSB0cnVlYCwgKCkgPT4gZ2VuLmFzc2lnbih0bywgZnJvbSA9PT0gdHJ1ZSA/IHRydWUgOiAoMCwgY29kZWdlbl8xLl8pIGAke3RvfSA+ICR7ZnJvbX0gPyAke3RvfSA6ICR7ZnJvbX1gKSksXG4gICAgICAgIG1lcmdlVmFsdWVzOiAoZnJvbSwgdG8pID0+IChmcm9tID09PSB0cnVlID8gdHJ1ZSA6IE1hdGgubWF4KGZyb20sIHRvKSksXG4gICAgICAgIHJlc3VsdFRvTmFtZTogKGdlbiwgaXRlbXMpID0+IGdlbi52YXIoXCJpdGVtc1wiLCBpdGVtcyksXG4gICAgfSksXG59O1xuZnVuY3Rpb24gZXZhbHVhdGVkUHJvcHNUb05hbWUoZ2VuLCBwcykge1xuICAgIGlmIChwcyA9PT0gdHJ1ZSlcbiAgICAgICAgcmV0dXJuIGdlbi52YXIoXCJwcm9wc1wiLCB0cnVlKTtcbiAgICBjb25zdCBwcm9wcyA9IGdlbi52YXIoXCJwcm9wc1wiLCAoMCwgY29kZWdlbl8xLl8pIGB7fWApO1xuICAgIGlmIChwcyAhPT0gdW5kZWZpbmVkKVxuICAgICAgICBzZXRFdmFsdWF0ZWQoZ2VuLCBwcm9wcywgcHMpO1xuICAgIHJldHVybiBwcm9wcztcbn1cbmV4cG9ydHMuZXZhbHVhdGVkUHJvcHNUb05hbWUgPSBldmFsdWF0ZWRQcm9wc1RvTmFtZTtcbmZ1bmN0aW9uIHNldEV2YWx1YXRlZChnZW4sIHByb3BzLCBwcykge1xuICAgIE9iamVjdC5rZXlzKHBzKS5mb3JFYWNoKChwKSA9PiBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7cHJvcHN9JHsoMCwgY29kZWdlbl8xLmdldFByb3BlcnR5KShwKX1gLCB0cnVlKSk7XG59XG5leHBvcnRzLnNldEV2YWx1YXRlZCA9IHNldEV2YWx1YXRlZDtcbmNvbnN0IHNuaXBwZXRzID0ge307XG5mdW5jdGlvbiB1c2VGdW5jKGdlbiwgZikge1xuICAgIHJldHVybiBnZW4uc2NvcGVWYWx1ZShcImZ1bmNcIiwge1xuICAgICAgICByZWY6IGYsXG4gICAgICAgIGNvZGU6IHNuaXBwZXRzW2YuY29kZV0gfHwgKHNuaXBwZXRzW2YuY29kZV0gPSBuZXcgY29kZV8xLl9Db2RlKGYuY29kZSkpLFxuICAgIH0pO1xufVxuZXhwb3J0cy51c2VGdW5jID0gdXNlRnVuYztcbnZhciBUeXBlO1xuKGZ1bmN0aW9uIChUeXBlKSB7XG4gICAgVHlwZVtUeXBlW1wiTnVtXCJdID0gMF0gPSBcIk51bVwiO1xuICAgIFR5cGVbVHlwZVtcIlN0clwiXSA9IDFdID0gXCJTdHJcIjtcbn0pKFR5cGUgfHwgKGV4cG9ydHMuVHlwZSA9IFR5cGUgPSB7fSkpO1xuZnVuY3Rpb24gZ2V0RXJyb3JQYXRoKGRhdGFQcm9wLCBkYXRhUHJvcFR5cGUsIGpzUHJvcGVydHlTeW50YXgpIHtcbiAgICAvLyBsZXQgcGF0aFxuICAgIGlmIChkYXRhUHJvcCBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lKSB7XG4gICAgICAgIGNvbnN0IGlzTnVtYmVyID0gZGF0YVByb3BUeXBlID09PSBUeXBlLk51bTtcbiAgICAgICAgcmV0dXJuIGpzUHJvcGVydHlTeW50YXhcbiAgICAgICAgICAgID8gaXNOdW1iZXJcbiAgICAgICAgICAgICAgICA/ICgwLCBjb2RlZ2VuXzEuXykgYFwiW1wiICsgJHtkYXRhUHJvcH0gKyBcIl1cImBcbiAgICAgICAgICAgICAgICA6ICgwLCBjb2RlZ2VuXzEuXykgYFwiWydcIiArICR7ZGF0YVByb3B9ICsgXCInXVwiYFxuICAgICAgICAgICAgOiBpc051bWJlclxuICAgICAgICAgICAgICAgID8gKDAsIGNvZGVnZW5fMS5fKSBgXCIvXCIgKyAke2RhdGFQcm9wfWBcbiAgICAgICAgICAgICAgICA6ICgwLCBjb2RlZ2VuXzEuXykgYFwiL1wiICsgJHtkYXRhUHJvcH0ucmVwbGFjZSgvfi9nLCBcIn4wXCIpLnJlcGxhY2UoL1xcXFwvL2csIFwifjFcIilgOyAvLyBUT0RPIG1heWJlIHVzZSBnbG9iYWwgZXNjYXBlUG9pbnRlclxuICAgIH1cbiAgICByZXR1cm4ganNQcm9wZXJ0eVN5bnRheCA/ICgwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKGRhdGFQcm9wKS50b1N0cmluZygpIDogXCIvXCIgKyBlc2NhcGVKc29uUG9pbnRlcihkYXRhUHJvcCk7XG59XG5leHBvcnRzLmdldEVycm9yUGF0aCA9IGdldEVycm9yUGF0aDtcbmZ1bmN0aW9uIGNoZWNrU3RyaWN0TW9kZShpdCwgbXNnLCBtb2RlID0gaXQub3B0cy5zdHJpY3RTY2hlbWEpIHtcbiAgICBpZiAoIW1vZGUpXG4gICAgICAgIHJldHVybjtcbiAgICBtc2cgPSBgc3RyaWN0IG1vZGU6ICR7bXNnfWA7XG4gICAgaWYgKG1vZGUgPT09IHRydWUpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIGl0LnNlbGYubG9nZ2VyLndhcm4obXNnKTtcbn1cbmV4cG9ydHMuY2hlY2tTdHJpY3RNb2RlID0gY2hlY2tTdHJpY3RNb2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuL2NvZGVnZW5cIik7XG5jb25zdCBuYW1lcyA9IHtcbiAgICAvLyB2YWxpZGF0aW9uIGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgIGRhdGE6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImRhdGFcIiksIC8vIGRhdGEgcGFzc2VkIHRvIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAgICAvLyBhcmdzIHBhc3NlZCBmcm9tIHJlZmVyZW5jaW5nIHNjaGVtYVxuICAgIHZhbEN4dDogbmV3IGNvZGVnZW5fMS5OYW1lKFwidmFsQ3h0XCIpLCAvLyB2YWxpZGF0aW9uL2RhdGEgY29udGV4dCAtIHNob3VsZCBub3QgYmUgdXNlZCBkaXJlY3RseSwgaXQgaXMgZGVzdHJ1Y3R1cmVkIHRvIHRoZSBuYW1lcyBiZWxvd1xuICAgIGluc3RhbmNlUGF0aDogbmV3IGNvZGVnZW5fMS5OYW1lKFwiaW5zdGFuY2VQYXRoXCIpLFxuICAgIHBhcmVudERhdGE6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInBhcmVudERhdGFcIiksXG4gICAgcGFyZW50RGF0YVByb3BlcnR5OiBuZXcgY29kZWdlbl8xLk5hbWUoXCJwYXJlbnREYXRhUHJvcGVydHlcIiksXG4gICAgcm9vdERhdGE6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInJvb3REYXRhXCIpLCAvLyByb290IGRhdGEgLSBzYW1lIGFzIHRoZSBkYXRhIHBhc3NlZCB0byB0aGUgZmlyc3QvdG9wIHZhbGlkYXRpb24gZnVuY3Rpb25cbiAgICBkeW5hbWljQW5jaG9yczogbmV3IGNvZGVnZW5fMS5OYW1lKFwiZHluYW1pY0FuY2hvcnNcIiksIC8vIHVzZWQgdG8gc3VwcG9ydCByZWN1cnNpdmVSZWYgYW5kIGR5bmFtaWNSZWZcbiAgICAvLyBmdW5jdGlvbiBzY29wZWQgdmFyaWFibGVzXG4gICAgdkVycm9yczogbmV3IGNvZGVnZW5fMS5OYW1lKFwidkVycm9yc1wiKSwgLy8gbnVsbCBvciBhcnJheSBvZiB2YWxpZGF0aW9uIGVycm9yc1xuICAgIGVycm9yczogbmV3IGNvZGVnZW5fMS5OYW1lKFwiZXJyb3JzXCIpLCAvLyBjb3VudGVyIG9mIHZhbGlkYXRpb24gZXJyb3JzXG4gICAgdGhpczogbmV3IGNvZGVnZW5fMS5OYW1lKFwidGhpc1wiKSxcbiAgICAvLyBcImdsb2JhbHNcIlxuICAgIHNlbGY6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInNlbGZcIiksXG4gICAgc2NvcGU6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInNjb3BlXCIpLFxuICAgIC8vIEpURCBzZXJpYWxpemUvcGFyc2UgbmFtZSBmb3IgSlNPTiBzdHJpbmcgYW5kIHBvc2l0aW9uXG4gICAganNvbjogbmV3IGNvZGVnZW5fMS5OYW1lKFwianNvblwiKSxcbiAgICBqc29uUG9zOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJqc29uUG9zXCIpLFxuICAgIGpzb25MZW46IG5ldyBjb2RlZ2VuXzEuTmFtZShcImpzb25MZW5cIiksXG4gICAganNvblBhcnQ6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImpzb25QYXJ0XCIpLFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IG5hbWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmFtZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4dGVuZEVycm9ycyA9IGV4cG9ydHMucmVzZXRFcnJvcnNDb3VudCA9IGV4cG9ydHMucmVwb3J0RXh0cmFFcnJvciA9IGV4cG9ydHMucmVwb3J0RXJyb3IgPSBleHBvcnRzLmtleXdvcmQkRGF0YUVycm9yID0gZXhwb3J0cy5rZXl3b3JkRXJyb3IgPSB2b2lkIDA7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi9uYW1lc1wiKTtcbmV4cG9ydHMua2V5d29yZEVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IGtleXdvcmQgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IHBhc3MgXCIke2tleXdvcmR9XCIga2V5d29yZCB2YWxpZGF0aW9uYCxcbn07XG5leHBvcnRzLmtleXdvcmQkRGF0YUVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IGtleXdvcmQsIHNjaGVtYVR5cGUgfSkgPT4gc2NoZW1hVHlwZVxuICAgICAgICA/ICgwLCBjb2RlZ2VuXzEuc3RyKSBgXCIke2tleXdvcmR9XCIga2V5d29yZCBtdXN0IGJlICR7c2NoZW1hVHlwZX0gKCRkYXRhKWBcbiAgICAgICAgOiAoMCwgY29kZWdlbl8xLnN0cikgYFwiJHtrZXl3b3JkfVwiIGtleXdvcmQgaXMgaW52YWxpZCAoJGRhdGEpYCxcbn07XG5mdW5jdGlvbiByZXBvcnRFcnJvcihjeHQsIGVycm9yID0gZXhwb3J0cy5rZXl3b3JkRXJyb3IsIGVycm9yUGF0aHMsIG92ZXJyaWRlQWxsRXJyb3JzKSB7XG4gICAgY29uc3QgeyBpdCB9ID0gY3h0O1xuICAgIGNvbnN0IHsgZ2VuLCBjb21wb3NpdGVSdWxlLCBhbGxFcnJvcnMgfSA9IGl0O1xuICAgIGNvbnN0IGVyck9iaiA9IGVycm9yT2JqZWN0Q29kZShjeHQsIGVycm9yLCBlcnJvclBhdGhzKTtcbiAgICBpZiAob3ZlcnJpZGVBbGxFcnJvcnMgIT09IG51bGwgJiYgb3ZlcnJpZGVBbGxFcnJvcnMgIT09IHZvaWQgMCA/IG92ZXJyaWRlQWxsRXJyb3JzIDogKGNvbXBvc2l0ZVJ1bGUgfHwgYWxsRXJyb3JzKSkge1xuICAgICAgICBhZGRFcnJvcihnZW4sIGVyck9iaik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm5FcnJvcnMoaXQsICgwLCBjb2RlZ2VuXzEuXykgYFske2Vyck9ian1dYCk7XG4gICAgfVxufVxuZXhwb3J0cy5yZXBvcnRFcnJvciA9IHJlcG9ydEVycm9yO1xuZnVuY3Rpb24gcmVwb3J0RXh0cmFFcnJvcihjeHQsIGVycm9yID0gZXhwb3J0cy5rZXl3b3JkRXJyb3IsIGVycm9yUGF0aHMpIHtcbiAgICBjb25zdCB7IGl0IH0gPSBjeHQ7XG4gICAgY29uc3QgeyBnZW4sIGNvbXBvc2l0ZVJ1bGUsIGFsbEVycm9ycyB9ID0gaXQ7XG4gICAgY29uc3QgZXJyT2JqID0gZXJyb3JPYmplY3RDb2RlKGN4dCwgZXJyb3IsIGVycm9yUGF0aHMpO1xuICAgIGFkZEVycm9yKGdlbiwgZXJyT2JqKTtcbiAgICBpZiAoIShjb21wb3NpdGVSdWxlIHx8IGFsbEVycm9ycykpIHtcbiAgICAgICAgcmV0dXJuRXJyb3JzKGl0LCBuYW1lc18xLmRlZmF1bHQudkVycm9ycyk7XG4gICAgfVxufVxuZXhwb3J0cy5yZXBvcnRFeHRyYUVycm9yID0gcmVwb3J0RXh0cmFFcnJvcjtcbmZ1bmN0aW9uIHJlc2V0RXJyb3JzQ291bnQoZ2VuLCBlcnJzQ291bnQpIHtcbiAgICBnZW4uYXNzaWduKG5hbWVzXzEuZGVmYXVsdC5lcnJvcnMsIGVycnNDb3VudCk7XG4gICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9ICE9PSBudWxsYCwgKCkgPT4gZ2VuLmlmKGVycnNDb3VudCwgKCkgPT4gZ2VuLmFzc2lnbigoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52RXJyb3JzfS5sZW5ndGhgLCBlcnJzQ291bnQpLCAoKSA9PiBnZW4uYXNzaWduKG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCBudWxsKSkpO1xufVxuZXhwb3J0cy5yZXNldEVycm9yc0NvdW50ID0gcmVzZXRFcnJvcnNDb3VudDtcbmZ1bmN0aW9uIGV4dGVuZEVycm9ycyh7IGdlbiwga2V5d29yZCwgc2NoZW1hVmFsdWUsIGRhdGEsIGVycnNDb3VudCwgaXQsIH0pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoZXJyc0NvdW50ID09PSB1bmRlZmluZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFqdiBpbXBsZW1lbnRhdGlvbiBlcnJvclwiKTtcbiAgICBjb25zdCBlcnIgPSBnZW4ubmFtZShcImVyclwiKTtcbiAgICBnZW4uZm9yUmFuZ2UoXCJpXCIsIGVycnNDb3VudCwgbmFtZXNfMS5kZWZhdWx0LmVycm9ycywgKGkpID0+IHtcbiAgICAgICAgZ2VuLmNvbnN0KGVyciwgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQudkVycm9yc31bJHtpfV1gKTtcbiAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZXJyfS5pbnN0YW5jZVBhdGggPT09IHVuZGVmaW5lZGAsICgpID0+IGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtlcnJ9Lmluc3RhbmNlUGF0aGAsICgwLCBjb2RlZ2VuXzEuc3RyQ29uY2F0KShuYW1lc18xLmRlZmF1bHQuaW5zdGFuY2VQYXRoLCBpdC5lcnJvclBhdGgpKSk7XG4gICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtlcnJ9LnNjaGVtYVBhdGhgLCAoMCwgY29kZWdlbl8xLnN0cikgYCR7aXQuZXJyU2NoZW1hUGF0aH0vJHtrZXl3b3JkfWApO1xuICAgICAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICAgICAgICBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZXJyfS5zY2hlbWFgLCBzY2hlbWFWYWx1ZSk7XG4gICAgICAgICAgICBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZXJyfS5kYXRhYCwgZGF0YSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbmV4cG9ydHMuZXh0ZW5kRXJyb3JzID0gZXh0ZW5kRXJyb3JzO1xuZnVuY3Rpb24gYWRkRXJyb3IoZ2VuLCBlcnJPYmopIHtcbiAgICBjb25zdCBlcnIgPSBnZW4uY29uc3QoXCJlcnJcIiwgZXJyT2JqKTtcbiAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQudkVycm9yc30gPT09IG51bGxgLCAoKSA9PiBnZW4uYXNzaWduKG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCAoMCwgY29kZWdlbl8xLl8pIGBbJHtlcnJ9XWApLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52RXJyb3JzfS5wdXNoKCR7ZXJyfSlgKTtcbiAgICBnZW4uY29kZSgoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC5lcnJvcnN9KytgKTtcbn1cbmZ1bmN0aW9uIHJldHVybkVycm9ycyhpdCwgZXJycykge1xuICAgIGNvbnN0IHsgZ2VuLCB2YWxpZGF0ZU5hbWUsIHNjaGVtYUVudiB9ID0gaXQ7XG4gICAgaWYgKHNjaGVtYUVudi4kYXN5bmMpIHtcbiAgICAgICAgZ2VuLnRocm93KCgwLCBjb2RlZ2VuXzEuXykgYG5ldyAke2l0LlZhbGlkYXRpb25FcnJvcn0oJHtlcnJzfSlgKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHt2YWxpZGF0ZU5hbWV9LmVycm9yc2AsIGVycnMpO1xuICAgICAgICBnZW4ucmV0dXJuKGZhbHNlKTtcbiAgICB9XG59XG5jb25zdCBFID0ge1xuICAgIGtleXdvcmQ6IG5ldyBjb2RlZ2VuXzEuTmFtZShcImtleXdvcmRcIiksXG4gICAgc2NoZW1hUGF0aDogbmV3IGNvZGVnZW5fMS5OYW1lKFwic2NoZW1hUGF0aFwiKSwgLy8gYWxzbyB1c2VkIGluIEpURCBlcnJvcnNcbiAgICBwYXJhbXM6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInBhcmFtc1wiKSxcbiAgICBwcm9wZXJ0eU5hbWU6IG5ldyBjb2RlZ2VuXzEuTmFtZShcInByb3BlcnR5TmFtZVwiKSxcbiAgICBtZXNzYWdlOiBuZXcgY29kZWdlbl8xLk5hbWUoXCJtZXNzYWdlXCIpLFxuICAgIHNjaGVtYTogbmV3IGNvZGVnZW5fMS5OYW1lKFwic2NoZW1hXCIpLFxuICAgIHBhcmVudFNjaGVtYTogbmV3IGNvZGVnZW5fMS5OYW1lKFwicGFyZW50U2NoZW1hXCIpLFxufTtcbmZ1bmN0aW9uIGVycm9yT2JqZWN0Q29kZShjeHQsIGVycm9yLCBlcnJvclBhdGhzKSB7XG4gICAgY29uc3QgeyBjcmVhdGVFcnJvcnMgfSA9IGN4dC5pdDtcbiAgICBpZiAoY3JlYXRlRXJyb3JzID09PSBmYWxzZSlcbiAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYHt9YDtcbiAgICByZXR1cm4gZXJyb3JPYmplY3QoY3h0LCBlcnJvciwgZXJyb3JQYXRocyk7XG59XG5mdW5jdGlvbiBlcnJvck9iamVjdChjeHQsIGVycm9yLCBlcnJvclBhdGhzID0ge30pIHtcbiAgICBjb25zdCB7IGdlbiwgaXQgfSA9IGN4dDtcbiAgICBjb25zdCBrZXlWYWx1ZXMgPSBbXG4gICAgICAgIGVycm9ySW5zdGFuY2VQYXRoKGl0LCBlcnJvclBhdGhzKSxcbiAgICAgICAgZXJyb3JTY2hlbWFQYXRoKGN4dCwgZXJyb3JQYXRocyksXG4gICAgXTtcbiAgICBleHRyYUVycm9yUHJvcHMoY3h0LCBlcnJvciwga2V5VmFsdWVzKTtcbiAgICByZXR1cm4gZ2VuLm9iamVjdCguLi5rZXlWYWx1ZXMpO1xufVxuZnVuY3Rpb24gZXJyb3JJbnN0YW5jZVBhdGgoeyBlcnJvclBhdGggfSwgeyBpbnN0YW5jZVBhdGggfSkge1xuICAgIGNvbnN0IGluc3RQYXRoID0gaW5zdGFuY2VQYXRoXG4gICAgICAgID8gKDAsIGNvZGVnZW5fMS5zdHIpIGAke2Vycm9yUGF0aH0keygwLCB1dGlsXzEuZ2V0RXJyb3JQYXRoKShpbnN0YW5jZVBhdGgsIHV0aWxfMS5UeXBlLlN0cil9YFxuICAgICAgICA6IGVycm9yUGF0aDtcbiAgICByZXR1cm4gW25hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGgsICgwLCBjb2RlZ2VuXzEuc3RyQ29uY2F0KShuYW1lc18xLmRlZmF1bHQuaW5zdGFuY2VQYXRoLCBpbnN0UGF0aCldO1xufVxuZnVuY3Rpb24gZXJyb3JTY2hlbWFQYXRoKHsga2V5d29yZCwgaXQ6IHsgZXJyU2NoZW1hUGF0aCB9IH0sIHsgc2NoZW1hUGF0aCwgcGFyZW50U2NoZW1hIH0pIHtcbiAgICBsZXQgc2NoUGF0aCA9IHBhcmVudFNjaGVtYSA/IGVyclNjaGVtYVBhdGggOiAoMCwgY29kZWdlbl8xLnN0cikgYCR7ZXJyU2NoZW1hUGF0aH0vJHtrZXl3b3JkfWA7XG4gICAgaWYgKHNjaGVtYVBhdGgpIHtcbiAgICAgICAgc2NoUGF0aCA9ICgwLCBjb2RlZ2VuXzEuc3RyKSBgJHtzY2hQYXRofSR7KDAsIHV0aWxfMS5nZXRFcnJvclBhdGgpKHNjaGVtYVBhdGgsIHV0aWxfMS5UeXBlLlN0cil9YDtcbiAgICB9XG4gICAgcmV0dXJuIFtFLnNjaGVtYVBhdGgsIHNjaFBhdGhdO1xufVxuZnVuY3Rpb24gZXh0cmFFcnJvclByb3BzKGN4dCwgeyBwYXJhbXMsIG1lc3NhZ2UgfSwga2V5VmFsdWVzKSB7XG4gICAgY29uc3QgeyBrZXl3b3JkLCBkYXRhLCBzY2hlbWFWYWx1ZSwgaXQgfSA9IGN4dDtcbiAgICBjb25zdCB7IG9wdHMsIHByb3BlcnR5TmFtZSwgdG9wU2NoZW1hUmVmLCBzY2hlbWFQYXRoIH0gPSBpdDtcbiAgICBrZXlWYWx1ZXMucHVzaChbRS5rZXl3b3JkLCBrZXl3b3JkXSwgW0UucGFyYW1zLCB0eXBlb2YgcGFyYW1zID09IFwiZnVuY3Rpb25cIiA/IHBhcmFtcyhjeHQpIDogcGFyYW1zIHx8ICgwLCBjb2RlZ2VuXzEuXykgYHt9YF0pO1xuICAgIGlmIChvcHRzLm1lc3NhZ2VzKSB7XG4gICAgICAgIGtleVZhbHVlcy5wdXNoKFtFLm1lc3NhZ2UsIHR5cGVvZiBtZXNzYWdlID09IFwiZnVuY3Rpb25cIiA/IG1lc3NhZ2UoY3h0KSA6IG1lc3NhZ2VdKTtcbiAgICB9XG4gICAgaWYgKG9wdHMudmVyYm9zZSkge1xuICAgICAgICBrZXlWYWx1ZXMucHVzaChbRS5zY2hlbWEsIHNjaGVtYVZhbHVlXSwgW0UucGFyZW50U2NoZW1hLCAoMCwgY29kZWdlbl8xLl8pIGAke3RvcFNjaGVtYVJlZn0ke3NjaGVtYVBhdGh9YF0sIFtuYW1lc18xLmRlZmF1bHQuZGF0YSwgZGF0YV0pO1xuICAgIH1cbiAgICBpZiAocHJvcGVydHlOYW1lKVxuICAgICAgICBrZXlWYWx1ZXMucHVzaChbRS5wcm9wZXJ0eU5hbWUsIHByb3BlcnR5TmFtZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5ib29sT3JFbXB0eVNjaGVtYSA9IGV4cG9ydHMudG9wQm9vbE9yRW1wdHlTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCBlcnJvcnNfMSA9IHJlcXVpcmUoXCIuLi9lcnJvcnNcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vY29kZWdlblwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi4vbmFtZXNcIik7XG5jb25zdCBib29sRXJyb3IgPSB7XG4gICAgbWVzc2FnZTogXCJib29sZWFuIHNjaGVtYSBpcyBmYWxzZVwiLFxufTtcbmZ1bmN0aW9uIHRvcEJvb2xPckVtcHR5U2NoZW1hKGl0KSB7XG4gICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgdmFsaWRhdGVOYW1lIH0gPSBpdDtcbiAgICBpZiAoc2NoZW1hID09PSBmYWxzZSkge1xuICAgICAgICBmYWxzZVNjaGVtYUVycm9yKGl0LCBmYWxzZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIiAmJiBzY2hlbWEuJGFzeW5jID09PSB0cnVlKSB7XG4gICAgICAgIGdlbi5yZXR1cm4obmFtZXNfMS5kZWZhdWx0LmRhdGEpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZ2VuLmFzc2lnbigoMCwgY29kZWdlbl8xLl8pIGAke3ZhbGlkYXRlTmFtZX0uZXJyb3JzYCwgbnVsbCk7XG4gICAgICAgIGdlbi5yZXR1cm4odHJ1ZSk7XG4gICAgfVxufVxuZXhwb3J0cy50b3BCb29sT3JFbXB0eVNjaGVtYSA9IHRvcEJvb2xPckVtcHR5U2NoZW1hO1xuZnVuY3Rpb24gYm9vbE9yRW1wdHlTY2hlbWEoaXQsIHZhbGlkKSB7XG4gICAgY29uc3QgeyBnZW4sIHNjaGVtYSB9ID0gaXQ7XG4gICAgaWYgKHNjaGVtYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZ2VuLnZhcih2YWxpZCwgZmFsc2UpOyAvLyBUT0RPIHZhclxuICAgICAgICBmYWxzZVNjaGVtYUVycm9yKGl0KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdlbi52YXIodmFsaWQsIHRydWUpOyAvLyBUT0RPIHZhclxuICAgIH1cbn1cbmV4cG9ydHMuYm9vbE9yRW1wdHlTY2hlbWEgPSBib29sT3JFbXB0eVNjaGVtYTtcbmZ1bmN0aW9uIGZhbHNlU2NoZW1hRXJyb3IoaXQsIG92ZXJyaWRlQWxsRXJyb3JzKSB7XG4gICAgY29uc3QgeyBnZW4sIGRhdGEgfSA9IGl0O1xuICAgIC8vIFRPRE8gbWF5YmUgc29tZSBvdGhlciBpbnRlcmZhY2Ugc2hvdWxkIGJlIHVzZWQgZm9yIG5vbi1rZXl3b3JkIHZhbGlkYXRpb24gZXJyb3JzLi4uXG4gICAgY29uc3QgY3h0ID0ge1xuICAgICAgICBnZW4sXG4gICAgICAgIGtleXdvcmQ6IFwiZmFsc2Ugc2NoZW1hXCIsXG4gICAgICAgIGRhdGEsXG4gICAgICAgIHNjaGVtYTogZmFsc2UsXG4gICAgICAgIHNjaGVtYUNvZGU6IGZhbHNlLFxuICAgICAgICBzY2hlbWFWYWx1ZTogZmFsc2UsXG4gICAgICAgIHBhcmFtczoge30sXG4gICAgICAgIGl0LFxuICAgIH07XG4gICAgKDAsIGVycm9yc18xLnJlcG9ydEVycm9yKShjeHQsIGJvb2xFcnJvciwgdW5kZWZpbmVkLCBvdmVycmlkZUFsbEVycm9ycyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ib29sU2NoZW1hLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRSdWxlcyA9IGV4cG9ydHMuaXNKU09OVHlwZSA9IHZvaWQgMDtcbmNvbnN0IF9qc29uVHlwZXMgPSBbXCJzdHJpbmdcIiwgXCJudW1iZXJcIiwgXCJpbnRlZ2VyXCIsIFwiYm9vbGVhblwiLCBcIm51bGxcIiwgXCJvYmplY3RcIiwgXCJhcnJheVwiXTtcbmNvbnN0IGpzb25UeXBlcyA9IG5ldyBTZXQoX2pzb25UeXBlcyk7XG5mdW5jdGlvbiBpc0pTT05UeXBlKHgpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT0gXCJzdHJpbmdcIiAmJiBqc29uVHlwZXMuaGFzKHgpO1xufVxuZXhwb3J0cy5pc0pTT05UeXBlID0gaXNKU09OVHlwZTtcbmZ1bmN0aW9uIGdldFJ1bGVzKCkge1xuICAgIGNvbnN0IGdyb3VwcyA9IHtcbiAgICAgICAgbnVtYmVyOiB7IHR5cGU6IFwibnVtYmVyXCIsIHJ1bGVzOiBbXSB9LFxuICAgICAgICBzdHJpbmc6IHsgdHlwZTogXCJzdHJpbmdcIiwgcnVsZXM6IFtdIH0sXG4gICAgICAgIGFycmF5OiB7IHR5cGU6IFwiYXJyYXlcIiwgcnVsZXM6IFtdIH0sXG4gICAgICAgIG9iamVjdDogeyB0eXBlOiBcIm9iamVjdFwiLCBydWxlczogW10gfSxcbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGVzOiB7IC4uLmdyb3VwcywgaW50ZWdlcjogdHJ1ZSwgYm9vbGVhbjogdHJ1ZSwgbnVsbDogdHJ1ZSB9LFxuICAgICAgICBydWxlczogW3sgcnVsZXM6IFtdIH0sIGdyb3Vwcy5udW1iZXIsIGdyb3Vwcy5zdHJpbmcsIGdyb3Vwcy5hcnJheSwgZ3JvdXBzLm9iamVjdF0sXG4gICAgICAgIHBvc3Q6IHsgcnVsZXM6IFtdIH0sXG4gICAgICAgIGFsbDoge30sXG4gICAgICAgIGtleXdvcmRzOiB7fSxcbiAgICB9O1xufVxuZXhwb3J0cy5nZXRSdWxlcyA9IGdldFJ1bGVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVsZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnNob3VsZFVzZVJ1bGUgPSBleHBvcnRzLnNob3VsZFVzZUdyb3VwID0gZXhwb3J0cy5zY2hlbWFIYXNSdWxlc0ZvclR5cGUgPSB2b2lkIDA7XG5mdW5jdGlvbiBzY2hlbWFIYXNSdWxlc0ZvclR5cGUoeyBzY2hlbWEsIHNlbGYgfSwgdHlwZSkge1xuICAgIGNvbnN0IGdyb3VwID0gc2VsZi5SVUxFUy50eXBlc1t0eXBlXTtcbiAgICByZXR1cm4gZ3JvdXAgJiYgZ3JvdXAgIT09IHRydWUgJiYgc2hvdWxkVXNlR3JvdXAoc2NoZW1hLCBncm91cCk7XG59XG5leHBvcnRzLnNjaGVtYUhhc1J1bGVzRm9yVHlwZSA9IHNjaGVtYUhhc1J1bGVzRm9yVHlwZTtcbmZ1bmN0aW9uIHNob3VsZFVzZUdyb3VwKHNjaGVtYSwgZ3JvdXApIHtcbiAgICByZXR1cm4gZ3JvdXAucnVsZXMuc29tZSgocnVsZSkgPT4gc2hvdWxkVXNlUnVsZShzY2hlbWEsIHJ1bGUpKTtcbn1cbmV4cG9ydHMuc2hvdWxkVXNlR3JvdXAgPSBzaG91bGRVc2VHcm91cDtcbmZ1bmN0aW9uIHNob3VsZFVzZVJ1bGUoc2NoZW1hLCBydWxlKSB7XG4gICAgdmFyIF9hO1xuICAgIHJldHVybiAoc2NoZW1hW3J1bGUua2V5d29yZF0gIT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAoKF9hID0gcnVsZS5kZWZpbml0aW9uLmltcGxlbWVudHMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zb21lKChrd2QpID0+IHNjaGVtYVtrd2RdICE9PSB1bmRlZmluZWQpKSk7XG59XG5leHBvcnRzLnNob3VsZFVzZVJ1bGUgPSBzaG91bGRVc2VSdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwbGljYWJpbGl0eS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVwb3J0VHlwZUVycm9yID0gZXhwb3J0cy5jaGVja0RhdGFUeXBlcyA9IGV4cG9ydHMuY2hlY2tEYXRhVHlwZSA9IGV4cG9ydHMuY29lcmNlQW5kQ2hlY2tEYXRhVHlwZSA9IGV4cG9ydHMuZ2V0SlNPTlR5cGVzID0gZXhwb3J0cy5nZXRTY2hlbWFUeXBlcyA9IGV4cG9ydHMuRGF0YVR5cGUgPSB2b2lkIDA7XG5jb25zdCBydWxlc18xID0gcmVxdWlyZShcIi4uL3J1bGVzXCIpO1xuY29uc3QgYXBwbGljYWJpbGl0eV8xID0gcmVxdWlyZShcIi4vYXBwbGljYWJpbGl0eVwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG52YXIgRGF0YVR5cGU7XG4oZnVuY3Rpb24gKERhdGFUeXBlKSB7XG4gICAgRGF0YVR5cGVbRGF0YVR5cGVbXCJDb3JyZWN0XCJdID0gMF0gPSBcIkNvcnJlY3RcIjtcbiAgICBEYXRhVHlwZVtEYXRhVHlwZVtcIldyb25nXCJdID0gMV0gPSBcIldyb25nXCI7XG59KShEYXRhVHlwZSB8fCAoZXhwb3J0cy5EYXRhVHlwZSA9IERhdGFUeXBlID0ge30pKTtcbmZ1bmN0aW9uIGdldFNjaGVtYVR5cGVzKHNjaGVtYSkge1xuICAgIGNvbnN0IHR5cGVzID0gZ2V0SlNPTlR5cGVzKHNjaGVtYS50eXBlKTtcbiAgICBjb25zdCBoYXNOdWxsID0gdHlwZXMuaW5jbHVkZXMoXCJudWxsXCIpO1xuICAgIGlmIChoYXNOdWxsKSB7XG4gICAgICAgIGlmIChzY2hlbWEubnVsbGFibGUgPT09IGZhbHNlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHlwZTogbnVsbCBjb250cmFkaWN0cyBudWxsYWJsZTogZmFsc2VcIik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIXR5cGVzLmxlbmd0aCAmJiBzY2hlbWEubnVsbGFibGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIm51bGxhYmxlXCIgY2Fubm90IGJlIHVzZWQgd2l0aG91dCBcInR5cGVcIicpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzY2hlbWEubnVsbGFibGUgPT09IHRydWUpXG4gICAgICAgICAgICB0eXBlcy5wdXNoKFwibnVsbFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIHR5cGVzO1xufVxuZXhwb3J0cy5nZXRTY2hlbWFUeXBlcyA9IGdldFNjaGVtYVR5cGVzO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWR1bmRhbnQtdHlwZS1jb25zdGl0dWVudHNcbmZ1bmN0aW9uIGdldEpTT05UeXBlcyh0cykge1xuICAgIGNvbnN0IHR5cGVzID0gQXJyYXkuaXNBcnJheSh0cykgPyB0cyA6IHRzID8gW3RzXSA6IFtdO1xuICAgIGlmICh0eXBlcy5ldmVyeShydWxlc18xLmlzSlNPTlR5cGUpKVxuICAgICAgICByZXR1cm4gdHlwZXM7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidHlwZSBtdXN0IGJlIEpTT05UeXBlIG9yIEpTT05UeXBlW106IFwiICsgdHlwZXMuam9pbihcIixcIikpO1xufVxuZXhwb3J0cy5nZXRKU09OVHlwZXMgPSBnZXRKU09OVHlwZXM7XG5mdW5jdGlvbiBjb2VyY2VBbmRDaGVja0RhdGFUeXBlKGl0LCB0eXBlcykge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBvcHRzIH0gPSBpdDtcbiAgICBjb25zdCBjb2VyY2VUbyA9IGNvZXJjZVRvVHlwZXModHlwZXMsIG9wdHMuY29lcmNlVHlwZXMpO1xuICAgIGNvbnN0IGNoZWNrVHlwZXMgPSB0eXBlcy5sZW5ndGggPiAwICYmXG4gICAgICAgICEoY29lcmNlVG8ubGVuZ3RoID09PSAwICYmIHR5cGVzLmxlbmd0aCA9PT0gMSAmJiAoMCwgYXBwbGljYWJpbGl0eV8xLnNjaGVtYUhhc1J1bGVzRm9yVHlwZSkoaXQsIHR5cGVzWzBdKSk7XG4gICAgaWYgKGNoZWNrVHlwZXMpIHtcbiAgICAgICAgY29uc3Qgd3JvbmdUeXBlID0gY2hlY2tEYXRhVHlwZXModHlwZXMsIGRhdGEsIG9wdHMuc3RyaWN0TnVtYmVycywgRGF0YVR5cGUuV3JvbmcpO1xuICAgICAgICBnZW4uaWYod3JvbmdUeXBlLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY29lcmNlVG8ubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGNvZXJjZURhdGEoaXQsIHR5cGVzLCBjb2VyY2VUbyk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcmVwb3J0VHlwZUVycm9yKGl0KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBjaGVja1R5cGVzO1xufVxuZXhwb3J0cy5jb2VyY2VBbmRDaGVja0RhdGFUeXBlID0gY29lcmNlQW5kQ2hlY2tEYXRhVHlwZTtcbmNvbnN0IENPRVJDSUJMRSA9IG5ldyBTZXQoW1wic3RyaW5nXCIsIFwibnVtYmVyXCIsIFwiaW50ZWdlclwiLCBcImJvb2xlYW5cIiwgXCJudWxsXCJdKTtcbmZ1bmN0aW9uIGNvZXJjZVRvVHlwZXModHlwZXMsIGNvZXJjZVR5cGVzKSB7XG4gICAgcmV0dXJuIGNvZXJjZVR5cGVzXG4gICAgICAgID8gdHlwZXMuZmlsdGVyKCh0KSA9PiBDT0VSQ0lCTEUuaGFzKHQpIHx8IChjb2VyY2VUeXBlcyA9PT0gXCJhcnJheVwiICYmIHQgPT09IFwiYXJyYXlcIikpXG4gICAgICAgIDogW107XG59XG5mdW5jdGlvbiBjb2VyY2VEYXRhKGl0LCB0eXBlcywgY29lcmNlVG8pIHtcbiAgICBjb25zdCB7IGdlbiwgZGF0YSwgb3B0cyB9ID0gaXQ7XG4gICAgY29uc3QgZGF0YVR5cGUgPSBnZW4ubGV0KFwiZGF0YVR5cGVcIiwgKDAsIGNvZGVnZW5fMS5fKSBgdHlwZW9mICR7ZGF0YX1gKTtcbiAgICBjb25zdCBjb2VyY2VkID0gZ2VuLmxldChcImNvZXJjZWRcIiwgKDAsIGNvZGVnZW5fMS5fKSBgdW5kZWZpbmVkYCk7XG4gICAgaWYgKG9wdHMuY29lcmNlVHlwZXMgPT09IFwiYXJyYXlcIikge1xuICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhVHlwZX0gPT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheSgke2RhdGF9KSAmJiAke2RhdGF9Lmxlbmd0aCA9PSAxYCwgKCkgPT4gZ2VuXG4gICAgICAgICAgICAuYXNzaWduKGRhdGEsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX1bMF1gKVxuICAgICAgICAgICAgLmFzc2lnbihkYXRhVHlwZSwgKDAsIGNvZGVnZW5fMS5fKSBgdHlwZW9mICR7ZGF0YX1gKVxuICAgICAgICAgICAgLmlmKGNoZWNrRGF0YVR5cGVzKHR5cGVzLCBkYXRhLCBvcHRzLnN0cmljdE51bWJlcnMpLCAoKSA9PiBnZW4uYXNzaWduKGNvZXJjZWQsIGRhdGEpKSk7XG4gICAgfVxuICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2NvZXJjZWR9ICE9PSB1bmRlZmluZWRgKTtcbiAgICBmb3IgKGNvbnN0IHQgb2YgY29lcmNlVG8pIHtcbiAgICAgICAgaWYgKENPRVJDSUJMRS5oYXModCkgfHwgKHQgPT09IFwiYXJyYXlcIiAmJiBvcHRzLmNvZXJjZVR5cGVzID09PSBcImFycmF5XCIpKSB7XG4gICAgICAgICAgICBjb2VyY2VTcGVjaWZpY1R5cGUodCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2VuLmVsc2UoKTtcbiAgICByZXBvcnRUeXBlRXJyb3IoaXQpO1xuICAgIGdlbi5lbmRJZigpO1xuICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2NvZXJjZWR9ICE9PSB1bmRlZmluZWRgLCAoKSA9PiB7XG4gICAgICAgIGdlbi5hc3NpZ24oZGF0YSwgY29lcmNlZCk7XG4gICAgICAgIGFzc2lnblBhcmVudERhdGEoaXQsIGNvZXJjZWQpO1xuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGNvZXJjZVNwZWNpZmljVHlwZSh0KSB7XG4gICAgICAgIHN3aXRjaCAodCkge1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOlxuICAgICAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgICAgICAuZWxzZUlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YVR5cGV9ID09IFwibnVtYmVyXCIgfHwgJHtkYXRhVHlwZX0gPT0gXCJib29sZWFuXCJgKVxuICAgICAgICAgICAgICAgICAgICAuYXNzaWduKGNvZXJjZWQsICgwLCBjb2RlZ2VuXzEuXykgYFwiXCIgKyAke2RhdGF9YClcbiAgICAgICAgICAgICAgICAgICAgLmVsc2VJZigoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9ID09PSBudWxsYClcbiAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihjb2VyY2VkLCAoMCwgY29kZWdlbl8xLl8pIGBcIlwiYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgICAgICAuZWxzZUlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YVR5cGV9ID09IFwiYm9vbGVhblwiIHx8ICR7ZGF0YX0gPT09IG51bGxcbiAgICAgICAgICAgICAgfHwgKCR7ZGF0YVR5cGV9ID09IFwic3RyaW5nXCIgJiYgJHtkYXRhfSAmJiAke2RhdGF9ID09ICske2RhdGF9KWApXG4gICAgICAgICAgICAgICAgICAgIC5hc3NpZ24oY29lcmNlZCwgKDAsIGNvZGVnZW5fMS5fKSBgKyR7ZGF0YX1gKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjYXNlIFwiaW50ZWdlclwiOlxuICAgICAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgICAgICAuZWxzZUlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YVR5cGV9ID09PSBcImJvb2xlYW5cIiB8fCAke2RhdGF9ID09PSBudWxsXG4gICAgICAgICAgICAgIHx8ICgke2RhdGFUeXBlfSA9PT0gXCJzdHJpbmdcIiAmJiAke2RhdGF9ICYmICR7ZGF0YX0gPT0gKyR7ZGF0YX0gJiYgISgke2RhdGF9ICUgMSkpYClcbiAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihjb2VyY2VkLCAoMCwgY29kZWdlbl8xLl8pIGArJHtkYXRhfWApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNhc2UgXCJib29sZWFuXCI6XG4gICAgICAgICAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgICAgIC5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSA9PT0gXCJmYWxzZVwiIHx8ICR7ZGF0YX0gPT09IDAgfHwgJHtkYXRhfSA9PT0gbnVsbGApXG4gICAgICAgICAgICAgICAgICAgIC5hc3NpZ24oY29lcmNlZCwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIC5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSA9PT0gXCJ0cnVlXCIgfHwgJHtkYXRhfSA9PT0gMWApXG4gICAgICAgICAgICAgICAgICAgIC5hc3NpZ24oY29lcmNlZCwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBcIm51bGxcIjpcbiAgICAgICAgICAgICAgICBnZW4uZWxzZUlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0gPT09IFwiXCIgfHwgJHtkYXRhfSA9PT0gMCB8fCAke2RhdGF9ID09PSBmYWxzZWApO1xuICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24oY29lcmNlZCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY2FzZSBcImFycmF5XCI6XG4gICAgICAgICAgICAgICAgZ2VuXG4gICAgICAgICAgICAgICAgICAgIC5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhVHlwZX0gPT09IFwic3RyaW5nXCIgfHwgJHtkYXRhVHlwZX0gPT09IFwibnVtYmVyXCJcbiAgICAgICAgICAgICAgfHwgJHtkYXRhVHlwZX0gPT09IFwiYm9vbGVhblwiIHx8ICR7ZGF0YX0gPT09IG51bGxgKVxuICAgICAgICAgICAgICAgICAgICAuYXNzaWduKGNvZXJjZWQsICgwLCBjb2RlZ2VuXzEuXykgYFske2RhdGF9XWApO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gYXNzaWduUGFyZW50RGF0YSh7IGdlbiwgcGFyZW50RGF0YSwgcGFyZW50RGF0YVByb3BlcnR5IH0sIGV4cHIpIHtcbiAgICAvLyBUT0RPIHVzZSBnZW4ucHJvcGVydHlcbiAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtwYXJlbnREYXRhfSAhPT0gdW5kZWZpbmVkYCwgKCkgPT4gZ2VuLmFzc2lnbigoMCwgY29kZWdlbl8xLl8pIGAke3BhcmVudERhdGF9WyR7cGFyZW50RGF0YVByb3BlcnR5fV1gLCBleHByKSk7XG59XG5mdW5jdGlvbiBjaGVja0RhdGFUeXBlKGRhdGFUeXBlLCBkYXRhLCBzdHJpY3ROdW1zLCBjb3JyZWN0ID0gRGF0YVR5cGUuQ29ycmVjdCkge1xuICAgIGNvbnN0IEVRID0gY29ycmVjdCA9PT0gRGF0YVR5cGUuQ29ycmVjdCA/IGNvZGVnZW5fMS5vcGVyYXRvcnMuRVEgOiBjb2RlZ2VuXzEub3BlcmF0b3JzLk5FUTtcbiAgICBsZXQgY29uZDtcbiAgICBzd2l0Y2ggKGRhdGFUeXBlKSB7XG4gICAgICAgIGNhc2UgXCJudWxsXCI6XG4gICAgICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSAke0VRfSBudWxsYDtcbiAgICAgICAgY2FzZSBcImFycmF5XCI6XG4gICAgICAgICAgICBjb25kID0gKDAsIGNvZGVnZW5fMS5fKSBgQXJyYXkuaXNBcnJheSgke2RhdGF9KWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcIm9iamVjdFwiOlxuICAgICAgICAgICAgY29uZCA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0gJiYgdHlwZW9mICR7ZGF0YX0gPT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheSgke2RhdGF9KWA7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSBcImludGVnZXJcIjpcbiAgICAgICAgICAgIGNvbmQgPSBudW1Db25kKCgwLCBjb2RlZ2VuXzEuXykgYCEoJHtkYXRhfSAlIDEpICYmICFpc05hTigke2RhdGF9KWApO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgXCJudW1iZXJcIjpcbiAgICAgICAgICAgIGNvbmQgPSBudW1Db25kKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtkYXRhfSAke0VRfSAke2RhdGFUeXBlfWA7XG4gICAgfVxuICAgIHJldHVybiBjb3JyZWN0ID09PSBEYXRhVHlwZS5Db3JyZWN0ID8gY29uZCA6ICgwLCBjb2RlZ2VuXzEubm90KShjb25kKTtcbiAgICBmdW5jdGlvbiBudW1Db25kKF9jb25kID0gY29kZWdlbl8xLm5pbCkge1xuICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5hbmQpKCgwLCBjb2RlZ2VuXzEuXykgYHR5cGVvZiAke2RhdGF9ID09IFwibnVtYmVyXCJgLCBfY29uZCwgc3RyaWN0TnVtcyA/ICgwLCBjb2RlZ2VuXzEuXykgYGlzRmluaXRlKCR7ZGF0YX0pYCA6IGNvZGVnZW5fMS5uaWwpO1xuICAgIH1cbn1cbmV4cG9ydHMuY2hlY2tEYXRhVHlwZSA9IGNoZWNrRGF0YVR5cGU7XG5mdW5jdGlvbiBjaGVja0RhdGFUeXBlcyhkYXRhVHlwZXMsIGRhdGEsIHN0cmljdE51bXMsIGNvcnJlY3QpIHtcbiAgICBpZiAoZGF0YVR5cGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gY2hlY2tEYXRhVHlwZShkYXRhVHlwZXNbMF0sIGRhdGEsIHN0cmljdE51bXMsIGNvcnJlY3QpO1xuICAgIH1cbiAgICBsZXQgY29uZDtcbiAgICBjb25zdCB0eXBlcyA9ICgwLCB1dGlsXzEudG9IYXNoKShkYXRhVHlwZXMpO1xuICAgIGlmICh0eXBlcy5hcnJheSAmJiB0eXBlcy5vYmplY3QpIHtcbiAgICAgICAgY29uc3Qgbm90T2JqID0gKDAsIGNvZGVnZW5fMS5fKSBgdHlwZW9mICR7ZGF0YX0gIT0gXCJvYmplY3RcImA7XG4gICAgICAgIGNvbmQgPSB0eXBlcy5udWxsID8gbm90T2JqIDogKDAsIGNvZGVnZW5fMS5fKSBgISR7ZGF0YX0gfHwgJHtub3RPYmp9YDtcbiAgICAgICAgZGVsZXRlIHR5cGVzLm51bGw7XG4gICAgICAgIGRlbGV0ZSB0eXBlcy5hcnJheTtcbiAgICAgICAgZGVsZXRlIHR5cGVzLm9iamVjdDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbmQgPSBjb2RlZ2VuXzEubmlsO1xuICAgIH1cbiAgICBpZiAodHlwZXMubnVtYmVyKVxuICAgICAgICBkZWxldGUgdHlwZXMuaW50ZWdlcjtcbiAgICBmb3IgKGNvbnN0IHQgaW4gdHlwZXMpXG4gICAgICAgIGNvbmQgPSAoMCwgY29kZWdlbl8xLmFuZCkoY29uZCwgY2hlY2tEYXRhVHlwZSh0LCBkYXRhLCBzdHJpY3ROdW1zLCBjb3JyZWN0KSk7XG4gICAgcmV0dXJuIGNvbmQ7XG59XG5leHBvcnRzLmNoZWNrRGF0YVR5cGVzID0gY2hlY2tEYXRhVHlwZXM7XG5jb25zdCB0eXBlRXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgc2NoZW1hIH0pID0+IGBtdXN0IGJlICR7c2NoZW1hfWAsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWEsIHNjaGVtYVZhbHVlIH0pID0+IHR5cGVvZiBzY2hlbWEgPT0gXCJzdHJpbmdcIiA/ICgwLCBjb2RlZ2VuXzEuXykgYHt0eXBlOiAke3NjaGVtYX19YCA6ICgwLCBjb2RlZ2VuXzEuXykgYHt0eXBlOiAke3NjaGVtYVZhbHVlfX1gLFxufTtcbmZ1bmN0aW9uIHJlcG9ydFR5cGVFcnJvcihpdCkge1xuICAgIGNvbnN0IGN4dCA9IGdldFR5cGVFcnJvckNvbnRleHQoaXQpO1xuICAgICgwLCBlcnJvcnNfMS5yZXBvcnRFcnJvcikoY3h0LCB0eXBlRXJyb3IpO1xufVxuZXhwb3J0cy5yZXBvcnRUeXBlRXJyb3IgPSByZXBvcnRUeXBlRXJyb3I7XG5mdW5jdGlvbiBnZXRUeXBlRXJyb3JDb250ZXh0KGl0KSB7XG4gICAgY29uc3QgeyBnZW4sIGRhdGEsIHNjaGVtYSB9ID0gaXQ7XG4gICAgY29uc3Qgc2NoZW1hQ29kZSA9ICgwLCB1dGlsXzEuc2NoZW1hUmVmT3JWYWwpKGl0LCBzY2hlbWEsIFwidHlwZVwiKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBnZW4sXG4gICAgICAgIGtleXdvcmQ6IFwidHlwZVwiLFxuICAgICAgICBkYXRhLFxuICAgICAgICBzY2hlbWE6IHNjaGVtYS50eXBlLFxuICAgICAgICBzY2hlbWFDb2RlLFxuICAgICAgICBzY2hlbWFWYWx1ZTogc2NoZW1hQ29kZSxcbiAgICAgICAgcGFyZW50U2NoZW1hOiBzY2hlbWEsXG4gICAgICAgIHBhcmFtczoge30sXG4gICAgICAgIGl0LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhVHlwZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuYXNzaWduRGVmYXVsdHMgPSB2b2lkIDA7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuZnVuY3Rpb24gYXNzaWduRGVmYXVsdHMoaXQsIHR5KSB7XG4gICAgY29uc3QgeyBwcm9wZXJ0aWVzLCBpdGVtcyB9ID0gaXQuc2NoZW1hO1xuICAgIGlmICh0eSA9PT0gXCJvYmplY3RcIiAmJiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIGFzc2lnbkRlZmF1bHQoaXQsIGtleSwgcHJvcGVydGllc1trZXldLmRlZmF1bHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5ID09PSBcImFycmF5XCIgJiYgQXJyYXkuaXNBcnJheShpdGVtcykpIHtcbiAgICAgICAgaXRlbXMuZm9yRWFjaCgoc2NoLCBpKSA9PiBhc3NpZ25EZWZhdWx0KGl0LCBpLCBzY2guZGVmYXVsdCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuYXNzaWduRGVmYXVsdHMgPSBhc3NpZ25EZWZhdWx0cztcbmZ1bmN0aW9uIGFzc2lnbkRlZmF1bHQoaXQsIHByb3AsIGRlZmF1bHRWYWx1ZSkge1xuICAgIGNvbnN0IHsgZ2VuLCBjb21wb3NpdGVSdWxlLCBkYXRhLCBvcHRzIH0gPSBpdDtcbiAgICBpZiAoZGVmYXVsdFZhbHVlID09PSB1bmRlZmluZWQpXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBjaGlsZERhdGEgPSAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9JHsoMCwgY29kZWdlbl8xLmdldFByb3BlcnR5KShwcm9wKX1gO1xuICAgIGlmIChjb21wb3NpdGVSdWxlKSB7XG4gICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgYGRlZmF1bHQgaXMgaWdub3JlZCBmb3I6ICR7Y2hpbGREYXRhfWApO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGxldCBjb25kaXRpb24gPSAoMCwgY29kZWdlbl8xLl8pIGAke2NoaWxkRGF0YX0gPT09IHVuZGVmaW5lZGA7XG4gICAgaWYgKG9wdHMudXNlRGVmYXVsdHMgPT09IFwiZW1wdHlcIikge1xuICAgICAgICBjb25kaXRpb24gPSAoMCwgY29kZWdlbl8xLl8pIGAke2NvbmRpdGlvbn0gfHwgJHtjaGlsZERhdGF9ID09PSBudWxsIHx8ICR7Y2hpbGREYXRhfSA9PT0gXCJcImA7XG4gICAgfVxuICAgIC8vIGAke2NoaWxkRGF0YX0gPT09IHVuZGVmaW5lZGAgK1xuICAgIC8vIChvcHRzLnVzZURlZmF1bHRzID09PSBcImVtcHR5XCIgPyBgIHx8ICR7Y2hpbGREYXRhfSA9PT0gbnVsbCB8fCAke2NoaWxkRGF0YX0gPT09IFwiXCJgIDogXCJcIilcbiAgICBnZW4uaWYoY29uZGl0aW9uLCAoMCwgY29kZWdlbl8xLl8pIGAke2NoaWxkRGF0YX0gPSAkeygwLCBjb2RlZ2VuXzEuc3RyaW5naWZ5KShkZWZhdWx0VmFsdWUpfWApO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVmYXVsdHMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlVW5pb24gPSBleHBvcnRzLnZhbGlkYXRlQXJyYXkgPSBleHBvcnRzLnVzZVBhdHRlcm4gPSBleHBvcnRzLmNhbGxWYWxpZGF0ZUNvZGUgPSBleHBvcnRzLnNjaGVtYVByb3BlcnRpZXMgPSBleHBvcnRzLmFsbFNjaGVtYVByb3BlcnRpZXMgPSBleHBvcnRzLm5vUHJvcGVydHlJbkRhdGEgPSBleHBvcnRzLnByb3BlcnR5SW5EYXRhID0gZXhwb3J0cy5pc093blByb3BlcnR5ID0gZXhwb3J0cy5oYXNQcm9wRnVuYyA9IGV4cG9ydHMucmVwb3J0TWlzc2luZ1Byb3AgPSBleHBvcnRzLmNoZWNrTWlzc2luZ1Byb3AgPSBleHBvcnRzLmNoZWNrUmVwb3J0TWlzc2luZ1Byb3AgPSB2b2lkIDA7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi4vY29tcGlsZS9uYW1lc1wiKTtcbmNvbnN0IHV0aWxfMiA9IHJlcXVpcmUoXCIuLi9jb21waWxlL3V0aWxcIik7XG5mdW5jdGlvbiBjaGVja1JlcG9ydE1pc3NpbmdQcm9wKGN4dCwgcHJvcCkge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBpdCB9ID0gY3h0O1xuICAgIGdlbi5pZihub1Byb3BlcnR5SW5EYXRhKGdlbiwgZGF0YSwgcHJvcCwgaXQub3B0cy5vd25Qcm9wZXJ0aWVzKSwgKCkgPT4ge1xuICAgICAgICBjeHQuc2V0UGFyYW1zKHsgbWlzc2luZ1Byb3BlcnR5OiAoMCwgY29kZWdlbl8xLl8pIGAke3Byb3B9YCB9LCB0cnVlKTtcbiAgICAgICAgY3h0LmVycm9yKCk7XG4gICAgfSk7XG59XG5leHBvcnRzLmNoZWNrUmVwb3J0TWlzc2luZ1Byb3AgPSBjaGVja1JlcG9ydE1pc3NpbmdQcm9wO1xuZnVuY3Rpb24gY2hlY2tNaXNzaW5nUHJvcCh7IGdlbiwgZGF0YSwgaXQ6IHsgb3B0cyB9IH0sIHByb3BlcnRpZXMsIG1pc3NpbmcpIHtcbiAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5vcikoLi4ucHJvcGVydGllcy5tYXAoKHByb3ApID0+ICgwLCBjb2RlZ2VuXzEuYW5kKShub1Byb3BlcnR5SW5EYXRhKGdlbiwgZGF0YSwgcHJvcCwgb3B0cy5vd25Qcm9wZXJ0aWVzKSwgKDAsIGNvZGVnZW5fMS5fKSBgJHttaXNzaW5nfSA9ICR7cHJvcH1gKSkpO1xufVxuZXhwb3J0cy5jaGVja01pc3NpbmdQcm9wID0gY2hlY2tNaXNzaW5nUHJvcDtcbmZ1bmN0aW9uIHJlcG9ydE1pc3NpbmdQcm9wKGN4dCwgbWlzc2luZykge1xuICAgIGN4dC5zZXRQYXJhbXMoeyBtaXNzaW5nUHJvcGVydHk6IG1pc3NpbmcgfSwgdHJ1ZSk7XG4gICAgY3h0LmVycm9yKCk7XG59XG5leHBvcnRzLnJlcG9ydE1pc3NpbmdQcm9wID0gcmVwb3J0TWlzc2luZ1Byb3A7XG5mdW5jdGlvbiBoYXNQcm9wRnVuYyhnZW4pIHtcbiAgICByZXR1cm4gZ2VuLnNjb3BlVmFsdWUoXCJmdW5jXCIsIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICByZWY6IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksXG4gICAgICAgIGNvZGU6ICgwLCBjb2RlZ2VuXzEuXykgYE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHlgLFxuICAgIH0pO1xufVxuZXhwb3J0cy5oYXNQcm9wRnVuYyA9IGhhc1Byb3BGdW5jO1xuZnVuY3Rpb24gaXNPd25Qcm9wZXJ0eShnZW4sIGRhdGEsIHByb3BlcnR5KSB7XG4gICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCR7aGFzUHJvcEZ1bmMoZ2VuKX0uY2FsbCgke2RhdGF9LCAke3Byb3BlcnR5fSlgO1xufVxuZXhwb3J0cy5pc093blByb3BlcnR5ID0gaXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIHByb3BlcnR5SW5EYXRhKGdlbiwgZGF0YSwgcHJvcGVydHksIG93blByb3BlcnRpZXMpIHtcbiAgICBjb25zdCBjb25kID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSR7KDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkocHJvcGVydHkpfSAhPT0gdW5kZWZpbmVkYDtcbiAgICByZXR1cm4gb3duUHJvcGVydGllcyA/ICgwLCBjb2RlZ2VuXzEuXykgYCR7Y29uZH0gJiYgJHtpc093blByb3BlcnR5KGdlbiwgZGF0YSwgcHJvcGVydHkpfWAgOiBjb25kO1xufVxuZXhwb3J0cy5wcm9wZXJ0eUluRGF0YSA9IHByb3BlcnR5SW5EYXRhO1xuZnVuY3Rpb24gbm9Qcm9wZXJ0eUluRGF0YShnZW4sIGRhdGEsIHByb3BlcnR5LCBvd25Qcm9wZXJ0aWVzKSB7XG4gICAgY29uc3QgY29uZCA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKHByb3BlcnR5KX0gPT09IHVuZGVmaW5lZGA7XG4gICAgcmV0dXJuIG93blByb3BlcnRpZXMgPyAoMCwgY29kZWdlbl8xLm9yKShjb25kLCAoMCwgY29kZWdlbl8xLm5vdCkoaXNPd25Qcm9wZXJ0eShnZW4sIGRhdGEsIHByb3BlcnR5KSkpIDogY29uZDtcbn1cbmV4cG9ydHMubm9Qcm9wZXJ0eUluRGF0YSA9IG5vUHJvcGVydHlJbkRhdGE7XG5mdW5jdGlvbiBhbGxTY2hlbWFQcm9wZXJ0aWVzKHNjaGVtYU1hcCkge1xuICAgIHJldHVybiBzY2hlbWFNYXAgPyBPYmplY3Qua2V5cyhzY2hlbWFNYXApLmZpbHRlcigocCkgPT4gcCAhPT0gXCJfX3Byb3RvX19cIikgOiBbXTtcbn1cbmV4cG9ydHMuYWxsU2NoZW1hUHJvcGVydGllcyA9IGFsbFNjaGVtYVByb3BlcnRpZXM7XG5mdW5jdGlvbiBzY2hlbWFQcm9wZXJ0aWVzKGl0LCBzY2hlbWFNYXApIHtcbiAgICByZXR1cm4gYWxsU2NoZW1hUHJvcGVydGllcyhzY2hlbWFNYXApLmZpbHRlcigocCkgPT4gISgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWFNYXBbcF0pKTtcbn1cbmV4cG9ydHMuc2NoZW1hUHJvcGVydGllcyA9IHNjaGVtYVByb3BlcnRpZXM7XG5mdW5jdGlvbiBjYWxsVmFsaWRhdGVDb2RlKHsgc2NoZW1hQ29kZSwgZGF0YSwgaXQ6IHsgZ2VuLCB0b3BTY2hlbWFSZWYsIHNjaGVtYVBhdGgsIGVycm9yUGF0aCB9LCBpdCB9LCBmdW5jLCBjb250ZXh0LCBwYXNzU2NoZW1hKSB7XG4gICAgY29uc3QgZGF0YUFuZFNjaGVtYSA9IHBhc3NTY2hlbWEgPyAoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYUNvZGV9LCAke2RhdGF9LCAke3RvcFNjaGVtYVJlZn0ke3NjaGVtYVBhdGh9YCA6IGRhdGE7XG4gICAgY29uc3QgdmFsQ3h0ID0gW1xuICAgICAgICBbbmFtZXNfMS5kZWZhdWx0Lmluc3RhbmNlUGF0aCwgKDAsIGNvZGVnZW5fMS5zdHJDb25jYXQpKG5hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGgsIGVycm9yUGF0aCldLFxuICAgICAgICBbbmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGEsIGl0LnBhcmVudERhdGFdLFxuICAgICAgICBbbmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGFQcm9wZXJ0eSwgaXQucGFyZW50RGF0YVByb3BlcnR5XSxcbiAgICAgICAgW25hbWVzXzEuZGVmYXVsdC5yb290RGF0YSwgbmFtZXNfMS5kZWZhdWx0LnJvb3REYXRhXSxcbiAgICBdO1xuICAgIGlmIChpdC5vcHRzLmR5bmFtaWNSZWYpXG4gICAgICAgIHZhbEN4dC5wdXNoKFtuYW1lc18xLmRlZmF1bHQuZHluYW1pY0FuY2hvcnMsIG5hbWVzXzEuZGVmYXVsdC5keW5hbWljQW5jaG9yc10pO1xuICAgIGNvbnN0IGFyZ3MgPSAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGFBbmRTY2hlbWF9LCAke2dlbi5vYmplY3QoLi4udmFsQ3h0KX1gO1xuICAgIHJldHVybiBjb250ZXh0ICE9PSBjb2RlZ2VuXzEubmlsID8gKDAsIGNvZGVnZW5fMS5fKSBgJHtmdW5jfS5jYWxsKCR7Y29udGV4dH0sICR7YXJnc30pYCA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZnVuY30oJHthcmdzfSlgO1xufVxuZXhwb3J0cy5jYWxsVmFsaWRhdGVDb2RlID0gY2FsbFZhbGlkYXRlQ29kZTtcbmNvbnN0IG5ld1JlZ0V4cCA9ICgwLCBjb2RlZ2VuXzEuXykgYG5ldyBSZWdFeHBgO1xuZnVuY3Rpb24gdXNlUGF0dGVybih7IGdlbiwgaXQ6IHsgb3B0cyB9IH0sIHBhdHRlcm4pIHtcbiAgICBjb25zdCB1ID0gb3B0cy51bmljb2RlUmVnRXhwID8gXCJ1XCIgOiBcIlwiO1xuICAgIGNvbnN0IHsgcmVnRXhwIH0gPSBvcHRzLmNvZGU7XG4gICAgY29uc3QgcnggPSByZWdFeHAocGF0dGVybiwgdSk7XG4gICAgcmV0dXJuIGdlbi5zY29wZVZhbHVlKFwicGF0dGVyblwiLCB7XG4gICAgICAgIGtleTogcngudG9TdHJpbmcoKSxcbiAgICAgICAgcmVmOiByeCxcbiAgICAgICAgY29kZTogKDAsIGNvZGVnZW5fMS5fKSBgJHtyZWdFeHAuY29kZSA9PT0gXCJuZXcgUmVnRXhwXCIgPyBuZXdSZWdFeHAgOiAoMCwgdXRpbF8yLnVzZUZ1bmMpKGdlbiwgcmVnRXhwKX0oJHtwYXR0ZXJufSwgJHt1fSlgLFxuICAgIH0pO1xufVxuZXhwb3J0cy51c2VQYXR0ZXJuID0gdXNlUGF0dGVybjtcbmZ1bmN0aW9uIHZhbGlkYXRlQXJyYXkoY3h0KSB7XG4gICAgY29uc3QgeyBnZW4sIGRhdGEsIGtleXdvcmQsIGl0IH0gPSBjeHQ7XG4gICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgIGlmIChpdC5hbGxFcnJvcnMpIHtcbiAgICAgICAgY29uc3QgdmFsaWRBcnIgPSBnZW4ubGV0KFwidmFsaWRcIiwgdHJ1ZSk7XG4gICAgICAgIHZhbGlkYXRlSXRlbXMoKCkgPT4gZ2VuLmFzc2lnbih2YWxpZEFyciwgZmFsc2UpKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkQXJyO1xuICAgIH1cbiAgICBnZW4udmFyKHZhbGlkLCB0cnVlKTtcbiAgICB2YWxpZGF0ZUl0ZW1zKCgpID0+IGdlbi5icmVhaygpKTtcbiAgICByZXR1cm4gdmFsaWQ7XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVJdGVtcyhub3RWYWxpZCkge1xuICAgICAgICBjb25zdCBsZW4gPSBnZW4uY29uc3QoXCJsZW5cIiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfS5sZW5ndGhgKTtcbiAgICAgICAgZ2VuLmZvclJhbmdlKFwiaVwiLCAwLCBsZW4sIChpKSA9PiB7XG4gICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICBrZXl3b3JkLFxuICAgICAgICAgICAgICAgIGRhdGFQcm9wOiBpLFxuICAgICAgICAgICAgICAgIGRhdGFQcm9wVHlwZTogdXRpbF8xLlR5cGUuTnVtLFxuICAgICAgICAgICAgfSwgdmFsaWQpO1xuICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KSh2YWxpZCksIG5vdFZhbGlkKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy52YWxpZGF0ZUFycmF5ID0gdmFsaWRhdGVBcnJheTtcbmZ1bmN0aW9uIHZhbGlkYXRlVW5pb24oY3h0KSB7XG4gICAgY29uc3QgeyBnZW4sIHNjaGVtYSwga2V5d29yZCwgaXQgfSA9IGN4dDtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2NoZW1hKSlcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgIGNvbnN0IGFsd2F5c1ZhbGlkID0gc2NoZW1hLnNvbWUoKHNjaCkgPT4gKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaCkpO1xuICAgIGlmIChhbHdheXNWYWxpZCAmJiAhaXQub3B0cy51bmV2YWx1YXRlZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIsIGZhbHNlKTtcbiAgICBjb25zdCBzY2hWYWxpZCA9IGdlbi5uYW1lKFwiX3ZhbGlkXCIpO1xuICAgIGdlbi5ibG9jaygoKSA9PiBzY2hlbWEuZm9yRWFjaCgoX3NjaCwgaSkgPT4ge1xuICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgIGtleXdvcmQsXG4gICAgICAgICAgICBzY2hlbWFQcm9wOiBpLFxuICAgICAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICAgICAgfSwgc2NoVmFsaWQpO1xuICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCAoMCwgY29kZWdlbl8xLl8pIGAke3ZhbGlkfSB8fCAke3NjaFZhbGlkfWApO1xuICAgICAgICBjb25zdCBtZXJnZWQgPSBjeHQubWVyZ2VWYWxpZEV2YWx1YXRlZChzY2hDeHQsIHNjaFZhbGlkKTtcbiAgICAgICAgLy8gY2FuIHNob3J0LWNpcmN1aXQgaWYgYHVuZXZhbHVhdGVkUHJvcGVydGllcy9JdGVtc2Agbm90IHN1cHBvcnRlZCAob3B0cy51bmV2YWx1YXRlZCAhPT0gdHJ1ZSlcbiAgICAgICAgLy8gb3IgaWYgYWxsIHByb3BlcnRpZXMgYW5kIGl0ZW1zIHdlcmUgZXZhbHVhdGVkIChpdC5wcm9wcyA9PT0gdHJ1ZSAmJiBpdC5pdGVtcyA9PT0gdHJ1ZSlcbiAgICAgICAgaWYgKCFtZXJnZWQpXG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSk7XG4gICAgfSkpO1xuICAgIGN4dC5yZXN1bHQodmFsaWQsICgpID0+IGN4dC5yZXNldCgpLCAoKSA9PiBjeHQuZXJyb3IodHJ1ZSkpO1xufVxuZXhwb3J0cy52YWxpZGF0ZVVuaW9uID0gdmFsaWRhdGVVbmlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvZGUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlS2V5d29yZFVzYWdlID0gZXhwb3J0cy52YWxpZFNjaGVtYVR5cGUgPSBleHBvcnRzLmZ1bmNLZXl3b3JkQ29kZSA9IGV4cG9ydHMubWFjcm9LZXl3b3JkQ29kZSA9IHZvaWQgMDtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi9jb2RlZ2VuXCIpO1xuY29uc3QgbmFtZXNfMSA9IHJlcXVpcmUoXCIuLi9uYW1lc1wiKTtcbmNvbnN0IGNvZGVfMSA9IHJlcXVpcmUoXCIuLi8uLi92b2NhYnVsYXJpZXMvY29kZVwiKTtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4uL2Vycm9yc1wiKTtcbmZ1bmN0aW9uIG1hY3JvS2V5d29yZENvZGUoY3h0LCBkZWYpIHtcbiAgICBjb25zdCB7IGdlbiwga2V5d29yZCwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgY29uc3QgbWFjcm9TY2hlbWEgPSBkZWYubWFjcm8uY2FsbChpdC5zZWxmLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQpO1xuICAgIGNvbnN0IHNjaGVtYVJlZiA9IHVzZUtleXdvcmQoZ2VuLCBrZXl3b3JkLCBtYWNyb1NjaGVtYSk7XG4gICAgaWYgKGl0Lm9wdHMudmFsaWRhdGVTY2hlbWEgIT09IGZhbHNlKVxuICAgICAgICBpdC5zZWxmLnZhbGlkYXRlU2NoZW1hKG1hY3JvU2NoZW1hLCB0cnVlKTtcbiAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgIHNjaGVtYTogbWFjcm9TY2hlbWEsXG4gICAgICAgIHNjaGVtYVBhdGg6IGNvZGVnZW5fMS5uaWwsXG4gICAgICAgIGVyclNjaGVtYVBhdGg6IGAke2l0LmVyclNjaGVtYVBhdGh9LyR7a2V5d29yZH1gLFxuICAgICAgICB0b3BTY2hlbWFSZWY6IHNjaGVtYVJlZixcbiAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICB9LCB2YWxpZCk7XG4gICAgY3h0LnBhc3ModmFsaWQsICgpID0+IGN4dC5lcnJvcih0cnVlKSk7XG59XG5leHBvcnRzLm1hY3JvS2V5d29yZENvZGUgPSBtYWNyb0tleXdvcmRDb2RlO1xuZnVuY3Rpb24gZnVuY0tleXdvcmRDb2RlKGN4dCwgZGVmKSB7XG4gICAgdmFyIF9hO1xuICAgIGNvbnN0IHsgZ2VuLCBrZXl3b3JkLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgJGRhdGEsIGl0IH0gPSBjeHQ7XG4gICAgY2hlY2tBc3luY0tleXdvcmQoaXQsIGRlZik7XG4gICAgY29uc3QgdmFsaWRhdGUgPSAhJGRhdGEgJiYgZGVmLmNvbXBpbGUgPyBkZWYuY29tcGlsZS5jYWxsKGl0LnNlbGYsIHNjaGVtYSwgcGFyZW50U2NoZW1hLCBpdCkgOiBkZWYudmFsaWRhdGU7XG4gICAgY29uc3QgdmFsaWRhdGVSZWYgPSB1c2VLZXl3b3JkKGdlbiwga2V5d29yZCwgdmFsaWRhdGUpO1xuICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIpO1xuICAgIGN4dC5ibG9jayRkYXRhKHZhbGlkLCB2YWxpZGF0ZUtleXdvcmQpO1xuICAgIGN4dC5vaygoX2EgPSBkZWYudmFsaWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHZhbGlkKTtcbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUtleXdvcmQoKSB7XG4gICAgICAgIGlmIChkZWYuZXJyb3JzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYXNzaWduVmFsaWQoKTtcbiAgICAgICAgICAgIGlmIChkZWYubW9kaWZ5aW5nKVxuICAgICAgICAgICAgICAgIG1vZGlmeURhdGEoY3h0KTtcbiAgICAgICAgICAgIHJlcG9ydEVycnMoKCkgPT4gY3h0LmVycm9yKCkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgcnVsZUVycnMgPSBkZWYuYXN5bmMgPyB2YWxpZGF0ZUFzeW5jKCkgOiB2YWxpZGF0ZVN5bmMoKTtcbiAgICAgICAgICAgIGlmIChkZWYubW9kaWZ5aW5nKVxuICAgICAgICAgICAgICAgIG1vZGlmeURhdGEoY3h0KTtcbiAgICAgICAgICAgIHJlcG9ydEVycnMoKCkgPT4gYWRkRXJycyhjeHQsIHJ1bGVFcnJzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gdmFsaWRhdGVBc3luYygpIHtcbiAgICAgICAgY29uc3QgcnVsZUVycnMgPSBnZW4ubGV0KFwicnVsZUVycnNcIiwgbnVsbCk7XG4gICAgICAgIGdlbi50cnkoKCkgPT4gYXNzaWduVmFsaWQoKDAsIGNvZGVnZW5fMS5fKSBgYXdhaXQgYCksIChlKSA9PiBnZW4uYXNzaWduKHZhbGlkLCBmYWxzZSkuaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtlfSBpbnN0YW5jZW9mICR7aXQuVmFsaWRhdGlvbkVycm9yfWAsICgpID0+IGdlbi5hc3NpZ24ocnVsZUVycnMsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZX0uZXJyb3JzYCksICgpID0+IGdlbi50aHJvdyhlKSkpO1xuICAgICAgICByZXR1cm4gcnVsZUVycnM7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHZhbGlkYXRlU3luYygpIHtcbiAgICAgICAgY29uc3QgdmFsaWRhdGVFcnJzID0gKDAsIGNvZGVnZW5fMS5fKSBgJHt2YWxpZGF0ZVJlZn0uZXJyb3JzYDtcbiAgICAgICAgZ2VuLmFzc2lnbih2YWxpZGF0ZUVycnMsIG51bGwpO1xuICAgICAgICBhc3NpZ25WYWxpZChjb2RlZ2VuXzEubmlsKTtcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlRXJycztcbiAgICB9XG4gICAgZnVuY3Rpb24gYXNzaWduVmFsaWQoX2F3YWl0ID0gZGVmLmFzeW5jID8gKDAsIGNvZGVnZW5fMS5fKSBgYXdhaXQgYCA6IGNvZGVnZW5fMS5uaWwpIHtcbiAgICAgICAgY29uc3QgcGFzc0N4dCA9IGl0Lm9wdHMucGFzc0NvbnRleHQgPyBuYW1lc18xLmRlZmF1bHQudGhpcyA6IG5hbWVzXzEuZGVmYXVsdC5zZWxmO1xuICAgICAgICBjb25zdCBwYXNzU2NoZW1hID0gISgoXCJjb21waWxlXCIgaW4gZGVmICYmICEkZGF0YSkgfHwgZGVmLnNjaGVtYSA9PT0gZmFsc2UpO1xuICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCAoMCwgY29kZWdlbl8xLl8pIGAke19hd2FpdH0keygwLCBjb2RlXzEuY2FsbFZhbGlkYXRlQ29kZSkoY3h0LCB2YWxpZGF0ZVJlZiwgcGFzc0N4dCwgcGFzc1NjaGVtYSl9YCwgZGVmLm1vZGlmeWluZyk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlcG9ydEVycnMoZXJyb3JzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KSgoX2EgPSBkZWYudmFsaWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHZhbGlkKSwgZXJyb3JzKTtcbiAgICB9XG59XG5leHBvcnRzLmZ1bmNLZXl3b3JkQ29kZSA9IGZ1bmNLZXl3b3JkQ29kZTtcbmZ1bmN0aW9uIG1vZGlmeURhdGEoY3h0KSB7XG4gICAgY29uc3QgeyBnZW4sIGRhdGEsIGl0IH0gPSBjeHQ7XG4gICAgZ2VuLmlmKGl0LnBhcmVudERhdGEsICgpID0+IGdlbi5hc3NpZ24oZGF0YSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtpdC5wYXJlbnREYXRhfVske2l0LnBhcmVudERhdGFQcm9wZXJ0eX1dYCkpO1xufVxuZnVuY3Rpb24gYWRkRXJycyhjeHQsIGVycnMpIHtcbiAgICBjb25zdCB7IGdlbiB9ID0gY3h0O1xuICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGBBcnJheS5pc0FycmF5KCR7ZXJyc30pYCwgKCkgPT4ge1xuICAgICAgICBnZW5cbiAgICAgICAgICAgIC5hc3NpZ24obmFtZXNfMS5kZWZhdWx0LnZFcnJvcnMsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9ID09PSBudWxsID8gJHtlcnJzfSA6ICR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9LmNvbmNhdCgke2VycnN9KWApXG4gICAgICAgICAgICAuYXNzaWduKG5hbWVzXzEuZGVmYXVsdC5lcnJvcnMsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9Lmxlbmd0aGApO1xuICAgICAgICAoMCwgZXJyb3JzXzEuZXh0ZW5kRXJyb3JzKShjeHQpO1xuICAgIH0sICgpID0+IGN4dC5lcnJvcigpKTtcbn1cbmZ1bmN0aW9uIGNoZWNrQXN5bmNLZXl3b3JkKHsgc2NoZW1hRW52IH0sIGRlZikge1xuICAgIGlmIChkZWYuYXN5bmMgJiYgIXNjaGVtYUVudi4kYXN5bmMpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFzeW5jIGtleXdvcmQgaW4gc3luYyBzY2hlbWFcIik7XG59XG5mdW5jdGlvbiB1c2VLZXl3b3JkKGdlbiwga2V5d29yZCwgcmVzdWx0KSB7XG4gICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGtleXdvcmQgXCIke2tleXdvcmR9XCIgZmFpbGVkIHRvIGNvbXBpbGVgKTtcbiAgICByZXR1cm4gZ2VuLnNjb3BlVmFsdWUoXCJrZXl3b3JkXCIsIHR5cGVvZiByZXN1bHQgPT0gXCJmdW5jdGlvblwiID8geyByZWY6IHJlc3VsdCB9IDogeyByZWY6IHJlc3VsdCwgY29kZTogKDAsIGNvZGVnZW5fMS5zdHJpbmdpZnkpKHJlc3VsdCkgfSk7XG59XG5mdW5jdGlvbiB2YWxpZFNjaGVtYVR5cGUoc2NoZW1hLCBzY2hlbWFUeXBlLCBhbGxvd1VuZGVmaW5lZCA9IGZhbHNlKSB7XG4gICAgLy8gVE9ETyBhZGQgdGVzdHNcbiAgICByZXR1cm4gKCFzY2hlbWFUeXBlLmxlbmd0aCB8fFxuICAgICAgICBzY2hlbWFUeXBlLnNvbWUoKHN0KSA9PiBzdCA9PT0gXCJhcnJheVwiXG4gICAgICAgICAgICA/IEFycmF5LmlzQXJyYXkoc2NoZW1hKVxuICAgICAgICAgICAgOiBzdCA9PT0gXCJvYmplY3RcIlxuICAgICAgICAgICAgICAgID8gc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIiAmJiAhQXJyYXkuaXNBcnJheShzY2hlbWEpXG4gICAgICAgICAgICAgICAgOiB0eXBlb2Ygc2NoZW1hID09IHN0IHx8IChhbGxvd1VuZGVmaW5lZCAmJiB0eXBlb2Ygc2NoZW1hID09IFwidW5kZWZpbmVkXCIpKSk7XG59XG5leHBvcnRzLnZhbGlkU2NoZW1hVHlwZSA9IHZhbGlkU2NoZW1hVHlwZTtcbmZ1bmN0aW9uIHZhbGlkYXRlS2V5d29yZFVzYWdlKHsgc2NoZW1hLCBvcHRzLCBzZWxmLCBlcnJTY2hlbWFQYXRoIH0sIGRlZiwga2V5d29yZCkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChBcnJheS5pc0FycmF5KGRlZi5rZXl3b3JkKSA/ICFkZWYua2V5d29yZC5pbmNsdWRlcyhrZXl3b3JkKSA6IGRlZi5rZXl3b3JkICE9PSBrZXl3b3JkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFqdiBpbXBsZW1lbnRhdGlvbiBlcnJvclwiKTtcbiAgICB9XG4gICAgY29uc3QgZGVwcyA9IGRlZi5kZXBlbmRlbmNpZXM7XG4gICAgaWYgKGRlcHMgPT09IG51bGwgfHwgZGVwcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVwcy5zb21lKChrd2QpID0+ICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc2NoZW1hLCBrd2QpKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHBhcmVudCBzY2hlbWEgbXVzdCBoYXZlIGRlcGVuZGVuY2llcyBvZiAke2tleXdvcmR9OiAke2RlcHMuam9pbihcIixcIil9YCk7XG4gICAgfVxuICAgIGlmIChkZWYudmFsaWRhdGVTY2hlbWEpIHtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBkZWYudmFsaWRhdGVTY2hlbWEoc2NoZW1hW2tleXdvcmRdKTtcbiAgICAgICAgaWYgKCF2YWxpZCkge1xuICAgICAgICAgICAgY29uc3QgbXNnID0gYGtleXdvcmQgXCIke2tleXdvcmR9XCIgdmFsdWUgaXMgaW52YWxpZCBhdCBwYXRoIFwiJHtlcnJTY2hlbWFQYXRofVwiOiBgICtcbiAgICAgICAgICAgICAgICBzZWxmLmVycm9yc1RleHQoZGVmLnZhbGlkYXRlU2NoZW1hLmVycm9ycyk7XG4gICAgICAgICAgICBpZiAob3B0cy52YWxpZGF0ZVNjaGVtYSA9PT0gXCJsb2dcIilcbiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihtc2cpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy52YWxpZGF0ZUtleXdvcmRVc2FnZSA9IHZhbGlkYXRlS2V5d29yZFVzYWdlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9a2V5d29yZC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZXh0ZW5kU3Vic2NoZW1hTW9kZSA9IGV4cG9ydHMuZXh0ZW5kU3Vic2NoZW1hRGF0YSA9IGV4cG9ydHMuZ2V0U3Vic2NoZW1hID0gdm9pZCAwO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vdXRpbFwiKTtcbmZ1bmN0aW9uIGdldFN1YnNjaGVtYShpdCwgeyBrZXl3b3JkLCBzY2hlbWFQcm9wLCBzY2hlbWEsIHNjaGVtYVBhdGgsIGVyclNjaGVtYVBhdGgsIHRvcFNjaGVtYVJlZiB9KSB7XG4gICAgaWYgKGtleXdvcmQgIT09IHVuZGVmaW5lZCAmJiBzY2hlbWEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2JvdGggXCJrZXl3b3JkXCIgYW5kIFwic2NoZW1hXCIgcGFzc2VkLCBvbmx5IG9uZSBhbGxvd2VkJyk7XG4gICAgfVxuICAgIGlmIChrZXl3b3JkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3Qgc2NoID0gaXQuc2NoZW1hW2tleXdvcmRdO1xuICAgICAgICByZXR1cm4gc2NoZW1hUHJvcCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICBzY2hlbWE6IHNjaCxcbiAgICAgICAgICAgICAgICBzY2hlbWFQYXRoOiAoMCwgY29kZWdlbl8xLl8pIGAke2l0LnNjaGVtYVBhdGh9JHsoMCwgY29kZWdlbl8xLmdldFByb3BlcnR5KShrZXl3b3JkKX1gLFxuICAgICAgICAgICAgICAgIGVyclNjaGVtYVBhdGg6IGAke2l0LmVyclNjaGVtYVBhdGh9LyR7a2V5d29yZH1gLFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgc2NoZW1hOiBzY2hbc2NoZW1hUHJvcF0sXG4gICAgICAgICAgICAgICAgc2NoZW1hUGF0aDogKDAsIGNvZGVnZW5fMS5fKSBgJHtpdC5zY2hlbWFQYXRofSR7KDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkoa2V5d29yZCl9JHsoMCwgY29kZWdlbl8xLmdldFByb3BlcnR5KShzY2hlbWFQcm9wKX1gLFxuICAgICAgICAgICAgICAgIGVyclNjaGVtYVBhdGg6IGAke2l0LmVyclNjaGVtYVBhdGh9LyR7a2V5d29yZH0vJHsoMCwgdXRpbF8xLmVzY2FwZUZyYWdtZW50KShzY2hlbWFQcm9wKX1gLFxuICAgICAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmIChzY2hlbWFQYXRoID09PSB1bmRlZmluZWQgfHwgZXJyU2NoZW1hUGF0aCA9PT0gdW5kZWZpbmVkIHx8IHRvcFNjaGVtYVJlZiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wic2NoZW1hUGF0aFwiLCBcImVyclNjaGVtYVBhdGhcIiBhbmQgXCJ0b3BTY2hlbWFSZWZcIiBhcmUgcmVxdWlyZWQgd2l0aCBcInNjaGVtYVwiJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHNjaGVtYSxcbiAgICAgICAgICAgIHNjaGVtYVBhdGgsXG4gICAgICAgICAgICB0b3BTY2hlbWFSZWYsXG4gICAgICAgICAgICBlcnJTY2hlbWFQYXRoLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2VpdGhlciBcImtleXdvcmRcIiBvciBcInNjaGVtYVwiIG11c3QgYmUgcGFzc2VkJyk7XG59XG5leHBvcnRzLmdldFN1YnNjaGVtYSA9IGdldFN1YnNjaGVtYTtcbmZ1bmN0aW9uIGV4dGVuZFN1YnNjaGVtYURhdGEoc3Vic2NoZW1hLCBpdCwgeyBkYXRhUHJvcCwgZGF0YVByb3BUeXBlOiBkcFR5cGUsIGRhdGEsIGRhdGFUeXBlcywgcHJvcGVydHlOYW1lIH0pIHtcbiAgICBpZiAoZGF0YSAhPT0gdW5kZWZpbmVkICYmIGRhdGFQcm9wICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdib3RoIFwiZGF0YVwiIGFuZCBcImRhdGFQcm9wXCIgcGFzc2VkLCBvbmx5IG9uZSBhbGxvd2VkJyk7XG4gICAgfVxuICAgIGNvbnN0IHsgZ2VuIH0gPSBpdDtcbiAgICBpZiAoZGF0YVByb3AgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCB7IGVycm9yUGF0aCwgZGF0YVBhdGhBcnIsIG9wdHMgfSA9IGl0O1xuICAgICAgICBjb25zdCBuZXh0RGF0YSA9IGdlbi5sZXQoXCJkYXRhXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7aXQuZGF0YX0keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKGRhdGFQcm9wKX1gLCB0cnVlKTtcbiAgICAgICAgZGF0YUNvbnRleHRQcm9wcyhuZXh0RGF0YSk7XG4gICAgICAgIHN1YnNjaGVtYS5lcnJvclBhdGggPSAoMCwgY29kZWdlbl8xLnN0cikgYCR7ZXJyb3JQYXRofSR7KDAsIHV0aWxfMS5nZXRFcnJvclBhdGgpKGRhdGFQcm9wLCBkcFR5cGUsIG9wdHMuanNQcm9wZXJ0eVN5bnRheCl9YDtcbiAgICAgICAgc3Vic2NoZW1hLnBhcmVudERhdGFQcm9wZXJ0eSA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YVByb3B9YDtcbiAgICAgICAgc3Vic2NoZW1hLmRhdGFQYXRoQXJyID0gWy4uLmRhdGFQYXRoQXJyLCBzdWJzY2hlbWEucGFyZW50RGF0YVByb3BlcnR5XTtcbiAgICB9XG4gICAgaWYgKGRhdGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBuZXh0RGF0YSA9IGRhdGEgaW5zdGFuY2VvZiBjb2RlZ2VuXzEuTmFtZSA/IGRhdGEgOiBnZW4ubGV0KFwiZGF0YVwiLCBkYXRhLCB0cnVlKTsgLy8gcmVwbGFjZWFibGUgaWYgdXNlZCBvbmNlP1xuICAgICAgICBkYXRhQ29udGV4dFByb3BzKG5leHREYXRhKTtcbiAgICAgICAgaWYgKHByb3BlcnR5TmFtZSAhPT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgc3Vic2NoZW1hLnByb3BlcnR5TmFtZSA9IHByb3BlcnR5TmFtZTtcbiAgICAgICAgLy8gVE9ETyBzb21ldGhpbmcgaXMgcG9zc2libHkgd3JvbmcgaGVyZSB3aXRoIG5vdCBjaGFuZ2luZyBwYXJlbnREYXRhUHJvcGVydHkgYW5kIG5vdCBhcHBlbmRpbmcgZGF0YVBhdGhBcnJcbiAgICB9XG4gICAgaWYgKGRhdGFUeXBlcylcbiAgICAgICAgc3Vic2NoZW1hLmRhdGFUeXBlcyA9IGRhdGFUeXBlcztcbiAgICBmdW5jdGlvbiBkYXRhQ29udGV4dFByb3BzKF9uZXh0RGF0YSkge1xuICAgICAgICBzdWJzY2hlbWEuZGF0YSA9IF9uZXh0RGF0YTtcbiAgICAgICAgc3Vic2NoZW1hLmRhdGFMZXZlbCA9IGl0LmRhdGFMZXZlbCArIDE7XG4gICAgICAgIHN1YnNjaGVtYS5kYXRhVHlwZXMgPSBbXTtcbiAgICAgICAgaXQuZGVmaW5lZFByb3BlcnRpZXMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHN1YnNjaGVtYS5wYXJlbnREYXRhID0gaXQuZGF0YTtcbiAgICAgICAgc3Vic2NoZW1hLmRhdGFOYW1lcyA9IFsuLi5pdC5kYXRhTmFtZXMsIF9uZXh0RGF0YV07XG4gICAgfVxufVxuZXhwb3J0cy5leHRlbmRTdWJzY2hlbWFEYXRhID0gZXh0ZW5kU3Vic2NoZW1hRGF0YTtcbmZ1bmN0aW9uIGV4dGVuZFN1YnNjaGVtYU1vZGUoc3Vic2NoZW1hLCB7IGp0ZERpc2NyaW1pbmF0b3IsIGp0ZE1ldGFkYXRhLCBjb21wb3NpdGVSdWxlLCBjcmVhdGVFcnJvcnMsIGFsbEVycm9ycyB9KSB7XG4gICAgaWYgKGNvbXBvc2l0ZVJ1bGUgIT09IHVuZGVmaW5lZClcbiAgICAgICAgc3Vic2NoZW1hLmNvbXBvc2l0ZVJ1bGUgPSBjb21wb3NpdGVSdWxlO1xuICAgIGlmIChjcmVhdGVFcnJvcnMgIT09IHVuZGVmaW5lZClcbiAgICAgICAgc3Vic2NoZW1hLmNyZWF0ZUVycm9ycyA9IGNyZWF0ZUVycm9ycztcbiAgICBpZiAoYWxsRXJyb3JzICE9PSB1bmRlZmluZWQpXG4gICAgICAgIHN1YnNjaGVtYS5hbGxFcnJvcnMgPSBhbGxFcnJvcnM7XG4gICAgc3Vic2NoZW1hLmp0ZERpc2NyaW1pbmF0b3IgPSBqdGREaXNjcmltaW5hdG9yOyAvLyBub3QgaW5oZXJpdGVkXG4gICAgc3Vic2NoZW1hLmp0ZE1ldGFkYXRhID0ganRkTWV0YWRhdGE7IC8vIG5vdCBpbmhlcml0ZWRcbn1cbmV4cG9ydHMuZXh0ZW5kU3Vic2NoZW1hTW9kZSA9IGV4dGVuZFN1YnNjaGVtYU1vZGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdWJzY2hlbWEuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBkbyBub3QgZWRpdCAuanMgZmlsZXMgZGlyZWN0bHkgLSBlZGl0IHNyYy9pbmRleC5qc3RcblxuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgJiYgYiAmJiB0eXBlb2YgYSA9PSAnb2JqZWN0JyAmJiB0eXBlb2YgYiA9PSAnb2JqZWN0Jykge1xuICAgIGlmIChhLmNvbnN0cnVjdG9yICE9PSBiLmNvbnN0cnVjdG9yKSByZXR1cm4gZmFsc2U7XG5cbiAgICB2YXIgbGVuZ3RoLCBpLCBrZXlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgICBsZW5ndGggPSBhLmxlbmd0aDtcbiAgICAgIGlmIChsZW5ndGggIT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgICAgaWYgKCFlcXVhbChhW2ldLCBiW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG5cblxuICAgIGlmIChhLmNvbnN0cnVjdG9yID09PSBSZWdFeHApIHJldHVybiBhLnNvdXJjZSA9PT0gYi5zb3VyY2UgJiYgYS5mbGFncyA9PT0gYi5mbGFncztcbiAgICBpZiAoYS52YWx1ZU9mICE9PSBPYmplY3QucHJvdG90eXBlLnZhbHVlT2YpIHJldHVybiBhLnZhbHVlT2YoKSA9PT0gYi52YWx1ZU9mKCk7XG4gICAgaWYgKGEudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcpIHJldHVybiBhLnRvU3RyaW5nKCkgPT09IGIudG9TdHJpbmcoKTtcblxuICAgIGtleXMgPSBPYmplY3Qua2V5cyhhKTtcbiAgICBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICBpZiAobGVuZ3RoICE9PSBPYmplY3Qua2V5cyhiKS5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIGZvciAoaSA9IGxlbmd0aDsgaS0tICE9PSAwOylcbiAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGtleXNbaV0pKSByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIWVxdWFsKGFba2V5XSwgYltrZXldKSkgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLy8gdHJ1ZSBpZiBib3RoIE5hTiwgZmFsc2Ugb3RoZXJ3aXNlXG4gIHJldHVybiBhIT09YSAmJiBiIT09Yjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0cmF2ZXJzZSA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHNjaGVtYSwgb3B0cywgY2IpIHtcbiAgLy8gTGVnYWN5IHN1cHBvcnQgZm9yIHYwLjMuMSBhbmQgZWFybGllci5cbiAgaWYgKHR5cGVvZiBvcHRzID09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IG9wdHM7XG4gICAgb3B0cyA9IHt9O1xuICB9XG5cbiAgY2IgPSBvcHRzLmNiIHx8IGNiO1xuICB2YXIgcHJlID0gKHR5cGVvZiBjYiA9PSAnZnVuY3Rpb24nKSA/IGNiIDogY2IucHJlIHx8IGZ1bmN0aW9uKCkge307XG4gIHZhciBwb3N0ID0gY2IucG9zdCB8fCBmdW5jdGlvbigpIHt9O1xuXG4gIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaGVtYSwgJycsIHNjaGVtYSk7XG59O1xuXG5cbnRyYXZlcnNlLmtleXdvcmRzID0ge1xuICBhZGRpdGlvbmFsSXRlbXM6IHRydWUsXG4gIGl0ZW1zOiB0cnVlLFxuICBjb250YWluczogdHJ1ZSxcbiAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHRydWUsXG4gIHByb3BlcnR5TmFtZXM6IHRydWUsXG4gIG5vdDogdHJ1ZSxcbiAgaWY6IHRydWUsXG4gIHRoZW46IHRydWUsXG4gIGVsc2U6IHRydWVcbn07XG5cbnRyYXZlcnNlLmFycmF5S2V5d29yZHMgPSB7XG4gIGl0ZW1zOiB0cnVlLFxuICBhbGxPZjogdHJ1ZSxcbiAgYW55T2Y6IHRydWUsXG4gIG9uZU9mOiB0cnVlXG59O1xuXG50cmF2ZXJzZS5wcm9wc0tleXdvcmRzID0ge1xuICAkZGVmczogdHJ1ZSxcbiAgZGVmaW5pdGlvbnM6IHRydWUsXG4gIHByb3BlcnRpZXM6IHRydWUsXG4gIHBhdHRlcm5Qcm9wZXJ0aWVzOiB0cnVlLFxuICBkZXBlbmRlbmNpZXM6IHRydWVcbn07XG5cbnRyYXZlcnNlLnNraXBLZXl3b3JkcyA9IHtcbiAgZGVmYXVsdDogdHJ1ZSxcbiAgZW51bTogdHJ1ZSxcbiAgY29uc3Q6IHRydWUsXG4gIHJlcXVpcmVkOiB0cnVlLFxuICBtYXhpbXVtOiB0cnVlLFxuICBtaW5pbXVtOiB0cnVlLFxuICBleGNsdXNpdmVNYXhpbXVtOiB0cnVlLFxuICBleGNsdXNpdmVNaW5pbXVtOiB0cnVlLFxuICBtdWx0aXBsZU9mOiB0cnVlLFxuICBtYXhMZW5ndGg6IHRydWUsXG4gIG1pbkxlbmd0aDogdHJ1ZSxcbiAgcGF0dGVybjogdHJ1ZSxcbiAgZm9ybWF0OiB0cnVlLFxuICBtYXhJdGVtczogdHJ1ZSxcbiAgbWluSXRlbXM6IHRydWUsXG4gIHVuaXF1ZUl0ZW1zOiB0cnVlLFxuICBtYXhQcm9wZXJ0aWVzOiB0cnVlLFxuICBtaW5Qcm9wZXJ0aWVzOiB0cnVlXG59O1xuXG5cbmZ1bmN0aW9uIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaGVtYSwganNvblB0ciwgcm9vdFNjaGVtYSwgcGFyZW50SnNvblB0ciwgcGFyZW50S2V5d29yZCwgcGFyZW50U2NoZW1hLCBrZXlJbmRleCkge1xuICBpZiAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkoc2NoZW1hKSkge1xuICAgIHByZShzY2hlbWEsIGpzb25QdHIsIHJvb3RTY2hlbWEsIHBhcmVudEpzb25QdHIsIHBhcmVudEtleXdvcmQsIHBhcmVudFNjaGVtYSwga2V5SW5kZXgpO1xuICAgIGZvciAodmFyIGtleSBpbiBzY2hlbWEpIHtcbiAgICAgIHZhciBzY2ggPSBzY2hlbWFba2V5XTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaCkpIHtcbiAgICAgICAgaWYgKGtleSBpbiB0cmF2ZXJzZS5hcnJheUtleXdvcmRzKSB7XG4gICAgICAgICAgZm9yICh2YXIgaT0wOyBpPHNjaC5sZW5ndGg7IGkrKylcbiAgICAgICAgICAgIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaFtpXSwganNvblB0ciArICcvJyArIGtleSArICcvJyArIGksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hLCBpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgaW4gdHJhdmVyc2UucHJvcHNLZXl3b3Jkcykge1xuICAgICAgICBpZiAoc2NoICYmIHR5cGVvZiBzY2ggPT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNjaClcbiAgICAgICAgICAgIF90cmF2ZXJzZShvcHRzLCBwcmUsIHBvc3QsIHNjaFtwcm9wXSwganNvblB0ciArICcvJyArIGtleSArICcvJyArIGVzY2FwZUpzb25QdHIocHJvcCksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hLCBwcm9wKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgaW4gdHJhdmVyc2Uua2V5d29yZHMgfHwgKG9wdHMuYWxsS2V5cyAmJiAhKGtleSBpbiB0cmF2ZXJzZS5za2lwS2V5d29yZHMpKSkge1xuICAgICAgICBfdHJhdmVyc2Uob3B0cywgcHJlLCBwb3N0LCBzY2gsIGpzb25QdHIgKyAnLycgKyBrZXksIHJvb3RTY2hlbWEsIGpzb25QdHIsIGtleSwgc2NoZW1hKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcG9zdChzY2hlbWEsIGpzb25QdHIsIHJvb3RTY2hlbWEsIHBhcmVudEpzb25QdHIsIHBhcmVudEtleXdvcmQsIHBhcmVudFNjaGVtYSwga2V5SW5kZXgpO1xuICB9XG59XG5cblxuZnVuY3Rpb24gZXNjYXBlSnNvblB0cihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9+L2csICd+MCcpLnJlcGxhY2UoL1xcLy9nLCAnfjEnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRTY2hlbWFSZWZzID0gZXhwb3J0cy5yZXNvbHZlVXJsID0gZXhwb3J0cy5ub3JtYWxpemVJZCA9IGV4cG9ydHMuX2dldEZ1bGxQYXRoID0gZXhwb3J0cy5nZXRGdWxsUGF0aCA9IGV4cG9ydHMuaW5saW5lUmVmID0gdm9pZCAwO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4vdXRpbFwiKTtcbmNvbnN0IGVxdWFsID0gcmVxdWlyZShcImZhc3QtZGVlcC1lcXVhbFwiKTtcbmNvbnN0IHRyYXZlcnNlID0gcmVxdWlyZShcImpzb24tc2NoZW1hLXRyYXZlcnNlXCIpO1xuLy8gVE9ETyByZWZhY3RvciB0byB1c2Uga2V5d29yZCBkZWZpbml0aW9uc1xuY29uc3QgU0lNUExFX0lOTElORUQgPSBuZXcgU2V0KFtcbiAgICBcInR5cGVcIixcbiAgICBcImZvcm1hdFwiLFxuICAgIFwicGF0dGVyblwiLFxuICAgIFwibWF4TGVuZ3RoXCIsXG4gICAgXCJtaW5MZW5ndGhcIixcbiAgICBcIm1heFByb3BlcnRpZXNcIixcbiAgICBcIm1pblByb3BlcnRpZXNcIixcbiAgICBcIm1heEl0ZW1zXCIsXG4gICAgXCJtaW5JdGVtc1wiLFxuICAgIFwibWF4aW11bVwiLFxuICAgIFwibWluaW11bVwiLFxuICAgIFwidW5pcXVlSXRlbXNcIixcbiAgICBcIm11bHRpcGxlT2ZcIixcbiAgICBcInJlcXVpcmVkXCIsXG4gICAgXCJlbnVtXCIsXG4gICAgXCJjb25zdFwiLFxuXSk7XG5mdW5jdGlvbiBpbmxpbmVSZWYoc2NoZW1hLCBsaW1pdCA9IHRydWUpIHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSBcImJvb2xlYW5cIilcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgaWYgKGxpbWl0ID09PSB0cnVlKVxuICAgICAgICByZXR1cm4gIWhhc1JlZihzY2hlbWEpO1xuICAgIGlmICghbGltaXQpXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gY291bnRLZXlzKHNjaGVtYSkgPD0gbGltaXQ7XG59XG5leHBvcnRzLmlubGluZVJlZiA9IGlubGluZVJlZjtcbmNvbnN0IFJFRl9LRVlXT1JEUyA9IG5ldyBTZXQoW1xuICAgIFwiJHJlZlwiLFxuICAgIFwiJHJlY3Vyc2l2ZVJlZlwiLFxuICAgIFwiJHJlY3Vyc2l2ZUFuY2hvclwiLFxuICAgIFwiJGR5bmFtaWNSZWZcIixcbiAgICBcIiRkeW5hbWljQW5jaG9yXCIsXG5dKTtcbmZ1bmN0aW9uIGhhc1JlZihzY2hlbWEpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzY2hlbWEpIHtcbiAgICAgICAgaWYgKFJFRl9LRVlXT1JEUy5oYXMoa2V5KSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICBjb25zdCBzY2ggPSBzY2hlbWFba2V5XTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2NoKSAmJiBzY2guc29tZShoYXNSZWYpKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoID09IFwib2JqZWN0XCIgJiYgaGFzUmVmKHNjaCkpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gY291bnRLZXlzKHNjaGVtYSkge1xuICAgIGxldCBjb3VudCA9IDA7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hKSB7XG4gICAgICAgIGlmIChrZXkgPT09IFwiJHJlZlwiKVxuICAgICAgICAgICAgcmV0dXJuIEluZmluaXR5O1xuICAgICAgICBjb3VudCsrO1xuICAgICAgICBpZiAoU0lNUExFX0lOTElORUQuaGFzKGtleSkpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWFba2V5XSA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLmVhY2hJdGVtKShzY2hlbWFba2V5XSwgKHNjaCkgPT4gKGNvdW50ICs9IGNvdW50S2V5cyhzY2gpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvdW50ID09PSBJbmZpbml0eSlcbiAgICAgICAgICAgIHJldHVybiBJbmZpbml0eTtcbiAgICB9XG4gICAgcmV0dXJuIGNvdW50O1xufVxuZnVuY3Rpb24gZ2V0RnVsbFBhdGgocmVzb2x2ZXIsIGlkID0gXCJcIiwgbm9ybWFsaXplKSB7XG4gICAgaWYgKG5vcm1hbGl6ZSAhPT0gZmFsc2UpXG4gICAgICAgIGlkID0gbm9ybWFsaXplSWQoaWQpO1xuICAgIGNvbnN0IHAgPSByZXNvbHZlci5wYXJzZShpZCk7XG4gICAgcmV0dXJuIF9nZXRGdWxsUGF0aChyZXNvbHZlciwgcCk7XG59XG5leHBvcnRzLmdldEZ1bGxQYXRoID0gZ2V0RnVsbFBhdGg7XG5mdW5jdGlvbiBfZ2V0RnVsbFBhdGgocmVzb2x2ZXIsIHApIHtcbiAgICBjb25zdCBzZXJpYWxpemVkID0gcmVzb2x2ZXIuc2VyaWFsaXplKHApO1xuICAgIHJldHVybiBzZXJpYWxpemVkLnNwbGl0KFwiI1wiKVswXSArIFwiI1wiO1xufVxuZXhwb3J0cy5fZ2V0RnVsbFBhdGggPSBfZ2V0RnVsbFBhdGg7XG5jb25zdCBUUkFJTElOR19TTEFTSF9IQVNIID0gLyNcXC8/JC87XG5mdW5jdGlvbiBub3JtYWxpemVJZChpZCkge1xuICAgIHJldHVybiBpZCA/IGlkLnJlcGxhY2UoVFJBSUxJTkdfU0xBU0hfSEFTSCwgXCJcIikgOiBcIlwiO1xufVxuZXhwb3J0cy5ub3JtYWxpemVJZCA9IG5vcm1hbGl6ZUlkO1xuZnVuY3Rpb24gcmVzb2x2ZVVybChyZXNvbHZlciwgYmFzZUlkLCBpZCkge1xuICAgIGlkID0gbm9ybWFsaXplSWQoaWQpO1xuICAgIHJldHVybiByZXNvbHZlci5yZXNvbHZlKGJhc2VJZCwgaWQpO1xufVxuZXhwb3J0cy5yZXNvbHZlVXJsID0gcmVzb2x2ZVVybDtcbmNvbnN0IEFOQ0hPUiA9IC9eW2Etel9dWy1hLXowLTkuX10qJC9pO1xuZnVuY3Rpb24gZ2V0U2NoZW1hUmVmcyhzY2hlbWEsIGJhc2VJZCkge1xuICAgIGlmICh0eXBlb2Ygc2NoZW1hID09IFwiYm9vbGVhblwiKVxuICAgICAgICByZXR1cm4ge307XG4gICAgY29uc3QgeyBzY2hlbWFJZCwgdXJpUmVzb2x2ZXIgfSA9IHRoaXMub3B0cztcbiAgICBjb25zdCBzY2hJZCA9IG5vcm1hbGl6ZUlkKHNjaGVtYVtzY2hlbWFJZF0gfHwgYmFzZUlkKTtcbiAgICBjb25zdCBiYXNlSWRzID0geyBcIlwiOiBzY2hJZCB9O1xuICAgIGNvbnN0IHBhdGhQcmVmaXggPSBnZXRGdWxsUGF0aCh1cmlSZXNvbHZlciwgc2NoSWQsIGZhbHNlKTtcbiAgICBjb25zdCBsb2NhbFJlZnMgPSB7fTtcbiAgICBjb25zdCBzY2hlbWFSZWZzID0gbmV3IFNldCgpO1xuICAgIHRyYXZlcnNlKHNjaGVtYSwgeyBhbGxLZXlzOiB0cnVlIH0sIChzY2gsIGpzb25QdHIsIF8sIHBhcmVudEpzb25QdHIpID0+IHtcbiAgICAgICAgaWYgKHBhcmVudEpzb25QdHIgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgZnVsbFBhdGggPSBwYXRoUHJlZml4ICsganNvblB0cjtcbiAgICAgICAgbGV0IGlubmVyQmFzZUlkID0gYmFzZUlkc1twYXJlbnRKc29uUHRyXTtcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hbc2NoZW1hSWRdID09IFwic3RyaW5nXCIpXG4gICAgICAgICAgICBpbm5lckJhc2VJZCA9IGFkZFJlZi5jYWxsKHRoaXMsIHNjaFtzY2hlbWFJZF0pO1xuICAgICAgICBhZGRBbmNob3IuY2FsbCh0aGlzLCBzY2guJGFuY2hvcik7XG4gICAgICAgIGFkZEFuY2hvci5jYWxsKHRoaXMsIHNjaC4kZHluYW1pY0FuY2hvcik7XG4gICAgICAgIGJhc2VJZHNbanNvblB0cl0gPSBpbm5lckJhc2VJZDtcbiAgICAgICAgZnVuY3Rpb24gYWRkUmVmKHJlZikge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC91bmJvdW5kLW1ldGhvZFxuICAgICAgICAgICAgY29uc3QgX3Jlc29sdmUgPSB0aGlzLm9wdHMudXJpUmVzb2x2ZXIucmVzb2x2ZTtcbiAgICAgICAgICAgIHJlZiA9IG5vcm1hbGl6ZUlkKGlubmVyQmFzZUlkID8gX3Jlc29sdmUoaW5uZXJCYXNlSWQsIHJlZikgOiByZWYpO1xuICAgICAgICAgICAgaWYgKHNjaGVtYVJlZnMuaGFzKHJlZikpXG4gICAgICAgICAgICAgICAgdGhyb3cgYW1iaWd1b3MocmVmKTtcbiAgICAgICAgICAgIHNjaGVtYVJlZnMuYWRkKHJlZik7XG4gICAgICAgICAgICBsZXQgc2NoT3JSZWYgPSB0aGlzLnJlZnNbcmVmXTtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoT3JSZWYgPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgICAgICBzY2hPclJlZiA9IHRoaXMucmVmc1tzY2hPclJlZl07XG4gICAgICAgICAgICBpZiAodHlwZW9mIHNjaE9yUmVmID09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICBjaGVja0FtYmlndW9zUmVmKHNjaCwgc2NoT3JSZWYuc2NoZW1hLCByZWYpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVmICE9PSBub3JtYWxpemVJZChmdWxsUGF0aCkpIHtcbiAgICAgICAgICAgICAgICBpZiAocmVmWzBdID09PSBcIiNcIikge1xuICAgICAgICAgICAgICAgICAgICBjaGVja0FtYmlndW9zUmVmKHNjaCwgbG9jYWxSZWZzW3JlZl0sIHJlZik7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsUmVmc1tyZWZdID0gc2NoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWZzW3JlZl0gPSBmdWxsUGF0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVmO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFkZEFuY2hvcihhbmNob3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYW5jaG9yID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFOQ0hPUi50ZXN0KGFuY2hvcikpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBhbmNob3IgXCIke2FuY2hvcn1cImApO1xuICAgICAgICAgICAgICAgIGFkZFJlZi5jYWxsKHRoaXMsIGAjJHthbmNob3J9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbG9jYWxSZWZzO1xuICAgIGZ1bmN0aW9uIGNoZWNrQW1iaWd1b3NSZWYoc2NoMSwgc2NoMiwgcmVmKSB7XG4gICAgICAgIGlmIChzY2gyICE9PSB1bmRlZmluZWQgJiYgIWVxdWFsKHNjaDEsIHNjaDIpKVxuICAgICAgICAgICAgdGhyb3cgYW1iaWd1b3MocmVmKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYW1iaWd1b3MocmVmKSB7XG4gICAgICAgIHJldHVybiBuZXcgRXJyb3IoYHJlZmVyZW5jZSBcIiR7cmVmfVwiIHJlc29sdmVzIHRvIG1vcmUgdGhhbiBvbmUgc2NoZW1hYCk7XG4gICAgfVxufVxuZXhwb3J0cy5nZXRTY2hlbWFSZWZzID0gZ2V0U2NoZW1hUmVmcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldERhdGEgPSBleHBvcnRzLktleXdvcmRDeHQgPSBleHBvcnRzLnZhbGlkYXRlRnVuY3Rpb25Db2RlID0gdm9pZCAwO1xuY29uc3QgYm9vbFNjaGVtYV8xID0gcmVxdWlyZShcIi4vYm9vbFNjaGVtYVwiKTtcbmNvbnN0IGRhdGFUeXBlXzEgPSByZXF1aXJlKFwiLi9kYXRhVHlwZVwiKTtcbmNvbnN0IGFwcGxpY2FiaWxpdHlfMSA9IHJlcXVpcmUoXCIuL2FwcGxpY2FiaWxpdHlcIik7XG5jb25zdCBkYXRhVHlwZV8yID0gcmVxdWlyZShcIi4vZGF0YVR5cGVcIik7XG5jb25zdCBkZWZhdWx0c18xID0gcmVxdWlyZShcIi4vZGVmYXVsdHNcIik7XG5jb25zdCBrZXl3b3JkXzEgPSByZXF1aXJlKFwiLi9rZXl3b3JkXCIpO1xuY29uc3Qgc3Vic2NoZW1hXzEgPSByZXF1aXJlKFwiLi9zdWJzY2hlbWFcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vY29kZWdlblwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi4vbmFtZXNcIik7XG5jb25zdCByZXNvbHZlXzEgPSByZXF1aXJlKFwiLi4vcmVzb2x2ZVwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiLi4vZXJyb3JzXCIpO1xuLy8gc2NoZW1hIGNvbXBpbGF0aW9uIC0gZ2VuZXJhdGVzIHZhbGlkYXRpb24gZnVuY3Rpb24sIHN1YnNjaGVtYUNvZGUgKGJlbG93KSBpcyB1c2VkIGZvciBzdWJzY2hlbWFzXG5mdW5jdGlvbiB2YWxpZGF0ZUZ1bmN0aW9uQ29kZShpdCkge1xuICAgIGlmIChpc1NjaGVtYU9iaihpdCkpIHtcbiAgICAgICAgY2hlY2tLZXl3b3JkcyhpdCk7XG4gICAgICAgIGlmIChzY2hlbWFDeHRIYXNSdWxlcyhpdCkpIHtcbiAgICAgICAgICAgIHRvcFNjaGVtYU9iakNvZGUoaXQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhbGlkYXRlRnVuY3Rpb24oaXQsICgpID0+ICgwLCBib29sU2NoZW1hXzEudG9wQm9vbE9yRW1wdHlTY2hlbWEpKGl0KSk7XG59XG5leHBvcnRzLnZhbGlkYXRlRnVuY3Rpb25Db2RlID0gdmFsaWRhdGVGdW5jdGlvbkNvZGU7XG5mdW5jdGlvbiB2YWxpZGF0ZUZ1bmN0aW9uKHsgZ2VuLCB2YWxpZGF0ZU5hbWUsIHNjaGVtYSwgc2NoZW1hRW52LCBvcHRzIH0sIGJvZHkpIHtcbiAgICBpZiAob3B0cy5jb2RlLmVzNSkge1xuICAgICAgICBnZW4uZnVuYyh2YWxpZGF0ZU5hbWUsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LmRhdGF9LCAke25hbWVzXzEuZGVmYXVsdC52YWxDeHR9YCwgc2NoZW1hRW52LiRhc3luYywgKCkgPT4ge1xuICAgICAgICAgICAgZ2VuLmNvZGUoKDAsIGNvZGVnZW5fMS5fKSBgXCJ1c2Ugc3RyaWN0XCI7ICR7ZnVuY1NvdXJjZVVybChzY2hlbWEsIG9wdHMpfWApO1xuICAgICAgICAgICAgZGVzdHJ1Y3R1cmVWYWxDeHRFUzUoZ2VuLCBvcHRzKTtcbiAgICAgICAgICAgIGdlbi5jb2RlKGJvZHkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdlbi5mdW5jKHZhbGlkYXRlTmFtZSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQuZGF0YX0sICR7ZGVzdHJ1Y3R1cmVWYWxDeHQob3B0cyl9YCwgc2NoZW1hRW52LiRhc3luYywgKCkgPT4gZ2VuLmNvZGUoZnVuY1NvdXJjZVVybChzY2hlbWEsIG9wdHMpKS5jb2RlKGJvZHkpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBkZXN0cnVjdHVyZVZhbEN4dChvcHRzKSB7XG4gICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYHske25hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGh9PVwiXCIsICR7bmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGF9LCAke25hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhUHJvcGVydHl9LCAke25hbWVzXzEuZGVmYXVsdC5yb290RGF0YX09JHtuYW1lc18xLmRlZmF1bHQuZGF0YX0ke29wdHMuZHluYW1pY1JlZiA/ICgwLCBjb2RlZ2VuXzEuXykgYCwgJHtuYW1lc18xLmRlZmF1bHQuZHluYW1pY0FuY2hvcnN9PXt9YCA6IGNvZGVnZW5fMS5uaWx9fT17fWA7XG59XG5mdW5jdGlvbiBkZXN0cnVjdHVyZVZhbEN4dEVTNShnZW4sIG9wdHMpIHtcbiAgICBnZW4uaWYobmFtZXNfMS5kZWZhdWx0LnZhbEN4dCwgKCkgPT4ge1xuICAgICAgICBnZW4udmFyKG5hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGgsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZhbEN4dH0uJHtuYW1lc18xLmRlZmF1bHQuaW5zdGFuY2VQYXRofWApO1xuICAgICAgICBnZW4udmFyKG5hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52YWxDeHR9LiR7bmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGF9YCk7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGFQcm9wZXJ0eSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQudmFsQ3h0fS4ke25hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhUHJvcGVydHl9YCk7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0LnJvb3REYXRhLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52YWxDeHR9LiR7bmFtZXNfMS5kZWZhdWx0LnJvb3REYXRhfWApO1xuICAgICAgICBpZiAob3B0cy5keW5hbWljUmVmKVxuICAgICAgICAgICAgZ2VuLnZhcihuYW1lc18xLmRlZmF1bHQuZHluYW1pY0FuY2hvcnMsICgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnZhbEN4dH0uJHtuYW1lc18xLmRlZmF1bHQuZHluYW1pY0FuY2hvcnN9YCk7XG4gICAgfSwgKCkgPT4ge1xuICAgICAgICBnZW4udmFyKG5hbWVzXzEuZGVmYXVsdC5pbnN0YW5jZVBhdGgsICgwLCBjb2RlZ2VuXzEuXykgYFwiXCJgKTtcbiAgICAgICAgZ2VuLnZhcihuYW1lc18xLmRlZmF1bHQucGFyZW50RGF0YSwgKDAsIGNvZGVnZW5fMS5fKSBgdW5kZWZpbmVkYCk7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0LnBhcmVudERhdGFQcm9wZXJ0eSwgKDAsIGNvZGVnZW5fMS5fKSBgdW5kZWZpbmVkYCk7XG4gICAgICAgIGdlbi52YXIobmFtZXNfMS5kZWZhdWx0LnJvb3REYXRhLCBuYW1lc18xLmRlZmF1bHQuZGF0YSk7XG4gICAgICAgIGlmIChvcHRzLmR5bmFtaWNSZWYpXG4gICAgICAgICAgICBnZW4udmFyKG5hbWVzXzEuZGVmYXVsdC5keW5hbWljQW5jaG9ycywgKDAsIGNvZGVnZW5fMS5fKSBge31gKTtcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIHRvcFNjaGVtYU9iakNvZGUoaXQpIHtcbiAgICBjb25zdCB7IHNjaGVtYSwgb3B0cywgZ2VuIH0gPSBpdDtcbiAgICB2YWxpZGF0ZUZ1bmN0aW9uKGl0LCAoKSA9PiB7XG4gICAgICAgIGlmIChvcHRzLiRjb21tZW50ICYmIHNjaGVtYS4kY29tbWVudClcbiAgICAgICAgICAgIGNvbW1lbnRLZXl3b3JkKGl0KTtcbiAgICAgICAgY2hlY2tOb0RlZmF1bHQoaXQpO1xuICAgICAgICBnZW4ubGV0KG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCBudWxsKTtcbiAgICAgICAgZ2VuLmxldChuYW1lc18xLmRlZmF1bHQuZXJyb3JzLCAwKTtcbiAgICAgICAgaWYgKG9wdHMudW5ldmFsdWF0ZWQpXG4gICAgICAgICAgICByZXNldEV2YWx1YXRlZChpdCk7XG4gICAgICAgIHR5cGVBbmRLZXl3b3JkcyhpdCk7XG4gICAgICAgIHJldHVyblJlc3VsdHMoaXQpO1xuICAgIH0pO1xuICAgIHJldHVybjtcbn1cbmZ1bmN0aW9uIHJlc2V0RXZhbHVhdGVkKGl0KSB7XG4gICAgLy8gVE9ETyBtYXliZSBzb21lIGhvb2sgdG8gZXhlY3V0ZSBpdCBpbiB0aGUgZW5kIHRvIGNoZWNrIHdoZXRoZXIgcHJvcHMvaXRlbXMgYXJlIE5hbWUsIGFzIGluIGFzc2lnbkV2YWx1YXRlZFxuICAgIGNvbnN0IHsgZ2VuLCB2YWxpZGF0ZU5hbWUgfSA9IGl0O1xuICAgIGl0LmV2YWx1YXRlZCA9IGdlbi5jb25zdChcImV2YWx1YXRlZFwiLCAoMCwgY29kZWdlbl8xLl8pIGAke3ZhbGlkYXRlTmFtZX0uZXZhbHVhdGVkYCk7XG4gICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7aXQuZXZhbHVhdGVkfS5keW5hbWljUHJvcHNgLCAoKSA9PiBnZW4uYXNzaWduKCgwLCBjb2RlZ2VuXzEuXykgYCR7aXQuZXZhbHVhdGVkfS5wcm9wc2AsICgwLCBjb2RlZ2VuXzEuXykgYHVuZGVmaW5lZGApKTtcbiAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtpdC5ldmFsdWF0ZWR9LmR5bmFtaWNJdGVtc2AsICgpID0+IGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtpdC5ldmFsdWF0ZWR9Lml0ZW1zYCwgKDAsIGNvZGVnZW5fMS5fKSBgdW5kZWZpbmVkYCkpO1xufVxuZnVuY3Rpb24gZnVuY1NvdXJjZVVybChzY2hlbWEsIG9wdHMpIHtcbiAgICBjb25zdCBzY2hJZCA9IHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIiAmJiBzY2hlbWFbb3B0cy5zY2hlbWFJZF07XG4gICAgcmV0dXJuIHNjaElkICYmIChvcHRzLmNvZGUuc291cmNlIHx8IG9wdHMuY29kZS5wcm9jZXNzKSA/ICgwLCBjb2RlZ2VuXzEuXykgYC8qIyBzb3VyY2VVUkw9JHtzY2hJZH0gKi9gIDogY29kZWdlbl8xLm5pbDtcbn1cbi8vIHNjaGVtYSBjb21waWxhdGlvbiAtIHRoaXMgZnVuY3Rpb24gaXMgdXNlZCByZWN1cnNpdmVseSB0byBnZW5lcmF0ZSBjb2RlIGZvciBzdWItc2NoZW1hc1xuZnVuY3Rpb24gc3Vic2NoZW1hQ29kZShpdCwgdmFsaWQpIHtcbiAgICBpZiAoaXNTY2hlbWFPYmooaXQpKSB7XG4gICAgICAgIGNoZWNrS2V5d29yZHMoaXQpO1xuICAgICAgICBpZiAoc2NoZW1hQ3h0SGFzUnVsZXMoaXQpKSB7XG4gICAgICAgICAgICBzdWJTY2hlbWFPYmpDb2RlKGl0LCB2YWxpZCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgKDAsIGJvb2xTY2hlbWFfMS5ib29sT3JFbXB0eVNjaGVtYSkoaXQsIHZhbGlkKTtcbn1cbmZ1bmN0aW9uIHNjaGVtYUN4dEhhc1J1bGVzKHsgc2NoZW1hLCBzZWxmIH0pIHtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSBcImJvb2xlYW5cIilcbiAgICAgICAgcmV0dXJuICFzY2hlbWE7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hKVxuICAgICAgICBpZiAoc2VsZi5SVUxFUy5hbGxba2V5XSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGlzU2NoZW1hT2JqKGl0KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBpdC5zY2hlbWEgIT0gXCJib29sZWFuXCI7XG59XG5mdW5jdGlvbiBzdWJTY2hlbWFPYmpDb2RlKGl0LCB2YWxpZCkge1xuICAgIGNvbnN0IHsgc2NoZW1hLCBnZW4sIG9wdHMgfSA9IGl0O1xuICAgIGlmIChvcHRzLiRjb21tZW50ICYmIHNjaGVtYS4kY29tbWVudClcbiAgICAgICAgY29tbWVudEtleXdvcmQoaXQpO1xuICAgIHVwZGF0ZUNvbnRleHQoaXQpO1xuICAgIGNoZWNrQXN5bmNTY2hlbWEoaXQpO1xuICAgIGNvbnN0IGVycnNDb3VudCA9IGdlbi5jb25zdChcIl9lcnJzXCIsIG5hbWVzXzEuZGVmYXVsdC5lcnJvcnMpO1xuICAgIHR5cGVBbmRLZXl3b3JkcyhpdCwgZXJyc0NvdW50KTtcbiAgICAvLyBUT0RPIHZhclxuICAgIGdlbi52YXIodmFsaWQsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZXJyc0NvdW50fSA9PT0gJHtuYW1lc18xLmRlZmF1bHQuZXJyb3JzfWApO1xufVxuZnVuY3Rpb24gY2hlY2tLZXl3b3JkcyhpdCkge1xuICAgICgwLCB1dGlsXzEuY2hlY2tVbmtub3duUnVsZXMpKGl0KTtcbiAgICBjaGVja1JlZnNBbmRLZXl3b3JkcyhpdCk7XG59XG5mdW5jdGlvbiB0eXBlQW5kS2V5d29yZHMoaXQsIGVycnNDb3VudCkge1xuICAgIGlmIChpdC5vcHRzLmp0ZClcbiAgICAgICAgcmV0dXJuIHNjaGVtYUtleXdvcmRzKGl0LCBbXSwgZmFsc2UsIGVycnNDb3VudCk7XG4gICAgY29uc3QgdHlwZXMgPSAoMCwgZGF0YVR5cGVfMS5nZXRTY2hlbWFUeXBlcykoaXQuc2NoZW1hKTtcbiAgICBjb25zdCBjaGVja2VkVHlwZXMgPSAoMCwgZGF0YVR5cGVfMS5jb2VyY2VBbmRDaGVja0RhdGFUeXBlKShpdCwgdHlwZXMpO1xuICAgIHNjaGVtYUtleXdvcmRzKGl0LCB0eXBlcywgIWNoZWNrZWRUeXBlcywgZXJyc0NvdW50KTtcbn1cbmZ1bmN0aW9uIGNoZWNrUmVmc0FuZEtleXdvcmRzKGl0KSB7XG4gICAgY29uc3QgeyBzY2hlbWEsIGVyclNjaGVtYVBhdGgsIG9wdHMsIHNlbGYgfSA9IGl0O1xuICAgIGlmIChzY2hlbWEuJHJlZiAmJiBvcHRzLmlnbm9yZUtleXdvcmRzV2l0aFJlZiAmJiAoMCwgdXRpbF8xLnNjaGVtYUhhc1J1bGVzQnV0UmVmKShzY2hlbWEsIHNlbGYuUlVMRVMpKSB7XG4gICAgICAgIHNlbGYubG9nZ2VyLndhcm4oYCRyZWY6IGtleXdvcmRzIGlnbm9yZWQgaW4gc2NoZW1hIGF0IHBhdGggXCIke2VyclNjaGVtYVBhdGh9XCJgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja05vRGVmYXVsdChpdCkge1xuICAgIGNvbnN0IHsgc2NoZW1hLCBvcHRzIH0gPSBpdDtcbiAgICBpZiAoc2NoZW1hLmRlZmF1bHQgIT09IHVuZGVmaW5lZCAmJiBvcHRzLnVzZURlZmF1bHRzICYmIG9wdHMuc3RyaWN0U2NoZW1hKSB7XG4gICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgXCJkZWZhdWx0IGlzIGlnbm9yZWQgaW4gdGhlIHNjaGVtYSByb290XCIpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHVwZGF0ZUNvbnRleHQoaXQpIHtcbiAgICBjb25zdCBzY2hJZCA9IGl0LnNjaGVtYVtpdC5vcHRzLnNjaGVtYUlkXTtcbiAgICBpZiAoc2NoSWQpXG4gICAgICAgIGl0LmJhc2VJZCA9ICgwLCByZXNvbHZlXzEucmVzb2x2ZVVybCkoaXQub3B0cy51cmlSZXNvbHZlciwgaXQuYmFzZUlkLCBzY2hJZCk7XG59XG5mdW5jdGlvbiBjaGVja0FzeW5jU2NoZW1hKGl0KSB7XG4gICAgaWYgKGl0LnNjaGVtYS4kYXN5bmMgJiYgIWl0LnNjaGVtYUVudi4kYXN5bmMpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFzeW5jIHNjaGVtYSBpbiBzeW5jIHNjaGVtYVwiKTtcbn1cbmZ1bmN0aW9uIGNvbW1lbnRLZXl3b3JkKHsgZ2VuLCBzY2hlbWFFbnYsIHNjaGVtYSwgZXJyU2NoZW1hUGF0aCwgb3B0cyB9KSB7XG4gICAgY29uc3QgbXNnID0gc2NoZW1hLiRjb21tZW50O1xuICAgIGlmIChvcHRzLiRjb21tZW50ID09PSB0cnVlKSB7XG4gICAgICAgIGdlbi5jb2RlKCgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LnNlbGZ9LmxvZ2dlci5sb2coJHttc2d9KWApO1xuICAgIH1cbiAgICBlbHNlIGlmICh0eXBlb2Ygb3B0cy4kY29tbWVudCA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY29uc3Qgc2NoZW1hUGF0aCA9ICgwLCBjb2RlZ2VuXzEuc3RyKSBgJHtlcnJTY2hlbWFQYXRofS8kY29tbWVudGA7XG4gICAgICAgIGNvbnN0IHJvb3ROYW1lID0gZ2VuLnNjb3BlVmFsdWUoXCJyb290XCIsIHsgcmVmOiBzY2hlbWFFbnYucm9vdCB9KTtcbiAgICAgICAgZ2VuLmNvZGUoKDAsIGNvZGVnZW5fMS5fKSBgJHtuYW1lc18xLmRlZmF1bHQuc2VsZn0ub3B0cy4kY29tbWVudCgke21zZ30sICR7c2NoZW1hUGF0aH0sICR7cm9vdE5hbWV9LnNjaGVtYSlgKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXR1cm5SZXN1bHRzKGl0KSB7XG4gICAgY29uc3QgeyBnZW4sIHNjaGVtYUVudiwgdmFsaWRhdGVOYW1lLCBWYWxpZGF0aW9uRXJyb3IsIG9wdHMgfSA9IGl0O1xuICAgIGlmIChzY2hlbWFFbnYuJGFzeW5jKSB7XG4gICAgICAgIC8vIFRPRE8gYXNzaWduIHVuZXZhbHVhdGVkXG4gICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC5lcnJvcnN9ID09PSAwYCwgKCkgPT4gZ2VuLnJldHVybihuYW1lc18xLmRlZmF1bHQuZGF0YSksICgpID0+IGdlbi50aHJvdygoMCwgY29kZWdlbl8xLl8pIGBuZXcgJHtWYWxpZGF0aW9uRXJyb3J9KCR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9KWApKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHt2YWxpZGF0ZU5hbWV9LmVycm9yc2AsIG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzKTtcbiAgICAgICAgaWYgKG9wdHMudW5ldmFsdWF0ZWQpXG4gICAgICAgICAgICBhc3NpZ25FdmFsdWF0ZWQoaXQpO1xuICAgICAgICBnZW4ucmV0dXJuKCgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LmVycm9yc30gPT09IDBgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBhc3NpZ25FdmFsdWF0ZWQoeyBnZW4sIGV2YWx1YXRlZCwgcHJvcHMsIGl0ZW1zIH0pIHtcbiAgICBpZiAocHJvcHMgaW5zdGFuY2VvZiBjb2RlZ2VuXzEuTmFtZSlcbiAgICAgICAgZ2VuLmFzc2lnbigoMCwgY29kZWdlbl8xLl8pIGAke2V2YWx1YXRlZH0ucHJvcHNgLCBwcm9wcyk7XG4gICAgaWYgKGl0ZW1zIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUpXG4gICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtldmFsdWF0ZWR9Lml0ZW1zYCwgaXRlbXMpO1xufVxuZnVuY3Rpb24gc2NoZW1hS2V5d29yZHMoaXQsIHR5cGVzLCB0eXBlRXJyb3JzLCBlcnJzQ291bnQpIHtcbiAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCBkYXRhLCBhbGxFcnJvcnMsIG9wdHMsIHNlbGYgfSA9IGl0O1xuICAgIGNvbnN0IHsgUlVMRVMgfSA9IHNlbGY7XG4gICAgaWYgKHNjaGVtYS4kcmVmICYmIChvcHRzLmlnbm9yZUtleXdvcmRzV2l0aFJlZiB8fCAhKDAsIHV0aWxfMS5zY2hlbWFIYXNSdWxlc0J1dFJlZikoc2NoZW1hLCBSVUxFUykpKSB7XG4gICAgICAgIGdlbi5ibG9jaygoKSA9PiBrZXl3b3JkQ29kZShpdCwgXCIkcmVmXCIsIFJVTEVTLmFsbC4kcmVmLmRlZmluaXRpb24pKTsgLy8gVE9ETyB0eXBlY2FzdFxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghb3B0cy5qdGQpXG4gICAgICAgIGNoZWNrU3RyaWN0VHlwZXMoaXQsIHR5cGVzKTtcbiAgICBnZW4uYmxvY2soKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGdyb3VwIG9mIFJVTEVTLnJ1bGVzKVxuICAgICAgICAgICAgZ3JvdXBLZXl3b3Jkcyhncm91cCk7XG4gICAgICAgIGdyb3VwS2V5d29yZHMoUlVMRVMucG9zdCk7XG4gICAgfSk7XG4gICAgZnVuY3Rpb24gZ3JvdXBLZXl3b3Jkcyhncm91cCkge1xuICAgICAgICBpZiAoISgwLCBhcHBsaWNhYmlsaXR5XzEuc2hvdWxkVXNlR3JvdXApKHNjaGVtYSwgZ3JvdXApKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBpZiAoZ3JvdXAudHlwZSkge1xuICAgICAgICAgICAgZ2VuLmlmKCgwLCBkYXRhVHlwZV8yLmNoZWNrRGF0YVR5cGUpKGdyb3VwLnR5cGUsIGRhdGEsIG9wdHMuc3RyaWN0TnVtYmVycykpO1xuICAgICAgICAgICAgaXRlcmF0ZUtleXdvcmRzKGl0LCBncm91cCk7XG4gICAgICAgICAgICBpZiAodHlwZXMubGVuZ3RoID09PSAxICYmIHR5cGVzWzBdID09PSBncm91cC50eXBlICYmIHR5cGVFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICBnZW4uZWxzZSgpO1xuICAgICAgICAgICAgICAgICgwLCBkYXRhVHlwZV8yLnJlcG9ydFR5cGVFcnJvcikoaXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2VuLmVuZElmKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpdGVyYXRlS2V5d29yZHMoaXQsIGdyb3VwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBUT0RPIG1ha2UgaXQgXCJva1wiIGNhbGw/XG4gICAgICAgIGlmICghYWxsRXJyb3JzKVxuICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7bmFtZXNfMS5kZWZhdWx0LmVycm9yc30gPT09ICR7ZXJyc0NvdW50IHx8IDB9YCk7XG4gICAgfVxufVxuZnVuY3Rpb24gaXRlcmF0ZUtleXdvcmRzKGl0LCBncm91cCkge1xuICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIG9wdHM6IHsgdXNlRGVmYXVsdHMgfSwgfSA9IGl0O1xuICAgIGlmICh1c2VEZWZhdWx0cylcbiAgICAgICAgKDAsIGRlZmF1bHRzXzEuYXNzaWduRGVmYXVsdHMpKGl0LCBncm91cC50eXBlKTtcbiAgICBnZW4uYmxvY2soKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IHJ1bGUgb2YgZ3JvdXAucnVsZXMpIHtcbiAgICAgICAgICAgIGlmICgoMCwgYXBwbGljYWJpbGl0eV8xLnNob3VsZFVzZVJ1bGUpKHNjaGVtYSwgcnVsZSkpIHtcbiAgICAgICAgICAgICAgICBrZXl3b3JkQ29kZShpdCwgcnVsZS5rZXl3b3JkLCBydWxlLmRlZmluaXRpb24sIGdyb3VwLnR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBjaGVja1N0cmljdFR5cGVzKGl0LCB0eXBlcykge1xuICAgIGlmIChpdC5zY2hlbWFFbnYubWV0YSB8fCAhaXQub3B0cy5zdHJpY3RUeXBlcylcbiAgICAgICAgcmV0dXJuO1xuICAgIGNoZWNrQ29udGV4dFR5cGVzKGl0LCB0eXBlcyk7XG4gICAgaWYgKCFpdC5vcHRzLmFsbG93VW5pb25UeXBlcylcbiAgICAgICAgY2hlY2tNdWx0aXBsZVR5cGVzKGl0LCB0eXBlcyk7XG4gICAgY2hlY2tLZXl3b3JkVHlwZXMoaXQsIGl0LmRhdGFUeXBlcyk7XG59XG5mdW5jdGlvbiBjaGVja0NvbnRleHRUeXBlcyhpdCwgdHlwZXMpIHtcbiAgICBpZiAoIXR5cGVzLmxlbmd0aClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmICghaXQuZGF0YVR5cGVzLmxlbmd0aCkge1xuICAgICAgICBpdC5kYXRhVHlwZXMgPSB0eXBlcztcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0eXBlcy5mb3JFYWNoKCh0KSA9PiB7XG4gICAgICAgIGlmICghaW5jbHVkZXNUeXBlKGl0LmRhdGFUeXBlcywgdCkpIHtcbiAgICAgICAgICAgIHN0cmljdFR5cGVzRXJyb3IoaXQsIGB0eXBlIFwiJHt0fVwiIG5vdCBhbGxvd2VkIGJ5IGNvbnRleHQgXCIke2l0LmRhdGFUeXBlcy5qb2luKFwiLFwiKX1cImApO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgbmFycm93U2NoZW1hVHlwZXMoaXQsIHR5cGVzKTtcbn1cbmZ1bmN0aW9uIGNoZWNrTXVsdGlwbGVUeXBlcyhpdCwgdHMpIHtcbiAgICBpZiAodHMubGVuZ3RoID4gMSAmJiAhKHRzLmxlbmd0aCA9PT0gMiAmJiB0cy5pbmNsdWRlcyhcIm51bGxcIikpKSB7XG4gICAgICAgIHN0cmljdFR5cGVzRXJyb3IoaXQsIFwidXNlIGFsbG93VW5pb25UeXBlcyB0byBhbGxvdyB1bmlvbiB0eXBlIGtleXdvcmRcIik7XG4gICAgfVxufVxuZnVuY3Rpb24gY2hlY2tLZXl3b3JkVHlwZXMoaXQsIHRzKSB7XG4gICAgY29uc3QgcnVsZXMgPSBpdC5zZWxmLlJVTEVTLmFsbDtcbiAgICBmb3IgKGNvbnN0IGtleXdvcmQgaW4gcnVsZXMpIHtcbiAgICAgICAgY29uc3QgcnVsZSA9IHJ1bGVzW2tleXdvcmRdO1xuICAgICAgICBpZiAodHlwZW9mIHJ1bGUgPT0gXCJvYmplY3RcIiAmJiAoMCwgYXBwbGljYWJpbGl0eV8xLnNob3VsZFVzZVJ1bGUpKGl0LnNjaGVtYSwgcnVsZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgdHlwZSB9ID0gcnVsZS5kZWZpbml0aW9uO1xuICAgICAgICAgICAgaWYgKHR5cGUubGVuZ3RoICYmICF0eXBlLnNvbWUoKHQpID0+IGhhc0FwcGxpY2FibGVUeXBlKHRzLCB0KSkpIHtcbiAgICAgICAgICAgICAgICBzdHJpY3RUeXBlc0Vycm9yKGl0LCBgbWlzc2luZyB0eXBlIFwiJHt0eXBlLmpvaW4oXCIsXCIpfVwiIGZvciBrZXl3b3JkIFwiJHtrZXl3b3JkfVwiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBoYXNBcHBsaWNhYmxlVHlwZShzY2hUcywga3dkVCkge1xuICAgIHJldHVybiBzY2hUcy5pbmNsdWRlcyhrd2RUKSB8fCAoa3dkVCA9PT0gXCJudW1iZXJcIiAmJiBzY2hUcy5pbmNsdWRlcyhcImludGVnZXJcIikpO1xufVxuZnVuY3Rpb24gaW5jbHVkZXNUeXBlKHRzLCB0KSB7XG4gICAgcmV0dXJuIHRzLmluY2x1ZGVzKHQpIHx8ICh0ID09PSBcImludGVnZXJcIiAmJiB0cy5pbmNsdWRlcyhcIm51bWJlclwiKSk7XG59XG5mdW5jdGlvbiBuYXJyb3dTY2hlbWFUeXBlcyhpdCwgd2l0aFR5cGVzKSB7XG4gICAgY29uc3QgdHMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHQgb2YgaXQuZGF0YVR5cGVzKSB7XG4gICAgICAgIGlmIChpbmNsdWRlc1R5cGUod2l0aFR5cGVzLCB0KSlcbiAgICAgICAgICAgIHRzLnB1c2godCk7XG4gICAgICAgIGVsc2UgaWYgKHdpdGhUeXBlcy5pbmNsdWRlcyhcImludGVnZXJcIikgJiYgdCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgIHRzLnB1c2goXCJpbnRlZ2VyXCIpO1xuICAgIH1cbiAgICBpdC5kYXRhVHlwZXMgPSB0cztcbn1cbmZ1bmN0aW9uIHN0cmljdFR5cGVzRXJyb3IoaXQsIG1zZykge1xuICAgIGNvbnN0IHNjaGVtYVBhdGggPSBpdC5zY2hlbWFFbnYuYmFzZUlkICsgaXQuZXJyU2NoZW1hUGF0aDtcbiAgICBtc2cgKz0gYCBhdCBcIiR7c2NoZW1hUGF0aH1cIiAoc3RyaWN0VHlwZXMpYDtcbiAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIG1zZywgaXQub3B0cy5zdHJpY3RUeXBlcyk7XG59XG5jbGFzcyBLZXl3b3JkQ3h0IHtcbiAgICBjb25zdHJ1Y3RvcihpdCwgZGVmLCBrZXl3b3JkKSB7XG4gICAgICAgICgwLCBrZXl3b3JkXzEudmFsaWRhdGVLZXl3b3JkVXNhZ2UpKGl0LCBkZWYsIGtleXdvcmQpO1xuICAgICAgICB0aGlzLmdlbiA9IGl0LmdlbjtcbiAgICAgICAgdGhpcy5hbGxFcnJvcnMgPSBpdC5hbGxFcnJvcnM7XG4gICAgICAgIHRoaXMua2V5d29yZCA9IGtleXdvcmQ7XG4gICAgICAgIHRoaXMuZGF0YSA9IGl0LmRhdGE7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gaXQuc2NoZW1hW2tleXdvcmRdO1xuICAgICAgICB0aGlzLiRkYXRhID0gZGVmLiRkYXRhICYmIGl0Lm9wdHMuJGRhdGEgJiYgdGhpcy5zY2hlbWEgJiYgdGhpcy5zY2hlbWEuJGRhdGE7XG4gICAgICAgIHRoaXMuc2NoZW1hVmFsdWUgPSAoMCwgdXRpbF8xLnNjaGVtYVJlZk9yVmFsKShpdCwgdGhpcy5zY2hlbWEsIGtleXdvcmQsIHRoaXMuJGRhdGEpO1xuICAgICAgICB0aGlzLnNjaGVtYVR5cGUgPSBkZWYuc2NoZW1hVHlwZTtcbiAgICAgICAgdGhpcy5wYXJlbnRTY2hlbWEgPSBpdC5zY2hlbWE7XG4gICAgICAgIHRoaXMucGFyYW1zID0ge307XG4gICAgICAgIHRoaXMuaXQgPSBpdDtcbiAgICAgICAgdGhpcy5kZWYgPSBkZWY7XG4gICAgICAgIGlmICh0aGlzLiRkYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnNjaGVtYUNvZGUgPSBpdC5nZW4uY29uc3QoXCJ2U2NoZW1hXCIsIGdldERhdGEodGhpcy4kZGF0YSwgaXQpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hQ29kZSA9IHRoaXMuc2NoZW1hVmFsdWU7XG4gICAgICAgICAgICBpZiAoISgwLCBrZXl3b3JkXzEudmFsaWRTY2hlbWFUeXBlKSh0aGlzLnNjaGVtYSwgZGVmLnNjaGVtYVR5cGUsIGRlZi5hbGxvd1VuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7a2V5d29yZH0gdmFsdWUgbXVzdCBiZSAke0pTT04uc3RyaW5naWZ5KGRlZi5zY2hlbWFUeXBlKX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXCJjb2RlXCIgaW4gZGVmID8gZGVmLnRyYWNrRXJyb3JzIDogZGVmLmVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyc0NvdW50ID0gaXQuZ2VuLmNvbnN0KFwiX2VycnNcIiwgbmFtZXNfMS5kZWZhdWx0LmVycm9ycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0KGNvbmRpdGlvbiwgc3VjY2Vzc0FjdGlvbiwgZmFpbEFjdGlvbikge1xuICAgICAgICB0aGlzLmZhaWxSZXN1bHQoKDAsIGNvZGVnZW5fMS5ub3QpKGNvbmRpdGlvbiksIHN1Y2Nlc3NBY3Rpb24sIGZhaWxBY3Rpb24pO1xuICAgIH1cbiAgICBmYWlsUmVzdWx0KGNvbmRpdGlvbiwgc3VjY2Vzc0FjdGlvbiwgZmFpbEFjdGlvbikge1xuICAgICAgICB0aGlzLmdlbi5pZihjb25kaXRpb24pO1xuICAgICAgICBpZiAoZmFpbEFjdGlvbilcbiAgICAgICAgICAgIGZhaWxBY3Rpb24oKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdGhpcy5lcnJvcigpO1xuICAgICAgICBpZiAoc3VjY2Vzc0FjdGlvbikge1xuICAgICAgICAgICAgdGhpcy5nZW4uZWxzZSgpO1xuICAgICAgICAgICAgc3VjY2Vzc0FjdGlvbigpO1xuICAgICAgICAgICAgaWYgKHRoaXMuYWxsRXJyb3JzKVxuICAgICAgICAgICAgICAgIHRoaXMuZ2VuLmVuZElmKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hbGxFcnJvcnMpXG4gICAgICAgICAgICAgICAgdGhpcy5nZW4uZW5kSWYoKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aGlzLmdlbi5lbHNlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcGFzcyhjb25kaXRpb24sIGZhaWxBY3Rpb24pIHtcbiAgICAgICAgdGhpcy5mYWlsUmVzdWx0KCgwLCBjb2RlZ2VuXzEubm90KShjb25kaXRpb24pLCB1bmRlZmluZWQsIGZhaWxBY3Rpb24pO1xuICAgIH1cbiAgICBmYWlsKGNvbmRpdGlvbikge1xuICAgICAgICBpZiAoY29uZGl0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3IoKTtcbiAgICAgICAgICAgIGlmICghdGhpcy5hbGxFcnJvcnMpXG4gICAgICAgICAgICAgICAgdGhpcy5nZW4uaWYoZmFsc2UpOyAvLyB0aGlzIGJyYW5jaCB3aWxsIGJlIHJlbW92ZWQgYnkgZ2VuLm9wdGltaXplXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5nZW4uaWYoY29uZGl0aW9uKTtcbiAgICAgICAgdGhpcy5lcnJvcigpO1xuICAgICAgICBpZiAodGhpcy5hbGxFcnJvcnMpXG4gICAgICAgICAgICB0aGlzLmdlbi5lbmRJZigpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICB0aGlzLmdlbi5lbHNlKCk7XG4gICAgfVxuICAgIGZhaWwkZGF0YShjb25kaXRpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLiRkYXRhKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFpbChjb25kaXRpb24pO1xuICAgICAgICBjb25zdCB7IHNjaGVtYUNvZGUgfSA9IHRoaXM7XG4gICAgICAgIHRoaXMuZmFpbCgoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYUNvZGV9ICE9PSB1bmRlZmluZWQgJiYgKCR7KDAsIGNvZGVnZW5fMS5vcikodGhpcy5pbnZhbGlkJGRhdGEoKSwgY29uZGl0aW9uKX0pYCk7XG4gICAgfVxuICAgIGVycm9yKGFwcGVuZCwgZXJyb3JQYXJhbXMsIGVycm9yUGF0aHMpIHtcbiAgICAgICAgaWYgKGVycm9yUGFyYW1zKSB7XG4gICAgICAgICAgICB0aGlzLnNldFBhcmFtcyhlcnJvclBhcmFtcyk7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihhcHBlbmQsIGVycm9yUGF0aHMpO1xuICAgICAgICAgICAgdGhpcy5zZXRQYXJhbXMoe30pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2Vycm9yKGFwcGVuZCwgZXJyb3JQYXRocyk7XG4gICAgfVxuICAgIF9lcnJvcihhcHBlbmQsIGVycm9yUGF0aHMpIHtcbiAgICAgICAgO1xuICAgICAgICAoYXBwZW5kID8gZXJyb3JzXzEucmVwb3J0RXh0cmFFcnJvciA6IGVycm9yc18xLnJlcG9ydEVycm9yKSh0aGlzLCB0aGlzLmRlZi5lcnJvciwgZXJyb3JQYXRocyk7XG4gICAgfVxuICAgICRkYXRhRXJyb3IoKSB7XG4gICAgICAgICgwLCBlcnJvcnNfMS5yZXBvcnRFcnJvcikodGhpcywgdGhpcy5kZWYuJGRhdGFFcnJvciB8fCBlcnJvcnNfMS5rZXl3b3JkJERhdGFFcnJvcik7XG4gICAgfVxuICAgIHJlc2V0KCkge1xuICAgICAgICBpZiAodGhpcy5lcnJzQ291bnQgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignYWRkIFwidHJhY2tFcnJvcnNcIiB0byBrZXl3b3JkIGRlZmluaXRpb24nKTtcbiAgICAgICAgKDAsIGVycm9yc18xLnJlc2V0RXJyb3JzQ291bnQpKHRoaXMuZ2VuLCB0aGlzLmVycnNDb3VudCk7XG4gICAgfVxuICAgIG9rKGNvbmQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFsbEVycm9ycylcbiAgICAgICAgICAgIHRoaXMuZ2VuLmlmKGNvbmQpO1xuICAgIH1cbiAgICBzZXRQYXJhbXMob2JqLCBhc3NpZ24pIHtcbiAgICAgICAgaWYgKGFzc2lnbilcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5wYXJhbXMsIG9iaik7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHRoaXMucGFyYW1zID0gb2JqO1xuICAgIH1cbiAgICBibG9jayRkYXRhKHZhbGlkLCBjb2RlQmxvY2ssICRkYXRhVmFsaWQgPSBjb2RlZ2VuXzEubmlsKSB7XG4gICAgICAgIHRoaXMuZ2VuLmJsb2NrKCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hlY2skZGF0YSh2YWxpZCwgJGRhdGFWYWxpZCk7XG4gICAgICAgICAgICBjb2RlQmxvY2soKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNoZWNrJGRhdGEodmFsaWQgPSBjb2RlZ2VuXzEubmlsLCAkZGF0YVZhbGlkID0gY29kZWdlbl8xLm5pbCkge1xuICAgICAgICBpZiAoIXRoaXMuJGRhdGEpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWFDb2RlLCBzY2hlbWFUeXBlLCBkZWYgfSA9IHRoaXM7XG4gICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLm9yKSgoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYUNvZGV9ID09PSB1bmRlZmluZWRgLCAkZGF0YVZhbGlkKSk7XG4gICAgICAgIGlmICh2YWxpZCAhPT0gY29kZWdlbl8xLm5pbClcbiAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIHRydWUpO1xuICAgICAgICBpZiAoc2NoZW1hVHlwZS5sZW5ndGggfHwgZGVmLnZhbGlkYXRlU2NoZW1hKSB7XG4gICAgICAgICAgICBnZW4uZWxzZUlmKHRoaXMuaW52YWxpZCRkYXRhKCkpO1xuICAgICAgICAgICAgdGhpcy4kZGF0YUVycm9yKCk7XG4gICAgICAgICAgICBpZiAodmFsaWQgIT09IGNvZGVnZW5fMS5uaWwpXG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgZmFsc2UpO1xuICAgICAgICB9XG4gICAgICAgIGdlbi5lbHNlKCk7XG4gICAgfVxuICAgIGludmFsaWQkZGF0YSgpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYUNvZGUsIHNjaGVtYVR5cGUsIGRlZiwgaXQgfSA9IHRoaXM7XG4gICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLm9yKSh3cm9uZyREYXRhVHlwZSgpLCBpbnZhbGlkJERhdGFTY2hlbWEoKSk7XG4gICAgICAgIGZ1bmN0aW9uIHdyb25nJERhdGFUeXBlKCkge1xuICAgICAgICAgICAgaWYgKHNjaGVtYVR5cGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKCEoc2NoZW1hQ29kZSBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0ID0gQXJyYXkuaXNBcnJheShzY2hlbWFUeXBlKSA/IHNjaGVtYVR5cGUgOiBbc2NoZW1hVHlwZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCR7KDAsIGRhdGFUeXBlXzIuY2hlY2tEYXRhVHlwZXMpKHN0LCBzY2hlbWFDb2RlLCBpdC5vcHRzLnN0cmljdE51bWJlcnMsIGRhdGFUeXBlXzIuRGF0YVR5cGUuV3JvbmcpfWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29kZWdlbl8xLm5pbDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpbnZhbGlkJERhdGFTY2hlbWEoKSB7XG4gICAgICAgICAgICBpZiAoZGVmLnZhbGlkYXRlU2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsaWRhdGVTY2hlbWFSZWYgPSBnZW4uc2NvcGVWYWx1ZShcInZhbGlkYXRlJGRhdGFcIiwgeyByZWY6IGRlZi52YWxpZGF0ZVNjaGVtYSB9KTsgLy8gVE9ETyB2YWx1ZS5jb2RlIGZvciBzdGFuZGFsb25lXG4gICAgICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYCEke3ZhbGlkYXRlU2NoZW1hUmVmfSgke3NjaGVtYUNvZGV9KWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY29kZWdlbl8xLm5pbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdWJzY2hlbWEoYXBwbCwgdmFsaWQpIHtcbiAgICAgICAgY29uc3Qgc3Vic2NoZW1hID0gKDAsIHN1YnNjaGVtYV8xLmdldFN1YnNjaGVtYSkodGhpcy5pdCwgYXBwbCk7XG4gICAgICAgICgwLCBzdWJzY2hlbWFfMS5leHRlbmRTdWJzY2hlbWFEYXRhKShzdWJzY2hlbWEsIHRoaXMuaXQsIGFwcGwpO1xuICAgICAgICAoMCwgc3Vic2NoZW1hXzEuZXh0ZW5kU3Vic2NoZW1hTW9kZSkoc3Vic2NoZW1hLCBhcHBsKTtcbiAgICAgICAgY29uc3QgbmV4dENvbnRleHQgPSB7IC4uLnRoaXMuaXQsIC4uLnN1YnNjaGVtYSwgaXRlbXM6IHVuZGVmaW5lZCwgcHJvcHM6IHVuZGVmaW5lZCB9O1xuICAgICAgICBzdWJzY2hlbWFDb2RlKG5leHRDb250ZXh0LCB2YWxpZCk7XG4gICAgICAgIHJldHVybiBuZXh0Q29udGV4dDtcbiAgICB9XG4gICAgbWVyZ2VFdmFsdWF0ZWQoc2NoZW1hQ3h0LCB0b05hbWUpIHtcbiAgICAgICAgY29uc3QgeyBpdCwgZ2VuIH0gPSB0aGlzO1xuICAgICAgICBpZiAoIWl0Lm9wdHMudW5ldmFsdWF0ZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChpdC5wcm9wcyAhPT0gdHJ1ZSAmJiBzY2hlbWFDeHQucHJvcHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaXQucHJvcHMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQucHJvcHMoZ2VuLCBzY2hlbWFDeHQucHJvcHMsIGl0LnByb3BzLCB0b05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpdC5pdGVtcyAhPT0gdHJ1ZSAmJiBzY2hlbWFDeHQuaXRlbXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaXQuaXRlbXMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQuaXRlbXMoZ2VuLCBzY2hlbWFDeHQuaXRlbXMsIGl0Lml0ZW1zLCB0b05hbWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIG1lcmdlVmFsaWRFdmFsdWF0ZWQoc2NoZW1hQ3h0LCB2YWxpZCkge1xuICAgICAgICBjb25zdCB7IGl0LCBnZW4gfSA9IHRoaXM7XG4gICAgICAgIGlmIChpdC5vcHRzLnVuZXZhbHVhdGVkICYmIChpdC5wcm9wcyAhPT0gdHJ1ZSB8fCBpdC5pdGVtcyAhPT0gdHJ1ZSkpIHtcbiAgICAgICAgICAgIGdlbi5pZih2YWxpZCwgKCkgPT4gdGhpcy5tZXJnZUV2YWx1YXRlZChzY2hlbWFDeHQsIGNvZGVnZW5fMS5OYW1lKSk7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuS2V5d29yZEN4dCA9IEtleXdvcmRDeHQ7XG5mdW5jdGlvbiBrZXl3b3JkQ29kZShpdCwga2V5d29yZCwgZGVmLCBydWxlVHlwZSkge1xuICAgIGNvbnN0IGN4dCA9IG5ldyBLZXl3b3JkQ3h0KGl0LCBkZWYsIGtleXdvcmQpO1xuICAgIGlmIChcImNvZGVcIiBpbiBkZWYpIHtcbiAgICAgICAgZGVmLmNvZGUoY3h0LCBydWxlVHlwZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGN4dC4kZGF0YSAmJiBkZWYudmFsaWRhdGUpIHtcbiAgICAgICAgKDAsIGtleXdvcmRfMS5mdW5jS2V5d29yZENvZGUpKGN4dCwgZGVmKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoXCJtYWNyb1wiIGluIGRlZikge1xuICAgICAgICAoMCwga2V5d29yZF8xLm1hY3JvS2V5d29yZENvZGUpKGN4dCwgZGVmKTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZGVmLmNvbXBpbGUgfHwgZGVmLnZhbGlkYXRlKSB7XG4gICAgICAgICgwLCBrZXl3b3JkXzEuZnVuY0tleXdvcmRDb2RlKShjeHQsIGRlZik7XG4gICAgfVxufVxuY29uc3QgSlNPTl9QT0lOVEVSID0gL15cXC8oPzpbXn5dfH4wfH4xKSokLztcbmNvbnN0IFJFTEFUSVZFX0pTT05fUE9JTlRFUiA9IC9eKFswLTldKykoI3xcXC8oPzpbXn5dfH4wfH4xKSopPyQvO1xuZnVuY3Rpb24gZ2V0RGF0YSgkZGF0YSwgeyBkYXRhTGV2ZWwsIGRhdGFOYW1lcywgZGF0YVBhdGhBcnIgfSkge1xuICAgIGxldCBqc29uUG9pbnRlcjtcbiAgICBsZXQgZGF0YTtcbiAgICBpZiAoJGRhdGEgPT09IFwiXCIpXG4gICAgICAgIHJldHVybiBuYW1lc18xLmRlZmF1bHQucm9vdERhdGE7XG4gICAgaWYgKCRkYXRhWzBdID09PSBcIi9cIikge1xuICAgICAgICBpZiAoIUpTT05fUE9JTlRFUi50ZXN0KCRkYXRhKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBKU09OLXBvaW50ZXI6ICR7JGRhdGF9YCk7XG4gICAgICAgIGpzb25Qb2ludGVyID0gJGRhdGE7XG4gICAgICAgIGRhdGEgPSBuYW1lc18xLmRlZmF1bHQucm9vdERhdGE7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBtYXRjaGVzID0gUkVMQVRJVkVfSlNPTl9QT0lOVEVSLmV4ZWMoJGRhdGEpO1xuICAgICAgICBpZiAoIW1hdGNoZXMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgSlNPTi1wb2ludGVyOiAkeyRkYXRhfWApO1xuICAgICAgICBjb25zdCB1cCA9ICttYXRjaGVzWzFdO1xuICAgICAgICBqc29uUG9pbnRlciA9IG1hdGNoZXNbMl07XG4gICAgICAgIGlmIChqc29uUG9pbnRlciA9PT0gXCIjXCIpIHtcbiAgICAgICAgICAgIGlmICh1cCA+PSBkYXRhTGV2ZWwpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTXNnKFwicHJvcGVydHkvaW5kZXhcIiwgdXApKTtcbiAgICAgICAgICAgIHJldHVybiBkYXRhUGF0aEFycltkYXRhTGV2ZWwgLSB1cF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHVwID4gZGF0YUxldmVsKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTXNnKFwiZGF0YVwiLCB1cCkpO1xuICAgICAgICBkYXRhID0gZGF0YU5hbWVzW2RhdGFMZXZlbCAtIHVwXTtcbiAgICAgICAgaWYgKCFqc29uUG9pbnRlcilcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBsZXQgZXhwciA9IGRhdGE7XG4gICAgY29uc3Qgc2VnbWVudHMgPSBqc29uUG9pbnRlci5zcGxpdChcIi9cIik7XG4gICAgZm9yIChjb25zdCBzZWdtZW50IG9mIHNlZ21lbnRzKSB7XG4gICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgICBkYXRhID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSR7KDAsIGNvZGVnZW5fMS5nZXRQcm9wZXJ0eSkoKDAsIHV0aWxfMS51bmVzY2FwZUpzb25Qb2ludGVyKShzZWdtZW50KSl9YDtcbiAgICAgICAgICAgIGV4cHIgPSAoMCwgY29kZWdlbl8xLl8pIGAke2V4cHJ9ICYmICR7ZGF0YX1gO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBleHByO1xuICAgIGZ1bmN0aW9uIGVycm9yTXNnKHBvaW50ZXJUeXBlLCB1cCkge1xuICAgICAgICByZXR1cm4gYENhbm5vdCBhY2Nlc3MgJHtwb2ludGVyVHlwZX0gJHt1cH0gbGV2ZWxzIHVwLCBjdXJyZW50IGxldmVsIGlzICR7ZGF0YUxldmVsfWA7XG4gICAgfVxufVxuZXhwb3J0cy5nZXREYXRhID0gZ2V0RGF0YTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY2xhc3MgVmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKGVycm9ycykge1xuICAgICAgICBzdXBlcihcInZhbGlkYXRpb24gZmFpbGVkXCIpO1xuICAgICAgICB0aGlzLmVycm9ycyA9IGVycm9ycztcbiAgICAgICAgdGhpcy5hanYgPSB0aGlzLnZhbGlkYXRpb24gPSB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IFZhbGlkYXRpb25FcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRpb25fZXJyb3IuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCByZXNvbHZlXzEgPSByZXF1aXJlKFwiLi9yZXNvbHZlXCIpO1xuY2xhc3MgTWlzc2luZ1JlZkVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKHJlc29sdmVyLCBiYXNlSWQsIHJlZiwgbXNnKSB7XG4gICAgICAgIHN1cGVyKG1zZyB8fCBgY2FuJ3QgcmVzb2x2ZSByZWZlcmVuY2UgJHtyZWZ9IGZyb20gaWQgJHtiYXNlSWR9YCk7XG4gICAgICAgIHRoaXMubWlzc2luZ1JlZiA9ICgwLCByZXNvbHZlXzEucmVzb2x2ZVVybCkocmVzb2x2ZXIsIGJhc2VJZCwgcmVmKTtcbiAgICAgICAgdGhpcy5taXNzaW5nU2NoZW1hID0gKDAsIHJlc29sdmVfMS5ub3JtYWxpemVJZCkoKDAsIHJlc29sdmVfMS5nZXRGdWxsUGF0aCkocmVzb2x2ZXIsIHRoaXMubWlzc2luZ1JlZikpO1xuICAgIH1cbn1cbmV4cG9ydHMuZGVmYXVsdCA9IE1pc3NpbmdSZWZFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlZl9lcnJvci5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVzb2x2ZVNjaGVtYSA9IGV4cG9ydHMuZ2V0Q29tcGlsaW5nU2NoZW1hID0gZXhwb3J0cy5yZXNvbHZlUmVmID0gZXhwb3J0cy5jb21waWxlU2NoZW1hID0gZXhwb3J0cy5TY2hlbWFFbnYgPSB2b2lkIDA7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi9jb2RlZ2VuXCIpO1xuY29uc3QgdmFsaWRhdGlvbl9lcnJvcl8xID0gcmVxdWlyZShcIi4uL3J1bnRpbWUvdmFsaWRhdGlvbl9lcnJvclwiKTtcbmNvbnN0IG5hbWVzXzEgPSByZXF1aXJlKFwiLi9uYW1lc1wiKTtcbmNvbnN0IHJlc29sdmVfMSA9IHJlcXVpcmUoXCIuL3Jlc29sdmVcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi91dGlsXCIpO1xuY29uc3QgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCIuL3ZhbGlkYXRlXCIpO1xuY2xhc3MgU2NoZW1hRW52IHtcbiAgICBjb25zdHJ1Y3RvcihlbnYpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB0aGlzLnJlZnMgPSB7fTtcbiAgICAgICAgdGhpcy5keW5hbWljQW5jaG9ycyA9IHt9O1xuICAgICAgICBsZXQgc2NoZW1hO1xuICAgICAgICBpZiAodHlwZW9mIGVudi5zY2hlbWEgPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgIHNjaGVtYSA9IGVudi5zY2hlbWE7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gZW52LnNjaGVtYTtcbiAgICAgICAgdGhpcy5zY2hlbWFJZCA9IGVudi5zY2hlbWFJZDtcbiAgICAgICAgdGhpcy5yb290ID0gZW52LnJvb3QgfHwgdGhpcztcbiAgICAgICAgdGhpcy5iYXNlSWQgPSAoX2EgPSBlbnYuYmFzZUlkKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoMCwgcmVzb2x2ZV8xLm5vcm1hbGl6ZUlkKShzY2hlbWEgPT09IG51bGwgfHwgc2NoZW1hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2hlbWFbZW52LnNjaGVtYUlkIHx8IFwiJGlkXCJdKTtcbiAgICAgICAgdGhpcy5zY2hlbWFQYXRoID0gZW52LnNjaGVtYVBhdGg7XG4gICAgICAgIHRoaXMubG9jYWxSZWZzID0gZW52LmxvY2FsUmVmcztcbiAgICAgICAgdGhpcy5tZXRhID0gZW52Lm1ldGE7XG4gICAgICAgIHRoaXMuJGFzeW5jID0gc2NoZW1hID09PSBudWxsIHx8IHNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc2NoZW1hLiRhc3luYztcbiAgICAgICAgdGhpcy5yZWZzID0ge307XG4gICAgfVxufVxuZXhwb3J0cy5TY2hlbWFFbnYgPSBTY2hlbWFFbnY7XG4vLyBsZXQgY29kZVNpemUgPSAwXG4vLyBsZXQgbm9kZUNvdW50ID0gMFxuLy8gQ29tcGlsZXMgc2NoZW1hIGluIFNjaGVtYUVudlxuZnVuY3Rpb24gY29tcGlsZVNjaGVtYShzY2gpIHtcbiAgICAvLyBUT0RPIHJlZmFjdG9yIC0gcmVtb3ZlIGNvbXBpbGF0aW9uc1xuICAgIGNvbnN0IF9zY2ggPSBnZXRDb21waWxpbmdTY2hlbWEuY2FsbCh0aGlzLCBzY2gpO1xuICAgIGlmIChfc2NoKVxuICAgICAgICByZXR1cm4gX3NjaDtcbiAgICBjb25zdCByb290SWQgPSAoMCwgcmVzb2x2ZV8xLmdldEZ1bGxQYXRoKSh0aGlzLm9wdHMudXJpUmVzb2x2ZXIsIHNjaC5yb290LmJhc2VJZCk7IC8vIFRPRE8gaWYgZ2V0RnVsbFBhdGggcmVtb3ZlZCAxIHRlc3RzIGZhaWxzXG4gICAgY29uc3QgeyBlczUsIGxpbmVzIH0gPSB0aGlzLm9wdHMuY29kZTtcbiAgICBjb25zdCB7IG93blByb3BlcnRpZXMgfSA9IHRoaXMub3B0cztcbiAgICBjb25zdCBnZW4gPSBuZXcgY29kZWdlbl8xLkNvZGVHZW4odGhpcy5zY29wZSwgeyBlczUsIGxpbmVzLCBvd25Qcm9wZXJ0aWVzIH0pO1xuICAgIGxldCBfVmFsaWRhdGlvbkVycm9yO1xuICAgIGlmIChzY2guJGFzeW5jKSB7XG4gICAgICAgIF9WYWxpZGF0aW9uRXJyb3IgPSBnZW4uc2NvcGVWYWx1ZShcIkVycm9yXCIsIHtcbiAgICAgICAgICAgIHJlZjogdmFsaWRhdGlvbl9lcnJvcl8xLmRlZmF1bHQsXG4gICAgICAgICAgICBjb2RlOiAoMCwgY29kZWdlbl8xLl8pIGByZXF1aXJlKFwiYWp2L2Rpc3QvcnVudGltZS92YWxpZGF0aW9uX2Vycm9yXCIpLmRlZmF1bHRgLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgdmFsaWRhdGVOYW1lID0gZ2VuLnNjb3BlTmFtZShcInZhbGlkYXRlXCIpO1xuICAgIHNjaC52YWxpZGF0ZU5hbWUgPSB2YWxpZGF0ZU5hbWU7XG4gICAgY29uc3Qgc2NoZW1hQ3h0ID0ge1xuICAgICAgICBnZW4sXG4gICAgICAgIGFsbEVycm9yczogdGhpcy5vcHRzLmFsbEVycm9ycyxcbiAgICAgICAgZGF0YTogbmFtZXNfMS5kZWZhdWx0LmRhdGEsXG4gICAgICAgIHBhcmVudERhdGE6IG5hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhLFxuICAgICAgICBwYXJlbnREYXRhUHJvcGVydHk6IG5hbWVzXzEuZGVmYXVsdC5wYXJlbnREYXRhUHJvcGVydHksXG4gICAgICAgIGRhdGFOYW1lczogW25hbWVzXzEuZGVmYXVsdC5kYXRhXSxcbiAgICAgICAgZGF0YVBhdGhBcnI6IFtjb2RlZ2VuXzEubmlsXSwgLy8gVE9ETyBjYW4gaXRzIGxlbmd0aCBiZSB1c2VkIGFzIGRhdGFMZXZlbCBpZiBuaWwgaXMgcmVtb3ZlZD9cbiAgICAgICAgZGF0YUxldmVsOiAwLFxuICAgICAgICBkYXRhVHlwZXM6IFtdLFxuICAgICAgICBkZWZpbmVkUHJvcGVydGllczogbmV3IFNldCgpLFxuICAgICAgICB0b3BTY2hlbWFSZWY6IGdlbi5zY29wZVZhbHVlKFwic2NoZW1hXCIsIHRoaXMub3B0cy5jb2RlLnNvdXJjZSA9PT0gdHJ1ZVxuICAgICAgICAgICAgPyB7IHJlZjogc2NoLnNjaGVtYSwgY29kZTogKDAsIGNvZGVnZW5fMS5zdHJpbmdpZnkpKHNjaC5zY2hlbWEpIH1cbiAgICAgICAgICAgIDogeyByZWY6IHNjaC5zY2hlbWEgfSksXG4gICAgICAgIHZhbGlkYXRlTmFtZSxcbiAgICAgICAgVmFsaWRhdGlvbkVycm9yOiBfVmFsaWRhdGlvbkVycm9yLFxuICAgICAgICBzY2hlbWE6IHNjaC5zY2hlbWEsXG4gICAgICAgIHNjaGVtYUVudjogc2NoLFxuICAgICAgICByb290SWQsXG4gICAgICAgIGJhc2VJZDogc2NoLmJhc2VJZCB8fCByb290SWQsXG4gICAgICAgIHNjaGVtYVBhdGg6IGNvZGVnZW5fMS5uaWwsXG4gICAgICAgIGVyclNjaGVtYVBhdGg6IHNjaC5zY2hlbWFQYXRoIHx8ICh0aGlzLm9wdHMuanRkID8gXCJcIiA6IFwiI1wiKSxcbiAgICAgICAgZXJyb3JQYXRoOiAoMCwgY29kZWdlbl8xLl8pIGBcIlwiYCxcbiAgICAgICAgb3B0czogdGhpcy5vcHRzLFxuICAgICAgICBzZWxmOiB0aGlzLFxuICAgIH07XG4gICAgbGV0IHNvdXJjZUNvZGU7XG4gICAgdHJ5IHtcbiAgICAgICAgdGhpcy5fY29tcGlsYXRpb25zLmFkZChzY2gpO1xuICAgICAgICAoMCwgdmFsaWRhdGVfMS52YWxpZGF0ZUZ1bmN0aW9uQ29kZSkoc2NoZW1hQ3h0KTtcbiAgICAgICAgZ2VuLm9wdGltaXplKHRoaXMub3B0cy5jb2RlLm9wdGltaXplKTtcbiAgICAgICAgLy8gZ2VuLm9wdGltaXplKDEpXG4gICAgICAgIGNvbnN0IHZhbGlkYXRlQ29kZSA9IGdlbi50b1N0cmluZygpO1xuICAgICAgICBzb3VyY2VDb2RlID0gYCR7Z2VuLnNjb3BlUmVmcyhuYW1lc18xLmRlZmF1bHQuc2NvcGUpfXJldHVybiAke3ZhbGlkYXRlQ29kZX1gO1xuICAgICAgICAvLyBjb25zb2xlLmxvZygoY29kZVNpemUgKz0gc291cmNlQ29kZS5sZW5ndGgpLCAobm9kZUNvdW50ICs9IGdlbi5ub2RlQ291bnQpKVxuICAgICAgICBpZiAodGhpcy5vcHRzLmNvZGUucHJvY2VzcylcbiAgICAgICAgICAgIHNvdXJjZUNvZGUgPSB0aGlzLm9wdHMuY29kZS5wcm9jZXNzKHNvdXJjZUNvZGUsIHNjaCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiXFxuXFxuXFxuICoqKiBcXG5cIiwgc291cmNlQ29kZSlcbiAgICAgICAgY29uc3QgbWFrZVZhbGlkYXRlID0gbmV3IEZ1bmN0aW9uKGAke25hbWVzXzEuZGVmYXVsdC5zZWxmfWAsIGAke25hbWVzXzEuZGVmYXVsdC5zY29wZX1gLCBzb3VyY2VDb2RlKTtcbiAgICAgICAgY29uc3QgdmFsaWRhdGUgPSBtYWtlVmFsaWRhdGUodGhpcywgdGhpcy5zY29wZS5nZXQoKSk7XG4gICAgICAgIHRoaXMuc2NvcGUudmFsdWUodmFsaWRhdGVOYW1lLCB7IHJlZjogdmFsaWRhdGUgfSk7XG4gICAgICAgIHZhbGlkYXRlLmVycm9ycyA9IG51bGw7XG4gICAgICAgIHZhbGlkYXRlLnNjaGVtYSA9IHNjaC5zY2hlbWE7XG4gICAgICAgIHZhbGlkYXRlLnNjaGVtYUVudiA9IHNjaDtcbiAgICAgICAgaWYgKHNjaC4kYXN5bmMpXG4gICAgICAgICAgICB2YWxpZGF0ZS4kYXN5bmMgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5vcHRzLmNvZGUuc291cmNlID09PSB0cnVlKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZS5zb3VyY2UgPSB7IHZhbGlkYXRlTmFtZSwgdmFsaWRhdGVDb2RlLCBzY29wZVZhbHVlczogZ2VuLl92YWx1ZXMgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vcHRzLnVuZXZhbHVhdGVkKSB7XG4gICAgICAgICAgICBjb25zdCB7IHByb3BzLCBpdGVtcyB9ID0gc2NoZW1hQ3h0O1xuICAgICAgICAgICAgdmFsaWRhdGUuZXZhbHVhdGVkID0ge1xuICAgICAgICAgICAgICAgIHByb3BzOiBwcm9wcyBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lID8gdW5kZWZpbmVkIDogcHJvcHMsXG4gICAgICAgICAgICAgICAgaXRlbXM6IGl0ZW1zIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUgPyB1bmRlZmluZWQgOiBpdGVtcyxcbiAgICAgICAgICAgICAgICBkeW5hbWljUHJvcHM6IHByb3BzIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUsXG4gICAgICAgICAgICAgICAgZHluYW1pY0l0ZW1zOiBpdGVtcyBpbnN0YW5jZW9mIGNvZGVnZW5fMS5OYW1lLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGlmICh2YWxpZGF0ZS5zb3VyY2UpXG4gICAgICAgICAgICAgICAgdmFsaWRhdGUuc291cmNlLmV2YWx1YXRlZCA9ICgwLCBjb2RlZ2VuXzEuc3RyaW5naWZ5KSh2YWxpZGF0ZS5ldmFsdWF0ZWQpO1xuICAgICAgICB9XG4gICAgICAgIHNjaC52YWxpZGF0ZSA9IHZhbGlkYXRlO1xuICAgICAgICByZXR1cm4gc2NoO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBkZWxldGUgc2NoLnZhbGlkYXRlO1xuICAgICAgICBkZWxldGUgc2NoLnZhbGlkYXRlTmFtZTtcbiAgICAgICAgaWYgKHNvdXJjZUNvZGUpXG4gICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcIkVycm9yIGNvbXBpbGluZyBzY2hlbWEsIGZ1bmN0aW9uIGNvZGU6XCIsIHNvdXJjZUNvZGUpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlxcblxcblxcbiAqKiogXFxuXCIsIHNvdXJjZUNvZGUsIHRoaXMub3B0cylcbiAgICAgICAgdGhyb3cgZTtcbiAgICB9XG4gICAgZmluYWxseSB7XG4gICAgICAgIHRoaXMuX2NvbXBpbGF0aW9ucy5kZWxldGUoc2NoKTtcbiAgICB9XG59XG5leHBvcnRzLmNvbXBpbGVTY2hlbWEgPSBjb21waWxlU2NoZW1hO1xuZnVuY3Rpb24gcmVzb2x2ZVJlZihyb290LCBiYXNlSWQsIHJlZikge1xuICAgIHZhciBfYTtcbiAgICByZWYgPSAoMCwgcmVzb2x2ZV8xLnJlc29sdmVVcmwpKHRoaXMub3B0cy51cmlSZXNvbHZlciwgYmFzZUlkLCByZWYpO1xuICAgIGNvbnN0IHNjaE9yRnVuYyA9IHJvb3QucmVmc1tyZWZdO1xuICAgIGlmIChzY2hPckZ1bmMpXG4gICAgICAgIHJldHVybiBzY2hPckZ1bmM7XG4gICAgbGV0IF9zY2ggPSByZXNvbHZlLmNhbGwodGhpcywgcm9vdCwgcmVmKTtcbiAgICBpZiAoX3NjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IHNjaGVtYSA9IChfYSA9IHJvb3QubG9jYWxSZWZzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbcmVmXTsgLy8gVE9ETyBtYXliZSBsb2NhbFJlZnMgc2hvdWxkIGhvbGQgU2NoZW1hRW52XG4gICAgICAgIGNvbnN0IHsgc2NoZW1hSWQgfSA9IHRoaXMub3B0cztcbiAgICAgICAgaWYgKHNjaGVtYSlcbiAgICAgICAgICAgIF9zY2ggPSBuZXcgU2NoZW1hRW52KHsgc2NoZW1hLCBzY2hlbWFJZCwgcm9vdCwgYmFzZUlkIH0pO1xuICAgIH1cbiAgICBpZiAoX3NjaCA9PT0gdW5kZWZpbmVkKVxuICAgICAgICByZXR1cm47XG4gICAgcmV0dXJuIChyb290LnJlZnNbcmVmXSA9IGlubGluZU9yQ29tcGlsZS5jYWxsKHRoaXMsIF9zY2gpKTtcbn1cbmV4cG9ydHMucmVzb2x2ZVJlZiA9IHJlc29sdmVSZWY7XG5mdW5jdGlvbiBpbmxpbmVPckNvbXBpbGUoc2NoKSB7XG4gICAgaWYgKCgwLCByZXNvbHZlXzEuaW5saW5lUmVmKShzY2guc2NoZW1hLCB0aGlzLm9wdHMuaW5saW5lUmVmcykpXG4gICAgICAgIHJldHVybiBzY2guc2NoZW1hO1xuICAgIHJldHVybiBzY2gudmFsaWRhdGUgPyBzY2ggOiBjb21waWxlU2NoZW1hLmNhbGwodGhpcywgc2NoKTtcbn1cbi8vIEluZGV4IG9mIHNjaGVtYSBjb21waWxhdGlvbiBpbiB0aGUgY3VycmVudGx5IGNvbXBpbGVkIGxpc3RcbmZ1bmN0aW9uIGdldENvbXBpbGluZ1NjaGVtYShzY2hFbnYpIHtcbiAgICBmb3IgKGNvbnN0IHNjaCBvZiB0aGlzLl9jb21waWxhdGlvbnMpIHtcbiAgICAgICAgaWYgKHNhbWVTY2hlbWFFbnYoc2NoLCBzY2hFbnYpKVxuICAgICAgICAgICAgcmV0dXJuIHNjaDtcbiAgICB9XG59XG5leHBvcnRzLmdldENvbXBpbGluZ1NjaGVtYSA9IGdldENvbXBpbGluZ1NjaGVtYTtcbmZ1bmN0aW9uIHNhbWVTY2hlbWFFbnYoczEsIHMyKSB7XG4gICAgcmV0dXJuIHMxLnNjaGVtYSA9PT0gczIuc2NoZW1hICYmIHMxLnJvb3QgPT09IHMyLnJvb3QgJiYgczEuYmFzZUlkID09PSBzMi5iYXNlSWQ7XG59XG4vLyByZXNvbHZlIGFuZCBjb21waWxlIHRoZSByZWZlcmVuY2VzICgkcmVmKVxuLy8gVE9ETyByZXR1cm5zIEFueVNjaGVtYU9iamVjdCAoaWYgdGhlIHNjaGVtYSBjYW4gYmUgaW5saW5lZCkgb3IgdmFsaWRhdGlvbiBmdW5jdGlvblxuZnVuY3Rpb24gcmVzb2x2ZShyb290LCAvLyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcm9vdCBzY2hlbWEgZm9yIHRoZSBjdXJyZW50IHNjaGVtYVxucmVmIC8vIHJlZmVyZW5jZSB0byByZXNvbHZlXG4pIHtcbiAgICBsZXQgc2NoO1xuICAgIHdoaWxlICh0eXBlb2YgKHNjaCA9IHRoaXMucmVmc1tyZWZdKSA9PSBcInN0cmluZ1wiKVxuICAgICAgICByZWYgPSBzY2g7XG4gICAgcmV0dXJuIHNjaCB8fCB0aGlzLnNjaGVtYXNbcmVmXSB8fCByZXNvbHZlU2NoZW1hLmNhbGwodGhpcywgcm9vdCwgcmVmKTtcbn1cbi8vIFJlc29sdmUgc2NoZW1hLCBpdHMgcm9vdCBhbmQgYmFzZUlkXG5mdW5jdGlvbiByZXNvbHZlU2NoZW1hKHJvb3QsIC8vIHJvb3Qgb2JqZWN0IHdpdGggcHJvcGVydGllcyBzY2hlbWEsIHJlZnMgVE9ETyBiZWxvdyBTY2hlbWFFbnYgaXMgYXNzaWduZWQgdG8gaXRcbnJlZiAvLyByZWZlcmVuY2UgdG8gcmVzb2x2ZVxuKSB7XG4gICAgY29uc3QgcCA9IHRoaXMub3B0cy51cmlSZXNvbHZlci5wYXJzZShyZWYpO1xuICAgIGNvbnN0IHJlZlBhdGggPSAoMCwgcmVzb2x2ZV8xLl9nZXRGdWxsUGF0aCkodGhpcy5vcHRzLnVyaVJlc29sdmVyLCBwKTtcbiAgICBsZXQgYmFzZUlkID0gKDAsIHJlc29sdmVfMS5nZXRGdWxsUGF0aCkodGhpcy5vcHRzLnVyaVJlc29sdmVyLCByb290LmJhc2VJZCwgdW5kZWZpbmVkKTtcbiAgICAvLyBUT0RPIGBPYmplY3Qua2V5cyhyb290LnNjaGVtYSkubGVuZ3RoID4gMGAgc2hvdWxkIG5vdCBiZSBuZWVkZWQgLSBidXQgcmVtb3ZpbmcgYnJlYWtzIDIgdGVzdHNcbiAgICBpZiAoT2JqZWN0LmtleXMocm9vdC5zY2hlbWEpLmxlbmd0aCA+IDAgJiYgcmVmUGF0aCA9PT0gYmFzZUlkKSB7XG4gICAgICAgIHJldHVybiBnZXRKc29uUG9pbnRlci5jYWxsKHRoaXMsIHAsIHJvb3QpO1xuICAgIH1cbiAgICBjb25zdCBpZCA9ICgwLCByZXNvbHZlXzEubm9ybWFsaXplSWQpKHJlZlBhdGgpO1xuICAgIGNvbnN0IHNjaE9yUmVmID0gdGhpcy5yZWZzW2lkXSB8fCB0aGlzLnNjaGVtYXNbaWRdO1xuICAgIGlmICh0eXBlb2Ygc2NoT3JSZWYgPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBjb25zdCBzY2ggPSByZXNvbHZlU2NoZW1hLmNhbGwodGhpcywgcm9vdCwgc2NoT3JSZWYpO1xuICAgICAgICBpZiAodHlwZW9mIChzY2ggPT09IG51bGwgfHwgc2NoID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2guc2NoZW1hKSAhPT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgcmV0dXJuIGdldEpzb25Qb2ludGVyLmNhbGwodGhpcywgcCwgc2NoKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiAoc2NoT3JSZWYgPT09IG51bGwgfHwgc2NoT3JSZWYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaE9yUmVmLnNjaGVtYSkgIT09IFwib2JqZWN0XCIpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAoIXNjaE9yUmVmLnZhbGlkYXRlKVxuICAgICAgICBjb21waWxlU2NoZW1hLmNhbGwodGhpcywgc2NoT3JSZWYpO1xuICAgIGlmIChpZCA9PT0gKDAsIHJlc29sdmVfMS5ub3JtYWxpemVJZCkocmVmKSkge1xuICAgICAgICBjb25zdCB7IHNjaGVtYSB9ID0gc2NoT3JSZWY7XG4gICAgICAgIGNvbnN0IHsgc2NoZW1hSWQgfSA9IHRoaXMub3B0cztcbiAgICAgICAgY29uc3Qgc2NoSWQgPSBzY2hlbWFbc2NoZW1hSWRdO1xuICAgICAgICBpZiAoc2NoSWQpXG4gICAgICAgICAgICBiYXNlSWQgPSAoMCwgcmVzb2x2ZV8xLnJlc29sdmVVcmwpKHRoaXMub3B0cy51cmlSZXNvbHZlciwgYmFzZUlkLCBzY2hJZCk7XG4gICAgICAgIHJldHVybiBuZXcgU2NoZW1hRW52KHsgc2NoZW1hLCBzY2hlbWFJZCwgcm9vdCwgYmFzZUlkIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0SnNvblBvaW50ZXIuY2FsbCh0aGlzLCBwLCBzY2hPclJlZik7XG59XG5leHBvcnRzLnJlc29sdmVTY2hlbWEgPSByZXNvbHZlU2NoZW1hO1xuY29uc3QgUFJFVkVOVF9TQ09QRV9DSEFOR0UgPSBuZXcgU2V0KFtcbiAgICBcInByb3BlcnRpZXNcIixcbiAgICBcInBhdHRlcm5Qcm9wZXJ0aWVzXCIsXG4gICAgXCJlbnVtXCIsXG4gICAgXCJkZXBlbmRlbmNpZXNcIixcbiAgICBcImRlZmluaXRpb25zXCIsXG5dKTtcbmZ1bmN0aW9uIGdldEpzb25Qb2ludGVyKHBhcnNlZFJlZiwgeyBiYXNlSWQsIHNjaGVtYSwgcm9vdCB9KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICgoKF9hID0gcGFyc2VkUmVmLmZyYWdtZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbMF0pICE9PSBcIi9cIilcbiAgICAgICAgcmV0dXJuO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJzZWRSZWYuZnJhZ21lbnQuc2xpY2UoMSkuc3BsaXQoXCIvXCIpKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09PSBcImJvb2xlYW5cIilcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgcGFydFNjaGVtYSA9IHNjaGVtYVsoMCwgdXRpbF8xLnVuZXNjYXBlRnJhZ21lbnQpKHBhcnQpXTtcbiAgICAgICAgaWYgKHBhcnRTY2hlbWEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc2NoZW1hID0gcGFydFNjaGVtYTtcbiAgICAgICAgLy8gVE9ETyBQUkVWRU5UX1NDT1BFX0NIQU5HRSBjb3VsZCBiZSBkZWZpbmVkIGluIGtleXdvcmQgZGVmP1xuICAgICAgICBjb25zdCBzY2hJZCA9IHR5cGVvZiBzY2hlbWEgPT09IFwib2JqZWN0XCIgJiYgc2NoZW1hW3RoaXMub3B0cy5zY2hlbWFJZF07XG4gICAgICAgIGlmICghUFJFVkVOVF9TQ09QRV9DSEFOR0UuaGFzKHBhcnQpICYmIHNjaElkKSB7XG4gICAgICAgICAgICBiYXNlSWQgPSAoMCwgcmVzb2x2ZV8xLnJlc29sdmVVcmwpKHRoaXMub3B0cy51cmlSZXNvbHZlciwgYmFzZUlkLCBzY2hJZCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgbGV0IGVudjtcbiAgICBpZiAodHlwZW9mIHNjaGVtYSAhPSBcImJvb2xlYW5cIiAmJiBzY2hlbWEuJHJlZiAmJiAhKDAsIHV0aWxfMS5zY2hlbWFIYXNSdWxlc0J1dFJlZikoc2NoZW1hLCB0aGlzLlJVTEVTKSkge1xuICAgICAgICBjb25zdCAkcmVmID0gKDAsIHJlc29sdmVfMS5yZXNvbHZlVXJsKSh0aGlzLm9wdHMudXJpUmVzb2x2ZXIsIGJhc2VJZCwgc2NoZW1hLiRyZWYpO1xuICAgICAgICBlbnYgPSByZXNvbHZlU2NoZW1hLmNhbGwodGhpcywgcm9vdCwgJHJlZik7XG4gICAgfVxuICAgIC8vIGV2ZW4gdGhvdWdoIHJlc29sdXRpb24gZmFpbGVkIHdlIG5lZWQgdG8gcmV0dXJuIFNjaGVtYUVudiB0byB0aHJvdyBleGNlcHRpb25cbiAgICAvLyBzbyB0aGF0IGNvbXBpbGVBc3luYyBsb2FkcyBtaXNzaW5nIHNjaGVtYS5cbiAgICBjb25zdCB7IHNjaGVtYUlkIH0gPSB0aGlzLm9wdHM7XG4gICAgZW52ID0gZW52IHx8IG5ldyBTY2hlbWFFbnYoeyBzY2hlbWEsIHNjaGVtYUlkLCByb290LCBiYXNlSWQgfSk7XG4gICAgaWYgKGVudi5zY2hlbWEgIT09IGVudi5yb290LnNjaGVtYSlcbiAgICAgICAgcmV0dXJuIGVudjtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgSEVYIH0gPSByZXF1aXJlKCcuL3Njb3BlZENoYXJzJylcblxuY29uc3QgSVBWNF9SRUcgPSAvXig/Oig/OjI1WzAtNV18MlswLTRdXFxkfDFcXGR7Mn18WzEtOV1cXGR8XFxkKVxcLil7M30oPzoyNVswLTVdfDJbMC00XVxcZHwxXFxkezJ9fFsxLTldXFxkfFxcZCkkL3VcblxuZnVuY3Rpb24gbm9ybWFsaXplSVB2NCAoaG9zdCkge1xuICBpZiAoZmluZFRva2VuKGhvc3QsICcuJykgPCAzKSB7IHJldHVybiB7IGhvc3QsIGlzSVBWNDogZmFsc2UgfSB9XG4gIGNvbnN0IG1hdGNoZXMgPSBob3N0Lm1hdGNoKElQVjRfUkVHKSB8fCBbXVxuICBjb25zdCBbYWRkcmVzc10gPSBtYXRjaGVzXG4gIGlmIChhZGRyZXNzKSB7XG4gICAgcmV0dXJuIHsgaG9zdDogc3RyaXBMZWFkaW5nWmVyb3MoYWRkcmVzcywgJy4nKSwgaXNJUFY0OiB0cnVlIH1cbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyBob3N0LCBpc0lQVjQ6IGZhbHNlIH1cbiAgfVxufVxuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nW119IGlucHV0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtrZWVwWmVybz1mYWxzZV1cbiAqIEByZXR1cm5zIHtzdHJpbmd8dW5kZWZpbmVkfVxuICovXG5mdW5jdGlvbiBzdHJpbmdBcnJheVRvSGV4U3RyaXBwZWQgKGlucHV0LCBrZWVwWmVybyA9IGZhbHNlKSB7XG4gIGxldCBhY2MgPSAnJ1xuICBsZXQgc3RyaXAgPSB0cnVlXG4gIGZvciAoY29uc3QgYyBvZiBpbnB1dCkge1xuICAgIGlmIChIRVhbY10gPT09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmIChjICE9PSAnMCcgJiYgc3RyaXAgPT09IHRydWUpIHN0cmlwID0gZmFsc2VcbiAgICBpZiAoIXN0cmlwKSBhY2MgKz0gY1xuICB9XG4gIGlmIChrZWVwWmVybyAmJiBhY2MubGVuZ3RoID09PSAwKSBhY2MgPSAnMCdcbiAgcmV0dXJuIGFjY1xufVxuXG5mdW5jdGlvbiBnZXRJUFY2IChpbnB1dCkge1xuICBsZXQgdG9rZW5Db3VudCA9IDBcbiAgY29uc3Qgb3V0cHV0ID0geyBlcnJvcjogZmFsc2UsIGFkZHJlc3M6ICcnLCB6b25lOiAnJyB9XG4gIGNvbnN0IGFkZHJlc3MgPSBbXVxuICBjb25zdCBidWZmZXIgPSBbXVxuICBsZXQgaXNab25lID0gZmFsc2VcbiAgbGV0IGVuZGlwdjZFbmNvdW50ZXJlZCA9IGZhbHNlXG4gIGxldCBlbmRJcHY2ID0gZmFsc2VcblxuICBmdW5jdGlvbiBjb25zdW1lICgpIHtcbiAgICBpZiAoYnVmZmVyLmxlbmd0aCkge1xuICAgICAgaWYgKGlzWm9uZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY29uc3QgaGV4ID0gc3RyaW5nQXJyYXlUb0hleFN0cmlwcGVkKGJ1ZmZlcilcbiAgICAgICAgaWYgKGhleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgYWRkcmVzcy5wdXNoKGhleClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvdXRwdXQuZXJyb3IgPSB0cnVlXG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJ1ZmZlci5sZW5ndGggPSAwXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgY3Vyc29yID0gaW5wdXRbaV1cbiAgICBpZiAoY3Vyc29yID09PSAnWycgfHwgY3Vyc29yID09PSAnXScpIHsgY29udGludWUgfVxuICAgIGlmIChjdXJzb3IgPT09ICc6Jykge1xuICAgICAgaWYgKGVuZGlwdjZFbmNvdW50ZXJlZCA9PT0gdHJ1ZSkge1xuICAgICAgICBlbmRJcHY2ID0gdHJ1ZVxuICAgICAgfVxuICAgICAgaWYgKCFjb25zdW1lKCkpIHsgYnJlYWsgfVxuICAgICAgdG9rZW5Db3VudCsrXG4gICAgICBhZGRyZXNzLnB1c2goJzonKVxuICAgICAgaWYgKHRva2VuQ291bnQgPiA3KSB7XG4gICAgICAgIC8vIG5vdCB2YWxpZFxuICAgICAgICBvdXRwdXQuZXJyb3IgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBpZiAoaSAtIDEgPj0gMCAmJiBpbnB1dFtpIC0gMV0gPT09ICc6Jykge1xuICAgICAgICBlbmRpcHY2RW5jb3VudGVyZWQgPSB0cnVlXG4gICAgICB9XG4gICAgICBjb250aW51ZVxuICAgIH0gZWxzZSBpZiAoY3Vyc29yID09PSAnJScpIHtcbiAgICAgIGlmICghY29uc3VtZSgpKSB7IGJyZWFrIH1cbiAgICAgIC8vIHN3aXRjaCB0byB6b25lIGRldGVjdGlvblxuICAgICAgaXNab25lID0gdHJ1ZVxuICAgIH0gZWxzZSB7XG4gICAgICBidWZmZXIucHVzaChjdXJzb3IpXG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgfVxuICBpZiAoYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChpc1pvbmUpIHtcbiAgICAgIG91dHB1dC56b25lID0gYnVmZmVyLmpvaW4oJycpXG4gICAgfSBlbHNlIGlmIChlbmRJcHY2KSB7XG4gICAgICBhZGRyZXNzLnB1c2goYnVmZmVyLmpvaW4oJycpKVxuICAgIH0gZWxzZSB7XG4gICAgICBhZGRyZXNzLnB1c2goc3RyaW5nQXJyYXlUb0hleFN0cmlwcGVkKGJ1ZmZlcikpXG4gICAgfVxuICB9XG4gIG91dHB1dC5hZGRyZXNzID0gYWRkcmVzcy5qb2luKCcnKVxuICByZXR1cm4gb3V0cHV0XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUlQdjYgKGhvc3QpIHtcbiAgaWYgKGZpbmRUb2tlbihob3N0LCAnOicpIDwgMikgeyByZXR1cm4geyBob3N0LCBpc0lQVjY6IGZhbHNlIH0gfVxuICBjb25zdCBpcHY2ID0gZ2V0SVBWNihob3N0KVxuXG4gIGlmICghaXB2Ni5lcnJvcikge1xuICAgIGxldCBuZXdIb3N0ID0gaXB2Ni5hZGRyZXNzXG4gICAgbGV0IGVzY2FwZWRIb3N0ID0gaXB2Ni5hZGRyZXNzXG4gICAgaWYgKGlwdjYuem9uZSkge1xuICAgICAgbmV3SG9zdCArPSAnJScgKyBpcHY2LnpvbmVcbiAgICAgIGVzY2FwZWRIb3N0ICs9ICclMjUnICsgaXB2Ni56b25lXG4gICAgfVxuICAgIHJldHVybiB7IGhvc3Q6IG5ld0hvc3QsIGVzY2FwZWRIb3N0LCBpc0lQVjY6IHRydWUgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB7IGhvc3QsIGlzSVBWNjogZmFsc2UgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwTGVhZGluZ1plcm9zIChzdHIsIHRva2VuKSB7XG4gIGxldCBvdXQgPSAnJ1xuICBsZXQgc2tpcCA9IHRydWVcbiAgY29uc3QgbCA9IHN0ci5sZW5ndGhcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBjID0gc3RyW2ldXG4gICAgaWYgKGMgPT09ICcwJyAmJiBza2lwKSB7XG4gICAgICBpZiAoKGkgKyAxIDw9IGwgJiYgc3RyW2kgKyAxXSA9PT0gdG9rZW4pIHx8IGkgKyAxID09PSBsKSB7XG4gICAgICAgIG91dCArPSBjXG4gICAgICAgIHNraXAgPSBmYWxzZVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoYyA9PT0gdG9rZW4pIHtcbiAgICAgICAgc2tpcCA9IHRydWVcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNraXAgPSBmYWxzZVxuICAgICAgfVxuICAgICAgb3V0ICs9IGNcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiBmaW5kVG9rZW4gKHN0ciwgdG9rZW4pIHtcbiAgbGV0IGluZCA9IDBcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3RyW2ldID09PSB0b2tlbikgaW5kKytcbiAgfVxuICByZXR1cm4gaW5kXG59XG5cbmNvbnN0IFJEUzEgPSAvXlxcLlxcLj9cXC8vdVxuY29uc3QgUkRTMiA9IC9eXFwvXFwuKD86XFwvfCQpL3VcbmNvbnN0IFJEUzMgPSAvXlxcL1xcLlxcLig/OlxcL3wkKS91XG5jb25zdCBSRFM1ID0gL15cXC8/KD86LnxcXG4pKj8oPz1cXC98JCkvdVxuXG5mdW5jdGlvbiByZW1vdmVEb3RTZWdtZW50cyAoaW5wdXQpIHtcbiAgY29uc3Qgb3V0cHV0ID0gW11cblxuICB3aGlsZSAoaW5wdXQubGVuZ3RoKSB7XG4gICAgaWYgKGlucHV0Lm1hdGNoKFJEUzEpKSB7XG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoUkRTMSwgJycpXG4gICAgfSBlbHNlIGlmIChpbnB1dC5tYXRjaChSRFMyKSkge1xuICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKFJEUzIsICcvJylcbiAgICB9IGVsc2UgaWYgKGlucHV0Lm1hdGNoKFJEUzMpKSB7XG4gICAgICBpbnB1dCA9IGlucHV0LnJlcGxhY2UoUkRTMywgJy8nKVxuICAgICAgb3V0cHV0LnBvcCgpXG4gICAgfSBlbHNlIGlmIChpbnB1dCA9PT0gJy4nIHx8IGlucHV0ID09PSAnLi4nKSB7XG4gICAgICBpbnB1dCA9ICcnXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGltID0gaW5wdXQubWF0Y2goUkRTNSlcbiAgICAgIGlmIChpbSkge1xuICAgICAgICBjb25zdCBzID0gaW1bMF1cbiAgICAgICAgaW5wdXQgPSBpbnB1dC5zbGljZShzLmxlbmd0aClcbiAgICAgICAgb3V0cHV0LnB1c2gocylcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5leHBlY3RlZCBkb3Qgc2VnbWVudCBjb25kaXRpb24nKVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNvbXBvbmVudEVuY29kaW5nIChjb21wb25lbnRzLCBlc2MpIHtcbiAgY29uc3QgZnVuYyA9IGVzYyAhPT0gdHJ1ZSA/IGVzY2FwZSA6IHVuZXNjYXBlXG4gIGlmIChjb21wb25lbnRzLnNjaGVtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgY29tcG9uZW50cy5zY2hlbWUgPSBmdW5jKGNvbXBvbmVudHMuc2NoZW1lKVxuICB9XG4gIGlmIChjb21wb25lbnRzLnVzZXJpbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb21wb25lbnRzLnVzZXJpbmZvID0gZnVuYyhjb21wb25lbnRzLnVzZXJpbmZvKVxuICB9XG4gIGlmIChjb21wb25lbnRzLmhvc3QgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbXBvbmVudHMuaG9zdCA9IGZ1bmMoY29tcG9uZW50cy5ob3N0KVxuICB9XG4gIGlmIChjb21wb25lbnRzLnBhdGggIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbXBvbmVudHMucGF0aCA9IGZ1bmMoY29tcG9uZW50cy5wYXRoKVxuICB9XG4gIGlmIChjb21wb25lbnRzLnF1ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb21wb25lbnRzLnF1ZXJ5ID0gZnVuYyhjb21wb25lbnRzLnF1ZXJ5KVxuICB9XG4gIGlmIChjb21wb25lbnRzLmZyYWdtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb21wb25lbnRzLmZyYWdtZW50ID0gZnVuYyhjb21wb25lbnRzLmZyYWdtZW50KVxuICB9XG4gIHJldHVybiBjb21wb25lbnRzXG59XG5cbmZ1bmN0aW9uIHJlY29tcG9zZUF1dGhvcml0eSAoY29tcG9uZW50cykge1xuICBjb25zdCB1cmlUb2tlbnMgPSBbXVxuXG4gIGlmIChjb21wb25lbnRzLnVzZXJpbmZvICE9PSB1bmRlZmluZWQpIHtcbiAgICB1cmlUb2tlbnMucHVzaChjb21wb25lbnRzLnVzZXJpbmZvKVxuICAgIHVyaVRva2Vucy5wdXNoKCdAJylcbiAgfVxuXG4gIGlmIChjb21wb25lbnRzLmhvc3QgIT09IHVuZGVmaW5lZCkge1xuICAgIGxldCBob3N0ID0gdW5lc2NhcGUoY29tcG9uZW50cy5ob3N0KVxuICAgIGNvbnN0IGlwVjRyZXMgPSBub3JtYWxpemVJUHY0KGhvc3QpXG5cbiAgICBpZiAoaXBWNHJlcy5pc0lQVjQpIHtcbiAgICAgIGhvc3QgPSBpcFY0cmVzLmhvc3RcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaXBWNnJlcyA9IG5vcm1hbGl6ZUlQdjYoaXBWNHJlcy5ob3N0KVxuICAgICAgaWYgKGlwVjZyZXMuaXNJUFY2ID09PSB0cnVlKSB7XG4gICAgICAgIGhvc3QgPSBgWyR7aXBWNnJlcy5lc2NhcGVkSG9zdH1dYFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaG9zdCA9IGNvbXBvbmVudHMuaG9zdFxuICAgICAgfVxuICAgIH1cbiAgICB1cmlUb2tlbnMucHVzaChob3N0KVxuICB9XG5cbiAgaWYgKHR5cGVvZiBjb21wb25lbnRzLnBvcnQgPT09ICdudW1iZXInIHx8IHR5cGVvZiBjb21wb25lbnRzLnBvcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgdXJpVG9rZW5zLnB1c2goJzonKVxuICAgIHVyaVRva2Vucy5wdXNoKFN0cmluZyhjb21wb25lbnRzLnBvcnQpKVxuICB9XG5cbiAgcmV0dXJuIHVyaVRva2Vucy5sZW5ndGggPyB1cmlUb2tlbnMuam9pbignJykgOiB1bmRlZmluZWRcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICByZWNvbXBvc2VBdXRob3JpdHksXG4gIG5vcm1hbGl6ZUNvbXBvbmVudEVuY29kaW5nLFxuICByZW1vdmVEb3RTZWdtZW50cyxcbiAgbm9ybWFsaXplSVB2NCxcbiAgbm9ybWFsaXplSVB2NixcbiAgc3RyaW5nQXJyYXlUb0hleFN0cmlwcGVkXG59XG4iLCIndXNlIHN0cmljdCdcblxuY29uc3QgSEVYID0ge1xuICAwOiAwLFxuICAxOiAxLFxuICAyOiAyLFxuICAzOiAzLFxuICA0OiA0LFxuICA1OiA1LFxuICA2OiA2LFxuICA3OiA3LFxuICA4OiA4LFxuICA5OiA5LFxuICBhOiAxMCxcbiAgQTogMTAsXG4gIGI6IDExLFxuICBCOiAxMSxcbiAgYzogMTIsXG4gIEM6IDEyLFxuICBkOiAxMyxcbiAgRDogMTMsXG4gIGU6IDE0LFxuICBFOiAxNCxcbiAgZjogMTUsXG4gIEY6IDE1XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBIRVhcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5jb25zdCBVVUlEX1JFRyA9IC9eW1xcZGEtZl17OH0tW1xcZGEtZl17NH0tW1xcZGEtZl17NH0tW1xcZGEtZl17NH0tW1xcZGEtZl17MTJ9JC9pdVxuY29uc3QgVVJOX1JFRyA9IC8oW1xcZGEtel1bXFxkXFwtYS16XXswLDMxfSk6KCg/OltcXHchJCcoKSorLFxcLS46Oz1AXXwlW1xcZGEtZl17Mn0pKykvaXVcblxuZnVuY3Rpb24gaXNTZWN1cmUgKHdzQ29tcG9uZW50cykge1xuICByZXR1cm4gdHlwZW9mIHdzQ29tcG9uZW50cy5zZWN1cmUgPT09ICdib29sZWFuJyA/IHdzQ29tcG9uZW50cy5zZWN1cmUgOiBTdHJpbmcod3NDb21wb25lbnRzLnNjaGVtZSkudG9Mb3dlckNhc2UoKSA9PT0gJ3dzcydcbn1cblxuZnVuY3Rpb24gaHR0cFBhcnNlIChjb21wb25lbnRzKSB7XG4gIGlmICghY29tcG9uZW50cy5ob3N0KSB7XG4gICAgY29tcG9uZW50cy5lcnJvciA9IGNvbXBvbmVudHMuZXJyb3IgfHwgJ0hUVFAgVVJJcyBtdXN0IGhhdmUgYSBob3N0LidcbiAgfVxuXG4gIHJldHVybiBjb21wb25lbnRzXG59XG5cbmZ1bmN0aW9uIGh0dHBTZXJpYWxpemUgKGNvbXBvbmVudHMpIHtcbiAgY29uc3Qgc2VjdXJlID0gU3RyaW5nKGNvbXBvbmVudHMuc2NoZW1lKS50b0xvd2VyQ2FzZSgpID09PSAnaHR0cHMnXG5cbiAgLy8gbm9ybWFsaXplIHRoZSBkZWZhdWx0IHBvcnRcbiAgaWYgKGNvbXBvbmVudHMucG9ydCA9PT0gKHNlY3VyZSA/IDQ0MyA6IDgwKSB8fCBjb21wb25lbnRzLnBvcnQgPT09ICcnKSB7XG4gICAgY29tcG9uZW50cy5wb3J0ID0gdW5kZWZpbmVkXG4gIH1cblxuICAvLyBub3JtYWxpemUgdGhlIGVtcHR5IHBhdGhcbiAgaWYgKCFjb21wb25lbnRzLnBhdGgpIHtcbiAgICBjb21wb25lbnRzLnBhdGggPSAnLydcbiAgfVxuXG4gIC8vIE5PVEU6IFdlIGRvIG5vdCBwYXJzZSBxdWVyeSBzdHJpbmdzIGZvciBIVFRQIFVSSXNcbiAgLy8gYXMgV1dXIEZvcm0gVXJsIEVuY29kZWQgcXVlcnkgc3RyaW5ncyBhcmUgcGFydCBvZiB0aGUgSFRNTDQrIHNwZWMsXG4gIC8vIGFuZCBub3QgdGhlIEhUVFAgc3BlYy5cblxuICByZXR1cm4gY29tcG9uZW50c1xufVxuXG5mdW5jdGlvbiB3c1BhcnNlICh3c0NvbXBvbmVudHMpIHtcbi8vIGluZGljYXRlIGlmIHRoZSBzZWN1cmUgZmxhZyBpcyBzZXRcbiAgd3NDb21wb25lbnRzLnNlY3VyZSA9IGlzU2VjdXJlKHdzQ29tcG9uZW50cylcblxuICAvLyBjb25zdHJ1Y3QgcmVzb3VjZSBuYW1lXG4gIHdzQ29tcG9uZW50cy5yZXNvdXJjZU5hbWUgPSAod3NDb21wb25lbnRzLnBhdGggfHwgJy8nKSArICh3c0NvbXBvbmVudHMucXVlcnkgPyAnPycgKyB3c0NvbXBvbmVudHMucXVlcnkgOiAnJylcbiAgd3NDb21wb25lbnRzLnBhdGggPSB1bmRlZmluZWRcbiAgd3NDb21wb25lbnRzLnF1ZXJ5ID0gdW5kZWZpbmVkXG5cbiAgcmV0dXJuIHdzQ29tcG9uZW50c1xufVxuXG5mdW5jdGlvbiB3c1NlcmlhbGl6ZSAod3NDb21wb25lbnRzKSB7XG4vLyBub3JtYWxpemUgdGhlIGRlZmF1bHQgcG9ydFxuICBpZiAod3NDb21wb25lbnRzLnBvcnQgPT09IChpc1NlY3VyZSh3c0NvbXBvbmVudHMpID8gNDQzIDogODApIHx8IHdzQ29tcG9uZW50cy5wb3J0ID09PSAnJykge1xuICAgIHdzQ29tcG9uZW50cy5wb3J0ID0gdW5kZWZpbmVkXG4gIH1cblxuICAvLyBlbnN1cmUgc2NoZW1lIG1hdGNoZXMgc2VjdXJlIGZsYWdcbiAgaWYgKHR5cGVvZiB3c0NvbXBvbmVudHMuc2VjdXJlID09PSAnYm9vbGVhbicpIHtcbiAgICB3c0NvbXBvbmVudHMuc2NoZW1lID0gKHdzQ29tcG9uZW50cy5zZWN1cmUgPyAnd3NzJyA6ICd3cycpXG4gICAgd3NDb21wb25lbnRzLnNlY3VyZSA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLy8gcmVjb25zdHJ1Y3QgcGF0aCBmcm9tIHJlc291cmNlIG5hbWVcbiAgaWYgKHdzQ29tcG9uZW50cy5yZXNvdXJjZU5hbWUpIHtcbiAgICBjb25zdCBbcGF0aCwgcXVlcnldID0gd3NDb21wb25lbnRzLnJlc291cmNlTmFtZS5zcGxpdCgnPycpXG4gICAgd3NDb21wb25lbnRzLnBhdGggPSAocGF0aCAmJiBwYXRoICE9PSAnLycgPyBwYXRoIDogdW5kZWZpbmVkKVxuICAgIHdzQ29tcG9uZW50cy5xdWVyeSA9IHF1ZXJ5XG4gICAgd3NDb21wb25lbnRzLnJlc291cmNlTmFtZSA9IHVuZGVmaW5lZFxuICB9XG5cbiAgLy8gZm9yYmlkIGZyYWdtZW50IGNvbXBvbmVudFxuICB3c0NvbXBvbmVudHMuZnJhZ21lbnQgPSB1bmRlZmluZWRcblxuICByZXR1cm4gd3NDb21wb25lbnRzXG59XG5cbmZ1bmN0aW9uIHVyblBhcnNlICh1cm5Db21wb25lbnRzLCBvcHRpb25zKSB7XG4gIGlmICghdXJuQ29tcG9uZW50cy5wYXRoKSB7XG4gICAgdXJuQ29tcG9uZW50cy5lcnJvciA9ICdVUk4gY2FuIG5vdCBiZSBwYXJzZWQnXG4gICAgcmV0dXJuIHVybkNvbXBvbmVudHNcbiAgfVxuICBjb25zdCBtYXRjaGVzID0gdXJuQ29tcG9uZW50cy5wYXRoLm1hdGNoKFVSTl9SRUcpXG4gIGlmIChtYXRjaGVzKSB7XG4gICAgY29uc3Qgc2NoZW1lID0gb3B0aW9ucy5zY2hlbWUgfHwgdXJuQ29tcG9uZW50cy5zY2hlbWUgfHwgJ3VybidcbiAgICB1cm5Db21wb25lbnRzLm5pZCA9IG1hdGNoZXNbMV0udG9Mb3dlckNhc2UoKVxuICAgIHVybkNvbXBvbmVudHMubnNzID0gbWF0Y2hlc1syXVxuICAgIGNvbnN0IHVyblNjaGVtZSA9IGAke3NjaGVtZX06JHtvcHRpb25zLm5pZCB8fCB1cm5Db21wb25lbnRzLm5pZH1gXG4gICAgY29uc3Qgc2NoZW1lSGFuZGxlciA9IFNDSEVNRVNbdXJuU2NoZW1lXVxuICAgIHVybkNvbXBvbmVudHMucGF0aCA9IHVuZGVmaW5lZFxuXG4gICAgaWYgKHNjaGVtZUhhbmRsZXIpIHtcbiAgICAgIHVybkNvbXBvbmVudHMgPSBzY2hlbWVIYW5kbGVyLnBhcnNlKHVybkNvbXBvbmVudHMsIG9wdGlvbnMpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHVybkNvbXBvbmVudHMuZXJyb3IgPSB1cm5Db21wb25lbnRzLmVycm9yIHx8ICdVUk4gY2FuIG5vdCBiZSBwYXJzZWQuJ1xuICB9XG5cbiAgcmV0dXJuIHVybkNvbXBvbmVudHNcbn1cblxuZnVuY3Rpb24gdXJuU2VyaWFsaXplICh1cm5Db21wb25lbnRzLCBvcHRpb25zKSB7XG4gIGNvbnN0IHNjaGVtZSA9IG9wdGlvbnMuc2NoZW1lIHx8IHVybkNvbXBvbmVudHMuc2NoZW1lIHx8ICd1cm4nXG4gIGNvbnN0IG5pZCA9IHVybkNvbXBvbmVudHMubmlkLnRvTG93ZXJDYXNlKClcbiAgY29uc3QgdXJuU2NoZW1lID0gYCR7c2NoZW1lfToke29wdGlvbnMubmlkIHx8IG5pZH1gXG4gIGNvbnN0IHNjaGVtZUhhbmRsZXIgPSBTQ0hFTUVTW3VyblNjaGVtZV1cblxuICBpZiAoc2NoZW1lSGFuZGxlcikge1xuICAgIHVybkNvbXBvbmVudHMgPSBzY2hlbWVIYW5kbGVyLnNlcmlhbGl6ZSh1cm5Db21wb25lbnRzLCBvcHRpb25zKVxuICB9XG5cbiAgY29uc3QgdXJpQ29tcG9uZW50cyA9IHVybkNvbXBvbmVudHNcbiAgY29uc3QgbnNzID0gdXJuQ29tcG9uZW50cy5uc3NcbiAgdXJpQ29tcG9uZW50cy5wYXRoID0gYCR7bmlkIHx8IG9wdGlvbnMubmlkfToke25zc31gXG5cbiAgb3B0aW9ucy5za2lwRXNjYXBlID0gdHJ1ZVxuICByZXR1cm4gdXJpQ29tcG9uZW50c1xufVxuXG5mdW5jdGlvbiB1cm51dWlkUGFyc2UgKHVybkNvbXBvbmVudHMsIG9wdGlvbnMpIHtcbiAgY29uc3QgdXVpZENvbXBvbmVudHMgPSB1cm5Db21wb25lbnRzXG4gIHV1aWRDb21wb25lbnRzLnV1aWQgPSB1dWlkQ29tcG9uZW50cy5uc3NcbiAgdXVpZENvbXBvbmVudHMubnNzID0gdW5kZWZpbmVkXG5cbiAgaWYgKCFvcHRpb25zLnRvbGVyYW50ICYmICghdXVpZENvbXBvbmVudHMudXVpZCB8fCAhVVVJRF9SRUcudGVzdCh1dWlkQ29tcG9uZW50cy51dWlkKSkpIHtcbiAgICB1dWlkQ29tcG9uZW50cy5lcnJvciA9IHV1aWRDb21wb25lbnRzLmVycm9yIHx8ICdVVUlEIGlzIG5vdCB2YWxpZC4nXG4gIH1cblxuICByZXR1cm4gdXVpZENvbXBvbmVudHNcbn1cblxuZnVuY3Rpb24gdXJudXVpZFNlcmlhbGl6ZSAodXVpZENvbXBvbmVudHMpIHtcbiAgY29uc3QgdXJuQ29tcG9uZW50cyA9IHV1aWRDb21wb25lbnRzXG4gIC8vIG5vcm1hbGl6ZSBVVUlEXG4gIHVybkNvbXBvbmVudHMubnNzID0gKHV1aWRDb21wb25lbnRzLnV1aWQgfHwgJycpLnRvTG93ZXJDYXNlKClcbiAgcmV0dXJuIHVybkNvbXBvbmVudHNcbn1cblxuY29uc3QgaHR0cCA9IHtcbiAgc2NoZW1lOiAnaHR0cCcsXG4gIGRvbWFpbkhvc3Q6IHRydWUsXG4gIHBhcnNlOiBodHRwUGFyc2UsXG4gIHNlcmlhbGl6ZTogaHR0cFNlcmlhbGl6ZVxufVxuXG5jb25zdCBodHRwcyA9IHtcbiAgc2NoZW1lOiAnaHR0cHMnLFxuICBkb21haW5Ib3N0OiBodHRwLmRvbWFpbkhvc3QsXG4gIHBhcnNlOiBodHRwUGFyc2UsXG4gIHNlcmlhbGl6ZTogaHR0cFNlcmlhbGl6ZVxufVxuXG5jb25zdCB3cyA9IHtcbiAgc2NoZW1lOiAnd3MnLFxuICBkb21haW5Ib3N0OiB0cnVlLFxuICBwYXJzZTogd3NQYXJzZSxcbiAgc2VyaWFsaXplOiB3c1NlcmlhbGl6ZVxufVxuXG5jb25zdCB3c3MgPSB7XG4gIHNjaGVtZTogJ3dzcycsXG4gIGRvbWFpbkhvc3Q6IHdzLmRvbWFpbkhvc3QsXG4gIHBhcnNlOiB3cy5wYXJzZSxcbiAgc2VyaWFsaXplOiB3cy5zZXJpYWxpemVcbn1cblxuY29uc3QgdXJuID0ge1xuICBzY2hlbWU6ICd1cm4nLFxuICBwYXJzZTogdXJuUGFyc2UsXG4gIHNlcmlhbGl6ZTogdXJuU2VyaWFsaXplLFxuICBza2lwTm9ybWFsaXplOiB0cnVlXG59XG5cbmNvbnN0IHVybnV1aWQgPSB7XG4gIHNjaGVtZTogJ3Vybjp1dWlkJyxcbiAgcGFyc2U6IHVybnV1aWRQYXJzZSxcbiAgc2VyaWFsaXplOiB1cm51dWlkU2VyaWFsaXplLFxuICBza2lwTm9ybWFsaXplOiB0cnVlXG59XG5cbmNvbnN0IFNDSEVNRVMgPSB7XG4gIGh0dHAsXG4gIGh0dHBzLFxuICB3cyxcbiAgd3NzLFxuICB1cm4sXG4gICd1cm46dXVpZCc6IHVybnV1aWRcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTQ0hFTUVTXG4iLCIndXNlIHN0cmljdCdcblxuY29uc3QgeyBub3JtYWxpemVJUHY2LCBub3JtYWxpemVJUHY0LCByZW1vdmVEb3RTZWdtZW50cywgcmVjb21wb3NlQXV0aG9yaXR5LCBub3JtYWxpemVDb21wb25lbnRFbmNvZGluZyB9ID0gcmVxdWlyZSgnLi9saWIvdXRpbHMnKVxuY29uc3QgU0NIRU1FUyA9IHJlcXVpcmUoJy4vbGliL3NjaGVtZXMnKVxuXG5mdW5jdGlvbiBub3JtYWxpemUgKHVyaSwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHVyaSA9PT0gJ3N0cmluZycpIHtcbiAgICB1cmkgPSBzZXJpYWxpemUocGFyc2UodXJpLCBvcHRpb25zKSwgb3B0aW9ucylcbiAgfSBlbHNlIGlmICh0eXBlb2YgdXJpID09PSAnb2JqZWN0Jykge1xuICAgIHVyaSA9IHBhcnNlKHNlcmlhbGl6ZSh1cmksIG9wdGlvbnMpLCBvcHRpb25zKVxuICB9XG4gIHJldHVybiB1cmlcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZSAoYmFzZVVSSSwgcmVsYXRpdmVVUkksIG9wdGlvbnMpIHtcbiAgY29uc3Qgc2NoZW1lbGVzc09wdGlvbnMgPSBPYmplY3QuYXNzaWduKHsgc2NoZW1lOiAnbnVsbCcgfSwgb3B0aW9ucylcbiAgY29uc3QgcmVzb2x2ZWQgPSByZXNvbHZlQ29tcG9uZW50cyhwYXJzZShiYXNlVVJJLCBzY2hlbWVsZXNzT3B0aW9ucyksIHBhcnNlKHJlbGF0aXZlVVJJLCBzY2hlbWVsZXNzT3B0aW9ucyksIHNjaGVtZWxlc3NPcHRpb25zLCB0cnVlKVxuICByZXR1cm4gc2VyaWFsaXplKHJlc29sdmVkLCB7IC4uLnNjaGVtZWxlc3NPcHRpb25zLCBza2lwRXNjYXBlOiB0cnVlIH0pXG59XG5cbmZ1bmN0aW9uIHJlc29sdmVDb21wb25lbnRzIChiYXNlLCByZWxhdGl2ZSwgb3B0aW9ucywgc2tpcE5vcm1hbGl6YXRpb24pIHtcbiAgY29uc3QgdGFyZ2V0ID0ge31cbiAgaWYgKCFza2lwTm9ybWFsaXphdGlvbikge1xuICAgIGJhc2UgPSBwYXJzZShzZXJpYWxpemUoYmFzZSwgb3B0aW9ucyksIG9wdGlvbnMpIC8vIG5vcm1hbGl6ZSBiYXNlIGNvbXBvbmVudHNcbiAgICByZWxhdGl2ZSA9IHBhcnNlKHNlcmlhbGl6ZShyZWxhdGl2ZSwgb3B0aW9ucyksIG9wdGlvbnMpIC8vIG5vcm1hbGl6ZSByZWxhdGl2ZSBjb21wb25lbnRzXG4gIH1cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAoIW9wdGlvbnMudG9sZXJhbnQgJiYgcmVsYXRpdmUuc2NoZW1lKSB7XG4gICAgdGFyZ2V0LnNjaGVtZSA9IHJlbGF0aXZlLnNjaGVtZVxuICAgIC8vIHRhcmdldC5hdXRob3JpdHkgPSByZWxhdGl2ZS5hdXRob3JpdHk7XG4gICAgdGFyZ2V0LnVzZXJpbmZvID0gcmVsYXRpdmUudXNlcmluZm9cbiAgICB0YXJnZXQuaG9zdCA9IHJlbGF0aXZlLmhvc3RcbiAgICB0YXJnZXQucG9ydCA9IHJlbGF0aXZlLnBvcnRcbiAgICB0YXJnZXQucGF0aCA9IHJlbW92ZURvdFNlZ21lbnRzKHJlbGF0aXZlLnBhdGggfHwgJycpXG4gICAgdGFyZ2V0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnlcbiAgfSBlbHNlIHtcbiAgICBpZiAocmVsYXRpdmUudXNlcmluZm8gIT09IHVuZGVmaW5lZCB8fCByZWxhdGl2ZS5ob3N0ICE9PSB1bmRlZmluZWQgfHwgcmVsYXRpdmUucG9ydCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyB0YXJnZXQuYXV0aG9yaXR5ID0gcmVsYXRpdmUuYXV0aG9yaXR5O1xuICAgICAgdGFyZ2V0LnVzZXJpbmZvID0gcmVsYXRpdmUudXNlcmluZm9cbiAgICAgIHRhcmdldC5ob3N0ID0gcmVsYXRpdmUuaG9zdFxuICAgICAgdGFyZ2V0LnBvcnQgPSByZWxhdGl2ZS5wb3J0XG4gICAgICB0YXJnZXQucGF0aCA9IHJlbW92ZURvdFNlZ21lbnRzKHJlbGF0aXZlLnBhdGggfHwgJycpXG4gICAgICB0YXJnZXQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIXJlbGF0aXZlLnBhdGgpIHtcbiAgICAgICAgdGFyZ2V0LnBhdGggPSBiYXNlLnBhdGhcbiAgICAgICAgaWYgKHJlbGF0aXZlLnF1ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0YXJnZXQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldC5xdWVyeSA9IGJhc2UucXVlcnlcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHJlbGF0aXZlLnBhdGguY2hhckF0KDApID09PSAnLycpIHtcbiAgICAgICAgICB0YXJnZXQucGF0aCA9IHJlbW92ZURvdFNlZ21lbnRzKHJlbGF0aXZlLnBhdGgpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKChiYXNlLnVzZXJpbmZvICE9PSB1bmRlZmluZWQgfHwgYmFzZS5ob3N0ICE9PSB1bmRlZmluZWQgfHwgYmFzZS5wb3J0ICE9PSB1bmRlZmluZWQpICYmICFiYXNlLnBhdGgpIHtcbiAgICAgICAgICAgIHRhcmdldC5wYXRoID0gJy8nICsgcmVsYXRpdmUucGF0aFxuICAgICAgICAgIH0gZWxzZSBpZiAoIWJhc2UucGF0aCkge1xuICAgICAgICAgICAgdGFyZ2V0LnBhdGggPSByZWxhdGl2ZS5wYXRoXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRhcmdldC5wYXRoID0gYmFzZS5wYXRoLnNsaWNlKDAsIGJhc2UucGF0aC5sYXN0SW5kZXhPZignLycpICsgMSkgKyByZWxhdGl2ZS5wYXRoXG4gICAgICAgICAgfVxuICAgICAgICAgIHRhcmdldC5wYXRoID0gcmVtb3ZlRG90U2VnbWVudHModGFyZ2V0LnBhdGgpXG4gICAgICAgIH1cbiAgICAgICAgdGFyZ2V0LnF1ZXJ5ID0gcmVsYXRpdmUucXVlcnlcbiAgICAgIH1cbiAgICAgIC8vIHRhcmdldC5hdXRob3JpdHkgPSBiYXNlLmF1dGhvcml0eTtcbiAgICAgIHRhcmdldC51c2VyaW5mbyA9IGJhc2UudXNlcmluZm9cbiAgICAgIHRhcmdldC5ob3N0ID0gYmFzZS5ob3N0XG4gICAgICB0YXJnZXQucG9ydCA9IGJhc2UucG9ydFxuICAgIH1cbiAgICB0YXJnZXQuc2NoZW1lID0gYmFzZS5zY2hlbWVcbiAgfVxuXG4gIHRhcmdldC5mcmFnbWVudCA9IHJlbGF0aXZlLmZyYWdtZW50XG5cbiAgcmV0dXJuIHRhcmdldFxufVxuXG5mdW5jdGlvbiBlcXVhbCAodXJpQSwgdXJpQiwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHVyaUEgPT09ICdzdHJpbmcnKSB7XG4gICAgdXJpQSA9IHVuZXNjYXBlKHVyaUEpXG4gICAgdXJpQSA9IHNlcmlhbGl6ZShub3JtYWxpemVDb21wb25lbnRFbmNvZGluZyhwYXJzZSh1cmlBLCBvcHRpb25zKSwgdHJ1ZSksIHsgLi4ub3B0aW9ucywgc2tpcEVzY2FwZTogdHJ1ZSB9KVxuICB9IGVsc2UgaWYgKHR5cGVvZiB1cmlBID09PSAnb2JqZWN0Jykge1xuICAgIHVyaUEgPSBzZXJpYWxpemUobm9ybWFsaXplQ29tcG9uZW50RW5jb2RpbmcodXJpQSwgdHJ1ZSksIHsgLi4ub3B0aW9ucywgc2tpcEVzY2FwZTogdHJ1ZSB9KVxuICB9XG5cbiAgaWYgKHR5cGVvZiB1cmlCID09PSAnc3RyaW5nJykge1xuICAgIHVyaUIgPSB1bmVzY2FwZSh1cmlCKVxuICAgIHVyaUIgPSBzZXJpYWxpemUobm9ybWFsaXplQ29tcG9uZW50RW5jb2RpbmcocGFyc2UodXJpQiwgb3B0aW9ucyksIHRydWUpLCB7IC4uLm9wdGlvbnMsIHNraXBFc2NhcGU6IHRydWUgfSlcbiAgfSBlbHNlIGlmICh0eXBlb2YgdXJpQiA9PT0gJ29iamVjdCcpIHtcbiAgICB1cmlCID0gc2VyaWFsaXplKG5vcm1hbGl6ZUNvbXBvbmVudEVuY29kaW5nKHVyaUIsIHRydWUpLCB7IC4uLm9wdGlvbnMsIHNraXBFc2NhcGU6IHRydWUgfSlcbiAgfVxuXG4gIHJldHVybiB1cmlBLnRvTG93ZXJDYXNlKCkgPT09IHVyaUIudG9Mb3dlckNhc2UoKVxufVxuXG5mdW5jdGlvbiBzZXJpYWxpemUgKGNtcHRzLCBvcHRzKSB7XG4gIGNvbnN0IGNvbXBvbmVudHMgPSB7XG4gICAgaG9zdDogY21wdHMuaG9zdCxcbiAgICBzY2hlbWU6IGNtcHRzLnNjaGVtZSxcbiAgICB1c2VyaW5mbzogY21wdHMudXNlcmluZm8sXG4gICAgcG9ydDogY21wdHMucG9ydCxcbiAgICBwYXRoOiBjbXB0cy5wYXRoLFxuICAgIHF1ZXJ5OiBjbXB0cy5xdWVyeSxcbiAgICBuaWQ6IGNtcHRzLm5pZCxcbiAgICBuc3M6IGNtcHRzLm5zcyxcbiAgICB1dWlkOiBjbXB0cy51dWlkLFxuICAgIGZyYWdtZW50OiBjbXB0cy5mcmFnbWVudCxcbiAgICByZWZlcmVuY2U6IGNtcHRzLnJlZmVyZW5jZSxcbiAgICByZXNvdXJjZU5hbWU6IGNtcHRzLnJlc291cmNlTmFtZSxcbiAgICBzZWN1cmU6IGNtcHRzLnNlY3VyZSxcbiAgICBlcnJvcjogJydcbiAgfVxuICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cylcbiAgY29uc3QgdXJpVG9rZW5zID0gW11cblxuICAvLyBmaW5kIHNjaGVtZSBoYW5kbGVyXG4gIGNvbnN0IHNjaGVtZUhhbmRsZXIgPSBTQ0hFTUVTWyhvcHRpb25zLnNjaGVtZSB8fCBjb21wb25lbnRzLnNjaGVtZSB8fCAnJykudG9Mb3dlckNhc2UoKV1cblxuICAvLyBwZXJmb3JtIHNjaGVtZSBzcGVjaWZpYyBzZXJpYWxpemF0aW9uXG4gIGlmIChzY2hlbWVIYW5kbGVyICYmIHNjaGVtZUhhbmRsZXIuc2VyaWFsaXplKSBzY2hlbWVIYW5kbGVyLnNlcmlhbGl6ZShjb21wb25lbnRzLCBvcHRpb25zKVxuXG4gIGlmIChjb21wb25lbnRzLnBhdGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghb3B0aW9ucy5za2lwRXNjYXBlKSB7XG4gICAgICBjb21wb25lbnRzLnBhdGggPSBlc2NhcGUoY29tcG9uZW50cy5wYXRoKVxuXG4gICAgICBpZiAoY29tcG9uZW50cy5zY2hlbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb21wb25lbnRzLnBhdGggPSBjb21wb25lbnRzLnBhdGguc3BsaXQoJyUzQScpLmpvaW4oJzonKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnRzLnBhdGggPSB1bmVzY2FwZShjb21wb25lbnRzLnBhdGgpXG4gICAgfVxuICB9XG5cbiAgaWYgKG9wdGlvbnMucmVmZXJlbmNlICE9PSAnc3VmZml4JyAmJiBjb21wb25lbnRzLnNjaGVtZSkge1xuICAgIHVyaVRva2Vucy5wdXNoKGNvbXBvbmVudHMuc2NoZW1lLCAnOicpXG4gIH1cblxuICBjb25zdCBhdXRob3JpdHkgPSByZWNvbXBvc2VBdXRob3JpdHkoY29tcG9uZW50cylcbiAgaWYgKGF1dGhvcml0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlICE9PSAnc3VmZml4Jykge1xuICAgICAgdXJpVG9rZW5zLnB1c2goJy8vJylcbiAgICB9XG5cbiAgICB1cmlUb2tlbnMucHVzaChhdXRob3JpdHkpXG5cbiAgICBpZiAoY29tcG9uZW50cy5wYXRoICYmIGNvbXBvbmVudHMucGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgdXJpVG9rZW5zLnB1c2goJy8nKVxuICAgIH1cbiAgfVxuICBpZiAoY29tcG9uZW50cy5wYXRoICE9PSB1bmRlZmluZWQpIHtcbiAgICBsZXQgcyA9IGNvbXBvbmVudHMucGF0aFxuXG4gICAgaWYgKCFvcHRpb25zLmFic29sdXRlUGF0aCAmJiAoIXNjaGVtZUhhbmRsZXIgfHwgIXNjaGVtZUhhbmRsZXIuYWJzb2x1dGVQYXRoKSkge1xuICAgICAgcyA9IHJlbW92ZURvdFNlZ21lbnRzKHMpXG4gICAgfVxuXG4gICAgaWYgKGF1dGhvcml0eSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBzID0gcy5yZXBsYWNlKC9eXFwvXFwvL3UsICcvJTJGJykgLy8gZG9uJ3QgYWxsb3cgdGhlIHBhdGggdG8gc3RhcnQgd2l0aCBcIi8vXCJcbiAgICB9XG5cbiAgICB1cmlUb2tlbnMucHVzaChzKVxuICB9XG5cbiAgaWYgKGNvbXBvbmVudHMucXVlcnkgIT09IHVuZGVmaW5lZCkge1xuICAgIHVyaVRva2Vucy5wdXNoKCc/JywgY29tcG9uZW50cy5xdWVyeSlcbiAgfVxuXG4gIGlmIChjb21wb25lbnRzLmZyYWdtZW50ICE9PSB1bmRlZmluZWQpIHtcbiAgICB1cmlUb2tlbnMucHVzaCgnIycsIGNvbXBvbmVudHMuZnJhZ21lbnQpXG4gIH1cbiAgcmV0dXJuIHVyaVRva2Vucy5qb2luKCcnKVxufVxuXG5jb25zdCBoZXhMb29rVXAgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMjcgfSwgKF92LCBrKSA9PiAvW14hXCIkJicoKSorLFxcLS47PV9gYS16e31+XS91LnRlc3QoU3RyaW5nLmZyb21DaGFyQ29kZShrKSkpXG5cbmZ1bmN0aW9uIG5vblNpbXBsZURvbWFpbiAodmFsdWUpIHtcbiAgbGV0IGNvZGUgPSAwXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSB2YWx1ZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGkpXG4gICAgaWYgKGNvZGUgPiAxMjYgfHwgaGV4TG9va1VwW2NvZGVdKSB7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuY29uc3QgVVJJX1BBUlNFID0gL14oPzooW14jLzo/XSspOik/KD86XFwvXFwvKCg/OihbXiMvP0BdKilAKT8oXFxbW14jLz9cXF1dK1xcXXxbXiMvOj9dKikoPzo6KFxcZCopKT8pKT8oW14jP10qKSg/OlxcPyhbXiNdKikpPyg/OiMoKD86LnxbXFxuXFxyXSkqKSk/L3VcblxuZnVuY3Rpb24gcGFyc2UgKHVyaSwgb3B0cykge1xuICBjb25zdCBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0cylcbiAgY29uc3QgcGFyc2VkID0ge1xuICAgIHNjaGVtZTogdW5kZWZpbmVkLFxuICAgIHVzZXJpbmZvOiB1bmRlZmluZWQsXG4gICAgaG9zdDogJycsXG4gICAgcG9ydDogdW5kZWZpbmVkLFxuICAgIHBhdGg6ICcnLFxuICAgIHF1ZXJ5OiB1bmRlZmluZWQsXG4gICAgZnJhZ21lbnQ6IHVuZGVmaW5lZFxuICB9XG4gIGNvbnN0IGdvdEVuY29kaW5nID0gdXJpLmluZGV4T2YoJyUnKSAhPT0gLTFcbiAgbGV0IGlzSVAgPSBmYWxzZVxuICBpZiAob3B0aW9ucy5yZWZlcmVuY2UgPT09ICdzdWZmaXgnKSB1cmkgPSAob3B0aW9ucy5zY2hlbWUgPyBvcHRpb25zLnNjaGVtZSArICc6JyA6ICcnKSArICcvLycgKyB1cmlcblxuICBjb25zdCBtYXRjaGVzID0gdXJpLm1hdGNoKFVSSV9QQVJTRSlcblxuICBpZiAobWF0Y2hlcykge1xuICAgIC8vIHN0b3JlIGVhY2ggY29tcG9uZW50XG4gICAgcGFyc2VkLnNjaGVtZSA9IG1hdGNoZXNbMV1cbiAgICBwYXJzZWQudXNlcmluZm8gPSBtYXRjaGVzWzNdXG4gICAgcGFyc2VkLmhvc3QgPSBtYXRjaGVzWzRdXG4gICAgcGFyc2VkLnBvcnQgPSBwYXJzZUludChtYXRjaGVzWzVdLCAxMClcbiAgICBwYXJzZWQucGF0aCA9IG1hdGNoZXNbNl0gfHwgJydcbiAgICBwYXJzZWQucXVlcnkgPSBtYXRjaGVzWzddXG4gICAgcGFyc2VkLmZyYWdtZW50ID0gbWF0Y2hlc1s4XVxuXG4gICAgLy8gZml4IHBvcnQgbnVtYmVyXG4gICAgaWYgKGlzTmFOKHBhcnNlZC5wb3J0KSkge1xuICAgICAgcGFyc2VkLnBvcnQgPSBtYXRjaGVzWzVdXG4gICAgfVxuICAgIGlmIChwYXJzZWQuaG9zdCkge1xuICAgICAgY29uc3QgaXB2NHJlc3VsdCA9IG5vcm1hbGl6ZUlQdjQocGFyc2VkLmhvc3QpXG4gICAgICBpZiAoaXB2NHJlc3VsdC5pc0lQVjQgPT09IGZhbHNlKSB7XG4gICAgICAgIGNvbnN0IGlwdjZyZXN1bHQgPSBub3JtYWxpemVJUHY2KGlwdjRyZXN1bHQuaG9zdClcbiAgICAgICAgcGFyc2VkLmhvc3QgPSBpcHY2cmVzdWx0Lmhvc3QudG9Mb3dlckNhc2UoKVxuICAgICAgICBpc0lQID0gaXB2NnJlc3VsdC5pc0lQVjZcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcnNlZC5ob3N0ID0gaXB2NHJlc3VsdC5ob3N0XG4gICAgICAgIGlzSVAgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwYXJzZWQuc2NoZW1lID09PSB1bmRlZmluZWQgJiYgcGFyc2VkLnVzZXJpbmZvID09PSB1bmRlZmluZWQgJiYgcGFyc2VkLmhvc3QgPT09IHVuZGVmaW5lZCAmJiBwYXJzZWQucG9ydCA9PT0gdW5kZWZpbmVkICYmIHBhcnNlZC5xdWVyeSA9PT0gdW5kZWZpbmVkICYmICFwYXJzZWQucGF0aCkge1xuICAgICAgcGFyc2VkLnJlZmVyZW5jZSA9ICdzYW1lLWRvY3VtZW50J1xuICAgIH0gZWxzZSBpZiAocGFyc2VkLnNjaGVtZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJzZWQucmVmZXJlbmNlID0gJ3JlbGF0aXZlJ1xuICAgIH0gZWxzZSBpZiAocGFyc2VkLmZyYWdtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHBhcnNlZC5yZWZlcmVuY2UgPSAnYWJzb2x1dGUnXG4gICAgfSBlbHNlIHtcbiAgICAgIHBhcnNlZC5yZWZlcmVuY2UgPSAndXJpJ1xuICAgIH1cblxuICAgIC8vIGNoZWNrIGZvciByZWZlcmVuY2UgZXJyb3JzXG4gICAgaWYgKG9wdGlvbnMucmVmZXJlbmNlICYmIG9wdGlvbnMucmVmZXJlbmNlICE9PSAnc3VmZml4JyAmJiBvcHRpb25zLnJlZmVyZW5jZSAhPT0gcGFyc2VkLnJlZmVyZW5jZSkge1xuICAgICAgcGFyc2VkLmVycm9yID0gcGFyc2VkLmVycm9yIHx8ICdVUkkgaXMgbm90IGEgJyArIG9wdGlvbnMucmVmZXJlbmNlICsgJyByZWZlcmVuY2UuJ1xuICAgIH1cblxuICAgIC8vIGZpbmQgc2NoZW1lIGhhbmRsZXJcbiAgICBjb25zdCBzY2hlbWVIYW5kbGVyID0gU0NIRU1FU1sob3B0aW9ucy5zY2hlbWUgfHwgcGFyc2VkLnNjaGVtZSB8fCAnJykudG9Mb3dlckNhc2UoKV1cblxuICAgIC8vIGNoZWNrIGlmIHNjaGVtZSBjYW4ndCBoYW5kbGUgSVJJc1xuICAgIGlmICghb3B0aW9ucy51bmljb2RlU3VwcG9ydCAmJiAoIXNjaGVtZUhhbmRsZXIgfHwgIXNjaGVtZUhhbmRsZXIudW5pY29kZVN1cHBvcnQpKSB7XG4gICAgICAvLyBpZiBob3N0IGNvbXBvbmVudCBpcyBhIGRvbWFpbiBuYW1lXG4gICAgICBpZiAocGFyc2VkLmhvc3QgJiYgKG9wdGlvbnMuZG9tYWluSG9zdCB8fCAoc2NoZW1lSGFuZGxlciAmJiBzY2hlbWVIYW5kbGVyLmRvbWFpbkhvc3QpKSAmJiBpc0lQID09PSBmYWxzZSAmJiBub25TaW1wbGVEb21haW4ocGFyc2VkLmhvc3QpKSB7XG4gICAgICAgIC8vIGNvbnZlcnQgVW5pY29kZSBJRE4gLT4gQVNDSUkgSUROXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcGFyc2VkLmhvc3QgPSBVUkwuZG9tYWluVG9BU0NJSShwYXJzZWQuaG9zdC50b0xvd2VyQ2FzZSgpKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgcGFyc2VkLmVycm9yID0gcGFyc2VkLmVycm9yIHx8IFwiSG9zdCdzIGRvbWFpbiBuYW1lIGNhbiBub3QgYmUgY29udmVydGVkIHRvIEFTQ0lJOiBcIiArIGVcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gY29udmVydCBJUkkgLT4gVVJJXG4gICAgfVxuXG4gICAgaWYgKCFzY2hlbWVIYW5kbGVyIHx8IChzY2hlbWVIYW5kbGVyICYmICFzY2hlbWVIYW5kbGVyLnNraXBOb3JtYWxpemUpKSB7XG4gICAgICBpZiAoZ290RW5jb2RpbmcgJiYgcGFyc2VkLnNjaGVtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHBhcnNlZC5zY2hlbWUgPSB1bmVzY2FwZShwYXJzZWQuc2NoZW1lKVxuICAgICAgfVxuICAgICAgaWYgKGdvdEVuY29kaW5nICYmIHBhcnNlZC5ob3N0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGFyc2VkLmhvc3QgPSB1bmVzY2FwZShwYXJzZWQuaG9zdClcbiAgICAgIH1cbiAgICAgIGlmIChwYXJzZWQucGF0aCkge1xuICAgICAgICBwYXJzZWQucGF0aCA9IGVzY2FwZSh1bmVzY2FwZShwYXJzZWQucGF0aCkpXG4gICAgICB9XG4gICAgICBpZiAocGFyc2VkLmZyYWdtZW50KSB7XG4gICAgICAgIHBhcnNlZC5mcmFnbWVudCA9IGVuY29kZVVSSShkZWNvZGVVUklDb21wb25lbnQocGFyc2VkLmZyYWdtZW50KSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBwZXJmb3JtIHNjaGVtZSBzcGVjaWZpYyBwYXJzaW5nXG4gICAgaWYgKHNjaGVtZUhhbmRsZXIgJiYgc2NoZW1lSGFuZGxlci5wYXJzZSkge1xuICAgICAgc2NoZW1lSGFuZGxlci5wYXJzZShwYXJzZWQsIG9wdGlvbnMpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHBhcnNlZC5lcnJvciA9IHBhcnNlZC5lcnJvciB8fCAnVVJJIGNhbiBub3QgYmUgcGFyc2VkLidcbiAgfVxuICByZXR1cm4gcGFyc2VkXG59XG5cbmNvbnN0IGZhc3RVcmkgPSB7XG4gIFNDSEVNRVMsXG4gIG5vcm1hbGl6ZSxcbiAgcmVzb2x2ZSxcbiAgcmVzb2x2ZUNvbXBvbmVudHMsXG4gIGVxdWFsLFxuICBzZXJpYWxpemUsXG4gIHBhcnNlXG59XG5cbm1vZHVsZS5leHBvcnRzID0gZmFzdFVyaVxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGZhc3RVcmlcbm1vZHVsZS5leHBvcnRzLmZhc3RVcmkgPSBmYXN0VXJpXG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29kZUdlbiA9IGV4cG9ydHMuTmFtZSA9IGV4cG9ydHMubmlsID0gZXhwb3J0cy5zdHJpbmdpZnkgPSBleHBvcnRzLnN0ciA9IGV4cG9ydHMuXyA9IGV4cG9ydHMuS2V5d29yZEN4dCA9IHZvaWQgMDtcbnZhciB2YWxpZGF0ZV8xID0gcmVxdWlyZShcIi4vY29tcGlsZS92YWxpZGF0ZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIktleXdvcmRDeHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbGlkYXRlXzEuS2V5d29yZEN4dDsgfSB9KTtcbnZhciBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi9jb21waWxlL2NvZGVnZW5cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlZ2VuXzEuXzsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0clwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLnN0cjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN0cmluZ2lmeVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLnN0cmluZ2lmeTsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm5pbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLm5pbDsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk5hbWVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5OYW1lOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29kZUdlblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLkNvZGVHZW47IH0gfSk7XG5jb25zdCB2YWxpZGF0aW9uX2Vycm9yXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lL3ZhbGlkYXRpb25fZXJyb3JcIik7XG5jb25zdCByZWZfZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUvcmVmX2Vycm9yXCIpO1xuY29uc3QgcnVsZXNfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUvcnVsZXNcIik7XG5jb25zdCBjb21waWxlXzEgPSByZXF1aXJlKFwiLi9jb21waWxlXCIpO1xuY29uc3QgY29kZWdlbl8yID0gcmVxdWlyZShcIi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgcmVzb2x2ZV8xID0gcmVxdWlyZShcIi4vY29tcGlsZS9yZXNvbHZlXCIpO1xuY29uc3QgZGF0YVR5cGVfMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUvdmFsaWRhdGUvZGF0YVR5cGVcIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCAkZGF0YVJlZlNjaGVtYSA9IHJlcXVpcmUoXCIuL3JlZnMvZGF0YS5qc29uXCIpO1xuY29uc3QgdXJpXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lL3VyaVwiKTtcbmNvbnN0IGRlZmF1bHRSZWdFeHAgPSAoc3RyLCBmbGFncykgPT4gbmV3IFJlZ0V4cChzdHIsIGZsYWdzKTtcbmRlZmF1bHRSZWdFeHAuY29kZSA9IFwibmV3IFJlZ0V4cFwiO1xuY29uc3QgTUVUQV9JR05PUkVfT1BUSU9OUyA9IFtcInJlbW92ZUFkZGl0aW9uYWxcIiwgXCJ1c2VEZWZhdWx0c1wiLCBcImNvZXJjZVR5cGVzXCJdO1xuY29uc3QgRVhUX1NDT1BFX05BTUVTID0gbmV3IFNldChbXG4gICAgXCJ2YWxpZGF0ZVwiLFxuICAgIFwic2VyaWFsaXplXCIsXG4gICAgXCJwYXJzZVwiLFxuICAgIFwid3JhcHBlclwiLFxuICAgIFwicm9vdFwiLFxuICAgIFwic2NoZW1hXCIsXG4gICAgXCJrZXl3b3JkXCIsXG4gICAgXCJwYXR0ZXJuXCIsXG4gICAgXCJmb3JtYXRzXCIsXG4gICAgXCJ2YWxpZGF0ZSRkYXRhXCIsXG4gICAgXCJmdW5jXCIsXG4gICAgXCJvYmpcIixcbiAgICBcIkVycm9yXCIsXG5dKTtcbmNvbnN0IHJlbW92ZWRPcHRpb25zID0ge1xuICAgIGVycm9yRGF0YVBhdGg6IFwiXCIsXG4gICAgZm9ybWF0OiBcImB2YWxpZGF0ZUZvcm1hdHM6IGZhbHNlYCBjYW4gYmUgdXNlZCBpbnN0ZWFkLlwiLFxuICAgIG51bGxhYmxlOiAnXCJudWxsYWJsZVwiIGtleXdvcmQgaXMgc3VwcG9ydGVkIGJ5IGRlZmF1bHQuJyxcbiAgICBqc29uUG9pbnRlcnM6IFwiRGVwcmVjYXRlZCBqc1Byb3BlcnR5U3ludGF4IGNhbiBiZSB1c2VkIGluc3RlYWQuXCIsXG4gICAgZXh0ZW5kUmVmczogXCJEZXByZWNhdGVkIGlnbm9yZUtleXdvcmRzV2l0aFJlZiBjYW4gYmUgdXNlZCBpbnN0ZWFkLlwiLFxuICAgIG1pc3NpbmdSZWZzOiBcIlBhc3MgZW1wdHkgc2NoZW1hIHdpdGggJGlkIHRoYXQgc2hvdWxkIGJlIGlnbm9yZWQgdG8gYWp2LmFkZFNjaGVtYS5cIixcbiAgICBwcm9jZXNzQ29kZTogXCJVc2Ugb3B0aW9uIGBjb2RlOiB7cHJvY2VzczogKGNvZGUsIHNjaGVtYUVudjogb2JqZWN0KSA9PiBzdHJpbmd9YFwiLFxuICAgIHNvdXJjZUNvZGU6IFwiVXNlIG9wdGlvbiBgY29kZToge3NvdXJjZTogdHJ1ZX1gXCIsXG4gICAgc3RyaWN0RGVmYXVsdHM6IFwiSXQgaXMgZGVmYXVsdCBub3csIHNlZSBvcHRpb24gYHN0cmljdGAuXCIsXG4gICAgc3RyaWN0S2V5d29yZHM6IFwiSXQgaXMgZGVmYXVsdCBub3csIHNlZSBvcHRpb24gYHN0cmljdGAuXCIsXG4gICAgdW5pcXVlSXRlbXM6ICdcInVuaXF1ZUl0ZW1zXCIga2V5d29yZCBpcyBhbHdheXMgdmFsaWRhdGVkLicsXG4gICAgdW5rbm93bkZvcm1hdHM6IFwiRGlzYWJsZSBzdHJpY3QgbW9kZSBvciBwYXNzIGB0cnVlYCB0byBgYWp2LmFkZEZvcm1hdGAgKG9yIGBmb3JtYXRzYCBvcHRpb24pLlwiLFxuICAgIGNhY2hlOiBcIk1hcCBpcyB1c2VkIGFzIGNhY2hlLCBzY2hlbWEgb2JqZWN0IGFzIGtleS5cIixcbiAgICBzZXJpYWxpemU6IFwiTWFwIGlzIHVzZWQgYXMgY2FjaGUsIHNjaGVtYSBvYmplY3QgYXMga2V5LlwiLFxuICAgIGFqdkVycm9yczogXCJJdCBpcyBkZWZhdWx0IG5vdy5cIixcbn07XG5jb25zdCBkZXByZWNhdGVkT3B0aW9ucyA9IHtcbiAgICBpZ25vcmVLZXl3b3Jkc1dpdGhSZWY6IFwiXCIsXG4gICAganNQcm9wZXJ0eVN5bnRheDogXCJcIixcbiAgICB1bmljb2RlOiAnXCJtaW5MZW5ndGhcIi9cIm1heExlbmd0aFwiIGFjY291bnQgZm9yIHVuaWNvZGUgY2hhcmFjdGVycyBieSBkZWZhdWx0LicsXG59O1xuY29uc3QgTUFYX0VYUFJFU1NJT04gPSAyMDA7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29tcGxleGl0eVxuZnVuY3Rpb24gcmVxdWlyZWRPcHRpb25zKG8pIHtcbiAgICB2YXIgX2EsIF9iLCBfYywgX2QsIF9lLCBfZiwgX2csIF9oLCBfaiwgX2ssIF9sLCBfbSwgX28sIF9wLCBfcSwgX3IsIF9zLCBfdCwgX3UsIF92LCBfdywgX3gsIF95LCBfeiwgXzA7XG4gICAgY29uc3QgcyA9IG8uc3RyaWN0O1xuICAgIGNvbnN0IF9vcHR6ID0gKF9hID0gby5jb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eub3B0aW1pemU7XG4gICAgY29uc3Qgb3B0aW1pemUgPSBfb3B0eiA9PT0gdHJ1ZSB8fCBfb3B0eiA9PT0gdW5kZWZpbmVkID8gMSA6IF9vcHR6IHx8IDA7XG4gICAgY29uc3QgcmVnRXhwID0gKF9jID0gKF9iID0gby5jb2RlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVnRXhwKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiBkZWZhdWx0UmVnRXhwO1xuICAgIGNvbnN0IHVyaVJlc29sdmVyID0gKF9kID0gby51cmlSZXNvbHZlcikgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogdXJpXzEuZGVmYXVsdDtcbiAgICByZXR1cm4ge1xuICAgICAgICBzdHJpY3RTY2hlbWE6IChfZiA9IChfZSA9IG8uc3RyaWN0U2NoZW1hKSAhPT0gbnVsbCAmJiBfZSAhPT0gdm9pZCAwID8gX2UgOiBzKSAhPT0gbnVsbCAmJiBfZiAhPT0gdm9pZCAwID8gX2YgOiB0cnVlLFxuICAgICAgICBzdHJpY3ROdW1iZXJzOiAoX2ggPSAoX2cgPSBvLnN0cmljdE51bWJlcnMpICE9PSBudWxsICYmIF9nICE9PSB2b2lkIDAgPyBfZyA6IHMpICE9PSBudWxsICYmIF9oICE9PSB2b2lkIDAgPyBfaCA6IHRydWUsXG4gICAgICAgIHN0cmljdFR5cGVzOiAoX2sgPSAoX2ogPSBvLnN0cmljdFR5cGVzKSAhPT0gbnVsbCAmJiBfaiAhPT0gdm9pZCAwID8gX2ogOiBzKSAhPT0gbnVsbCAmJiBfayAhPT0gdm9pZCAwID8gX2sgOiBcImxvZ1wiLFxuICAgICAgICBzdHJpY3RUdXBsZXM6IChfbSA9IChfbCA9IG8uc3RyaWN0VHVwbGVzKSAhPT0gbnVsbCAmJiBfbCAhPT0gdm9pZCAwID8gX2wgOiBzKSAhPT0gbnVsbCAmJiBfbSAhPT0gdm9pZCAwID8gX20gOiBcImxvZ1wiLFxuICAgICAgICBzdHJpY3RSZXF1aXJlZDogKF9wID0gKF9vID0gby5zdHJpY3RSZXF1aXJlZCkgIT09IG51bGwgJiYgX28gIT09IHZvaWQgMCA/IF9vIDogcykgIT09IG51bGwgJiYgX3AgIT09IHZvaWQgMCA/IF9wIDogZmFsc2UsXG4gICAgICAgIGNvZGU6IG8uY29kZSA/IHsgLi4uby5jb2RlLCBvcHRpbWl6ZSwgcmVnRXhwIH0gOiB7IG9wdGltaXplLCByZWdFeHAgfSxcbiAgICAgICAgbG9vcFJlcXVpcmVkOiAoX3EgPSBvLmxvb3BSZXF1aXJlZCkgIT09IG51bGwgJiYgX3EgIT09IHZvaWQgMCA/IF9xIDogTUFYX0VYUFJFU1NJT04sXG4gICAgICAgIGxvb3BFbnVtOiAoX3IgPSBvLmxvb3BFbnVtKSAhPT0gbnVsbCAmJiBfciAhPT0gdm9pZCAwID8gX3IgOiBNQVhfRVhQUkVTU0lPTixcbiAgICAgICAgbWV0YTogKF9zID0gby5tZXRhKSAhPT0gbnVsbCAmJiBfcyAhPT0gdm9pZCAwID8gX3MgOiB0cnVlLFxuICAgICAgICBtZXNzYWdlczogKF90ID0gby5tZXNzYWdlcykgIT09IG51bGwgJiYgX3QgIT09IHZvaWQgMCA/IF90IDogdHJ1ZSxcbiAgICAgICAgaW5saW5lUmVmczogKF91ID0gby5pbmxpbmVSZWZzKSAhPT0gbnVsbCAmJiBfdSAhPT0gdm9pZCAwID8gX3UgOiB0cnVlLFxuICAgICAgICBzY2hlbWFJZDogKF92ID0gby5zY2hlbWFJZCkgIT09IG51bGwgJiYgX3YgIT09IHZvaWQgMCA/IF92IDogXCIkaWRcIixcbiAgICAgICAgYWRkVXNlZFNjaGVtYTogKF93ID0gby5hZGRVc2VkU2NoZW1hKSAhPT0gbnVsbCAmJiBfdyAhPT0gdm9pZCAwID8gX3cgOiB0cnVlLFxuICAgICAgICB2YWxpZGF0ZVNjaGVtYTogKF94ID0gby52YWxpZGF0ZVNjaGVtYSkgIT09IG51bGwgJiYgX3ggIT09IHZvaWQgMCA/IF94IDogdHJ1ZSxcbiAgICAgICAgdmFsaWRhdGVGb3JtYXRzOiAoX3kgPSBvLnZhbGlkYXRlRm9ybWF0cykgIT09IG51bGwgJiYgX3kgIT09IHZvaWQgMCA/IF95IDogdHJ1ZSxcbiAgICAgICAgdW5pY29kZVJlZ0V4cDogKF96ID0gby51bmljb2RlUmVnRXhwKSAhPT0gbnVsbCAmJiBfeiAhPT0gdm9pZCAwID8gX3ogOiB0cnVlLFxuICAgICAgICBpbnQzMnJhbmdlOiAoXzAgPSBvLmludDMycmFuZ2UpICE9PSBudWxsICYmIF8wICE9PSB2b2lkIDAgPyBfMCA6IHRydWUsXG4gICAgICAgIHVyaVJlc29sdmVyOiB1cmlSZXNvbHZlcixcbiAgICB9O1xufVxuY2xhc3MgQWp2IHtcbiAgICBjb25zdHJ1Y3RvcihvcHRzID0ge30pIHtcbiAgICAgICAgdGhpcy5zY2hlbWFzID0ge307XG4gICAgICAgIHRoaXMucmVmcyA9IHt9O1xuICAgICAgICB0aGlzLmZvcm1hdHMgPSB7fTtcbiAgICAgICAgdGhpcy5fY29tcGlsYXRpb25zID0gbmV3IFNldCgpO1xuICAgICAgICB0aGlzLl9sb2FkaW5nID0ge307XG4gICAgICAgIHRoaXMuX2NhY2hlID0gbmV3IE1hcCgpO1xuICAgICAgICBvcHRzID0gdGhpcy5vcHRzID0geyAuLi5vcHRzLCAuLi5yZXF1aXJlZE9wdGlvbnMob3B0cykgfTtcbiAgICAgICAgY29uc3QgeyBlczUsIGxpbmVzIH0gPSB0aGlzLm9wdHMuY29kZTtcbiAgICAgICAgdGhpcy5zY29wZSA9IG5ldyBjb2RlZ2VuXzIuVmFsdWVTY29wZSh7IHNjb3BlOiB7fSwgcHJlZml4ZXM6IEVYVF9TQ09QRV9OQU1FUywgZXM1LCBsaW5lcyB9KTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBnZXRMb2dnZXIob3B0cy5sb2dnZXIpO1xuICAgICAgICBjb25zdCBmb3JtYXRPcHQgPSBvcHRzLnZhbGlkYXRlRm9ybWF0cztcbiAgICAgICAgb3B0cy52YWxpZGF0ZUZvcm1hdHMgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5SVUxFUyA9ICgwLCBydWxlc18xLmdldFJ1bGVzKSgpO1xuICAgICAgICBjaGVja09wdGlvbnMuY2FsbCh0aGlzLCByZW1vdmVkT3B0aW9ucywgb3B0cywgXCJOT1QgU1VQUE9SVEVEXCIpO1xuICAgICAgICBjaGVja09wdGlvbnMuY2FsbCh0aGlzLCBkZXByZWNhdGVkT3B0aW9ucywgb3B0cywgXCJERVBSRUNBVEVEXCIsIFwid2FyblwiKTtcbiAgICAgICAgdGhpcy5fbWV0YU9wdHMgPSBnZXRNZXRhU2NoZW1hT3B0aW9ucy5jYWxsKHRoaXMpO1xuICAgICAgICBpZiAob3B0cy5mb3JtYXRzKVxuICAgICAgICAgICAgYWRkSW5pdGlhbEZvcm1hdHMuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5fYWRkVm9jYWJ1bGFyaWVzKCk7XG4gICAgICAgIHRoaXMuX2FkZERlZmF1bHRNZXRhU2NoZW1hKCk7XG4gICAgICAgIGlmIChvcHRzLmtleXdvcmRzKVxuICAgICAgICAgICAgYWRkSW5pdGlhbEtleXdvcmRzLmNhbGwodGhpcywgb3B0cy5rZXl3b3Jkcyk7XG4gICAgICAgIGlmICh0eXBlb2Ygb3B0cy5tZXRhID09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICB0aGlzLmFkZE1ldGFTY2hlbWEob3B0cy5tZXRhKTtcbiAgICAgICAgYWRkSW5pdGlhbFNjaGVtYXMuY2FsbCh0aGlzKTtcbiAgICAgICAgb3B0cy52YWxpZGF0ZUZvcm1hdHMgPSBmb3JtYXRPcHQ7XG4gICAgfVxuICAgIF9hZGRWb2NhYnVsYXJpZXMoKSB7XG4gICAgICAgIHRoaXMuYWRkS2V5d29yZChcIiRhc3luY1wiKTtcbiAgICB9XG4gICAgX2FkZERlZmF1bHRNZXRhU2NoZW1hKCkge1xuICAgICAgICBjb25zdCB7ICRkYXRhLCBtZXRhLCBzY2hlbWFJZCB9ID0gdGhpcy5vcHRzO1xuICAgICAgICBsZXQgX2RhdGFSZWZTY2hlbWEgPSAkZGF0YVJlZlNjaGVtYTtcbiAgICAgICAgaWYgKHNjaGVtYUlkID09PSBcImlkXCIpIHtcbiAgICAgICAgICAgIF9kYXRhUmVmU2NoZW1hID0geyAuLi4kZGF0YVJlZlNjaGVtYSB9O1xuICAgICAgICAgICAgX2RhdGFSZWZTY2hlbWEuaWQgPSBfZGF0YVJlZlNjaGVtYS4kaWQ7XG4gICAgICAgICAgICBkZWxldGUgX2RhdGFSZWZTY2hlbWEuJGlkO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXRhICYmICRkYXRhKVxuICAgICAgICAgICAgdGhpcy5hZGRNZXRhU2NoZW1hKF9kYXRhUmVmU2NoZW1hLCBfZGF0YVJlZlNjaGVtYVtzY2hlbWFJZF0sIGZhbHNlKTtcbiAgICB9XG4gICAgZGVmYXVsdE1ldGEoKSB7XG4gICAgICAgIGNvbnN0IHsgbWV0YSwgc2NoZW1hSWQgfSA9IHRoaXMub3B0cztcbiAgICAgICAgcmV0dXJuICh0aGlzLm9wdHMuZGVmYXVsdE1ldGEgPSB0eXBlb2YgbWV0YSA9PSBcIm9iamVjdFwiID8gbWV0YVtzY2hlbWFJZF0gfHwgbWV0YSA6IHVuZGVmaW5lZCk7XG4gICAgfVxuICAgIHZhbGlkYXRlKHNjaGVtYUtleVJlZiwgLy8ga2V5LCByZWYgb3Igc2NoZW1hIG9iamVjdFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkdW5kYW50LXR5cGUtY29uc3RpdHVlbnRzXG4gICAgZGF0YSAvLyB0byBiZSB2YWxpZGF0ZWRcbiAgICApIHtcbiAgICAgICAgbGV0IHY7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hS2V5UmVmID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHYgPSB0aGlzLmdldFNjaGVtYShzY2hlbWFLZXlSZWYpO1xuICAgICAgICAgICAgaWYgKCF2KVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbm8gc2NoZW1hIHdpdGgga2V5IG9yIHJlZiBcIiR7c2NoZW1hS2V5UmVmfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2ID0gdGhpcy5jb21waWxlKHNjaGVtYUtleVJlZik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdmFsaWQgPSB2KGRhdGEpO1xuICAgICAgICBpZiAoIShcIiRhc3luY1wiIGluIHYpKVxuICAgICAgICAgICAgdGhpcy5lcnJvcnMgPSB2LmVycm9ycztcbiAgICAgICAgcmV0dXJuIHZhbGlkO1xuICAgIH1cbiAgICBjb21waWxlKHNjaGVtYSwgX21ldGEpIHtcbiAgICAgICAgY29uc3Qgc2NoID0gdGhpcy5fYWRkU2NoZW1hKHNjaGVtYSwgX21ldGEpO1xuICAgICAgICByZXR1cm4gKHNjaC52YWxpZGF0ZSB8fCB0aGlzLl9jb21waWxlU2NoZW1hRW52KHNjaCkpO1xuICAgIH1cbiAgICBjb21waWxlQXN5bmMoc2NoZW1hLCBtZXRhKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5vcHRzLmxvYWRTY2hlbWEgIT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJvcHRpb25zLmxvYWRTY2hlbWEgc2hvdWxkIGJlIGEgZnVuY3Rpb25cIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBsb2FkU2NoZW1hIH0gPSB0aGlzLm9wdHM7XG4gICAgICAgIHJldHVybiBydW5Db21waWxlQXN5bmMuY2FsbCh0aGlzLCBzY2hlbWEsIG1ldGEpO1xuICAgICAgICBhc3luYyBmdW5jdGlvbiBydW5Db21waWxlQXN5bmMoX3NjaGVtYSwgX21ldGEpIHtcbiAgICAgICAgICAgIGF3YWl0IGxvYWRNZXRhU2NoZW1hLmNhbGwodGhpcywgX3NjaGVtYS4kc2NoZW1hKTtcbiAgICAgICAgICAgIGNvbnN0IHNjaCA9IHRoaXMuX2FkZFNjaGVtYShfc2NoZW1hLCBfbWV0YSk7XG4gICAgICAgICAgICByZXR1cm4gc2NoLnZhbGlkYXRlIHx8IF9jb21waWxlQXN5bmMuY2FsbCh0aGlzLCBzY2gpO1xuICAgICAgICB9XG4gICAgICAgIGFzeW5jIGZ1bmN0aW9uIGxvYWRNZXRhU2NoZW1hKCRyZWYpIHtcbiAgICAgICAgICAgIGlmICgkcmVmICYmICF0aGlzLmdldFNjaGVtYSgkcmVmKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHJ1bkNvbXBpbGVBc3luYy5jYWxsKHRoaXMsIHsgJHJlZiB9LCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhc3luYyBmdW5jdGlvbiBfY29tcGlsZUFzeW5jKHNjaCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY29tcGlsZVNjaGVtYUVudihzY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgcmVmX2Vycm9yXzEuZGVmYXVsdCkpXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgICAgICAgICAgY2hlY2tMb2FkZWQuY2FsbCh0aGlzLCBlKTtcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2FkTWlzc2luZ1NjaGVtYS5jYWxsKHRoaXMsIGUubWlzc2luZ1NjaGVtYSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb21waWxlQXN5bmMuY2FsbCh0aGlzLCBzY2gpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrTG9hZGVkKHsgbWlzc2luZ1NjaGVtYTogcmVmLCBtaXNzaW5nUmVmIH0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJlZnNbcmVmXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQW55U2NoZW1hICR7cmVmfSBpcyBsb2FkZWQgYnV0ICR7bWlzc2luZ1JlZn0gY2Fubm90IGJlIHJlc29sdmVkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gbG9hZE1pc3NpbmdTY2hlbWEocmVmKSB7XG4gICAgICAgICAgICBjb25zdCBfc2NoZW1hID0gYXdhaXQgX2xvYWRTY2hlbWEuY2FsbCh0aGlzLCByZWYpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLnJlZnNbcmVmXSlcbiAgICAgICAgICAgICAgICBhd2FpdCBsb2FkTWV0YVNjaGVtYS5jYWxsKHRoaXMsIF9zY2hlbWEuJHNjaGVtYSk7XG4gICAgICAgICAgICBpZiAoIXRoaXMucmVmc1tyZWZdKVxuICAgICAgICAgICAgICAgIHRoaXMuYWRkU2NoZW1hKF9zY2hlbWEsIHJlZiwgbWV0YSk7XG4gICAgICAgIH1cbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gX2xvYWRTY2hlbWEocmVmKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gdGhpcy5fbG9hZGluZ1tyZWZdO1xuICAgICAgICAgICAgaWYgKHApXG4gICAgICAgICAgICAgICAgcmV0dXJuIHA7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCAodGhpcy5fbG9hZGluZ1tyZWZdID0gbG9hZFNjaGVtYShyZWYpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9sb2FkaW5nW3JlZl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gQWRkcyBzY2hlbWEgdG8gdGhlIGluc3RhbmNlXG4gICAgYWRkU2NoZW1hKHNjaGVtYSwgLy8gSWYgYXJyYXkgaXMgcGFzc2VkLCBga2V5YCB3aWxsIGJlIGlnbm9yZWRcbiAgICBrZXksIC8vIE9wdGlvbmFsIHNjaGVtYSBrZXkuIENhbiBiZSBwYXNzZWQgdG8gYHZhbGlkYXRlYCBtZXRob2QgaW5zdGVhZCBvZiBzY2hlbWEgb2JqZWN0IG9yIGlkL3JlZi4gT25lIHNjaGVtYSBwZXIgaW5zdGFuY2UgY2FuIGhhdmUgZW1wdHkgYGlkYCBhbmQgYGtleWAuXG4gICAgX21ldGEsIC8vIHRydWUgaWYgc2NoZW1hIGlzIGEgbWV0YS1zY2hlbWEuIFVzZWQgaW50ZXJuYWxseSwgYWRkTWV0YVNjaGVtYSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICAgIF92YWxpZGF0ZVNjaGVtYSA9IHRoaXMub3B0cy52YWxpZGF0ZVNjaGVtYSAvLyBmYWxzZSB0byBza2lwIHNjaGVtYSB2YWxpZGF0aW9uLiBVc2VkIGludGVybmFsbHksIG9wdGlvbiB2YWxpZGF0ZVNjaGVtYSBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkLlxuICAgICkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWEpKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHNjaCBvZiBzY2hlbWEpXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTY2hlbWEoc2NoLCB1bmRlZmluZWQsIF9tZXRhLCBfdmFsaWRhdGVTY2hlbWEpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGlkO1xuICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgY29uc3QgeyBzY2hlbWFJZCB9ID0gdGhpcy5vcHRzO1xuICAgICAgICAgICAgaWQgPSBzY2hlbWFbc2NoZW1hSWRdO1xuICAgICAgICAgICAgaWYgKGlkICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGlkICE9IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHNjaGVtYSAke3NjaGVtYUlkfSBtdXN0IGJlIHN0cmluZ2ApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGtleSA9ICgwLCByZXNvbHZlXzEubm9ybWFsaXplSWQpKGtleSB8fCBpZCk7XG4gICAgICAgIHRoaXMuX2NoZWNrVW5pcXVlKGtleSk7XG4gICAgICAgIHRoaXMuc2NoZW1hc1trZXldID0gdGhpcy5fYWRkU2NoZW1hKHNjaGVtYSwgX21ldGEsIGtleSwgX3ZhbGlkYXRlU2NoZW1hLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8vIEFkZCBzY2hlbWEgdGhhdCB3aWxsIGJlIHVzZWQgdG8gdmFsaWRhdGUgb3RoZXIgc2NoZW1hc1xuICAgIC8vIG9wdGlvbnMgaW4gTUVUQV9JR05PUkVfT1BUSU9OUyBhcmUgYWx3YXkgc2V0IHRvIGZhbHNlXG4gICAgYWRkTWV0YVNjaGVtYShzY2hlbWEsIGtleSwgLy8gc2NoZW1hIGtleVxuICAgIF92YWxpZGF0ZVNjaGVtYSA9IHRoaXMub3B0cy52YWxpZGF0ZVNjaGVtYSAvLyBmYWxzZSB0byBza2lwIHNjaGVtYSB2YWxpZGF0aW9uLCBjYW4gYmUgdXNlZCB0byBvdmVycmlkZSB2YWxpZGF0ZVNjaGVtYSBvcHRpb24gZm9yIG1ldGEtc2NoZW1hXG4gICAgKSB7XG4gICAgICAgIHRoaXMuYWRkU2NoZW1hKHNjaGVtYSwga2V5LCB0cnVlLCBfdmFsaWRhdGVTY2hlbWEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gIFZhbGlkYXRlIHNjaGVtYSBhZ2FpbnN0IGl0cyBtZXRhLXNjaGVtYVxuICAgIHZhbGlkYXRlU2NoZW1hKHNjaGVtYSwgdGhyb3dPckxvZ0Vycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09IFwiYm9vbGVhblwiKVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIGxldCAkc2NoZW1hO1xuICAgICAgICAkc2NoZW1hID0gc2NoZW1hLiRzY2hlbWE7XG4gICAgICAgIGlmICgkc2NoZW1hICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mICRzY2hlbWEgIT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiJHNjaGVtYSBtdXN0IGJlIGEgc3RyaW5nXCIpO1xuICAgICAgICB9XG4gICAgICAgICRzY2hlbWEgPSAkc2NoZW1hIHx8IHRoaXMub3B0cy5kZWZhdWx0TWV0YSB8fCB0aGlzLmRlZmF1bHRNZXRhKCk7XG4gICAgICAgIGlmICghJHNjaGVtYSkge1xuICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihcIm1ldGEtc2NoZW1hIG5vdCBhdmFpbGFibGVcIik7XG4gICAgICAgICAgICB0aGlzLmVycm9ycyA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB2YWxpZCA9IHRoaXMudmFsaWRhdGUoJHNjaGVtYSwgc2NoZW1hKTtcbiAgICAgICAgaWYgKCF2YWxpZCAmJiB0aHJvd09yTG9nRXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBcInNjaGVtYSBpcyBpbnZhbGlkOiBcIiArIHRoaXMuZXJyb3JzVGV4dCgpO1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy52YWxpZGF0ZVNjaGVtYSA9PT0gXCJsb2dcIilcbiAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbGlkO1xuICAgIH1cbiAgICAvLyBHZXQgY29tcGlsZWQgc2NoZW1hIGJ5IGBrZXlgIG9yIGByZWZgLlxuICAgIC8vIChga2V5YCB0aGF0IHdhcyBwYXNzZWQgdG8gYGFkZFNjaGVtYWAgb3IgZnVsbCBzY2hlbWEgcmVmZXJlbmNlIC0gYHNjaGVtYS4kaWRgIG9yIHJlc29sdmVkIGlkKVxuICAgIGdldFNjaGVtYShrZXlSZWYpIHtcbiAgICAgICAgbGV0IHNjaDtcbiAgICAgICAgd2hpbGUgKHR5cGVvZiAoc2NoID0gZ2V0U2NoRW52LmNhbGwodGhpcywga2V5UmVmKSkgPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIGtleVJlZiA9IHNjaDtcbiAgICAgICAgaWYgKHNjaCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjb25zdCB7IHNjaGVtYUlkIH0gPSB0aGlzLm9wdHM7XG4gICAgICAgICAgICBjb25zdCByb290ID0gbmV3IGNvbXBpbGVfMS5TY2hlbWFFbnYoeyBzY2hlbWE6IHt9LCBzY2hlbWFJZCB9KTtcbiAgICAgICAgICAgIHNjaCA9IGNvbXBpbGVfMS5yZXNvbHZlU2NoZW1hLmNhbGwodGhpcywgcm9vdCwga2V5UmVmKTtcbiAgICAgICAgICAgIGlmICghc2NoKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRoaXMucmVmc1trZXlSZWZdID0gc2NoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoc2NoLnZhbGlkYXRlIHx8IHRoaXMuX2NvbXBpbGVTY2hlbWFFbnYoc2NoKSk7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBjYWNoZWQgc2NoZW1hKHMpLlxuICAgIC8vIElmIG5vIHBhcmFtZXRlciBpcyBwYXNzZWQgYWxsIHNjaGVtYXMgYnV0IG1ldGEtc2NoZW1hcyBhcmUgcmVtb3ZlZC5cbiAgICAvLyBJZiBSZWdFeHAgaXMgcGFzc2VkIGFsbCBzY2hlbWFzIHdpdGgga2V5L2lkIG1hdGNoaW5nIHBhdHRlcm4gYnV0IG1ldGEtc2NoZW1hcyBhcmUgcmVtb3ZlZC5cbiAgICAvLyBFdmVuIGlmIHNjaGVtYSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIHNjaGVtYXMgaXQgc3RpbGwgY2FuIGJlIHJlbW92ZWQgYXMgb3RoZXIgc2NoZW1hcyBoYXZlIGxvY2FsIHJlZmVyZW5jZXMuXG4gICAgcmVtb3ZlU2NoZW1hKHNjaGVtYUtleVJlZikge1xuICAgICAgICBpZiAoc2NoZW1hS2V5UmVmIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW1vdmVBbGxTY2hlbWFzKHRoaXMuc2NoZW1hcywgc2NoZW1hS2V5UmVmKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbW92ZUFsbFNjaGVtYXModGhpcy5yZWZzLCBzY2hlbWFLZXlSZWYpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgc3dpdGNoICh0eXBlb2Ygc2NoZW1hS2V5UmVmKSB7XG4gICAgICAgICAgICBjYXNlIFwidW5kZWZpbmVkXCI6XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWxsU2NoZW1hcyh0aGlzLnNjaGVtYXMpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUFsbFNjaGVtYXModGhpcy5yZWZzKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5jbGVhcigpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgY2FzZSBcInN0cmluZ1wiOiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NoID0gZ2V0U2NoRW52LmNhbGwodGhpcywgc2NoZW1hS2V5UmVmKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaCA9PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5kZWxldGUoc2NoLnNjaGVtYSk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuc2NoZW1hc1tzY2hlbWFLZXlSZWZdO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnJlZnNbc2NoZW1hS2V5UmVmXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgXCJvYmplY3RcIjoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlS2V5ID0gc2NoZW1hS2V5UmVmO1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlLmRlbGV0ZShjYWNoZUtleSk7XG4gICAgICAgICAgICAgICAgbGV0IGlkID0gc2NoZW1hS2V5UmVmW3RoaXMub3B0cy5zY2hlbWFJZF07XG4gICAgICAgICAgICAgICAgaWYgKGlkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlkID0gKDAsIHJlc29sdmVfMS5ub3JtYWxpemVJZCkoaWQpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5zY2hlbWFzW2lkXTtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMucmVmc1tpZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhanYucmVtb3ZlU2NoZW1hOiBpbnZhbGlkIHBhcmFtZXRlclwiKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBhZGQgXCJ2b2NhYnVsYXJ5XCIgLSBhIGNvbGxlY3Rpb24gb2Yga2V5d29yZHNcbiAgICBhZGRWb2NhYnVsYXJ5KGRlZmluaXRpb25zKSB7XG4gICAgICAgIGZvciAoY29uc3QgZGVmIG9mIGRlZmluaXRpb25zKVxuICAgICAgICAgICAgdGhpcy5hZGRLZXl3b3JkKGRlZik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRLZXl3b3JkKGt3ZE9yRGVmLCBkZWYgLy8gZGVwcmVjYXRlZFxuICAgICkge1xuICAgICAgICBsZXQga2V5d29yZDtcbiAgICAgICAgaWYgKHR5cGVvZiBrd2RPckRlZiA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBrZXl3b3JkID0ga3dkT3JEZWY7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGRlZiA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIud2FybihcInRoZXNlIHBhcmFtZXRlcnMgYXJlIGRlcHJlY2F0ZWQsIHNlZSBkb2NzIGZvciBhZGRLZXl3b3JkXCIpO1xuICAgICAgICAgICAgICAgIGRlZi5rZXl3b3JkID0ga2V5d29yZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2Yga3dkT3JEZWYgPT0gXCJvYmplY3RcIiAmJiBkZWYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGVmID0ga3dkT3JEZWY7XG4gICAgICAgICAgICBrZXl3b3JkID0gZGVmLmtleXdvcmQ7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShrZXl3b3JkKSAmJiAha2V5d29yZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhZGRLZXl3b3Jkczoga2V5d29yZCBtdXN0IGJlIHN0cmluZyBvciBub24tZW1wdHkgYXJyYXlcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGFkZEtleXdvcmRzIHBhcmFtZXRlcnNcIik7XG4gICAgICAgIH1cbiAgICAgICAgY2hlY2tLZXl3b3JkLmNhbGwodGhpcywga2V5d29yZCwgZGVmKTtcbiAgICAgICAgaWYgKCFkZWYpIHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEuZWFjaEl0ZW0pKGtleXdvcmQsIChrd2QpID0+IGFkZFJ1bGUuY2FsbCh0aGlzLCBrd2QpKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIGtleXdvcmRNZXRhc2NoZW1hLmNhbGwodGhpcywgZGVmKTtcbiAgICAgICAgY29uc3QgZGVmaW5pdGlvbiA9IHtcbiAgICAgICAgICAgIC4uLmRlZixcbiAgICAgICAgICAgIHR5cGU6ICgwLCBkYXRhVHlwZV8xLmdldEpTT05UeXBlcykoZGVmLnR5cGUpLFxuICAgICAgICAgICAgc2NoZW1hVHlwZTogKDAsIGRhdGFUeXBlXzEuZ2V0SlNPTlR5cGVzKShkZWYuc2NoZW1hVHlwZSksXG4gICAgICAgIH07XG4gICAgICAgICgwLCB1dGlsXzEuZWFjaEl0ZW0pKGtleXdvcmQsIGRlZmluaXRpb24udHlwZS5sZW5ndGggPT09IDBcbiAgICAgICAgICAgID8gKGspID0+IGFkZFJ1bGUuY2FsbCh0aGlzLCBrLCBkZWZpbml0aW9uKVxuICAgICAgICAgICAgOiAoaykgPT4gZGVmaW5pdGlvbi50eXBlLmZvckVhY2goKHQpID0+IGFkZFJ1bGUuY2FsbCh0aGlzLCBrLCBkZWZpbml0aW9uLCB0KSkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZ2V0S2V5d29yZChrZXl3b3JkKSB7XG4gICAgICAgIGNvbnN0IHJ1bGUgPSB0aGlzLlJVTEVTLmFsbFtrZXl3b3JkXTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBydWxlID09IFwib2JqZWN0XCIgPyBydWxlLmRlZmluaXRpb24gOiAhIXJ1bGU7XG4gICAgfVxuICAgIC8vIFJlbW92ZSBrZXl3b3JkXG4gICAgcmVtb3ZlS2V5d29yZChrZXl3b3JkKSB7XG4gICAgICAgIC8vIFRPRE8gcmV0dXJuIHR5cGUgc2hvdWxkIGJlIEFqdlxuICAgICAgICBjb25zdCB7IFJVTEVTIH0gPSB0aGlzO1xuICAgICAgICBkZWxldGUgUlVMRVMua2V5d29yZHNba2V5d29yZF07XG4gICAgICAgIGRlbGV0ZSBSVUxFUy5hbGxba2V5d29yZF07XG4gICAgICAgIGZvciAoY29uc3QgZ3JvdXAgb2YgUlVMRVMucnVsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGkgPSBncm91cC5ydWxlcy5maW5kSW5kZXgoKHJ1bGUpID0+IHJ1bGUua2V5d29yZCA9PT0ga2V5d29yZCk7XG4gICAgICAgICAgICBpZiAoaSA+PSAwKVxuICAgICAgICAgICAgICAgIGdyb3VwLnJ1bGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLy8gQWRkIGZvcm1hdFxuICAgIGFkZEZvcm1hdChuYW1lLCBmb3JtYXQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXQgPT0gXCJzdHJpbmdcIilcbiAgICAgICAgICAgIGZvcm1hdCA9IG5ldyBSZWdFeHAoZm9ybWF0KTtcbiAgICAgICAgdGhpcy5mb3JtYXRzW25hbWVdID0gZm9ybWF0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZXJyb3JzVGV4dChlcnJvcnMgPSB0aGlzLmVycm9ycywgLy8gb3B0aW9uYWwgYXJyYXkgb2YgdmFsaWRhdGlvbiBlcnJvcnNcbiAgICB7IHNlcGFyYXRvciA9IFwiLCBcIiwgZGF0YVZhciA9IFwiZGF0YVwiIH0gPSB7fSAvLyBvcHRpb25hbCBvcHRpb25zIHdpdGggcHJvcGVydGllcyBgc2VwYXJhdG9yYCBhbmQgYGRhdGFWYXJgXG4gICAgKSB7XG4gICAgICAgIGlmICghZXJyb3JzIHx8IGVycm9ycy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm4gXCJObyBlcnJvcnNcIjtcbiAgICAgICAgcmV0dXJuIGVycm9yc1xuICAgICAgICAgICAgLm1hcCgoZSkgPT4gYCR7ZGF0YVZhcn0ke2UuaW5zdGFuY2VQYXRofSAke2UubWVzc2FnZX1gKVxuICAgICAgICAgICAgLnJlZHVjZSgodGV4dCwgbXNnKSA9PiB0ZXh0ICsgc2VwYXJhdG9yICsgbXNnKTtcbiAgICB9XG4gICAgJGRhdGFNZXRhU2NoZW1hKG1ldGFTY2hlbWEsIGtleXdvcmRzSnNvblBvaW50ZXJzKSB7XG4gICAgICAgIGNvbnN0IHJ1bGVzID0gdGhpcy5SVUxFUy5hbGw7XG4gICAgICAgIG1ldGFTY2hlbWEgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG1ldGFTY2hlbWEpKTtcbiAgICAgICAgZm9yIChjb25zdCBqc29uUG9pbnRlciBvZiBrZXl3b3Jkc0pzb25Qb2ludGVycykge1xuICAgICAgICAgICAgY29uc3Qgc2VnbWVudHMgPSBqc29uUG9pbnRlci5zcGxpdChcIi9cIikuc2xpY2UoMSk7IC8vIGZpcnN0IHNlZ21lbnQgaXMgYW4gZW1wdHkgc3RyaW5nXG4gICAgICAgICAgICBsZXQga2V5d29yZHMgPSBtZXRhU2NoZW1hO1xuICAgICAgICAgICAgZm9yIChjb25zdCBzZWcgb2Ygc2VnbWVudHMpXG4gICAgICAgICAgICAgICAga2V5d29yZHMgPSBrZXl3b3Jkc1tzZWddO1xuICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gcnVsZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBydWxlID0gcnVsZXNba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHJ1bGUgIT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgY29uc3QgeyAkZGF0YSB9ID0gcnVsZS5kZWZpbml0aW9uO1xuICAgICAgICAgICAgICAgIGNvbnN0IHNjaGVtYSA9IGtleXdvcmRzW2tleV07XG4gICAgICAgICAgICAgICAgaWYgKCRkYXRhICYmIHNjaGVtYSlcbiAgICAgICAgICAgICAgICAgICAga2V5d29yZHNba2V5XSA9IHNjaGVtYU9yRGF0YShzY2hlbWEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXRhU2NoZW1hO1xuICAgIH1cbiAgICBfcmVtb3ZlQWxsU2NoZW1hcyhzY2hlbWFzLCByZWdleCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleVJlZiBpbiBzY2hlbWFzKSB7XG4gICAgICAgICAgICBjb25zdCBzY2ggPSBzY2hlbWFzW2tleVJlZl07XG4gICAgICAgICAgICBpZiAoIXJlZ2V4IHx8IHJlZ2V4LnRlc3Qoa2V5UmVmKSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc2NoID09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNjaGVtYXNba2V5UmVmXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2NoICYmICFzY2gubWV0YSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZS5kZWxldGUoc2NoLnNjaGVtYSk7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzY2hlbWFzW2tleVJlZl07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIF9hZGRTY2hlbWEoc2NoZW1hLCBtZXRhLCBiYXNlSWQsIHZhbGlkYXRlU2NoZW1hID0gdGhpcy5vcHRzLnZhbGlkYXRlU2NoZW1hLCBhZGRTY2hlbWEgPSB0aGlzLm9wdHMuYWRkVXNlZFNjaGVtYSkge1xuICAgICAgICBsZXQgaWQ7XG4gICAgICAgIGNvbnN0IHsgc2NoZW1hSWQgfSA9IHRoaXMub3B0cztcbiAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgaWQgPSBzY2hlbWFbc2NoZW1hSWRdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0cy5qdGQpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2NoZW1hIG11c3QgYmUgb2JqZWN0XCIpO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIHNjaGVtYSAhPSBcImJvb2xlYW5cIilcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzY2hlbWEgbXVzdCBiZSBvYmplY3Qgb3IgYm9vbGVhblwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgc2NoID0gdGhpcy5fY2FjaGUuZ2V0KHNjaGVtYSk7XG4gICAgICAgIGlmIChzY2ggIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiBzY2g7XG4gICAgICAgIGJhc2VJZCA9ICgwLCByZXNvbHZlXzEubm9ybWFsaXplSWQpKGlkIHx8IGJhc2VJZCk7XG4gICAgICAgIGNvbnN0IGxvY2FsUmVmcyA9IHJlc29sdmVfMS5nZXRTY2hlbWFSZWZzLmNhbGwodGhpcywgc2NoZW1hLCBiYXNlSWQpO1xuICAgICAgICBzY2ggPSBuZXcgY29tcGlsZV8xLlNjaGVtYUVudih7IHNjaGVtYSwgc2NoZW1hSWQsIG1ldGEsIGJhc2VJZCwgbG9jYWxSZWZzIH0pO1xuICAgICAgICB0aGlzLl9jYWNoZS5zZXQoc2NoLnNjaGVtYSwgc2NoKTtcbiAgICAgICAgaWYgKGFkZFNjaGVtYSAmJiAhYmFzZUlkLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XG4gICAgICAgICAgICAvLyBUT0RPIGF0bSBpdCBpcyBhbGxvd2VkIHRvIG92ZXJ3cml0ZSBzY2hlbWFzIHdpdGhvdXQgaWQgKGluc3RlYWQgb2Ygbm90IGFkZGluZyB0aGVtKVxuICAgICAgICAgICAgaWYgKGJhc2VJZClcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1VuaXF1ZShiYXNlSWQpO1xuICAgICAgICAgICAgdGhpcy5yZWZzW2Jhc2VJZF0gPSBzY2g7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbGlkYXRlU2NoZW1hKVxuICAgICAgICAgICAgdGhpcy52YWxpZGF0ZVNjaGVtYShzY2hlbWEsIHRydWUpO1xuICAgICAgICByZXR1cm4gc2NoO1xuICAgIH1cbiAgICBfY2hlY2tVbmlxdWUoaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuc2NoZW1hc1tpZF0gfHwgdGhpcy5yZWZzW2lkXSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBzY2hlbWEgd2l0aCBrZXkgb3IgaWQgXCIke2lkfVwiIGFscmVhZHkgZXhpc3RzYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NvbXBpbGVTY2hlbWFFbnYoc2NoKSB7XG4gICAgICAgIGlmIChzY2gubWV0YSlcbiAgICAgICAgICAgIHRoaXMuX2NvbXBpbGVNZXRhU2NoZW1hKHNjaCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGNvbXBpbGVfMS5jb21waWxlU2NoZW1hLmNhbGwodGhpcywgc2NoKTtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghc2NoLnZhbGlkYXRlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICByZXR1cm4gc2NoLnZhbGlkYXRlO1xuICAgIH1cbiAgICBfY29tcGlsZU1ldGFTY2hlbWEoc2NoKSB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRPcHRzID0gdGhpcy5vcHRzO1xuICAgICAgICB0aGlzLm9wdHMgPSB0aGlzLl9tZXRhT3B0cztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbXBpbGVfMS5jb21waWxlU2NoZW1hLmNhbGwodGhpcywgc2NoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMub3B0cyA9IGN1cnJlbnRPcHRzO1xuICAgICAgICB9XG4gICAgfVxufVxuQWp2LlZhbGlkYXRpb25FcnJvciA9IHZhbGlkYXRpb25fZXJyb3JfMS5kZWZhdWx0O1xuQWp2Lk1pc3NpbmdSZWZFcnJvciA9IHJlZl9lcnJvcl8xLmRlZmF1bHQ7XG5leHBvcnRzLmRlZmF1bHQgPSBBanY7XG5mdW5jdGlvbiBjaGVja09wdGlvbnMoY2hlY2tPcHRzLCBvcHRpb25zLCBtc2csIGxvZyA9IFwiZXJyb3JcIikge1xuICAgIGZvciAoY29uc3Qga2V5IGluIGNoZWNrT3B0cykge1xuICAgICAgICBjb25zdCBvcHQgPSBrZXk7XG4gICAgICAgIGlmIChvcHQgaW4gb3B0aW9ucylcbiAgICAgICAgICAgIHRoaXMubG9nZ2VyW2xvZ10oYCR7bXNnfTogb3B0aW9uICR7a2V5fS4gJHtjaGVja09wdHNbb3B0XX1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBnZXRTY2hFbnYoa2V5UmVmKSB7XG4gICAga2V5UmVmID0gKDAsIHJlc29sdmVfMS5ub3JtYWxpemVJZCkoa2V5UmVmKTsgLy8gVE9ETyB0ZXN0cyBmYWlsIHdpdGhvdXQgdGhpcyBsaW5lXG4gICAgcmV0dXJuIHRoaXMuc2NoZW1hc1trZXlSZWZdIHx8IHRoaXMucmVmc1trZXlSZWZdO1xufVxuZnVuY3Rpb24gYWRkSW5pdGlhbFNjaGVtYXMoKSB7XG4gICAgY29uc3Qgb3B0c1NjaGVtYXMgPSB0aGlzLm9wdHMuc2NoZW1hcztcbiAgICBpZiAoIW9wdHNTY2hlbWFzKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKEFycmF5LmlzQXJyYXkob3B0c1NjaGVtYXMpKVxuICAgICAgICB0aGlzLmFkZFNjaGVtYShvcHRzU2NoZW1hcyk7XG4gICAgZWxzZVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBvcHRzU2NoZW1hcylcbiAgICAgICAgICAgIHRoaXMuYWRkU2NoZW1hKG9wdHNTY2hlbWFzW2tleV0sIGtleSk7XG59XG5mdW5jdGlvbiBhZGRJbml0aWFsRm9ybWF0cygpIHtcbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gdGhpcy5vcHRzLmZvcm1hdHMpIHtcbiAgICAgICAgY29uc3QgZm9ybWF0ID0gdGhpcy5vcHRzLmZvcm1hdHNbbmFtZV07XG4gICAgICAgIGlmIChmb3JtYXQpXG4gICAgICAgICAgICB0aGlzLmFkZEZvcm1hdChuYW1lLCBmb3JtYXQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZEluaXRpYWxLZXl3b3JkcyhkZWZzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGVmcykpIHtcbiAgICAgICAgdGhpcy5hZGRWb2NhYnVsYXJ5KGRlZnMpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMubG9nZ2VyLndhcm4oXCJrZXl3b3JkcyBvcHRpb24gYXMgbWFwIGlzIGRlcHJlY2F0ZWQsIHBhc3MgYXJyYXlcIik7XG4gICAgZm9yIChjb25zdCBrZXl3b3JkIGluIGRlZnMpIHtcbiAgICAgICAgY29uc3QgZGVmID0gZGVmc1trZXl3b3JkXTtcbiAgICAgICAgaWYgKCFkZWYua2V5d29yZClcbiAgICAgICAgICAgIGRlZi5rZXl3b3JkID0ga2V5d29yZDtcbiAgICAgICAgdGhpcy5hZGRLZXl3b3JkKGRlZik7XG4gICAgfVxufVxuZnVuY3Rpb24gZ2V0TWV0YVNjaGVtYU9wdGlvbnMoKSB7XG4gICAgY29uc3QgbWV0YU9wdHMgPSB7IC4uLnRoaXMub3B0cyB9O1xuICAgIGZvciAoY29uc3Qgb3B0IG9mIE1FVEFfSUdOT1JFX09QVElPTlMpXG4gICAgICAgIGRlbGV0ZSBtZXRhT3B0c1tvcHRdO1xuICAgIHJldHVybiBtZXRhT3B0cztcbn1cbmNvbnN0IG5vTG9ncyA9IHsgbG9nKCkgeyB9LCB3YXJuKCkgeyB9LCBlcnJvcigpIHsgfSB9O1xuZnVuY3Rpb24gZ2V0TG9nZ2VyKGxvZ2dlcikge1xuICAgIGlmIChsb2dnZXIgPT09IGZhbHNlKVxuICAgICAgICByZXR1cm4gbm9Mb2dzO1xuICAgIGlmIChsb2dnZXIgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIGNvbnNvbGU7XG4gICAgaWYgKGxvZ2dlci5sb2cgJiYgbG9nZ2VyLndhcm4gJiYgbG9nZ2VyLmVycm9yKVxuICAgICAgICByZXR1cm4gbG9nZ2VyO1xuICAgIHRocm93IG5ldyBFcnJvcihcImxvZ2dlciBtdXN0IGltcGxlbWVudCBsb2csIHdhcm4gYW5kIGVycm9yIG1ldGhvZHNcIik7XG59XG5jb25zdCBLRVlXT1JEX05BTUUgPSAvXlthLXpfJF1bYS16MC05XyQ6LV0qJC9pO1xuZnVuY3Rpb24gY2hlY2tLZXl3b3JkKGtleXdvcmQsIGRlZikge1xuICAgIGNvbnN0IHsgUlVMRVMgfSA9IHRoaXM7XG4gICAgKDAsIHV0aWxfMS5lYWNoSXRlbSkoa2V5d29yZCwgKGt3ZCkgPT4ge1xuICAgICAgICBpZiAoUlVMRVMua2V5d29yZHNba3dkXSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgS2V5d29yZCAke2t3ZH0gaXMgYWxyZWFkeSBkZWZpbmVkYCk7XG4gICAgICAgIGlmICghS0VZV09SRF9OQU1FLnRlc3Qoa3dkKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgS2V5d29yZCAke2t3ZH0gaGFzIGludmFsaWQgbmFtZWApO1xuICAgIH0pO1xuICAgIGlmICghZGVmKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKGRlZi4kZGF0YSAmJiAhKFwiY29kZVwiIGluIGRlZiB8fCBcInZhbGlkYXRlXCIgaW4gZGVmKSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJyRkYXRhIGtleXdvcmQgbXVzdCBoYXZlIFwiY29kZVwiIG9yIFwidmFsaWRhdGVcIiBmdW5jdGlvbicpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGFkZFJ1bGUoa2V5d29yZCwgZGVmaW5pdGlvbiwgZGF0YVR5cGUpIHtcbiAgICB2YXIgX2E7XG4gICAgY29uc3QgcG9zdCA9IGRlZmluaXRpb24gPT09IG51bGwgfHwgZGVmaW5pdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVmaW5pdGlvbi5wb3N0O1xuICAgIGlmIChkYXRhVHlwZSAmJiBwb3N0KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2tleXdvcmQgd2l0aCBcInBvc3RcIiBmbGFnIGNhbm5vdCBoYXZlIFwidHlwZVwiJyk7XG4gICAgY29uc3QgeyBSVUxFUyB9ID0gdGhpcztcbiAgICBsZXQgcnVsZUdyb3VwID0gcG9zdCA/IFJVTEVTLnBvc3QgOiBSVUxFUy5ydWxlcy5maW5kKCh7IHR5cGU6IHQgfSkgPT4gdCA9PT0gZGF0YVR5cGUpO1xuICAgIGlmICghcnVsZUdyb3VwKSB7XG4gICAgICAgIHJ1bGVHcm91cCA9IHsgdHlwZTogZGF0YVR5cGUsIHJ1bGVzOiBbXSB9O1xuICAgICAgICBSVUxFUy5ydWxlcy5wdXNoKHJ1bGVHcm91cCk7XG4gICAgfVxuICAgIFJVTEVTLmtleXdvcmRzW2tleXdvcmRdID0gdHJ1ZTtcbiAgICBpZiAoIWRlZmluaXRpb24pXG4gICAgICAgIHJldHVybjtcbiAgICBjb25zdCBydWxlID0ge1xuICAgICAgICBrZXl3b3JkLFxuICAgICAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgICAgICAuLi5kZWZpbml0aW9uLFxuICAgICAgICAgICAgdHlwZTogKDAsIGRhdGFUeXBlXzEuZ2V0SlNPTlR5cGVzKShkZWZpbml0aW9uLnR5cGUpLFxuICAgICAgICAgICAgc2NoZW1hVHlwZTogKDAsIGRhdGFUeXBlXzEuZ2V0SlNPTlR5cGVzKShkZWZpbml0aW9uLnNjaGVtYVR5cGUpLFxuICAgICAgICB9LFxuICAgIH07XG4gICAgaWYgKGRlZmluaXRpb24uYmVmb3JlKVxuICAgICAgICBhZGRCZWZvcmVSdWxlLmNhbGwodGhpcywgcnVsZUdyb3VwLCBydWxlLCBkZWZpbml0aW9uLmJlZm9yZSk7XG4gICAgZWxzZVxuICAgICAgICBydWxlR3JvdXAucnVsZXMucHVzaChydWxlKTtcbiAgICBSVUxFUy5hbGxba2V5d29yZF0gPSBydWxlO1xuICAgIChfYSA9IGRlZmluaXRpb24uaW1wbGVtZW50cykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmZvckVhY2goKGt3ZCkgPT4gdGhpcy5hZGRLZXl3b3JkKGt3ZCkpO1xufVxuZnVuY3Rpb24gYWRkQmVmb3JlUnVsZShydWxlR3JvdXAsIHJ1bGUsIGJlZm9yZSkge1xuICAgIGNvbnN0IGkgPSBydWxlR3JvdXAucnVsZXMuZmluZEluZGV4KChfcnVsZSkgPT4gX3J1bGUua2V5d29yZCA9PT0gYmVmb3JlKTtcbiAgICBpZiAoaSA+PSAwKSB7XG4gICAgICAgIHJ1bGVHcm91cC5ydWxlcy5zcGxpY2UoaSwgMCwgcnVsZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBydWxlR3JvdXAucnVsZXMucHVzaChydWxlKTtcbiAgICAgICAgdGhpcy5sb2dnZXIud2FybihgcnVsZSAke2JlZm9yZX0gaXMgbm90IGRlZmluZWRgKTtcbiAgICB9XG59XG5mdW5jdGlvbiBrZXl3b3JkTWV0YXNjaGVtYShkZWYpIHtcbiAgICBsZXQgeyBtZXRhU2NoZW1hIH0gPSBkZWY7XG4gICAgaWYgKG1ldGFTY2hlbWEgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChkZWYuJGRhdGEgJiYgdGhpcy5vcHRzLiRkYXRhKVxuICAgICAgICBtZXRhU2NoZW1hID0gc2NoZW1hT3JEYXRhKG1ldGFTY2hlbWEpO1xuICAgIGRlZi52YWxpZGF0ZVNjaGVtYSA9IHRoaXMuY29tcGlsZShtZXRhU2NoZW1hLCB0cnVlKTtcbn1cbmNvbnN0ICRkYXRhUmVmID0ge1xuICAgICRyZWY6IFwiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2Fqdi12YWxpZGF0b3IvYWp2L21hc3Rlci9saWIvcmVmcy9kYXRhLmpzb24jXCIsXG59O1xuZnVuY3Rpb24gc2NoZW1hT3JEYXRhKHNjaGVtYSkge1xuICAgIHJldHVybiB7IGFueU9mOiBbc2NoZW1hLCAkZGF0YVJlZl0gfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvcmUuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1cmkgPSByZXF1aXJlKFwiZmFzdC11cmlcIik7XG51cmkuY29kZSA9ICdyZXF1aXJlKFwiYWp2L2Rpc3QvcnVudGltZS91cmlcIikuZGVmYXVsdCc7XG5leHBvcnRzLmRlZmF1bHQgPSB1cmk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11cmkuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNhbGxSZWYgPSBleHBvcnRzLmdldFZhbGlkYXRlID0gdm9pZCAwO1xuY29uc3QgcmVmX2Vycm9yXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9yZWZfZXJyb3JcIik7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCBuYW1lc18xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvbmFtZXNcIik7XG5jb25zdCBjb21waWxlXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZVwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCIkcmVmXCIsXG4gICAgc2NoZW1hVHlwZTogXCJzdHJpbmdcIixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgc2NoZW1hOiAkcmVmLCBpdCB9ID0gY3h0O1xuICAgICAgICBjb25zdCB7IGJhc2VJZCwgc2NoZW1hRW52OiBlbnYsIHZhbGlkYXRlTmFtZSwgb3B0cywgc2VsZiB9ID0gaXQ7XG4gICAgICAgIGNvbnN0IHsgcm9vdCB9ID0gZW52O1xuICAgICAgICBpZiAoKCRyZWYgPT09IFwiI1wiIHx8ICRyZWYgPT09IFwiIy9cIikgJiYgYmFzZUlkID09PSByb290LmJhc2VJZClcbiAgICAgICAgICAgIHJldHVybiBjYWxsUm9vdFJlZigpO1xuICAgICAgICBjb25zdCBzY2hPckVudiA9IGNvbXBpbGVfMS5yZXNvbHZlUmVmLmNhbGwoc2VsZiwgcm9vdCwgYmFzZUlkLCAkcmVmKTtcbiAgICAgICAgaWYgKHNjaE9yRW52ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICB0aHJvdyBuZXcgcmVmX2Vycm9yXzEuZGVmYXVsdChpdC5vcHRzLnVyaVJlc29sdmVyLCBiYXNlSWQsICRyZWYpO1xuICAgICAgICBpZiAoc2NoT3JFbnYgaW5zdGFuY2VvZiBjb21waWxlXzEuU2NoZW1hRW52KVxuICAgICAgICAgICAgcmV0dXJuIGNhbGxWYWxpZGF0ZShzY2hPckVudik7XG4gICAgICAgIHJldHVybiBpbmxpbmVSZWZTY2hlbWEoc2NoT3JFbnYpO1xuICAgICAgICBmdW5jdGlvbiBjYWxsUm9vdFJlZigpIHtcbiAgICAgICAgICAgIGlmIChlbnYgPT09IHJvb3QpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxSZWYoY3h0LCB2YWxpZGF0ZU5hbWUsIGVudiwgZW52LiRhc3luYyk7XG4gICAgICAgICAgICBjb25zdCByb290TmFtZSA9IGdlbi5zY29wZVZhbHVlKFwicm9vdFwiLCB7IHJlZjogcm9vdCB9KTtcbiAgICAgICAgICAgIHJldHVybiBjYWxsUmVmKGN4dCwgKDAsIGNvZGVnZW5fMS5fKSBgJHtyb290TmFtZX0udmFsaWRhdGVgLCByb290LCByb290LiRhc3luYyk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2FsbFZhbGlkYXRlKHNjaCkge1xuICAgICAgICAgICAgY29uc3QgdiA9IGdldFZhbGlkYXRlKGN4dCwgc2NoKTtcbiAgICAgICAgICAgIGNhbGxSZWYoY3h0LCB2LCBzY2gsIHNjaC4kYXN5bmMpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGlubGluZVJlZlNjaGVtYShzY2gpIHtcbiAgICAgICAgICAgIGNvbnN0IHNjaE5hbWUgPSBnZW4uc2NvcGVWYWx1ZShcInNjaGVtYVwiLCBvcHRzLmNvZGUuc291cmNlID09PSB0cnVlID8geyByZWY6IHNjaCwgY29kZTogKDAsIGNvZGVnZW5fMS5zdHJpbmdpZnkpKHNjaCkgfSA6IHsgcmVmOiBzY2ggfSk7XG4gICAgICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICBzY2hlbWE6IHNjaCxcbiAgICAgICAgICAgICAgICBkYXRhVHlwZXM6IFtdLFxuICAgICAgICAgICAgICAgIHNjaGVtYVBhdGg6IGNvZGVnZW5fMS5uaWwsXG4gICAgICAgICAgICAgICAgdG9wU2NoZW1hUmVmOiBzY2hOYW1lLFxuICAgICAgICAgICAgICAgIGVyclNjaGVtYVBhdGg6ICRyZWYsXG4gICAgICAgICAgICB9LCB2YWxpZCk7XG4gICAgICAgICAgICBjeHQubWVyZ2VFdmFsdWF0ZWQoc2NoQ3h0KTtcbiAgICAgICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmZ1bmN0aW9uIGdldFZhbGlkYXRlKGN4dCwgc2NoKSB7XG4gICAgY29uc3QgeyBnZW4gfSA9IGN4dDtcbiAgICByZXR1cm4gc2NoLnZhbGlkYXRlXG4gICAgICAgID8gZ2VuLnNjb3BlVmFsdWUoXCJ2YWxpZGF0ZVwiLCB7IHJlZjogc2NoLnZhbGlkYXRlIH0pXG4gICAgICAgIDogKDAsIGNvZGVnZW5fMS5fKSBgJHtnZW4uc2NvcGVWYWx1ZShcIndyYXBwZXJcIiwgeyByZWY6IHNjaCB9KX0udmFsaWRhdGVgO1xufVxuZXhwb3J0cy5nZXRWYWxpZGF0ZSA9IGdldFZhbGlkYXRlO1xuZnVuY3Rpb24gY2FsbFJlZihjeHQsIHYsIHNjaCwgJGFzeW5jKSB7XG4gICAgY29uc3QgeyBnZW4sIGl0IH0gPSBjeHQ7XG4gICAgY29uc3QgeyBhbGxFcnJvcnMsIHNjaGVtYUVudjogZW52LCBvcHRzIH0gPSBpdDtcbiAgICBjb25zdCBwYXNzQ3h0ID0gb3B0cy5wYXNzQ29udGV4dCA/IG5hbWVzXzEuZGVmYXVsdC50aGlzIDogY29kZWdlbl8xLm5pbDtcbiAgICBpZiAoJGFzeW5jKVxuICAgICAgICBjYWxsQXN5bmNSZWYoKTtcbiAgICBlbHNlXG4gICAgICAgIGNhbGxTeW5jUmVmKCk7XG4gICAgZnVuY3Rpb24gY2FsbEFzeW5jUmVmKCkge1xuICAgICAgICBpZiAoIWVudi4kYXN5bmMpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhc3luYyBzY2hlbWEgcmVmZXJlbmNlZCBieSBzeW5jIHNjaGVtYVwiKTtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubGV0KFwidmFsaWRcIik7XG4gICAgICAgIGdlbi50cnkoKCkgPT4ge1xuICAgICAgICAgICAgZ2VuLmNvZGUoKDAsIGNvZGVnZW5fMS5fKSBgYXdhaXQgJHsoMCwgY29kZV8xLmNhbGxWYWxpZGF0ZUNvZGUpKGN4dCwgdiwgcGFzc0N4dCl9YCk7XG4gICAgICAgICAgICBhZGRFdmFsdWF0ZWRGcm9tKHYpOyAvLyBUT0RPIHdpbGwgbm90IHdvcmsgd2l0aCBhc3luYywgaXQgaGFzIHRvIGJlIHJldHVybmVkIHdpdGggdGhlIHJlc3VsdFxuICAgICAgICAgICAgaWYgKCFhbGxFcnJvcnMpXG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgdHJ1ZSk7XG4gICAgICAgIH0sIChlKSA9PiB7XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgISgke2V9IGluc3RhbmNlb2YgJHtpdC5WYWxpZGF0aW9uRXJyb3J9KWAsICgpID0+IGdlbi50aHJvdyhlKSk7XG4gICAgICAgICAgICBhZGRFcnJvcnNGcm9tKGUpO1xuICAgICAgICAgICAgaWYgKCFhbGxFcnJvcnMpXG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2FsbFN5bmNSZWYoKSB7XG4gICAgICAgIGN4dC5yZXN1bHQoKDAsIGNvZGVfMS5jYWxsVmFsaWRhdGVDb2RlKShjeHQsIHYsIHBhc3NDeHQpLCAoKSA9PiBhZGRFdmFsdWF0ZWRGcm9tKHYpLCAoKSA9PiBhZGRFcnJvcnNGcm9tKHYpKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkRXJyb3JzRnJvbShzb3VyY2UpIHtcbiAgICAgICAgY29uc3QgZXJycyA9ICgwLCBjb2RlZ2VuXzEuXykgYCR7c291cmNlfS5lcnJvcnNgO1xuICAgICAgICBnZW4uYXNzaWduKG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52RXJyb3JzfSA9PT0gbnVsbCA/ICR7ZXJyc30gOiAke25hbWVzXzEuZGVmYXVsdC52RXJyb3JzfS5jb25jYXQoJHtlcnJzfSlgKTsgLy8gVE9ETyB0YWdnZWRcbiAgICAgICAgZ2VuLmFzc2lnbihuYW1lc18xLmRlZmF1bHQuZXJyb3JzLCAoMCwgY29kZWdlbl8xLl8pIGAke25hbWVzXzEuZGVmYXVsdC52RXJyb3JzfS5sZW5ndGhgKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gYWRkRXZhbHVhdGVkRnJvbShzb3VyY2UpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBpZiAoIWl0Lm9wdHMudW5ldmFsdWF0ZWQpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHNjaEV2YWx1YXRlZCA9IChfYSA9IHNjaCA9PT0gbnVsbCB8fCBzY2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaC52YWxpZGF0ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmV2YWx1YXRlZDtcbiAgICAgICAgLy8gVE9ETyByZWZhY3RvclxuICAgICAgICBpZiAoaXQucHJvcHMgIT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChzY2hFdmFsdWF0ZWQgJiYgIXNjaEV2YWx1YXRlZC5keW5hbWljUHJvcHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NoRXZhbHVhdGVkLnByb3BzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXQucHJvcHMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQucHJvcHMoZ2VuLCBzY2hFdmFsdWF0ZWQucHJvcHMsIGl0LnByb3BzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9wcyA9IGdlbi52YXIoXCJwcm9wc1wiLCAoMCwgY29kZWdlbl8xLl8pIGAke3NvdXJjZX0uZXZhbHVhdGVkLnByb3BzYCk7XG4gICAgICAgICAgICAgICAgaXQucHJvcHMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQucHJvcHMoZ2VuLCBwcm9wcywgaXQucHJvcHMsIGNvZGVnZW5fMS5OYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXQuaXRlbXMgIT09IHRydWUpIHtcbiAgICAgICAgICAgIGlmIChzY2hFdmFsdWF0ZWQgJiYgIXNjaEV2YWx1YXRlZC5keW5hbWljSXRlbXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NoRXZhbHVhdGVkLml0ZW1zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXQuaXRlbXMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQuaXRlbXMoZ2VuLCBzY2hFdmFsdWF0ZWQuaXRlbXMsIGl0Lml0ZW1zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpdGVtcyA9IGdlbi52YXIoXCJpdGVtc1wiLCAoMCwgY29kZWdlbl8xLl8pIGAke3NvdXJjZX0uZXZhbHVhdGVkLml0ZW1zYCk7XG4gICAgICAgICAgICAgICAgaXQuaXRlbXMgPSB1dGlsXzEubWVyZ2VFdmFsdWF0ZWQuaXRlbXMoZ2VuLCBpdGVtcywgaXQuaXRlbXMsIGNvZGVnZW5fMS5OYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuY2FsbFJlZiA9IGNhbGxSZWY7XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWYuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBpZF8xID0gcmVxdWlyZShcIi4vaWRcIik7XG5jb25zdCByZWZfMSA9IHJlcXVpcmUoXCIuL3JlZlwiKTtcbmNvbnN0IGNvcmUgPSBbXG4gICAgXCIkc2NoZW1hXCIsXG4gICAgXCIkaWRcIixcbiAgICBcIiRkZWZzXCIsXG4gICAgXCIkdm9jYWJ1bGFyeVwiLFxuICAgIHsga2V5d29yZDogXCIkY29tbWVudFwiIH0sXG4gICAgXCJkZWZpbml0aW9uc1wiLFxuICAgIGlkXzEuZGVmYXVsdCxcbiAgICByZWZfMS5kZWZhdWx0LFxuXTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNvcmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImlkXCIsXG4gICAgY29kZSgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdOT1QgU1VQUE9SVEVEOiBrZXl3b3JkIFwiaWRcIiwgdXNlIFwiJGlkXCIgZm9yIHNjaGVtYSBJRCcpO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWQuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IHVjczJsZW5ndGhfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL3VjczJsZW5ndGhcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlKHsga2V5d29yZCwgc2NoZW1hQ29kZSB9KSB7XG4gICAgICAgIGNvbnN0IGNvbXAgPSBrZXl3b3JkID09PSBcIm1heExlbmd0aFwiID8gXCJtb3JlXCIgOiBcImZld2VyXCI7XG4gICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgTk9UIGhhdmUgJHtjb21wfSB0aGFuICR7c2NoZW1hQ29kZX0gY2hhcmFjdGVyc2A7XG4gICAgfSxcbiAgICBwYXJhbXM6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge2xpbWl0OiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFtcIm1heExlbmd0aFwiLCBcIm1pbkxlbmd0aFwiXSxcbiAgICB0eXBlOiBcInN0cmluZ1wiLFxuICAgIHNjaGVtYVR5cGU6IFwibnVtYmVyXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBrZXl3b3JkLCBkYXRhLCBzY2hlbWFDb2RlLCBpdCB9ID0gY3h0O1xuICAgICAgICBjb25zdCBvcCA9IGtleXdvcmQgPT09IFwibWF4TGVuZ3RoXCIgPyBjb2RlZ2VuXzEub3BlcmF0b3JzLkdUIDogY29kZWdlbl8xLm9wZXJhdG9ycy5MVDtcbiAgICAgICAgY29uc3QgbGVuID0gaXQub3B0cy51bmljb2RlID09PSBmYWxzZSA/ICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoYCA6ICgwLCBjb2RlZ2VuXzEuXykgYCR7KDAsIHV0aWxfMS51c2VGdW5jKShjeHQuZ2VuLCB1Y3MybGVuZ3RoXzEuZGVmYXVsdCl9KCR7ZGF0YX0pYDtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAke2xlbn0gJHtvcH0gJHtzY2hlbWFDb2RlfWApO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGltaXRMZW5ndGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZ1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Jlc3RpZWpzL3B1bnljb2RlLmpzIC0gcHVueWNvZGUudWNzMi5kZWNvZGVcbmZ1bmN0aW9uIHVjczJsZW5ndGgoc3RyKSB7XG4gICAgY29uc3QgbGVuID0gc3RyLmxlbmd0aDtcbiAgICBsZXQgbGVuZ3RoID0gMDtcbiAgICBsZXQgcG9zID0gMDtcbiAgICBsZXQgdmFsdWU7XG4gICAgd2hpbGUgKHBvcyA8IGxlbikge1xuICAgICAgICBsZW5ndGgrKztcbiAgICAgICAgdmFsdWUgPSBzdHIuY2hhckNvZGVBdChwb3MrKyk7XG4gICAgICAgIGlmICh2YWx1ZSA+PSAweGQ4MDAgJiYgdmFsdWUgPD0gMHhkYmZmICYmIHBvcyA8IGxlbikge1xuICAgICAgICAgICAgLy8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG4gICAgICAgICAgICB2YWx1ZSA9IHN0ci5jaGFyQ29kZUF0KHBvcyk7XG4gICAgICAgICAgICBpZiAoKHZhbHVlICYgMHhmYzAwKSA9PT0gMHhkYzAwKVxuICAgICAgICAgICAgICAgIHBvcysrOyAvLyBsb3cgc3Vycm9nYXRlXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGxlbmd0aDtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IHVjczJsZW5ndGg7XG51Y3MybGVuZ3RoLmNvZGUgPSAncmVxdWlyZShcImFqdi9kaXN0L3J1bnRpbWUvdWNzMmxlbmd0aFwiKS5kZWZhdWx0Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVjczJsZW5ndGguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgcGFyYW1zOiB7IG1pc3NpbmdQcm9wZXJ0eSB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBoYXZlIHJlcXVpcmVkIHByb3BlcnR5ICcke21pc3NpbmdQcm9wZXJ0eX0nYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtczogeyBtaXNzaW5nUHJvcGVydHkgfSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bWlzc2luZ1Byb3BlcnR5OiAke21pc3NpbmdQcm9wZXJ0eX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJyZXF1aXJlZFwiLFxuICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgc2NoZW1hVHlwZTogXCJhcnJheVwiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIHNjaGVtYUNvZGUsIGRhdGEsICRkYXRhLCBpdCB9ID0gY3h0O1xuICAgICAgICBjb25zdCB7IG9wdHMgfSA9IGl0O1xuICAgICAgICBpZiAoISRkYXRhICYmIHNjaGVtYS5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHVzZUxvb3AgPSBzY2hlbWEubGVuZ3RoID49IG9wdHMubG9vcFJlcXVpcmVkO1xuICAgICAgICBpZiAoaXQuYWxsRXJyb3JzKVxuICAgICAgICAgICAgYWxsRXJyb3JzTW9kZSgpO1xuICAgICAgICBlbHNlXG4gICAgICAgICAgICBleGl0T25FcnJvck1vZGUoKTtcbiAgICAgICAgaWYgKG9wdHMuc3RyaWN0UmVxdWlyZWQpIHtcbiAgICAgICAgICAgIGNvbnN0IHByb3BzID0gY3h0LnBhcmVudFNjaGVtYS5wcm9wZXJ0aWVzO1xuICAgICAgICAgICAgY29uc3QgeyBkZWZpbmVkUHJvcGVydGllcyB9ID0gY3h0Lml0O1xuICAgICAgICAgICAgZm9yIChjb25zdCByZXF1aXJlZEtleSBvZiBzY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBpZiAoKHByb3BzID09PSBudWxsIHx8IHByb3BzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwcm9wc1tyZXF1aXJlZEtleV0pID09PSB1bmRlZmluZWQgJiYgIWRlZmluZWRQcm9wZXJ0aWVzLmhhcyhyZXF1aXJlZEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2NoZW1hUGF0aCA9IGl0LnNjaGVtYUVudi5iYXNlSWQgKyBpdC5lcnJTY2hlbWFQYXRoO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtc2cgPSBgcmVxdWlyZWQgcHJvcGVydHkgXCIke3JlcXVpcmVkS2V5fVwiIGlzIG5vdCBkZWZpbmVkIGF0IFwiJHtzY2hlbWFQYXRofVwiIChzdHJpY3RSZXF1aXJlZClgO1xuICAgICAgICAgICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIG1zZywgaXQub3B0cy5zdHJpY3RSZXF1aXJlZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGFsbEVycm9yc01vZGUoKSB7XG4gICAgICAgICAgICBpZiAodXNlTG9vcCB8fCAkZGF0YSkge1xuICAgICAgICAgICAgICAgIGN4dC5ibG9jayRkYXRhKGNvZGVnZW5fMS5uaWwsIGxvb3BBbGxSZXF1aXJlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHByb3Agb2Ygc2NoZW1hKSB7XG4gICAgICAgICAgICAgICAgICAgICgwLCBjb2RlXzEuY2hlY2tSZXBvcnRNaXNzaW5nUHJvcCkoY3h0LCBwcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gZXhpdE9uRXJyb3JNb2RlKCkge1xuICAgICAgICAgICAgY29uc3QgbWlzc2luZyA9IGdlbi5sZXQoXCJtaXNzaW5nXCIpO1xuICAgICAgICAgICAgaWYgKHVzZUxvb3AgfHwgJGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5sZXQoXCJ2YWxpZFwiLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBjeHQuYmxvY2skZGF0YSh2YWxpZCwgKCkgPT4gbG9vcFVudGlsTWlzc2luZyhtaXNzaW5nLCB2YWxpZCkpO1xuICAgICAgICAgICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVfMS5jaGVja01pc3NpbmdQcm9wKShjeHQsIHNjaGVtYSwgbWlzc2luZykpO1xuICAgICAgICAgICAgICAgICgwLCBjb2RlXzEucmVwb3J0TWlzc2luZ1Byb3ApKGN4dCwgbWlzc2luZyk7XG4gICAgICAgICAgICAgICAgZ2VuLmVsc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBsb29wQWxsUmVxdWlyZWQoKSB7XG4gICAgICAgICAgICBnZW4uZm9yT2YoXCJwcm9wXCIsIHNjaGVtYUNvZGUsIChwcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IG1pc3NpbmdQcm9wZXJ0eTogcHJvcCB9KTtcbiAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVfMS5ub1Byb3BlcnR5SW5EYXRhKShnZW4sIGRhdGEsIHByb3AsIG9wdHMub3duUHJvcGVydGllcyksICgpID0+IGN4dC5lcnJvcigpKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGxvb3BVbnRpbE1pc3NpbmcobWlzc2luZywgdmFsaWQpIHtcbiAgICAgICAgICAgIGN4dC5zZXRQYXJhbXMoeyBtaXNzaW5nUHJvcGVydHk6IG1pc3NpbmcgfSk7XG4gICAgICAgICAgICBnZW4uZm9yT2YobWlzc2luZywgc2NoZW1hQ29kZSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsICgwLCBjb2RlXzEucHJvcGVydHlJbkRhdGEpKGdlbiwgZGF0YSwgbWlzc2luZywgb3B0cy5vd25Qcm9wZXJ0aWVzKSk7XG4gICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KSh2YWxpZCksICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY3h0LmVycm9yKCk7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5icmVhaygpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSwgY29kZWdlbl8xLm5pbCk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcXVpcmVkLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2Fqdi12YWxpZGF0b3IvYWp2L2lzc3Vlcy84ODlcbmNvbnN0IGVxdWFsID0gcmVxdWlyZShcImZhc3QtZGVlcC1lcXVhbFwiKTtcbmVxdWFsLmNvZGUgPSAncmVxdWlyZShcImFqdi9kaXN0L3J1bnRpbWUvZXF1YWxcIikuZGVmYXVsdCc7XG5leHBvcnRzLmRlZmF1bHQgPSBlcXVhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVxdWFsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZGF0YVR5cGVfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3ZhbGlkYXRlL2RhdGFUeXBlXCIpO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcXVhbF8xID0gcmVxdWlyZShcIi4uLy4uL3J1bnRpbWUvZXF1YWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBwYXJhbXM6IHsgaSwgaiB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBOT1QgaGF2ZSBkdXBsaWNhdGUgaXRlbXMgKGl0ZW1zICMjICR7an0gYW5kICR7aX0gYXJlIGlkZW50aWNhbClgLFxuICAgIHBhcmFtczogKHsgcGFyYW1zOiB7IGksIGogfSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7aTogJHtpfSwgajogJHtqfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcInVuaXF1ZUl0ZW1zXCIsXG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIHNjaGVtYVR5cGU6IFwiYm9vbGVhblwiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCAkZGF0YSwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIHNjaGVtYUNvZGUsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmICghJGRhdGEgJiYgIXNjaGVtYSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubGV0KFwidmFsaWRcIik7XG4gICAgICAgIGNvbnN0IGl0ZW1UeXBlcyA9IHBhcmVudFNjaGVtYS5pdGVtcyA/ICgwLCBkYXRhVHlwZV8xLmdldFNjaGVtYVR5cGVzKShwYXJlbnRTY2hlbWEuaXRlbXMpIDogW107XG4gICAgICAgIGN4dC5ibG9jayRkYXRhKHZhbGlkLCB2YWxpZGF0ZVVuaXF1ZUl0ZW1zLCAoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYUNvZGV9ID09PSBmYWxzZWApO1xuICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVVuaXF1ZUl0ZW1zKCkge1xuICAgICAgICAgICAgY29uc3QgaSA9IGdlbi5sZXQoXCJpXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoYCk7XG4gICAgICAgICAgICBjb25zdCBqID0gZ2VuLmxldChcImpcIik7XG4gICAgICAgICAgICBjeHQuc2V0UGFyYW1zKHsgaSwgaiB9KTtcbiAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIHRydWUpO1xuICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7aX0gPiAxYCwgKCkgPT4gKGNhbk9wdGltaXplKCkgPyBsb29wTiA6IGxvb3BOMikoaSwgaikpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGNhbk9wdGltaXplKCkge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW1UeXBlcy5sZW5ndGggPiAwICYmICFpdGVtVHlwZXMuc29tZSgodCkgPT4gdCA9PT0gXCJvYmplY3RcIiB8fCB0ID09PSBcImFycmF5XCIpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGxvb3BOKGksIGopIHtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBnZW4ubmFtZShcIml0ZW1cIik7XG4gICAgICAgICAgICBjb25zdCB3cm9uZ1R5cGUgPSAoMCwgZGF0YVR5cGVfMS5jaGVja0RhdGFUeXBlcykoaXRlbVR5cGVzLCBpdGVtLCBpdC5vcHRzLnN0cmljdE51bWJlcnMsIGRhdGFUeXBlXzEuRGF0YVR5cGUuV3JvbmcpO1xuICAgICAgICAgICAgY29uc3QgaW5kaWNlcyA9IGdlbi5jb25zdChcImluZGljZXNcIiwgKDAsIGNvZGVnZW5fMS5fKSBge31gKTtcbiAgICAgICAgICAgIGdlbi5mb3IoKDAsIGNvZGVnZW5fMS5fKSBgOyR7aX0tLTtgLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgZ2VuLmxldChpdGVtLCAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9WyR7aX1dYCk7XG4gICAgICAgICAgICAgICAgZ2VuLmlmKHdyb25nVHlwZSwgKDAsIGNvZGVnZW5fMS5fKSBgY29udGludWVgKTtcbiAgICAgICAgICAgICAgICBpZiAoaXRlbVR5cGVzLmxlbmd0aCA+IDEpXG4gICAgICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGB0eXBlb2YgJHtpdGVtfSA9PSBcInN0cmluZ1wiYCwgKDAsIGNvZGVnZW5fMS5fKSBgJHtpdGVtfSArPSBcIl9cImApO1xuICAgICAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgICAgICAuaWYoKDAsIGNvZGVnZW5fMS5fKSBgdHlwZW9mICR7aW5kaWNlc31bJHtpdGVtfV0gPT0gXCJudW1iZXJcImAsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmFzc2lnbihqLCAoMCwgY29kZWdlbl8xLl8pIGAke2luZGljZXN9WyR7aXRlbX1dYCk7XG4gICAgICAgICAgICAgICAgICAgIGN4dC5lcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCBmYWxzZSkuYnJlYWsoKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuY29kZSgoMCwgY29kZWdlbl8xLl8pIGAke2luZGljZXN9WyR7aXRlbX1dID0gJHtpfWApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gbG9vcE4yKGksIGopIHtcbiAgICAgICAgICAgIGNvbnN0IGVxbCA9ICgwLCB1dGlsXzEudXNlRnVuYykoZ2VuLCBlcXVhbF8xLmRlZmF1bHQpO1xuICAgICAgICAgICAgY29uc3Qgb3V0ZXIgPSBnZW4ubmFtZShcIm91dGVyXCIpO1xuICAgICAgICAgICAgZ2VuLmxhYmVsKG91dGVyKS5mb3IoKDAsIGNvZGVnZW5fMS5fKSBgOyR7aX0tLTtgLCAoKSA9PiBnZW4uZm9yKCgwLCBjb2RlZ2VuXzEuXykgYCR7an0gPSAke2l9OyAke2p9LS07YCwgKCkgPT4gZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZXFsfSgke2RhdGF9WyR7aX1dLCAke2RhdGF9WyR7an1dKWAsICgpID0+IHtcbiAgICAgICAgICAgICAgICBjeHQuZXJyb3IoKTtcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHZhbGlkLCBmYWxzZSkuYnJlYWsob3V0ZXIpO1xuICAgICAgICAgICAgfSkpKTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dW5pcXVlSXRlbXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVxdWFsXzEgPSByZXF1aXJlKFwiLi4vLi4vcnVudGltZS9lcXVhbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6IFwibXVzdCBiZSBlcXVhbCB0byBvbmUgb2YgdGhlIGFsbG93ZWQgdmFsdWVzXCIsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHthbGxvd2VkVmFsdWVzOiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiZW51bVwiLFxuICAgIHNjaGVtYVR5cGU6IFwiYXJyYXlcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgZGF0YSwgJGRhdGEsIHNjaGVtYSwgc2NoZW1hQ29kZSwgaXQgfSA9IGN4dDtcbiAgICAgICAgaWYgKCEkZGF0YSAmJiBzY2hlbWEubGVuZ3RoID09PSAwKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZW51bSBtdXN0IGhhdmUgbm9uLWVtcHR5IGFycmF5XCIpO1xuICAgICAgICBjb25zdCB1c2VMb29wID0gc2NoZW1hLmxlbmd0aCA+PSBpdC5vcHRzLmxvb3BFbnVtO1xuICAgICAgICBsZXQgZXFsO1xuICAgICAgICBjb25zdCBnZXRFcWwgPSAoKSA9PiAoZXFsICE9PSBudWxsICYmIGVxbCAhPT0gdm9pZCAwID8gZXFsIDogKGVxbCA9ICgwLCB1dGlsXzEudXNlRnVuYykoZ2VuLCBlcXVhbF8xLmRlZmF1bHQpKSk7XG4gICAgICAgIGxldCB2YWxpZDtcbiAgICAgICAgaWYgKHVzZUxvb3AgfHwgJGRhdGEpIHtcbiAgICAgICAgICAgIHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIpO1xuICAgICAgICAgICAgY3h0LmJsb2NrJGRhdGEodmFsaWQsIGxvb3BFbnVtKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHNjaGVtYSkpXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICAgICAgY29uc3QgdlNjaGVtYSA9IGdlbi5jb25zdChcInZTY2hlbWFcIiwgc2NoZW1hQ29kZSk7XG4gICAgICAgICAgICB2YWxpZCA9ICgwLCBjb2RlZ2VuXzEub3IpKC4uLnNjaGVtYS5tYXAoKF94LCBpKSA9PiBlcXVhbENvZGUodlNjaGVtYSwgaSkpKTtcbiAgICAgICAgfVxuICAgICAgICBjeHQucGFzcyh2YWxpZCk7XG4gICAgICAgIGZ1bmN0aW9uIGxvb3BFbnVtKCkge1xuICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgZmFsc2UpO1xuICAgICAgICAgICAgZ2VuLmZvck9mKFwidlwiLCBzY2hlbWFDb2RlLCAodikgPT4gZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7Z2V0RXFsKCl9KCR7ZGF0YX0sICR7dn0pYCwgKCkgPT4gZ2VuLmFzc2lnbih2YWxpZCwgdHJ1ZSkuYnJlYWsoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGVxdWFsQ29kZSh2U2NoZW1hLCBpKSB7XG4gICAgICAgICAgICBjb25zdCBzY2ggPSBzY2hlbWFbaV07XG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHNjaCA9PT0gXCJvYmplY3RcIiAmJiBzY2ggIT09IG51bGxcbiAgICAgICAgICAgICAgICA/ICgwLCBjb2RlZ2VuXzEuXykgYCR7Z2V0RXFsKCl9KCR7ZGF0YX0sICR7dlNjaGVtYX1bJHtpfV0pYFxuICAgICAgICAgICAgICAgIDogKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSA9PT0gJHtzY2h9YDtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW51bS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGxpbWl0TnVtYmVyXzEgPSByZXF1aXJlKFwiLi9saW1pdE51bWJlclwiKTtcbmNvbnN0IG11bHRpcGxlT2ZfMSA9IHJlcXVpcmUoXCIuL211bHRpcGxlT2ZcIik7XG5jb25zdCBsaW1pdExlbmd0aF8xID0gcmVxdWlyZShcIi4vbGltaXRMZW5ndGhcIik7XG5jb25zdCBwYXR0ZXJuXzEgPSByZXF1aXJlKFwiLi9wYXR0ZXJuXCIpO1xuY29uc3QgbGltaXRQcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiLi9saW1pdFByb3BlcnRpZXNcIik7XG5jb25zdCByZXF1aXJlZF8xID0gcmVxdWlyZShcIi4vcmVxdWlyZWRcIik7XG5jb25zdCBsaW1pdEl0ZW1zXzEgPSByZXF1aXJlKFwiLi9saW1pdEl0ZW1zXCIpO1xuY29uc3QgdW5pcXVlSXRlbXNfMSA9IHJlcXVpcmUoXCIuL3VuaXF1ZUl0ZW1zXCIpO1xuY29uc3QgY29uc3RfMSA9IHJlcXVpcmUoXCIuL2NvbnN0XCIpO1xuY29uc3QgZW51bV8xID0gcmVxdWlyZShcIi4vZW51bVwiKTtcbmNvbnN0IHZhbGlkYXRpb24gPSBbXG4gICAgLy8gbnVtYmVyXG4gICAgbGltaXROdW1iZXJfMS5kZWZhdWx0LFxuICAgIG11bHRpcGxlT2ZfMS5kZWZhdWx0LFxuICAgIC8vIHN0cmluZ1xuICAgIGxpbWl0TGVuZ3RoXzEuZGVmYXVsdCxcbiAgICBwYXR0ZXJuXzEuZGVmYXVsdCxcbiAgICAvLyBvYmplY3RcbiAgICBsaW1pdFByb3BlcnRpZXNfMS5kZWZhdWx0LFxuICAgIHJlcXVpcmVkXzEuZGVmYXVsdCxcbiAgICAvLyBhcnJheVxuICAgIGxpbWl0SXRlbXNfMS5kZWZhdWx0LFxuICAgIHVuaXF1ZUl0ZW1zXzEuZGVmYXVsdCxcbiAgICAvLyBhbnlcbiAgICB7IGtleXdvcmQ6IFwidHlwZVwiLCBzY2hlbWFUeXBlOiBbXCJzdHJpbmdcIiwgXCJhcnJheVwiXSB9LFxuICAgIHsga2V5d29yZDogXCJudWxsYWJsZVwiLCBzY2hlbWFUeXBlOiBcImJvb2xlYW5cIiB9LFxuICAgIGNvbnN0XzEuZGVmYXVsdCxcbiAgICBlbnVtXzEuZGVmYXVsdCxcbl07XG5leHBvcnRzLmRlZmF1bHQgPSB2YWxpZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3Qgb3BzID0gY29kZWdlbl8xLm9wZXJhdG9ycztcbmNvbnN0IEtXRHMgPSB7XG4gICAgbWF4aW11bTogeyBva1N0cjogXCI8PVwiLCBvazogb3BzLkxURSwgZmFpbDogb3BzLkdUIH0sXG4gICAgbWluaW11bTogeyBva1N0cjogXCI+PVwiLCBvazogb3BzLkdURSwgZmFpbDogb3BzLkxUIH0sXG4gICAgZXhjbHVzaXZlTWF4aW11bTogeyBva1N0cjogXCI8XCIsIG9rOiBvcHMuTFQsIGZhaWw6IG9wcy5HVEUgfSxcbiAgICBleGNsdXNpdmVNaW5pbXVtOiB7IG9rU3RyOiBcIj5cIiwgb2s6IG9wcy5HVCwgZmFpbDogb3BzLkxURSB9LFxufTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IGtleXdvcmQsIHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IGJlICR7S1dEc1trZXl3b3JkXS5va1N0cn0gJHtzY2hlbWFDb2RlfWAsXG4gICAgcGFyYW1zOiAoeyBrZXl3b3JkLCBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtjb21wYXJpc29uOiAke0tXRHNba2V5d29yZF0ub2tTdHJ9LCBsaW1pdDogJHtzY2hlbWFDb2RlfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBPYmplY3Qua2V5cyhLV0RzKSxcbiAgICB0eXBlOiBcIm51bWJlclwiLFxuICAgIHNjaGVtYVR5cGU6IFwibnVtYmVyXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBrZXl3b3JkLCBkYXRhLCBzY2hlbWFDb2RlIH0gPSBjeHQ7XG4gICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfSAke0tXRHNba2V5d29yZF0uZmFpbH0gJHtzY2hlbWFDb2RlfSB8fCBpc05hTigke2RhdGF9KWApO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGltaXROdW1iZXIuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgYmUgbXVsdGlwbGUgb2YgJHtzY2hlbWFDb2RlfWAsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHttdWx0aXBsZU9mOiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwibXVsdGlwbGVPZlwiLFxuICAgIHR5cGU6IFwibnVtYmVyXCIsXG4gICAgc2NoZW1hVHlwZTogXCJudW1iZXJcIixcbiAgICAkZGF0YTogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgZGF0YSwgc2NoZW1hQ29kZSwgaXQgfSA9IGN4dDtcbiAgICAgICAgLy8gY29uc3QgYmR0ID0gYmFkJERhdGFUeXBlKHNjaGVtYUNvZGUsIDxzdHJpbmc+ZGVmLnNjaGVtYVR5cGUsICRkYXRhKVxuICAgICAgICBjb25zdCBwcmVjID0gaXQub3B0cy5tdWx0aXBsZU9mUHJlY2lzaW9uO1xuICAgICAgICBjb25zdCByZXMgPSBnZW4ubGV0KFwicmVzXCIpO1xuICAgICAgICBjb25zdCBpbnZhbGlkID0gcHJlY1xuICAgICAgICAgICAgPyAoMCwgY29kZWdlbl8xLl8pIGBNYXRoLmFicyhNYXRoLnJvdW5kKCR7cmVzfSkgLSAke3Jlc30pID4gMWUtJHtwcmVjfWBcbiAgICAgICAgICAgIDogKDAsIGNvZGVnZW5fMS5fKSBgJHtyZXN9ICE9PSBwYXJzZUludCgke3Jlc30pYDtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAoJHtzY2hlbWFDb2RlfSA9PT0gMCB8fCAoJHtyZXN9ID0gJHtkYXRhfS8ke3NjaGVtYUNvZGV9LCAke2ludmFsaWR9KSlgKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpcGxlT2YuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBtYXRjaCBwYXR0ZXJuIFwiJHtzY2hlbWFDb2RlfVwiYCxcbiAgICBwYXJhbXM6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge3BhdHRlcm46ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJwYXR0ZXJuXCIsXG4gICAgdHlwZTogXCJzdHJpbmdcIixcbiAgICBzY2hlbWFUeXBlOiBcInN0cmluZ1wiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YSwgJGRhdGEsIHNjaGVtYSwgc2NoZW1hQ29kZSwgaXQgfSA9IGN4dDtcbiAgICAgICAgLy8gVE9ETyByZWdleHAgc2hvdWxkIGJlIHdyYXBwZWQgaW4gdHJ5L2NhdGNoc1xuICAgICAgICBjb25zdCB1ID0gaXQub3B0cy51bmljb2RlUmVnRXhwID8gXCJ1XCIgOiBcIlwiO1xuICAgICAgICBjb25zdCByZWdFeHAgPSAkZGF0YSA/ICgwLCBjb2RlZ2VuXzEuXykgYChuZXcgUmVnRXhwKCR7c2NoZW1hQ29kZX0sICR7dX0pKWAgOiAoMCwgY29kZV8xLnVzZVBhdHRlcm4pKGN4dCwgc2NoZW1hKTtcbiAgICAgICAgY3h0LmZhaWwkZGF0YSgoMCwgY29kZWdlbl8xLl8pIGAhJHtyZWdFeHB9LnRlc3QoJHtkYXRhfSlgKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdHRlcm4uanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZSh7IGtleXdvcmQsIHNjaGVtYUNvZGUgfSkge1xuICAgICAgICBjb25zdCBjb21wID0ga2V5d29yZCA9PT0gXCJtYXhQcm9wZXJ0aWVzXCIgPyBcIm1vcmVcIiA6IFwiZmV3ZXJcIjtcbiAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBOT1QgaGF2ZSAke2NvbXB9IHRoYW4gJHtzY2hlbWFDb2RlfSBwcm9wZXJ0aWVzYDtcbiAgICB9LFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7bGltaXQ6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogW1wibWF4UHJvcGVydGllc1wiLCBcIm1pblByb3BlcnRpZXNcIl0sXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBcIm51bWJlclwiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsga2V5d29yZCwgZGF0YSwgc2NoZW1hQ29kZSB9ID0gY3h0O1xuICAgICAgICBjb25zdCBvcCA9IGtleXdvcmQgPT09IFwibWF4UHJvcGVydGllc1wiID8gY29kZWdlbl8xLm9wZXJhdG9ycy5HVCA6IGNvZGVnZW5fMS5vcGVyYXRvcnMuTFQ7XG4gICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgT2JqZWN0LmtleXMoJHtkYXRhfSkubGVuZ3RoICR7b3B9ICR7c2NoZW1hQ29kZX1gKTtcbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpbWl0UHJvcGVydGllcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlKHsga2V5d29yZCwgc2NoZW1hQ29kZSB9KSB7XG4gICAgICAgIGNvbnN0IGNvbXAgPSBrZXl3b3JkID09PSBcIm1heEl0ZW1zXCIgPyBcIm1vcmVcIiA6IFwiZmV3ZXJcIjtcbiAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBOT1QgaGF2ZSAke2NvbXB9IHRoYW4gJHtzY2hlbWFDb2RlfSBpdGVtc2A7XG4gICAgfSxcbiAgICBwYXJhbXM6ICh7IHNjaGVtYUNvZGUgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge2xpbWl0OiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFtcIm1heEl0ZW1zXCIsIFwibWluSXRlbXNcIl0sXG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIHNjaGVtYVR5cGU6IFwibnVtYmVyXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBrZXl3b3JkLCBkYXRhLCBzY2hlbWFDb2RlIH0gPSBjeHQ7XG4gICAgICAgIGNvbnN0IG9wID0ga2V5d29yZCA9PT0gXCJtYXhJdGVtc1wiID8gY29kZWdlbl8xLm9wZXJhdG9ycy5HVCA6IGNvZGVnZW5fMS5vcGVyYXRvcnMuTFQ7XG4gICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfS5sZW5ndGggJHtvcH0gJHtzY2hlbWFDb2RlfWApO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGltaXRJdGVtcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZXF1YWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9ydW50aW1lL2VxdWFsXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogXCJtdXN0IGJlIGVxdWFsIHRvIGNvbnN0YW50XCIsXG4gICAgcGFyYW1zOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHthbGxvd2VkVmFsdWU6ICR7c2NoZW1hQ29kZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJjb25zdFwiLFxuICAgICRkYXRhOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCAkZGF0YSwgc2NoZW1hQ29kZSwgc2NoZW1hIH0gPSBjeHQ7XG4gICAgICAgIGlmICgkZGF0YSB8fCAoc2NoZW1hICYmIHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIikpIHtcbiAgICAgICAgICAgIGN4dC5mYWlsJGRhdGEoKDAsIGNvZGVnZW5fMS5fKSBgISR7KDAsIHV0aWxfMS51c2VGdW5jKShnZW4sIGVxdWFsXzEuZGVmYXVsdCl9KCR7ZGF0YX0sICR7c2NoZW1hQ29kZX0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjeHQuZmFpbCgoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYX0gIT09ICR7ZGF0YX1gKTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3QuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlQWRkaXRpb25hbEl0ZW1zID0gdm9pZCAwO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBwYXJhbXM6IHsgbGVuIH0gfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IE5PVCBoYXZlIG1vcmUgdGhhbiAke2xlbn0gaXRlbXNgLFxuICAgIHBhcmFtczogKHsgcGFyYW1zOiB7IGxlbiB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtsaW1pdDogJHtsZW59fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiYWRkaXRpb25hbEl0ZW1zXCIsXG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIHNjaGVtYVR5cGU6IFtcImJvb2xlYW5cIiwgXCJvYmplY3RcIl0sXG4gICAgYmVmb3JlOiBcInVuaXF1ZUl0ZW1zXCIsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBwYXJlbnRTY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGNvbnN0IHsgaXRlbXMgfSA9IHBhcmVudFNjaGVtYTtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGl0ZW1zKSkge1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCAnXCJhZGRpdGlvbmFsSXRlbXNcIiBpcyBpZ25vcmVkIHdoZW4gXCJpdGVtc1wiIGlzIG5vdCBhbiBhcnJheSBvZiBzY2hlbWFzJyk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFsaWRhdGVBZGRpdGlvbmFsSXRlbXMoY3h0LCBpdGVtcyk7XG4gICAgfSxcbn07XG5mdW5jdGlvbiB2YWxpZGF0ZUFkZGl0aW9uYWxJdGVtcyhjeHQsIGl0ZW1zKSB7XG4gICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgZGF0YSwga2V5d29yZCwgaXQgfSA9IGN4dDtcbiAgICBpdC5pdGVtcyA9IHRydWU7XG4gICAgY29uc3QgbGVuID0gZ2VuLmNvbnN0KFwibGVuXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0ubGVuZ3RoYCk7XG4gICAgaWYgKHNjaGVtYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgY3h0LnNldFBhcmFtcyh7IGxlbjogaXRlbXMubGVuZ3RoIH0pO1xuICAgICAgICBjeHQucGFzcygoMCwgY29kZWdlbl8xLl8pIGAke2xlbn0gPD0gJHtpdGVtcy5sZW5ndGh9YCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIiAmJiAhKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSkpIHtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4udmFyKFwidmFsaWRcIiwgKDAsIGNvZGVnZW5fMS5fKSBgJHtsZW59IDw9ICR7aXRlbXMubGVuZ3RofWApOyAvLyBUT0RPIHZhclxuICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSwgKCkgPT4gdmFsaWRhdGVJdGVtcyh2YWxpZCkpO1xuICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgIH1cbiAgICBmdW5jdGlvbiB2YWxpZGF0ZUl0ZW1zKHZhbGlkKSB7XG4gICAgICAgIGdlbi5mb3JSYW5nZShcImlcIiwgaXRlbXMubGVuZ3RoLCBsZW4sIChpKSA9PiB7XG4gICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHsga2V5d29yZCwgZGF0YVByb3A6IGksIGRhdGFQcm9wVHlwZTogdXRpbF8xLlR5cGUuTnVtIH0sIHZhbGlkKTtcbiAgICAgICAgICAgIGlmICghaXQuYWxsRXJyb3JzKVxuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLm5vdCkodmFsaWQpLCAoKSA9PiBnZW4uYnJlYWsoKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMudmFsaWRhdGVBZGRpdGlvbmFsSXRlbXMgPSB2YWxpZGF0ZUFkZGl0aW9uYWxJdGVtcztcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFkZGl0aW9uYWxJdGVtcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudmFsaWRhdGVUdXBsZSA9IHZvaWQgMDtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJpdGVtc1wiLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJhcnJheVwiLCBcImJvb2xlYW5cIl0sXG4gICAgYmVmb3JlOiBcInVuaXF1ZUl0ZW1zXCIsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBzY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHNjaGVtYSkpXG4gICAgICAgICAgICByZXR1cm4gdmFsaWRhdGVUdXBsZShjeHQsIFwiYWRkaXRpb25hbEl0ZW1zXCIsIHNjaGVtYSk7XG4gICAgICAgIGl0Lml0ZW1zID0gdHJ1ZTtcbiAgICAgICAgaWYgKCgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWEpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjeHQub2soKDAsIGNvZGVfMS52YWxpZGF0ZUFycmF5KShjeHQpKTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHZhbGlkYXRlVHVwbGUoY3h0LCBleHRyYUl0ZW1zLCBzY2hBcnIgPSBjeHQuc2NoZW1hKSB7XG4gICAgY29uc3QgeyBnZW4sIHBhcmVudFNjaGVtYSwgZGF0YSwga2V5d29yZCwgaXQgfSA9IGN4dDtcbiAgICBjaGVja1N0cmljdFR1cGxlKHBhcmVudFNjaGVtYSk7XG4gICAgaWYgKGl0Lm9wdHMudW5ldmFsdWF0ZWQgJiYgc2NoQXJyLmxlbmd0aCAmJiBpdC5pdGVtcyAhPT0gdHJ1ZSkge1xuICAgICAgICBpdC5pdGVtcyA9IHV0aWxfMS5tZXJnZUV2YWx1YXRlZC5pdGVtcyhnZW4sIHNjaEFyci5sZW5ndGgsIGl0Lml0ZW1zKTtcbiAgICB9XG4gICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgIGNvbnN0IGxlbiA9IGdlbi5jb25zdChcImxlblwiLCAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9Lmxlbmd0aGApO1xuICAgIHNjaEFyci5mb3JFYWNoKChzY2gsIGkpID0+IHtcbiAgICAgICAgaWYgKCgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2gpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtsZW59ID4gJHtpfWAsICgpID0+IGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICAgICAga2V5d29yZCxcbiAgICAgICAgICAgIHNjaGVtYVByb3A6IGksXG4gICAgICAgICAgICBkYXRhUHJvcDogaSxcbiAgICAgICAgfSwgdmFsaWQpKTtcbiAgICAgICAgY3h0Lm9rKHZhbGlkKTtcbiAgICB9KTtcbiAgICBmdW5jdGlvbiBjaGVja1N0cmljdFR1cGxlKHNjaCkge1xuICAgICAgICBjb25zdCB7IG9wdHMsIGVyclNjaGVtYVBhdGggfSA9IGl0O1xuICAgICAgICBjb25zdCBsID0gc2NoQXJyLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZnVsbFR1cGxlID0gbCA9PT0gc2NoLm1pbkl0ZW1zICYmIChsID09PSBzY2gubWF4SXRlbXMgfHwgc2NoW2V4dHJhSXRlbXNdID09PSBmYWxzZSk7XG4gICAgICAgIGlmIChvcHRzLnN0cmljdFR1cGxlcyAmJiAhZnVsbFR1cGxlKSB7XG4gICAgICAgICAgICBjb25zdCBtc2cgPSBgXCIke2tleXdvcmR9XCIgaXMgJHtsfS10dXBsZSwgYnV0IG1pbkl0ZW1zIG9yIG1heEl0ZW1zLyR7ZXh0cmFJdGVtc30gYXJlIG5vdCBzcGVjaWZpZWQgb3IgZGlmZmVyZW50IGF0IHBhdGggXCIke2VyclNjaGVtYVBhdGh9XCJgO1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCBtc2csIG9wdHMuc3RyaWN0VHVwbGVzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMudmFsaWRhdGVUdXBsZSA9IHZhbGlkYXRlVHVwbGU7XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVtcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgcGFyYW1zOiB7IG1pbiwgbWF4IH0gfSkgPT4gbWF4ID09PSB1bmRlZmluZWRcbiAgICAgICAgPyAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgY29udGFpbiBhdCBsZWFzdCAke21pbn0gdmFsaWQgaXRlbShzKWBcbiAgICAgICAgOiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgY29udGFpbiBhdCBsZWFzdCAke21pbn0gYW5kIG5vIG1vcmUgdGhhbiAke21heH0gdmFsaWQgaXRlbShzKWAsXG4gICAgcGFyYW1zOiAoeyBwYXJhbXM6IHsgbWluLCBtYXggfSB9KSA9PiBtYXggPT09IHVuZGVmaW5lZCA/ICgwLCBjb2RlZ2VuXzEuXykgYHttaW5Db250YWluczogJHttaW59fWAgOiAoMCwgY29kZWdlbl8xLl8pIGB7bWluQ29udGFpbnM6ICR7bWlufSwgbWF4Q29udGFpbnM6ICR7bWF4fX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImNvbnRhaW5zXCIsXG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIHNjaGVtYVR5cGU6IFtcIm9iamVjdFwiLCBcImJvb2xlYW5cIl0sXG4gICAgYmVmb3JlOiBcInVuaXF1ZUl0ZW1zXCIsXG4gICAgdHJhY2tFcnJvcnM6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgcGFyZW50U2NoZW1hLCBkYXRhLCBpdCB9ID0gY3h0O1xuICAgICAgICBsZXQgbWluO1xuICAgICAgICBsZXQgbWF4O1xuICAgICAgICBjb25zdCB7IG1pbkNvbnRhaW5zLCBtYXhDb250YWlucyB9ID0gcGFyZW50U2NoZW1hO1xuICAgICAgICBpZiAoaXQub3B0cy5uZXh0KSB7XG4gICAgICAgICAgICBtaW4gPSBtaW5Db250YWlucyA9PT0gdW5kZWZpbmVkID8gMSA6IG1pbkNvbnRhaW5zO1xuICAgICAgICAgICAgbWF4ID0gbWF4Q29udGFpbnM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtaW4gPSAxO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlbiA9IGdlbi5jb25zdChcImxlblwiLCAoMCwgY29kZWdlbl8xLl8pIGAke2RhdGF9Lmxlbmd0aGApO1xuICAgICAgICBjeHQuc2V0UGFyYW1zKHsgbWluLCBtYXggfSk7XG4gICAgICAgIGlmIChtYXggPT09IHVuZGVmaW5lZCAmJiBtaW4gPT09IDApIHtcbiAgICAgICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgYFwibWluQ29udGFpbnNcIiA9PSAwIHdpdGhvdXQgXCJtYXhDb250YWluc1wiOiBcImNvbnRhaW5zXCIga2V5d29yZCBpZ25vcmVkYCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1heCAhPT0gdW5kZWZpbmVkICYmIG1pbiA+IG1heCkge1xuICAgICAgICAgICAgKDAsIHV0aWxfMS5jaGVja1N0cmljdE1vZGUpKGl0LCBgXCJtaW5Db250YWluc1wiID4gXCJtYXhDb250YWluc1wiIGlzIGFsd2F5cyBpbnZhbGlkYCk7XG4gICAgICAgICAgICBjeHQuZmFpbCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSkge1xuICAgICAgICAgICAgbGV0IGNvbmQgPSAoMCwgY29kZWdlbl8xLl8pIGAke2xlbn0gPj0gJHttaW59YDtcbiAgICAgICAgICAgIGlmIChtYXggIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBjb25kID0gKDAsIGNvZGVnZW5fMS5fKSBgJHtjb25kfSAmJiAke2xlbn0gPD0gJHttYXh9YDtcbiAgICAgICAgICAgIGN4dC5wYXNzKGNvbmQpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGl0Lml0ZW1zID0gdHJ1ZTtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICBpZiAobWF4ID09PSB1bmRlZmluZWQgJiYgbWluID09PSAxKSB7XG4gICAgICAgICAgICB2YWxpZGF0ZUl0ZW1zKHZhbGlkLCAoKSA9PiBnZW4uaWYodmFsaWQsICgpID0+IGdlbi5icmVhaygpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobWluID09PSAwKSB7XG4gICAgICAgICAgICBnZW4ubGV0KHZhbGlkLCB0cnVlKTtcbiAgICAgICAgICAgIGlmIChtYXggIT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgJHtkYXRhfS5sZW5ndGggPiAwYCwgdmFsaWRhdGVJdGVtc1dpdGhDb3VudCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZW4ubGV0KHZhbGlkLCBmYWxzZSk7XG4gICAgICAgICAgICB2YWxpZGF0ZUl0ZW1zV2l0aENvdW50KCk7XG4gICAgICAgIH1cbiAgICAgICAgY3h0LnJlc3VsdCh2YWxpZCwgKCkgPT4gY3h0LnJlc2V0KCkpO1xuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZUl0ZW1zV2l0aENvdW50KCkge1xuICAgICAgICAgICAgY29uc3Qgc2NoVmFsaWQgPSBnZW4ubmFtZShcIl92YWxpZFwiKTtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gZ2VuLmxldChcImNvdW50XCIsIDApO1xuICAgICAgICAgICAgdmFsaWRhdGVJdGVtcyhzY2hWYWxpZCwgKCkgPT4gZ2VuLmlmKHNjaFZhbGlkLCAoKSA9PiBjaGVja0xpbWl0cyhjb3VudCkpKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZUl0ZW1zKF92YWxpZCwgYmxvY2spIHtcbiAgICAgICAgICAgIGdlbi5mb3JSYW5nZShcImlcIiwgMCwgbGVuLCAoaSkgPT4ge1xuICAgICAgICAgICAgICAgIGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICAgICAgICAgICAgICBrZXl3b3JkOiBcImNvbnRhaW5zXCIsXG4gICAgICAgICAgICAgICAgICAgIGRhdGFQcm9wOiBpLFxuICAgICAgICAgICAgICAgICAgICBkYXRhUHJvcFR5cGU6IHV0aWxfMS5UeXBlLk51bSxcbiAgICAgICAgICAgICAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9LCBfdmFsaWQpO1xuICAgICAgICAgICAgICAgIGJsb2NrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBjaGVja0xpbWl0cyhjb3VudCkge1xuICAgICAgICAgICAgZ2VuLmNvZGUoKDAsIGNvZGVnZW5fMS5fKSBgJHtjb3VudH0rK2ApO1xuICAgICAgICAgICAgaWYgKG1heCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7Y291bnR9ID49ICR7bWlufWAsICgpID0+IGdlbi5hc3NpZ24odmFsaWQsIHRydWUpLmJyZWFrKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7Y291bnR9ID4gJHttYXh9YCwgKCkgPT4gZ2VuLmFzc2lnbih2YWxpZCwgZmFsc2UpLmJyZWFrKCkpO1xuICAgICAgICAgICAgICAgIGlmIChtaW4gPT09IDEpXG4gICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIHRydWUpO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7Y291bnR9ID49ICR7bWlufWAsICgpID0+IGdlbi5hc3NpZ24odmFsaWQsIHRydWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29udGFpbnMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnZhbGlkYXRlU2NoZW1hRGVwcyA9IGV4cG9ydHMudmFsaWRhdGVQcm9wZXJ0eURlcHMgPSBleHBvcnRzLmVycm9yID0gdm9pZCAwO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmV4cG9ydHMuZXJyb3IgPSB7XG4gICAgbWVzc2FnZTogKHsgcGFyYW1zOiB7IHByb3BlcnR5LCBkZXBzQ291bnQsIGRlcHMgfSB9KSA9PiB7XG4gICAgICAgIGNvbnN0IHByb3BlcnR5X2llcyA9IGRlcHNDb3VudCA9PT0gMSA/IFwicHJvcGVydHlcIiA6IFwicHJvcGVydGllc1wiO1xuICAgICAgICByZXR1cm4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IGhhdmUgJHtwcm9wZXJ0eV9pZXN9ICR7ZGVwc30gd2hlbiBwcm9wZXJ0eSAke3Byb3BlcnR5fSBpcyBwcmVzZW50YDtcbiAgICB9LFxuICAgIHBhcmFtczogKHsgcGFyYW1zOiB7IHByb3BlcnR5LCBkZXBzQ291bnQsIGRlcHMsIG1pc3NpbmdQcm9wZXJ0eSB9IH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtwcm9wZXJ0eTogJHtwcm9wZXJ0eX0sXG4gICAgbWlzc2luZ1Byb3BlcnR5OiAke21pc3NpbmdQcm9wZXJ0eX0sXG4gICAgZGVwc0NvdW50OiAke2RlcHNDb3VudH0sXG4gICAgZGVwczogJHtkZXBzfX1gLCAvLyBUT0RPIGNoYW5nZSB0byByZWZlcmVuY2Vcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJkZXBlbmRlbmNpZXNcIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHNjaGVtYVR5cGU6IFwib2JqZWN0XCIsXG4gICAgZXJyb3I6IGV4cG9ydHMuZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgW3Byb3BEZXBzLCBzY2hEZXBzXSA9IHNwbGl0RGVwZW5kZW5jaWVzKGN4dCk7XG4gICAgICAgIHZhbGlkYXRlUHJvcGVydHlEZXBzKGN4dCwgcHJvcERlcHMpO1xuICAgICAgICB2YWxpZGF0ZVNjaGVtYURlcHMoY3h0LCBzY2hEZXBzKTtcbiAgICB9LFxufTtcbmZ1bmN0aW9uIHNwbGl0RGVwZW5kZW5jaWVzKHsgc2NoZW1hIH0pIHtcbiAgICBjb25zdCBwcm9wZXJ0eURlcHMgPSB7fTtcbiAgICBjb25zdCBzY2hlbWFEZXBzID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgaW4gc2NoZW1hKSB7XG4gICAgICAgIGlmIChrZXkgPT09IFwiX19wcm90b19fXCIpXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgY29uc3QgZGVwcyA9IEFycmF5LmlzQXJyYXkoc2NoZW1hW2tleV0pID8gcHJvcGVydHlEZXBzIDogc2NoZW1hRGVwcztcbiAgICAgICAgZGVwc1trZXldID0gc2NoZW1hW2tleV07XG4gICAgfVxuICAgIHJldHVybiBbcHJvcGVydHlEZXBzLCBzY2hlbWFEZXBzXTtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlUHJvcGVydHlEZXBzKGN4dCwgcHJvcGVydHlEZXBzID0gY3h0LnNjaGVtYSkge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBpdCB9ID0gY3h0O1xuICAgIGlmIChPYmplY3Qua2V5cyhwcm9wZXJ0eURlcHMpLmxlbmd0aCA9PT0gMClcbiAgICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IG1pc3NpbmcgPSBnZW4ubGV0KFwibWlzc2luZ1wiKTtcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gcHJvcGVydHlEZXBzKSB7XG4gICAgICAgIGNvbnN0IGRlcHMgPSBwcm9wZXJ0eURlcHNbcHJvcF07XG4gICAgICAgIGlmIChkZXBzLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjb25zdCBoYXNQcm9wZXJ0eSA9ICgwLCBjb2RlXzEucHJvcGVydHlJbkRhdGEpKGdlbiwgZGF0YSwgcHJvcCwgaXQub3B0cy5vd25Qcm9wZXJ0aWVzKTtcbiAgICAgICAgY3h0LnNldFBhcmFtcyh7XG4gICAgICAgICAgICBwcm9wZXJ0eTogcHJvcCxcbiAgICAgICAgICAgIGRlcHNDb3VudDogZGVwcy5sZW5ndGgsXG4gICAgICAgICAgICBkZXBzOiBkZXBzLmpvaW4oXCIsIFwiKSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpdC5hbGxFcnJvcnMpIHtcbiAgICAgICAgICAgIGdlbi5pZihoYXNQcm9wZXJ0eSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZGVwUHJvcCBvZiBkZXBzKSB7XG4gICAgICAgICAgICAgICAgICAgICgwLCBjb2RlXzEuY2hlY2tSZXBvcnRNaXNzaW5nUHJvcCkoY3h0LCBkZXBQcm9wKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAke2hhc1Byb3BlcnR5fSAmJiAoJHsoMCwgY29kZV8xLmNoZWNrTWlzc2luZ1Byb3ApKGN4dCwgZGVwcywgbWlzc2luZyl9KWApO1xuICAgICAgICAgICAgKDAsIGNvZGVfMS5yZXBvcnRNaXNzaW5nUHJvcCkoY3h0LCBtaXNzaW5nKTtcbiAgICAgICAgICAgIGdlbi5lbHNlKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlUHJvcGVydHlEZXBzID0gdmFsaWRhdGVQcm9wZXJ0eURlcHM7XG5mdW5jdGlvbiB2YWxpZGF0ZVNjaGVtYURlcHMoY3h0LCBzY2hlbWFEZXBzID0gY3h0LnNjaGVtYSkge1xuICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCBrZXl3b3JkLCBpdCB9ID0gY3h0O1xuICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICBmb3IgKGNvbnN0IHByb3AgaW4gc2NoZW1hRGVwcykge1xuICAgICAgICBpZiAoKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYURlcHNbcHJvcF0pKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIGdlbi5pZigoMCwgY29kZV8xLnByb3BlcnR5SW5EYXRhKShnZW4sIGRhdGEsIHByb3AsIGl0Lm9wdHMub3duUHJvcGVydGllcyksICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHNjaEN4dCA9IGN4dC5zdWJzY2hlbWEoeyBrZXl3b3JkLCBzY2hlbWFQcm9wOiBwcm9wIH0sIHZhbGlkKTtcbiAgICAgICAgICAgIGN4dC5tZXJnZVZhbGlkRXZhbHVhdGVkKHNjaEN4dCwgdmFsaWQpO1xuICAgICAgICB9LCAoKSA9PiBnZW4udmFyKHZhbGlkLCB0cnVlKSAvLyBUT0RPIHZhclxuICAgICAgICApO1xuICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgIH1cbn1cbmV4cG9ydHMudmFsaWRhdGVTY2hlbWFEZXBzID0gdmFsaWRhdGVTY2hlbWFEZXBzO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVwZW5kZW5jaWVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgbmFtZXNfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL25hbWVzXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6IFwibXVzdCBOT1QgaGF2ZSBhZGRpdGlvbmFsIHByb3BlcnRpZXNcIixcbiAgICBwYXJhbXM6ICh7IHBhcmFtcyB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7YWRkaXRpb25hbFByb3BlcnR5OiAke3BhcmFtcy5hZGRpdGlvbmFsUHJvcGVydHl9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiYWRkaXRpb25hbFByb3BlcnRpZXNcIixcbiAgICB0eXBlOiBbXCJvYmplY3RcIl0sXG4gICAgc2NoZW1hVHlwZTogW1wiYm9vbGVhblwiLCBcIm9iamVjdFwiXSxcbiAgICBhbGxvd1VuZGVmaW5lZDogdHJ1ZSxcbiAgICB0cmFja0Vycm9yczogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGRhdGEsIGVycnNDb3VudCwgaXQgfSA9IGN4dDtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghZXJyc0NvdW50KVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICBjb25zdCB7IGFsbEVycm9ycywgb3B0cyB9ID0gaXQ7XG4gICAgICAgIGl0LnByb3BzID0gdHJ1ZTtcbiAgICAgICAgaWYgKG9wdHMucmVtb3ZlQWRkaXRpb25hbCAhPT0gXCJhbGxcIiAmJiAoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgcHJvcHMgPSAoMCwgY29kZV8xLmFsbFNjaGVtYVByb3BlcnRpZXMpKHBhcmVudFNjaGVtYS5wcm9wZXJ0aWVzKTtcbiAgICAgICAgY29uc3QgcGF0UHJvcHMgPSAoMCwgY29kZV8xLmFsbFNjaGVtYVByb3BlcnRpZXMpKHBhcmVudFNjaGVtYS5wYXR0ZXJuUHJvcGVydGllcyk7XG4gICAgICAgIGNoZWNrQWRkaXRpb25hbFByb3BlcnRpZXMoKTtcbiAgICAgICAgY3h0Lm9rKCgwLCBjb2RlZ2VuXzEuXykgYCR7ZXJyc0NvdW50fSA9PT0gJHtuYW1lc18xLmRlZmF1bHQuZXJyb3JzfWApO1xuICAgICAgICBmdW5jdGlvbiBjaGVja0FkZGl0aW9uYWxQcm9wZXJ0aWVzKCkge1xuICAgICAgICAgICAgZ2VuLmZvckluKFwia2V5XCIsIGRhdGEsIChrZXkpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIXByb3BzLmxlbmd0aCAmJiAhcGF0UHJvcHMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydHlDb2RlKGtleSk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBnZW4uaWYoaXNBZGRpdGlvbmFsKGtleSksICgpID0+IGFkZGl0aW9uYWxQcm9wZXJ0eUNvZGUoa2V5KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBpc0FkZGl0aW9uYWwoa2V5KSB7XG4gICAgICAgICAgICBsZXQgZGVmaW5lZFByb3A7XG4gICAgICAgICAgICBpZiAocHJvcHMubGVuZ3RoID4gOCkge1xuICAgICAgICAgICAgICAgIC8vIFRPRE8gbWF5YmUgYW4gb3B0aW9uIGluc3RlYWQgb2YgaGFyZC1jb2RlZCA4P1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzU2NoZW1hID0gKDAsIHV0aWxfMS5zY2hlbWFSZWZPclZhbCkoaXQsIHBhcmVudFNjaGVtYS5wcm9wZXJ0aWVzLCBcInByb3BlcnRpZXNcIik7XG4gICAgICAgICAgICAgICAgZGVmaW5lZFByb3AgPSAoMCwgY29kZV8xLmlzT3duUHJvcGVydHkpKGdlbiwgcHJvcHNTY2hlbWEsIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChwcm9wcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVkUHJvcCA9ICgwLCBjb2RlZ2VuXzEub3IpKC4uLnByb3BzLm1hcCgocCkgPT4gKDAsIGNvZGVnZW5fMS5fKSBgJHtrZXl9ID09PSAke3B9YCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGVmaW5lZFByb3AgPSBjb2RlZ2VuXzEubmlsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHBhdFByb3BzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGRlZmluZWRQcm9wID0gKDAsIGNvZGVnZW5fMS5vcikoZGVmaW5lZFByb3AsIC4uLnBhdFByb3BzLm1hcCgocCkgPT4gKDAsIGNvZGVnZW5fMS5fKSBgJHsoMCwgY29kZV8xLnVzZVBhdHRlcm4pKGN4dCwgcCl9LnRlc3QoJHtrZXl9KWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLm5vdCkoZGVmaW5lZFByb3ApO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGRlbGV0ZUFkZGl0aW9uYWwoa2V5KSB7XG4gICAgICAgICAgICBnZW4uY29kZSgoMCwgY29kZWdlbl8xLl8pIGBkZWxldGUgJHtkYXRhfVske2tleX1dYCk7XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gYWRkaXRpb25hbFByb3BlcnR5Q29kZShrZXkpIHtcbiAgICAgICAgICAgIGlmIChvcHRzLnJlbW92ZUFkZGl0aW9uYWwgPT09IFwiYWxsXCIgfHwgKG9wdHMucmVtb3ZlQWRkaXRpb25hbCAmJiBzY2hlbWEgPT09IGZhbHNlKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZUFkZGl0aW9uYWwoa2V5KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc2NoZW1hID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIGN4dC5zZXRQYXJhbXMoeyBhZGRpdGlvbmFsUHJvcGVydHk6IGtleSB9KTtcbiAgICAgICAgICAgICAgICBjeHQuZXJyb3IoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWFsbEVycm9ycylcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmJyZWFrKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT0gXCJvYmplY3RcIiAmJiAhKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucmVtb3ZlQWRkaXRpb25hbCA9PT0gXCJmYWlsaW5nXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgYXBwbHlBZGRpdGlvbmFsU2NoZW1hKGtleSwgdmFsaWQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KSh2YWxpZCksICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN4dC5yZXNldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlQWRkaXRpb25hbChrZXkpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGFwcGx5QWRkaXRpb25hbFNjaGVtYShrZXksIHZhbGlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFhbGxFcnJvcnMpXG4gICAgICAgICAgICAgICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSwgKCkgPT4gZ2VuLmJyZWFrKCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhcHBseUFkZGl0aW9uYWxTY2hlbWEoa2V5LCB2YWxpZCwgZXJyb3JzKSB7XG4gICAgICAgICAgICBjb25zdCBzdWJzY2hlbWEgPSB7XG4gICAgICAgICAgICAgICAga2V5d29yZDogXCJhZGRpdGlvbmFsUHJvcGVydGllc1wiLFxuICAgICAgICAgICAgICAgIGRhdGFQcm9wOiBrZXksXG4gICAgICAgICAgICAgICAgZGF0YVByb3BUeXBlOiB1dGlsXzEuVHlwZS5TdHIsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGVycm9ycyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHN1YnNjaGVtYSwge1xuICAgICAgICAgICAgICAgICAgICBjb21wb3NpdGVSdWxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBjcmVhdGVFcnJvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBhbGxFcnJvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3h0LnN1YnNjaGVtYShzdWJzY2hlbWEsIHZhbGlkKTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWRkaXRpb25hbFByb3BlcnRpZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB2YWxpZGF0ZV8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdmFsaWRhdGVcIik7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBhZGRpdGlvbmFsUHJvcGVydGllc18xID0gcmVxdWlyZShcIi4vYWRkaXRpb25hbFByb3BlcnRpZXNcIik7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJwcm9wZXJ0aWVzXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBcIm9iamVjdFwiLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgZGF0YSwgaXQgfSA9IGN4dDtcbiAgICAgICAgaWYgKGl0Lm9wdHMucmVtb3ZlQWRkaXRpb25hbCA9PT0gXCJhbGxcIiAmJiBwYXJlbnRTY2hlbWEuYWRkaXRpb25hbFByb3BlcnRpZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXNfMS5kZWZhdWx0LmNvZGUobmV3IHZhbGlkYXRlXzEuS2V5d29yZEN4dChpdCwgYWRkaXRpb25hbFByb3BlcnRpZXNfMS5kZWZhdWx0LCBcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCIpKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBhbGxQcm9wcyA9ICgwLCBjb2RlXzEuYWxsU2NoZW1hUHJvcGVydGllcykoc2NoZW1hKTtcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIGFsbFByb3BzKSB7XG4gICAgICAgICAgICBpdC5kZWZpbmVkUHJvcGVydGllcy5hZGQocHJvcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0Lm9wdHMudW5ldmFsdWF0ZWQgJiYgYWxsUHJvcHMubGVuZ3RoICYmIGl0LnByb3BzICE9PSB0cnVlKSB7XG4gICAgICAgICAgICBpdC5wcm9wcyA9IHV0aWxfMS5tZXJnZUV2YWx1YXRlZC5wcm9wcyhnZW4sICgwLCB1dGlsXzEudG9IYXNoKShhbGxQcm9wcyksIGl0LnByb3BzKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gYWxsUHJvcHMuZmlsdGVyKChwKSA9PiAhKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYVtwXSkpO1xuICAgICAgICBpZiAocHJvcGVydGllcy5sZW5ndGggPT09IDApXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICAgICAgZm9yIChjb25zdCBwcm9wIG9mIHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIGlmIChoYXNEZWZhdWx0KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgYXBwbHlQcm9wZXJ0eVNjaGVtYShwcm9wKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZV8xLnByb3BlcnR5SW5EYXRhKShnZW4sIGRhdGEsIHByb3AsIGl0Lm9wdHMub3duUHJvcGVydGllcykpO1xuICAgICAgICAgICAgICAgIGFwcGx5UHJvcGVydHlTY2hlbWEocHJvcCk7XG4gICAgICAgICAgICAgICAgaWYgKCFpdC5hbGxFcnJvcnMpXG4gICAgICAgICAgICAgICAgICAgIGdlbi5lbHNlKCkudmFyKHZhbGlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICBnZW4uZW5kSWYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN4dC5pdC5kZWZpbmVkUHJvcGVydGllcy5hZGQocHJvcCk7XG4gICAgICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgICAgICB9XG4gICAgICAgIGZ1bmN0aW9uIGhhc0RlZmF1bHQocHJvcCkge1xuICAgICAgICAgICAgcmV0dXJuIGl0Lm9wdHMudXNlRGVmYXVsdHMgJiYgIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgc2NoZW1hW3Byb3BdLmRlZmF1bHQgIT09IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhcHBseVByb3BlcnR5U2NoZW1hKHByb3ApIHtcbiAgICAgICAgICAgIGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICAgICAgICAgIGtleXdvcmQ6IFwicHJvcGVydGllc1wiLFxuICAgICAgICAgICAgICAgIHNjaGVtYVByb3A6IHByb3AsXG4gICAgICAgICAgICAgICAgZGF0YVByb3A6IHByb3AsXG4gICAgICAgICAgICB9LCB2YWxpZCk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb3BlcnRpZXMuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb2RlXzEgPSByZXF1aXJlKFwiLi4vY29kZVwiKTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgdXRpbF8yID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcInBhdHRlcm5Qcm9wZXJ0aWVzXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBcIm9iamVjdFwiLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGRhdGEsIHBhcmVudFNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgY29uc3QgeyBvcHRzIH0gPSBpdDtcbiAgICAgICAgY29uc3QgcGF0dGVybnMgPSAoMCwgY29kZV8xLmFsbFNjaGVtYVByb3BlcnRpZXMpKHNjaGVtYSk7XG4gICAgICAgIGNvbnN0IGFsd2F5c1ZhbGlkUGF0dGVybnMgPSBwYXR0ZXJucy5maWx0ZXIoKHApID0+ICgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWFbcF0pKTtcbiAgICAgICAgaWYgKHBhdHRlcm5zLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgKGFsd2F5c1ZhbGlkUGF0dGVybnMubGVuZ3RoID09PSBwYXR0ZXJucy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAoIWl0Lm9wdHMudW5ldmFsdWF0ZWQgfHwgaXQucHJvcHMgPT09IHRydWUpKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNoZWNrUHJvcGVydGllcyA9IG9wdHMuc3RyaWN0U2NoZW1hICYmICFvcHRzLmFsbG93TWF0Y2hpbmdQcm9wZXJ0aWVzICYmIHBhcmVudFNjaGVtYS5wcm9wZXJ0aWVzO1xuICAgICAgICBjb25zdCB2YWxpZCA9IGdlbi5uYW1lKFwidmFsaWRcIik7XG4gICAgICAgIGlmIChpdC5wcm9wcyAhPT0gdHJ1ZSAmJiAhKGl0LnByb3BzIGluc3RhbmNlb2YgY29kZWdlbl8xLk5hbWUpKSB7XG4gICAgICAgICAgICBpdC5wcm9wcyA9ICgwLCB1dGlsXzIuZXZhbHVhdGVkUHJvcHNUb05hbWUpKGdlbiwgaXQucHJvcHMpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgcHJvcHMgfSA9IGl0O1xuICAgICAgICB2YWxpZGF0ZVBhdHRlcm5Qcm9wZXJ0aWVzKCk7XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlUGF0dGVyblByb3BlcnRpZXMoKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHBhdCBvZiBwYXR0ZXJucykge1xuICAgICAgICAgICAgICAgIGlmIChjaGVja1Byb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrTWF0Y2hpbmdQcm9wZXJ0aWVzKHBhdCk7XG4gICAgICAgICAgICAgICAgaWYgKGl0LmFsbEVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZVByb3BlcnRpZXMocGF0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi52YXIodmFsaWQsIHRydWUpOyAvLyBUT0RPIHZhclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0ZVByb3BlcnRpZXMocGF0KTtcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKHZhbGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnVuY3Rpb24gY2hlY2tNYXRjaGluZ1Byb3BlcnRpZXMocGF0KSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHByb3AgaW4gY2hlY2tQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ldyBSZWdFeHAocGF0KS50ZXN0KHByb3ApKSB7XG4gICAgICAgICAgICAgICAgICAgICgwLCB1dGlsXzEuY2hlY2tTdHJpY3RNb2RlKShpdCwgYHByb3BlcnR5ICR7cHJvcH0gbWF0Y2hlcyBwYXR0ZXJuICR7cGF0fSAodXNlIGFsbG93TWF0Y2hpbmdQcm9wZXJ0aWVzKWApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVByb3BlcnRpZXMocGF0KSB7XG4gICAgICAgICAgICBnZW4uZm9ySW4oXCJrZXlcIiwgZGF0YSwgKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGdlbi5pZigoMCwgY29kZWdlbl8xLl8pIGAkeygwLCBjb2RlXzEudXNlUGF0dGVybikoY3h0LCBwYXQpfS50ZXN0KCR7a2V5fSlgLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFsd2F5c1ZhbGlkID0gYWx3YXlzVmFsaWRQYXR0ZXJucy5pbmNsdWRlcyhwYXQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWFsd2F5c1ZhbGlkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXl3b3JkOiBcInBhdHRlcm5Qcm9wZXJ0aWVzXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hUHJvcDogcGF0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFQcm9wOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVByb3BUeXBlOiB1dGlsXzIuVHlwZS5TdHIsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCB2YWxpZCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudW5ldmFsdWF0ZWQgJiYgcHJvcHMgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24oKDAsIGNvZGVnZW5fMS5fKSBgJHtwcm9wc31bJHtrZXl9XWAsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCFhbHdheXNWYWxpZCAmJiAhaXQuYWxsRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjYW4gc2hvcnQtY2lyY3VpdCBpZiBgdW5ldmFsdWF0ZWRQcm9wZXJ0aWVzYCBpcyBub3Qgc3VwcG9ydGVkIChvcHRzLm5leHQgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3IgaWYgYWxsIHByb3BlcnRpZXMgd2VyZSBldmFsdWF0ZWQgKHByb3BzID09PSB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KSh2YWxpZCksICgpID0+IGdlbi5icmVhaygpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhdHRlcm5Qcm9wZXJ0aWVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBwYXJhbXMgfSkgPT4gKDAsIGNvZGVnZW5fMS5zdHIpIGBtdXN0IG1hdGNoIFwiJHtwYXJhbXMuaWZDbGF1c2V9XCIgc2NoZW1hYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtcyB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7ZmFpbGluZ0tleXdvcmQ6ICR7cGFyYW1zLmlmQ2xhdXNlfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImlmXCIsXG4gICAgc2NoZW1hVHlwZTogW1wib2JqZWN0XCIsIFwiYm9vbGVhblwiXSxcbiAgICB0cmFja0Vycm9yczogdHJ1ZSxcbiAgICBlcnJvcixcbiAgICBjb2RlKGN4dCkge1xuICAgICAgICBjb25zdCB7IGdlbiwgcGFyZW50U2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgICAgICBpZiAocGFyZW50U2NoZW1hLnRoZW4gPT09IHVuZGVmaW5lZCAmJiBwYXJlbnRTY2hlbWEuZWxzZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsICdcImlmXCIgd2l0aG91dCBcInRoZW5cIiBhbmQgXCJlbHNlXCIgaXMgaWdub3JlZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhc1RoZW4gPSBoYXNTY2hlbWEoaXQsIFwidGhlblwiKTtcbiAgICAgICAgY29uc3QgaGFzRWxzZSA9IGhhc1NjaGVtYShpdCwgXCJlbHNlXCIpO1xuICAgICAgICBpZiAoIWhhc1RoZW4gJiYgIWhhc0Vsc2UpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIsIHRydWUpO1xuICAgICAgICBjb25zdCBzY2hWYWxpZCA9IGdlbi5uYW1lKFwiX3ZhbGlkXCIpO1xuICAgICAgICB2YWxpZGF0ZUlmKCk7XG4gICAgICAgIGN4dC5yZXNldCgpO1xuICAgICAgICBpZiAoaGFzVGhlbiAmJiBoYXNFbHNlKSB7XG4gICAgICAgICAgICBjb25zdCBpZkNsYXVzZSA9IGdlbi5sZXQoXCJpZkNsYXVzZVwiKTtcbiAgICAgICAgICAgIGN4dC5zZXRQYXJhbXMoeyBpZkNsYXVzZSB9KTtcbiAgICAgICAgICAgIGdlbi5pZihzY2hWYWxpZCwgdmFsaWRhdGVDbGF1c2UoXCJ0aGVuXCIsIGlmQ2xhdXNlKSwgdmFsaWRhdGVDbGF1c2UoXCJlbHNlXCIsIGlmQ2xhdXNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaGFzVGhlbikge1xuICAgICAgICAgICAgZ2VuLmlmKHNjaFZhbGlkLCB2YWxpZGF0ZUNsYXVzZShcInRoZW5cIikpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZ2VuLmlmKCgwLCBjb2RlZ2VuXzEubm90KShzY2hWYWxpZCksIHZhbGlkYXRlQ2xhdXNlKFwiZWxzZVwiKSk7XG4gICAgICAgIH1cbiAgICAgICAgY3h0LnBhc3ModmFsaWQsICgpID0+IGN4dC5lcnJvcih0cnVlKSk7XG4gICAgICAgIGZ1bmN0aW9uIHZhbGlkYXRlSWYoKSB7XG4gICAgICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHtcbiAgICAgICAgICAgICAgICBrZXl3b3JkOiBcImlmXCIsXG4gICAgICAgICAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjcmVhdGVFcnJvcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGFsbEVycm9yczogZmFsc2UsXG4gICAgICAgICAgICB9LCBzY2hWYWxpZCk7XG4gICAgICAgICAgICBjeHQubWVyZ2VFdmFsdWF0ZWQoc2NoQ3h0KTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZUNsYXVzZShrZXl3b3JkLCBpZkNsYXVzZSkge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBzY2hDeHQgPSBjeHQuc3Vic2NoZW1hKHsga2V5d29yZCB9LCBzY2hWYWxpZCk7XG4gICAgICAgICAgICAgICAgZ2VuLmFzc2lnbih2YWxpZCwgc2NoVmFsaWQpO1xuICAgICAgICAgICAgICAgIGN4dC5tZXJnZVZhbGlkRXZhbHVhdGVkKHNjaEN4dCwgdmFsaWQpO1xuICAgICAgICAgICAgICAgIGlmIChpZkNsYXVzZSlcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmFzc2lnbihpZkNsYXVzZSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtrZXl3b3JkfWApO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IGlmQ2xhdXNlOiBrZXl3b3JkIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0sXG59O1xuZnVuY3Rpb24gaGFzU2NoZW1hKGl0LCBrZXl3b3JkKSB7XG4gICAgY29uc3Qgc2NoZW1hID0gaXQuc2NoZW1hW2tleXdvcmRdO1xuICAgIHJldHVybiBzY2hlbWEgIT09IHVuZGVmaW5lZCAmJiAhKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSk7XG59XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZi5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGFkZGl0aW9uYWxJdGVtc18xID0gcmVxdWlyZShcIi4vYWRkaXRpb25hbEl0ZW1zXCIpO1xuY29uc3QgcHJlZml4SXRlbXNfMSA9IHJlcXVpcmUoXCIuL3ByZWZpeEl0ZW1zXCIpO1xuY29uc3QgaXRlbXNfMSA9IHJlcXVpcmUoXCIuL2l0ZW1zXCIpO1xuY29uc3QgaXRlbXMyMDIwXzEgPSByZXF1aXJlKFwiLi9pdGVtczIwMjBcIik7XG5jb25zdCBjb250YWluc18xID0gcmVxdWlyZShcIi4vY29udGFpbnNcIik7XG5jb25zdCBkZXBlbmRlbmNpZXNfMSA9IHJlcXVpcmUoXCIuL2RlcGVuZGVuY2llc1wiKTtcbmNvbnN0IHByb3BlcnR5TmFtZXNfMSA9IHJlcXVpcmUoXCIuL3Byb3BlcnR5TmFtZXNcIik7XG5jb25zdCBhZGRpdGlvbmFsUHJvcGVydGllc18xID0gcmVxdWlyZShcIi4vYWRkaXRpb25hbFByb3BlcnRpZXNcIik7XG5jb25zdCBwcm9wZXJ0aWVzXzEgPSByZXF1aXJlKFwiLi9wcm9wZXJ0aWVzXCIpO1xuY29uc3QgcGF0dGVyblByb3BlcnRpZXNfMSA9IHJlcXVpcmUoXCIuL3BhdHRlcm5Qcm9wZXJ0aWVzXCIpO1xuY29uc3Qgbm90XzEgPSByZXF1aXJlKFwiLi9ub3RcIik7XG5jb25zdCBhbnlPZl8xID0gcmVxdWlyZShcIi4vYW55T2ZcIik7XG5jb25zdCBvbmVPZl8xID0gcmVxdWlyZShcIi4vb25lT2ZcIik7XG5jb25zdCBhbGxPZl8xID0gcmVxdWlyZShcIi4vYWxsT2ZcIik7XG5jb25zdCBpZl8xID0gcmVxdWlyZShcIi4vaWZcIik7XG5jb25zdCB0aGVuRWxzZV8xID0gcmVxdWlyZShcIi4vdGhlbkVsc2VcIik7XG5mdW5jdGlvbiBnZXRBcHBsaWNhdG9yKGRyYWZ0MjAyMCA9IGZhbHNlKSB7XG4gICAgY29uc3QgYXBwbGljYXRvciA9IFtcbiAgICAgICAgLy8gYW55XG4gICAgICAgIG5vdF8xLmRlZmF1bHQsXG4gICAgICAgIGFueU9mXzEuZGVmYXVsdCxcbiAgICAgICAgb25lT2ZfMS5kZWZhdWx0LFxuICAgICAgICBhbGxPZl8xLmRlZmF1bHQsXG4gICAgICAgIGlmXzEuZGVmYXVsdCxcbiAgICAgICAgdGhlbkVsc2VfMS5kZWZhdWx0LFxuICAgICAgICAvLyBvYmplY3RcbiAgICAgICAgcHJvcGVydHlOYW1lc18xLmRlZmF1bHQsXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzXzEuZGVmYXVsdCxcbiAgICAgICAgZGVwZW5kZW5jaWVzXzEuZGVmYXVsdCxcbiAgICAgICAgcHJvcGVydGllc18xLmRlZmF1bHQsXG4gICAgICAgIHBhdHRlcm5Qcm9wZXJ0aWVzXzEuZGVmYXVsdCxcbiAgICBdO1xuICAgIC8vIGFycmF5XG4gICAgaWYgKGRyYWZ0MjAyMClcbiAgICAgICAgYXBwbGljYXRvci5wdXNoKHByZWZpeEl0ZW1zXzEuZGVmYXVsdCwgaXRlbXMyMDIwXzEuZGVmYXVsdCk7XG4gICAgZWxzZVxuICAgICAgICBhcHBsaWNhdG9yLnB1c2goYWRkaXRpb25hbEl0ZW1zXzEuZGVmYXVsdCwgaXRlbXNfMS5kZWZhdWx0KTtcbiAgICBhcHBsaWNhdG9yLnB1c2goY29udGFpbnNfMS5kZWZhdWx0KTtcbiAgICByZXR1cm4gYXBwbGljYXRvcjtcbn1cbmV4cG9ydHMuZGVmYXVsdCA9IGdldEFwcGxpY2F0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGl0ZW1zXzEgPSByZXF1aXJlKFwiLi9pdGVtc1wiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcInByZWZpeEl0ZW1zXCIsXG4gICAgdHlwZTogXCJhcnJheVwiLFxuICAgIHNjaGVtYVR5cGU6IFtcImFycmF5XCJdLFxuICAgIGJlZm9yZTogXCJ1bmlxdWVJdGVtc1wiLFxuICAgIGNvZGU6IChjeHQpID0+ICgwLCBpdGVtc18xLnZhbGlkYXRlVHVwbGUpKGN4dCwgXCJpdGVtc1wiKSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcmVmaXhJdGVtcy5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCBhZGRpdGlvbmFsSXRlbXNfMSA9IHJlcXVpcmUoXCIuL2FkZGl0aW9uYWxJdGVtc1wiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHBhcmFtczogeyBsZW4gfSB9KSA9PiAoMCwgY29kZWdlbl8xLnN0cikgYG11c3QgTk9UIGhhdmUgbW9yZSB0aGFuICR7bGVufSBpdGVtc2AsXG4gICAgcGFyYW1zOiAoeyBwYXJhbXM6IHsgbGVuIH0gfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge2xpbWl0OiAke2xlbn19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJpdGVtc1wiLFxuICAgIHR5cGU6IFwiYXJyYXlcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJib29sZWFuXCJdLFxuICAgIGJlZm9yZTogXCJ1bmlxdWVJdGVtc1wiLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgc2NoZW1hLCBwYXJlbnRTY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGNvbnN0IHsgcHJlZml4SXRlbXMgfSA9IHBhcmVudFNjaGVtYTtcbiAgICAgICAgaXQuaXRlbXMgPSB0cnVlO1xuICAgICAgICBpZiAoKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaGVtYSkpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmIChwcmVmaXhJdGVtcylcbiAgICAgICAgICAgICgwLCBhZGRpdGlvbmFsSXRlbXNfMS52YWxpZGF0ZUFkZGl0aW9uYWxJdGVtcykoY3h0LCBwcmVmaXhJdGVtcyk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGN4dC5vaygoMCwgY29kZV8xLnZhbGlkYXRlQXJyYXkpKGN4dCkpO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlbXMyMDIwLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcInByb3BlcnR5IG5hbWUgbXVzdCBiZSB2YWxpZFwiLFxuICAgIHBhcmFtczogKHsgcGFyYW1zIH0pID0+ICgwLCBjb2RlZ2VuXzEuXykgYHtwcm9wZXJ0eU5hbWU6ICR7cGFyYW1zLnByb3BlcnR5TmFtZX19YCxcbn07XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJwcm9wZXJ0eU5hbWVzXCIsXG4gICAgdHlwZTogXCJvYmplY3RcIixcbiAgICBzY2hlbWFUeXBlOiBbXCJvYmplY3RcIiwgXCJib29sZWFuXCJdLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGRhdGEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoZW1hKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICBnZW4uZm9ySW4oXCJrZXlcIiwgZGF0YSwgKGtleSkgPT4ge1xuICAgICAgICAgICAgY3h0LnNldFBhcmFtcyh7IHByb3BlcnR5TmFtZToga2V5IH0pO1xuICAgICAgICAgICAgY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICAgICAga2V5d29yZDogXCJwcm9wZXJ0eU5hbWVzXCIsXG4gICAgICAgICAgICAgICAgZGF0YToga2V5LFxuICAgICAgICAgICAgICAgIGRhdGFUeXBlczogW1wic3RyaW5nXCJdLFxuICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZToga2V5LFxuICAgICAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICB9LCB2YWxpZCk7XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5ub3QpKHZhbGlkKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGN4dC5lcnJvcih0cnVlKTtcbiAgICAgICAgICAgICAgICBpZiAoIWl0LmFsbEVycm9ycylcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmJyZWFrKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIGN4dC5vayh2YWxpZCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wcm9wZXJ0eU5hbWVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcIm5vdFwiLFxuICAgIHNjaGVtYVR5cGU6IFtcIm9iamVjdFwiLCBcImJvb2xlYW5cIl0sXG4gICAgdHJhY2tFcnJvcnM6IHRydWUsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIHNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgaWYgKCgwLCB1dGlsXzEuYWx3YXlzVmFsaWRTY2hlbWEpKGl0LCBzY2hlbWEpKSB7XG4gICAgICAgICAgICBjeHQuZmFpbCgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLm5hbWUoXCJ2YWxpZFwiKTtcbiAgICAgICAgY3h0LnN1YnNjaGVtYSh7XG4gICAgICAgICAgICBrZXl3b3JkOiBcIm5vdFwiLFxuICAgICAgICAgICAgY29tcG9zaXRlUnVsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNyZWF0ZUVycm9yczogZmFsc2UsXG4gICAgICAgICAgICBhbGxFcnJvcnM6IGZhbHNlLFxuICAgICAgICB9LCB2YWxpZCk7XG4gICAgICAgIGN4dC5mYWlsUmVzdWx0KHZhbGlkLCAoKSA9PiBjeHQucmVzZXQoKSwgKCkgPT4gY3h0LmVycm9yKCkpO1xuICAgIH0sXG4gICAgZXJyb3I6IHsgbWVzc2FnZTogXCJtdXN0IE5PVCBiZSB2YWxpZFwiIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm90LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcIi4uL2NvZGVcIik7XG5jb25zdCBkZWYgPSB7XG4gICAga2V5d29yZDogXCJhbnlPZlwiLFxuICAgIHNjaGVtYVR5cGU6IFwiYXJyYXlcIixcbiAgICB0cmFja0Vycm9yczogdHJ1ZSxcbiAgICBjb2RlOiBjb2RlXzEudmFsaWRhdGVVbmlvbixcbiAgICBlcnJvcjogeyBtZXNzYWdlOiBcIm11c3QgbWF0Y2ggYSBzY2hlbWEgaW4gYW55T2ZcIiB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFueU9mLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgY29kZWdlbl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvY29kZWdlblwiKTtcbmNvbnN0IHV0aWxfMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL3V0aWxcIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiBcIm11c3QgbWF0Y2ggZXhhY3RseSBvbmUgc2NoZW1hIGluIG9uZU9mXCIsXG4gICAgcGFyYW1zOiAoeyBwYXJhbXMgfSkgPT4gKDAsIGNvZGVnZW5fMS5fKSBge3Bhc3NpbmdTY2hlbWFzOiAke3BhcmFtcy5wYXNzaW5nfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcIm9uZU9mXCIsXG4gICAgc2NoZW1hVHlwZTogXCJhcnJheVwiLFxuICAgIHRyYWNrRXJyb3JzOiB0cnVlLFxuICAgIGVycm9yLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQgfSA9IGN4dDtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShzY2hlbWEpKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYWp2IGltcGxlbWVudGF0aW9uIGVycm9yXCIpO1xuICAgICAgICBpZiAoaXQub3B0cy5kaXNjcmltaW5hdG9yICYmIHBhcmVudFNjaGVtYS5kaXNjcmltaW5hdG9yKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICBjb25zdCBzY2hBcnIgPSBzY2hlbWE7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgcGFzc2luZyA9IGdlbi5sZXQoXCJwYXNzaW5nXCIsIG51bGwpO1xuICAgICAgICBjb25zdCBzY2hWYWxpZCA9IGdlbi5uYW1lKFwiX3ZhbGlkXCIpO1xuICAgICAgICBjeHQuc2V0UGFyYW1zKHsgcGFzc2luZyB9KTtcbiAgICAgICAgLy8gVE9ETyBwb3NzaWJseSBmYWlsIHN0cmFpZ2h0IGF3YXkgKHdpdGggd2FybmluZyBvciBleGNlcHRpb24pIGlmIHRoZXJlIGFyZSB0d28gZW1wdHkgYWx3YXlzIHZhbGlkIHNjaGVtYXNcbiAgICAgICAgZ2VuLmJsb2NrKHZhbGlkYXRlT25lT2YpO1xuICAgICAgICBjeHQucmVzdWx0KHZhbGlkLCAoKSA9PiBjeHQucmVzZXQoKSwgKCkgPT4gY3h0LmVycm9yKHRydWUpKTtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVPbmVPZigpIHtcbiAgICAgICAgICAgIHNjaEFyci5mb3JFYWNoKChzY2gsIGkpID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgc2NoQ3h0O1xuICAgICAgICAgICAgICAgIGlmICgoMCwgdXRpbF8xLmFsd2F5c1ZhbGlkU2NoZW1hKShpdCwgc2NoKSkge1xuICAgICAgICAgICAgICAgICAgICBnZW4udmFyKHNjaFZhbGlkLCB0cnVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNjaEN4dCA9IGN4dC5zdWJzY2hlbWEoe1xuICAgICAgICAgICAgICAgICAgICAgICAga2V5d29yZDogXCJvbmVPZlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hUHJvcDogaSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvc2l0ZVJ1bGU6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIH0sIHNjaFZhbGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlblxuICAgICAgICAgICAgICAgICAgICAgICAgLmlmKCgwLCBjb2RlZ2VuXzEuXykgYCR7c2NoVmFsaWR9ICYmICR7dmFsaWR9YClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hc3NpZ24odmFsaWQsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFzc2lnbihwYXNzaW5nLCAoMCwgY29kZWdlbl8xLl8pIGBbJHtwYXNzaW5nfSwgJHtpfV1gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVsc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2VuLmlmKHNjaFZhbGlkLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKHBhc3NpbmcsIGkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NoQ3h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgY3h0Lm1lcmdlRXZhbHVhdGVkKHNjaEN4dCwgY29kZWdlbl8xLk5hbWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9uZU9mLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImFsbE9mXCIsXG4gICAgc2NoZW1hVHlwZTogXCJhcnJheVwiLFxuICAgIGNvZGUoY3h0KSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBzY2hlbWEsIGl0IH0gPSBjeHQ7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoc2NoZW1hKSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFqdiBpbXBsZW1lbnRhdGlvbiBlcnJvclwiKTtcbiAgICAgICAgY29uc3QgdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICBzY2hlbWEuZm9yRWFjaCgoc2NoLCBpKSA9PiB7XG4gICAgICAgICAgICBpZiAoKDAsIHV0aWxfMS5hbHdheXNWYWxpZFNjaGVtYSkoaXQsIHNjaCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3Qgc2NoQ3h0ID0gY3h0LnN1YnNjaGVtYSh7IGtleXdvcmQ6IFwiYWxsT2ZcIiwgc2NoZW1hUHJvcDogaSB9LCB2YWxpZCk7XG4gICAgICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgICAgICAgICAgY3h0Lm1lcmdlRXZhbHVhdGVkKHNjaEN4dCk7XG4gICAgICAgIH0pO1xuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YWxsT2YuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB1dGlsXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZS91dGlsXCIpO1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFtcInRoZW5cIiwgXCJlbHNlXCJdLFxuICAgIHNjaGVtYVR5cGU6IFtcIm9iamVjdFwiLCBcImJvb2xlYW5cIl0sXG4gICAgY29kZSh7IGtleXdvcmQsIHBhcmVudFNjaGVtYSwgaXQgfSkge1xuICAgICAgICBpZiAocGFyZW50U2NoZW1hLmlmID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICAoMCwgdXRpbF8xLmNoZWNrU3RyaWN0TW9kZSkoaXQsIGBcIiR7a2V5d29yZH1cIiB3aXRob3V0IFwiaWZcIiBpcyBpZ25vcmVkYCk7XG4gICAgfSxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBkZWY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aGVuRWxzZS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCBlcnJvciA9IHtcbiAgICBtZXNzYWdlOiAoeyBzY2hlbWFDb2RlIH0pID0+ICgwLCBjb2RlZ2VuXzEuc3RyKSBgbXVzdCBtYXRjaCBmb3JtYXQgXCIke3NjaGVtYUNvZGV9XCJgLFxuICAgIHBhcmFtczogKHsgc2NoZW1hQ29kZSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7Zm9ybWF0OiAke3NjaGVtYUNvZGV9fWAsXG59O1xuY29uc3QgZGVmID0ge1xuICAgIGtleXdvcmQ6IFwiZm9ybWF0XCIsXG4gICAgdHlwZTogW1wibnVtYmVyXCIsIFwic3RyaW5nXCJdLFxuICAgIHNjaGVtYVR5cGU6IFwic3RyaW5nXCIsXG4gICAgJGRhdGE6IHRydWUsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQsIHJ1bGVUeXBlKSB7XG4gICAgICAgIGNvbnN0IHsgZ2VuLCBkYXRhLCAkZGF0YSwgc2NoZW1hLCBzY2hlbWFDb2RlLCBpdCB9ID0gY3h0O1xuICAgICAgICBjb25zdCB7IG9wdHMsIGVyclNjaGVtYVBhdGgsIHNjaGVtYUVudiwgc2VsZiB9ID0gaXQ7XG4gICAgICAgIGlmICghb3B0cy52YWxpZGF0ZUZvcm1hdHMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGlmICgkZGF0YSlcbiAgICAgICAgICAgIHZhbGlkYXRlJERhdGFGb3JtYXQoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgdmFsaWRhdGVGb3JtYXQoKTtcbiAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGUkRGF0YUZvcm1hdCgpIHtcbiAgICAgICAgICAgIGNvbnN0IGZtdHMgPSBnZW4uc2NvcGVWYWx1ZShcImZvcm1hdHNcIiwge1xuICAgICAgICAgICAgICAgIHJlZjogc2VsZi5mb3JtYXRzLFxuICAgICAgICAgICAgICAgIGNvZGU6IG9wdHMuY29kZS5mb3JtYXRzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25zdCBmRGVmID0gZ2VuLmNvbnN0KFwiZkRlZlwiLCAoMCwgY29kZWdlbl8xLl8pIGAke2ZtdHN9WyR7c2NoZW1hQ29kZX1dYCk7XG4gICAgICAgICAgICBjb25zdCBmVHlwZSA9IGdlbi5sZXQoXCJmVHlwZVwiKTtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdCA9IGdlbi5sZXQoXCJmb3JtYXRcIik7XG4gICAgICAgICAgICAvLyBUT0RPIHNpbXBsaWZ5XG4gICAgICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgdHlwZW9mICR7ZkRlZn0gPT0gXCJvYmplY3RcIiAmJiAhKCR7ZkRlZn0gaW5zdGFuY2VvZiBSZWdFeHApYCwgKCkgPT4gZ2VuLmFzc2lnbihmVHlwZSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtmRGVmfS50eXBlIHx8IFwic3RyaW5nXCJgKS5hc3NpZ24oZm9ybWF0LCAoMCwgY29kZWdlbl8xLl8pIGAke2ZEZWZ9LnZhbGlkYXRlYCksICgpID0+IGdlbi5hc3NpZ24oZlR5cGUsICgwLCBjb2RlZ2VuXzEuXykgYFwic3RyaW5nXCJgKS5hc3NpZ24oZm9ybWF0LCBmRGVmKSk7XG4gICAgICAgICAgICBjeHQuZmFpbCRkYXRhKCgwLCBjb2RlZ2VuXzEub3IpKHVua25vd25GbXQoKSwgaW52YWxpZEZtdCgpKSk7XG4gICAgICAgICAgICBmdW5jdGlvbiB1bmtub3duRm10KCkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLnN0cmljdFNjaGVtYSA9PT0gZmFsc2UpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb2RlZ2VuXzEubmlsO1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLl8pIGAke3NjaGVtYUNvZGV9ICYmICEke2Zvcm1hdH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gaW52YWxpZEZtdCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjYWxsRm9ybWF0ID0gc2NoZW1hRW52LiRhc3luY1xuICAgICAgICAgICAgICAgICAgICA/ICgwLCBjb2RlZ2VuXzEuXykgYCgke2ZEZWZ9LmFzeW5jID8gYXdhaXQgJHtmb3JtYXR9KCR7ZGF0YX0pIDogJHtmb3JtYXR9KCR7ZGF0YX0pKWBcbiAgICAgICAgICAgICAgICAgICAgOiAoMCwgY29kZWdlbl8xLl8pIGAke2Zvcm1hdH0oJHtkYXRhfSlgO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbGlkRGF0YSA9ICgwLCBjb2RlZ2VuXzEuXykgYCh0eXBlb2YgJHtmb3JtYXR9ID09IFwiZnVuY3Rpb25cIiA/ICR7Y2FsbEZvcm1hdH0gOiAke2Zvcm1hdH0udGVzdCgke2RhdGF9KSlgO1xuICAgICAgICAgICAgICAgIHJldHVybiAoMCwgY29kZWdlbl8xLl8pIGAke2Zvcm1hdH0gJiYgJHtmb3JtYXR9ICE9PSB0cnVlICYmICR7ZlR5cGV9ID09PSAke3J1bGVUeXBlfSAmJiAhJHt2YWxpZERhdGF9YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdCgpIHtcbiAgICAgICAgICAgIGNvbnN0IGZvcm1hdERlZiA9IHNlbGYuZm9ybWF0c1tzY2hlbWFdO1xuICAgICAgICAgICAgaWYgKCFmb3JtYXREZWYpIHtcbiAgICAgICAgICAgICAgICB1bmtub3duRm9ybWF0KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGZvcm1hdERlZiA9PT0gdHJ1ZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBjb25zdCBbZm10VHlwZSwgZm9ybWF0LCBmbXRSZWZdID0gZ2V0Rm9ybWF0KGZvcm1hdERlZik7XG4gICAgICAgICAgICBpZiAoZm10VHlwZSA9PT0gcnVsZVR5cGUpXG4gICAgICAgICAgICAgICAgY3h0LnBhc3ModmFsaWRDb25kaXRpb24oKSk7XG4gICAgICAgICAgICBmdW5jdGlvbiB1bmtub3duRm9ybWF0KCkge1xuICAgICAgICAgICAgICAgIGlmIChvcHRzLnN0cmljdFNjaGVtYSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIud2Fybih1bmtub3duTXNnKCkpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcih1bmtub3duTXNnKCkpO1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHVua25vd25Nc2coKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgdW5rbm93biBmb3JtYXQgXCIke3NjaGVtYX1cIiBpZ25vcmVkIGluIHNjaGVtYSBhdCBwYXRoIFwiJHtlcnJTY2hlbWFQYXRofVwiYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRGb3JtYXQoZm10RGVmKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29kZSA9IGZtdERlZiBpbnN0YW5jZW9mIFJlZ0V4cFxuICAgICAgICAgICAgICAgICAgICA/ICgwLCBjb2RlZ2VuXzEucmVnZXhwQ29kZSkoZm10RGVmKVxuICAgICAgICAgICAgICAgICAgICA6IG9wdHMuY29kZS5mb3JtYXRzXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICgwLCBjb2RlZ2VuXzEuXykgYCR7b3B0cy5jb2RlLmZvcm1hdHN9JHsoMCwgY29kZWdlbl8xLmdldFByb3BlcnR5KShzY2hlbWEpfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGZtdCA9IGdlbi5zY29wZVZhbHVlKFwiZm9ybWF0c1wiLCB7IGtleTogc2NoZW1hLCByZWY6IGZtdERlZiwgY29kZSB9KTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGZtdERlZiA9PSBcIm9iamVjdFwiICYmICEoZm10RGVmIGluc3RhbmNlb2YgUmVnRXhwKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ZtdERlZi50eXBlIHx8IFwic3RyaW5nXCIsIGZtdERlZi52YWxpZGF0ZSwgKDAsIGNvZGVnZW5fMS5fKSBgJHtmbXR9LnZhbGlkYXRlYF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbXCJzdHJpbmdcIiwgZm10RGVmLCBmbXRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRDb25kaXRpb24oKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmb3JtYXREZWYgPT0gXCJvYmplY3RcIiAmJiAhKGZvcm1hdERlZiBpbnN0YW5jZW9mIFJlZ0V4cCkgJiYgZm9ybWF0RGVmLmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghc2NoZW1hRW52LiRhc3luYylcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImFzeW5jIGZvcm1hdCBpbiBzeW5jIHNjaGVtYVwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwLCBjb2RlZ2VuXzEuXykgYGF3YWl0ICR7Zm10UmVmfSgke2RhdGF9KWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgZm9ybWF0ID09IFwiZnVuY3Rpb25cIiA/ICgwLCBjb2RlZ2VuXzEuXykgYCR7Zm10UmVmfSgke2RhdGF9KWAgOiAoMCwgY29kZWdlbl8xLl8pIGAke2ZtdFJlZn0udGVzdCgke2RhdGF9KWA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGRlZjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvcm1hdC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvcmVfMSA9IHJlcXVpcmUoXCIuL2NvcmVcIik7XG5jb25zdCB2YWxpZGF0aW9uXzEgPSByZXF1aXJlKFwiLi92YWxpZGF0aW9uXCIpO1xuY29uc3QgYXBwbGljYXRvcl8xID0gcmVxdWlyZShcIi4vYXBwbGljYXRvclwiKTtcbmNvbnN0IGZvcm1hdF8xID0gcmVxdWlyZShcIi4vZm9ybWF0XCIpO1xuY29uc3QgbWV0YWRhdGFfMSA9IHJlcXVpcmUoXCIuL21ldGFkYXRhXCIpO1xuY29uc3QgZHJhZnQ3Vm9jYWJ1bGFyaWVzID0gW1xuICAgIGNvcmVfMS5kZWZhdWx0LFxuICAgIHZhbGlkYXRpb25fMS5kZWZhdWx0LFxuICAgICgwLCBhcHBsaWNhdG9yXzEuZGVmYXVsdCkoKSxcbiAgICBmb3JtYXRfMS5kZWZhdWx0LFxuICAgIG1ldGFkYXRhXzEubWV0YWRhdGFWb2NhYnVsYXJ5LFxuICAgIG1ldGFkYXRhXzEuY29udGVudFZvY2FidWxhcnksXG5dO1xuZXhwb3J0cy5kZWZhdWx0ID0gZHJhZnQ3Vm9jYWJ1bGFyaWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZHJhZnQ3LmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgZm9ybWF0XzEgPSByZXF1aXJlKFwiLi9mb3JtYXRcIik7XG5jb25zdCBmb3JtYXQgPSBbZm9ybWF0XzEuZGVmYXVsdF07XG5leHBvcnRzLmRlZmF1bHQgPSBmb3JtYXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY29udGVudFZvY2FidWxhcnkgPSBleHBvcnRzLm1ldGFkYXRhVm9jYWJ1bGFyeSA9IHZvaWQgMDtcbmV4cG9ydHMubWV0YWRhdGFWb2NhYnVsYXJ5ID0gW1xuICAgIFwidGl0bGVcIixcbiAgICBcImRlc2NyaXB0aW9uXCIsXG4gICAgXCJkZWZhdWx0XCIsXG4gICAgXCJkZXByZWNhdGVkXCIsXG4gICAgXCJyZWFkT25seVwiLFxuICAgIFwid3JpdGVPbmx5XCIsXG4gICAgXCJleGFtcGxlc1wiLFxuXTtcbmV4cG9ydHMuY29udGVudFZvY2FidWxhcnkgPSBbXG4gICAgXCJjb250ZW50TWVkaWFUeXBlXCIsXG4gICAgXCJjb250ZW50RW5jb2RpbmdcIixcbiAgICBcImNvbnRlbnRTY2hlbWFcIixcbl07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXRhZGF0YS5qcy5tYXAiLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuLi8uLi9jb21waWxlL2NvZGVnZW5cIik7XG5jb25zdCB0eXBlc18xID0gcmVxdWlyZShcIi4uL2Rpc2NyaW1pbmF0b3IvdHlwZXNcIik7XG5jb25zdCBjb21waWxlXzEgPSByZXF1aXJlKFwiLi4vLi4vY29tcGlsZVwiKTtcbmNvbnN0IHJlZl9lcnJvcl8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvcmVmX2Vycm9yXCIpO1xuY29uc3QgdXRpbF8xID0gcmVxdWlyZShcIi4uLy4uL2NvbXBpbGUvdXRpbFwiKTtcbmNvbnN0IGVycm9yID0ge1xuICAgIG1lc3NhZ2U6ICh7IHBhcmFtczogeyBkaXNjckVycm9yLCB0YWdOYW1lIH0gfSkgPT4gZGlzY3JFcnJvciA9PT0gdHlwZXNfMS5EaXNjckVycm9yLlRhZ1xuICAgICAgICA/IGB0YWcgXCIke3RhZ05hbWV9XCIgbXVzdCBiZSBzdHJpbmdgXG4gICAgICAgIDogYHZhbHVlIG9mIHRhZyBcIiR7dGFnTmFtZX1cIiBtdXN0IGJlIGluIG9uZU9mYCxcbiAgICBwYXJhbXM6ICh7IHBhcmFtczogeyBkaXNjckVycm9yLCB0YWcsIHRhZ05hbWUgfSB9KSA9PiAoMCwgY29kZWdlbl8xLl8pIGB7ZXJyb3I6ICR7ZGlzY3JFcnJvcn0sIHRhZzogJHt0YWdOYW1lfSwgdGFnVmFsdWU6ICR7dGFnfX1gLFxufTtcbmNvbnN0IGRlZiA9IHtcbiAgICBrZXl3b3JkOiBcImRpc2NyaW1pbmF0b3JcIixcbiAgICB0eXBlOiBcIm9iamVjdFwiLFxuICAgIHNjaGVtYVR5cGU6IFwib2JqZWN0XCIsXG4gICAgZXJyb3IsXG4gICAgY29kZShjeHQpIHtcbiAgICAgICAgY29uc3QgeyBnZW4sIGRhdGEsIHNjaGVtYSwgcGFyZW50U2NoZW1hLCBpdCB9ID0gY3h0O1xuICAgICAgICBjb25zdCB7IG9uZU9mIH0gPSBwYXJlbnRTY2hlbWE7XG4gICAgICAgIGlmICghaXQub3B0cy5kaXNjcmltaW5hdG9yKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkaXNjcmltaW5hdG9yOiByZXF1aXJlcyBkaXNjcmltaW5hdG9yIG9wdGlvblwiKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB0YWdOYW1lID0gc2NoZW1hLnByb3BlcnR5TmFtZTtcbiAgICAgICAgaWYgKHR5cGVvZiB0YWdOYW1lICE9IFwic3RyaW5nXCIpXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJkaXNjcmltaW5hdG9yOiByZXF1aXJlcyBwcm9wZXJ0eU5hbWVcIik7XG4gICAgICAgIGlmIChzY2hlbWEubWFwcGluZylcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImRpc2NyaW1pbmF0b3I6IG1hcHBpbmcgaXMgbm90IHN1cHBvcnRlZFwiKTtcbiAgICAgICAgaWYgKCFvbmVPZilcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImRpc2NyaW1pbmF0b3I6IHJlcXVpcmVzIG9uZU9mIGtleXdvcmRcIik7XG4gICAgICAgIGNvbnN0IHZhbGlkID0gZ2VuLmxldChcInZhbGlkXCIsIGZhbHNlKTtcbiAgICAgICAgY29uc3QgdGFnID0gZ2VuLmNvbnN0KFwidGFnXCIsICgwLCBjb2RlZ2VuXzEuXykgYCR7ZGF0YX0keygwLCBjb2RlZ2VuXzEuZ2V0UHJvcGVydHkpKHRhZ05hbWUpfWApO1xuICAgICAgICBnZW4uaWYoKDAsIGNvZGVnZW5fMS5fKSBgdHlwZW9mICR7dGFnfSA9PSBcInN0cmluZ1wiYCwgKCkgPT4gdmFsaWRhdGVNYXBwaW5nKCksICgpID0+IGN4dC5lcnJvcihmYWxzZSwgeyBkaXNjckVycm9yOiB0eXBlc18xLkRpc2NyRXJyb3IuVGFnLCB0YWcsIHRhZ05hbWUgfSkpO1xuICAgICAgICBjeHQub2sodmFsaWQpO1xuICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZU1hcHBpbmcoKSB7XG4gICAgICAgICAgICBjb25zdCBtYXBwaW5nID0gZ2V0TWFwcGluZygpO1xuICAgICAgICAgICAgZ2VuLmlmKGZhbHNlKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgdGFnVmFsdWUgaW4gbWFwcGluZykge1xuICAgICAgICAgICAgICAgIGdlbi5lbHNlSWYoKDAsIGNvZGVnZW5fMS5fKSBgJHt0YWd9ID09PSAke3RhZ1ZhbHVlfWApO1xuICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24odmFsaWQsIGFwcGx5VGFnU2NoZW1hKG1hcHBpbmdbdGFnVmFsdWVdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnZW4uZWxzZSgpO1xuICAgICAgICAgICAgY3h0LmVycm9yKGZhbHNlLCB7IGRpc2NyRXJyb3I6IHR5cGVzXzEuRGlzY3JFcnJvci5NYXBwaW5nLCB0YWcsIHRhZ05hbWUgfSk7XG4gICAgICAgICAgICBnZW4uZW5kSWYoKTtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBhcHBseVRhZ1NjaGVtYShzY2hlbWFQcm9wKSB7XG4gICAgICAgICAgICBjb25zdCBfdmFsaWQgPSBnZW4ubmFtZShcInZhbGlkXCIpO1xuICAgICAgICAgICAgY29uc3Qgc2NoQ3h0ID0gY3h0LnN1YnNjaGVtYSh7IGtleXdvcmQ6IFwib25lT2ZcIiwgc2NoZW1hUHJvcCB9LCBfdmFsaWQpO1xuICAgICAgICAgICAgY3h0Lm1lcmdlRXZhbHVhdGVkKHNjaEN4dCwgY29kZWdlbl8xLk5hbWUpO1xuICAgICAgICAgICAgcmV0dXJuIF92YWxpZDtcbiAgICAgICAgfVxuICAgICAgICBmdW5jdGlvbiBnZXRNYXBwaW5nKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgY29uc3Qgb25lT2ZNYXBwaW5nID0ge307XG4gICAgICAgICAgICBjb25zdCB0b3BSZXF1aXJlZCA9IGhhc1JlcXVpcmVkKHBhcmVudFNjaGVtYSk7XG4gICAgICAgICAgICBsZXQgdGFnUmVxdWlyZWQgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvbmVPZi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxldCBzY2ggPSBvbmVPZltpXTtcbiAgICAgICAgICAgICAgICBpZiAoKHNjaCA9PT0gbnVsbCB8fCBzY2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaC4kcmVmKSAmJiAhKDAsIHV0aWxfMS5zY2hlbWFIYXNSdWxlc0J1dFJlZikoc2NoLCBpdC5zZWxmLlJVTEVTKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWYgPSBzY2guJHJlZjtcbiAgICAgICAgICAgICAgICAgICAgc2NoID0gY29tcGlsZV8xLnJlc29sdmVSZWYuY2FsbChpdC5zZWxmLCBpdC5zY2hlbWFFbnYucm9vdCwgaXQuYmFzZUlkLCByZWYpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2NoIGluc3RhbmNlb2YgY29tcGlsZV8xLlNjaGVtYUVudilcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjaCA9IHNjaC5zY2hlbWE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY2ggPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyByZWZfZXJyb3JfMS5kZWZhdWx0KGl0Lm9wdHMudXJpUmVzb2x2ZXIsIGl0LmJhc2VJZCwgcmVmKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcFNjaCA9IChfYSA9IHNjaCA9PT0gbnVsbCB8fCBzY2ggPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNjaC5wcm9wZXJ0aWVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbdGFnTmFtZV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBwcm9wU2NoICE9IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkaXNjcmltaW5hdG9yOiBvbmVPZiBzdWJzY2hlbWFzIChvciByZWZlcmVuY2VkIHNjaGVtYXMpIG11c3QgaGF2ZSBcInByb3BlcnRpZXMvJHt0YWdOYW1lfVwiYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRhZ1JlcXVpcmVkID0gdGFnUmVxdWlyZWQgJiYgKHRvcFJlcXVpcmVkIHx8IGhhc1JlcXVpcmVkKHNjaCkpO1xuICAgICAgICAgICAgICAgIGFkZE1hcHBpbmdzKHByb3BTY2gsIGkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0YWdSZXF1aXJlZClcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGRpc2NyaW1pbmF0b3I6IFwiJHt0YWdOYW1lfVwiIG11c3QgYmUgcmVxdWlyZWRgKTtcbiAgICAgICAgICAgIHJldHVybiBvbmVPZk1hcHBpbmc7XG4gICAgICAgICAgICBmdW5jdGlvbiBoYXNSZXF1aXJlZCh7IHJlcXVpcmVkIH0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShyZXF1aXJlZCkgJiYgcmVxdWlyZWQuaW5jbHVkZXModGFnTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBhZGRNYXBwaW5ncyhzY2gsIGkpIHtcbiAgICAgICAgICAgICAgICBpZiAoc2NoLmNvbnN0KSB7XG4gICAgICAgICAgICAgICAgICAgIGFkZE1hcHBpbmcoc2NoLmNvbnN0LCBpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoc2NoLmVudW0pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0YWdWYWx1ZSBvZiBzY2guZW51bSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkTWFwcGluZyh0YWdWYWx1ZSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgZGlzY3JpbWluYXRvcjogXCJwcm9wZXJ0aWVzLyR7dGFnTmFtZX1cIiBtdXN0IGhhdmUgXCJjb25zdFwiIG9yIFwiZW51bVwiYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gYWRkTWFwcGluZyh0YWdWYWx1ZSwgaSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGFnVmFsdWUgIT0gXCJzdHJpbmdcIiB8fCB0YWdWYWx1ZSBpbiBvbmVPZk1hcHBpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBkaXNjcmltaW5hdG9yOiBcIiR7dGFnTmFtZX1cIiB2YWx1ZXMgbXVzdCBiZSB1bmlxdWUgc3RyaW5nc2ApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvbmVPZk1hcHBpbmdbdGFnVmFsdWVdID0gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZGVmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkRpc2NyRXJyb3IgPSB2b2lkIDA7XG52YXIgRGlzY3JFcnJvcjtcbihmdW5jdGlvbiAoRGlzY3JFcnJvcikge1xuICAgIERpc2NyRXJyb3JbXCJUYWdcIl0gPSBcInRhZ1wiO1xuICAgIERpc2NyRXJyb3JbXCJNYXBwaW5nXCJdID0gXCJtYXBwaW5nXCI7XG59KShEaXNjckVycm9yIHx8IChleHBvcnRzLkRpc2NyRXJyb3IgPSBEaXNjckVycm9yID0ge30pKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NaXNzaW5nUmVmRXJyb3IgPSBleHBvcnRzLlZhbGlkYXRpb25FcnJvciA9IGV4cG9ydHMuQ29kZUdlbiA9IGV4cG9ydHMuTmFtZSA9IGV4cG9ydHMubmlsID0gZXhwb3J0cy5zdHJpbmdpZnkgPSBleHBvcnRzLnN0ciA9IGV4cG9ydHMuXyA9IGV4cG9ydHMuS2V5d29yZEN4dCA9IGV4cG9ydHMuQWp2ID0gdm9pZCAwO1xuY29uc3QgY29yZV8xID0gcmVxdWlyZShcIi4vY29yZVwiKTtcbmNvbnN0IGRyYWZ0N18xID0gcmVxdWlyZShcIi4vdm9jYWJ1bGFyaWVzL2RyYWZ0N1wiKTtcbmNvbnN0IGRpc2NyaW1pbmF0b3JfMSA9IHJlcXVpcmUoXCIuL3ZvY2FidWxhcmllcy9kaXNjcmltaW5hdG9yXCIpO1xuY29uc3QgZHJhZnQ3TWV0YVNjaGVtYSA9IHJlcXVpcmUoXCIuL3JlZnMvanNvbi1zY2hlbWEtZHJhZnQtMDcuanNvblwiKTtcbmNvbnN0IE1FVEFfU1VQUE9SVF9EQVRBID0gW1wiL3Byb3BlcnRpZXNcIl07XG5jb25zdCBNRVRBX1NDSEVNQV9JRCA9IFwiaHR0cDovL2pzb24tc2NoZW1hLm9yZy9kcmFmdC0wNy9zY2hlbWFcIjtcbmNsYXNzIEFqdiBleHRlbmRzIGNvcmVfMS5kZWZhdWx0IHtcbiAgICBfYWRkVm9jYWJ1bGFyaWVzKCkge1xuICAgICAgICBzdXBlci5fYWRkVm9jYWJ1bGFyaWVzKCk7XG4gICAgICAgIGRyYWZ0N18xLmRlZmF1bHQuZm9yRWFjaCgodikgPT4gdGhpcy5hZGRWb2NhYnVsYXJ5KHYpKTtcbiAgICAgICAgaWYgKHRoaXMub3B0cy5kaXNjcmltaW5hdG9yKVxuICAgICAgICAgICAgdGhpcy5hZGRLZXl3b3JkKGRpc2NyaW1pbmF0b3JfMS5kZWZhdWx0KTtcbiAgICB9XG4gICAgX2FkZERlZmF1bHRNZXRhU2NoZW1hKCkge1xuICAgICAgICBzdXBlci5fYWRkRGVmYXVsdE1ldGFTY2hlbWEoKTtcbiAgICAgICAgaWYgKCF0aGlzLm9wdHMubWV0YSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgY29uc3QgbWV0YVNjaGVtYSA9IHRoaXMub3B0cy4kZGF0YVxuICAgICAgICAgICAgPyB0aGlzLiRkYXRhTWV0YVNjaGVtYShkcmFmdDdNZXRhU2NoZW1hLCBNRVRBX1NVUFBPUlRfREFUQSlcbiAgICAgICAgICAgIDogZHJhZnQ3TWV0YVNjaGVtYTtcbiAgICAgICAgdGhpcy5hZGRNZXRhU2NoZW1hKG1ldGFTY2hlbWEsIE1FVEFfU0NIRU1BX0lELCBmYWxzZSk7XG4gICAgICAgIHRoaXMucmVmc1tcImh0dHA6Ly9qc29uLXNjaGVtYS5vcmcvc2NoZW1hXCJdID0gTUVUQV9TQ0hFTUFfSUQ7XG4gICAgfVxuICAgIGRlZmF1bHRNZXRhKCkge1xuICAgICAgICByZXR1cm4gKHRoaXMub3B0cy5kZWZhdWx0TWV0YSA9XG4gICAgICAgICAgICBzdXBlci5kZWZhdWx0TWV0YSgpIHx8ICh0aGlzLmdldFNjaGVtYShNRVRBX1NDSEVNQV9JRCkgPyBNRVRBX1NDSEVNQV9JRCA6IHVuZGVmaW5lZCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuQWp2ID0gQWp2O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gQWp2O1xubW9kdWxlLmV4cG9ydHMuQWp2ID0gQWp2O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gQWp2O1xudmFyIHZhbGlkYXRlXzEgPSByZXF1aXJlKFwiLi9jb21waWxlL3ZhbGlkYXRlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiS2V5d29yZEN4dFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdmFsaWRhdGVfMS5LZXl3b3JkQ3h0OyB9IH0pO1xudmFyIGNvZGVnZW5fMSA9IHJlcXVpcmUoXCIuL2NvbXBpbGUvY29kZWdlblwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9cIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvZGVnZW5fMS5fOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3RyXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlZ2VuXzEuc3RyOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic3RyaW5naWZ5XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlZ2VuXzEuc3RyaW5naWZ5OyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibmlsXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlZ2VuXzEubmlsOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTmFtZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29kZWdlbl8xLk5hbWU7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb2RlR2VuXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2RlZ2VuXzEuQ29kZUdlbjsgfSB9KTtcbnZhciB2YWxpZGF0aW9uX2Vycm9yXzEgPSByZXF1aXJlKFwiLi9ydW50aW1lL3ZhbGlkYXRpb25fZXJyb3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJWYWxpZGF0aW9uRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHZhbGlkYXRpb25fZXJyb3JfMS5kZWZhdWx0OyB9IH0pO1xudmFyIHJlZl9lcnJvcl8xID0gcmVxdWlyZShcIi4vY29tcGlsZS9yZWZfZXJyb3JcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNaXNzaW5nUmVmRXJyb3JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlZl9lcnJvcl8xLmRlZmF1bHQ7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hanYuanMubWFwIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBhanZfMSA9IHJlcXVpcmUoXCJhanZcIik7XG5jb25zdCBjb2RlZ2VuXzEgPSByZXF1aXJlKFwiYWp2L2Rpc3QvY29tcGlsZS9jb2RlZ2VuXCIpO1xuY29uc3QgY29kZV8xID0gcmVxdWlyZShcImFqdi9kaXN0L2NvbXBpbGUvY29kZWdlbi9jb2RlXCIpO1xuY29uc3QgdmFsaWRhdGVfMSA9IHJlcXVpcmUoXCJhanYvZGlzdC9jb21waWxlL3ZhbGlkYXRlXCIpO1xuY29uc3QgZXJyb3JzXzEgPSByZXF1aXJlKFwiYWp2L2Rpc3QvY29tcGlsZS9lcnJvcnNcIik7XG5jb25zdCBuYW1lc18xID0gcmVxdWlyZShcImFqdi9kaXN0L2NvbXBpbGUvbmFtZXNcIik7XG5jb25zdCBrZXl3b3JkID0gXCJlcnJvck1lc3NhZ2VcIjtcbmNvbnN0IHVzZWQgPSBuZXcgYWp2XzEuTmFtZShcImVtVXNlZFwiKTtcbmNvbnN0IEtFWVdPUkRfUFJPUEVSVFlfUEFSQU1TID0ge1xuICAgIHJlcXVpcmVkOiBcIm1pc3NpbmdQcm9wZXJ0eVwiLFxuICAgIGRlcGVuZGVuY2llczogXCJwcm9wZXJ0eVwiLFxuICAgIGRlcGVuZGVudFJlcXVpcmVkOiBcInByb3BlcnR5XCIsXG59O1xuY29uc3QgSU5URVJQT0xBVElPTiA9IC9cXCRcXHtbXn1dK1xcfS87XG5jb25zdCBJTlRFUlBPTEFUSU9OX1JFUExBQ0UgPSAvXFwkXFx7KFtefV0rKVxcfS9nO1xuY29uc3QgRU1QVFlfU1RSID0gL15cIlwiXFxzKlxcK1xccyp8XFxzKlxcK1xccypcIlwiJC9nO1xuZnVuY3Rpb24gZXJyb3JNZXNzYWdlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBrZXl3b3JkLFxuICAgICAgICBzY2hlbWFUeXBlOiBbXCJzdHJpbmdcIiwgXCJvYmplY3RcIl0sXG4gICAgICAgIHBvc3Q6IHRydWUsXG4gICAgICAgIGNvZGUoY3h0KSB7XG4gICAgICAgICAgICBjb25zdCB7IGdlbiwgZGF0YSwgc2NoZW1hLCBzY2hlbWFWYWx1ZSwgaXQgfSA9IGN4dDtcbiAgICAgICAgICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIGNvbnN0IHNjaCA9IHNjaGVtYTtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlUGF0aCA9IGNvZGVnZW5fMS5zdHJDb25jYXQobmFtZXNfMS5kZWZhdWx0Lmluc3RhbmNlUGF0aCwgaXQuZXJyb3JQYXRoKTtcbiAgICAgICAgICAgIGdlbi5pZihhanZfMS5fIGAke25hbWVzXzEuZGVmYXVsdC5lcnJvcnN9ID4gMGAsICgpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHNjaCA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IFtrd2RQcm9wRXJyb3JzLCBrd2RFcnJvcnNdID0ga2V5d29yZEVycm9yc0NvbmZpZyhzY2gpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoa3dkRXJyb3JzKVxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc0tleXdvcmRFcnJvcnMoa3dkRXJyb3JzKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGt3ZFByb3BFcnJvcnMpXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzS2V5d29yZFByb3BFcnJvcnMoa3dkUHJvcEVycm9ycyk7XG4gICAgICAgICAgICAgICAgICAgIHByb2Nlc3NDaGlsZEVycm9ycyhjaGlsZEVycm9yc0NvbmZpZyhzY2gpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NoTWVzc2FnZSA9IHR5cGVvZiBzY2ggPT0gXCJzdHJpbmdcIiA/IHNjaCA6IHNjaC5fO1xuICAgICAgICAgICAgICAgIGlmIChzY2hNZXNzYWdlKVxuICAgICAgICAgICAgICAgICAgICBwcm9jZXNzQWxsRXJyb3JzKHNjaE1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucy5rZWVwRXJyb3JzKVxuICAgICAgICAgICAgICAgICAgICByZW1vdmVVc2VkRXJyb3JzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNoaWxkRXJyb3JzQ29uZmlnKHsgcHJvcGVydGllcywgaXRlbXMgfSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9ycyA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9ycy5wcm9wcyA9IHt9O1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHAgaW4gcHJvcGVydGllcylcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wcm9wc1twXSA9IFtdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaXRlbXMpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzLml0ZW1zID0ge307XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXRlbXMubGVuZ3RoOyBpKyspXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMuaXRlbXNbaV0gPSBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVycm9ycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIGtleXdvcmRFcnJvcnNDb25maWcoZW1TY2hlbWEpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJvcEVycm9ycztcbiAgICAgICAgICAgICAgICBsZXQgZXJyb3JzO1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgayBpbiBlbVNjaGVtYSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoayA9PT0gXCJwcm9wZXJ0aWVzXCIgfHwgayA9PT0gXCJpdGVtc1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGt3ZFNjaCA9IGVtU2NoZW1hW2tdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGt3ZFNjaCA9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wRXJyb3JzIHx8IChwcm9wRXJyb3JzID0ge30pO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyTWFwID0gKHByb3BFcnJvcnNba10gPSB7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHAgaW4ga3dkU2NoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVyck1hcFtwXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzIHx8IChlcnJvcnMgPSB7fSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnNba10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gW3Byb3BFcnJvcnMsIGVycm9yc107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBwcm9jZXNzS2V5d29yZEVycm9ycyhrd2RFcnJvcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBrd2RFcnJzID0gZ2VuLmNvbnN0KFwiZW1FcnJvcnNcIiwgYWp2XzEuc3RyaW5naWZ5KGt3ZEVycm9ycykpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlcyA9IGdlbi5jb25zdChcInRlbXBsYXRlc1wiLCBnZXRUZW1wbGF0ZXNDb2RlKGt3ZEVycm9ycywgc2NoZW1hKSk7XG4gICAgICAgICAgICAgICAgZ2VuLmZvck9mKFwiZXJyXCIsIG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCAoZXJyKSA9PiBnZW4uaWYobWF0Y2hLZXl3b3JkRXJyb3IoZXJyLCBrd2RFcnJzKSwgKCkgPT4gZ2VuLmNvZGUoYWp2XzEuXyBgJHtrd2RFcnJzfVske2Vycn0ua2V5d29yZF0ucHVzaCgke2Vycn0pYCkuYXNzaWduKGFqdl8xLl8gYCR7ZXJyfS4ke3VzZWR9YCwgdHJ1ZSkpKTtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNpbmdsZUVycm9yIH0gPSBvcHRpb25zO1xuICAgICAgICAgICAgICAgIGlmIChzaW5nbGVFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gZ2VuLmxldChcIm1lc3NhZ2VcIiwgYWp2XzEuXyBgXCJcImApO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJhbXNFcnJvcnMgPSBnZW4ubGV0KFwicGFyYW1zRXJyb3JzXCIsIGFqdl8xLl8gYFtdYCk7XG4gICAgICAgICAgICAgICAgICAgIGxvb3BFcnJvcnMoKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKG1lc3NhZ2UsICgpID0+IGdlbi5jb2RlKGFqdl8xLl8gYCR7bWVzc2FnZX0gKz0gJHt0eXBlb2Ygc2luZ2xlRXJyb3IgPT0gXCJzdHJpbmdcIiA/IHNpbmdsZUVycm9yIDogXCI7XCJ9YCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2VuLmNvZGUoYWp2XzEuXyBgJHttZXNzYWdlfSArPSAke2Vyck1lc3NhZ2Uoa2V5KX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24ocGFyYW1zRXJyb3JzLCBhanZfMS5fIGAke3BhcmFtc0Vycm9yc30uY29uY2F0KCR7a3dkRXJyc31bJHtrZXl9XSlgKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yc18xLnJlcG9ydEVycm9yKGN4dCwgeyBtZXNzYWdlLCBwYXJhbXM6IGFqdl8xLl8gYHtlcnJvcnM6ICR7cGFyYW1zRXJyb3JzfX1gIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbG9vcEVycm9ycygoa2V5KSA9PiBlcnJvcnNfMS5yZXBvcnRFcnJvcihjeHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGVyck1lc3NhZ2Uoa2V5KSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogYWp2XzEuXyBge2Vycm9yczogJHtrd2RFcnJzfVske2tleX1dfWAsXG4gICAgICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbG9vcEVycm9ycyhib2R5KSB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5mb3JJbihcImtleVwiLCBrd2RFcnJzLCAoa2V5KSA9PiBnZW4uaWYoYWp2XzEuXyBgJHtrd2RFcnJzfVske2tleX1dLmxlbmd0aGAsICgpID0+IGJvZHkoa2V5KSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcnJNZXNzYWdlKGtleSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWp2XzEuXyBgJHtrZXl9IGluICR7dGVtcGxhdGVzfSA/ICR7dGVtcGxhdGVzfVske2tleX1dKCkgOiAke3NjaGVtYVZhbHVlfVske2tleX1dYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBwcm9jZXNzS2V5d29yZFByb3BFcnJvcnMoa3dkUHJvcEVycm9ycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGt3ZEVycnMgPSBnZW4uY29uc3QoXCJlbUVycm9yc1wiLCBhanZfMS5zdHJpbmdpZnkoa3dkUHJvcEVycm9ycykpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlc0NvZGUgPSBbXTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGsgaW4ga3dkUHJvcEVycm9ycykge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZXNDb2RlLnB1c2goW1xuICAgICAgICAgICAgICAgICAgICAgICAgayxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFRlbXBsYXRlc0NvZGUoa3dkUHJvcEVycm9yc1trXSwgc2NoZW1hW2tdKSxcbiAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlcyA9IGdlbi5jb25zdChcInRlbXBsYXRlc1wiLCBnZW4ub2JqZWN0KC4uLnRlbXBsYXRlc0NvZGUpKTtcbiAgICAgICAgICAgICAgICBjb25zdCBrd2RQcm9wUGFyYW1zID0gZ2VuLnNjb3BlVmFsdWUoXCJvYmpcIiwge1xuICAgICAgICAgICAgICAgICAgICByZWY6IEtFWVdPUkRfUFJPUEVSVFlfUEFSQU1TLFxuICAgICAgICAgICAgICAgICAgICBjb2RlOiBhanZfMS5zdHJpbmdpZnkoS0VZV09SRF9QUk9QRVJUWV9QQVJBTVMpLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BQYXJhbSA9IGdlbi5sZXQoXCJlbVByb3BQYXJhbXNcIik7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyYW1zRXJyb3JzID0gZ2VuLmxldChcImVtUGFyYW1zRXJyb3JzXCIpO1xuICAgICAgICAgICAgICAgIGdlbi5mb3JPZihcImVyclwiLCBuYW1lc18xLmRlZmF1bHQudkVycm9ycywgKGVycikgPT4gZ2VuLmlmKG1hdGNoS2V5d29yZEVycm9yKGVyciwga3dkRXJycyksICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmFzc2lnbihwcm9wUGFyYW0sIGFqdl8xLl8gYCR7a3dkUHJvcFBhcmFtc31bJHtlcnJ9LmtleXdvcmRdYCk7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24ocGFyYW1zRXJyb3JzLCBhanZfMS5fIGAke2t3ZEVycnN9WyR7ZXJyfS5rZXl3b3JkXVske2Vycn0ucGFyYW1zWyR7cHJvcFBhcmFtfV1dYCk7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5pZihwYXJhbXNFcnJvcnMsICgpID0+IGdlbi5jb2RlKGFqdl8xLl8gYCR7cGFyYW1zRXJyb3JzfS5wdXNoKCR7ZXJyfSlgKS5hc3NpZ24oYWp2XzEuXyBgJHtlcnJ9LiR7dXNlZH1gLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIGdlbi5mb3JJbihcImtleVwiLCBrd2RFcnJzLCAoa2V5KSA9PiBnZW4uZm9ySW4oXCJrZXlQcm9wXCIsIGFqdl8xLl8gYCR7a3dkRXJyc31bJHtrZXl9XWAsIChrZXlQcm9wKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24ocGFyYW1zRXJyb3JzLCBhanZfMS5fIGAke2t3ZEVycnN9WyR7a2V5fV1bJHtrZXlQcm9wfV1gKTtcbiAgICAgICAgICAgICAgICAgICAgZ2VuLmlmKGFqdl8xLl8gYCR7cGFyYW1zRXJyb3JzfS5sZW5ndGhgLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXBsID0gZ2VuLmNvbnN0KFwidG1wbFwiLCBhanZfMS5fIGAke3RlbXBsYXRlc31bJHtrZXl9XSAmJiAke3RlbXBsYXRlc31bJHtrZXl9XVske2tleVByb3B9XWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzXzEucmVwb3J0RXJyb3IoY3h0LCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogYWp2XzEuXyBgJHt0bXBsfSA/ICR7dG1wbH0oKSA6ICR7c2NoZW1hVmFsdWV9WyR7a2V5fV1bJHtrZXlQcm9wfV1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtczogYWp2XzEuXyBge2Vycm9yczogJHtwYXJhbXNFcnJvcnN9fWAsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc0NoaWxkRXJyb3JzKGNoaWxkRXJyb3JzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBwcm9wcywgaXRlbXMgfSA9IGNoaWxkRXJyb3JzO1xuICAgICAgICAgICAgICAgIGlmICghcHJvcHMgJiYgIWl0ZW1zKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgY29uc3QgaXNPYmogPSBhanZfMS5fIGB0eXBlb2YgJHtkYXRhfSA9PSBcIm9iamVjdFwiYDtcbiAgICAgICAgICAgICAgICBjb25zdCBpc0FyciA9IGFqdl8xLl8gYEFycmF5LmlzQXJyYXkoJHtkYXRhfSlgO1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkRXJycyA9IGdlbi5sZXQoXCJlbUVycm9yc1wiKTtcbiAgICAgICAgICAgICAgICBsZXQgY2hpbGRLd2Q7XG4gICAgICAgICAgICAgICAgbGV0IGNoaWxkUHJvcDtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZXMgPSBnZW4ubGV0KFwidGVtcGxhdGVzXCIpO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wcyAmJiBpdGVtcykge1xuICAgICAgICAgICAgICAgICAgICBjaGlsZEt3ZCA9IGdlbi5sZXQoXCJlbUNoaWxkS3dkXCIpO1xuICAgICAgICAgICAgICAgICAgICBnZW4uaWYoaXNPYmopO1xuICAgICAgICAgICAgICAgICAgICBnZW4uaWYoaXNBcnIsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXQoaXRlbXMsIHNjaGVtYS5pdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKGNoaWxkS3dkLCBhanZfMS5zdHIgYGl0ZW1zYCk7XG4gICAgICAgICAgICAgICAgICAgIH0sICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXQocHJvcHMsIHNjaGVtYS5wcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24oY2hpbGRLd2QsIGFqdl8xLnN0ciBgcHJvcGVydGllc2ApO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRQcm9wID0gYWp2XzEuXyBgWyR7Y2hpbGRLd2R9XWA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5pZihpc0Fycik7XG4gICAgICAgICAgICAgICAgICAgIGluaXQoaXRlbXMsIHNjaGVtYS5pdGVtcyk7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkUHJvcCA9IGFqdl8xLl8gYC5pdGVtc2A7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3BzKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5pZihjb2RlZ2VuXzEuYW5kKGlzT2JqLCBjb2RlZ2VuXzEubm90KGlzQXJyKSkpO1xuICAgICAgICAgICAgICAgICAgICBpbml0KHByb3BzLCBzY2hlbWEucHJvcGVydGllcyk7XG4gICAgICAgICAgICAgICAgICAgIGNoaWxkUHJvcCA9IGFqdl8xLl8gYC5wcm9wZXJ0aWVzYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2VuLmZvck9mKFwiZXJyXCIsIG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCAoZXJyKSA9PiBpZk1hdGNoZXNDaGlsZEVycm9yKGVyciwgY2hpbGRFcnJzLCAoY2hpbGQpID0+IGdlbi5jb2RlKGFqdl8xLl8gYCR7Y2hpbGRFcnJzfVske2NoaWxkfV0ucHVzaCgke2Vycn0pYCkuYXNzaWduKGFqdl8xLl8gYCR7ZXJyfS4ke3VzZWR9YCwgdHJ1ZSkpKTtcbiAgICAgICAgICAgICAgICBnZW4uZm9ySW4oXCJrZXlcIiwgY2hpbGRFcnJzLCAoa2V5KSA9PiBnZW4uaWYoYWp2XzEuXyBgJHtjaGlsZEVycnN9WyR7a2V5fV0ubGVuZ3RoYCwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnNfMS5yZXBvcnRFcnJvcihjeHQsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGFqdl8xLl8gYCR7a2V5fSBpbiAke3RlbXBsYXRlc30gPyAke3RlbXBsYXRlc31bJHtrZXl9XSgpIDogJHtzY2hlbWFWYWx1ZX0ke2NoaWxkUHJvcH1bJHtrZXl9XWAsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IGFqdl8xLl8gYHtlcnJvcnM6ICR7Y2hpbGRFcnJzfVske2tleX1dfWAsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKGFqdl8xLl8gYCR7bmFtZXNfMS5kZWZhdWx0LnZFcnJvcnN9WyR7bmFtZXNfMS5kZWZhdWx0LmVycm9yc30tMV0uaW5zdGFuY2VQYXRoYCwgYWp2XzEuXyBgJHtpbnN0YW5jZVBhdGh9ICsgXCIvXCIgKyAke2tleX0ucmVwbGFjZSgvfi9nLCBcIn4wXCIpLnJlcGxhY2UoL1xcXFwvL2csIFwifjFcIilgKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgZ2VuLmVuZElmKCk7XG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaW5pdChjaGlsZHJlbiwgbXNncykge1xuICAgICAgICAgICAgICAgICAgICBnZW4uYXNzaWduKGNoaWxkRXJycywgYWp2XzEuc3RyaW5naWZ5KGNoaWxkcmVuKSk7XG4gICAgICAgICAgICAgICAgICAgIGdlbi5hc3NpZ24odGVtcGxhdGVzLCBnZXRUZW1wbGF0ZXNDb2RlKGNoaWxkcmVuLCBtc2dzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gcHJvY2Vzc0FsbEVycm9ycyhzY2hNZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJycyA9IGdlbi5jb25zdChcImVtRXJyc1wiLCBhanZfMS5fIGBbXWApO1xuICAgICAgICAgICAgICAgIGdlbi5mb3JPZihcImVyclwiLCBuYW1lc18xLmRlZmF1bHQudkVycm9ycywgKGVycikgPT4gZ2VuLmlmKG1hdGNoQW55RXJyb3IoZXJyKSwgKCkgPT4gZ2VuLmNvZGUoYWp2XzEuXyBgJHtlcnJzfS5wdXNoKCR7ZXJyfSlgKS5hc3NpZ24oYWp2XzEuXyBgJHtlcnJ9LiR7dXNlZH1gLCB0cnVlKSkpO1xuICAgICAgICAgICAgICAgIGdlbi5pZihhanZfMS5fIGAke2VycnN9Lmxlbmd0aGAsICgpID0+IGVycm9yc18xLnJlcG9ydEVycm9yKGN4dCwge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiB0ZW1wbGF0ZUV4cHIoc2NoTWVzc2FnZSksXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogYWp2XzEuXyBge2Vycm9yczogJHtlcnJzfX1gLFxuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlbW92ZVVzZWRFcnJvcnMoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJycyA9IGdlbi5jb25zdChcImVtRXJyc1wiLCBhanZfMS5fIGBbXWApO1xuICAgICAgICAgICAgICAgIGdlbi5mb3JPZihcImVyclwiLCBuYW1lc18xLmRlZmF1bHQudkVycm9ycywgKGVycikgPT4gZ2VuLmlmKGFqdl8xLl8gYCEke2Vycn0uJHt1c2VkfWAsICgpID0+IGdlbi5jb2RlKGFqdl8xLl8gYCR7ZXJyc30ucHVzaCgke2Vycn0pYCkpKTtcbiAgICAgICAgICAgICAgICBnZW4uYXNzaWduKG5hbWVzXzEuZGVmYXVsdC52RXJyb3JzLCBlcnJzKS5hc3NpZ24obmFtZXNfMS5kZWZhdWx0LmVycm9ycywgYWp2XzEuXyBgJHtlcnJzfS5sZW5ndGhgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1hdGNoS2V5d29yZEVycm9yKGVyciwga3dkRXJycykge1xuICAgICAgICAgICAgICAgIHJldHVybiBjb2RlZ2VuXzEuYW5kKGFqdl8xLl8gYCR7ZXJyfS5rZXl3b3JkICE9PSAke2tleXdvcmR9YCwgYWp2XzEuXyBgISR7ZXJyfS4ke3VzZWR9YCwgYWp2XzEuXyBgJHtlcnJ9Lmluc3RhbmNlUGF0aCA9PT0gJHtpbnN0YW5jZVBhdGh9YCwgYWp2XzEuXyBgJHtlcnJ9LmtleXdvcmQgaW4gJHtrd2RFcnJzfWAsIFxuICAgICAgICAgICAgICAgIC8vIFRPRE8gbWF0Y2ggdGhlIGVuZCBvZiB0aGUgc3RyaW5nP1xuICAgICAgICAgICAgICAgIGFqdl8xLl8gYCR7ZXJyfS5zY2hlbWFQYXRoLmluZGV4T2YoJHtpdC5lcnJTY2hlbWFQYXRofSkgPT09IDBgLCBhanZfMS5fIGAvXlxcXFwvW15cXFxcL10qJC8udGVzdCgke2Vycn0uc2NoZW1hUGF0aC5zbGljZSgke2l0LmVyclNjaGVtYVBhdGgubGVuZ3RofSkpYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBpZk1hdGNoZXNDaGlsZEVycm9yKGVyciwgY2hpbGRFcnJzLCB0aGVuQm9keSkge1xuICAgICAgICAgICAgICAgIGdlbi5pZihjb2RlZ2VuXzEuYW5kKGFqdl8xLl8gYCR7ZXJyfS5rZXl3b3JkICE9PSAke2tleXdvcmR9YCwgYWp2XzEuXyBgISR7ZXJyfS4ke3VzZWR9YCwgYWp2XzEuXyBgJHtlcnJ9Lmluc3RhbmNlUGF0aC5pbmRleE9mKCR7aW5zdGFuY2VQYXRofSkgPT09IDBgKSwgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjaGlsZFJlZ2V4ID0gZ2VuLnNjb3BlVmFsdWUoXCJwYXR0ZXJuXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZjogL15cXC8oW14vXSopKD86XFwvfCQpLyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6IGFqdl8xLl8gYG5ldyBSZWdFeHAoXCJeXFxcXFxcLyhbXi9dKikoPzpcXFxcXFwvfCQpXCIpYCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBnZW4uY29uc3QoXCJlbU1hdGNoZXNcIiwgYWp2XzEuXyBgJHtjaGlsZFJlZ2V4fS5leGVjKCR7ZXJyfS5pbnN0YW5jZVBhdGguc2xpY2UoJHtpbnN0YW5jZVBhdGh9Lmxlbmd0aCkpYCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gZ2VuLmNvbnN0KFwiZW1DaGlsZFwiLCBhanZfMS5fIGAke21hdGNoZXN9ICYmICR7bWF0Y2hlc31bMV0ucmVwbGFjZSgvfjEvZywgXCIvXCIpLnJlcGxhY2UoL34wL2csIFwiflwiKWApO1xuICAgICAgICAgICAgICAgICAgICBnZW4uaWYoYWp2XzEuXyBgJHtjaGlsZH0gIT09IHVuZGVmaW5lZCAmJiAke2NoaWxkfSBpbiAke2NoaWxkRXJyc31gLCAoKSA9PiB0aGVuQm9keShjaGlsZCkpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnVuY3Rpb24gbWF0Y2hBbnlFcnJvcihlcnIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29kZWdlbl8xLmFuZChhanZfMS5fIGAke2Vycn0ua2V5d29yZCAhPT0gJHtrZXl3b3JkfWAsIGFqdl8xLl8gYCEke2Vycn0uJHt1c2VkfWAsIGNvZGVnZW5fMS5vcihhanZfMS5fIGAke2Vycn0uaW5zdGFuY2VQYXRoID09PSAke2luc3RhbmNlUGF0aH1gLCBjb2RlZ2VuXzEuYW5kKGFqdl8xLl8gYCR7ZXJyfS5pbnN0YW5jZVBhdGguaW5kZXhPZigke2luc3RhbmNlUGF0aH0pID09PSAwYCwgYWp2XzEuXyBgJHtlcnJ9Lmluc3RhbmNlUGF0aFske2luc3RhbmNlUGF0aH0ubGVuZ3RoXSA9PT0gXCIvXCJgKSksIGFqdl8xLl8gYCR7ZXJyfS5zY2hlbWFQYXRoLmluZGV4T2YoJHtpdC5lcnJTY2hlbWFQYXRofSkgPT09IDBgLCBhanZfMS5fIGAke2Vycn0uc2NoZW1hUGF0aFske2l0LmVyclNjaGVtYVBhdGh9Lmxlbmd0aF0gPT09IFwiL1wiYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBnZXRUZW1wbGF0ZXNDb2RlKGtleXMsIG1zZ3MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZW1wbGF0ZXNDb2RlID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrIGluIGtleXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbXNnID0gbXNnc1trXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKElOVEVSUE9MQVRJT04udGVzdChtc2cpKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVzQ29kZS5wdXNoKFtrLCB0ZW1wbGF0ZUZ1bmMobXNnKV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZ2VuLm9iamVjdCguLi50ZW1wbGF0ZXNDb2RlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRlbXBsYXRlRXhwcihtc2cpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUlOVEVSUE9MQVRJT04udGVzdChtc2cpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWp2XzEuc3RyaW5naWZ5KG1zZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBjb2RlXzEuX0NvZGUoY29kZV8xLnNhZmVTdHJpbmdpZnkobXNnKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShJTlRFUlBPTEFUSU9OX1JFUExBQ0UsIChfcywgcHRyKSA9PiBgXCIgKyBKU09OLnN0cmluZ2lmeSgke3ZhbGlkYXRlXzEuZ2V0RGF0YShwdHIsIGl0KX0pICsgXCJgKVxuICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShFTVBUWV9TVFIsIFwiXCIpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZ1bmN0aW9uIHRlbXBsYXRlRnVuYyhtc2cpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWp2XzEuXyBgZnVuY3Rpb24oKXtyZXR1cm4gJHt0ZW1wbGF0ZUV4cHIobXNnKX19YDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgbWV0YVNjaGVtYToge1xuICAgICAgICAgICAgYW55T2Y6IFtcbiAgICAgICAgICAgICAgICB7IHR5cGU6IFwic3RyaW5nXCIgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6IHsgJHJlZjogXCIjLyRkZWZzL3N0cmluZ01hcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtczogeyAkcmVmOiBcIiMvJGRlZnMvc3RyaW5nTGlzdFwiIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZDogeyAkcmVmOiBcIiMvJGRlZnMvc3RyaW5nT3JNYXBcIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jaWVzOiB7ICRyZWY6IFwiIy8kZGVmcy9zdHJpbmdPck1hcFwiIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7IHR5cGU6IFwic3RyaW5nXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICRkZWZzOiB7XG4gICAgICAgICAgICAgICAgc3RyaW5nTWFwOiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwib2JqZWN0XCIsXG4gICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiB7IHR5cGU6IFwic3RyaW5nXCIgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN0cmluZ09yTWFwOiB7XG4gICAgICAgICAgICAgICAgICAgIGFueU9mOiBbeyB0eXBlOiBcInN0cmluZ1wiIH0sIHsgJHJlZjogXCIjLyRkZWZzL3N0cmluZ01hcFwiIH1dLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3RyaW5nTGlzdDogeyB0eXBlOiBcImFycmF5XCIsIGl0ZW1zOiB7IHR5cGU6IFwic3RyaW5nXCIgfSB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICB9O1xufVxuY29uc3QgYWp2RXJyb3JzID0gKGFqdiwgb3B0aW9ucyA9IHt9KSA9PiB7XG4gICAgaWYgKCFhanYub3B0cy5hbGxFcnJvcnMpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImFqdi1lcnJvcnM6IEFqdiBvcHRpb24gYWxsRXJyb3JzIG11c3QgYmUgdHJ1ZVwiKTtcbiAgICBpZiAoYWp2Lm9wdHMuanNQcm9wZXJ0eVN5bnRheCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJhanYtZXJyb3JzOiBhanYgb3B0aW9uIGpzUHJvcGVydHlTeW50YXggaXMgbm90IHN1cHBvcnRlZFwiKTtcbiAgICB9XG4gICAgcmV0dXJuIGFqdi5hZGRLZXl3b3JkKGVycm9yTWVzc2FnZShvcHRpb25zKSk7XG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gYWp2RXJyb3JzO1xubW9kdWxlLmV4cG9ydHMgPSBhanZFcnJvcnM7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gYWp2RXJyb3JzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIiwiKChlLHQpPT57XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/dChleHBvcnRzKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtcImV4cG9ydHNcIl0sdCk6dCgoZT1cInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsVGhpcz9nbG9iYWxUaGlzOmV8fHNlbGYpLmNvbXBvc2V2ZXJ0ZXI9e30pfSkodGhpcyxmdW5jdGlvbihlKXtmdW5jdGlvbiBuKGUsdCxyKXsodD0oZT0+XCJzeW1ib2xcIj09dHlwZW9mKGU9KChlLHQpPT57aWYoXCJvYmplY3RcIiE9dHlwZW9mIGV8fCFlKXJldHVybiBlO3ZhciByPWVbU3ltYm9sLnRvUHJpbWl0aXZlXTtpZih2b2lkIDA9PT1yKXJldHVybihcInN0cmluZ1wiPT09dD9TdHJpbmc6TnVtYmVyKShlKTtpZihcIm9iamVjdFwiIT10eXBlb2Yocj1yLmNhbGwoZSx0fHxcImRlZmF1bHRcIikpKXJldHVybiByO3Rocm93IG5ldyBUeXBlRXJyb3IoXCJAQHRvUHJpbWl0aXZlIG11c3QgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlLlwiKX0pKGUsXCJzdHJpbmdcIikpP2U6ZStcIlwiKSh0KSlpbiBlP09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLHQse3ZhbHVlOnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KTplW3RdPXJ9ZnVuY3Rpb24gcyh0LGUpe3ZhciByLGk9T2JqZWN0LmtleXModCk7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMmJihyPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCksZSYmKHI9ci5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCxlKS5lbnVtZXJhYmxlfSkpLGkucHVzaC5hcHBseShpLHIpKSxpfWZ1bmN0aW9uIHAoZSx0KXtyZXR1cm4ocD1PYmplY3Quc2V0UHJvdG90eXBlT2Y/T2JqZWN0LnNldFByb3RvdHlwZU9mLmJpbmQoKTpmdW5jdGlvbihlLHQpe3JldHVybiBlLl9fcHJvdG9fXz10LGV9KShlLHQpfWZ1bmN0aW9uIHIoKXtyPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG5ldyBpKGUsdm9pZCAwLHQpfTt2YXIgbz1SZWdFeHAucHJvdG90eXBlLHM9bmV3IFdlYWtNYXA7ZnVuY3Rpb24gaShlLHQscil7dD1SZWdFeHAoZSx0KTtyZXR1cm4gcy5zZXQodCxyfHxzLmdldChlKSkscCh0LGkucHJvdG90eXBlKX1mdW5jdGlvbiBuKG8sZSl7dmFyIG49cy5nZXQoZSk7cmV0dXJuIE9iamVjdC5rZXlzKG4pLnJlZHVjZShmdW5jdGlvbihlLHQpe3ZhciByPW5bdF07aWYoXCJudW1iZXJcIj09dHlwZW9mIHIpZVt0XT1vW3JdO2Vsc2V7Zm9yKHZhciBpPTA7dm9pZCAwPT09b1tyW2ldXSYmaSsxPHIubGVuZ3RoOylpKys7ZVt0XT1vW3JbaV1dfXJldHVybiBlfSxPYmplY3QuY3JlYXRlKG51bGwpKX12YXIgZT1pLHQ9UmVnRXhwO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQmJm51bGwhPT10KXRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtyZXR1cm4gZS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh0JiZ0LnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOmUsd3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLFwicHJvdG90eXBlXCIse3dyaXRhYmxlOiExfSksdCYmcChlLHQpLGkucHJvdG90eXBlLmV4ZWM9ZnVuY3Rpb24oZSl7dmFyIHQsZT1vLmV4ZWMuY2FsbCh0aGlzLGUpO3JldHVybiBlJiYoZS5ncm91cHM9bihlLHRoaXMpLHQ9ZS5pbmRpY2VzKSYmKHQuZ3JvdXBzPW4odCx0aGlzKSksZX0saS5wcm90b3R5cGVbU3ltYm9sLnJlcGxhY2VdPWZ1bmN0aW9uKGUsdCl7dmFyIHIsaTtyZXR1cm5cInN0cmluZ1wiPT10eXBlb2YgdD8ocj1zLmdldCh0aGlzKSxvW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsZSx0LnJlcGxhY2UoL1xcJDwoW14+XSspPi9nLGZ1bmN0aW9uKGUsdCl7dD1yW3RdO3JldHVyblwiJFwiKyhBcnJheS5pc0FycmF5KHQpP3Quam9pbihcIiRcIik6dCl9KSkpOlwiZnVuY3Rpb25cIj09dHlwZW9mIHQ/KGk9dGhpcyxvW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsZSxmdW5jdGlvbigpe3ZhciBlPWFyZ3VtZW50cztyZXR1cm5cIm9iamVjdFwiIT10eXBlb2YgZVtlLmxlbmd0aC0xXSYmKGU9W10uc2xpY2UuY2FsbChlKSkucHVzaChuKGUsaSkpLHQuYXBwbHkodGhpcyxlKX0pKTpvW1N5bWJvbC5yZXBsYWNlXS5jYWxsKHRoaXMsZSx0KX0sci5hcHBseSh0aGlzLGFyZ3VtZW50cyl9bGV0IGE9KGUsdCxyKT0+e2xldCBpPWU7dmFyIG89dC5zcGxpdChcIi9cIiksbj1vLmxlbmd0aDtmb3IobGV0IGU9MDtlPG4tMTtlKz0xKXt2YXIgcz1vW2VdO2lbc118fChpW3NdPXt9KSxpPWlbc119aVtvW24tMV1dPXJ9O2Z1bmN0aW9uIGModCxyKXtPYmplY3Qua2V5cyh0W3JdfHxbXSkuZm9yRWFjaChlPT57ZT10W3JdW2VdO2UmJmUuZXh0ZXJuYWwmJmUuZXh0ZXJuYWwubmFtZSYmKGUubmFtZT1lLmV4dGVybmFsLm5hbWUsZS5leHRlcm5hbD0hMCl9KX1sZXQgaT1yKC9eKChbQS1aYS16XTpcXC98W0EtWmEtel06XFxcXCk/Lio/KTooKFtBLVphLXpdOlxcL3xbQS1aYS16XTpbXFxcXF0pPy4qPykoPzo6KChyd3xyb3x6fFopKCwocnd8cm98enxaKSkqKSk/JC8se3ZvbHVtZToxLGNvbnRhaW5lcl9wYXRoOjMsZmxhZ3M6NX0pLG89ZT0+e2U9ZS5tYXRjaChpKTtyZXR1cm4gbnVsbD09PWU/XCJcIjplLmdyb3Vwcy52b2x1bWV9LGw9ZT0+ZSYmIWUuaW5jbHVkZXMoXCIvXCIpJiYhZS5pbmNsdWRlcyhcIlxcXFxcIikmJiFlLmluY2x1ZGVzKFwiflwiKSYmIWUuaW5jbHVkZXMoXCIuXCIpJiYhZS5pbmNsdWRlcyhcIiRcIiksZD1lPT57dmFyIHQ9ZS5tYXRjaChpKTtyZXR1cm4gbnVsbD09PXR8fChlPXt0eXBlOmwodC5ncm91cHMudm9sdW1lKT9cInZvbHVtZVwiOlwiYmluZFwiLHNvdXJjZTp0Lmdyb3Vwcy52b2x1bWUsdGFyZ2V0OnQuZ3JvdXBzLmNvbnRhaW5lcl9wYXRofSwodD0odC5ncm91cHMuZmxhZ3N8fFwiXCIpLnJlcGxhY2UoL1xccysvLFwiXCIpLnNwbGl0KFwiLFwiKSkuaW5jbHVkZXMoXCJyb1wiKSYmKGUudm9sdW1lPXtub2NvcHk6ITB9KSx0LmluY2x1ZGVzKFwielwiKT9lLmJpbmQ9e3NlbGludXg6XCJ6XCJ9OnQuaW5jbHVkZXMoXCJaXCIpJiYoZS5iaW5kPXtzZWxpbnV4OlwiWlwifSkpLGV9LHQ9cmVxdWlyZShcInlhbWxcIik7Y2xhc3MgeSBleHRlbmRzIEVycm9ye2NvbnN0cnVjdG9yKGUsdCxyKXtzdXBlcihlKSx0aGlzLmxpbmVzPXQsdGhpcy5kZXRhaWxzPXIsdGhpcy5uYW1lPVwiWWFtbFN5bnRheEVycm9yXCJ9fWxldCBtPWU9PntlPXQucGFyc2VEb2N1bWVudChlLHtwcmV0dHlFcnJvcnM6ITB9KTtsZXQgaT1bXSxvPVtdO2lmKGUuZXJyb3JzLmZvckVhY2goKHIsZSk9Pnt2YXIgdD1yLm1lc3NhZ2Uuc3BsaXQoXCI6XFxuXCIpWzBdO28ucHVzaCh7bGluZTpyLmxpbmVQb3NbMF0ubGluZSxtZXNzYWdlOnQscG9zOnIubGluZVBvc30pLEFycmF5LmZyb20oe2xlbmd0aDpyLmxpbmVQb3M/ci5saW5lUG9zWzFdLmxpbmUtci5saW5lUG9zWzBdLmxpbmU6MX0sKGUsdCk9PnIubGluZVBvc1swXS5saW5lK3QpLmZvckVhY2goZT0+aS5wdXNoKGUpKX0pLDA8by5sZW5ndGgpdGhyb3cgbmV3IHkoby5tYXAoZT0+ZS5tZXNzYWdlKS5qb2luKFwiXFxuXCIpLGksbyl9LHU9ZT0+KG0oZSksdC5wYXJzZShlLHtpbnRBc0JpZ0ludDohMH0pKSxmPXIoL14oKFxcWz8oW2EtZkEtRlxcZC46XSspXFxdPzopPyhbXFxkXSooLVtcXGRdKyk/KTopPyhbXFxkXSsoLVtcXGRdKyk/KShcXC8oKHVkcHx0Y3B8c2N0cCkpKT8kLyx7aXBfcGFydDoyLGlwOjMsaG9zdDo0LGNvbnRhaW5lcjo2LHByb3RvX3BhcnQ6OCxwcm90bzo5fSksZz1lPT57bGV0IG89ZS5tYXRjaChmKTtpZihudWxsPT09bylyZXR1cm5bZV07ZT1vLmdyb3Vwcy5jb250YWluZXI7aWYoZSYmZS5pbmNsdWRlcyhcIi1cIikpe3ZhciBuPWUuc3BsaXQoXCItXCIpO2xldCB0PXBhcnNlSW50KG5bMF0sMTApO3ZhciBuPXBhcnNlSW50KG5bMV0sMTApLHM9by5ncm91cHMuaG9zdCxzPShzfHxlKS5zcGxpdChcIi1cIik7bGV0IHI9cGFyc2VJbnQoc1swXSwxMCksaT1bXTtyZXR1cm4gQXJyYXkuZnJvbSh7bGVuZ3RoOm4tdCsxfSwoZSx0KT0+dCkuZm9yRWFjaChlPT57aT1bLi4uaSwuLi5nKFwiXCIuY29uY2F0KG8uZ3JvdXBzLmlwX3BhcnR8fFwiXCIpLmNvbmNhdChyK2UsXCI6XCIpLmNvbmNhdCh0K2UpLmNvbmNhdChvLmdyb3Vwcy5wcm90b19wYXJ0fHxcIlwiKSldfSksaX1zPXt0YXJnZXQ6cGFyc2VJbnQoZSwxMCl9O3JldHVybiBvLmdyb3Vwcy5pcCYmKHMuaG9zdF9pcD1vLmdyb3Vwcy5pcCksby5ncm91cHMuaG9zdCYmKHMucHVibGlzaGVkPW8uZ3JvdXBzLmhvc3QpLG8uZ3JvdXBzLnByb3RvJiYocy5wcm90b2NvbD1vLmdyb3Vwcy5wcm90bykscy5tb2RlPVwiaW5ncmVzc1wiLFtzXX0sXz1yZXF1aXJlKFwieWFtbFwiKSx2PShlLHQpPT4oYihlLHQpLF8uc3RyaW5naWZ5KGUse2luZGVudDoodHx8e30pLmluZGVudHx8NCxzaW1wbGVLZXlzOiEwLG51bGxTdHI6XCJcIn0pLnRyaW0oKSksYj0oZSx0KT0+KHQmJnQuZXhwYW5kVm9sdW1lcyYmT2JqZWN0LnZhbHVlcyhlLnNlcnZpY2VzKS5mb3JFYWNoKHQ9PntpZih0LnZvbHVtZXMpZm9yKGxldCBlPTA7ZTx0LnZvbHVtZXMubGVuZ3RoO2UrPTEpXCJzdHJpbmdcIj09dHlwZW9mIHQudm9sdW1lc1tlXSYmKHQudm9sdW1lc1tlXT1kKHQudm9sdW1lc1tlXSkpfSksdCYmdC5leHBhbmRQb3J0cyYmT2JqZWN0LnZhbHVlcyhlLnNlcnZpY2VzKS5mb3JFYWNoKHI9PntpZihyLnBvcnRzKXtsZXQgdD1bXTtmb3IobGV0IGU9MDtlPHIucG9ydHMubGVuZ3RoO2UrPTEpdD1cInN0cmluZ1wiPT10eXBlb2Ygci5wb3J0c1tlXT9bLi4udCwuLi5nKHIucG9ydHNbZV0pXTpbLi4udCxyLnBvcnRzW2VdXTtyLnBvcnRzPXR9fSksZSksaD17JGlkOlwiY29tcG9zZV9zcGVjLmpzb25cIix0eXBlOlwib2JqZWN0XCIsdGl0bGU6XCJDb21wb3NlIFNwZWNpZmljYXRpb25cIixkZXNjcmlwdGlvbjpcIlRoZSBDb21wb3NlIGZpbGUgaXMgYSBZQU1MIGZpbGUgZGVmaW5pbmcgYSBtdWx0aS1jb250YWluZXJzIGJhc2VkIGFwcGxpY2F0aW9uLlwiLHByb3BlcnRpZXM6e3ZlcnNpb246e3R5cGU6XCJzdHJpbmdcIixkZXNjcmlwdGlvbjpcImRlY2xhcmVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBpZ25vcmVkLlwifSxuYW1lOnt0eXBlOlwic3RyaW5nXCIscGF0dGVybjpcIl5bYS16MC05XVthLXowLTlfLV0qJFwiLGRlc2NyaXB0aW9uOlwiZGVmaW5lIHRoZSBDb21wb3NlIHByb2plY3QgbmFtZSwgdW50aWwgdXNlciBkZWZpbmVzIG9uZSBleHBsaWNpdGx5LlwifSxpbmNsdWRlOnt0eXBlOlwiYXJyYXlcIixpdGVtczp7dHlwZTpcIm9iamVjdFwiLCRyZWY6XCIjL2RlZmluaXRpb25zL2luY2x1ZGVcIn0sZGVzY3JpcHRpb246XCJjb21wb3NlIHN1Yi1wcm9qZWN0cyB0byBiZSBpbmNsdWRlZC5cIn0sc2VydmljZXM6eyRpZDpcIiMvcHJvcGVydGllcy9zZXJ2aWNlc1wiLHR5cGU6XCJvYmplY3RcIixwYXR0ZXJuUHJvcGVydGllczp7XCJeW2EtekEtWjAtOS5fLV0rJFwiOnskcmVmOlwiIy9kZWZpbml0aW9ucy9zZXJ2aWNlXCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMX0sbmV0d29ya3M6eyRpZDpcIiMvcHJvcGVydGllcy9uZXR3b3Jrc1wiLHR5cGU6XCJvYmplY3RcIixwYXR0ZXJuUHJvcGVydGllczp7XCJeW2EtekEtWjAtOS5fLV0rJFwiOnskcmVmOlwiIy9kZWZpbml0aW9ucy9uZXR3b3JrXCJ9fX0sdm9sdW1lczp7JGlkOlwiIy9wcm9wZXJ0aWVzL3ZvbHVtZXNcIix0eXBlOlwib2JqZWN0XCIscGF0dGVyblByb3BlcnRpZXM6e1wiXlthLXpBLVowLTkuXy1dKyRcIjp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvdm9sdW1lXCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMX0sc2VjcmV0czp7JGlkOlwiIy9wcm9wZXJ0aWVzL3NlY3JldHNcIix0eXBlOlwib2JqZWN0XCIscGF0dGVyblByb3BlcnRpZXM6e1wiXlthLXpBLVowLTkuXy1dKyRcIjp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvc2VjcmV0XCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMX0sY29uZmlnczp7JGlkOlwiIy9wcm9wZXJ0aWVzL2NvbmZpZ3NcIix0eXBlOlwib2JqZWN0XCIscGF0dGVyblByb3BlcnRpZXM6e1wiXlthLXpBLVowLTkuXy1dKyRcIjp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvY29uZmlnXCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMX19LHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl54LVwiOnt9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxkZWZpbml0aW9uczp7c2VydmljZTp7JGlkOlwiIy9kZWZpbml0aW9ucy9zZXJ2aWNlXCIsdHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e2RldmVsb3A6eyRyZWY6XCIjL2RlZmluaXRpb25zL2RldmVsb3BtZW50XCJ9LGRlcGxveTp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvZGVwbG95bWVudFwifSxhbm5vdGF0aW9uczp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvbGlzdF9vcl9kaWN0XCJ9LGF0dGFjaDp7dHlwZTpcImJvb2xlYW5cIn0sYnVpbGQ6e29uZU9mOlt7dHlwZTpcInN0cmluZ1wifSx7dHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e2NvbnRleHQ6e3R5cGU6XCJzdHJpbmdcIn0sZG9ja2VyZmlsZTp7dHlwZTpcInN0cmluZ1wifSxkb2NrZXJmaWxlX2lubGluZTp7dHlwZTpcInN0cmluZ1wifSxhcmdzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9saXN0X29yX2RpY3RcIn0sc3NoOnskcmVmOlwiIy9kZWZpbml0aW9ucy9saXN0X29yX2RpY3RcIn0sbGFiZWxzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9saXN0X29yX2RpY3RcIn0sY2FjaGVfZnJvbTp7dHlwZTpcImFycmF5XCIsaXRlbXM6e3R5cGU6XCJzdHJpbmdcIn19LGNhY2hlX3RvOnt0eXBlOlwiYXJyYXlcIixpdGVtczp7dHlwZTpcInN0cmluZ1wifX0sbm9fY2FjaGU6e3R5cGU6XCJib29sZWFuXCJ9LGFkZGl0aW9uYWxfY29udGV4dHM6eyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb3JfZGljdFwifSxuZXR3b3JrOnt0eXBlOlwic3RyaW5nXCJ9LHB1bGw6e3R5cGU6XCJib29sZWFuXCJ9LHRhcmdldDp7dHlwZTpcInN0cmluZ1wifSxzaG1fc2l6ZTp7dHlwZTpbXCJpbnRlZ2VyXCIsXCJzdHJpbmdcIl19LGV4dHJhX2hvc3RzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9saXN0X29yX2RpY3RcIn0saXNvbGF0aW9uOnt0eXBlOlwic3RyaW5nXCJ9LHByaXZpbGVnZWQ6e3R5cGU6XCJib29sZWFuXCJ9LHNlY3JldHM6eyRyZWY6XCIjL2RlZmluaXRpb25zL3NlcnZpY2VfY29uZmlnX29yX3NlY3JldFwifSx0YWdzOnt0eXBlOlwiYXJyYXlcIixpdGVtczp7dHlwZTpcInN0cmluZ1wifX0sdWxpbWl0czp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvdWxpbWl0c1wifSxwbGF0Zm9ybXM6e3R5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOlwic3RyaW5nXCJ9fX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fV19LGJsa2lvX2NvbmZpZzp7dHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e2RldmljZV9yZWFkX2Jwczp7dHlwZTpcImFycmF5XCIsaXRlbXM6eyRyZWY6XCIjL2RlZmluaXRpb25zL2Jsa2lvX2xpbWl0XCJ9fSxkZXZpY2VfcmVhZF9pb3BzOnt0eXBlOlwiYXJyYXlcIixpdGVtczp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvYmxraW9fbGltaXRcIn19LGRldmljZV93cml0ZV9icHM6e3R5cGU6XCJhcnJheVwiLGl0ZW1zOnskcmVmOlwiIy9kZWZpbml0aW9ucy9ibGtpb19saW1pdFwifX0sZGV2aWNlX3dyaXRlX2lvcHM6e3R5cGU6XCJhcnJheVwiLGl0ZW1zOnskcmVmOlwiIy9kZWZpbml0aW9ucy9ibGtpb19saW1pdFwifX0sd2VpZ2h0Ont0eXBlOlwiaW50ZWdlclwifSx3ZWlnaHRfZGV2aWNlOnt0eXBlOlwiYXJyYXlcIixpdGVtczp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvYmxraW9fd2VpZ2h0XCJ9fX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITF9LGNhcF9hZGQ6e3R5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOlwic3RyaW5nXCJ9LHVuaXF1ZUl0ZW1zOiEwfSxjYXBfZHJvcDp7dHlwZTpcImFycmF5XCIsaXRlbXM6e3R5cGU6XCJzdHJpbmdcIn0sdW5pcXVlSXRlbXM6ITB9LGNncm91cDp7dHlwZTpcInN0cmluZ1wiLGVudW06W1wiaG9zdFwiLFwicHJpdmF0ZVwiXX0sY2dyb3VwX3BhcmVudDp7dHlwZTpcInN0cmluZ1wifSxjb21tYW5kOnskcmVmOlwiIy9kZWZpbml0aW9ucy9jb21tYW5kXCJ9LGNvbmZpZ3M6eyRyZWY6XCIjL2RlZmluaXRpb25zL3NlcnZpY2VfY29uZmlnX29yX3NlY3JldFwifSxjb250YWluZXJfbmFtZTp7dHlwZTpcInN0cmluZ1wifSxjcHVfY291bnQ6e3R5cGU6XCJpbnRlZ2VyXCIsbWluaW11bTowfSxjcHVfcGVyY2VudDp7dHlwZTpcImludGVnZXJcIixtaW5pbXVtOjAsbWF4aW11bToxMDB9LGNwdV9zaGFyZXM6e3R5cGU6W1wibnVtYmVyXCIsXCJzdHJpbmdcIl19LGNwdV9xdW90YTp7dHlwZTpbXCJudW1iZXJcIixcInN0cmluZ1wiXX0sY3B1X3BlcmlvZDp7dHlwZTpbXCJudW1iZXJcIixcInN0cmluZ1wiXX0sY3B1X3J0X3BlcmlvZDp7dHlwZTpbXCJudW1iZXJcIixcInN0cmluZ1wiXX0sY3B1X3J0X3J1bnRpbWU6e3R5cGU6W1wibnVtYmVyXCIsXCJzdHJpbmdcIl19LGNwdXM6e3R5cGU6W1wibnVtYmVyXCIsXCJzdHJpbmdcIl19LGNwdXNldDp7dHlwZTpcInN0cmluZ1wifSxjcmVkZW50aWFsX3NwZWM6e3R5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOntjb25maWc6e3R5cGU6XCJzdHJpbmdcIn0sZmlsZTp7dHlwZTpcInN0cmluZ1wifSxyZWdpc3RyeTp7dHlwZTpcInN0cmluZ1wifX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fSxkZXBlbmRzX29uOntvbmVPZjpbeyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb2Zfc3RyaW5nc1wifSx7dHlwZTpcIm9iamVjdFwiLGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl5bYS16QS1aMC05Ll8tXSskXCI6e3R5cGU6XCJvYmplY3RcIixhZGRpdGlvbmFsUHJvcGVydGllczohMSxwcm9wZXJ0aWVzOntyZXN0YXJ0Ont0eXBlOlwiYm9vbGVhblwifSxyZXF1aXJlZDp7dHlwZTpcImJvb2xlYW5cIixkZWZhdWx0OiEwfSxjb25kaXRpb246e3R5cGU6XCJzdHJpbmdcIixlbnVtOltcInNlcnZpY2Vfc3RhcnRlZFwiLFwic2VydmljZV9oZWFsdGh5XCIsXCJzZXJ2aWNlX2NvbXBsZXRlZF9zdWNjZXNzZnVsbHlcIl19fSxyZXF1aXJlZDpbXCJjb25kaXRpb25cIl19fX1dfSxkZXZpY2VfY2dyb3VwX3J1bGVzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9saXN0X29mX3N0cmluZ3NcIn0sZGV2aWNlczp7dHlwZTpcImFycmF5XCIsaXRlbXM6e3R5cGU6XCJzdHJpbmdcIn0sdW5pcXVlSXRlbXM6ITB9LGRuczp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvc3RyaW5nX29yX2xpc3RcIn0sZG5zX29wdDp7dHlwZTpcImFycmF5XCIsaXRlbXM6e3R5cGU6XCJzdHJpbmdcIn0sdW5pcXVlSXRlbXM6ITB9LGRuc19zZWFyY2g6eyRyZWY6XCIjL2RlZmluaXRpb25zL3N0cmluZ19vcl9saXN0XCJ9LGRvbWFpbm5hbWU6e3R5cGU6XCJzdHJpbmdcIn0sZW50cnlwb2ludDp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvY29tbWFuZFwifSxlbnZfZmlsZTp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvc3RyaW5nX29yX2xpc3RcIn0sZW52aXJvbm1lbnQ6eyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb3JfZGljdFwifSxleHBvc2U6e3R5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOltcInN0cmluZ1wiLFwibnVtYmVyXCJdLGZvcm1hdDpcImV4cG9zZVwifSx1bmlxdWVJdGVtczohMH0sZXh0ZW5kczp7b25lT2Y6W3t0eXBlOlwic3RyaW5nXCJ9LHt0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7c2VydmljZTp7dHlwZTpcInN0cmluZ1wifSxmaWxlOnt0eXBlOlwic3RyaW5nXCJ9fSxyZXF1aXJlZDpbXCJzZXJ2aWNlXCJdLGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExfV19LGV4dGVybmFsX2xpbmtzOnt0eXBlOlwiYXJyYXlcIixpdGVtczp7dHlwZTpcInN0cmluZ1wifSx1bmlxdWVJdGVtczohMH0sZXh0cmFfaG9zdHM6eyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb3JfZGljdFwifSxncm91cF9hZGQ6e3R5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOltcInN0cmluZ1wiLFwibnVtYmVyXCJdfSx1bmlxdWVJdGVtczohMH0saGVhbHRoY2hlY2s6eyRyZWY6XCIjL2RlZmluaXRpb25zL2hlYWx0aGNoZWNrXCJ9LGhvc3RuYW1lOnt0eXBlOlwic3RyaW5nXCJ9LGltYWdlOnt0eXBlOlwic3RyaW5nXCJ9LGluaXQ6e3R5cGU6XCJib29sZWFuXCJ9LGlwYzp7dHlwZTpcInN0cmluZ1wifSxpc29sYXRpb246e3R5cGU6XCJzdHJpbmdcIn0sbGFiZWxzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9saXN0X29yX2RpY3RcIn0sbGlua3M6e3R5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOlwic3RyaW5nXCJ9LHVuaXF1ZUl0ZW1zOiEwfSxsb2dnaW5nOnt0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7ZHJpdmVyOnt0eXBlOlwic3RyaW5nXCJ9LG9wdGlvbnM6e3R5cGU6XCJvYmplY3RcIixwYXR0ZXJuUHJvcGVydGllczp7XCJeLiskXCI6e3R5cGU6W1wic3RyaW5nXCIsXCJudW1iZXJcIixcIm51bGxcIl19fX19LGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl54LVwiOnt9fX0sbWFjX2FkZHJlc3M6e3R5cGU6XCJzdHJpbmdcIn0sbWVtX2xpbWl0Ont0eXBlOltcIm51bWJlclwiLFwic3RyaW5nXCJdfSxtZW1fcmVzZXJ2YXRpb246e3R5cGU6W1wic3RyaW5nXCIsXCJpbnRlZ2VyXCJdfSxtZW1fc3dhcHBpbmVzczp7dHlwZTpcImludGVnZXJcIn0sbWVtc3dhcF9saW1pdDp7dHlwZTpbXCJudW1iZXJcIixcInN0cmluZ1wiXX0sbmV0d29ya19tb2RlOnt0eXBlOlwic3RyaW5nXCJ9LG5ldHdvcmtzOntvbmVPZjpbeyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb2Zfc3RyaW5nc1wifSx7dHlwZTpcIm9iamVjdFwiLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl5bYS16QS1aMC05Ll8tXSskXCI6e29uZU9mOlt7dHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e2FsaWFzZXM6eyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb2Zfc3RyaW5nc1wifSxpcHY0X2FkZHJlc3M6e3R5cGU6XCJzdHJpbmdcIn0saXB2Nl9hZGRyZXNzOnt0eXBlOlwic3RyaW5nXCJ9LGxpbmtfbG9jYWxfaXBzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9saXN0X29mX3N0cmluZ3NcIn0sbWFjX2FkZHJlc3M6e3R5cGU6XCJzdHJpbmdcIn0scHJpb3JpdHk6e3R5cGU6XCJudW1iZXJcIn19LGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl54LVwiOnt9fX0se3R5cGU6XCJudWxsXCJ9XX19LGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExfV19LG9vbV9raWxsX2Rpc2FibGU6e3R5cGU6XCJib29sZWFuXCJ9LG9vbV9zY29yZV9hZGo6e3R5cGU6XCJpbnRlZ2VyXCIsbWluaW11bTotMWUzLG1heGltdW06MWUzfSxwaWQ6e3R5cGU6W1wic3RyaW5nXCIsXCJudWxsXCJdfSxwaWRzX2xpbWl0Ont0eXBlOltcIm51bWJlclwiLFwic3RyaW5nXCJdfSxwbGF0Zm9ybTp7dHlwZTpcInN0cmluZ1wifSxwb3J0czp7dHlwZTpcImFycmF5XCIsaXRlbXM6e29uZU9mOlt7dHlwZTpcIm51bWJlclwiLGZvcm1hdDpcInBvcnRzXCJ9LHt0eXBlOlwic3RyaW5nXCIsZm9ybWF0OlwicG9ydHNcIn0se3R5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOnttb2RlOnt0eXBlOlwic3RyaW5nXCJ9LGhvc3RfaXA6e3R5cGU6XCJzdHJpbmdcIn0sdGFyZ2V0Ont0eXBlOlwiaW50ZWdlclwifSxwdWJsaXNoZWQ6e3R5cGU6W1wic3RyaW5nXCIsXCJpbnRlZ2VyXCJdfSxwcm90b2NvbDp7dHlwZTpcInN0cmluZ1wifX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fV19LHVuaXF1ZUl0ZW1zOiEwfSxwcml2aWxlZ2VkOnt0eXBlOlwiYm9vbGVhblwifSxwcm9maWxlczp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvbGlzdF9vZl9zdHJpbmdzXCJ9LHB1bGxfcG9saWN5Ont0eXBlOlwic3RyaW5nXCIsZW51bTpbXCJhbHdheXNcIixcIm5ldmVyXCIsXCJpZl9ub3RfcHJlc2VudFwiLFwiYnVpbGRcIixcIm1pc3NpbmdcIl19LHJlYWRfb25seTp7dHlwZTpcImJvb2xlYW5cIn0scmVzdGFydDp7dHlwZTpcInN0cmluZ1wifSxydW50aW1lOnt0eXBlOlwic3RyaW5nXCJ9LHNjYWxlOnt0eXBlOlwiaW50ZWdlclwifSxzZWN1cml0eV9vcHQ6e3R5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOlwic3RyaW5nXCJ9LHVuaXF1ZUl0ZW1zOiEwfSxzaG1fc2l6ZTp7dHlwZTpbXCJudW1iZXJcIixcInN0cmluZ1wiXX0sc2VjcmV0czp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvc2VydmljZV9jb25maWdfb3Jfc2VjcmV0XCJ9LHN5c2N0bHM6eyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb3JfZGljdFwifSxzdGRpbl9vcGVuOnt0eXBlOlwiYm9vbGVhblwifSxzdG9wX2dyYWNlX3BlcmlvZDp7dHlwZTpcInN0cmluZ1wiLGZvcm1hdDpcImR1cmF0aW9uXCJ9LHN0b3Bfc2lnbmFsOnt0eXBlOlwic3RyaW5nXCJ9LHN0b3JhZ2Vfb3B0Ont0eXBlOlwib2JqZWN0XCJ9LHRtcGZzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9zdHJpbmdfb3JfbGlzdFwifSx0dHk6e3R5cGU6XCJib29sZWFuXCJ9LHVsaW1pdHM6eyRyZWY6XCIjL2RlZmluaXRpb25zL3VsaW1pdHNcIn0sdXNlcjp7dHlwZTpcInN0cmluZ1wifSx1dHM6e3R5cGU6XCJzdHJpbmdcIn0sdXNlcm5zX21vZGU6e3R5cGU6XCJzdHJpbmdcIn0sdm9sdW1lczp7dHlwZTpcImFycmF5XCIsaXRlbXM6e29uZU9mOlt7dHlwZTpcInN0cmluZ1wiLGZvcm1hdDpcInZvbHVtZXNcIn0se3R5cGU6XCJvYmplY3RcIixyZXF1aXJlZDpbXCJ0eXBlXCJdLHByb3BlcnRpZXM6e3R5cGU6e3R5cGU6XCJzdHJpbmdcIn0sc291cmNlOnt0eXBlOlwic3RyaW5nXCJ9LHRhcmdldDp7dHlwZTpcInN0cmluZ1wifSxyZWFkX29ubHk6e3R5cGU6XCJib29sZWFuXCJ9LGNvbnNpc3RlbmN5Ont0eXBlOlwic3RyaW5nXCJ9LGJpbmQ6e3R5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOntwcm9wYWdhdGlvbjp7dHlwZTpcInN0cmluZ1wifSxjcmVhdGVfaG9zdF9wYXRoOnt0eXBlOlwiYm9vbGVhblwifSxzZWxpbnV4Ont0eXBlOlwic3RyaW5nXCIsZW51bTpbXCJ6XCIsXCJaXCJdfX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fSx2b2x1bWU6e3R5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOntub2NvcHk6e3R5cGU6XCJib29sZWFuXCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX19LHRtcGZzOnt0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7c2l6ZTp7b25lT2Y6W3t0eXBlOlwiaW50ZWdlclwiLG1pbmltdW06MH0se3R5cGU6XCJzdHJpbmdcIn1dfSxtb2RlOnt0eXBlOlwibnVtYmVyXCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX19fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX19XX0sdW5pcXVlSXRlbXM6ITB9LHZvbHVtZXNfZnJvbTp7dHlwZTpcImFycmF5XCIsaXRlbXM6e3R5cGU6XCJzdHJpbmdcIn0sdW5pcXVlSXRlbXM6ITB9LHdvcmtpbmdfZGlyOnt0eXBlOlwic3RyaW5nXCJ9fSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITF9LGhlYWx0aGNoZWNrOnskaWQ6XCIjL2RlZmluaXRpb25zL2hlYWx0aGNoZWNrXCIsdHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e2Rpc2FibGU6e3R5cGU6XCJib29sZWFuXCJ9LGludGVydmFsOnt0eXBlOlwic3RyaW5nXCIsZm9ybWF0OlwiZHVyYXRpb25cIn0scmV0cmllczp7dHlwZTpcIm51bWJlclwifSx0ZXN0OntvbmVPZjpbe3R5cGU6XCJzdHJpbmdcIn0se3R5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOlwic3RyaW5nXCJ9fV19LHRpbWVvdXQ6e3R5cGU6XCJzdHJpbmdcIixmb3JtYXQ6XCJkdXJhdGlvblwifSxzdGFydF9wZXJpb2Q6e3R5cGU6XCJzdHJpbmdcIixmb3JtYXQ6XCJkdXJhdGlvblwifSxzdGFydF9pbnRlcnZhbDp7dHlwZTpcInN0cmluZ1wiLGZvcm1hdDpcImR1cmF0aW9uXCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX19LGRldmVsb3BtZW50OnskaWQ6XCIjL2RlZmluaXRpb25zL2RldmVsb3BtZW50XCIsdHlwZTpbXCJvYmplY3RcIixcIm51bGxcIl0scHJvcGVydGllczp7d2F0Y2g6e3R5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7aWdub3JlOnt0eXBlOlwiYXJyYXlcIixpdGVtczp7dHlwZTpcInN0cmluZ1wifX0scGF0aDp7dHlwZTpcInN0cmluZ1wifSxhY3Rpb246e3R5cGU6XCJzdHJpbmdcIixlbnVtOltcInJlYnVpbGRcIixcInN5bmNcIixcInN5bmMrcmVzdGFydFwiXX0sdGFyZ2V0Ont0eXBlOlwic3RyaW5nXCJ9fX0scmVxdWlyZWQ6W1wicGF0aFwiLFwiYWN0aW9uXCJdLGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl54LVwiOnt9fX19fSxkZXBsb3ltZW50OnskaWQ6XCIjL2RlZmluaXRpb25zL2RlcGxveW1lbnRcIix0eXBlOltcIm9iamVjdFwiLFwibnVsbFwiXSxwcm9wZXJ0aWVzOnttb2RlOnt0eXBlOlwic3RyaW5nXCJ9LGVuZHBvaW50X21vZGU6e3R5cGU6XCJzdHJpbmdcIn0scmVwbGljYXM6e3R5cGU6XCJpbnRlZ2VyXCJ9LGxhYmVsczp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvbGlzdF9vcl9kaWN0XCJ9LHJvbGxiYWNrX2NvbmZpZzp7dHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e3BhcmFsbGVsaXNtOnt0eXBlOlwiaW50ZWdlclwifSxkZWxheTp7dHlwZTpcInN0cmluZ1wiLGZvcm1hdDpcImR1cmF0aW9uXCJ9LGZhaWx1cmVfYWN0aW9uOnt0eXBlOlwic3RyaW5nXCJ9LG1vbml0b3I6e3R5cGU6XCJzdHJpbmdcIixmb3JtYXQ6XCJkdXJhdGlvblwifSxtYXhfZmFpbHVyZV9yYXRpbzp7dHlwZTpcIm51bWJlclwifSxvcmRlcjp7dHlwZTpcInN0cmluZ1wiLGVudW06W1wic3RhcnQtZmlyc3RcIixcInN0b3AtZmlyc3RcIl19fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX19LHVwZGF0ZV9jb25maWc6e3R5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOntwYXJhbGxlbGlzbTp7dHlwZTpcImludGVnZXJcIn0sZGVsYXk6e3R5cGU6XCJzdHJpbmdcIixmb3JtYXQ6XCJkdXJhdGlvblwifSxmYWlsdXJlX2FjdGlvbjp7dHlwZTpcInN0cmluZ1wifSxtb25pdG9yOnt0eXBlOlwic3RyaW5nXCIsZm9ybWF0OlwiZHVyYXRpb25cIn0sbWF4X2ZhaWx1cmVfcmF0aW86e3R5cGU6XCJudW1iZXJcIn0sb3JkZXI6e3R5cGU6XCJzdHJpbmdcIixlbnVtOltcInN0YXJ0LWZpcnN0XCIsXCJzdG9wLWZpcnN0XCJdfX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fSxyZXNvdXJjZXM6e3R5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOntsaW1pdHM6e3R5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOntjcHVzOnt0eXBlOltcIm51bWJlclwiLFwic3RyaW5nXCJdfSxtZW1vcnk6e3R5cGU6XCJzdHJpbmdcIn0scGlkczp7dHlwZTpcImludGVnZXJcIn19LGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl54LVwiOnt9fX0scmVzZXJ2YXRpb25zOnt0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7Y3B1czp7dHlwZTpbXCJudW1iZXJcIixcInN0cmluZ1wiXX0sbWVtb3J5Ont0eXBlOlwic3RyaW5nXCJ9LGdlbmVyaWNfcmVzb3VyY2VzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9nZW5lcmljX3Jlc291cmNlc1wifSxkZXZpY2VzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9kZXZpY2VzXCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX19fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX19LHJlc3RhcnRfcG9saWN5Ont0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7Y29uZGl0aW9uOnt0eXBlOlwic3RyaW5nXCJ9LGRlbGF5Ont0eXBlOlwic3RyaW5nXCIsZm9ybWF0OlwiZHVyYXRpb25cIn0sbWF4X2F0dGVtcHRzOnt0eXBlOlwiaW50ZWdlclwifSx3aW5kb3c6e3R5cGU6XCJzdHJpbmdcIixmb3JtYXQ6XCJkdXJhdGlvblwifX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fSxwbGFjZW1lbnQ6e3R5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOntjb25zdHJhaW50czp7dHlwZTpcImFycmF5XCIsaXRlbXM6e3R5cGU6XCJzdHJpbmdcIn19LHByZWZlcmVuY2VzOnt0eXBlOlwiYXJyYXlcIixpdGVtczp7dHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e3NwcmVhZDp7dHlwZTpcInN0cmluZ1wifX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fX0sbWF4X3JlcGxpY2FzX3Blcl9ub2RlOnt0eXBlOlwiaW50ZWdlclwifX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fSxnZW5lcmljX3Jlc291cmNlczp7JGlkOlwiIy9kZWZpbml0aW9ucy9nZW5lcmljX3Jlc291cmNlc1wiLHR5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7ZGlzY3JldGVfcmVzb3VyY2Vfc3BlYzp7dHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e2tpbmQ6e3R5cGU6XCJzdHJpbmdcIn0sdmFsdWU6e3R5cGU6XCJudW1iZXJcIn19LGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl54LVwiOnt9fX19LGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl54LVwiOnt9fX19LGRldmljZXM6eyRpZDpcIiMvZGVmaW5pdGlvbnMvZGV2aWNlc1wiLHR5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7Y2FwYWJpbGl0aWVzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9saXN0X29mX3N0cmluZ3NcIn0sY291bnQ6e3R5cGU6W1wic3RyaW5nXCIsXCJpbnRlZ2VyXCJdfSxkZXZpY2VfaWRzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9saXN0X29mX3N0cmluZ3NcIn0sZHJpdmVyOnt0eXBlOlwic3RyaW5nXCJ9LG9wdGlvbnM6eyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb3JfZGljdFwifX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fX0saW5jbHVkZTp7JGlkOlwiIy9kZWZpbml0aW9ucy9pbmNsdWRlXCIsb25lT2Y6W3t0eXBlOlwic3RyaW5nXCJ9LHt0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7cGF0aDp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvc3RyaW5nX29yX2xpc3RcIn0sZW52X2ZpbGU6eyRyZWY6XCIjL2RlZmluaXRpb25zL3N0cmluZ19vcl9saXN0XCJ9LHByb2plY3RfZGlyZWN0b3J5Ont0eXBlOlwic3RyaW5nXCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMX1dfSxuZXR3b3JrOnskaWQ6XCIjL2RlZmluaXRpb25zL25ldHdvcmtcIix0eXBlOltcIm9iamVjdFwiLFwibnVsbFwiXSxwcm9wZXJ0aWVzOntuYW1lOnt0eXBlOlwic3RyaW5nXCJ9LGRyaXZlcjp7dHlwZTpcInN0cmluZ1wifSxkcml2ZXJfb3B0czp7dHlwZTpcIm9iamVjdFwiLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl4uKyRcIjp7dHlwZTpbXCJzdHJpbmdcIixcIm51bWJlclwiXX19fSxpcGFtOnt0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7ZHJpdmVyOnt0eXBlOlwic3RyaW5nXCJ9LGNvbmZpZzp7dHlwZTpcImFycmF5XCIsaXRlbXM6e3R5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOntzdWJuZXQ6e3R5cGU6XCJzdHJpbmdcIixmb3JtYXQ6XCJzdWJuZXRfaXBfYWRkcmVzc1wifSxpcF9yYW5nZTp7dHlwZTpcInN0cmluZ1wifSxnYXRld2F5Ont0eXBlOlwic3RyaW5nXCJ9LGF1eF9hZGRyZXNzZXM6e3R5cGU6XCJvYmplY3RcIixhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeLiskXCI6e3R5cGU6XCJzdHJpbmdcIn19fX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fX0sb3B0aW9uczp7dHlwZTpcIm9iamVjdFwiLGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl4uKyRcIjp7dHlwZTpcInN0cmluZ1wifX19fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX19LGV4dGVybmFsOnt0eXBlOltcImJvb2xlYW5cIixcIm9iamVjdFwiXSxwcm9wZXJ0aWVzOntuYW1lOntkZXByZWNhdGVkOiEwLHR5cGU6XCJzdHJpbmdcIn19LGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl54LVwiOnt9fX0saW50ZXJuYWw6e3R5cGU6XCJib29sZWFuXCJ9LGVuYWJsZV9pcHY2Ont0eXBlOlwiYm9vbGVhblwifSxhdHRhY2hhYmxlOnt0eXBlOlwiYm9vbGVhblwifSxsYWJlbHM6eyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb3JfZGljdFwifX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fSx2b2x1bWU6eyRpZDpcIiMvZGVmaW5pdGlvbnMvdm9sdW1lXCIsdHlwZTpbXCJvYmplY3RcIixcIm51bGxcIl0scHJvcGVydGllczp7bmFtZTp7dHlwZTpcInN0cmluZ1wifSxkcml2ZXI6e3R5cGU6XCJzdHJpbmdcIn0sZHJpdmVyX29wdHM6e3R5cGU6XCJvYmplY3RcIixwYXR0ZXJuUHJvcGVydGllczp7XCJeLiskXCI6e3R5cGU6W1wic3RyaW5nXCIsXCJudW1iZXJcIl19fX0sZXh0ZXJuYWw6e3R5cGU6W1wiYm9vbGVhblwiLFwib2JqZWN0XCJdLHByb3BlcnRpZXM6e25hbWU6e2RlcHJlY2F0ZWQ6ITAsdHlwZTpcInN0cmluZ1wifX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fSxsYWJlbHM6eyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb3JfZGljdFwifX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fSxzZWNyZXQ6eyRpZDpcIiMvZGVmaW5pdGlvbnMvc2VjcmV0XCIsdHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e25hbWU6e3R5cGU6XCJzdHJpbmdcIn0sZW52aXJvbm1lbnQ6e3R5cGU6XCJzdHJpbmdcIn0sZmlsZTp7dHlwZTpcInN0cmluZ1wifSxleHRlcm5hbDp7dHlwZTpbXCJib29sZWFuXCIsXCJvYmplY3RcIl0scHJvcGVydGllczp7bmFtZTp7dHlwZTpcInN0cmluZ1wifX19LGxhYmVsczp7JHJlZjpcIiMvZGVmaW5pdGlvbnMvbGlzdF9vcl9kaWN0XCJ9LGRyaXZlcjp7dHlwZTpcInN0cmluZ1wifSxkcml2ZXJfb3B0czp7dHlwZTpcIm9iamVjdFwiLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl4uKyRcIjp7dHlwZTpbXCJzdHJpbmdcIixcIm51bWJlclwiXX19fSx0ZW1wbGF0ZV9kcml2ZXI6e3R5cGU6XCJzdHJpbmdcIn19LGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExLHBhdHRlcm5Qcm9wZXJ0aWVzOntcIl54LVwiOnt9fX0sY29uZmlnOnskaWQ6XCIjL2RlZmluaXRpb25zL2NvbmZpZ1wiLHR5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOntuYW1lOnt0eXBlOlwic3RyaW5nXCJ9LGNvbnRlbnQ6e3R5cGU6XCJzdHJpbmdcIn0sZW52aXJvbm1lbnQ6e3R5cGU6XCJzdHJpbmdcIn0sZmlsZTp7dHlwZTpcInN0cmluZ1wifSxleHRlcm5hbDp7dHlwZTpbXCJib29sZWFuXCIsXCJvYmplY3RcIl0scHJvcGVydGllczp7bmFtZTp7ZGVwcmVjYXRlZDohMCx0eXBlOlwic3RyaW5nXCJ9fX0sbGFiZWxzOnskcmVmOlwiIy9kZWZpbml0aW9ucy9saXN0X29yX2RpY3RcIn0sdGVtcGxhdGVfZHJpdmVyOnt0eXBlOlwic3RyaW5nXCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX19LGNvbW1hbmQ6e29uZU9mOlt7dHlwZTpcIm51bGxcIn0se3R5cGU6XCJzdHJpbmdcIn0se3R5cGU6XCJhcnJheVwiLGl0ZW1zOnt0eXBlOlwic3RyaW5nXCJ9fV19LHN0cmluZ19vcl9saXN0OntvbmVPZjpbe3R5cGU6XCJzdHJpbmdcIn0seyRyZWY6XCIjL2RlZmluaXRpb25zL2xpc3Rfb2Zfc3RyaW5nc1wifV19LGxpc3Rfb2Zfc3RyaW5nczp7dHlwZTpcImFycmF5XCIsaXRlbXM6e3R5cGU6XCJzdHJpbmdcIn0sdW5pcXVlSXRlbXM6ITB9LGxpc3Rfb3JfZGljdDp7b25lT2Y6W3t0eXBlOlwib2JqZWN0XCIscGF0dGVyblByb3BlcnRpZXM6e1wiLitcIjp7dHlwZTpbXCJzdHJpbmdcIixcIm51bWJlclwiLFwiYm9vbGVhblwiLFwibnVsbFwiXX19LGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiExfSx7dHlwZTpcImFycmF5XCIsaXRlbXM6e3R5cGU6XCJzdHJpbmdcIn0sdW5pcXVlSXRlbXM6ITB9XX0sYmxraW9fbGltaXQ6e3R5cGU6XCJvYmplY3RcIixwcm9wZXJ0aWVzOntwYXRoOnt0eXBlOlwic3RyaW5nXCJ9LHJhdGU6e3R5cGU6W1wiaW50ZWdlclwiLFwic3RyaW5nXCJdfX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITF9LGJsa2lvX3dlaWdodDp7dHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e3BhdGg6e3R5cGU6XCJzdHJpbmdcIn0sd2VpZ2h0Ont0eXBlOlwiaW50ZWdlclwifX0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITF9LHNlcnZpY2VfY29uZmlnX29yX3NlY3JldDp7dHlwZTpcImFycmF5XCIsaXRlbXM6e29uZU9mOlt7dHlwZTpcInN0cmluZ1wifSx7dHlwZTpcIm9iamVjdFwiLHByb3BlcnRpZXM6e3NvdXJjZTp7dHlwZTpcInN0cmluZ1wifSx0YXJnZXQ6e3R5cGU6XCJzdHJpbmdcIn0sdWlkOnt0eXBlOlwic3RyaW5nXCJ9LGdpZDp7dHlwZTpcInN0cmluZ1wifSxtb2RlOnt0eXBlOlwibnVtYmVyXCJ9fSxhZGRpdGlvbmFsUHJvcGVydGllczohMSxwYXR0ZXJuUHJvcGVydGllczp7XCJeeC1cIjp7fX19XX19LHVsaW1pdHM6e3R5cGU6XCJvYmplY3RcIixwYXR0ZXJuUHJvcGVydGllczp7XCJeW2Etel0rJFwiOntvbmVPZjpbe3R5cGU6XCJpbnRlZ2VyXCJ9LHt0eXBlOlwib2JqZWN0XCIscHJvcGVydGllczp7aGFyZDp7dHlwZTpcImludGVnZXJcIn0sc29mdDp7dHlwZTpcImludGVnZXJcIn19LHJlcXVpcmVkOltcInNvZnRcIixcImhhcmRcIl0sYWRkaXRpb25hbFByb3BlcnRpZXM6ITEscGF0dGVyblByb3BlcnRpZXM6e1wiXngtXCI6e319fV19fX0sY29uc3RyYWludHM6e3NlcnZpY2U6eyRpZDpcIiMvZGVmaW5pdGlvbnMvY29uc3RyYWludHMvc2VydmljZVwiLGFueU9mOlt7cmVxdWlyZWQ6W1wiYnVpbGRcIl19LHtyZXF1aXJlZDpbXCJpbWFnZVwiXX1dLHByb3BlcnRpZXM6e2J1aWxkOntyZXF1aXJlZDpbXCJjb250ZXh0XCJdfX19fX19LFA9cmVxdWlyZShcInlhbWxcIiksaj1yZXF1aXJlKFwiYWp2XCIpLHg9cmVxdWlyZShcImFqdi1lcnJvcnNcIiksJD17ZXhwb3NlOi9eXFxkKygtXFxkKyk/KFxcL1thLXpBLVpdKyk/JC8scG9ydHM6Zix2b2x1bWVzOmksZHVyYXRpb246L14oXFxkKyh1c3xtc3xzfG18aCkpKyQvLGJ5dGU6L15cXGQrKGJ8a2I/fG1iP3xnYj8pJC8sc3VibmV0X2lwX2FkZHJlc3M6L14oKFxcZHsxLDJ9fDFcXGR7Mn18MlswLTRdXFxkfDI1WzAtNV0pXFwuKXszfShcXGR7MSwyfXwxXFxkezJ9fDJbMC00XVxcZHwyNVswLTVdKVxcLyhcXGR8WzEtMl1cXGR8M1swLTJdKSR8XigoKFswLTlhLWZBLUZdezEsNH06KXs3fVswLTlhLWZBLUZdezEsNH0pfCgoWzAtOWEtZkEtRl17MSw0fTopezEsN306KXwoKFswLTlhLWZBLUZdezEsNH06KXsxLDZ9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDF9KXwoKFswLTlhLWZBLUZdezEsNH06KXsxLDV9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDJ9KXwoKFswLTlhLWZBLUZdezEsNH06KXsxLDR9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDN9KXwoKFswLTlhLWZBLUZdezEsNH06KXsxLDN9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDR9KXwoKFswLTlhLWZBLUZdezEsNH06KXsxLDJ9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDV9KXwoKFswLTlhLWZBLUZdezEsNH06KXsxLDF9KDpbMC05YS1mQS1GXXsxLDR9KXsxLDZ9KXwoOigoOlswLTlhLWZBLUZdezEsNH0pezEsN318OikpfChmZTgwOig6WzAtOWEtZkEtRl17MSw0fSl7MCw0fSVbMC05YS16QS1aXXsxLH0pfCg6OihmZmZmKDowezEsNH0pezAsMX06KXswLDF9KChcXGR7MSwyfXwxXFxkezJ9fDJbMC00XVxcZHwyNVswLTVdKVxcLil7M30oXFxkezEsMn18MVxcZHsyfXwyWzAtNF1cXGR8MjVbMC01XSkpfCgoWzAtOWEtZkEtRl17MSw0fTopezEsNH06KChcXGR7MSwyfXwxXFxkezJ9fDJbMC00XVxcZHwyNVswLTVdKVxcLil7M30oXFxkezEsMn18MVxcZHsyfXwyWzAtNF1cXGR8MjVbMC01XSkpKVxcLyhcXGR8WzEtOV1cXGR8MVswLTFdXFxkfDEyWzAtOF0pJC99O2xldCBrPXQ9PntpZihBcnJheS5pc0FycmF5KHQpKWZvcihsZXQgZT0wO2U8dC5sZW5ndGg7ZSs9MSlrKHRbZV0pO2Vsc2VcIm9iamVjdFwiPT10eXBlb2YgdCYmKHQudHlwZSYmdC5mb3JtYXQmJih0LnBhdHRlcm49JFt0LmZvcm1hdF0udG9TdHJpbmcoKSxkZWxldGUgdC5mb3JtYXQpLE9iamVjdC5rZXlzKHQpLmZvckVhY2goZT0+e2sodFtlXSl9KSk7cmV0dXJuIHR9O2Z1bmN0aW9uIHcoZSx0KXt2YXIgcixpPShlPT57bGV0IHQ9W107cmV0dXJuIE9iamVjdC52YWx1ZXMoZSkuZm9yRWFjaChlPT4oZS52b2x1bWVzfHxbXSkuZm9yRWFjaChlPT50LnB1c2goZSkpKSxlPW5ldyBTZXQodC5tYXAoZT0+e2U9byhlKTtyZXR1cm4gbChlKT9lOnZvaWQgMH0pKSxBcnJheS5mcm9tKGUpLmZpbHRlcihlPT5lKS5tYXAoZT0+KHtbZV06e2V4dGVybmFsOiEwLG5hbWU6ZX19KSl9KShlLnNlcnZpY2VzKTswPGkubGVuZ3RoJiYocj1pLm1hcChlPT5KU09OLnN0cmluZ2lmeShlKSkuam9pbihcIixcIiksdChcIk5hbWVkIHZvbHVtZXMgKFwiLmNvbmNhdChyLFwiKSBtdXN0IGJlIGV4cGxpY2l0bHkgZGVjbGFyZWQuIENyZWF0aW5nIGEgJ3ZvbHVtZXMnIHNlY3Rpb24gd2l0aCBkZWNsYXJhdGlvbnMuXFxuXFxuRm9yIGJhY2t3YXJkcy1jb21wYXRpYmlsaXR5LCB0aGV5J3ZlIGJlZW4gZGVjbGFyZWQgYXMgZXh0ZXJuYWwuIElmIHlvdSBkb24ndCBtaW5kIHRoZSB2b2x1bWUgbmFtZXMgYmVpbmcgcHJlZml4ZWQgd2l0aCB0aGUgcHJvamVjdCBuYW1lLCB5b3UgY2FuIHJlbW92ZSB0aGUgJ2V4dGVybmFsJyBvcHRpb24gZnJvbSBlYWNoIG9uZS5cIikpLGUudm9sdW1lcz1pKX1mdW5jdGlvbiBPKGUpe3ZhciB0PTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpudWxsO2xldCBwPXUoZSk7aWYoIXApcmV0dXJuIGU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIHApcmV0dXJuIGU7aWYoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHAsXCJzZXJ2aWNlc1wiKSlyZXR1cm4gZTtsZXQgYT1PYmplY3Qua2V5cyhwKSxyPVtdLGw9ZT0+ci5wdXNoKGUpLGk9KE9iamVjdC5rZXlzKHApLmZvckVhY2goZT0+e3Q9ZSxyPXBbZV0saT1sLChyPXIubGlua3MpJiYocj1yWzBdLnNwbGl0KFwiOlwiKVswXSxpKFwiU2VydmljZSBcIi5jb25jYXQodCxcIiBoYXMgbGlua3MsIHdoaWNoIG5vIGxvbmdlciBjcmVhdGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIHN1Y2ggYXMgXCIpLmNvbmNhdChyLnRvVXBwZXJDYXNlKCksXCJfUE9SVC4gSWYgeW91IGFyZSB1c2luZyB0aG9zZSBpbiB5b3VyIGFwcGxpY2F0aW9uIGNvZGUsIHlvdSBzaG91bGQgaW5zdGVhZCBjb25uZWN0IGRpcmVjdGx5IHRvIHRoZSBob3N0bmFtZSwgZS5nLiAnXCIpLmNvbmNhdChyLFwiJy5cIikpKSxpPWUsdD1wW2VdLHI9bCwodD10LmV4dGVybmFsX2xpbmtzKSYmcihcIlNlcnZpY2UgXCIuY29uY2F0KGksXCIgaGFzIGV4dGVybmFsX2xpbmtzOiBcIikuY29uY2F0KHQsXCIsIHdoaWNoIG5vdyB3b3JrIHNsaWdodGx5IGRpZmZlcmVudGx5LiBJbiBwYXJ0aWN1bGFyLCB0d28gY29udGFpbmVycyBtdXN0IGJlIGNvbm5lY3RlZCB0byBhdCBsZWFzdCBvbmUgbmV0d29yayBpbiBjb21tb24gdG8gY29tbXVuaWNhdGUsIGV2ZW4gaWYgZXhwbGljaXRseSBsaW5rZWQgdG9nZXRoZXIuXFxuXFxuRWl0aGVyIGNvbm5lY3QgdGhlIGV4dGVybmFsIGNvbnRhaW5lciB0byB5b3VyIGFwcCdzIGRlZmF1bHQgbmV0d29yaywgb3IgY29ubmVjdCBib3RoIHRoZSBleHRlcm5hbCBjb250YWluZXIgYW5kIHlvdXIgc2VydmljZSdzIGNvbnRhaW5lcnMgdG8gYSBwcmUtZXhpc3RpbmcgbmV0d29yay4gU2VlIGh0dHBzOi8vZG9jcy5kb2NrZXIuY29tL2NvbXBvc2UvbmV0d29ya2luZy8gZm9yIG1vcmUgb24gaG93IHRvIGRvIHRoaXMuXCIpKTt2YXIgdCxyPXBbZV0saT1hO2lmKHIubmV0KXtsZXQgZT1yLm5ldDtlLnN0YXJ0c1dpdGgoXCJjb250YWluZXI6XCIpJiYodD1lLnNwbGl0KFwiOlwiKVsxXSxpLmluY2x1ZGVzKHQpKSYmKGU9XCJzZXJ2aWNlOlwiLmNvbmNhdCh0KSksci5uZXR3b3JrX21vZGU9ZSxkZWxldGUgci5uZXR9KGk9cFtlXSkuZG9ja2VyZmlsZSYmKGkuYnVpbGQ9e2NvbnRleHQ6aS5idWlsZCxkb2NrZXJmaWxlOmkuZG9ja2VyZmlsZX0sZGVsZXRlIGkuZG9ja2VyZmlsZSksKHQ9cFtlXSkubG9nX2RyaXZlciYmKHQubG9nZ2luZz17ZHJpdmVyOnQubG9nX2RyaXZlcn0sdC5sb2dfb3B0JiYodC5sb2dnaW5nLm9wdGlvbnM9dC5sb2dfb3B0LGRlbGV0ZSB0LmxvZ19vcHQpLGRlbGV0ZSB0LmxvZ19kcml2ZXIpO3ZhciBvPXBbZV0sbj1hO2lmKG8udm9sdW1lc19mcm9tKWZvcihsZXQgZT0wO2U8by52b2x1bWVzX2Zyb20ubGVuZ3RoO2UrPTEpe3ZhciBzPW8udm9sdW1lc19mcm9tW2VdO24uaW5jbHVkZXMocy5zcGxpdChcIjpcIilbMF0pfHwoby52b2x1bWVzX2Zyb21bZV09XCJjb250YWluZXI6XCIuY29uY2F0KHMpKX19KSx7fSk7cmV0dXJuIE9iamVjdC5rZXlzKHApLmZvckVhY2goZT0+e2lbZV09cFtlXSxkZWxldGUgcFtlXX0pLHAudmVyc2lvbj1cIjIuNFwiLHAuc2VydmljZXM9aSx3KHAsbCksYyhwLFwibmV0d29ya3NcIiksYyhwLFwidm9sdW1lc1wiKSxyLm1hcChlPT5cIiMgXCIuY29uY2F0KGUucmVwbGFjZSgvXFxuL2csXCJcXG4jXCIpKSkuam9pbihcIlxcblwiKSsoMDxyLmxlbmd0aD9cIlxcblwiOlwiXCIpK3YocCx0KX1lLmdldERvY2tlckNvbXBvc2VTY2hlbWFXaXRob3V0Rm9ybWF0cz0oKT0+ayhoKSxlLmdldFZvbHVtZU5hbWVGcm9tVm9sdW1lU3BlYz1vLGUuaXNOYW1lZFZvbHVtZT1sLGUubWlncmF0ZUZyb21WMVRvVjJ4PU8sZS5taWdyYXRlRnJvbVYyeFRvVjN4PWZ1bmN0aW9uKGUpe3ZhciB0PTE8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzFdP2FyZ3VtZW50c1sxXTpudWxsO2xldCBpPXUoZSk7aWYoIWkpcmV0dXJuIGU7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGkpcmV0dXJuIGU7aWYoIWkudmVyc2lvbnx8aS52ZXJzaW9uLnN0YXJ0c1dpdGgoXCIzXCIpKXJldHVybiBlO2xldCByPVtdLG89ZT0+ci5wdXNoKGUpO3JldHVybiBPYmplY3Qua2V5cyhpLnNlcnZpY2VzKS5mb3JFYWNoKHQ9PntsZXQgcj1pLnNlcnZpY2VzW3RdO3IuY3B1cyYmYShyLFwiZGVwbG95L3Jlc291cmNlcy9saW1pdHMvY3B1c1wiLHIuY3B1cyksci5tZW1fbGltaXQmJmEocixcImRlcGxveS9yZXNvdXJjZXMvbGltaXRzL21lbW9yeVwiLHIubWVtX2xpbWl0KSxyLnBpZHNfbGltaXQmJmEocixcImRlcGxveS9yZXNvdXJjZXMvbGltaXRzL3BpZHNcIixyLnBpZHNfbGltaXQpLHIubWVtX3Jlc2VydmF0aW9uJiZhKHIsXCJkZXBsb3kvcmVzb3VyY2VzL3Jlc2VydmF0aW9ucy9tZW1vcnlcIixyLm1lbV9yZXNlcnZhdGlvbiksci52b2x1bWVfZHJpdmVyJiYobyhcIlNlcnZpY2UgXCIuY29uY2F0KHQsXCIgaGFzIHZvbHVtZV9kcml2ZXI6XCIpLmNvbmNhdChyLnZvbHVtZV9kcml2ZXIsXCI6IEluc3RlYWQgb2Ygc2V0dGluZyB0aGUgdm9sdW1lIGRyaXZlciBvbiB0aGUgc2VydmljZSwgZGVmaW5lIGEgdm9sdW1lIHVzaW5nIHRoZSB0b3AtbGV2ZWwgdm9sdW1lcyBvcHRpb24gKGh0dHBzOi8vZG9jcy5kb2NrZXIuY29tL2NvbXBvc2UvY29tcG9zZS1maWxlL2NvbXBvc2UtZmlsZS12My8jdm9sdW1lLWNvbmZpZ3VyYXRpb24tcmVmZXJlbmNlKSBhbmQgc3BlY2lmeSB0aGUgZHJpdmVyIHRoZXJlLlwiKSksZGVsZXRlIHIudm9sdW1lX2RyaXZlciksci52b2x1bWVzX2Zyb20mJihvKFwiU2VydmljZSBcIi5jb25jYXQodCxcIiBoYXMgdm9sdW1lc19mcm9tOlwiKS5jb25jYXQoci52b2x1bWVzX2Zyb20sXCIgVG8gc2hhcmUgYSB2b2x1bWUgYmV0d2VlbiBzZXJ2aWNlcywgZGVmaW5lIGl0IHVzaW5nIHRoZSB0b3AtbGV2ZWwgdm9sdW1lcyBvcHRpb24gKGh0dHBzOi8vZG9jcy5kb2NrZXIuY29tL2NvbXBvc2UvY29tcG9zZS1maWxlL2NvbXBvc2UtZmlsZS12My8jdm9sdW1lLWNvbmZpZ3VyYXRpb24tcmVmZXJlbmNlKSBhbmQgcmVmZXJlbmNlIGl0IGZyb20gZWFjaCBzZXJ2aWNlIHRoYXQgc2hhcmVzIGl0IHVzaW5nIHRoZSBzZXJ2aWNlLWxldmVsIHZvbHVtZXMgb3B0aW9uIChodHRwczovL2RvY3MuZG9ja2VyLmNvbS9jb21wb3NlL2NvbXBvc2UtZmlsZS9jb21wb3NlLWZpbGUtdjMvI2RyaXZlcikuXCIpKSxkZWxldGUgci52b2x1bWVzX2Zyb20pO1tcImNwdV9zaGFyZXNcIixcImNwdV9xdW90YVwiLFwiY3B1c2V0XCIsXCJtZW1zd2FwX2xpbWl0XCJdLmZvckVhY2goZT0+e09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyLGUpJiZvKFwiU2VydmljZSBcIi5jb25jYXQodCxcIiBoYXMgXCIpLmNvbmNhdChlLFwiOlwiKS5jb25jYXQoci5rLFwiIFRoZXNlIGhhdmUgYmVlbiByZXBsYWNlZCBieSB0aGUgcmVzb3VyY2VzIGtleSB1bmRlciBkZXBsb3kgKGh0dHBzOi8vZG9jcy5kb2NrZXIuY29tL2NvbXBvc2UvY29tcG9zZS1maWxlL2NvbXBvc2UtZmlsZS12My8jcmVzb3VyY2VzKS4gZGVwbG95IGNvbmZpZ3VyYXRpb24gb25seSB0YWtlcyBlZmZlY3Qgd2hlbiB1c2luZyBkb2NrZXIgc3RhY2sgZGVwbG95LCBhbmQgaXMgaWdub3JlZCBieSBkb2NrZXItY29tcG9zZS5cIikpLGRlbGV0ZSByW2VdfSksci5leHRlbmRzJiYobyhcIlNlcnZpY2UgXCIuY29uY2F0KHQsXCIgaGFzIGV4dGVuZHM6XCIpLmNvbmNhdChyLmV4dGVuZHMsJyBUaGlzIG9wdGlvbiBoYXMgYmVlbiByZW1vdmVkIGZvciB2ZXJzaW9uOiBcIjMueFwiIENvbXBvc2UgZmlsZXMuIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIGV4dGVuZHMsIHNlZSBodHRwczovL2RvY3MuZG9ja2VyLmNvbS9jb21wb3NlL211bHRpcGxlLWNvbXBvc2UtZmlsZXMvZXh0ZW5kcy8uJykpLGRlbGV0ZSByLmV4dGVuZHMpLHIuZ3JvdXBfYWRkJiYobyhcIlNlcnZpY2UgXCIuY29uY2F0KHQsXCIgaGFzIGdyb3VwX2FkZDpcIikuY29uY2F0KHIuZ3JvdXBfYWRkLCcgVGhpcyBvcHRpb24gaGFzIGJlZW4gcmVtb3ZlZCBmb3IgdmVyc2lvbjogXCIzLnhcIiBDb21wb3NlIGZpbGVzLicpKSxkZWxldGUgci5ncm91cF9hZGQpLGRlbGV0ZSByLmNwdXMsZGVsZXRlIHIubWVtX2xpbWl0LGRlbGV0ZSByLnBpZHNfbGltaXQsZGVsZXRlIHIubWVtX3Jlc2VydmF0aW9ufSksaS52ZXJzaW9uPVwiM1wiLGMoaSxcIm5ldHdvcmtzXCIpLGMoaSxcInZvbHVtZXNcIiksci5tYXAoZT0+XCIjIFwiLmNvbmNhdChlLnJlcGxhY2UoL1xcbi9nLFwiXFxuI1wiKSkpLmpvaW4oXCJcXG5cIikrKDA8ci5sZW5ndGg/XCJcXG5cIjpcIlwiKSt2KGksdCl9LGUubWlncmF0ZUZyb21WM3hUb1YyeD1mdW5jdGlvbihlKXt2YXIgdD0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbDtsZXQgcj11KGUpO3JldHVybiByJiZcInN0cmluZ1wiIT10eXBlb2YgciYmci52ZXJzaW9uJiYhci52ZXJzaW9uLnN0YXJ0c1dpdGgoXCIyXCIpJiZyLnNlcnZpY2VzPyhPYmplY3Qua2V5cyhyLnNlcnZpY2VzKS5mb3JFYWNoKGU9Pnt2YXIgdCxlPXIuc2VydmljZXNbZV07ZS5kZXBsb3kmJmUuZGVwbG95LnJlc291cmNlcyYmKHQ9ZS5kZXBsb3kucmVzb3VyY2VzLHQubGltaXRzJiYodC5saW1pdHMuY3B1cyYmKGUuY3B1cz10LmxpbWl0cy5jcHVzKSx0LmxpbWl0cy5tZW1vcnkmJihlLm1lbV9saW1pdD10LmxpbWl0cy5tZW1vcnkpLHQubGltaXRzLnBpZHMpJiYoZS5waWRzX2xpbWl0PXQubGltaXRzLnBpZHMpLHQucmVzZXJ2YXRpb25zKSYmdC5yZXNlcnZhdGlvbnMubWVtb3J5JiYoZS5tZW1fcmVzZXJ2YXRpb249dC5yZXNlcnZhdGlvbnMubWVtb3J5KSxlLmRlcGxveSYmZS5kZXBsb3kucmVzdGFydF9wb2xpY3kmJmUuZGVwbG95LnJlc3RhcnRfcG9saWN5LmNvbmRpdGlvbiYmIWUucmVzdGFydCYmKGUucmVzdGFydD1lLmRlcGxveS5yZXN0YXJ0X3BvbGljeS5jb25kaXRpb24pLGRlbGV0ZSBlLmRlcGxveX0pLHIudmVyc2lvbj1cIjIuNFwiLGMocixcIm5ldHdvcmtzXCIpLGMocixcInZvbHVtZXNcIiksdihyLHQpKTplfSxlLm1pZ3JhdGVUb0NvbW1vblNwZWM9ZnVuY3Rpb24oZSl7dmFyIHQscj0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXT9hcmd1bWVudHNbMV06bnVsbCxpPU8oZSxyKTtsZXQgbz11KGkpO3JldHVybiFvfHxcInN0cmluZ1wiPT10eXBlb2Ygbz9lOihpPWkubWF0Y2goL15cXHMqI1teXFxyXFxuXSovZ20pfHxbXSxPYmplY3Qua2V5cyhvLnNlcnZpY2VzfHxbXSkuZm9yRWFjaChlPT57ZT1vLnNlcnZpY2VzW2VdO2UuY3B1cyYmYShlLFwiZGVwbG95L3Jlc291cmNlcy9saW1pdHMvY3B1c1wiLGUuY3B1cyksZS5tZW1fbGltaXQmJmEoZSxcImRlcGxveS9yZXNvdXJjZXMvbGltaXRzL21lbW9yeVwiLGUubWVtX2xpbWl0KSxlLnBpZHNfbGltaXQmJmEoZSxcImRlcGxveS9yZXNvdXJjZXMvbGltaXRzL3BpZHNcIixlLnBpZHNfbGltaXQpLGUubWVtX3Jlc2VydmF0aW9uJiZhKGUsXCJkZXBsb3kvcmVzb3VyY2VzL3Jlc2VydmF0aW9ucy9tZW1vcnlcIixlLm1lbV9yZXNlcnZhdGlvbiksZGVsZXRlIGUuY3B1cyxkZWxldGUgZS5tZW1fbGltaXQsZGVsZXRlIGUucGlkc19saW1pdCxkZWxldGUgZS5tZW1fcmVzZXJ2YXRpb259KSxkZWxldGUodD1mdW5jdGlvbih0KXtmb3IodmFyIGU9MTtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXt2YXIgcj1udWxsIT1hcmd1bWVudHNbZV0/YXJndW1lbnRzW2VdOnt9O2UlMj9zKE9iamVjdChyKSwhMCkuZm9yRWFjaChmdW5jdGlvbihlKXtuKHQsZSxyW2VdKX0pOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocikpOnMoT2JqZWN0KHIpKS5mb3JFYWNoKGZ1bmN0aW9uKGUpe09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihyLGUpKX0pfXJldHVybiB0fSh7bmFtZTpcIjx5b3VyIHByb2plY3QgbmFtZT5cIn0sbykpLnZlcnNpb24sYyh0LFwibmV0d29ya3NcIiksYyh0LFwidm9sdW1lc1wiKSxpLm1hcChlPT5cIiMgXCIuY29uY2F0KGUucmVwbGFjZSgvXlxccyojXFxzKy9nLFwiXCIpKSkuam9pbihcIlxcblwiKSsoMDxpLmxlbmd0aD9cIlxcblwiOlwiXCIpK3YodCxyKSl9LGUudmFsaWRhdGVEb2NrZXJDb21wb3NlVG9Db21tb25TcGVjPXA9Pnt2YXIgZT11KHApO2xldCB0PW5ldyBqKHthbGxFcnJvcnM6ITAsc3RyaWN0OiExfSk7eCh0KSxPYmplY3Qua2V5cygkKS5mb3JFYWNoKGU9PnQuYWRkRm9ybWF0KGUsJFtlXSkpO3ZhciByPXQuY29tcGlsZShoKTtpZihyKGUpKXJldHVybltdO2xldCBhPVAucGFyc2VEb2N1bWVudChwLHtwcmV0dHlFcnJvcnM6ITB9KTtyZXR1cm4gci5lcnJvcnMubWFwKGU9PntsZXQgdD1lLmluc3RhbmNlUGF0aDtcImFkZGl0aW9uYWxQcm9wZXJ0aWVzXCI9PT1lLmtleXdvcmQmJih0Kz1cIi9cIi5jb25jYXQoZS5wYXJhbXMuYWRkaXRpb25hbFByb3BlcnR5KSk7dmFyIHI9dC5zcGxpdChcIi9cIikuc2xpY2UoMSk7bGV0IGk9YS5nZXRJbihyLCEwKTt2YXIgbz0oaT1udWxsPT09aT9hLmdldEluKHIuc2xpY2UoMCwtMSksITApOmkpP2kucmFuZ2VbMF0rMTowLG89KHAuc3Vic3RyaW5nKDAsbykubWF0Y2goL1xcbi9nKXx8W10pLmxlbmd0aCsxO2xldCBuO249XCJhZGRpdGlvbmFsUHJvcGVydGllc1wiPT09ZS5rZXl3b3JkP1wiTGluZSBcIi5jb25jYXQobyxcIihcIikuY29uY2F0KHQsXCIpOiAnXCIpLmNvbmNhdChlLnBhcmFtcy5hZGRpdGlvbmFsUHJvcGVydHksXCInIGlzIHVua25vd24gZm9yICdcIikuY29uY2F0KHQsXCInXCIpOlwiZm9ybWF0XCI9PT1lLmtleXdvcmQ/XCJMaW5lIFwiLmNvbmNhdChvLFwiKFwiKS5jb25jYXQodCxcIik6IG11c3QgaGF2ZSBhIHZhbGlkIHN5bnRheCBmb3IgJ1wiKS5jb25jYXQoZS5wYXJhbXMuZm9ybWF0LFwiJ1wiKTpcIm9uZU9mXCI9PT1lLmtleXdvcmQ/XCJMaW5lIFwiLmNvbmNhdChvLFwiKFwiKS5jb25jYXQodCxcIik6IG11c3QgYmUgZWl0aGVyIGEgU2hvcnQgU3ludGF4IChzdHJpbmcocykpIG9yIGEgTG9uZyBTeW50YXggKG9iamVjdChzKSlcIik6XCJMaW5lIFwiLmNvbmNhdChvLFwiKFwiKS5jb25jYXQodCxcIik6IFwiKS5jb25jYXQoZS5tZXNzYWdlLFwiIChcIikuY29uY2F0KGUua2V5d29yZCxcIjogXCIpLmNvbmNhdChKU09OLnN0cmluZ2lmeShlLnBhcmFtcyksXCIpXCIpO2U9clswXSxzPVwiaHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9jb21wb3NlLWZpbGUvXCI7dmFyIHMsZT0oXCJzZXJ2aWNlc1wiPT09ZT9cIlwiLmNvbmNhdChzLFwiMDUtc2VydmljZXMvXCIpOlwibmV0d29ya3NcIj09PWU/XCJcIi5jb25jYXQocyxcIjA2LW5ldHdvcmtzL1wiKTpcInZvbHVtZXNcIj09PWU/XCJcIi5jb25jYXQocyxcIjA3LXZvbHVtZXMvXCIpOlwiY29uZmlnc1wiPT09ZT9cIlwiLmNvbmNhdChzLFwiMDgtY29uZmlncy9cIik6XCJzZWNyZXRzXCI9PT1lP1wiXCIuY29uY2F0KHMsXCIwOS1zZWNyZXRzL1wiKTpzKSsoclsyXT9cIiNcIi5jb25jYXQoclsyXSk6XCJcIik7cmV0dXJue2xpbmU6byxtZXNzYWdlOm4saGVscExpbms6ZX19KX0sZS55YW1sQ2hlY2s9bSxlLnlhbWxQYXJzZT11LGUueWFtbFN0cmluZ2lmeT12fSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSm1hV3hsSWpvaVkyOXRjRzl6WlhabGNuUmxjaTVxY3lJc0luTnZkWEpqWlhNaU9sc2lMaTR2YzNKakwzVjBhV3h6TG1weklpd2lMaTR2YzNKakwzWnZiSFZ0WlhWMGFXeHpMbXB6SWl3aUxpNHZjM0pqTDNsaGJXeHdZWEp6WlM1cWN5SXNJaTR1TDNOeVl5OXdiM0owZFhScGJITXVhbk1pTENJdUxpOXpjbU12ZVdGdGJITjBjbWx1WjJsbWVTNXFjeUlzSWk0dUwzTnlZeTlqYjIxd2IzTmxjMk5vWlcxaExtcHpJaXdpTGk0dmMzSmpMM1poYkdsa1lYUmxMbXB6SWl3aUxpNHZjM0pqTDJsdVpHVjRMbXB6SWwwc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFJRUJtYkc5M0lDb3ZYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQnpaWFJFWldWd1ZtRnNkV1VnUFNBb2IySnFPaUJoYm5rc0lIQmhkR2c2SUhOMGNtbHVaeXdnZG1Gc2RXVTZJR0Z1ZVNrZ1BUNGdlMXh1SUNBZ0lHeGxkQ0J6WTJobGJXRWdQU0J2WW1vN0lDOHZJR0VnYlc5MmFXNW5JSEpsWm1WeVpXNWpaU0IwYnlCcGJuUmxjbTVoYkNCdlltcGxZM1J6SUhkcGRHaHBiaUJ2WW1wY2JpQWdJQ0JqYjI1emRDQndUR2x6ZENBOUlIQmhkR2d1YzNCc2FYUW9KeThuS1R0Y2JpQWdJQ0JqYjI1emRDQnNaVzRnUFNCd1RHbHpkQzVzWlc1bmRHZzdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREE3SUdrZ1BDQnNaVzRnTFNBeE95QnBJQ3M5SURFcElIdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ1pXeGxiU0E5SUhCTWFYTjBXMmxkTzF4dUlDQWdJQ0FnSUNCcFppQW9JWE5qYUdWdFlWdGxiR1Z0WFNrZ2MyTm9aVzFoVzJWc1pXMWRJRDBnZTMwN1hHNGdJQ0FnSUNBZ0lITmphR1Z0WVNBOUlITmphR1Z0WVZ0bGJHVnRYVHRjYmlBZ0lDQjlYRzVjYmlBZ0lDQnpZMmhsYldGYmNFeHBjM1JiYkdWdUlDMGdNVjFkSUQwZ2RtRnNkV1U3WEc1OU8xeHVYRzVsZUhCdmNuUWdablZ1WTNScGIyNGdhR0Z1Wkd4bFJYaDBaWEp1WVd4T1lXMWxLR052YlhCdmMyVTZJR0Z1ZVN3Z2NHRnlkRG9nSjI1bGRIZHZjbXR6SnlCOElDZDJiMngxYldWekp5a2dlMXh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLR052YlhCdmMyVmJjR0Z5ZEYwZ2ZId2dXMTBwTG1admNrVmhZMmdvS0c1aGJXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGeWRFOWlhaUE5SUdOdmJYQnZjMlZiY0dGeWRGMWJibUZ0WlYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h3WVhKMFQySnFJQ1ltSUhCaGNuUlBZbW91WlhoMFpYSnVZV3dnSmlZZ2NHRnlkRTlpYWk1bGVIUmxjbTVoYkM1dVlXMWxLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWEowVDJKcUxtNWhiV1VnUFNCd1lYSjBUMkpxTG1WNGRHVnlibUZzTG01aGJXVTdYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYSjBUMkpxTG1WNGRHVnlibUZzSUQwZ2RISjFaVHRjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJSDBwTzF4dWZWeHVJaXdpTHlvZ1FHWnNiM2NnS2k5Y2JseHVaWGh3YjNKMElHTnZibk4wSUhadmJIVnRaVk53WldOU1pXZGxlQ0E5WEc0Z0lDQWdMMTRvUHp4MmIyeDFiV1UrS0Z0QkxWcGhMWHBkT2x4Y0wzeGJRUzFhWVMxNlhUcGNYRnhjS1Q4dUtqOHBPaWcvUEdOdmJuUmhhVzVsY2w5d1lYUm9QaWhiUVMxYVlTMTZYVHBjWEM5OFcwRXRXbUV0ZWwwNlcxeGNYRnhkS1Q4dUtqOHBLRDg2T2lnL1BHWnNZV2R6UGloeWQzeHliM3g2ZkZvcEtDd29jbmQ4Y205OGVueGFLU2txS1NrL0pDODdYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQm5aWFJXYjJ4MWJXVk9ZVzFsUm5KdmJWWnZiSFZ0WlZOd1pXTWdQU0FvZG05c2RXMWxPaUJ6ZEhKcGJtY3BJRDArSUh0Y2JpQWdJQ0JqYjI1emRDQjJiMngxYldWTllYUmphQ0E5SUhadmJIVnRaUzV0WVhSamFDaDJiMngxYldWVGNHVmpVbVZuWlhncE8xeHVJQ0FnSUdsbUlDaDJiMngxYldWTllYUmphQ0E5UFQwZ2JuVnNiQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnSnljN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFp2YkhWdFpVMWhkR05vTG1keWIzVndjeTUyYjJ4MWJXVTdYRzU5TzF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYVhOT1lXMWxaRlp2YkhWdFpTQTlJQ2h6YjNWeVkyVTZJSE4wY21sdVp5a2dQVDVjYmlBZ0lDQnpiM1Z5WTJVZ0ppWmNiaUFnSUNBaGMyOTFjbU5sTG1sdVkyeDFaR1Z6S0Njdkp5a2dKaVpjYmlBZ0lDQWhjMjkxY21ObExtbHVZMngxWkdWektDZGNYRnhjSnlrZ0ppWmNiaUFnSUNBaGMyOTFjbU5sTG1sdVkyeDFaR1Z6S0NkK0p5a2dKaVpjYmlBZ0lDQWhjMjkxY21ObExtbHVZMngxWkdWektDY3VKeWtnSmlaY2JpQWdJQ0FoYzI5MWNtTmxMbWx1WTJ4MVpHVnpLQ2NrSnlrN1hHNWNibVY0Y0c5eWRDQmpiMjV6ZENCblpYUldiMngxYldWTWIyNW5VM2x1ZEdGNFJuSnZiVlp2YkhWdFpWTndaV01nUFNBb2RtOXNkVzFsT2lCemRISnBibWNwSUQwK0lIdGNiaUFnSUNCamIyNXpkQ0IyYjJ4MWJXVk5ZWFJqYUNBOUlIWnZiSFZ0WlM1dFlYUmphQ2gyYjJ4MWJXVlRjR1ZqVW1WblpYZ3BPMXh1SUNBZ0lHbG1JQ2gyYjJ4MWJXVk5ZWFJqYUNBOVBUMGdiblZzYkNrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RtOXNkVzFsTzF4dUlDQWdJSDFjYmx4dUlDQWdJR052Ym5OMElHeHZibWRUZVc1MFlYZ2dQU0I3WEc0Z0lDQWdJQ0FnSUhSNWNHVTZJR2x6VG1GdFpXUldiMngxYldVb2RtOXNkVzFsVFdGMFkyZ3VaM0p2ZFhCekxuWnZiSFZ0WlNrZ1B5QW5kbTlzZFcxbEp5QTZJQ2RpYVc1a0p5eGNiaUFnSUNBZ0lDQWdjMjkxY21ObE9pQjJiMngxYldWTllYUmphQzVuY205MWNITXVkbTlzZFcxbExGeHVJQ0FnSUNBZ0lDQjBZWEpuWlhRNklIWnZiSFZ0WlUxaGRHTm9MbWR5YjNWd2N5NWpiMjUwWVdsdVpYSmZjR0YwYUN4Y2JpQWdJQ0I5TzF4dVhHNGdJQ0FnWTI5dWMzUWdabXhoWjNNZ1BTQW9kbTlzZFcxbFRXRjBZMmd1WjNKdmRYQnpMbVpzWVdkeklIeDhJQ2NuS1M1eVpYQnNZV05sS0M5Y1hITXJMeXdnSnljcExuTndiR2wwS0Njc0p5azdYRzRnSUNBZ2FXWWdLR1pzWVdkekxtbHVZMngxWkdWektDZHlieWNwS1NCN1hHNGdJQ0FnSUNBZ0lHeHZibWRUZVc1MFlYZ3VkbTlzZFcxbElEMGdleUJ1YjJOdmNIazZJSFJ5ZFdVZ2ZUdGNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9abXhoWjNNdWFXNWpiSFZrWlhNb0ozb25LU2tnZTF4dUlDQWdJQ0FnSUNCc2IyNW5VM2x1ZEdGNExtSnBibVFnUFNCN0lITmxiR2x1ZFhnNklDZDZKeUI5TzF4dUlDQWdJSDBnWld4elpTQnBaaUFvWm14aFozTXVhVzVqYkhWa1pYTW9KMW9uS1NrZ2UxeHVJQ0FnSUNBZ0lDQnNiMjVuVTNsdWRHRjRMbUpwYm1RZ1BTQjdJSE5sYkdsdWRYZzZJQ2RhSnlCOU8xeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUJzYjI1blUzbHVkR0Y0TzF4dWZUdGNiaUlzSWk4cUlFQm1iRzkzSUNvdlhHNWNibU52Ym5OMElIbGhiV3dnUFNCeVpYRjFhWEpsS0NkNVlXMXNKeWs3WEc1Y2JtTnNZWE56SUZsaGJXeFRlVzUwWVhoRmNuSnZjaUJsZUhSbGJtUnpJRVZ5Y205eUlIdGNiaUFnSUNCamIyNXpkSEoxWTNSdmNpaHRaWE56WVdkbExDQnNhVzVsY3l3Z1pHVjBZV2xzY3lrZ2UxeHVJQ0FnSUNBZ0lDQnpkWEJsY2lodFpYTnpZV2RsS1R0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVzYVc1bGN5QTlJR3hwYm1Wek8xeHVJQ0FnSUNBZ0lDQjBhR2x6TG1SbGRHRnBiSE1nUFNCa1pYUmhhV3h6TzF4dUlDQWdJQ0FnSUNCMGFHbHpMbTVoYldVZ1BTQW5XV0Z0YkZONWJuUmhlRVZ5Y205eUp6dGNiaUFnSUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JqYjI1emRDQjVZVzFzUTJobFkyc2dQU0FvWTI5dWRHVnVkRG9nYzNSeWFXNW5LU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdaRzlqSUQwZ2VXRnRiQzV3WVhKelpVUnZZM1Z0Wlc1MEtHTnZiblJsYm5Rc0lIc2djSEpsZEhSNVJYSnliM0p6T2lCMGNuVmxJSDBwTzF4dVhHNGdJQ0FnWTI5dWMzUWdiR2x1WlhNZ1BTQmJYVHRjYmlBZ0lDQmpiMjV6ZENCdFpYTnpZV2RsY3lBOUlGdGRPMXh1WEc0Z0lDQWdaRzlqTG1WeWNtOXljeTVtYjNKRllXTm9LQ2hsTENCcEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJR1Z5Y205eVRYTm5JRDBnWlM1dFpYTnpZV2RsTG5Od2JHbDBLQ2M2WEZ4dUp5bGJNRjA3WEc0Z0lDQWdJQ0FnSUcxbGMzTmhaMlZ6TG5CMWMyZ29leUJzYVc1bE9pQmxMbXhwYm1WUWIzTmJNRjB1YkdsdVpTd2diV1Z6YzJGblpUb2daWEp5YjNKTmMyY3NJSEJ2Y3pvZ1pTNXNhVzVsVUc5eklIMHBPMXh1SUNBZ0lDQWdJQ0JCY25KaGVTNW1jbTl0S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdleUJzWlc1bmRHZzZJR1V1YkdsdVpWQnZjeUEvSUdVdWJHbHVaVkJ2YzFzeFhTNXNhVzVsSUMwZ1pTNXNhVzVsVUc5eld6QmRMbXhwYm1VZ09pQXhJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQW9YeXdnYkNrZ1BUNGdaUzVzYVc1bFVHOXpXekJkTG14cGJtVWdLeUJzTEZ4dUlDQWdJQ0FnSUNBcExtWnZja1ZoWTJnb0tHeHBibVVwSUQwK0lHeHBibVZ6TG5CMWMyZ29iR2x1WlNrcE8xeHVJQ0FnSUgwcE8xeHVYRzRnSUNBZ2FXWWdLRzFsYzNOaFoyVnpMbXhsYm1kMGFDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ2RHaHliM2NnYm1WM0lGbGhiV3hUZVc1MFlYaEZjbkp2Y2lodFpYTnpZV2RsY3k1dFlYQW9LRzBwSUQwK0lHMHViV1Z6YzJGblpTa3VhbTlwYmlnblhGeHVKeWtzSUd4cGJtVnpMQ0J0WlhOellXZGxjeWs3WEc0Z0lDQWdmVnh1ZlR0Y2JseHVaWGh3YjNKMElHTnZibk4wSUhsaGJXeFFZWEp6WlNBOUlDaGpiMjUwWlc1ME9pQnpkSEpwYm1jcElEMCtJSHRjYmlBZ0lDQjVZVzFzUTJobFkyc29ZMjl1ZEdWdWRDazdYRzRnSUNBZ2NtVjBkWEp1SUhsaGJXd3VjR0Z5YzJVb1kyOXVkR1Z1ZEN3Z2V5QnBiblJCYzBKcFowbHVkRG9nZEhKMVpTQjlLVHRjYm4wN1hHNGlMQ0l2S2lCQVpteHZkeUFxTDF4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnY0c5eWRGTndaV05TWldkbGVDQTlYRzRnSUNBZ0wxNG9LRDg4YVhCZmNHRnlkRDVjWEZzL0tEODhhWEErVzJFdFprRXRSbHhjWkM0NlhTc3BYRnhkUHpvcFB5Zy9QR2h2YzNRK1cxeGNaRjBxS0MxYlhGeGtYU3NwUHlrNktUOG9QenhqYjI1MFlXbHVaWEkrVzF4Y1pGMHJLQzFiWEZ4a1hTc3BQeWtvUHp4d2NtOTBiMTl3WVhKMFBseGNMeWcvUEhCeWIzUnZQaWgxWkhCOGRHTndmSE5qZEhBcEtTay9KQzg3WEc1Y2JtVjRjRzl5ZENCamIyNXpkQ0JuWlhSUWIzSjBURzl1WjFONWJuUmhlRVp5YjIxUWIzSjBVM0JsWXlBOUlDaHdiM0owY3pvZ2MzUnlhVzVuS1NBOVBpQjdYRzRnSUNBZ1kyOXVjM1FnY0c5eWRFMWhkR05vSUQwZ2NHOXlkSE11YldGMFkyZ29jRzl5ZEZOd1pXTlNaV2RsZUNrN1hHNGdJQ0FnYVdZZ0tIQnZjblJOWVhSamFDQTlQVDBnYm5Wc2JDa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdXM0J2Y25SelhUdGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0IwWVhKblpYUWdQU0J3YjNKMFRXRjBZMmd1WjNKdmRYQnpMbU52Ym5SaGFXNWxjanRjYmlBZ0lDQnBaaUFvZEdGeVoyVjBJQ1ltSUhSaGNtZGxkQzVwYm1Oc2RXUmxjeWduTFNjcEtTQjdYRzRnSUNBZ0lDQWdJR052Ym5OMElIUmhjbWRsZEZKaGJtZGxJRDBnZEdGeVoyVjBMbk53YkdsMEtDY3RKeWs3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSFJoY21kbGRGTjBZWEowSUQwZ2NHRnljMlZKYm5Rb2RHRnlaMlYwVW1GdVoyVmJNRjBzSURFd0tUdGNiaUFnSUNBZ0lDQWdZMjl1YzNRZ2RHRnlaMlYwVTNSdmNDQTlJSEJoY25ObFNXNTBLSFJoY21kbGRGSmhibWRsV3pGZExDQXhNQ2s3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSHNnYUc5emRDQjlJRDBnY0c5eWRFMWhkR05vTG1keWIzVndjenRjYmlBZ0lDQWdJQ0FnWTI5dWMzUWdhRzl6ZEZKaGJtZGxJRDBnS0dodmMzUWdmSHdnZEdGeVoyVjBLUzV6Y0d4cGRDZ25MU2NwTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JvYjNOMFUzUmhjblFnUFNCd1lYSnpaVWx1ZENob2IzTjBVbUZ1WjJWYk1GMHNJREV3S1R0Y2JseHVJQ0FnSUNBZ0lDQnNaWFFnY21GdVoyVlFiM0owY3lBOUlGdGRPMXh1SUNBZ0lDQWdJQ0JCY25KaGVTNW1jbTl0S0hzZ2JHVnVaM1JvT2lCMFlYSm5aWFJUZEc5d0lDMGdkR0Z5WjJWMFUzUmhjblFnS3lBeElIMHNJQ2hmTENCcEtTQTlQaUJwS1M1bWIzSkZZV05vS0NocEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlZVzVuWlZCdmNuUnpJRDBnVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM0dUxuSmhibWRsVUc5eWRITXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMaTR1WjJWMFVHOXlkRXh2Ym1kVGVXNTBZWGhHY205dFVHOXlkRk53WldNb1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0FrZTNCdmNuUk5ZWFJqYUM1bmNtOTFjSE11YVhCZmNHRnlkQ0I4ZkNBbkozMGtlMmh2YzNSVGRHRnlkQ0FySUdsOU9pUjdkR0Z5WjJWMFUzUmhjblFnS3lCcGZTUjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndiM0owVFdGMFkyZ3VaM0p2ZFhCekxuQnliM1J2WDNCaGNuUWdmSHdnSnlkY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmV0FzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS1N4Y2JpQWdJQ0FnSUNBZ0lDQWdJRjA3WEc0Z0lDQWdJQ0FnSUgwcE8xeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2NtRnVaMlZRYjNKMGN6dGNiaUFnSUNCOVhHNWNiaUFnSUNCamIyNXpkQ0JzYjI1blUzbHVkR0Y0SUQwZ2V5QjBZWEpuWlhRNklIQmhjbk5sU1c1MEtIUmhjbWRsZEN3Z01UQXBJSDA3WEc1Y2JpQWdJQ0JwWmlBb2NHOXlkRTFoZEdOb0xtZHliM1Z3Y3k1cGNDa2dlMXh1SUNBZ0lDQWdJQ0JzYjI1blUzbHVkR0Y0TG1odmMzUmZhWEFnUFNCd2IzSjBUV0YwWTJndVozSnZkWEJ6TG1sd08xeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHdiM0owVFdGMFkyZ3VaM0p2ZFhCekxtaHZjM1FwSUh0Y2JpQWdJQ0FnSUNBZ2JHOXVaMU41Ym5SaGVDNXdkV0pzYVhOb1pXUWdQU0J3YjNKMFRXRjBZMmd1WjNKdmRYQnpMbWh2YzNRN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIQnZjblJOWVhSamFDNW5jbTkxY0hNdWNISnZkRzhwSUh0Y2JpQWdJQ0FnSUNBZ2JHOXVaMU41Ym5SaGVDNXdjbTkwYjJOdmJDQTlJSEJ2Y25STllYUmphQzVuY205MWNITXVjSEp2ZEc4N1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkc5dVoxTjViblJoZUM1dGIyUmxJRDBnSjJsdVozSmxjM01uTzF4dVhHNGdJQ0FnY21WMGRYSnVJRnRzYjI1blUzbHVkR0Y0WFR0Y2JuMDdYRzRpTENJdktpQkFabXh2ZHlBcUwxeHVYRzVwYlhCdmNuUWdleUJuWlhSV2IyeDFiV1ZNYjI1blUzbHVkR0Y0Um5KdmJWWnZiSFZ0WlZOd1pXTWdmU0JtY205dElDY3VMM1p2YkhWdFpYVjBhV3h6Snp0Y2JtbHRjRzl5ZENCN0lHZGxkRkJ2Y25STWIyNW5VM2x1ZEdGNFJuSnZiVkJ2Y25SVGNHVmpJSDBnWm5KdmJTQW5MaTl3YjNKMGRYUnBiSE1uTzF4dVhHNWpiMjV6ZENCNVlXMXNJRDBnY21WeGRXbHlaU2duZVdGdGJDY3BPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdlV0Z0YkZOMGNtbHVaMmxtZVNBOUlDaGtZWFJoT2lCaGJua3NJR052Ym1acFozVnlZWFJwYjI0L09pQkRiMjVtYVdkMWNtRjBhVzl1S1NBOVBpQjdYRzRnSUNBZ1lYQndiSGxGZUhCaGJuTnBiMjV6S0dSaGRHRXNJR052Ym1acFozVnlZWFJwYjI0cE8xeHVJQ0FnSUhKbGRIVnliaUI1WVcxc0xuTjBjbWx1WjJsbWVTaGtZWFJoTENCN0lHbHVaR1Z1ZERvZ0tHTnZibVpwWjNWeVlYUnBiMjRnZkh3Z2UzMHBMbWx1WkdWdWRDQjhmQ0EwTENCemFXMXdiR1ZMWlhsek9pQjBjblZsTENCdWRXeHNVM1J5T2lBbkp5QjlLUzUwY21sdEtDazdYRzU5TzF4dVhHNXBiblJsY21aaFkyVWdRMjl1Wm1sbmRYSmhkR2x2YmlCN1hHNGdJQ0FnWlhod1lXNWtWbTlzZFcxbGN6ODZJR0p2YjJ4bFlXNDdYRzRnSUNBZ1pYaHdZVzVrVUc5eWRITS9PaUJpYjI5c1pXRnVPMXh1SUNBZ0lHbHVaR1Z1ZEQ4NklHNTFiV0psY2p0Y2JuMWNibHh1WTI5dWMzUWdZWEJ3YkhsRmVIQmhibk5wYjI1eklEMGdLR1JoZEdFNklHRnVlU3dnWTI5dVptbG5kWEpoZEdsdmJqODZJRU52Ym1acFozVnlZWFJwYjI0cElEMCtJSHRjYmlBZ0lDQnBaaUFvWTI5dVptbG5kWEpoZEdsdmJpQW1KaUJqYjI1bWFXZDFjbUYwYVc5dUxtVjRjR0Z1WkZadmJIVnRaWE1wSUh0Y2JpQWdJQ0FnSUNBZ1QySnFaV04wTG5aaGJIVmxjeWhrWVhSaExuTmxjblpwWTJWektTNW1iM0pGWVdOb0tDaHpaWEoyYVdObEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWeWRtbGpaUzUyYjJ4MWJXVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaHNaWFFnZG05c2RXMWxTVzVrWlhnZ1BTQXdPeUIyYjJ4MWJXVkpibVJsZUNBOElITmxjblpwWTJVdWRtOXNkVzFsY3k1c1pXNW5kR2c3SUhadmJIVnRaVWx1WkdWNElDczlJREVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ6WlhKMmFXTmxMblp2YkhWdFpYTmJkbTlzZFcxbFNXNWtaWGhkSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZ5ZG1salpTNTJiMngxYldWelczWnZiSFZ0WlVsdVpHVjRYU0E5SUdkbGRGWnZiSFZ0WlV4dmJtZFRlVzUwWVhoR2NtOXRWbTlzZFcxbFUzQmxZeWh6WlhKMmFXTmxMblp2YkhWdFpYTmJkbTlzZFcxbFNXNWtaWGhkS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmU2s3WEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dOdmJtWnBaM1Z5WVhScGIyNGdKaVlnWTI5dVptbG5kWEpoZEdsdmJpNWxlSEJoYm1SUWIzSjBjeWtnZTF4dUlDQWdJQ0FnSUNCUFltcGxZM1F1ZG1Gc2RXVnpLR1JoZEdFdWMyVnlkbWxqWlhNcExtWnZja1ZoWTJnb0tITmxjblpwWTJVcElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6WlhKMmFXTmxMbkJ2Y25SektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhCdmNuUnpJRDBnVzEwN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2NHOXlkRWx1WkdWNElEMGdNRHNnY0c5eWRFbHVaR1Y0SUR3Z2MyVnlkbWxqWlM1d2IzSjBjeTVzWlc1bmRHZzdJSEJ2Y25SSmJtUmxlQ0FyUFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2MyVnlkbWxqWlM1d2IzSjBjMXR3YjNKMFNXNWtaWGhkSUQwOVBTQW5jM1J5YVc1bkp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjRzl5ZEhNZ1BTQmJMaTR1Y0c5eWRITXNJQzR1TG1kbGRGQnZjblJNYjI1blUzbHVkR0Y0Um5KdmJWQnZjblJUY0dWaktITmxjblpwWTJVdWNHOXlkSE5iY0c5eWRFbHVaR1Y0WFNsZE8xeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5SUdWc2MyVWdjRzl5ZEhNZ1BTQmJMaTR1Y0c5eWRITXNJSE5sY25acFkyVXVjRzl5ZEhOYmNHOXlkRWx1WkdWNFhWMDdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sY25acFkyVXVjRzl5ZEhNZ1BTQndiM0owY3p0Y2JpQWdJQ0FnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnZlNrN1hHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJR1JoZEdFN1hHNTlPMXh1SWl3aVpYaHdiM0owSUdOdmJuTjBJR1J2WTJ0bGNrTnZiWEJ2YzJWRGIyMXRiMjVUY0dWalUyTm9aVzFoSUQwZ2UxeHVJQ0FnSUNScFpEb2dKMk52YlhCdmMyVmZjM0JsWXk1cWMyOXVKeXhjYmlBZ0lDQjBlWEJsT2lBbmIySnFaV04wSnl4Y2JpQWdJQ0IwYVhSc1pUb2dKME52YlhCdmMyVWdVM0JsWTJsbWFXTmhkR2x2Ymljc1hHNGdJQ0FnWkdWelkzSnBjSFJwYjI0NklDZFVhR1VnUTI5dGNHOXpaU0JtYVd4bElHbHpJR0VnV1VGTlRDQm1hV3hsSUdSbFptbHVhVzVuSUdFZ2JYVnNkR2t0WTI5dWRHRnBibVZ5Y3lCaVlYTmxaQ0JoY0hCc2FXTmhkR2x2Ymk0bkxGeHVYRzRnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0IyWlhKemFXOXVPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmMzUnlhVzVuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYzJOeWFYQjBhVzl1T2lBblpHVmpiR0Z5WldRZ1ptOXlJR0poWTJ0M1lYSmtJR052YlhCaGRHbGlhV3hwZEhrc0lHbG5ibTl5WldRdUp5eGNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCdVlXMWxPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmMzUnlhVzVuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoZEhSbGNtNDZJQ2RlVzJFdGVqQXRPVjFiWVMxNk1DMDVYeTFkS2lRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWelkzSnBjSFJwYjI0NklDZGtaV1pwYm1VZ2RHaGxJRU52YlhCdmMyVWdjSEp2YW1WamRDQnVZVzFsTENCMWJuUnBiQ0IxYzJWeUlHUmxabWx1WlhNZ2IyNWxJR1Y0Y0d4cFkybDBiSGt1Snl4Y2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0JwYm1Oc2RXUmxPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbllYSnlZWGtuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdhWFJsYlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmIySnFaV04wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2NtVm1PaUFuSXk5a1pXWnBibWwwYVc5dWN5OXBibU5zZFdSbEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWlhOamNtbHdkR2x2YmpvZ0oyTnZiWEJ2YzJVZ2MzVmlMWEJ5YjJwbFkzUnpJSFJ2SUdKbElHbHVZMngxWkdWa0xpY3NYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ2MyVnlkbWxqWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNScFpEb2dKeU12Y0hKdmNHVnlkR2xsY3k5elpYSjJhV05sY3ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5iMkpxWldOMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGRIUmxjbTVRY205d1pYSjBhV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxNWJZUzE2UVMxYU1DMDVMbDh0WFNza0p6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBa2NtVm1PaUFuSXk5a1pXWnBibWwwYVc5dWN5OXpaWEoyYVdObEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGa1pHbDBhVzl1WVd4UWNtOXdaWEowYVdWek9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0J1WlhSM2IzSnJjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKR2xrT2lBbkl5OXdjbTl3WlhKMGFXVnpMMjVsZEhkdmNtdHpKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkdlltcGxZM1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdjR0YwZEdWeWJsQnliM0JsY25ScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWGx0aExYcEJMVm93TFRrdVh5MWRLeVFuT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1J5WldZNklDY2pMMlJsWm1sdWFYUnBiMjV6TDI1bGRIZHZjbXNuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJSFp2YkhWdFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDUnBaRG9nSnlNdmNISnZjR1Z5ZEdsbGN5OTJiMngxYldWekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2R2WW1wbFkzUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NHRjBkR1Z5YmxCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5YbHRoTFhwQkxWb3dMVGt1WHkxZEt5UW5PaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDUnlaV1k2SUNjakwyUmxabWx1YVhScGIyNXpMM1p2YkhWdFpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCaFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGN6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lIMHNYRzVjYmlBZ0lDQWdJQ0FnYzJWamNtVjBjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKR2xrT2lBbkl5OXdjbTl3WlhKMGFXVnpMM05sWTNKbGRITW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5aWFtVmpkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWFIwWlhKdVVISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2RlVzJFdGVrRXRXakF0T1M1ZkxWMHJKQ2M2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKSEpsWmpvZ0p5TXZaR1ZtYVc1cGRHbHZibk12YzJWamNtVjBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmtaR2wwYVc5dVlXeFFjbTl3WlhKMGFXVnpPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdmU3hjYmx4dUlDQWdJQ0FnSUNCamIyNW1hV2R6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrYVdRNklDY2pMM0J5YjNCbGNuUnBaWE12WTI5dVptbG5jeWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmIySnFaV04wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoZEhSbGNtNVFjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjE1YllTMTZRUzFhTUMwNUxsOHRYU3NrSnpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FrY21WbU9pQW5JeTlrWldacGJtbDBhVzl1Y3k5amIyNW1hV2NuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE02SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJSDBzWEc1Y2JpQWdJQ0J3WVhSMFpYSnVVSEp2Y0dWeWRHbGxjem9nZXlBblhuZ3RKem9nZTMwZ2ZTeGNiaUFnSUNCaFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGN6b2dabUZzYzJVc1hHNWNiaUFnSUNCa1pXWnBibWwwYVc5dWN6b2dlMXh1SUNBZ0lDQWdJQ0J6WlhKMmFXTmxPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWthV1E2SUNjakwyUmxabWx1YVhScGIyNXpMM05sY25acFkyVW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5aWFtVmpkQ2NzWEc1Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYWmxiRzl3T2lCN0lDUnlaV1k2SUNjakwyUmxabWx1YVhScGIyNXpMMlJsZG1Wc2IzQnRaVzUwSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxjR3h2ZVRvZ2V5QWtjbVZtT2lBbkl5OWtaV1pwYm1sMGFXOXVjeTlrWlhCc2IzbHRaVzUwSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnVibTkwWVhScGIyNXpPaUI3SUNSeVpXWTZJQ2NqTDJSbFptbHVhWFJwYjI1ekwyeHBjM1JmYjNKZlpHbGpkQ2NnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRIUmhZMmc2SUhzZ2RIbHdaVG9nSjJKdmIyeGxZVzRuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luVnBiR1E2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiMjVsVDJZNklGdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc2dkSGx3WlRvZ0ozTjBjbWx1WnljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5iMkpxWldOMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuUmxlSFE2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc5amEyVnlabWxzWlRvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa2IyTnJaWEptYVd4bFgybHViR2x1WlRvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGNtZHpPaUI3SUNSeVpXWTZJQ2NqTDJSbFptbHVhWFJwYjI1ekwyeHBjM1JmYjNKZlpHbGpkQ2NnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNOb09pQjdJQ1J5WldZNklDY2pMMlJsWm1sdWFYUnBiMjV6TDJ4cGMzUmZiM0pmWkdsamRDY2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0ZpWld4ek9pQjdJQ1J5WldZNklDY2pMMlJsWm1sdWFYUnBiMjV6TDJ4cGMzUmZiM0pmWkdsamRDY2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMkZqYUdWZlpuSnZiVG9nZXlCMGVYQmxPaUFuWVhKeVlYa25MQ0JwZEdWdGN6b2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05oWTJobFgzUnZPaUI3SUhSNWNHVTZJQ2RoY25KaGVTY3NJR2wwWlcxek9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMGdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTlmWTJGamFHVTZJSHNnZEhsd1pUb2dKMkp2YjJ4bFlXNG5JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZrWkdsMGFXOXVZV3hmWTI5dWRHVjRkSE02SUhzZ0pISmxaam9nSnlNdlpHVm1hVzVwZEdsdmJuTXZiR2x6ZEY5dmNsOWthV04wSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYUjNiM0pyT2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCMWJHdzZJSHNnZEhsd1pUb2dKMkp2YjJ4bFlXNG5JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGREb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnphRzFmYzJsNlpUb2dleUIwZVhCbE9pQmJKMmx1ZEdWblpYSW5MQ0FuYzNSeWFXNW5KMTBnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhoMGNtRmZhRzl6ZEhNNklIc2dKSEpsWmpvZ0p5TXZaR1ZtYVc1cGRHbHZibk12YkdsemRGOXZjbDlrYVdOMEp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBjMjlzWVhScGIyNDZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEpwZG1sc1pXZGxaRG9nZXlCMGVYQmxPaUFuWW05dmJHVmhiaWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWamNtVjBjem9nZXlBa2NtVm1PaUFuSXk5a1pXWnBibWwwYVc5dWN5OXpaWEoyYVdObFgyTnZibVpwWjE5dmNsOXpaV055WlhRbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhaM002SUhzZ2RIbHdaVG9nSjJGeWNtRjVKeXdnYVhSbGJYTTZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IxYkdsdGFYUnpPaUI3SUNSeVpXWTZJQ2NqTDJSbFptbHVhWFJwYjI1ekwzVnNhVzFwZEhNbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnNZWFJtYjNKdGN6b2dleUIwZVhCbE9pQW5ZWEp5WVhrbkxDQnBkR1Z0Y3pvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUlIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnlibEJ5YjNCbGNuUnBaWE02SUhzZ0oxNTRMU2M2SUh0OUlIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZbXhyYVc5ZlkyOXVabWxuT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHZZbXBsWTNRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYWnBZMlZmY21WaFpGOWljSE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbllYSnlZWGtuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzF6T2lCN0lDUnlaV1k2SUNjakwyUmxabWx1YVhScGIyNXpMMkpzYTJsdlgyeHBiV2wwSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUmxkbWxqWlY5eVpXRmtYMmx2Y0hNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5ZWEp5WVhrbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcxek9pQjdJQ1J5WldZNklDY2pMMlJsWm1sdWFYUnBiMjV6TDJKc2EybHZYMnhwYldsMEp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsZG1salpWOTNjbWwwWlY5aWNITTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuWVhKeVlYa25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsMFpXMXpPaUI3SUNSeVpXWTZJQ2NqTDJSbFptbHVhWFJwYjI1ekwySnNhMmx2WDJ4cGJXbDBKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbGRtbGpaVjkzY21sMFpWOXBiM0J6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyRnljbUY1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0Y3pvZ2V5QWtjbVZtT2lBbkl5OWtaV1pwYm1sMGFXOXVjeTlpYkd0cGIxOXNhVzFwZENjZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNaV2xuYUhRNklIc2dkSGx3WlRvZ0oybHVkR1ZuWlhJbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNaV2xuYUhSZlpHVjJhV05sT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyRnljbUY1Snl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0Y3pvZ2V5QWtjbVZtT2lBbkl5OWtaV1pwYm1sMGFXOXVjeTlpYkd0cGIxOTNaV2xuYUhRbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3pvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCallYQmZZV1JrT2lCN0lIUjVjR1U2SUNkaGNuSmhlU2NzSUdsMFpXMXpPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzSUhWdWFYRjFaVWwwWlcxek9pQjBjblZsSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyRndYMlJ5YjNBNklIc2dkSGx3WlRvZ0oyRnljbUY1Snl3Z2FYUmxiWE02SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlN3Z2RXNXBjWFZsU1hSbGJYTTZJSFJ5ZFdVZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpaM0p2ZFhBNklIc2dkSGx3WlRvZ0ozTjBjbWx1Wnljc0lHVnVkVzA2SUZzbmFHOXpkQ2NzSUNkd2NtbDJZWFJsSjEwZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpaM0p2ZFhCZmNHRnlaVzUwT2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXRiV0Z1WkRvZ2V5QWtjbVZtT2lBbkl5OWtaV1pwYm1sMGFXOXVjeTlqYjIxdFlXNWtKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtWnBaM002SUhzZ0pISmxaam9nSnlNdlpHVm1hVzVwZEdsdmJuTXZjMlZ5ZG1salpWOWpiMjVtYVdkZmIzSmZjMlZqY21WMEp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5SaGFXNWxjbDl1WVcxbE9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM0IxWDJOdmRXNTBPaUI3SUhSNWNHVTZJQ2RwYm5SbFoyVnlKeXdnYldsdWFXMTFiVG9nTUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTndkVjl3WlhKalpXNTBPaUI3SUhSNWNHVTZJQ2RwYm5SbFoyVnlKeXdnYldsdWFXMTFiVG9nTUN3Z2JXRjRhVzExYlRvZ01UQXdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTNCMVgzTm9ZWEpsY3pvZ2V5QjBlWEJsT2lCYkoyNTFiV0psY2ljc0lDZHpkSEpwYm1jblhTQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR053ZFY5eGRXOTBZVG9nZXlCMGVYQmxPaUJiSjI1MWJXSmxjaWNzSUNkemRISnBibWNuWFNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTndkVjl3WlhKcGIyUTZJSHNnZEhsd1pUb2dXeWR1ZFcxaVpYSW5MQ0FuYzNSeWFXNW5KMTBnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamNIVmZjblJmY0dWeWFXOWtPaUI3SUhSNWNHVTZJRnNuYm5WdFltVnlKeXdnSjNOMGNtbHVaeWRkSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kzQjFYM0owWDNKMWJuUnBiV1U2SUhzZ2RIbHdaVG9nV3lkdWRXMWlaWEluTENBbmMzUnlhVzVuSjEwZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpjSFZ6T2lCN0lIUjVjR1U2SUZzbmJuVnRZbVZ5Snl3Z0ozTjBjbWx1WnlkZElIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM0IxYzJWME9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM0psWkdWdWRHbGhiRjl6Y0dWak9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2R2WW1wbFkzUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpiMjVtYVdjNklIc2dkSGx3WlRvZ0ozTjBjbWx1WnljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1U2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbFoybHpkSEo1T2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmtaR2wwYVc5dVlXeFFjbTl3WlhKMGFXVnpPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnlibEJ5YjNCbGNuUnBaWE02SUhzZ0oxNTRMU2M2SUh0OUlIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWlhCbGJtUnpYMjl1T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1WlU5bU9pQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJQ1J5WldZNklDY2pMMlJsWm1sdWFYUnBiMjV6TDJ4cGMzUmZiMlpmYzNSeWFXNW5jeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmIySnFaV04wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnlibEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjE1YllTMTZRUzFhTUMwNUxsOHRYU3NrSnpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyOWlhbVZqZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WemRHRnlkRG9nZXlCMGVYQmxPaUFuWW05dmJHVmhiaWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhGMWFYSmxaRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuWW05dmJHVmhiaWNzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSbFptRjFiSFE2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyNWthWFJwYjI0NklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0ozTjBjbWx1Wnljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVkVzA2SUZ0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2R6WlhKMmFXTmxYM04wWVhKMFpXUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ozTmxjblpwWTJWZmFHVmhiSFJvZVNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuYzJWeWRtbGpaVjlqYjIxd2JHVjBaV1JmYzNWalkyVnpjMloxYkd4NUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjWFZwY21Wa09pQmJKMk52Ym1ScGRHbHZiaWRkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1YyYVdObFgyTm5jbTkxY0Y5eWRXeGxjem9nZXlBa2NtVm1PaUFuSXk5a1pXWnBibWwwYVc5dWN5OXNhWE4wWDI5bVgzTjBjbWx1WjNNbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR1YyYVdObGN6b2dleUIwZVhCbE9pQW5ZWEp5WVhrbkxDQnBkR1Z0Y3pvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxDQjFibWx4ZFdWSmRHVnRjem9nZEhKMVpTQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J1Y3pvZ2V5QWtjbVZtT2lBbkl5OWtaV1pwYm1sMGFXOXVjeTl6ZEhKcGJtZGZiM0pmYkdsemRDY2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYm5OZmIzQjBPaUI3SUhSNWNHVTZJQ2RoY25KaGVTY3NJR2wwWlcxek9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNJSFZ1YVhGMVpVbDBaVzF6T2lCMGNuVmxJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWkc1elgzTmxZWEpqYURvZ2V5QWtjbVZtT2lBbkl5OWtaV1pwYm1sMGFXOXVjeTl6ZEhKcGJtZGZiM0pmYkdsemRDY2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrYjIxaGFXNXVZVzFsT2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXNTBjbmx3YjJsdWREb2dleUFrY21WbU9pQW5JeTlrWldacGJtbDBhVzl1Y3k5amIyMXRZVzVrSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVnVkbDltYVd4bE9pQjdJQ1J5WldZNklDY2pMMlJsWm1sdWFYUnBiMjV6TDNOMGNtbHVaMTl2Y2w5c2FYTjBKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdWRtbHliMjV0Wlc1ME9pQjdJQ1J5WldZNklDY2pMMlJsWm1sdWFYUnBiMjV6TDJ4cGMzUmZiM0pmWkdsamRDY2dmU3hjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWNGNHOXpaVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbllYSnlZWGtuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nV3lkemRISnBibWNuTENBbmJuVnRZbVZ5SjEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWIzSnRZWFE2SUNkbGVIQnZjMlVuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWJtbHhkV1ZKZEdWdGN6b2dkSEoxWlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHVjRkR1Z1WkhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1bFQyWTZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuYjJKcVpXTjBKeXhjYmx4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZ5ZG1salpUb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm1hV3hsT2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFhWEpsWkRvZ1d5ZHpaWEoyYVdObEoxMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2FYUnBiMjVoYkZCeWIzQmxjblJwWlhNNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWNGRHVnlibUZzWDJ4cGJtdHpPaUI3SUhSNWNHVTZJQ2RoY25KaGVTY3NJR2wwWlcxek9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNJSFZ1YVhGMVpVbDBaVzF6T2lCMGNuVmxJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWlhoMGNtRmZhRzl6ZEhNNklIc2dKSEpsWmpvZ0p5TXZaR1ZtYVc1cGRHbHZibk12YkdsemRGOXZjbDlrYVdOMEp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2R5YjNWd1gyRmtaRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbllYSnlZWGtuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nV3lkemRISnBibWNuTENBbmJuVnRZbVZ5SjEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnVhWEYxWlVsMFpXMXpPaUIwY25WbExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhR1ZoYkhSb1kyaGxZMnM2SUhzZ0pISmxaam9nSnlNdlpHVm1hVzVwZEdsdmJuTXZhR1ZoYkhSb1kyaGxZMnNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FHOXpkRzVoYldVNklIc2dkSGx3WlRvZ0ozTjBjbWx1WnljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBiV0ZuWlRvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVhWFE2SUhzZ2RIbHdaVG9nSjJKdmIyeGxZVzRuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FYQmpPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhOdmJHRjBhVzl1T2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3h6T2lCN0lDUnlaV1k2SUNjakwyUmxabWx1YVhScGIyNXpMMnhwYzNSZmIzSmZaR2xqZENjZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhVzVyY3pvZ2V5QjBlWEJsT2lBbllYSnlZWGtuTENCcGRHVnRjem9nZXlCMGVYQmxPaUFuYzNSeWFXNW5KeUI5TENCMWJtbHhkV1ZKZEdWdGN6b2dkSEoxWlNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHZaMmRwYm1jNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMjlpYW1WamRDY3NYRzVjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSEpwZG1WeU9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjSFJwYjI1ek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMjlpYW1WamRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnlibEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjE0dUt5UW5PaUI3SUhSNWNHVTZJRnNuYzNSeWFXNW5KeXdnSjI1MWJXSmxjaWNzSUNkdWRXeHNKMTBnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2FYUnBiMjVoYkZCeWIzQmxjblJwWlhNNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFIwWlhKdVVISnZjR1Z5ZEdsbGN6b2dleUFuWG5ndEp6b2dlMzBnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHMWhZMTloWkdSeVpYTnpPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYldWdFgyeHBiV2wwT2lCN0lIUjVjR1U2SUZzbmJuVnRZbVZ5Snl3Z0ozTjBjbWx1WnlkZElIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiV1Z0WDNKbGMyVnlkbUYwYVc5dU9pQjdJSFI1Y0dVNklGc25jM1J5YVc1bkp5d2dKMmx1ZEdWblpYSW5YU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGJWOXpkMkZ3Y0dsdVpYTnpPaUI3SUhSNWNHVTZJQ2RwYm5SbFoyVnlKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxbGJYTjNZWEJmYkdsdGFYUTZJSHNnZEhsd1pUb2dXeWR1ZFcxaVpYSW5MQ0FuYzNSeWFXNW5KMTBnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdVpYUjNiM0pyWDIxdlpHVTZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhSM2IzSnJjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZibVZQWmpvZ1cxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5QWtjbVZtT2lBbkl5OWtaV1pwYm1sMGFXOXVjeTlzYVhOMFgyOW1YM04wY21sdVozTW5JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5aWFtVmpkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBkR1Z5YmxCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxNWJZUzE2UVMxYU1DMDVMbDh0WFNza0p6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI1bFQyWTZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHZZbXBsWTNRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhiR2xoYzJWek9pQjdJQ1J5WldZNklDY2pMMlJsWm1sdWFYUnBiMjV6TDJ4cGMzUmZiMlpmYzNSeWFXNW5jeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x3ZGpSZllXUmtjbVZ6Y3pvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhCMk5sOWhaR1J5WlhOek9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2FXNXJYMnh2WTJGc1gybHdjem9nZXlBa2NtVm1PaUFuSXk5a1pXWnBibWwwYVc5dWN5OXNhWE4wWDI5bVgzTjBjbWx1WjNNbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlXTmZZV1JrY21WemN6b2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnBiM0pwZEhrNklIc2dkSGx3WlRvZ0oyNTFiV0psY2ljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2FYUnBiMjVoYkZCeWIzQmxjblJwWlhNNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUjBaWEp1VUhKdmNHVnlkR2xsY3pvZ2V5QW5Ybmd0SnpvZ2UzMGdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc2dkSGx3WlRvZ0oyNTFiR3duSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE02SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl2YlY5cmFXeHNYMlJwYzJGaWJHVTZJSHNnZEhsd1pUb2dKMkp2YjJ4bFlXNG5JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYjI5dFgzTmpiM0psWDJGa2Fqb2dleUIwZVhCbE9pQW5hVzUwWldkbGNpY3NJRzFwYm1sdGRXMDZJQzB4TURBd0xDQnRZWGhwYlhWdE9pQXhNREF3SUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHbGtPaUI3SUhSNWNHVTZJRnNuYzNSeWFXNW5KeXdnSjI1MWJHd25YU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCcFpITmZiR2x0YVhRNklIc2dkSGx3WlRvZ1d5ZHVkVzFpWlhJbkxDQW5jM1J5YVc1bkoxMGdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3YkdGMFptOXliVG9nZXlCMGVYQmxPaUFuYzNSeWFXNW5KeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCdmNuUnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkaGNuSmhlU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbDBaVzF6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJtVlBaam9nVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIc2dkSGx3WlRvZ0oyNTFiV0psY2ljc0lHWnZjbTFoZERvZ0ozQnZjblJ6SnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHNnZEhsd1pUb2dKM04wY21sdVp5Y3NJR1p2Y20xaGREb2dKM0J2Y25Sekp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMjlpYW1WamRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdlpHVTZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdodmMzUmZhWEE2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZERvZ2V5QjBlWEJsT2lBbmFXNTBaV2RsY2ljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEIxWW14cGMyaGxaRG9nZXlCMGVYQmxPaUJiSjNOMGNtbHVaeWNzSUNkcGJuUmxaMlZ5SjEwZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNSdlkyOXNPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6T2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwZEdWeWJsQnliM0JsY25ScFpYTTZJSHNnSjE1NExTYzZJSHQ5SUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhWdWFYRjFaVWwwWlcxek9pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnBkbWxzWldkbFpEb2dleUIwZVhCbE9pQW5ZbTl2YkdWaGJpY2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205bWFXeGxjem9nZXlBa2NtVm1PaUFuSXk5a1pXWnBibWwwYVc5dWN5OXNhWE4wWDI5bVgzTjBjbWx1WjNNbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSFZzYkY5d2IyeHBZM2s2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNzSUdWdWRXMDZJRnNuWVd4M1lYbHpKeXdnSjI1bGRtVnlKeXdnSjJsbVgyNXZkRjl3Y21WelpXNTBKeXdnSjJKMWFXeGtKeXdnSjIxcGMzTnBibWNuWFNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxZV1JmYjI1c2VUb2dleUIwZVhCbE9pQW5ZbTl2YkdWaGJpY2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMFlYSjBPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY25WdWRHbHRaVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmMzUnlhVzVuSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITmpZV3hsT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHBiblJsWjJWeUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sWTNWeWFYUjVYMjl3ZERvZ2V5QjBlWEJsT2lBbllYSnlZWGtuTENCcGRHVnRjem9nZXlCMGVYQmxPaUFuYzNSeWFXNW5KeUI5TENCMWJtbHhkV1ZKZEdWdGN6b2dkSEoxWlNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITm9iVjl6YVhwbE9pQjdJSFI1Y0dVNklGc25iblZ0WW1WeUp5d2dKM04wY21sdVp5ZGRJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzJWamNtVjBjem9nZXlBa2NtVm1PaUFuSXk5a1pXWnBibWwwYVc5dWN5OXpaWEoyYVdObFgyTnZibVpwWjE5dmNsOXpaV055WlhRbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjM2x6WTNSc2N6b2dleUFrY21WbU9pQW5JeTlrWldacGJtbDBhVzl1Y3k5c2FYTjBYMjl5WDJScFkzUW5JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSa2FXNWZiM0JsYmpvZ2V5QjBlWEJsT2lBblltOXZiR1ZoYmljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkRzl3WDJkeVlXTmxYM0JsY21sdlpEb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5d2dabTl5YldGME9pQW5aSFZ5WVhScGIyNG5JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzNSdmNGOXphV2R1WVd3NklIc2dkSGx3WlRvZ0ozTjBjbWx1WnljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpkRzl5WVdkbFgyOXdkRG9nZXlCMGVYQmxPaUFuYjJKcVpXTjBKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSdGNHWnpPaUI3SUNSeVpXWTZJQ2NqTDJSbFptbHVhWFJwYjI1ekwzTjBjbWx1WjE5dmNsOXNhWE4wSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjBlVG9nZXlCMGVYQmxPaUFuWW05dmJHVmhiaWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWJHbHRhWFJ6T2lCN0lDUnlaV1k2SUNjakwyUmxabWx1YVhScGIyNXpMM1ZzYVcxcGRITW5JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhObGNqb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFYwY3pvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIVnpaWEp1YzE5dGIyUmxPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG05c2RXMWxjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbllYSnlZWGtuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0Y3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IyNWxUMlk2SUZ0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjdJSFI1Y0dVNklDZHpkSEpwYm1jbkxDQm1iM0p0WVhRNklDZDJiMngxYldWekp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMjlpYW1WamRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxjWFZwY21Wa09pQmJKM1I1Y0dVblhTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWNtTmxPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFlYSm5aWFE2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxZV1JmYjI1c2VUb2dleUIwZVhCbE9pQW5ZbTl2YkdWaGJpY2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJuTnBjM1JsYm1ONU9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JpYVc1a09pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5aWFtVmpkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdZV2RoZEdsdmJqb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqY21WaGRHVmZhRzl6ZEY5d1lYUm9PaUI3SUhSNWNHVTZJQ2RpYjI5c1pXRnVKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCelpXeHBiblY0T2lCN0lIUjVjR1U2SUNkemRISnBibWNuTENCbGJuVnRPaUJiSjNvbkxDQW5XaWRkSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3pvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwZEdWeWJsQnliM0JsY25ScFpYTTZJSHNnSjE1NExTYzZJSHQ5SUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG05c2RXMWxPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyOWlhbVZqZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViMk52Y0hrNklIc2dkSGx3WlRvZ0oySnZiMnhsWVc0bklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGN6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnlibEJ5YjNCbGNuUnBaWE02SUhzZ0oxNTRMU2M2SUh0OUlIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHMXdabk02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5iMkpxWldOMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5wZW1VNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5dVpVOW1PaUJiZXlCMGVYQmxPaUFuYVc1MFpXZGxjaWNzSUcxcGJtbHRkVzA2SURBZ2ZTd2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlYU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXOWtaVG9nZXlCMGVYQmxPaUFuYm5WdFltVnlKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE02SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhkSFJsY201UWNtOXdaWEowYVdWek9pQjdJQ2RlZUMwbk9pQjdmU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUjBaWEp1VUhKdmNHVnlkR2xsY3pvZ2V5QW5Ybmd0SnpvZ2UzMGdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1hTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkVzVwY1hWbFNYUmxiWE02SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyYjJ4MWJXVnpYMlp5YjIwNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMkZ5Y21GNUp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJYTTZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RXNXBjWFZsU1hSbGJYTTZJSFJ5ZFdVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNiM0pyYVc1blgyUnBjam9nZXlCMGVYQmxPaUFuYzNSeWFXNW5KeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhkSFJsY201UWNtOXdaWEowYVdWek9pQjdJQ2RlZUMwbk9pQjdmU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE02SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lHaGxZV3gwYUdOb1pXTnJPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWthV1E2SUNjakwyUmxabWx1YVhScGIyNXpMMmhsWVd4MGFHTm9aV05ySnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHZZbXBsWTNRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHUnBjMkZpYkdVNklIc2dkSGx3WlRvZ0oySnZiMnhsWVc0bklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzUwWlhKMllXdzZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y3NJR1p2Y20xaGREb2dKMlIxY21GMGFXOXVKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRISnBaWE02SUhzZ2RIbHdaVG9nSjI1MWJXSmxjaWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMFpYTjBPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXVaVTltT2lCYmV5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxDQjdJSFI1Y0dVNklDZGhjbkpoZVNjc0lHbDBaVzF6T2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwZ2ZWMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbGIzVjBPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25MQ0JtYjNKdFlYUTZJQ2RrZFhKaGRHbHZiaWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCemRHRnlkRjl3WlhKcGIyUTZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y3NJR1p2Y20xaGREb2dKMlIxY21GMGFXOXVKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOMFlYSjBYMmx1ZEdWeWRtRnNPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25MQ0JtYjNKdFlYUTZJQ2RrZFhKaGRHbHZiaWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQmhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNCd1lYUjBaWEp1VUhKdmNHVnlkR2xsY3pvZ2V5QW5Ybmd0SnpvZ2UzMGdmU3hjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ1pHVjJaV3h2Y0cxbGJuUTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDUnBaRG9nSnlNdlpHVm1hVzVwZEdsdmJuTXZaR1YyWld4dmNHMWxiblFuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ1d5ZHZZbXBsWTNRbkxDQW5iblZzYkNkZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIZGhkR05vT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZGhjbkpoZVNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcxek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmIySnFaV04wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWjI1dmNtVTZJSHNnZEhsd1pUb2dKMkZ5Y21GNUp5d2dhWFJsYlhNNklIc2dkSGx3WlRvZ0ozTjBjbWx1WnljZ2ZTQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGRHZzZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFkzUnBiMjQ2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNzSUdWdWRXMDZJRnNuY21WaWRXbHNaQ2NzSUNkemVXNWpKeXdnSjNONWJtTXJjbVZ6ZEdGeWRDZGRJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwT2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWEYxYVhKbFpEb2dXeWR3WVhSb0p5d2dKMkZqZEdsdmJpZGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGN6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoZEhSbGNtNVFjbTl3WlhKMGFXVnpPaUI3SUNkZWVDMG5PaUI3ZlNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JrWlhCc2IzbHRaVzUwT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FrYVdRNklDY2pMMlJsWm1sdWFYUnBiMjV6TDJSbGNHeHZlVzFsYm5RbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dXeWR2WW1wbFkzUW5MQ0FuYm5Wc2JDZGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzF2WkdVNklIc2dkSGx3WlRvZ0ozTjBjbWx1WnljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxibVJ3YjJsdWRGOXRiMlJsT2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVndiR2xqWVhNNklIc2dkSGx3WlRvZ0oybHVkR1ZuWlhJbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiR0ZpWld4ek9pQjdJQ1J5WldZNklDY2pMMlJsWm1sdWFYUnBiMjV6TDJ4cGMzUmZiM0pmWkdsamRDY2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5YjJ4c1ltRmphMTlqYjI1bWFXYzZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5aWFtVmpkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoY21Gc2JHVnNhWE50T2lCN0lIUjVjR1U2SUNkcGJuUmxaMlZ5SnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNZWGs2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNzSUdadmNtMWhkRG9nSjJSMWNtRjBhVzl1SnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptRnBiSFZ5WlY5aFkzUnBiMjQ2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUcxdmJtbDBiM0k2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNzSUdadmNtMWhkRG9nSjJSMWNtRjBhVzl1SnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRYMlpoYVd4MWNtVmZjbUYwYVc4NklIc2dkSGx3WlRvZ0oyNTFiV0psY2ljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXlaR1Z5T2lCN0lIUjVjR1U2SUNkemRISnBibWNuTENCbGJuVnRPaUJiSjNOMFlYSjBMV1pwY25OMEp5d2dKM04wYjNBdFptbHljM1FuWFNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCaGRIUmxjbTVRY205d1pYSjBhV1Z6T2lCN0lDZGVlQzBuT2lCN2ZTQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFhCa1lYUmxYMk52Ym1acFp6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuYjJKcVpXTjBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0Z5WVd4c1pXeHBjMjA2SUhzZ2RIbHdaVG9nSjJsdWRHVm5aWEluSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pXeGhlVG9nZXlCMGVYQmxPaUFuYzNSeWFXNW5KeXdnWm05eWJXRjBPaUFuWkhWeVlYUnBiMjRuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbVlXbHNkWEpsWDJGamRHbHZiam9nZXlCMGVYQmxPaUFuYzNSeWFXNW5KeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYlc5dWFYUnZjam9nZXlCMGVYQmxPaUFuYzNSeWFXNW5KeXdnWm05eWJXRjBPaUFuWkhWeVlYUnBiMjRuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdFlYaGZabUZwYkhWeVpWOXlZWFJwYnpvZ2V5QjBlWEJsT2lBbmJuVnRZbVZ5SnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IzSmtaWEk2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNzSUdWdWRXMDZJRnNuYzNSaGNuUXRabWx5YzNRbkxDQW5jM1J2Y0MxbWFYSnpkQ2RkSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmtaR2wwYVc5dVlXeFFjbTl3WlhKMGFXVnpPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnlibEJ5YjNCbGNuUnBaWE02SUhzZ0oxNTRMU2M2SUh0OUlIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhOdmRYSmpaWE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyOWlhbVZqZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4cGJXbDBjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkdlltcGxZM1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZM0IxY3pvZ2V5QjBlWEJsT2lCYkoyNTFiV0psY2ljc0lDZHpkSEpwYm1jblhTQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnRaVzF2Y25rNklIc2dkSGx3WlRvZ0ozTjBjbWx1WnljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHbGtjem9nZXlCMGVYQmxPaUFuYVc1MFpXZGxjaWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGa1pHbDBhVzl1WVd4UWNtOXdaWEowYVdWek9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFIwWlhKdVVISnZjR1Z5ZEdsbGN6b2dleUFuWG5ndEp6b2dlMzBnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYTmxjblpoZEdsdmJuTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuYjJKcVpXTjBKeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTndkWE02SUhzZ2RIbHdaVG9nV3lkdWRXMWlaWEluTENBbmMzUnlhVzVuSjEwZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXVnRiM0o1T2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdkbGJtVnlhV05mY21WemIzVnlZMlZ6T2lCN0lDUnlaV1k2SUNjakwyUmxabWx1YVhScGIyNXpMMmRsYm1WeWFXTmZjbVZ6YjNWeVkyVnpKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWlhacFkyVnpPaUI3SUNSeVpXWTZJQ2NqTDJSbFptbHVhWFJwYjI1ekwyUmxkbWxqWlhNbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnlibEJ5YjNCbGNuUnBaWE02SUhzZ0oxNTRMU2M2SUh0OUlIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3pvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhkSFJsY201UWNtOXdaWEowYVdWek9pQjdJQ2RlZUMwbk9pQjdmU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVnpkR0Z5ZEY5d2IyeHBZM2s2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyOWlhbVZqZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmJtUnBkR2x2YmpvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pHVnNZWGs2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNzSUdadmNtMWhkRG9nSjJSMWNtRjBhVzl1SnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JXRjRYMkYwZEdWdGNIUnpPaUI3SUhSNWNHVTZJQ2RwYm5SbFoyVnlKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZDJsdVpHOTNPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25MQ0JtYjNKdFlYUTZJQ2RrZFhKaGRHbHZiaWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhSMFpYSnVVSEp2Y0dWeWRHbGxjem9nZXlBblhuZ3RKem9nZTMwZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJzWVdObGJXVnVkRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmIySnFaV04wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUnlZV2x1ZEhNNklIc2dkSGx3WlRvZ0oyRnljbUY1Snl3Z2FYUmxiWE02SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISmxabVZ5Wlc1alpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUFuWVhKeVlYa25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsMFpXMXpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHZZbXBsWTNRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Y0hKbFlXUTZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE02SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFIwWlhKdVVISnZjR1Z5ZEdsbGN6b2dleUFuWG5ndEp6b2dlMzBnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzFoZUY5eVpYQnNhV05oYzE5d1pYSmZibTlrWlRvZ2V5QjBlWEJsT2lBbmFXNTBaV2RsY2ljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE02SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUjBaWEp1VUhKdmNHVnlkR2xsY3pvZ2V5QW5Ybmd0SnpvZ2UzMGdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHRmtaR2wwYVc5dVlXeFFjbTl3WlhKMGFXVnpPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGRIUmxjbTVRY205d1pYSjBhV1Z6T2lCN0lDZGVlQzBuT2lCN2ZTQjlMRnh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lHZGxibVZ5YVdOZmNtVnpiM1Z5WTJWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBa2FXUTZJQ2NqTDJSbFptbHVhWFJwYjI1ekwyZGxibVZ5YVdOZmNtVnpiM1Z5WTJWekp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2RoY25KaGVTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2R2WW1wbFkzUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaR2x6WTNKbGRHVmZjbVZ6YjNWeVkyVmZjM0JsWXpvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5aWFtVmpkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3Y205d1pYSjBhV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhMmx1WkRvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoYkhWbE9pQjdJSFI1Y0dVNklDZHVkVzFpWlhJbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE02SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwZEdWeWJsQnliM0JsY25ScFpYTTZJSHNnSjE1NExTYzZJSHQ5SUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaFpHUnBkR2x2Ym1Gc1VISnZjR1Z5ZEdsbGN6b2dabUZzYzJVc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBkR1Z5YmxCeWIzQmxjblJwWlhNNklIc2dKMTU0TFNjNklIdDlJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I5TEZ4dVhHNGdJQ0FnSUNBZ0lHUmxkbWxqWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNScFpEb2dKeU12WkdWbWFXNXBkR2x2Ym5NdlpHVjJhV05sY3ljc1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5ZWEp5WVhrbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5iMkpxWldOMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhjR0ZpYVd4cGRHbGxjem9nZXlBa2NtVm1PaUFuSXk5a1pXWnBibWwwYVc5dWN5OXNhWE4wWDI5bVgzTjBjbWx1WjNNbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOdmRXNTBPaUI3SUhSNWNHVTZJRnNuYzNSeWFXNW5KeXdnSjJsdWRHVm5aWEluWFNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWlhacFkyVmZhV1J6T2lCN0lDUnlaV1k2SUNjakwyUmxabWx1YVhScGIyNXpMMnhwYzNSZmIyWmZjM1J5YVc1bmN5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pISnBkbVZ5T2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl3ZEdsdmJuTTZJSHNnSkhKbFpqb2dKeU12WkdWbWFXNXBkR2x2Ym5NdmJHbHpkRjl2Y2w5a2FXTjBKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhkSFJsY201UWNtOXdaWEowYVdWek9pQjdJQ2RlZUMwbk9pQjdmU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnZlN4Y2JseHVJQ0FnSUNBZ0lDQnBibU5zZFdSbE9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBa2FXUTZJQ2NqTDJSbFptbHVhWFJwYjI1ekwybHVZMngxWkdVbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1bFQyWTZJRnRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmIySnFaV04wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFEb2dleUFrY21WbU9pQW5JeTlrWldacGJtbDBhVzl1Y3k5emRISnBibWRmYjNKZmJHbHpkQ2NnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdWRsOW1hV3hsT2lCN0lDUnlaV1k2SUNjakwyUmxabWx1YVhScGIyNXpMM04wY21sdVoxOXZjbDlzYVhOMEp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2YW1WamRGOWthWEpsWTNSdmNuazZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2FYUnBiMjVoYkZCeWIzQmxjblJwWlhNNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JkTEZ4dUlDQWdJQ0FnSUNCOUxGeHVYRzRnSUNBZ0lDQWdJRzVsZEhkdmNtczZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDUnBaRG9nSnlNdlpHVm1hVzVwZEdsdmJuTXZibVYwZDI5eWF5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJiSjI5aWFtVmpkQ2NzSUNkdWRXeHNKMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J5YVhabGNqb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1J5YVhabGNsOXZjSFJ6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHZZbXBsWTNRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhSMFpYSnVVSEp2Y0dWeWRHbGxjem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSjE0dUt5UW5PaUI3SUhSNWNHVTZJRnNuYzNSeWFXNW5KeXdnSjI1MWJXSmxjaWRkSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGNHRnRPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkdlltcGxZM1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrY21sMlpYSTZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym1acFp6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2RoY25KaGVTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyOWlhbVZqZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE4xWW01bGREb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5d2dabTl5YldGME9pQW5jM1ZpYm1WMFgybHdYMkZrWkhKbGMzTW5JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcGNGOXlZVzVuWlRvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMkYwWlhkaGVUb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhWNFgyRmtaSEpsYzNObGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkdlltcGxZM1FuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0ZrWkdsMGFXOXVZV3hRY205d1pYSjBhV1Z6T2lCbVlXeHpaU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndZWFIwWlhKdVVISnZjR1Z5ZEdsbGN6b2dleUFuWGk0ckpDYzZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd1lYUjBaWEp1VUhKdmNHVnlkR2xsY3pvZ2V5QW5Ybmd0SnpvZ2UzMGdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHOXdkR2x2Ym5NNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5iMkpxWldOMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3pvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NHRjBkR1Z5YmxCeWIzQmxjblJwWlhNNklIc2dKMTR1S3lRbk9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMGdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGa1pHbDBhVzl1WVd4UWNtOXdaWEowYVdWek9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwZEdWeWJsQnliM0JsY25ScFpYTTZJSHNnSjE1NExTYzZJSHQ5SUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxlSFJsY201aGJEb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGVYQmxPaUJiSjJKdmIyeGxZVzRuTENBbmIySnFaV04wSjEwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJ5YjNCbGNuUnBaWE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc1aGJXVTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCa1pYQnlaV05oZEdWa09pQjBjblZsTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkemRISnBibWNuTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J3WVhSMFpYSnVVSEp2Y0dWeWRHbGxjem9nZXlBblhuZ3RKem9nZTMwZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2x1ZEdWeWJtRnNPaUI3SUhSNWNHVTZJQ2RpYjI5c1pXRnVKeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdVlXSnNaVjlwY0hZMk9pQjdJSFI1Y0dVNklDZGliMjlzWldGdUp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0YwZEdGamFHRmliR1U2SUhzZ2RIbHdaVG9nSjJKdmIyeGxZVzRuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3h6T2lCN0lDUnlaV1k2SUNjakwyUmxabWx1YVhScGIyNXpMMnhwYzNSZmIzSmZaR2xqZENjZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3pvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWFIwWlhKdVVISnZjR1Z5ZEdsbGN6b2dleUFuWG5ndEp6b2dlMzBnZlN4Y2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0IyYjJ4MWJXVTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDUnBaRG9nSnlNdlpHVm1hVzVwZEdsdmJuTXZkbTlzZFcxbEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJRnNuYjJKcVpXTjBKeXdnSjI1MWJHd25YU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J1WVcxbE9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSEpwZG1WeU9pQjdJSFI1Y0dVNklDZHpkSEpwYm1jbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSEpwZG1WeVgyOXdkSE02SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyOWlhbVZqZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEJoZEhSbGNtNVFjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuWGk0ckpDYzZJSHNnZEhsd1pUb2dXeWR6ZEhKcGJtY25MQ0FuYm5WdFltVnlKMTBnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWNGRHVnlibUZzT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklGc25ZbTl2YkdWaGJpY3NJQ2R2WW1wbFkzUW5YU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibUZ0WlRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsY0hKbFkyRjBaV1E2SUhSeWRXVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKM04wY21sdVp5Y3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3pvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhkSFJsY201UWNtOXdaWEowYVdWek9pQjdJQ2RlZUMwbk9pQjdmU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHRmlaV3h6T2lCN0lDUnlaV1k2SUNjakwyUmxabWx1YVhScGIyNXpMMnhwYzNSZmIzSmZaR2xqZENjZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3pvZ1ptRnNjMlVzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWFIwWlhKdVVISnZjR1Z5ZEdsbGN6b2dleUFuWG5ndEp6b2dlMzBnZlN4Y2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0J6WldOeVpYUTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDUnBaRG9nSnlNdlpHVm1hVzVwZEdsdmJuTXZjMlZqY21WMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2R2WW1wbFkzUW5MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2NISnZjR1Z5ZEdsbGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklIc2dkSGx3WlRvZ0ozTjBjbWx1WnljZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiblpwY205dWJXVnVkRG9nZXlCMGVYQmxPaUFuYzNSeWFXNW5KeUI5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdacGJHVTZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsZUhSbGNtNWhiRG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCYkoySnZiMnhsWVc0bkxDQW5iMkpxWldOMEoxMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWhiV1U2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUd4aFltVnNjem9nZXlBa2NtVm1PaUFuSXk5a1pXWnBibWwwYVc5dWN5OXNhWE4wWDI5eVgyUnBZM1FuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pISnBkbVZ5T2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pISnBkbVZ5WDI5d2RITTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5aWFtVmpkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhkSFJsY201UWNtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5YaTRySkNjNklIc2dkSGx3WlRvZ1d5ZHpkSEpwYm1jbkxDQW5iblZ0WW1WeUoxMGdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJsYlhCc1lYUmxYMlJ5YVhabGNqb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUdGa1pHbDBhVzl1WVd4UWNtOXdaWEowYVdWek9pQm1ZV3h6WlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJSEJoZEhSbGNtNVFjbTl3WlhKMGFXVnpPaUI3SUNkZWVDMG5PaUI3ZlNCOUxGeHVJQ0FnSUNBZ0lDQjlMRnh1WEc0Z0lDQWdJQ0FnSUdOdmJtWnBaem9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdKR2xrT2lBbkl5OWtaV1pwYm1sMGFXOXVjeTlqYjI1bWFXY25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5aWFtVmpkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1GdFpUb2dleUIwZVhCbE9pQW5jM1J5YVc1bkp5QjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052Ym5SbGJuUTZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm5acGNtOXViV1Z1ZERvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHWnBiR1U2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGVIUmxjbTVoYkRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQmJKMkp2YjJ4bFlXNG5MQ0FuYjJKcVpXTjBKMTBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQnliM0JsY25ScFpYTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzVoYldVNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JrWlhCeVpXTmhkR1ZrT2lCMGNuVmxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJQ2R6ZEhKcGJtY25MRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hoWW1Wc2N6b2dleUFrY21WbU9pQW5JeTlrWldacGJtbDBhVzl1Y3k5c2FYTjBYMjl5WDJScFkzUW5JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdWdGNHeGhkR1ZmWkhKcGRtVnlPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1lXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTTZJR1poYkhObExGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnlibEJ5YjNCbGNuUnBaWE02SUhzZ0oxNTRMU2M2SUh0OUlIMHNYRzRnSUNBZ0lDQWdJSDBzWEc1Y2JpQWdJQ0FnSUNBZ1kyOXRiV0Z1WkRvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYjI1bFQyWTZJRnQ3SUhSNWNHVTZJQ2R1ZFd4c0p5QjlMQ0I3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzSUhzZ2RIbHdaVG9nSjJGeWNtRjVKeXdnYVhSbGJYTTZJSHNnZEhsd1pUb2dKM04wY21sdVp5Y2dmU0I5WFN4Y2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0J6ZEhKcGJtZGZiM0pmYkdsemREb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2IyNWxUMlk2SUZ0N0lIUjVjR1U2SUNkemRISnBibWNuSUgwc0lIc2dKSEpsWmpvZ0p5TXZaR1ZtYVc1cGRHbHZibk12YkdsemRGOXZabDl6ZEhKcGJtZHpKeUI5WFN4Y2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0JzYVhOMFgyOW1YM04wY21sdVozTTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUNkaGNuSmhlU2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQnBkR1Z0Y3pvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnZFc1cGNYVmxTWFJsYlhNNklIUnlkV1VzWEc0Z0lDQWdJQ0FnSUgwc1hHNWNiaUFnSUNBZ0lDQWdiR2x6ZEY5dmNsOWthV04wT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J2Ym1WUFpqb2dXMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nSjI5aWFtVmpkQ2NzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhkSFJsY201UWNtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5MaXNuT2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ1d5ZHpkSEpwYm1jbkxDQW5iblZ0WW1WeUp5d2dKMkp2YjJ4bFlXNG5MQ0FuYm5Wc2JDZGRMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2FYUnBiMjVoYkZCeWIzQmxjblJwWlhNNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2V5QjBlWEJsT2lBbllYSnlZWGtuTENCcGRHVnRjem9nZXlCMGVYQmxPaUFuYzNSeWFXNW5KeUI5TENCMWJtbHhkV1ZKZEdWdGN6b2dkSEoxWlNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWFN4Y2JpQWdJQ0FnSUNBZ2ZTeGNibHh1SUNBZ0lDQWdJQ0JpYkd0cGIxOXNhVzFwZERvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dKMjlpYW1WamRDY3NYRzRnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjR0YwYURvZ2V5QjBlWEJsT2lBbmMzUnlhVzVuSnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmhkR1U2SUhzZ2RIbHdaVG9nV3lkcGJuUmxaMlZ5Snl3Z0ozTjBjbWx1WnlkZElIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWVdSa2FYUnBiMjVoYkZCeWIzQmxjblJwWlhNNklHWmhiSE5sTEZ4dUlDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQmliR3RwYjE5M1pXbG5hSFE2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZHZZbXBsWTNRbkxGeHVJQ0FnSUNBZ0lDQWdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhkR2c2SUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM1pXbG5hSFE2SUhzZ2RIbHdaVG9nSjJsdWRHVm5aWEluSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE02SUdaaGJITmxMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCelpYSjJhV05sWDJOdmJtWnBaMTl2Y2w5elpXTnlaWFE2SUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklDZGhjbkpoZVNjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwZEdWdGN6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzl1WlU5bU9pQmJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhzZ2RIbHdaVG9nSjNOMGNtbHVaeWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ0oyOWlhbVZqZENjc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NtOXdaWEowYVdWek9pQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI5MWNtTmxPaUI3SUhSNWNHVTZJQ2R6ZEhKcGJtY25JSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwT2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkV2xrT2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaMmxrT2lCN0lIUjVjR1U2SUNkemRISnBibWNuSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdiVzlrWlRvZ2V5QjBlWEJsT2lBbmJuVnRZbVZ5SnlCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmtaR2wwYVc5dVlXeFFjbTl3WlhKMGFXVnpPaUJtWVd4elpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIQmhkSFJsY201UWNtOXdaWEowYVdWek9pQjdJQ2RlZUMwbk9pQjdmU0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRjBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNCMWJHbHRhWFJ6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwZVhCbE9pQW5iMkpxWldOMEp5eGNiaUFnSUNBZ0lDQWdJQ0FnSUhCaGRIUmxjbTVRY205d1pYSjBhV1Z6T2lCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0oxNWJZUzE2WFNza0p6b2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmJtVlBaam9nVzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZXlCMGVYQmxPaUFuYVc1MFpXZGxjaWNnZlN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lBbmIySnFaV04wSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbTl3WlhKMGFXVnpPaUI3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2hoY21RNklIc2dkSGx3WlRvZ0oybHVkR1ZuWlhJbklIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZablE2SUhzZ2RIbHdaVG9nSjJsdWRHVm5aWEluSUgwc1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYRjFhWEpsWkRvZ1d5ZHpiMlowSnl3Z0oyaGhjbVFuWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRHbGxjem9nWm1Gc2MyVXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGRHVnlibEJ5YjNCbGNuUnBaWE02SUhzZ0oxNTRMU2M2SUh0OUlIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCZExGeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMHNYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHVJQ0FnSUNBZ0lDQjlMRnh1SUNBZ0lDQWdJQ0JqYjI1emRISmhhVzUwY3pvZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWeWRtbGpaVG9nZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNScFpEb2dKeU12WkdWbWFXNXBkR2x2Ym5NdlkyOXVjM1J5WVdsdWRITXZjMlZ5ZG1salpTY3NYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVzU1VDJZNklGdDdJSEpsY1hWcGNtVmtPaUJiSjJKMWFXeGtKMTBnZlN3Z2V5QnlaWEYxYVhKbFpEb2dXeWRwYldGblpTZGRJSDFkTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWW5WcGJHUTZJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsY1hWcGNtVmtPaUJiSjJOdmJuUmxlSFFuWFN4Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjYmlBZ0lDQWdJQ0FnZlN4Y2JpQWdJQ0I5TEZ4dWZUdGNiaUlzSWk4cUlFQm1iRzkzSUNvdlhHNWNibWx0Y0c5eWRDQjdJSFp2YkhWdFpWTndaV05TWldkbGVDQjlJR1p5YjIwZ0p5NHZkbTlzZFcxbGRYUnBiSE1uTzF4dWFXMXdiM0owSUhzZ2NHOXlkRk53WldOU1pXZGxlQ0I5SUdaeWIyMGdKeTR2Y0c5eWRIVjBhV3h6Snp0Y2JtbHRjRzl5ZENCN0lIbGhiV3hRWVhKelpTQjlJR1p5YjIwZ0p5NHZlV0Z0YkhCaGNuTmxKenRjYm1sdGNHOXlkQ0I3SUdSdlkydGxja052YlhCdmMyVkRiMjF0YjI1VGNHVmpVMk5vWlcxaElIMGdabkp2YlNBbkxpOWpiMjF3YjNObGMyTm9aVzFoSnp0Y2JseHVZMjl1YzNRZ2VXRnRiQ0E5SUhKbGNYVnBjbVVvSjNsaGJXd25LVHRjYm1OdmJuTjBJRUZxZGlBOUlISmxjWFZwY21Vb0oyRnFkaWNwTzF4dVkyOXVjM1FnUVdwMlJYSnliM0p6SUQwZ2NtVnhkV2x5WlNnbllXcDJMV1Z5Y205eWN5Y3BPMXh1WEc1amIyNXpkQ0JtYjNKdFlYUnpJRDBnZTF4dUlDQWdJQzh2SUhSaGEyVnVJR1p5YjIwZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyUnVaWEJvYVc0dlkyOXRjRzl6WlM5aWJHOWlMMjFoYzNSbGNpOWpiMjF3YjNObEwyTnZibVpwWnk5MllXeHBaR0YwYVc5dUxuQjVJMHcwTlZ4dUlDQWdJR1Y0Y0c5elpUb2dMMTVjWEdRcktDMWNYR1FyS1Q4b1hGd3ZXMkV0ZWtFdFdsMHJLVDhrTHl4Y2JpQWdJQ0J3YjNKMGN6b2djRzl5ZEZOd1pXTlNaV2RsZUN4Y2JpQWdJQ0IyYjJ4MWJXVnpPaUIyYjJ4MWJXVlRjR1ZqVW1WblpYZ3NYRzRnSUNBZ1pIVnlZWFJwYjI0NklDOWVLRnhjWkNzb2RYTjhiWE44YzN4dGZHZ3BLU3NrTHl4Y2JpQWdJQ0JpZVhSbE9pQXZYbHhjWkNzb1lueHJZajk4YldJL2ZHZGlQeWtrTHl4Y2JpQWdJQ0F2THlCMFlXdGxiaUJtY205dElHaDBkSEJ6T2k4dloybDBhSFZpTG1OdmJTOWtibVZ3YUdsdUwyTnZiWEJ2YzJVdllteHZZaTl0WVhOMFpYSXZZMjl0Y0c5elpTOWpiMjVtYVdjdmRtRnNhV1JoZEdsdmJpNXdlU05NTkRkY2JpQWdJQ0J6ZFdKdVpYUmZhWEJmWVdSa2NtVnpjenBjYmlBZ0lDQWdJQ0FnTDE0b0tGeGNaSHN4TERKOWZERmNYR1I3TW4xOE1sc3dMVFJkWEZ4a2ZESTFXekF0TlYwcFhGd3VLWHN6ZlNoY1hHUjdNU3d5Zlh3eFhGeGtleko5ZkRKYk1DMDBYVnhjWkh3eU5Wc3dMVFZkS1Z4Y0x5aGNYR1I4V3pFdE1sMWNYR1I4TTFzd0xUSmRLU1I4WGlnb0tGc3dMVGxoTFdaQkxVWmRlekVzTkgwNktYczNmVnN3TFRsaExXWkJMVVpkZXpFc05IMHBmQ2dvV3pBdE9XRXRaa0V0UmwxN01TdzBmVG9wZXpFc04zMDZLWHdvS0Zzd0xUbGhMV1pCTFVaZGV6RXNOSDA2S1hzeExEWjlLRHBiTUMwNVlTMW1RUzFHWFhzeExEUjlLWHN4TERGOUtYd29LRnN3TFRsaExXWkJMVVpkZXpFc05IMDZLWHN4TERWOUtEcGJNQzA1WVMxbVFTMUdYWHN4TERSOUtYc3hMREo5S1h3b0tGc3dMVGxoTFdaQkxVWmRlekVzTkgwNktYc3hMRFI5S0RwYk1DMDVZUzFtUVMxR1hYc3hMRFI5S1hzeExETjlLWHdvS0Zzd0xUbGhMV1pCTFVaZGV6RXNOSDA2S1hzeExETjlLRHBiTUMwNVlTMW1RUzFHWFhzeExEUjlLWHN4TERSOUtYd29LRnN3TFRsaExXWkJMVVpkZXpFc05IMDZLWHN4TERKOUtEcGJNQzA1WVMxbVFTMUdYWHN4TERSOUtYc3hMRFY5S1h3b0tGc3dMVGxoTFdaQkxVWmRlekVzTkgwNktYc3hMREY5S0RwYk1DMDVZUzFtUVMxR1hYc3hMRFI5S1hzeExEWjlLWHdvT2lnb09sc3dMVGxoTFdaQkxVWmRlekVzTkgwcGV6RXNOMzE4T2lrcGZDaG1aVGd3T2lnNld6QXRPV0V0WmtFdFJsMTdNU3cwZlNsN01DdzBmU1ZiTUMwNVlTMTZRUzFhWFhzeExIMHBmQ2c2T2lobVptWm1LRG93ZXpFc05IMHBlekFzTVgwNktYc3dMREY5S0NoY1hHUjdNU3d5Zlh3eFhGeGtleko5ZkRKYk1DMDBYVnhjWkh3eU5Wc3dMVFZkS1Z4Y0xpbDdNMzBvWEZ4a2V6RXNNbjE4TVZ4Y1pIc3lmWHd5V3pBdE5GMWNYR1I4TWpWYk1DMDFYU2twZkNnb1d6QXRPV0V0WmtFdFJsMTdNU3cwZlRvcGV6RXNOSDA2S0NoY1hHUjdNU3d5Zlh3eFhGeGtleko5ZkRKYk1DMDBYVnhjWkh3eU5Wc3dMVFZkS1Z4Y0xpbDdNMzBvWEZ4a2V6RXNNbjE4TVZ4Y1pIc3lmWHd5V3pBdE5GMWNYR1I4TWpWYk1DMDFYU2twS1Z4Y0x5aGNYR1I4V3pFdE9WMWNYR1I4TVZzd0xURmRYRnhrZkRFeVd6QXRPRjBwSkM4c1hHNTlPMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdkbUZzYVdSaGRHVkViMk5yWlhKRGIyMXdiM05sVkc5RGIyMXRiMjVUY0dWaklEMGdLR052Ym5SbGJuUTZJSE4wY21sdVp5a2dQVDRnZTF4dUlDQWdJR052Ym5OMElHTnZiWEJ2YzJVZ1BTQjVZVzFzVUdGeWMyVW9ZMjl1ZEdWdWRDazdYRzRnSUNBZ1kyOXVjM1FnWVdwMklEMGdibVYzSUVGcWRpaDdJR0ZzYkVWeWNtOXljem9nZEhKMVpTd2djM1J5YVdOME9pQm1ZV3h6WlNCOUtUdGNiaUFnSUNCQmFuWkZjbkp2Y25Nb1lXcDJLVHRjYmlBZ0lDQlBZbXBsWTNRdWEyVjVjeWhtYjNKdFlYUnpLUzVtYjNKRllXTm9LQ2htYjNKdFlYUXBJRDArSUdGcWRpNWhaR1JHYjNKdFlYUW9abTl5YldGMExDQm1iM0p0WVhSelcyWnZjbTFoZEYwcEtUdGNiaUFnSUNCamIyNXpkQ0IyWVd4cFpHRjBaU0E5SUdGcWRpNWpiMjF3YVd4bEtHUnZZMnRsY2tOdmJYQnZjMlZEYjIxdGIyNVRjR1ZqVTJOb1pXMWhLVHRjYmlBZ0lDQmpiMjV6ZENCMllXeHBaQ0E5SUhaaGJHbGtZWFJsS0dOdmJYQnZjMlVwTzF4dUlDQWdJR2xtSUNoMllXeHBaQ2tnY21WMGRYSnVJRnRkTzF4dVhHNGdJQ0FnWTI5dWMzUWdaMlYwU0dWc2NGUnZjRXhsZG1Wc1NISmxaaUE5SUNodVlXMWxLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUdKaGMyVkljbVZtSUQwZ0oyaDBkSEJ6T2k4dlpHOWpjeTVrYjJOclpYSXVZMjl0TDJOdmJYQnZjMlV2WTI5dGNHOXpaUzFtYVd4bEx5YzdYRzRnSUNBZ0lDQWdJR2xtSUNodVlXMWxJRDA5UFNBbmMyVnlkbWxqWlhNbktTQnlaWFIxY200Z1lDUjdZbUZ6WlVoeVpXWjlNRFV0YzJWeWRtbGpaWE12WUR0Y2JpQWdJQ0FnSUNBZ2FXWWdLRzVoYldVZ1BUMDlJQ2R1WlhSM2IzSnJjeWNwSUhKbGRIVnliaUJnSkh0aVlYTmxTSEpsWm4wd05pMXVaWFIzYjNKcmN5OWdPMXh1SUNBZ0lDQWdJQ0JwWmlBb2JtRnRaU0E5UFQwZ0ozWnZiSFZ0WlhNbktTQnlaWFIxY200Z1lDUjdZbUZ6WlVoeVpXWjlNRGN0ZG05c2RXMWxjeTlnTzF4dUlDQWdJQ0FnSUNCcFppQW9ibUZ0WlNBOVBUMGdKMk52Ym1acFozTW5LU0J5WlhSMWNtNGdZQ1I3WW1GelpVaHlaV1o5TURndFkyOXVabWxuY3k5Z08xeHVJQ0FnSUNBZ0lDQnBaaUFvYm1GdFpTQTlQVDBnSjNObFkzSmxkSE1uS1NCeVpYUjFjbTRnWUNSN1ltRnpaVWh5WldaOU1Ea3RjMlZqY21WMGN5OWdPMXh1WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJpWVhObFNISmxaanRjYmlBZ0lDQjlPMXh1WEc0Z0lDQWdZMjl1YzNRZ1kyOXRjRzl6WlVSdll5QTlJSGxoYld3dWNHRnljMlZFYjJOMWJXVnVkQ2hqYjI1MFpXNTBMQ0I3SUhCeVpYUjBlVVZ5Y205eWN6b2dkSEoxWlNCOUtUdGNiaUFnSUNCeVpYUjFjbTRnZG1Gc2FXUmhkR1V1WlhKeWIzSnpMbTFoY0Nnb1pYSnlLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0I3SUdsdWMzUmhibU5sVUdGMGFDQjlJRDBnWlhKeU8xeHVJQ0FnSUNBZ0lDQnBaaUFvWlhKeUxtdGxlWGR2Y21RZ1BUMDlJQ2RoWkdScGRHbHZibUZzVUhKdmNHVnlkR2xsY3ljcElHbHVjM1JoYm1ObFVHRjBhQ0FyUFNCZ0x5UjdaWEp5TG5CaGNtRnRjeTVoWkdScGRHbHZibUZzVUhKdmNHVnlkSGw5WUR0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnY0dGeWMyVmtVR0YwYUNBOUlHbHVjM1JoYm1ObFVHRjBhQzV6Y0d4cGRDZ25MeWNwTG5Oc2FXTmxLREVwTzF4dUlDQWdJQ0FnSUNCc1pYUWdibTlrWlNBOUlHTnZiWEJ2YzJWRWIyTXVaMlYwU1c0b2NHRnljMlZrVUdGMGFDd2dkSEoxWlNrN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h1YjJSbElEMDlQU0J1ZFd4c0tTQnViMlJsSUQwZ1kyOXRjRzl6WlVSdll5NW5aWFJKYmlod1lYSnpaV1JRWVhSb0xuTnNhV05sS0RBc0lDMHhLU3dnZEhKMVpTazdYRzRnSUNBZ0lDQWdJR052Ym5OMElIQnZjeUE5SUc1dlpHVWdQeUJ1YjJSbExuSmhibWRsV3pCZElDc2dNU0E2SURBN1hHNGdJQ0FnSUNBZ0lHTnZibk4wSUd4cGJtVWdQU0FvWTI5dWRHVnVkQzV6ZFdKemRISnBibWNvTUN3Z2NHOXpLUzV0WVhSamFDZ3ZYRnh1TDJjcElIeDhJRnRkS1M1c1pXNW5kR2dnS3lBeE8xeHVJQ0FnSUNBZ0lDQnNaWFFnYldWemMyRm5aVHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnljaTVyWlhsM2IzSmtJRDA5UFNBbllXUmthWFJwYjI1aGJGQnliM0JsY25ScFpYTW5LVnh1SUNBZ0lDQWdJQ0FnSUNBZ2JXVnpjMkZuWlNBOUlHQk1hVzVsSUNSN2JHbHVaWDBvSkh0cGJuTjBZVzVqWlZCaGRHaDlLVG9nSnlSN1pYSnlMbkJoY21GdGN5NWhaR1JwZEdsdmJtRnNVSEp2Y0dWeWRIbDlKeUJwY3lCMWJtdHViM2R1SUdadmNpQW5KSHRwYm5OMFlXNWpaVkJoZEdoOUoyQTdYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR1Z5Y2k1clpYbDNiM0prSUQwOVBTQW5abTl5YldGMEp5bGNiaUFnSUNBZ0lDQWdJQ0FnSUcxbGMzTmhaMlVnUFNCZ1RHbHVaU0FrZTJ4cGJtVjlLQ1I3YVc1emRHRnVZMlZRWVhSb2ZTazZJRzExYzNRZ2FHRjJaU0JoSUhaaGJHbGtJSE41Ym5SaGVDQm1iM0lnSnlSN1pYSnlMbkJoY21GdGN5NW1iM0p0WVhSOUoyQTdYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2FXWWdLR1Z5Y2k1clpYbDNiM0prSUQwOVBTQW5iMjVsVDJZbktWeHVJQ0FnSUNBZ0lDQWdJQ0FnYldWemMyRm5aU0E5SUdCTWFXNWxJQ1I3YkdsdVpYMG9KSHRwYm5OMFlXNWpaVkJoZEdoOUtUb2diWFZ6ZENCaVpTQmxhWFJvWlhJZ1lTQlRhRzl5ZENCVGVXNTBZWGdnS0hOMGNtbHVaeWh6S1NrZ2IzSWdZU0JNYjI1bklGTjViblJoZUNBb2IySnFaV04wS0hNcEtXQTdYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2JXVnpjMkZuWlNBOUlHQk1hVzVsSUNSN2JHbHVaWDBvSkh0cGJuTjBZVzVqWlZCaGRHaDlLVG9nSkh0bGNuSXViV1Z6YzJGblpYMGdLQ1I3WlhKeUxtdGxlWGR2Y21SOU9pQWtlMHBUVDA0dWMzUnlhVzVuYVdaNUtHVnljaTV3WVhKaGJYTXBmU2xnTzF4dUlDQWdJQ0FnSUNCamIyNXpkQ0JvWld4d1RHbHVheUE5SUdkbGRFaGxiSEJVYjNCTVpYWmxiRWh5WldZb2NHRnljMlZrVUdGMGFGc3dYU2tnS3lBb2NHRnljMlZrVUdGMGFGc3lYU0EvSUdBakpIdHdZWEp6WldSUVlYUm9XekpkZldBZ09pQW5KeWs3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUI3SUd4cGJtVXNJRzFsYzNOaFoyVXNJR2hsYkhCTWFXNXJJSDA3WEc0Z0lDQWdmU2s3WEc1OU8xeHVYRzVqYjI1emRDQnlaWEJzWVdObFJtOXliV0YwY3lBOUlDaHZZbW9wSUQwK0lIdGNiaUFnSUNCcFppQW9RWEp5WVhrdWFYTkJjbkpoZVNodlltb3BLU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2IySnFMbXhsYm1kMGFEc2dhU0FyUFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYQnNZV05sUm05eWJXRjBjeWh2WW1wYmFWMHBPMXh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdiMkpxSUQwOVBTQW5iMkpxWldOMEp5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2IySnFMblI1Y0dVZ0ppWWdiMkpxTG1admNtMWhkQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiMkpxTG5CaGRIUmxjbTRnUFNCbWIzSnRZWFJ6VzI5aWFpNW1iM0p0WVhSZExuUnZVM1J5YVc1bktDazdYRzRnSUNBZ0lDQWdJQ0FnSUNCa1pXeGxkR1VnYjJKcUxtWnZjbTFoZER0Y2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQlBZbXBsWTNRdWEyVjVjeWh2WW1vcExtWnZja1ZoWTJnb0tHdGxlU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnY21Wd2JHRmpaVVp2Y20xaGRITW9iMkpxVzJ0bGVWMHBPMXh1SUNBZ0lDQWdJQ0I5S1R0Y2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdiMkpxTzF4dWZUdGNibHh1Wlhod2IzSjBJR052Ym5OMElHZGxkRVJ2WTJ0bGNrTnZiWEJ2YzJWVFkyaGxiV0ZYYVhSb2IzVjBSbTl5YldGMGN5QTlJQ2dwSUQwK0lIdGNiaUFnSUNCeVpYUjFjbTRnY21Wd2JHRmpaVVp2Y20xaGRITW9aRzlqYTJWeVEyOXRjRzl6WlVOdmJXMXZibE53WldOVFkyaGxiV0VwTzF4dWZUdGNiaUlzSWk4cUlFQm1iRzkzSUNvdlhHNWNibWx0Y0c5eWRDQjdJSE5sZEVSbFpYQldZV3gxWlN3Z2FHRnVaR3hsUlhoMFpYSnVZV3hPWVcxbElIMGdabkp2YlNBbkxpOTFkR2xzY3ljN1hHNXBiWEJ2Y25RZ2V5Qm5aWFJXYjJ4MWJXVk9ZVzFsUm5KdmJWWnZiSFZ0WlZOd1pXTXNJR2x6VG1GdFpXUldiMngxYldVZ2ZTQm1jbTl0SUNjdUwzWnZiSFZ0WlhWMGFXeHpKenRjYm1sdGNHOXlkQ0I3SUhsaGJXeFFZWEp6WlNCOUlHWnliMjBnSnk0dmVXRnRiSEJoY25ObEp6dGNibWx0Y0c5eWRDQjdJSGxoYld4VGRISnBibWRwWm5rZ2ZTQm1jbTl0SUNjdUwzbGhiV3h6ZEhKcGJtZHBabmtuTzF4dVhHNWxlSEJ2Y25RZ2V5QjVZVzFzUTJobFkyc3NJSGxoYld4UVlYSnpaU0I5SUdaeWIyMGdKeTR2ZVdGdGJIQmhjbk5sSnp0Y2JtVjRjRzl5ZENCN0lIWmhiR2xrWVhSbFJHOWphMlZ5UTI5dGNHOXpaVlJ2UTI5dGJXOXVVM0JsWXl3Z1oyVjBSRzlqYTJWeVEyOXRjRzl6WlZOamFHVnRZVmRwZEdodmRYUkdiM0p0WVhSeklIMGdabkp2YlNBbkxpOTJZV3hwWkdGMFpTYzdYRzVsZUhCdmNuUWdleUJuWlhSV2IyeDFiV1ZPWVcxbFJuSnZiVlp2YkhWdFpWTndaV01zSUdselRtRnRaV1JXYjJ4MWJXVWdmU0JtY205dElDY3VMM1p2YkhWdFpYVjBhV3h6Snp0Y2JtVjRjRzl5ZENCN0lIbGhiV3hUZEhKcGJtZHBabmtnZlNCbWNtOXRJQ2N1TDNsaGJXeHpkSEpwYm1kcFpua25PMXh1WEc0dktpb2dLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEc0Z0tpQk5hV2R5WVhSbElHWnliMjBnUkc5amEyVnlJRU52YlhCdmMyVWdNaTU0SUhSdklETXVlRnh1SUNvdlhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCdGFXZHlZWFJsUm5KdmJWWXllRlJ2VmpONElEMGdLR052Ym5SbGJuUTZJSE4wY21sdVp5d2dZMjl1Wm1sbmRYSmhkR2x2Ymo4NklFTnZibVpwWjNWeVlYUnBiMjRnUFNCdWRXeHNLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdaR0YwWVNBOUlIbGhiV3hRWVhKelpTaGpiMjUwWlc1MEtUdGNiaUFnSUNCcFppQW9JV1JoZEdFcElISmxkSFZ5YmlCamIyNTBaVzUwTzF4dUlDQWdJR2xtSUNoMGVYQmxiMllnWkdGMFlTQTlQVDBnSjNOMGNtbHVaeWNwSUhKbGRIVnliaUJqYjI1MFpXNTBPMXh1SUNBZ0lHbG1JQ2doWkdGMFlTNTJaWEp6YVc5dUlIeDhJR1JoZEdFdWRtVnljMmx2Ymk1emRHRnlkSE5YYVhSb0tDY3pKeWtwSUhKbGRIVnliaUJqYjI1MFpXNTBPMXh1WEc0Z0lDQWdZMjl1YzNRZ2JHOW5jeUE5SUZ0ZE8xeHVJQ0FnSUdOdmJuTjBJR3h2WnlBOUlDaHRaWE56WVdkbEtTQTlQaUJzYjJkekxuQjFjMmdvYldWemMyRm5aU2s3WEc1Y2JpQWdJQ0JQWW1wbFkzUXVhMlY1Y3loa1lYUmhMbk5sY25acFkyVnpLUzVtYjNKRllXTm9LQ2h1WVcxbEtTQTlQaUI3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJSE5sY25acFkyVWdQU0JrWVhSaExuTmxjblpwWTJWelcyNWhiV1ZkTzF4dUlDQWdJQ0FnSUNCcFppQW9jMlZ5ZG1salpTNWpjSFZ6S1NCelpYUkVaV1Z3Vm1Gc2RXVW9jMlZ5ZG1salpTd2dKMlJsY0d4dmVTOXlaWE52ZFhKalpYTXZiR2x0YVhSekwyTndkWE1uTENCelpYSjJhV05sTG1Od2RYTXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyVnlkbWxqWlM1dFpXMWZiR2x0YVhRcElITmxkRVJsWlhCV1lXeDFaU2h6WlhKMmFXTmxMQ0FuWkdWd2JHOTVMM0psYzI5MWNtTmxjeTlzYVcxcGRITXZiV1Z0YjNKNUp5d2djMlZ5ZG1salpTNXRaVzFmYkdsdGFYUXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyVnlkbWxqWlM1d2FXUnpYMnhwYldsMEtTQnpaWFJFWldWd1ZtRnNkV1VvYzJWeWRtbGpaU3dnSjJSbGNHeHZlUzl5WlhOdmRYSmpaWE12YkdsdGFYUnpMM0JwWkhNbkxDQnpaWEoyYVdObExuQnBaSE5mYkdsdGFYUXBPMXh1SUNBZ0lDQWdJQ0JwWmlBb2MyVnlkbWxqWlM1dFpXMWZjbVZ6WlhKMllYUnBiMjRwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sZEVSbFpYQldZV3gxWlNoelpYSjJhV05sTENBblpHVndiRzk1TDNKbGMyOTFjbU5sY3k5eVpYTmxjblpoZEdsdmJuTXZiV1Z0YjNKNUp5d2djMlZ5ZG1salpTNXRaVzFmY21WelpYSjJZWFJwYjI0cE8xeHVJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxjblpwWTJVdWRtOXNkVzFsWDJSeWFYWmxjaWtnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdiRzluS0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCVFpYSjJhV05sSUNSN2JtRnRaWDBnYUdGeklIWnZiSFZ0WlY5a2NtbDJaWEk2Skh0elpYSjJhV05sTG5admJIVnRaVjlrY21sMlpYSjlPaUJKYm5OMFpXRmtJRzltSUhObGRIUnBibWNnZEdobElIWnZiSFZ0WlNCa2NtbDJaWElnYjI0Z2RHaGxJSE5sY25acFkyVXNJR1JsWm1sdVpTQmhJSFp2YkhWdFpTQjFjMmx1WnlCMGFHVWdkRzl3TFd4bGRtVnNJSFp2YkhWdFpYTWdiM0IwYVc5dUlDaG9kSFJ3Y3pvdkwyUnZZM011Wkc5amEyVnlMbU52YlM5amIyMXdiM05sTDJOdmJYQnZjMlV0Wm1sc1pTOWpiMjF3YjNObExXWnBiR1V0ZGpNdkkzWnZiSFZ0WlMxamIyNW1hV2QxY21GMGFXOXVMWEpsWm1WeVpXNWpaU2tnWVc1a0lITndaV05wWm5rZ2RHaGxJR1J5YVhabGNpQjBhR1Z5WlM1Z0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnS1R0Y2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQnpaWEoyYVdObExuWnZiSFZ0WlY5a2NtbDJaWEk3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQnBaaUFvYzJWeWRtbGpaUzUyYjJ4MWJXVnpYMlp5YjIwcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUd4dlp5aGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmdVMlZ5ZG1salpTQWtlMjVoYldWOUlHaGhjeUIyYjJ4MWJXVnpYMlp5YjIwNkpIdHpaWEoyYVdObExuWnZiSFZ0WlhOZlpuSnZiWDBnVkc4Z2MyaGhjbVVnWVNCMmIyeDFiV1VnWW1WMGQyVmxiaUJ6WlhKMmFXTmxjeXdnWkdWbWFXNWxJR2wwSUhWemFXNW5JSFJvWlNCMGIzQXRiR1YyWld3Z2RtOXNkVzFsY3lCdmNIUnBiMjRnS0doMGRIQnpPaTh2Wkc5amN5NWtiMk5yWlhJdVkyOXRMMk52YlhCdmMyVXZZMjl0Y0c5elpTMW1hV3hsTDJOdmJYQnZjMlV0Wm1sc1pTMTJNeThqZG05c2RXMWxMV052Ym1acFozVnlZWFJwYjI0dGNtVm1aWEpsYm1ObEtTQmhibVFnY21WbVpYSmxibU5sSUdsMElHWnliMjBnWldGamFDQnpaWEoyYVdObElIUm9ZWFFnYzJoaGNtVnpJR2wwSUhWemFXNW5JSFJvWlNCelpYSjJhV05sTFd4bGRtVnNJSFp2YkhWdFpYTWdiM0IwYVc5dUlDaG9kSFJ3Y3pvdkwyUnZZM011Wkc5amEyVnlMbU52YlM5amIyMXdiM05sTDJOdmJYQnZjMlV0Wm1sc1pTOWpiMjF3YjNObExXWnBiR1V0ZGpNdkkyUnlhWFpsY2lrdVlDeGNiaUFnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdjMlZ5ZG1salpTNTJiMngxYldWelgyWnliMjA3WEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmpiMjV6ZENCMWJtdFFjbTl3WlhKMGFXVnpJRDBnV3lkamNIVmZjMmhoY21Wekp5d2dKMk53ZFY5eGRXOTBZU2NzSUNkamNIVnpaWFFuTENBbmJXVnRjM2RoY0Y5c2FXMXBkQ2RkTzF4dUlDQWdJQ0FnSUNCMWJtdFFjbTl3WlhKMGFXVnpMbVp2Y2tWaFkyZ29LR3NwSUQwK0lIdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaFBZbXBsWTNRdWNISnZkRzkwZVhCbExtaGhjMDkzYmxCeWIzQmxjblI1TG1OaGJHd29jMlZ5ZG1salpTd2dheWtwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCc2IyY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdCVFpYSjJhV05sSUNSN2JtRnRaWDBnYUdGeklDUjdhMzA2Skh0elpYSjJhV05sTG10OUlGUm9aWE5sSUdoaGRtVWdZbVZsYmlCeVpYQnNZV05sWkNCaWVTQjBhR1VnY21WemIzVnlZMlZ6SUd0bGVTQjFibVJsY2lCa1pYQnNiM2tnS0doMGRIQnpPaTh2Wkc5amN5NWtiMk5yWlhJdVkyOXRMMk52YlhCdmMyVXZZMjl0Y0c5elpTMW1hV3hsTDJOdmJYQnZjMlV0Wm1sc1pTMTJNeThqY21WemIzVnlZMlZ6S1M0Z1pHVndiRzk1SUdOdmJtWnBaM1Z5WVhScGIyNGdiMjVzZVNCMFlXdGxjeUJsWm1abFkzUWdkMmhsYmlCMWMybHVaeUJrYjJOclpYSWdjM1JoWTJzZ1pHVndiRzk1TENCaGJtUWdhWE1nYVdkdWIzSmxaQ0JpZVNCa2IyTnJaWEl0WTI5dGNHOXpaUzVnTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNrN1hHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2MyVnlkbWxqWlZ0clhUdGNiaUFnSUNBZ0lDQWdmU2s3WEc1Y2JpQWdJQ0FnSUNBZ2FXWWdLSE5sY25acFkyVXVaWGgwWlc1a2N5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JHOW5LRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0JUWlhKMmFXTmxJQ1I3Ym1GdFpYMGdhR0Z6SUdWNGRHVnVaSE02Skh0elpYSjJhV05sTG1WNGRHVnVaSE45SUZSb2FYTWdiM0IwYVc5dUlHaGhjeUJpWldWdUlISmxiVzkyWldRZ1ptOXlJSFpsY25OcGIyNDZJRndpTXk1NFhDSWdRMjl0Y0c5elpTQm1hV3hsY3k0Z1JtOXlJRzF2Y21VZ2FXNW1iM0p0WVhScGIyNGdiMjRnWlhoMFpXNWtjeXdnYzJWbElHaDBkSEJ6T2k4dlpHOWpjeTVrYjJOclpYSXVZMjl0TDJOdmJYQnZjMlV2YlhWc2RHbHdiR1V0WTI5dGNHOXpaUzFtYVd4bGN5OWxlSFJsYm1Sekx5NWdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0J6WlhKMmFXTmxMbVY0ZEdWdVpITTdYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tITmxjblpwWTJVdVozSnZkWEJmWVdSa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCc2IyY29YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZRk5sY25acFkyVWdKSHR1WVcxbGZTQm9ZWE1nWjNKdmRYQmZZV1JrT2lSN2MyVnlkbWxqWlM1bmNtOTFjRjloWkdSOUlGUm9hWE1nYjNCMGFXOXVJR2hoY3lCaVpXVnVJSEpsYlc5MlpXUWdabTl5SUhabGNuTnBiMjQ2SUZ3aU15NTRYQ0lnUTI5dGNHOXpaU0JtYVd4bGN5NWdMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0tUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0J6WlhKMmFXTmxMbWR5YjNWd1gyRmtaRHRjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCelpYSjJhV05sTG1Od2RYTTdYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQnpaWEoyYVdObExtMWxiVjlzYVcxcGREdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElITmxjblpwWTJVdWNHbGtjMTlzYVcxcGREdGNiaUFnSUNBZ0lDQWdaR1ZzWlhSbElITmxjblpwWTJVdWJXVnRYM0psYzJWeWRtRjBhVzl1TzF4dUlDQWdJSDBwTzF4dVhHNGdJQ0FnWkdGMFlTNTJaWEp6YVc5dUlEMGdKek1uTzF4dUlDQWdJR2hoYm1Sc1pVVjRkR1Z5Ym1Gc1RtRnRaU2hrWVhSaExDQW5ibVYwZDI5eWEzTW5LVHRjYmlBZ0lDQm9ZVzVrYkdWRmVIUmxjbTVoYkU1aGJXVW9aR0YwWVN3Z0ozWnZiSFZ0WlhNbktUdGNibHh1SUNBZ0lDOHZJRlJQUkU4Z09pQnNhVzVyWDJ4dlkyRnNYMmx3Y3lCcGJpQnVaWFIzYjNKcmN6b2dWR2hwY3lCdmNIUnBiMjRnYUdGeklHNXZkQ0JpWldWdUlHbHVkSEp2WkhWalpXUWdhVzRnZG1WeWMybHZiam9nWENJekxuaGNJaUJEYjIxd2IzTmxJR1pwYkdWekxseHVYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ2JHOW5jeTV0WVhBb0tHMHBJRDArSUdBaklDUjdiUzV5WlhCc1lXTmxLQzljWEc0dlp5d2dKMXhjYmlNbktYMWdLUzVxYjJsdUtDZGNYRzRuS1NBclhHNGdJQ0FnSUNBZ0lDaHNiMmR6TG14bGJtZDBhQ0ErSURBZ1B5QW5YRnh1SnlBNklDY25LU0FyWEc0Z0lDQWdJQ0FnSUhsaGJXeFRkSEpwYm1kcFpua29aR0YwWVN3Z1kyOXVabWxuZFhKaGRHbHZiaWxjYmlBZ0lDQXBPMXh1ZlR0Y2JseHVMeW9xSUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHVJQ29nVFdsbmNtRjBaU0JtY205dElFUnZZMnRsY2lCRGIyMXdiM05sSURNdWVDQjBieUF5TG5oY2JpQXFMMXh1WEc1bGVIQnZjblFnWTI5dWMzUWdiV2xuY21GMFpVWnliMjFXTTNoVWIxWXllQ0E5SUNoamIyNTBaVzUwT2lCemRISnBibWNzSUdOdmJtWnBaM1Z5WVhScGIyNC9PaUJEYjI1bWFXZDFjbUYwYVc5dUlEMGdiblZzYkNrZ1BUNGdlMXh1SUNBZ0lHTnZibk4wSUdSaGRHRWdQU0I1WVcxc1VHRnljMlVvWTI5dWRHVnVkQ2s3WEc0Z0lDQWdhV1lnS0NGa1lYUmhLU0J5WlhSMWNtNGdZMjl1ZEdWdWREdGNiaUFnSUNCcFppQW9kSGx3Wlc5bUlHUmhkR0VnUFQwOUlDZHpkSEpwYm1jbktTQnlaWFIxY200Z1kyOXVkR1Z1ZER0Y2JpQWdJQ0JwWmlBb0lXUmhkR0V1ZG1WeWMybHZiaUI4ZkNCa1lYUmhMblpsY25OcGIyNHVjM1JoY25SelYybDBhQ2duTWljcElIeDhJQ0ZrWVhSaExuTmxjblpwWTJWektTQnlaWFIxY200Z1kyOXVkR1Z1ZER0Y2JseHVJQ0FnSUU5aWFtVmpkQzVyWlhsektHUmhkR0V1YzJWeWRtbGpaWE1wTG1admNrVmhZMmdvS0c1aGJXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWeWRtbGpaU0E5SUdSaGRHRXVjMlZ5ZG1salpYTmJibUZ0WlYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6WlhKMmFXTmxMbVJsY0d4dmVTQW1KaUJ6WlhKMmFXTmxMbVJsY0d4dmVTNXlaWE52ZFhKalpYTXBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnZibk4wSUhzZ2NtVnpiM1Z5WTJWeklIMGdQU0J6WlhKMmFXTmxMbVJsY0d4dmVUdGNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHlaWE52ZFhKalpYTXViR2x0YVhSektTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hKbGMyOTFjbU5sY3k1c2FXMXBkSE11WTNCMWN5a2djMlZ5ZG1salpTNWpjSFZ6SUQwZ2NtVnpiM1Z5WTJWekxteHBiV2wwY3k1amNIVnpPMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoeVpYTnZkWEpqWlhNdWJHbHRhWFJ6TG0xbGJXOXllU2tnYzJWeWRtbGpaUzV0WlcxZmJHbHRhWFFnUFNCeVpYTnZkWEpqWlhNdWJHbHRhWFJ6TG0xbGJXOXllVHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpiM1Z5WTJWekxteHBiV2wwY3k1d2FXUnpLU0J6WlhKMmFXTmxMbkJwWkhOZmJHbHRhWFFnUFNCeVpYTnZkWEpqWlhNdWJHbHRhWFJ6TG5CcFpITTdYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpiM1Z5WTJWekxuSmxjMlZ5ZG1GMGFXOXVjeUFtSmlCeVpYTnZkWEpqWlhNdWNtVnpaWEoyWVhScGIyNXpMbTFsYlc5eWVTa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sY25acFkyVXViV1Z0WDNKbGMyVnlkbUYwYVc5dUlEMGdjbVZ6YjNWeVkyVnpMbkpsYzJWeWRtRjBhVzl1Y3k1dFpXMXZjbms3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWeWRtbGpaUzVrWlhCc2Iza2dKaVpjYmlBZ0lDQWdJQ0FnSUNBZ0lITmxjblpwWTJVdVpHVndiRzk1TG5KbGMzUmhjblJmY0c5c2FXTjVJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWEoyYVdObExtUmxjR3h2ZVM1eVpYTjBZWEowWDNCdmJHbGplUzVqYjI1a2FYUnBiMjRnSmlaY2JpQWdJQ0FnSUNBZ0lDQWdJQ0Z6WlhKMmFXTmxMbkpsYzNSaGNuUmNiaUFnSUNBZ0lDQWdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWEoyYVdObExuSmxjM1JoY25RZ1BTQnpaWEoyYVdObExtUmxjR3h2ZVM1eVpYTjBZWEowWDNCdmJHbGplUzVqYjI1a2FYUnBiMjQ3WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ1pHVnNaWFJsSUhObGNuWnBZMlV1WkdWd2JHOTVPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdaR0YwWVM1MlpYSnphVzl1SUQwZ0p6SXVOQ2M3WEc1Y2JpQWdJQ0JvWVc1a2JHVkZlSFJsY201aGJFNWhiV1VvWkdGMFlTd2dKMjVsZEhkdmNtdHpKeWs3WEc0Z0lDQWdhR0Z1Wkd4bFJYaDBaWEp1WVd4T1lXMWxLR1JoZEdFc0lDZDJiMngxYldWekp5azdYRzVjYmlBZ0lDQnlaWFIxY200Z2VXRnRiRk4wY21sdVoybG1lU2hrWVhSaExDQmpiMjVtYVdkMWNtRjBhVzl1S1R0Y2JuMDdYRzVjYmk4cUtpQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaXBjYmlBcUlFMXBaM0poZEdVZ1puSnZiU0JFYjJOclpYSWdRMjl0Y0c5elpTQldNU0IwYnlBeUxuaGNiaUFxSUhSaGEyVnVJR1p5YjIwZ2FIUjBjSE02THk5bmFYUm9kV0l1WTI5dEwyUnVaWEJvYVc0dlkyOXRjRzl6WlM5aWJHOWlMMjFoYzNSbGNpOWpiMjUwY21saUwyMXBaM0poZEdsdmJpOXRhV2R5WVhSbExXTnZiWEJ2YzJVdFptbHNaUzEyTVMxMGJ5MTJNaTV3ZVZ4dUlDb3ZYRzVjYm1aMWJtTjBhVzl1SUhkaGNtNUdiM0pNYVc1cmN5aHVZVzFsT2lCemRISnBibWNzSUhObGNuWnBZMlU2SUdGdWVTd2diRzluT2lBb2JYTm5PaUJ6ZEhKcGJtY3BJRDArSUhadmFXUXBJSHRjYmlBZ0lDQmpiMjV6ZENCN0lHeHBibXR6SUgwZ1BTQnpaWEoyYVdObE8xeHVJQ0FnSUdsbUlDaHNhVzVyY3lrZ2UxeHVJQ0FnSUNBZ0lDQmpiMjV6ZENCbGVHRnRjR3hsVTJWeWRtbGpaU0E5SUd4cGJtdHpXekJkTG5Od2JHbDBLQ2M2SnlsYk1GMDdYRzRnSUNBZ0lDQWdJR3h2WnloY2JpQWdJQ0FnSUNBZ0lDQWdJR0JUWlhKMmFXTmxJQ1I3Ym1GdFpYMGdhR0Z6SUd4cGJtdHpMQ0IzYUdsamFDQnVieUJzYjI1blpYSWdZM0psWVhSbElHVnVkbWx5YjI1dFpXNTBJSFpoY21saFlteGxjeUJ6ZFdOb0lHRnpJQ1I3WlhoaGJYQnNaVk5sY25acFkyVXVkRzlWY0hCbGNrTmhjMlVvS1gxZlVFOVNWQzRnU1dZZ2VXOTFJR0Z5WlNCMWMybHVaeUIwYUc5elpTQnBiaUI1YjNWeUlHRndjR3hwWTJGMGFXOXVJR052WkdVc0lIbHZkU0J6YUc5MWJHUWdhVzV6ZEdWaFpDQmpiMjV1WldOMElHUnBjbVZqZEd4NUlIUnZJSFJvWlNCb2IzTjBibUZ0WlN3Z1pTNW5MaUFuSkh0bGVHRnRjR3hsVTJWeWRtbGpaWDBuTG1Bc1hHNGdJQ0FnSUNBZ0lDazdYRzRnSUNBZ2ZWeHVmVnh1WEc1bWRXNWpkR2x2YmlCM1lYSnVSbTl5UlhoMFpYSnVZV3hNYVc1cmN5aHVZVzFsT2lCemRISnBibWNzSUhObGNuWnBZMlU2SUdGdWVTd2diRzluT2lBb2JYTm5PaUJ6ZEhKcGJtY3BJRDArSUhadmFXUXBJSHRjYmlBZ0lDQmpiMjV6ZENCbGVIUmxjbTVoYkV4cGJtdHpJRDBnYzJWeWRtbGpaUzVsZUhSbGNtNWhiRjlzYVc1cmN6dGNiaUFnSUNCcFppQW9aWGgwWlhKdVlXeE1hVzVyY3lrZ2UxeHVJQ0FnSUNBZ0lDQnNiMmNvWEc0Z0lDQWdJQ0FnSUNBZ0lDQmdVMlZ5ZG1salpTQWtlMjVoYldWOUlHaGhjeUJsZUhSbGNtNWhiRjlzYVc1cmN6b2dKSHRsZUhSbGNtNWhiRXhwYm10emZTd2dkMmhwWTJnZ2JtOTNJSGR2Y21zZ2MyeHBaMmgwYkhrZ1pHbG1abVZ5Wlc1MGJIa3VJRWx1SUhCaGNuUnBZM1ZzWVhJc0lIUjNieUJqYjI1MFlXbHVaWEp6SUcxMWMzUWdZbVVnWTI5dWJtVmpkR1ZrSUhSdklHRjBJR3hsWVhOMElHOXVaU0J1WlhSM2IzSnJJR2x1SUdOdmJXMXZiaUIwYnlCamIyMXRkVzVwWTJGMFpTd2daWFpsYmlCcFppQmxlSEJzYVdOcGRHeDVJR3hwYm10bFpDQjBiMmRsZEdobGNpNWNYRzVjWEc1RmFYUm9aWElnWTI5dWJtVmpkQ0IwYUdVZ1pYaDBaWEp1WVd3Z1kyOXVkR0ZwYm1WeUlIUnZJSGx2ZFhJZ1lYQndKM01nWkdWbVlYVnNkQ0J1WlhSM2IzSnJMQ0J2Y2lCamIyNXVaV04wSUdKdmRHZ2dkR2hsSUdWNGRHVnlibUZzSUdOdmJuUmhhVzVsY2lCaGJtUWdlVzkxY2lCelpYSjJhV05sSjNNZ1kyOXVkR0ZwYm1WeWN5QjBieUJoSUhCeVpTMWxlR2x6ZEdsdVp5QnVaWFIzYjNKckxpQlRaV1VnYUhSMGNITTZMeTlrYjJOekxtUnZZMnRsY2k1amIyMHZZMjl0Y0c5elpTOXVaWFIzYjNKcmFXNW5MeUJtYjNJZ2JXOXlaU0J2YmlCb2IzY2dkRzhnWkc4Z2RHaHBjeTVnTEZ4dUlDQWdJQ0FnSUNBcE8xeHVJQ0FnSUgxY2JuMWNibHh1Wm5WdVkzUnBiMjRnY21WM2NtbDBaVTVsZENoelpYSjJhV05sT2lCaGJua3NJSE5sY25acFkyVk9ZVzFsY3pvZ2MzUnlhVzVuVzEwcElIdGNiaUFnSUNCcFppQW9jMlZ5ZG1salpTNXVaWFFwSUh0Y2JpQWdJQ0FnSUNBZ2JHVjBJRzVsZEhkdmNtdE5iMlJsSUQwZ2MyVnlkbWxqWlM1dVpYUTdYRzVjYmlBZ0lDQWdJQ0FnTHk4Z1hDSmpiMjUwWVdsdVpYSTZQSE5sY25acFkyVWdibUZ0WlQ1Y0lpQnBjeUJ1YjNjZ1hDSnpaWEoyYVdObE9qeHpaWEoyYVdObElHNWhiV1UrWENKY2JpQWdJQ0FnSUNBZ2FXWWdLRzVsZEhkdmNtdE5iMlJsTG5OMFlYSjBjMWRwZEdnb0oyTnZiblJoYVc1bGNqb25LU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2JtRnRaU0E5SUc1bGRIZHZjbXROYjJSbExuTndiR2wwS0NjNkp5bGJNVjA3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWeWRtbGpaVTVoYldWekxtbHVZMngxWkdWektHNWhiV1VwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JtVjBkMjl5YTAxdlpHVWdQU0JnYzJWeWRtbGpaVG9rZTI1aGJXVjlZRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUhObGNuWnBZMlV1Ym1WMGQyOXlhMTl0YjJSbElEMGdibVYwZDI5eWEwMXZaR1U3WEc0Z0lDQWdJQ0FnSUdSbGJHVjBaU0J6WlhKMmFXTmxMbTVsZER0Y2JpQWdJQ0I5WEc1OVhHNWNibVoxYm1OMGFXOXVJSEpsZDNKcGRHVkNkV2xzWkNoelpYSjJhV05sT2lCaGJua3BJSHRjYmlBZ0lDQnBaaUFvYzJWeWRtbGpaUzVrYjJOclpYSm1hV3hsS1NCN1hHNGdJQ0FnSUNBZ0lITmxjblpwWTJVdVluVnBiR1FnUFNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JqYjI1MFpYaDBPaUJ6WlhKMmFXTmxMbUoxYVd4a0xGeHVJQ0FnSUNBZ0lDQWdJQ0FnWkc5amEyVnlabWxzWlRvZ2MyVnlkbWxqWlM1a2IyTnJaWEptYVd4bExGeHVJQ0FnSUNBZ0lDQjlPMXh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdjMlZ5ZG1salpTNWtiMk5yWlhKbWFXeGxPMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVjNjbWwwWlV4dloyZHBibWNvYzJWeWRtbGpaVG9nWVc1NUtTQjdYRzRnSUNBZ2FXWWdLSE5sY25acFkyVXViRzluWDJSeWFYWmxjaWtnZTF4dUlDQWdJQ0FnSUNCelpYSjJhV05sTG14dloyZHBibWNnUFNCN0lHUnlhWFpsY2pvZ2MyVnlkbWxqWlM1c2IyZGZaSEpwZG1WeUlIMDdYRzRnSUNBZ0lDQWdJR2xtSUNoelpYSjJhV05sTG14dloxOXZjSFFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE5sY25acFkyVXViRzluWjJsdVp5NXZjSFJwYjI1eklEMGdjMlZ5ZG1salpTNXNiMmRmYjNCME8xeHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWc1pYUmxJSE5sY25acFkyVXViRzluWDI5d2REdGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0JrWld4bGRHVWdjMlZ5ZG1salpTNXNiMmRmWkhKcGRtVnlPMXh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z2NtVjNjbWwwWlZadmJIVnRaWE5HY205dEtITmxjblpwWTJVNklHRnVlU3dnYzJWeWRtbGpaVTVoYldWek9pQnpkSEpwYm1kYlhTa2dlMXh1SUNBZ0lHbG1JQ2h6WlhKMmFXTmxMblp2YkhWdFpYTmZabkp2YlNrZ2UxeHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBaSGdnUFNBd095QnBaSGdnUENCelpYSjJhV05sTG5admJIVnRaWE5mWm5KdmJTNXNaVzVuZEdnN0lHbGtlQ0FyUFNBeEtTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNCamIyNXpkQ0IyYjJ4MWJXVkdjbTl0SUQwZ2MyVnlkbWxqWlM1MmIyeDFiV1Z6WDJaeWIyMWJhV1I0WFR0Y2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaGMyVnlkbWxqWlU1aGJXVnpMbWx1WTJ4MVpHVnpLSFp2YkhWdFpVWnliMjB1YzNCc2FYUW9Kem9uS1Zzd1hTa3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6WlhKMmFXTmxMblp2YkhWdFpYTmZabkp2YlZ0cFpIaGRJRDBnWUdOdmJuUmhhVzVsY2pva2UzWnZiSFZ0WlVaeWIyMTlZRHRjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lIMWNibjFjYmx4dVpuVnVZM1JwYjI0Z1oyVjBUbUZ0WldSV2IyeDFiV1Z6S0hObGNuWnBZMlZ6T2lCaGJua3BJSHRjYmlBZ0lDQmpiMjV6ZENCMmIyeDFiV1ZUY0dWamN5QTlJRnRkTzF4dUlDQWdJRTlpYW1WamRDNTJZV3gxWlhNb2MyVnlkbWxqWlhNcExtWnZja1ZoWTJnb0tITmxjblpwWTJVcElEMCtJQ2h6WlhKMmFXTmxMblp2YkhWdFpYTWdmSHdnVzEwcExtWnZja1ZoWTJnb0tIWnZiSFZ0WlNrZ1BUNGdkbTlzZFcxbFUzQmxZM011Y0hWemFDaDJiMngxYldVcEtTazdYRzVjYmlBZ0lDQmpiMjV6ZENCdVlXMWxjeUE5SUc1bGR5QlRaWFFvWEc0Z0lDQWdJQ0FnSUhadmJIVnRaVk53WldOekxtMWhjQ2dvYzNCbFl5a2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl1YzNRZ2MyOTFjbU5sSUQwZ1oyVjBWbTlzZFcxbFRtRnRaVVp5YjIxV2IyeDFiV1ZUY0dWaktITndaV01wTzF4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHbHpUbUZ0WldSV2IyeDFiV1VvYzI5MWNtTmxLU0EvSUhOdmRYSmpaU0E2SUhWdVpHVm1hVzVsWkR0Y2JpQWdJQ0FnSUNBZ2ZTa3NYRzRnSUNBZ0tUdGNibHh1SUNBZ0lISmxkSFZ5YmlCQmNuSmhlUzVtY205dEtHNWhiV1Z6S1Z4dUlDQWdJQ0FnSUNBdVptbHNkR1Z5S0NodVlXMWxLU0E5UGlCdVlXMWxLVnh1SUNBZ0lDQWdJQ0F1YldGd0tDaHVZVzFsS1NBOVBpQW9leUJiYm1GdFpWMDZJSHNnWlhoMFpYSnVZV3c2SUhSeWRXVXNJRzVoYldVZ2ZTQjlLU2s3WEc1OVhHNWNibVoxYm1OMGFXOXVJR055WldGMFpWWnZiSFZ0WlhOVFpXTjBhVzl1S0dSaGRHRTZJR0Z1ZVN3Z2JHOW5PaUFvYlhObk9pQnpkSEpwYm1jcElEMCtJSFp2YVdRcElIdGNiaUFnSUNCamIyNXpkQ0J1WVcxbFpGWnZiSFZ0WlhNZ1BTQm5aWFJPWVcxbFpGWnZiSFZ0WlhNb1pHRjBZUzV6WlhKMmFXTmxjeWs3WEc0Z0lDQWdhV1lnS0c1aGJXVmtWbTlzZFcxbGN5NXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUdOdmJuTjBJRzVoYldWa1ZtOXNkVzFsYzA1aGJXVnpJRDBnYm1GdFpXUldiMngxYldWekxtMWhjQ2dvZGlrZ1BUNGdTbE5QVGk1emRISnBibWRwWm5rb2Rpa3BMbXB2YVc0b0p5d25LVHRjYmlBZ0lDQWdJQ0FnYkc5bktGeHVJQ0FnSUNBZ0lDQWdJQ0FnWUU1aGJXVmtJSFp2YkhWdFpYTWdLQ1I3Ym1GdFpXUldiMngxYldWelRtRnRaWE45S1NCdGRYTjBJR0psSUdWNGNHeHBZMmwwYkhrZ1pHVmpiR0Z5WldRdUlFTnlaV0YwYVc1bklHRWdKM1p2YkhWdFpYTW5JSE5sWTNScGIyNGdkMmwwYUNCa1pXTnNZWEpoZEdsdmJuTXVYRnh1WEZ4dVJtOXlJR0poWTJ0M1lYSmtjeTFqYjIxd1lYUnBZbWxzYVhSNUxDQjBhR1Y1SjNabElHSmxaVzRnWkdWamJHRnlaV1FnWVhNZ1pYaDBaWEp1WVd3dUlFbG1JSGx2ZFNCa2IyNG5kQ0J0YVc1a0lIUm9aU0IyYjJ4MWJXVWdibUZ0WlhNZ1ltVnBibWNnY0hKbFptbDRaV1FnZDJsMGFDQjBhR1VnY0hKdmFtVmpkQ0J1WVcxbExDQjViM1VnWTJGdUlISmxiVzkyWlNCMGFHVWdKMlY0ZEdWeWJtRnNKeUJ2Y0hScGIyNGdabkp2YlNCbFlXTm9JRzl1WlM1Z0xGeHVJQ0FnSUNBZ0lDQXBPMXh1SUNBZ0lDQWdJQ0JrWVhSaExuWnZiSFZ0WlhNZ1BTQnVZVzFsWkZadmJIVnRaWE03WEc0Z0lDQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1kyOXVjM1FnYldsbmNtRjBaVVp5YjIxV01WUnZWako0SUQwZ0tHTnZiblJsYm5RNklITjBjbWx1Wnl3Z1kyOXVabWxuZFhKaGRHbHZiajg2SUVOdmJtWnBaM1Z5WVhScGIyNGdQU0J1ZFd4c0tTQTlQaUI3WEc0Z0lDQWdZMjl1YzNRZ1pHRjBZU0E5SUhsaGJXeFFZWEp6WlNoamIyNTBaVzUwS1R0Y2JseHVJQ0FnSUdsbUlDZ2haR0YwWVNrZ2NtVjBkWEp1SUdOdmJuUmxiblE3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJrWVhSaElEMDlQU0FuYzNSeWFXNW5KeWtnY21WMGRYSnVJR052Ym5SbGJuUTdYRzRnSUNBZ2FXWWdLRTlpYW1WamRDNXdjbTkwYjNSNWNHVXVhR0Z6VDNkdVVISnZjR1Z5ZEhrdVkyRnNiQ2hrWVhSaExDQW5jMlZ5ZG1salpYTW5LU2tnY21WMGRYSnVJR052Ym5SbGJuUTdYRzVjYmlBZ0lDQmpiMjV6ZENCelpYSjJhV05sVG1GdFpYTWdQU0JQWW1wbFkzUXVhMlY1Y3loa1lYUmhLVHRjYmx4dUlDQWdJR052Ym5OMElHeHZaM01nUFNCYlhUdGNiaUFnSUNCamIyNXpkQ0JzYjJjZ1BTQW9iV1Z6YzJGblpTa2dQVDRnYkc5bmN5NXdkWE5vS0cxbGMzTmhaMlVwTzF4dVhHNGdJQ0FnVDJKcVpXTjBMbXRsZVhNb1pHRjBZU2t1Wm05eVJXRmphQ2dvYm1GdFpTa2dQVDRnZTF4dUlDQWdJQ0FnSUNCM1lYSnVSbTl5VEdsdWEzTW9ibUZ0WlN3Z1pHRjBZVnR1WVcxbFhTd2diRzluS1R0Y2JpQWdJQ0FnSUNBZ2QyRnlia1p2Y2tWNGRHVnlibUZzVEdsdWEzTW9ibUZ0WlN3Z1pHRjBZVnR1WVcxbFhTd2diRzluS1R0Y2JpQWdJQ0FnSUNBZ2NtVjNjbWwwWlU1bGRDaGtZWFJoVzI1aGJXVmRMQ0J6WlhKMmFXTmxUbUZ0WlhNcE8xeHVJQ0FnSUNBZ0lDQnlaWGR5YVhSbFFuVnBiR1FvWkdGMFlWdHVZVzFsWFNrN1hHNGdJQ0FnSUNBZ0lISmxkM0pwZEdWTWIyZG5hVzVuS0dSaGRHRmJibUZ0WlYwcE8xeHVJQ0FnSUNBZ0lDQnlaWGR5YVhSbFZtOXNkVzFsYzBaeWIyMG9aR0YwWVZ0dVlXMWxYU3dnYzJWeWRtbGpaVTVoYldWektUdGNiaUFnSUNCOUtUdGNibHh1SUNBZ0lHTnZibk4wSUhObGNuWnBZMlZ6SUQwZ2UzMDdYRzRnSUNBZ1QySnFaV04wTG10bGVYTW9aR0YwWVNrdVptOXlSV0ZqYUNnb2JtRnRaU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnpaWEoyYVdObGMxdHVZVzFsWFNBOUlHUmhkR0ZiYm1GdFpWMDdYRzRnSUNBZ0lDQWdJR1JsYkdWMFpTQmtZWFJoVzI1aGJXVmRPMXh1SUNBZ0lIMHBPMXh1WEc0Z0lDQWdaR0YwWVM1MlpYSnphVzl1SUQwZ0p6SXVOQ2M3WEc0Z0lDQWdaR0YwWVM1elpYSjJhV05sY3lBOUlITmxjblpwWTJWek8xeHVJQ0FnSUdOeVpXRjBaVlp2YkhWdFpYTlRaV04wYVc5dUtHUmhkR0VzSUd4dlp5azdYRzVjYmlBZ0lDQm9ZVzVrYkdWRmVIUmxjbTVoYkU1aGJXVW9aR0YwWVN3Z0oyNWxkSGR2Y210ekp5azdYRzRnSUNBZ2FHRnVaR3hsUlhoMFpYSnVZV3hPWVcxbEtHUmhkR0VzSUNkMmIyeDFiV1Z6SnlrN1hHNWNiaUFnSUNCeVpYUjFjbTRnS0Z4dUlDQWdJQ0FnSUNCc2IyZHpMbTFoY0Nnb2JTa2dQVDRnWUNNZ0pIdHRMbkpsY0d4aFkyVW9MMXhjYmk5bkxDQW5YRnh1SXljcGZXQXBMbXB2YVc0b0oxeGNiaWNwSUN0Y2JpQWdJQ0FnSUNBZ0tHeHZaM011YkdWdVozUm9JRDRnTUNBL0lDZGNYRzRuSURvZ0p5Y3BJQ3RjYmlBZ0lDQWdJQ0FnZVdGdGJGTjBjbWx1WjJsbWVTaGtZWFJoTENCamIyNW1hV2QxY21GMGFXOXVLVnh1SUNBZ0lDazdYRzU5TzF4dVhHNHZLaW9nS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhHNGdLaUJOYVdkeVlYUmxJR1p5YjIwZ1JHOWphMlZ5SUVOdmJYQnZjMlVnZEc4Z1ZqSWdRMjl0Ylc5dVUzQmxZMXh1SUNvdlhHNWNibVY0Y0c5eWRDQmpiMjV6ZENCdGFXZHlZWFJsVkc5RGIyMXRiMjVUY0dWaklEMGdLR052Ym5SbGJuUTZJSE4wY21sdVp5d2dZMjl1Wm1sbmRYSmhkR2x2Ymo4NklFTnZibVpwWjNWeVlYUnBiMjRnUFNCdWRXeHNLU0E5UGlCN1hHNGdJQ0FnWTI5dWMzUWdjbVZ6ZFd4MElEMGdiV2xuY21GMFpVWnliMjFXTVZSdlZqSjRLR052Ym5SbGJuUXNJR052Ym1acFozVnlZWFJwYjI0cE8xeHVYRzRnSUNBZ1kyOXVjM1FnWkdGMFlTQTlJSGxoYld4UVlYSnpaU2h5WlhOMWJIUXBPMXh1SUNBZ0lHbG1JQ2doWkdGMFlTa2djbVYwZFhKdUlHTnZiblJsYm5RN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCa1lYUmhJRDA5UFNBbmMzUnlhVzVuSnlrZ2NtVjBkWEp1SUdOdmJuUmxiblE3WEc1Y2JpQWdJQ0JqYjI1emRDQnNiMmR6SUQwZ2NtVnpkV3gwTG0xaGRHTm9LQzllWEZ4ektpTmJYbHhjY2x4Y2JsMHFMMmR0S1NCOGZDQmJYVHRjYmlBZ0lDQXZMeUJqYjI1emRDQnNiMmNnUFNCdFpYTnpZV2RsSUQwK0lHeHZaM011Y0hWemFDaHRaWE56WVdkbEtUdGNibHh1SUNBZ0lFOWlhbVZqZEM1clpYbHpLR1JoZEdFdWMyVnlkbWxqWlhNZ2ZId2dXMTBwTG1admNrVmhZMmdvS0c1aGJXVXBJRDArSUh0Y2JpQWdJQ0FnSUNBZ1kyOXVjM1FnYzJWeWRtbGpaU0E5SUdSaGRHRXVjMlZ5ZG1salpYTmJibUZ0WlYwN1hHNGdJQ0FnSUNBZ0lHbG1JQ2h6WlhKMmFXTmxMbU53ZFhNcElITmxkRVJsWlhCV1lXeDFaU2h6WlhKMmFXTmxMQ0FuWkdWd2JHOTVMM0psYzI5MWNtTmxjeTlzYVcxcGRITXZZM0IxY3ljc0lITmxjblpwWTJVdVkzQjFjeWs3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaWEoyYVdObExtMWxiVjlzYVcxcGRDa2djMlYwUkdWbGNGWmhiSFZsS0hObGNuWnBZMlVzSUNka1pYQnNiM2t2Y21WemIzVnlZMlZ6TDJ4cGJXbDBjeTl0WlcxdmNua25MQ0J6WlhKMmFXTmxMbTFsYlY5c2FXMXBkQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaWEoyYVdObExuQnBaSE5mYkdsdGFYUXBJSE5sZEVSbFpYQldZV3gxWlNoelpYSjJhV05sTENBblpHVndiRzk1TDNKbGMyOTFjbU5sY3k5c2FXMXBkSE12Y0dsa2N5Y3NJSE5sY25acFkyVXVjR2xrYzE5c2FXMXBkQ2s3WEc0Z0lDQWdJQ0FnSUdsbUlDaHpaWEoyYVdObExtMWxiVjl5WlhObGNuWmhkR2x2YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMFJHVmxjRlpoYkhWbEtITmxjblpwWTJVc0lDZGtaWEJzYjNrdmNtVnpiM1Z5WTJWekwzSmxjMlZ5ZG1GMGFXOXVjeTl0WlcxdmNua25MQ0J6WlhKMmFXTmxMbTFsYlY5eVpYTmxjblpoZEdsdmJpazdYRzRnSUNBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnYzJWeWRtbGpaUzVqY0hWek8xeHVJQ0FnSUNBZ0lDQmtaV3hsZEdVZ2MyVnlkbWxqWlM1dFpXMWZiR2x0YVhRN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCelpYSjJhV05sTG5CcFpITmZiR2x0YVhRN1hHNGdJQ0FnSUNBZ0lHUmxiR1YwWlNCelpYSjJhV05sTG0xbGJWOXlaWE5sY25aaGRHbHZianRjYmlBZ0lDQjlLVHRjYmx4dUlDQWdJR052Ym5OMElHOTFkSEIxZENBOUlIc2dibUZ0WlRvZ0p6eDViM1Z5SUhCeWIycGxZM1FnYm1GdFpUNG5MQ0F1TGk1a1lYUmhJSDA3WEc1Y2JpQWdJQ0JrWld4bGRHVWdiM1YwY0hWMExuWmxjbk5wYjI0N1hHNWNiaUFnSUNCb1lXNWtiR1ZGZUhSbGNtNWhiRTVoYldVb2IzVjBjSFYwTENBbmJtVjBkMjl5YTNNbktUdGNiaUFnSUNCb1lXNWtiR1ZGZUhSbGNtNWhiRTVoYldVb2IzVjBjSFYwTENBbmRtOXNkVzFsY3ljcE8xeHVYRzRnSUNBZ2NtVjBkWEp1SUNoY2JpQWdJQ0FnSUNBZ2JHOW5jeTV0WVhBb0tHMHBJRDArSUdBaklDUjdiUzV5WlhCc1lXTmxLQzllWEZ4ektpTmNYSE1yTDJjc0lDY25LWDFnS1M1cWIybHVLQ2RjWEc0bktTQXJYRzRnSUNBZ0lDQWdJQ2hzYjJkekxteGxibWQwYUNBK0lEQWdQeUFuWEZ4dUp5QTZJQ2NuS1NBclhHNGdJQ0FnSUNBZ0lIbGhiV3hUZEhKcGJtZHBabmtvYjNWMGNIVjBMQ0JqYjI1bWFXZDFjbUYwYVc5dUtWeHVJQ0FnSUNrN1hHNTlPMXh1WEc0dktpQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlIdGNiaUFnSUNCdGFXZHlZWFJsVkc5RGIyMXRiMjVUY0dWakxGeHVJQ0FnSUcxcFozSmhkR1ZHY205dFZqRlViMVl5ZUN4Y2JpQWdJQ0J0YVdkeVlYUmxSbkp2YlZZemVGUnZWako0TEZ4dUlDQWdJRzFwWjNKaGRHVkdjbTl0VmpKNFZHOVdNM2dzWEc0Z0lDQWdlV0Z0YkVOb1pXTnJMRnh1SUNBZ0lHZGxkRlp2YkhWdFpVNWhiV1ZHY205dFZtOXNkVzFsVTNCbFl5eGNiaUFnSUNCcGMwNWhiV1ZrVm05c2RXMWxMRnh1SUNBZ0lIWmhiR2xrWVhSbFJHOWphMlZ5UTI5dGNHOXpaVlJ2UTI5dGJXOXVVM0JsWXl4Y2JpQWdJQ0JuWlhSRWIyTnJaWEpEYjIxd2IzTmxVMk5vWlcxaFYybDBhRzkxZEVadmNtMWhkSE1zWEc1OU95QXFMMXh1SWwwc0ltNWhiV1Z6SWpwYkluTmxkRVJsWlhCV1lXeDFaU0lzSW05aWFpSXNJbkJoZEdnaUxDSjJZV3gxWlNJc0lteGxkQ0lzSW5OamFHVnRZU0lzSW5CTWFYTjBJaXdpYzNCc2FYUWlMQ0pzWlc0aUxDSnNaVzVuZEdnaUxDSnBJaXdpWld4bGJTSXNJbWhoYm1Sc1pVVjRkR1Z5Ym1Gc1RtRnRaU0lzSW1OdmJYQnZjMlVpTENKd1lYSjBJaXdpVDJKcVpXTjBJaXdpYTJWNWN5SXNJbVp2Y2tWaFkyZ2lMQ0p1WVcxbElpd2ljR0Z5ZEU5aWFpSXNJbVY0ZEdWeWJtRnNJaXdpZG05c2RXMWxVM0JsWTFKbFoyVjRJaXdpWDNkeVlYQlNaV2RGZUhBaUxDSjJiMngxYldVaUxDSmpiMjUwWVdsdVpYSmZjR0YwYUNJc0ltWnNZV2R6SWl3aVoyVjBWbTlzZFcxbFRtRnRaVVp5YjIxV2IyeDFiV1ZUY0dWaklpd2lkbTlzZFcxbFRXRjBZMmdpTENKdFlYUmphQ0lzSW1keWIzVndjeUlzSW1selRtRnRaV1JXYjJ4MWJXVWlMQ0p6YjNWeVkyVWlMQ0pwYm1Oc2RXUmxjeUlzSW1kbGRGWnZiSFZ0WlV4dmJtZFRlVzUwWVhoR2NtOXRWbTlzZFcxbFUzQmxZeUlzSW14dmJtZFRlVzUwWVhnaUxDSjBlWEJsSWl3aWRHRnlaMlYwSWl3aWNtVndiR0ZqWlNJc0ltNXZZMjl3ZVNJc0ltSnBibVFpTENKelpXeHBiblY0SWl3aWVXRnRiQ0lzSW5KbGNYVnBjbVVpTENKWllXMXNVM2x1ZEdGNFJYSnliM0lpTENKRmNuSnZjaUlzSW1OdmJuTjBjblZqZEc5eUlpd2liV1Z6YzJGblpTSXNJbXhwYm1Weklpd2laR1YwWVdsc2N5SXNJbk4xY0dWeUlpd2lkR2hwY3lJc0lubGhiV3hEYUdWamF5SXNJbU52Ym5SbGJuUWlMQ0prYjJNaUxDSndZWEp6WlVSdlkzVnRaVzUwSWl3aWNISmxkSFI1UlhKeWIzSnpJaXdpYldWemMyRm5aWE1pTENKbGNuSnZjbk1pTENKbElpd2laWEp5YjNKTmMyY2lMQ0p3ZFhOb0lpd2liR2x1WlNJc0lteHBibVZRYjNNaUxDSndiM01pTENKQmNuSmhlU0lzSW1aeWIyMGlMQ0pmSWl3aWJDSXNJbTFoY0NJc0ltMGlMQ0pxYjJsdUlpd2llV0Z0YkZCaGNuTmxJaXdpY0dGeWMyVWlMQ0pwYm5SQmMwSnBaMGx1ZENJc0luQnZjblJUY0dWalVtVm5aWGdpTENKcGNGOXdZWEowSWl3aWFYQWlMQ0pvYjNOMElpd2lZMjl1ZEdGcGJtVnlJaXdpY0hKdmRHOWZjR0Z5ZENJc0luQnliM1J2SWl3aVoyVjBVRzl5ZEV4dmJtZFRlVzUwWVhoR2NtOXRVRzl5ZEZOd1pXTWlMQ0p3YjNKMGN5SXNJbkJ2Y25STllYUmphQ0lzSW5SaGNtZGxkRkpoYm1kbElpd2lkR0Z5WjJWMFUzUmhjblFpTENKd1lYSnpaVWx1ZENJc0luUmhjbWRsZEZOMGIzQWlMQ0pvYjNOMFVtRnVaMlVpTENKb2IzTjBVM1JoY25RaUxDSnlZVzVuWlZCdmNuUnpJaXdpWTI5dVkyRjBJaXdpYUc5emRGOXBjQ0lzSW5CMVlteHBjMmhsWkNJc0luQnliM1J2WTI5c0lpd2liVzlrWlNJc0lubGhiV3hUZEhKcGJtZHBabmtpTENKa1lYUmhJaXdpWTI5dVptbG5kWEpoZEdsdmJpSXNJbUZ3Y0d4NVJYaHdZVzV6YVc5dWN5SXNJbk4wY21sdVoybG1lU0lzSW1sdVpHVnVkQ0lzSW5OcGJYQnNaVXRsZVhNaUxDSnVkV3hzVTNSeUlpd2lkSEpwYlNJc0ltVjRjR0Z1WkZadmJIVnRaWE1pTENKMllXeDFaWE1pTENKelpYSjJhV05sY3lJc0luTmxjblpwWTJVaUxDSjJiMngxYldWeklpd2lkbTlzZFcxbFNXNWtaWGdpTENKbGVIQmhibVJRYjNKMGN5SXNJbkJ2Y25SSmJtUmxlQ0lzSW1SdlkydGxja052YlhCdmMyVkRiMjF0YjI1VGNHVmpVMk5vWlcxaElpd2lKR2xrSWl3aWRHbDBiR1VpTENKa1pYTmpjbWx3ZEdsdmJpSXNJbkJ5YjNCbGNuUnBaWE1pTENKMlpYSnphVzl1SWl3aWNHRjBkR1Z5YmlJc0ltbHVZMngxWkdVaUxDSnBkR1Z0Y3lJc0lpUnlaV1lpTENKd1lYUjBaWEp1VUhKdmNHVnlkR2xsY3lJc0lsNWJZUzE2UVMxYU1DMDVMbDh0WFNza0lpd2lZV1JrYVhScGIyNWhiRkJ5YjNCbGNuUnBaWE1pTENKdVpYUjNiM0pyY3lJc0luTmxZM0psZEhNaUxDSmpiMjVtYVdkeklpd2lYbmd0SWl3aVpHVm1hVzVwZEdsdmJuTWlMQ0prWlhabGJHOXdJaXdpWkdWd2JHOTVJaXdpWVc1dWIzUmhkR2x2Ym5NaUxDSmhkSFJoWTJnaUxDSmlkV2xzWkNJc0ltOXVaVTltSWl3aVkyOXVkR1Y0ZENJc0ltUnZZMnRsY21acGJHVWlMQ0prYjJOclpYSm1hV3hsWDJsdWJHbHVaU0lzSW1GeVozTWlMQ0p6YzJnaUxDSnNZV0psYkhNaUxDSmpZV05vWlY5bWNtOXRJaXdpWTJGamFHVmZkRzhpTENKdWIxOWpZV05vWlNJc0ltRmtaR2wwYVc5dVlXeGZZMjl1ZEdWNGRITWlMQ0p1WlhSM2IzSnJJaXdpY0hWc2JDSXNJbk5vYlY5emFYcGxJaXdpWlhoMGNtRmZhRzl6ZEhNaUxDSnBjMjlzWVhScGIyNGlMQ0p3Y21sMmFXeGxaMlZrSWl3aWRHRm5jeUlzSW5Wc2FXMXBkSE1pTENKd2JHRjBabTl5YlhNaUxDSmliR3RwYjE5amIyNW1hV2NpTENKa1pYWnBZMlZmY21WaFpGOWljSE1pTENKa1pYWnBZMlZmY21WaFpGOXBiM0J6SWl3aVpHVjJhV05sWDNkeWFYUmxYMkp3Y3lJc0ltUmxkbWxqWlY5M2NtbDBaVjlwYjNCeklpd2lkMlZwWjJoMElpd2lkMlZwWjJoMFgyUmxkbWxqWlNJc0ltTmhjRjloWkdRaUxDSjFibWx4ZFdWSmRHVnRjeUlzSW1OaGNGOWtjbTl3SWl3aVkyZHliM1Z3SWl3aVpXNTFiU0lzSW1ObmNtOTFjRjl3WVhKbGJuUWlMQ0pqYjIxdFlXNWtJaXdpWTI5dWRHRnBibVZ5WDI1aGJXVWlMQ0pqY0hWZlkyOTFiblFpTENKdGFXNXBiWFZ0SWl3aVkzQjFYM0JsY21ObGJuUWlMQ0p0WVhocGJYVnRJaXdpWTNCMVgzTm9ZWEpsY3lJc0ltTndkVjl4ZFc5MFlTSXNJbU53ZFY5d1pYSnBiMlFpTENKamNIVmZjblJmY0dWeWFXOWtJaXdpWTNCMVgzSjBYM0oxYm5ScGJXVWlMQ0pqY0hWeklpd2lZM0IxYzJWMElpd2lZM0psWkdWdWRHbGhiRjl6Y0dWaklpd2lZMjl1Wm1sbklpd2labWxzWlNJc0luSmxaMmx6ZEhKNUlpd2laR1Z3Wlc1a2MxOXZiaUlzSW5KbGMzUmhjblFpTENKeVpYRjFhWEpsWkNJc0ltUmxabUYxYkhRaUxDSmpiMjVrYVhScGIyNGlMQ0prWlhacFkyVmZZMmR5YjNWd1gzSjFiR1Z6SWl3aVpHVjJhV05sY3lJc0ltUnVjeUlzSW1SdWMxOXZjSFFpTENKa2JuTmZjMlZoY21Ob0lpd2laRzl0WVdsdWJtRnRaU0lzSW1WdWRISjVjRzlwYm5RaUxDSmxiblpmWm1sc1pTSXNJbVZ1ZG1seWIyNXRaVzUwSWl3aVpYaHdiM05sSWl3aVptOXliV0YwSWl3aVpYaDBaVzVrY3lJc0ltVjRkR1Z5Ym1Gc1gyeHBibXR6SWl3aVozSnZkWEJmWVdSa0lpd2lhR1ZoYkhSb1kyaGxZMnNpTENKb2IzTjBibUZ0WlNJc0ltbHRZV2RsSWl3aWFXNXBkQ0lzSW1sd1l5SXNJbXhwYm10eklpd2liRzluWjJsdVp5SXNJbVJ5YVhabGNpSXNJbTl3ZEdsdmJuTWlMQ0plTGlza0lpd2liV0ZqWDJGa1pISmxjM01pTENKdFpXMWZiR2x0YVhRaUxDSnRaVzFmY21WelpYSjJZWFJwYjI0aUxDSnRaVzFmYzNkaGNIQnBibVZ6Y3lJc0ltMWxiWE4zWVhCZmJHbHRhWFFpTENKdVpYUjNiM0pyWDIxdlpHVWlMQ0poYkdsaGMyVnpJaXdpYVhCMk5GOWhaR1J5WlhOeklpd2lhWEIyTmw5aFpHUnlaWE56SWl3aWJHbHVhMTlzYjJOaGJGOXBjSE1pTENKd2NtbHZjbWwwZVNJc0ltOXZiVjlyYVd4c1gyUnBjMkZpYkdVaUxDSnZiMjFmYzJOdmNtVmZZV1JxSWl3aWNHbGtJaXdpY0dsa2MxOXNhVzFwZENJc0luQnNZWFJtYjNKdElpd2ljSEp2Wm1sc1pYTWlMQ0p3ZFd4c1gzQnZiR2xqZVNJc0luSmxZV1JmYjI1c2VTSXNJbkoxYm5ScGJXVWlMQ0p6WTJGc1pTSXNJbk5sWTNWeWFYUjVYMjl3ZENJc0luTjVjMk4wYkhNaUxDSnpkR1JwYmw5dmNHVnVJaXdpYzNSdmNGOW5jbUZqWlY5d1pYSnBiMlFpTENKemRHOXdYM05wWjI1aGJDSXNJbk4wYjNKaFoyVmZiM0IwSWl3aWRHMXdabk1pTENKMGRIa2lMQ0oxYzJWeUlpd2lkWFJ6SWl3aWRYTmxjbTV6WDIxdlpHVWlMQ0pqYjI1emFYTjBaVzVqZVNJc0luQnliM0JoWjJGMGFXOXVJaXdpWTNKbFlYUmxYMmh2YzNSZmNHRjBhQ0lzSW5OcGVtVWlMQ0oyYjJ4MWJXVnpYMlp5YjIwaUxDSjNiM0pyYVc1blgyUnBjaUlzSW1ScGMyRmliR1VpTENKcGJuUmxjblpoYkNJc0luSmxkSEpwWlhNaUxDSjBaWE4wSWl3aWRHbHRaVzkxZENJc0luTjBZWEowWDNCbGNtbHZaQ0lzSW5OMFlYSjBYMmx1ZEdWeWRtRnNJaXdpWkdWMlpXeHZjRzFsYm5RaUxDSjNZWFJqYUNJc0ltbG5ibTl5WlNJc0ltRmpkR2x2YmlJc0ltUmxjR3h2ZVcxbGJuUWlMQ0psYm1Sd2IybHVkRjl0YjJSbElpd2ljbVZ3YkdsallYTWlMQ0p5YjJ4c1ltRmphMTlqYjI1bWFXY2lMQ0p3WVhKaGJHeGxiR2x6YlNJc0ltUmxiR0Y1SWl3aVptRnBiSFZ5WlY5aFkzUnBiMjRpTENKdGIyNXBkRzl5SWl3aWJXRjRYMlpoYVd4MWNtVmZjbUYwYVc4aUxDSnZjbVJsY2lJc0luVndaR0YwWlY5amIyNW1hV2NpTENKeVpYTnZkWEpqWlhNaUxDSnNhVzFwZEhNaUxDSnRaVzF2Y25raUxDSndhV1J6SWl3aWNtVnpaWEoyWVhScGIyNXpJaXdpWjJWdVpYSnBZMTl5WlhOdmRYSmpaWE1pTENKeVpYTjBZWEowWDNCdmJHbGplU0lzSW0xaGVGOWhkSFJsYlhCMGN5SXNJbmRwYm1SdmR5SXNJbkJzWVdObGJXVnVkQ0lzSW1OdmJuTjBjbUZwYm5Seklpd2ljSEpsWm1WeVpXNWpaWE1pTENKemNISmxZV1FpTENKdFlYaGZjbVZ3YkdsallYTmZjR1Z5WDI1dlpHVWlMQ0prYVhOamNtVjBaVjl5WlhOdmRYSmpaVjl6Y0dWaklpd2lhMmx1WkNJc0ltTmhjR0ZpYVd4cGRHbGxjeUlzSW1OdmRXNTBJaXdpWkdWMmFXTmxYMmxrY3lJc0luQnliMnBsWTNSZlpHbHlaV04wYjNKNUlpd2laSEpwZG1WeVgyOXdkSE1pTENKcGNHRnRJaXdpYzNWaWJtVjBJaXdpYVhCZmNtRnVaMlVpTENKbllYUmxkMkY1SWl3aVlYVjRYMkZrWkhKbGMzTmxjeUlzSW1SbGNISmxZMkYwWldRaUxDSnBiblJsY201aGJDSXNJbVZ1WVdKc1pWOXBjSFkySWl3aVlYUjBZV05vWVdKc1pTSXNJbk5sWTNKbGRDSXNJblJsYlhCc1lYUmxYMlJ5YVhabGNpSXNJbk4wY21sdVoxOXZjbDlzYVhOMElpd2liR2x6ZEY5dlpsOXpkSEpwYm1keklpd2liR2x6ZEY5dmNsOWthV04wSWl3aUxpc2lMQ0ppYkd0cGIxOXNhVzFwZENJc0luSmhkR1VpTENKaWJHdHBiMTkzWldsbmFIUWlMQ0p6WlhKMmFXTmxYMk52Ym1acFoxOXZjbDl6WldOeVpYUWlMQ0oxYVdRaUxDSm5hV1FpTENKZVcyRXRlbDBySkNJc0ltaGhjbVFpTENKemIyWjBJaXdpWVc1NVQyWWlMQ0pCYW5ZaUxDSkJhblpGY25KdmNuTWlMQ0ptYjNKdFlYUnpJaXdpWkhWeVlYUnBiMjRpTENKaWVYUmxJaXdpYzNWaWJtVjBYMmx3WDJGa1pISmxjM01pTENKeVpYQnNZV05sUm05eWJXRjBjeUlzSW1selFYSnlZWGtpTENKMGIxTjBjbWx1WnlJc0ltdGxlU0lzSW1OeVpXRjBaVlp2YkhWdFpYTlRaV04wYVc5dUlpd2liRzluSWl3aWJtRnRaV1JXYjJ4MWJXVnpUbUZ0WlhNaUxDSnVZVzFsWkZadmJIVnRaWE1pTENKMmIyeDFiV1ZUY0dWamN5SXNJbTVoYldWeklpd2lVMlYwSWl3aWMzQmxZeUlzSW5WdVpHVm1hVzVsWkNJc0ltWnBiSFJsY2lJc0luWWlMQ0pLVTA5T0lpd2liV2xuY21GMFpVWnliMjFXTVZSdlZqSjRJaXdpWVhKbmRXMWxiblJ6SWl3aWNISnZkRzkwZVhCbElpd2lhR0Z6VDNkdVVISnZjR1Z5ZEhraUxDSmpZV3hzSWl3aWMyVnlkbWxqWlU1aGJXVnpJaXdpYkc5bmN5SXNJbVY0WVcxd2JHVlRaWEoyYVdObElpd2lkRzlWY0hCbGNrTmhjMlVpTENKbGVIUmxjbTVoYkV4cGJtdHpJaXdpYm1WMElpd2libVYwZDI5eWEwMXZaR1VpTENKemRHRnlkSE5YYVhSb0lpd2liRzluWDJSeWFYWmxjaUlzSW14dloxOXZjSFFpTENKeVpYZHlhWFJsVm05c2RXMWxjMFp5YjIwaUxDSnBaSGdpTENKMmIyeDFiV1ZHY205dElpd2laMlYwUkc5amEyVnlRMjl0Y0c5elpWTmphR1Z0WVZkcGRHaHZkWFJHYjNKdFlYUnpJaXdpZG05c2RXMWxYMlJ5YVhabGNpSXNJbXNpTENKdmRYUndkWFFpTENKeVpYTjFiSFFpTENKaGFuWWlMQ0poYkd4RmNuSnZjbk1pTENKemRISnBZM1FpTENKaFpHUkdiM0p0WVhRaUxDSjJZV3hwWkdGMFpTSXNJbU52YlhCcGJHVWlMQ0pqYjIxd2IzTmxSRzlqSWl3aVpYSnlJaXdpYVc1emRHRnVZMlZRWVhSb0lpd2lhMlY1ZDI5eVpDSXNJbkJoY21GdGN5SXNJbUZrWkdsMGFXOXVZV3hRY205d1pYSjBlU0lzSW5CaGNuTmxaRkJoZEdnaUxDSnpiR2xqWlNJc0ltNXZaR1VpTENKblpYUkpiaUlzSW5KaGJtZGxJaXdpYzNWaWMzUnlhVzVuSWl3aVltRnpaVWh5WldZaUxDSm9aV3h3VEdsdWF5SmRMQ0p0WVhCd2FXNW5jeUk2SW5OeFJVRkZUeXhKUVVGTlFTeEZRVUZsUVN4RFFVRkRReXhGUVVGVlF5eEZRVUZqUXl4TFFVTnFSRU1zU1VGQlNVTXNSVUZCVTBvc1JVRkRZaXhKUVVGTlN5eEZRVUZSU2l4RlFVRkxTeXhOUVVGTkxFZEJRVWNzUlVGRGRFSkRMRVZCUVUxR0xFVkJRVTFITEU5QlEyeENMRWxCUVV0TUxFbEJRVWxOTEVWQlFVa3NSVUZCUjBFc1JVRkJTVVlzUlVGQlRTeEZRVUZIUlN4SFFVRkxMRVZCUVVjc1EwRkRha01zU1VGQlRVTXNSVUZCVDB3c1JVRkJUVWtzUjBGRFpFd3NSVUZCVDAwc1MwRkJUMDRzUlVGQlQwMHNSMEZCVVN4SlFVTnNRMDRzUlVGQlUwRXNSVUZCVDAwc1JVRkRjRUlzUTBGRlFVNHNSVUZCVDBNc1JVRkJUVVVzUlVGQlRTeEpRVUZOVEN4RFFVTTNRaXhGUVVWUExGTkJRVk5UTEVWQlFXMUNReXhGUVVGalF5eEhRVU0zUTBNc1QwRkJUME1zUzBGQlMwZ3NSVUZCVVVNc1NVRkJVeXhGUVVGRkxFVkJRVVZITEZGQlFWTkRMRWxCUTJoRFF5eEZRVUZWVGl4RlFVRlJReXhIUVVGTlNTeEhRVU14UWtNc1IwRkJWMEVzUlVGQlVVTXNWVUZCV1VRc1JVRkJVVU1zVTBGQlUwWXNUMEZEYUVSRExFVkJRVkZFTEV0QlFVOURMRVZCUVZGRExGTkJRVk5HTEV0QlEyaERReXhGUVVGUlF5eFRRVUZYTEVOQlFVRXNSVUZGTTBJc1EwRkJReXhEUVVOTUxFTkRja0pQTEVsQlFVMURMRVZCUVdWRExFVkJRM2hDTEhkSFFVRjVTU3hEUVVGQlF5eFBRVUZCTEVWQlFVRkRMR1ZCUVVFc1JVRkJRVU1zVFVGQlFTeERRVUZCTEVOQlFVRXNSVUZGYUVsRExFVkJRU3RDU0N4SlFVTnNRMGtzUlVGQlkwb3NSVUZCVDBzc1RVRkJUVkFzUTBGQlpTeEZRVU5vUkN4UFFVRnZRaXhQUVVGb1FrMHNSVUZEVHl4SFFVZEtRU3hGUVVGWlJTeFBRVUZQVGl4TlFVTTVRaXhGUVVWaFR5eEZRVUZwUWtNc1IwRkRNVUpCTEVkQlEwRXNRMEZCUTBFc1JVRkJUME1zVTBGQlV5eEhRVUZITEVkQlEzQkNMRU5CUVVORUxFVkJRVTlETEZOQlFWTXNTVUZCU1N4SFFVTnlRaXhEUVVGRFJDeEZRVUZQUXl4VFFVRlRMRWRCUVVjc1IwRkRjRUlzUTBGQlEwUXNSVUZCVDBNc1UwRkJVeXhIUVVGSExFZEJRM0JDTEVOQlFVTkVMRVZCUVU5RExGTkJRVk1zUjBGQlJ5eEZRVVZZUXl4RlFVRnhRMVlzU1VGRE9VTXNTVUZCVFVrc1JVRkJZMG9zUlVGQlQwc3NUVUZCVFZBc1EwRkJaU3hGUVVOb1JDeFBRVUZ2UWl4UFFVRm9RazBzU1VGSlJVOHNSVUZCWVN4RFFVTm1ReXhMUVVGTlRDeEZRVUZqU0N4RlFVRlpSU3hQUVVGUFRpeE5RVUZOTEVWQlFVa3NVMEZCVnl4UFFVTTFSRkVzVDBGQlVVb3NSVUZCV1VVc1QwRkJUMDRzVDBGRE0wSmhMRTlCUVZGVUxFVkJRVmxGTEU5QlFVOU1MR05CUXpsQ0xFZEJSVXRETEVkQlFWTkZMRVZCUVZsRkxFOUJRVTlLTEU5QlFWTXNTVUZCU1Zrc1VVRkJVU3hOUVVGUExFVkJRVVVzUlVGQlJUbENMRTFCUVUwc1IwRkJSeXhIUVVOcVJYbENMRk5CUVZNc1NVRkJTU3hKUVVOdVFrVXNSVUZCVjFnc1QwRkJVeXhEUVVGRlpTeFBRVUZSTEVOQlFVRXNRMEZCVFN4SFFVZHdRMklzUlVGQlRVOHNVMEZCVXl4SFFVRkhMRVZCUTJ4Q1JTeEZRVUZYU3l4TFFVRlBMRU5CUVVWRExGRkJRVk1zUjBGQlN5eEZRVU16UW1Zc1JVRkJUVThzVTBGQlV5eEhRVUZITEVsQlEzcENSU3hGUVVGWFN5eExRVUZQTEVOQlFVVkRMRkZCUVZNc1IwRkJTeXhKUVVjdlFrNHNRMEZEV0N4RlF6VkRUVThzUlVGQlQwTXNVVUZCVVN4TlFVRk5MRkZCUlhKQ1F5eFZRVUYzUWtNc1RVRkRNVUpETEZsQlFWbERMRVZCUVZORExFVkJRVTlETEVkQlEzaENReXhOUVVGTlNDeERRVUZQTEVWQlEySkpMRXRCUVV0SUxFMUJRVkZCTEVWQlEySkhMRXRCUVV0R0xGRkJRVlZCTEVWQlEyWkZMRXRCUVV0b1F5eExRVUZQTEdsQ1FVTm9RaXhEUVVOS0xFTkJSV0ZwUXl4SlFVRkJRU3hGUVVGaFF5eEpRVU5vUWtNc1JVRkJUVm9zUlVGQlMyRXNZMEZCWTBZc1JVRkJVeXhEUVVGRlJ5eGhRVUZqTEVOQlFVRXNRMEZCU3l4RFFVRkRMRVZCUlRsRUxFbEJRVTFTTEVWQlFWRXNSMEZEVWxNc1JVRkJWeXhIUVZkcVFpeEhRVlJCU0N4RlFVRkpTU3hQUVVGUGVFTXNVVUZCVVN4RFFVRkRlVU1zUlVGQlIyaEVMRXRCUTI1Q0xFbEJRVTFwUkN4RlFVRlhSQ3hGUVVGRldpeFJRVUZSZGtNc1RVRkJUU3hMUVVGTExFVkJRVVVzUjBGRGVFTnBSQ3hGUVVGVFNTeExRVUZMTEVOQlFVVkRMRXRCUVUxSUxFVkJRVVZKTEZGQlFWRXNSMEZCUjBRc1MwRkJUV1lzVVVGQlUyRXNSVUZCVlVrc1NVRkJTMHdzUlVGQlJVa3NUMEZCVVN4RFFVRkRMRVZCUXpWRlJTeE5RVUZOUXl4TFFVTkdMRU5CUVVWNFJDeFBRVUZSYVVRc1JVRkJSVWtzVVVGQlZVb3NSVUZCUlVrc1VVRkJVU3hIUVVGSFJDeExRVUZQU0N4RlFVRkZTU3hSUVVGUkxFZEJRVWRFTEV0QlFVOHNRMEZCUlN4RlFVTm9SU3hEUVVGRFN5eEZRVUZIUXl4SlFVRk5WQ3hGUVVGRlNTeFJRVUZSTEVkQlFVZEVMRXRCUVU5TkxFTkJRMnhETEVWQlFVVnNSQ3hSUVVGVE5FTXNSMEZCVTJRc1JVRkJUV0VzUzBGQlMwTXNRMEZCU1N4RFFVRkRMRU5CUTNoRExFTkJRVU1zUlVGRmNVSXNSVUZCYkVKTUxFVkJRVk12UXl4UFFVTlVMRTFCUVUwc1NVRkJTV3RETEVWQlFXZENZU3hGUVVGVFdTeEpRVUZMUXl4SFFVRk5RU3hGUVVGRmRrSXNUMEZCVHl4RlFVRkZkMElzUzBGQlN5eEpRVUZKTEVWQlFVZDJRaXhGUVVGUFV5eERRVUZSTEVOQlJUVkdMRVZCUldGbExFVkJRV0Z1UWl4SlFVTjBRa1FzUlVGQlZVTXNRMEZCVHl4RlFVTldXQ3hGUVVGTEswSXNUVUZCVFhCQ0xFVkJRVk1zUTBGQlJYRkNMRmxCUVdFc1EwRkJRU3hEUVVGTExFTkJRVU1zUjBOcVEzWkRReXhGUVVGaGNFUXNSVUZEZEVJc2RVWkJRVFpKTEVOQlFVRnhSQ3hSUVVGQkxFVkJRVUZETEVkQlFVRXNSVUZCUVVNc1MwRkJRU3hGUVVGQlF5eFZRVUZCTEVWQlFVRkRMRmRCUVVFc1JVRkJRVU1zVFVGQlFTeERRVUZCTEVOQlFVRXNSVUZGY0VsRExFVkJRV2xEUXl4SlFVTXhReXhKUVVGTlF5eEZRVUZaUkN4RlFVRk5kRVFzVFVGQlRUaERMRU5CUVdFc1JVRkRNME1zUjBGQmEwSXNUMEZCWkZNc1JVRkRRU3hOUVVGUExFTkJRVU5FTEVkQlIwNDVReXhGUVVGVEswTXNSVUZCVlhSRUxFOUJRVTlwUkN4VlFVTm9ReXhIUVVGSk1VTXNSMEZCVlVFc1JVRkJUMG9zVTBGQlV5eEhRVUZITEVWQlFVY3NRMEZEYUVNc1NVRkJUVzlFTEVWQlFXTm9SQ3hGUVVGUE4wSXNUVUZCVFN4SFFVRkhMRVZCUTNCRExFbEJRVTA0UlN4RlFVRmpReXhUUVVGVFJpeEZRVUZaTEVkQlFVa3NSVUZCUlN4RlFVTXZReXhKUVVGTlJ5eEZRVUZoUkN4VFFVRlRSaXhGUVVGWkxFZEJRVWtzUlVGQlJTeEZRVU4wUTFBc1JVRkJVMDBzUlVGQlZYUkVMRTlCUVdJc1MwRkRVakpFTEVkQlFXRllMRWRCUVZGNlF5eEhRVUZSTjBJc1RVRkJUU3hIUVVGSExFVkJRelZETEVsQlFVMXJSaXhGUVVGWlNDeFRRVUZUUlN4RlFVRlZMRWRCUVVrc1JVRkJSU3hGUVVWMlEwVXNSVUZCWVN4SFFWZHFRaXhQUVZaQk1VSXNUVUZCVFVNc1MwRkJTeXhEUVVGRmVFUXNUMEZCVVRoRkxFVkJRV0ZHTEVWQlFXTXNRMEZCUlN4RlFVRkhMRU5CUVVOdVFpeEZRVUZIZUVRc1NVRkJUVUVzUTBGQlF5eEZRVUZGVHl4UlFVRlRVQ3hKUVVOMlJXZEdMRVZCUVdFc1EwRkRWQ3hIUVVGSFFTeEZRVU5JTEVkQlFVZFVMRVZCUVRaQ1ZTeEhRVUZCUVN4UFFVTjZRbElzUlVGQlZYUkVMRTlCUVU4NFF5eFRRVUZYTEVWQlFVVXNSVUZCUVdkQ0xFOUJRVWRHTEVWQlFWa3ZSU3hGUVVGRGFVWXNSMEZCUVVFc1JVRkJRVUVzVDBGQlNVNHNSVUZCWXpORkxFTkJRVU1zUlVGQlFXbEdMRTlCUTJoRlVpeEZRVUZWZEVRc1QwRkJUMnRFTEZsQlFXTXNSVUZCUlN4RFFVVjZReXhGUVVWU0xFTkJRVU1zUlVGRFRWY3NRMEZEV0N4RFFVVk5lRVFzUlVGQllTeERRVUZGUlN4UFFVRlJhMFFzVTBGQlUyeEVMRVZCUVZFc1JVRkJSU3hEUVVGSExFVkJaMEp1UkN4UFFXUkpLME1zUlVGQlZYUkVMRTlCUVU4clF5eExRVU5xUWpGRExFVkJRVmN3UkN4UlFVRlZWQ3hGUVVGVmRFUXNUMEZCVHl0RExFbEJSM1JEVHl4RlFVRlZkRVFzVDBGQlQyZEVMRTlCUTJwQ00wTXNSVUZCVnpKRUxGVkJRVmxXTEVWQlFWVjBSQ3hQUVVGUFowUXNUVUZIZUVOTkxFVkJRVlYwUkN4UFFVRlBiVVFzVVVGRGFrSTVReXhGUVVGWE5FUXNVMEZCVjFnc1JVRkJWWFJFTEU5QlFVOXRSQ3hQUVVjelF6bERMRVZCUVZjMlJDeExRVUZQTEZWQlJWZ3NRMEZCUXpkRUxFVkJRMW9zUlVNNVEwMVBMRVZCUVU5RExGRkJRVkVzVFVGQlRTeEZRVVZrYzBRc1JVRkJaMEpCTEVOQlFVTkRMRVZCUVZkRExFdEJRM0pEUXl4RlFVRm5Ra1lzUlVGQlRVTXNRMEZCWVN4RlFVTTFRbnBFTEVWQlFVc3lSQ3hWUVVGVlNDeEZRVUZOTEVOQlFVVkpMRkZCUVZOSUxFZEJRV2xDTEVsQlFVbEhMRkZCUVZVc1JVRkJSME1zVjBGQldTeERRVUZCTEVWQlFVMURMRkZCUVZNc1JVRkJTU3hEUVVGQkxFVkJRVVZETEV0QlFVMHNSMEZUT1VkTUxFVkJRV3RDUVN4RFFVRkRSaXhGUVVGWFF5eExRVU0xUWtFc1IwRkJhVUpCTEVWQlFXTlBMR1ZCUXk5Q01VWXNUMEZCVHpKR0xFOUJRVTlVTEVWQlFVdFZMRkZCUVZFc1JVRkJSVEZHTEZGQlFWTXlSaXhKUVVOc1F5eEhRVUZKUVN4RlFVRlJReXhSUVVOU0xFbEJRVXQ2Unl4SlFVRkpNRWNzUlVGQll5eEZRVUZIUVN4RlFVRmpSaXhGUVVGUlF5eFJRVUZSY0Vjc1QwRkJVWEZITEVkQlFXVXNSVUZETDBJc1ZVRkJlRU1zVDBGQlQwWXNSVUZCVVVNc1VVRkJVVU1zUzBGRGRrSkdMRVZCUVZGRExGRkJRVkZETEVkQlFXVTNSU3hGUVVGclF6SkZMRVZCUVZGRExGRkJRVkZETEVWQlFWa3NSVUZKTjBjc1EwRkJReXhGUVVkRVdpeEhRVUZwUWtFc1JVRkJZMkVzWVVGREwwSm9SeXhQUVVGUE1rWXNUMEZCVDFRc1JVRkJTMVVzVVVGQlVTeEZRVUZGTVVZc1VVRkJVekpHTEVsQlEyeERMRWRCUVVsQkxFVkJRVkV4UWl4TlFVRlBMRU5CUTJZNVJTeEpRVUZKT0VVc1JVRkJVU3hIUVVOYUxFbEJRVXM1UlN4SlFVRkpORWNzUlVGQldTeEZRVUZIUVN4RlFVRlpTaXhGUVVGUk1VSXNUVUZCVFhwRkxFOUJRVkYxUnl4SFFVRmhMRVZCUlM5RU9VSXNSVUZFYjBNc1ZVRkJjRU1zVDBGQlR6QkNMRVZCUVZFeFFpeE5RVUZOT0VJc1IwRkRZaXhEUVVGRExFZEJRVWM1UWl4RlFVRlBMRWRCUVVkRUxFVkJRVGhDTWtJc1JVRkJVVEZDTEUxQlFVMDRRaXhGUVVGVkxFZEJRMnBGTEVOQlFVTXNSMEZCUnpsQ0xFVkJRVTh3UWl4RlFVRlJNVUlzVFVGQlRUaENMRWxCUlRWRFNpeEZRVUZSTVVJc1RVRkJVVUVzUTBGRGNFSXNRMEZEU2l4RFFVRkRMRVZCUjBWbExFZEROME5GWjBJc1JVRkJaME1zUTBGRGVrTkRMRWxCUVVzc2IwSkJRMHd2UlN4TFFVRk5MRk5CUTA1blJpeE5RVUZQTEhkQ1FVTlFReXhaUVVGaExHbEdRVVZpUXl4WFFVRlpMRU5CUTFKRExGRkJRVk1zUTBGRFRHNUdMRXRCUVUwc1UwRkRUbWxHTEZsQlFXRXNLME5CUTJoQ0xFVkJSVVJzUnl4TFFVRk5MRU5CUTBacFFpeExRVUZOTEZOQlEwNXZSaXhSUVVGVExIZENRVU5VU0N4WlFVRmhMSEZGUVVOb1FpeEZRVVZFU1N4UlFVRlRMRU5CUTB4eVJpeExRVUZOTEZGQlEwNXpSaXhOUVVGUExFTkJRMGgwUml4TFFVRk5MRk5CUTA1MVJpeExRVUZOTEhWQ1FVTlVMRVZCUTBST0xGbEJRV0VzYzBOQlEyaENMRVZCUlVSVUxGTkJRVlVzUTBGRFRrOHNTVUZCU3l4M1FrRkRUQzlGTEV0QlFVMHNVMEZEVG5kR0xHdENRVUZ0UWl4RFFVTm1ReXh2UWtGQmNVSXNRMEZEYWtKR0xFdEJRVTBzZFVKQlExWXNRMEZEU0N4RlFVTkVSeXh4UWtGQmMwSXNRMEZCUVN4RFFVTjZRaXhGUVVWRVF5eFRRVUZWTEVOQlEwNWFMRWxCUVVzc2QwSkJRMHd2UlN4TFFVRk5MRk5CUTA1M1JpeHJRa0ZCYlVJc1EwRkRaa01zYjBKQlFYRkNMRU5CUTJwQ1JpeExRVUZOTEhWQ1FVTldMRU5CUTBvc1EwRkRTQ3hGUVVWRVlpeFJRVUZUTEVOQlEweExMRWxCUVVzc2RVSkJRMHd2UlN4TFFVRk5MRk5CUTA1M1JpeHJRa0ZCYlVJc1EwRkRaa01zYjBKQlFYRkNMRU5CUTJwQ1JpeExRVUZOTEhOQ1FVTldMRU5CUTBnc1JVRkRSRWNzY1VKQlFYTkNMRU5CUVVFc1EwRkRla0lzUlVGRlJFVXNVVUZCVXl4RFFVTk1ZaXhKUVVGTExIVkNRVU5NTDBVc1MwRkJUU3hUUVVOT2QwWXNhMEpCUVcxQ0xFTkJRMlpETEc5Q1FVRnhRaXhEUVVOcVFrWXNTMEZCVFN4elFrRkRWaXhEUVVOSUxFVkJRMFJITEhGQ1FVRnpRaXhEUVVGQkxFTkJRM3BDTEVWQlJVUkhMRkZCUVZNc1EwRkRUR1FzU1VGQlN5eDFRa0ZEVEM5RkxFdEJRVTBzVTBGRFRuZEdMR3RDUVVGdFFpeERRVU5tUXl4dlFrRkJjVUlzUTBGRGFrSkdMRXRCUVUwc2MwSkJRMVlzUTBGRFNDeEZRVU5FUnl4eFFrRkJjMElzUTBGQlFTeERRVU14UWl4RFFVTklMRVZCUlVSR0xHdENRVUZ0UWl4RFFVRkZUU3hOUVVGUExFVkJRVWtzUlVGRGFFTktMSEZDUVVGelFpeERRVUZCTEVWQlJYUkNTeXhaUVVGaExFTkJRMVIwUWl4UlFVRlRMRU5CUTB4TkxFbEJRVXNzZDBKQlEwd3ZSU3hMUVVGTkxGTkJSVTVyUml4WFFVRlpMRU5CUTFKakxGRkJRVk1zUTBGQlJWUXNTMEZCVFN3eVFrRkJOa0lzUlVGRE9VTlZMRTlCUVZFc1EwRkJSVllzUzBGQlRTd3dRa0ZCTkVJc1JVRkROVU5YTEZsQlFXRXNRMEZCUlZnc1MwRkJUU3cwUWtGQk9FSXNSVUZEYmtSWkxFOUJRVkVzUTBGQlJXNUhMRXRCUVUwc1UwRkJWeXhGUVVNelFtOUhMRTFCUVU4c1EwRkRTRU1zVFVGQlR5eERRVU5JTEVOQlFVVnlSeXhMUVVGTkxGRkJRVk1zUlVGRGFrSXNRMEZEU1VFc1MwRkJUU3hUUVVOT2EwWXNWMEZCV1N4RFFVTlNiMElzVVVGQlV5eERRVUZGZEVjc1MwRkJUU3hSUVVGVkxFVkJRek5DZFVjc1YwRkJXU3hEUVVGRmRrY3NTMEZCVFN4UlFVRlZMRVZCUXpsQ2QwY3NhMEpCUVcxQ0xFTkJRVVY0Unl4TFFVRk5MRkZCUVZVc1JVRkRja041Unl4TFFVRk5MRU5CUVVWc1FpeExRVUZOTERSQ1FVRTRRaXhGUVVNMVEyMUNMRWxCUVVzc1EwRkJSVzVDTEV0QlFVMHNORUpCUVRoQ0xFVkJRek5EYjBJc1QwRkJVU3hEUVVGRmNFSXNTMEZCVFN3MFFrRkJPRUlzUlVGRE9VTnhRaXhYUVVGWkxFTkJRVVUxUnl4TFFVRk5MRkZCUVZOelJpeE5RVUZQTEVOQlFVVjBSaXhMUVVGTkxGRkJRVk1zUTBGQlJ5eEZRVU40UkRaSExGTkJRVlVzUTBGQlJUZEhMRXRCUVUwc1VVRkJVM05HTEUxQlFVOHNRMEZCUlhSR0xFdEJRVTBzVVVGQlV5eERRVUZITEVWQlEzUkVPRWNzVTBGQlZTeERRVUZGT1Vjc1MwRkJUU3hUUVVGWExFVkJRemRDSzBjc2IwSkJRWEZDTEVOQlFVVjRRaXhMUVVGTkxEUkNRVUU0UWl4RlFVTXpSSGxDTEZGQlFWTXNRMEZCUldoSUxFdEJRVTBzVVVGQlZTeEZRVU16UW1sSUxFdEJRVTBzUTBGQlJXcElMRXRCUVUwc1UwRkJWeXhGUVVONlFrTXNUMEZCVVN4RFFVRkZSQ3hMUVVGTkxGRkJRVlVzUlVGRE1VSnJTQ3hUUVVGVkxFTkJRVVZzU0N4TFFVRk5MRU5CUVVNc1ZVRkJWeXhUUVVGWExFVkJRM3BEYlVnc1dVRkJZU3hEUVVGRk5VSXNTMEZCVFN3MFFrRkJPRUlzUlVGRGJrUTJRaXhWUVVGWExFTkJRVVZ3U0N4TFFVRk5MRkZCUVZVc1JVRkROMEp4U0N4WFFVRlpMRU5CUVVWeVNDeExRVUZOTEZOQlFWY3NSVUZETDBJMFJpeFJRVUZUTEVOQlFVVk1MRXRCUVUwc2QwTkJRVEJETEVWQlF6TkVLMElzUzBGQlRTeERRVUZGZEVnc1MwRkJUU3hSUVVGVGMwWXNUVUZCVHl4RFFVRkZkRVlzUzBGQlRTeFJRVUZUTEVOQlFVY3NSVUZEYkVSMVNDeFJRVUZUTEVOQlFVVm9ReXhMUVVGTkxIVkNRVUY1UWl4RlFVTXhRMmxETEZWQlFWY3NRMEZCUlhoSUxFdEJRVTBzVVVGQlUzTkdMRTFCUVU4c1EwRkJSWFJHTEV0QlFVMHNVVUZCVXl4RFFVRkZMRU5CUTNwRUxFVkJRMFF3Uml4eFFrRkJjMElzUTBGQlFTeEZRVU4wUWtZc2EwSkJRVzFDTEVOQlFVVk5MRTFCUVU4c1JVRkJSeXhEUVVOc1F5eEZRVVZTTEVWQlEwUXlRaXhoUVVGakxFTkJRMVo2U0N4TFFVRk5MRk5CUTA1clJpeFhRVUZaTEVOQlExSjNReXhuUWtGQmFVSXNRMEZEWWpGSUxFdEJRVTBzVVVGRFRuTkdMRTFCUVU4c1EwRkJSVU1zUzBGQlRTd3lRa0ZCTkVJc1EwRkRPVU1zUlVGRFJHOURMR2xDUVVGclFpeERRVU5rTTBnc1MwRkJUU3hSUVVOT2MwWXNUVUZCVHl4RFFVRkZReXhMUVVGTkxESkNRVUUwUWl4RFFVTTVReXhGUVVORWNVTXNhVUpCUVd0Q0xFTkJRMlExU0N4TFFVRk5MRkZCUTA1elJpeE5RVUZQTEVOQlFVVkRMRXRCUVUwc01rSkJRVFJDTEVOQlF6bERMRVZCUTBSelF5eHJRa0ZCYlVJc1EwRkRaamRJTEV0QlFVMHNVVUZEVG5OR0xFMUJRVThzUTBGQlJVTXNTMEZCVFN3eVFrRkJORUlzUTBGRE9VTXNSVUZEUkhWRExFOUJRVkVzUTBGQlJUbElMRXRCUVUwc1UwRkJWeXhGUVVNelFpdElMR05CUVdVc1EwRkRXQzlJTEV0QlFVMHNVVUZEVG5OR0xFMUJRVThzUTBGQlJVTXNTMEZCVFN3MFFrRkJOa0lzUTBGRGFFUXNRMEZEU0N4RlFVTkVSeXh4UWtGQmMwSXNRMEZCUVN4RFFVTjZRaXhGUVVORWMwTXNVVUZCVXl4RFFVRkZhRWtzUzBGQlRTeFJRVUZUYzBZc1RVRkJUeXhEUVVGRmRFWXNTMEZCVFN4UlFVRlZMRVZCUVVWcFNTeFpRVUZoTEVOQlFVRXNRMEZCVFN4RlFVTjRSVU1zVTBGQlZTeERRVUZGYkVrc1MwRkJUU3hSUVVGVGMwWXNUVUZCVHl4RFFVRkZkRVlzUzBGQlRTeFJRVUZWTEVWQlFVVnBTU3haUVVGaExFTkJRVUVzUTBGQlRTeEZRVU42UlVVc1QwRkJVU3hEUVVGRmJra3NTMEZCVFN4VFFVRlZiMGtzUzBGQlRTeERRVUZETEU5QlFWRXNWVUZCV1N4RlFVTnlSRU1zWTBGQlpTeERRVUZGY2trc1MwRkJUU3hSUVVGVkxFVkJRMnBEYzBrc1VVRkJVeXhEUVVGRkwwTXNTMEZCVFN4MVFrRkJlVUlzUlVGRE1VTk5MRkZCUVZNc1EwRkJSVTRzUzBGQlRTeDNRMEZCTUVNc1JVRkRNMFJuUkN4bFFVRm5RaXhEUVVGRmRra3NTMEZCVFN4UlFVRlZMRVZCUTJ4RGQwa3NWVUZCVnl4RFFVRkZlRWtzUzBGQlRTeFZRVUZYZVVrc1VVRkJVeXhEUVVGSExFVkJRekZEUXl4WlFVRmhMRU5CUVVVeFNTeExRVUZOTEZWQlFWZDVTU3hSUVVGVExFVkJRVWRGTEZGQlFWTXNSMEZCU3l4RlFVTXhSRU1zVjBGQldTeERRVUZGTlVrc1MwRkJUU3hEUVVGRExGTkJRVlVzVTBGQlZ5eEZRVU14UXpaSkxGVkJRVmNzUTBGQlJUZEpMRXRCUVUwc1EwRkJReXhUUVVGVkxGTkJRVmNzUlVGRGVrTTRTU3hYUVVGWkxFTkJRVVU1U1N4TFFVRk5MRU5CUVVNc1UwRkJWU3hUUVVGWExFVkJRekZESzBrc1kwRkJaU3hEUVVGRkwwa3NTMEZCVFN4RFFVRkRMRk5CUVZVc1UwRkJWeXhGUVVNM1EyZEtMR1ZCUVdkQ0xFTkJRVVZvU2l4TFFVRk5MRU5CUVVNc1UwRkJWU3hUUVVGWExFVkJRemxEYVVvc1MwRkJUU3hEUVVGRmFrb3NTMEZCVFN4RFFVRkRMRk5CUVZVc1UwRkJWeXhGUVVOd1EydEtMRTlCUVZFc1EwRkJSV3hLTEV0QlFVMHNVVUZCVlN4RlFVTXhRbTFLTEdkQ1FVRnBRaXhEUVVOaWJrb3NTMEZCVFN4VFFVTk9hMFlzVjBGQldTeERRVU5TYTBVc1QwRkJVU3hEUVVGRmNFb3NTMEZCVFN4UlFVRlZMRVZCUXpGQ2NVb3NTMEZCVFN4RFFVRkZja29zUzBGQlRTeFJRVUZWTEVWQlEzaENjMG9zVTBGQlZTeERRVUZGZEVvc1MwRkJUU3hSUVVGVExFTkJRemxDTEVWQlEwUXdSaXh4UWtGQmMwSXNRMEZCUVN4RlFVTjBRa1lzYTBKQlFXMUNMRU5CUVVWTkxFMUJRVThzUlVGQlJ5eERRVU5zUXl4RlFVTkVlVVFzVjBGQldTeERRVU5TYkVRc1RVRkJUeXhEUVVOSUxFTkJRVVZrTEV0QlFVMHNLMEpCUVdkRExFVkJRM2hETEVOQlEwbDJSaXhMUVVGTkxGTkJRMDR3Uml4eFFrRkJjMElzUTBGQlFTeEZRVU4wUWtZc2EwSkJRVzFDTEVOQlEyWkRMRzlDUVVGeFFpeERRVU5xUW5wR0xFdEJRVTBzVTBGRFRqQkdMSEZDUVVGelFpeERRVUZCTEVWQlEzUkNVaXhYUVVGWkxFTkJRMUp6UlN4UlFVRlRMRU5CUVVWNFNpeExRVUZOTEZOQlFWY3NSVUZETlVKNVNpeFRRVUZWTEVOQlEwNTZTaXhMUVVGTkxGVkJRMDR3U2l4UlFVRlRMRU5CUVVFc1EwRkRXaXhGUVVORVF5eFZRVUZYTEVOQlExQXpTaXhMUVVGTkxGTkJRMDV2U1N4TFFVRk5MRU5CUTBZc2EwSkJRMEVzYTBKQlEwRXNhVU5CUlZJc1EwRkRTQ3hGUVVORWNVSXNVMEZCVlN4RFFVRkRMRmxCUTJZc1EwRkRTaXhEUVVOSUxFVkJSVklzUlVGRFJFY3NiMEpCUVhGQ0xFTkJRVVZ5UlN4TFFVRk5MQ3RDUVVGcFF5eEZRVU01UkhORkxGRkJRVk1zUTBGQlJUZEtMRXRCUVUwc1VVRkJVM05HTEUxQlFVOHNRMEZCUlhSR0xFdEJRVTBzVVVGQlZTeEZRVUZGYVVrc1dVRkJZU3hEUVVGQkxFTkJRVTBzUlVGRGVFVTJRaXhKUVVGTExFTkJRVVYyUlN4TFFVRk5MRGhDUVVGblF5eEZRVU0zUTNkRkxGRkJRVk1zUTBGQlJTOUtMRXRCUVUwc1VVRkJVM05HTEUxQlFVOHNRMEZCUlhSR0xFdEJRVTBzVVVGQlZTeEZRVUZGYVVrc1dVRkJZU3hEUVVGQkxFTkJRVTBzUlVGRGVFVXJRaXhYUVVGWkxFTkJRVVY2UlN4TFFVRk5MRGhDUVVGblF5eEZRVU53UkRCRkxGZEJRVmtzUTBGQlJXcExMRXRCUVUwc1VVRkJWU3hGUVVNNVFtdExMRmRCUVZrc1EwRkJSVE5GTEV0QlFVMHNkVUpCUVhsQ0xFVkJRemRETkVVc1UwRkJWU3hEUVVGRk5VVXNTMEZCVFN3NFFrRkJaME1zUlVGRGJFUTJSU3haUVVGaExFTkJRVVUzUlN4TFFVRk5MRFJDUVVFNFFpeEZRVVZ1UkRoRkxFOUJRVkVzUTBGRFNuSkxMRXRCUVUwc1VVRkRUbk5HTEUxQlFVOHNRMEZEU0hSR0xFdEJRVTBzUTBGQlF5eFRRVUZWTEZWQlEycENjMHNzVDBGQlVTeFJRVU5ZTEVWQlEwUnlReXhaUVVGaExFTkJRVUVzUTBGRGFFSXNSVUZEUkhORExGRkJRVk1zUTBGRFRHeEZMRTFCUVU4c1EwRkRTQ3hEUVVGRmNrY3NTMEZCVFN4UlFVRlRMRVZCUTJwQ0xFTkJRMGxCTEV0QlFVMHNVMEZGVG10R0xGZEJRVmtzUTBGRFVsUXNVVUZCVXl4RFFVRkZla1VzUzBGQlRTeFJRVUZWTEVWQlF6TkNjVW9zUzBGQlRTeERRVUZGY2tvc1MwRkJUU3hSUVVGVExFTkJRekZDTEVWQlEwUjVTaXhUUVVGVkxFTkJRVU1zVjBGRFdDOUVMSEZDUVVGelFpeERRVUZCTEVOQlEzcENMRVZCUlZJc1JVRkRSRGhGTEdWQlFXZENMRU5CUVVWNFN5eExRVUZOTEZGQlFWTnpSaXhOUVVGUExFTkJRVVYwUml4TFFVRk5MRkZCUVZVc1JVRkJSV2xKTEZsQlFXRXNRMEZCUVN4RFFVRk5MRVZCUXk5RlpDeFpRVUZoTEVOQlFVVTFRaXhMUVVGTkxEUkNRVUU0UWl4RlFVTnVSR3RHTEZWQlFWY3NRMEZEVUhwTExFdEJRVTBzVVVGRFRuTkdMRTFCUVU4c1EwRkRTSFJHTEV0QlFVMHNRMEZCUXl4VFFVRlZMRk5CUTNCQ0xFVkJRMFJwU1N4WlFVRmhMRU5CUVVFc1EwRkRhRUlzUlVGRFJIbERMRmxCUVdFc1EwRkJSVzVHTEV0QlFVMHNNa0pCUVRaQ0xFVkJRMnhFYjBZc1UwRkJWU3hEUVVGRk0wc3NTMEZCVFN4UlFVRlZMRVZCUXpWQ05Fc3NUVUZCVHl4RFFVRkZOVXNzUzBGQlRTeFJRVUZWTEVWQlEzcENOa3NzUzBGQlRTeERRVUZGTjBzc1MwRkJUU3hUUVVGWExFVkJRM3BDT0Vzc1NVRkJTeXhEUVVGRk9Vc3NTMEZCVFN4UlFVRlZMRVZCUTNaQ2IwZ3NWVUZCVnl4RFFVRkZjRWdzUzBGQlRTeFJRVUZWTEVWQlF6ZENNa2NzVDBGQlVTeERRVUZGY0VJc1MwRkJUU3cwUWtGQk9FSXNSVUZET1VOM1JpeE5RVUZQTEVOQlFVVXZTeXhMUVVGTkxGRkJRVk56Uml4TlFVRlBMRU5CUVVWMFJpeExRVUZOTEZGQlFWVXNSVUZCUldsSkxGbEJRV0VzUTBGQlFTeERRVUZOTEVWQlEzUkZLME1zVVVGQlV5eERRVU5NYUV3c1MwRkJUU3hUUVVWT2EwWXNWMEZCV1N4RFFVTlNLMFlzVDBGQlVTeERRVUZGYWt3c1MwRkJUU3hSUVVGVkxFVkJRekZDYTB3c1VVRkJVeXhEUVVOTWJFd3NTMEZCVFN4VFFVTk9kMFlzYTBKQlFXMUNMRU5CUTJZeVJpeFBRVUZSTEVOQlFVVnVUQ3hMUVVGTkxFTkJRVU1zVTBGQlZTeFRRVUZWTEU5QlFWRXNRMEZEYWtRc1EwRkRTaXhEUVVOSUxFVkJRMFF3Uml4eFFrRkJjMElzUTBGQlFTeEZRVU4wUWtZc2EwSkJRVzFDTEVOQlFVVk5MRTFCUVU4c1JVRkJSeXhEUVVOc1F5eEZRVU5FYzBZc1dVRkJZU3hEUVVGRmNFd3NTMEZCVFN4UlFVRlZMRVZCUXk5Q2NVd3NWVUZCVnl4RFFVRkZja3dzUzBGQlRTeERRVUZETEZOQlFWVXNVMEZCVnl4RlFVTjZRM05NTEdkQ1FVRnBRaXhEUVVGRmRFd3NTMEZCVFN4RFFVRkRMRk5CUVZVc1ZVRkJXU3hGUVVOb1JIVk1MR1ZCUVdkQ0xFTkJRVVYyVEN4TFFVRk5MRk5CUVZjc1JVRkRia04zVEN4alFVRmxMRU5CUVVWNFRDeExRVUZOTEVOQlFVTXNVMEZCVlN4VFFVRlhMRVZCUXpkRGVVd3NZVUZCWXl4RFFVRkZla3dzUzBGQlRTeFJRVUZWTEVWQlEyaERNa1lzVTBGQlZTeERRVU5PVlN4TlFVRlBMRU5CUTBnc1EwRkJSV1FzUzBGQlRTd3JRa0ZCWjBNc1JVRkRlRU1zUTBGRFNYWkdMRXRCUVUwc1UwRkRUbmRHTEd0Q1FVRnRRaXhEUVVObVF5eHZRa0ZCY1VJc1EwRkRha0paTEUxQlFVOHNRMEZEU0N4RFFVTkpja2NzUzBGQlRTeFRRVU5PYTBZc1YwRkJXU3hEUVVOU2QwY3NVVUZCVXl4RFFVRkZia2NzUzBGQlRTd3JRa0ZCYVVNc1JVRkRiRVJ2Unl4aFFVRmpMRU5CUVVVelRDeExRVUZOTEZGQlFWVXNSVUZEYUVNMFRDeGhRVUZqTEVOQlFVVTFUQ3hMUVVGTkxGRkJRVlVzUlVGRGFFTTJUQ3hsUVVGblFpeERRVUZGZEVjc1MwRkJUU3dyUWtGQmFVTXNSVUZEZWtRMlJpeFpRVUZoTEVOQlFVVndUQ3hMUVVGTkxGRkJRVlVzUlVGREwwSTRUQ3hUUVVGVkxFTkJRVVU1VEN4TFFVRk5MRkZCUVZNc1EwRkRPVUlzUlVGRFJEQkdMSEZDUVVGelFpeERRVUZCTEVWQlEzUkNSaXhyUWtGQmJVSXNRMEZCUlUwc1RVRkJUeXhGUVVGSExFTkJRMjVETEVWQlEwRXNRMEZCUlRsR0xFdEJRVTBzVFVGQlVTeEZRVVY0UWl4RFFVTklMRVZCUTBRd1JpeHhRa0ZCYzBJc1EwRkJRU3hEUVVONlFpeEZRVVZTTEVWQlEwUnhSeXhwUWtGQmEwSXNRMEZCUlM5TUxFdEJRVTBzVTBGQlZ5eEZRVU55UTJkTkxHTkJRV1VzUTBGQlJXaE5MRXRCUVUwc1ZVRkJWM2xKTEZGQlFWTXNRMEZCUXl4SlFVRk5SU3hSUVVGVExFZEJRVTBzUlVGRGFrVnpSQ3hKUVVGTExFTkJRVVZxVFN4TFFVRk5MRU5CUVVNc1UwRkJWU3hQUVVGVExFVkJRMnBEYTAwc1YwRkJXU3hEUVVGRmJFMHNTMEZCVFN4RFFVRkRMRk5CUVZVc1UwRkJWeXhGUVVNeFEyMU5MRk5CUVZVc1EwRkJSVzVOTEV0QlFVMHNVVUZCVlN4RlFVTTFRaXRETEUxQlFVOHNRMEZEU0M5RExFdEJRVTBzVVVGRFRuTkdMRTFCUVU4c1EwRkRTR1VzVFVGQlR5eERRVU5JTEVOQlFVVnlSeXhMUVVGTkxGTkJRVlZ6U3l4UFFVRlJMRTlCUVZFc1JVRkRiRU1zUTBGQlJYUkxMRXRCUVUwc1UwRkJWWE5MTEU5QlFWRXNUMEZCVVN4RlFVTnNReXhEUVVOSmRFc3NTMEZCVFN4VFFVTk9hMFlzVjBGQldTeERRVU5TZEVJc1MwRkJUU3hEUVVGRk5VUXNTMEZCVFN4UlFVRlZMRVZCUTNoQ2VVUXNVVUZCVXl4RFFVRkZla1FzUzBGQlRTeFJRVUZWTEVWQlF6TkNReXhQUVVGUkxFTkJRVVZFTEV0QlFVMHNVMEZCVnl4RlFVTXpRakJFTEZWQlFWY3NRMEZCUlRGRUxFdEJRVTBzUTBGQlF5eFRRVUZWTEZWQlFWa3NSVUZETVVNeVJDeFRRVUZWTEVOQlFVVXpSQ3hMUVVGTkxGRkJRVk1zUTBGRE9VSXNSVUZEUkRCR0xIRkNRVUZ6UWl4RFFVRkJMRVZCUTNSQ1JpeHJRa0ZCYlVJc1EwRkJSVTBzVFVGQlR5eEZRVUZITEVOQlEyeERMRVZCUlZJc1JVRkRSRzFETEZsQlFXRXNRMEZCUVN4RFFVTm9RaXhGUVVORVdpeFhRVUZaTEVOQlFVVnlTQ3hMUVVGTkxGTkJRVmNzUlVGREwwSnZUU3hUUVVGVkxFTkJRVVUzUnl4TFFVRk5MQ3RDUVVGcFF5eEZRVU51UkRoSExGbEJRV0VzUTBGQlJYSk5MRXRCUVUwc1UwRkJWVzlKTEV0QlFVMHNRMEZCUXl4VFFVRlZMRkZCUVZNc2FVSkJRV3RDTEZGQlFWTXNWVUZCV1N4RlFVTm9SMnRGTEZWQlFWY3NRMEZCUlhSTkxFdEJRVTBzVTBGQlZ5eEZRVU01UW5kS0xGRkJRVk1zUTBGQlJYaEtMRXRCUVUwc1VVRkJWU3hGUVVNelFuVk5MRkZCUVZNc1EwRkRUSFpOTEV0QlFVMHNVVUZEVkN4RlFVTkVkMDBzVFVGQlR5eERRVU5JZUUwc1MwRkJUU3hUUVVOVUxFVkJRMFI1VFN4aFFVRmpMRU5CUVVWNlRTeExRVUZOTEZGQlFWTnpSaXhOUVVGUExFTkJRVVYwUml4TFFVRk5MRkZCUVZVc1JVRkJSV2xKTEZsQlFXRXNRMEZCUVN4RFFVRk5MRVZCUXpkRlppeFRRVUZWTEVOQlFVVnNTQ3hMUVVGTkxFTkJRVU1zVTBGQlZTeFRRVUZYTEVWQlEzaERORVlzVVVGQlV5eERRVUZGVEN4TFFVRk5MSGREUVVFd1F5eEZRVU16UkcxSUxGRkJRVk1zUTBGQlJXNUlMRXRCUVUwc05FSkJRVGhDTEVWQlF5OURiMGdzVjBGQldTeERRVUZGTTAwc1MwRkJUU3hUUVVGWExFVkJReTlDTkUwc2EwSkJRVzFDTEVOQlFVVTFUU3hMUVVGTkxGTkJRVlZ6U3l4UFFVRlJMRlZCUVZrc1JVRkRla1IxUXl4WlFVRmhMRU5CUVVVM1RTeExRVUZOTEZGQlFWVXNSVUZETDBJNFRTeFpRVUZoTEVOQlFVVTVUU3hMUVVGTkxGRkJRVlVzUlVGREwwSXJUU3hOUVVGUExFTkJRVVY0U0N4TFFVRk5MRGhDUVVGblF5eEZRVU12UTNsSUxFbEJRVXNzUTBGQlJXaE9MRXRCUVUwc1UwRkJWeXhGUVVONFFuVklMRkZCUVZNc1EwRkJSV2hETEV0QlFVMHNkVUpCUVhsQ0xFVkJRekZETUVnc1MwRkJUU3hEUVVGRmFrNHNTMEZCVFN4UlFVRlZMRVZCUTNoQ2EwNHNTVUZCU3l4RFFVRkZiRTRzUzBGQlRTeFJRVUZWTEVWQlEzWkNiVTRzV1VGQllTeERRVUZGYms0c1MwRkJUU3hSUVVGVkxFVkJReTlDTUVVc1VVRkJVeXhEUVVOTU1VVXNTMEZCVFN4UlFVTk9jMFlzVFVGQlR5eERRVU5JWlN4TlFVRlBMRU5CUTBnc1EwRkJSWEpITEV0QlFVMHNVMEZCVlhOTExFOUJRVkVzVTBGQlZTeEZRVU53UXl4RFFVTkpkRXNzUzBGQlRTeFRRVU5PZVVvc1UwRkJWU3hEUVVGRExGRkJRMWgyUlN4WFFVRlpMRU5CUTFKc1JpeExRVUZOTEVOQlFVVkJMRXRCUVUwc1VVRkJWU3hGUVVONFFrb3NUMEZCVVN4RFFVRkZTU3hMUVVGTkxGRkJRVlVzUlVGRE1VSkRMRTlCUVZFc1EwRkJSVVFzUzBGQlRTeFJRVUZWTEVWQlF6RkNjMDBzVlVGQlZ5eERRVUZGZEUwc1MwRkJUU3hUUVVGWExFVkJRemxDYjA0c1dVRkJZU3hEUVVGRmNFNHNTMEZCVFN4UlFVRlZMRVZCUXk5Q1NTeExRVUZOTEVOQlEwWktMRXRCUVUwc1UwRkRUbXRHTEZkQlFWa3NRMEZEVW0xSkxGbEJRV0VzUTBGQlJYSk9MRXRCUVUwc1VVRkJWU3hGUVVNdlFuTk9MR2xDUVVGclFpeERRVUZGZEU0c1MwRkJUU3hUUVVGWExFVkJRM0pEU3l4UlFVRlRMRU5CUVVWTUxFdEJRVTBzVTBGQlZXOUpMRXRCUVUwc1EwRkJReXhKUVVGTExFbEJRVXNzUTBGREwwTXNSVUZEUkRGRExIRkNRVUZ6UWl4RFFVRkJMRVZCUTNSQ1JpeHJRa0ZCYlVJc1EwRkJSVTBzVFVGQlR5eEZRVUZITEVOQlEyeERMRVZCUTBReFJ5eFBRVUZSTEVOQlEwcFpMRXRCUVUwc1UwRkRUbXRHTEZkQlFWa3NRMEZEVWk5RkxFOUJRVkVzUTBGQlJVZ3NTMEZCVFN4VFFVRlZMRU5CUXpkQ0xFVkJRMFF3Uml4eFFrRkJjMElzUTBGQlFTeEZRVU4wUWtZc2EwSkJRVzFDTEVOQlFVVk5MRTFCUVU4c1JVRkJSeXhEUVVOc1F5eEZRVU5FYVVnc1RVRkJUeXhEUVVOSUwwMHNTMEZCVFN4VFFVTk9hMFlzVjBGQldTeERRVU5TY1Vrc1MwRkJUU3hEUVVOR2JFZ3NUVUZCVHl4RFFVRkRMRU5CUVVWeVJ5eExRVUZOTEZWQlFWZDVTU3hSUVVGVExFTkJRVVVzUlVGQlJ5eERRVUZGZWtrc1MwRkJUU3hSUVVGVkxFVkJRemxFTEVWQlEwUTBSQ3hMUVVGTkxFTkJRVVUxUkN4TFFVRk5MRkZCUVZNc1EwRkRNVUlzUlVGRFJEQkdMSEZDUVVGelFpeERRVUZCTEVWQlEzUkNSaXhyUWtGQmJVSXNRMEZCUlUwc1RVRkJUeXhGUVVGSExFTkJRMjVETEVOQlEwZ3NSVUZEUkVvc2NVSkJRWE5DTEVOQlFVRXNSVUZEZEVKR0xHdENRVUZ0UWl4RFFVRkZUU3hOUVVGUExFVkJRVWNzUTBGRGJFTXNSVUZGVWl4RlFVTkViVU1zV1VGQllTeERRVUZCTEVOQlEyaENMRVZCUTBSMVJpeGhRVUZqTEVOQlExWjRUaXhMUVVGTkxGRkJRMDV6Uml4TlFVRlBMRU5CUVVWMFJpeExRVUZOTEZGQlFWVXNSVUZEZWtKcFNTeFpRVUZoTEVOQlFVRXNRMEZEYUVJc1JVRkRSSGRHTEZsQlFXRXNRMEZCUlhwT0xFdEJRVTBzVVVGQlV5eERRVU5xUXl4RlFVTkVkMFlzYTBKQlFXMUNMRU5CUVVWTkxFMUJRVThzUlVGQlNTeEZRVU5vUTBvc2NVSkJRWE5DTEVOQlFVRXNRMEZEZWtJc1JVRkZSR2RHTEZsQlFXRXNRMEZEVkROR0xFbEJRVXNzTkVKQlEwd3ZSU3hMUVVGTkxGTkJRMDVyUml4WFFVRlpMRU5CUTFKM1NTeFJRVUZUTEVOQlFVVXhUaXhMUVVGTkxGTkJRVmNzUlVGRE5VSXlUaXhUUVVGVkxFTkJRVVV6VGl4TFFVRk5MRk5CUVZWelN5eFBRVUZSTEZWQlFWa3NSVUZEYUVSelJDeFJRVUZUTEVOQlFVVTFUaXhMUVVGTkxGRkJRVlVzUlVGRE0wSTJUaXhMUVVGTkxFTkJRMFo0U0N4TlFVRlBMRU5CUVVNc1EwRkJSWEpITEV0QlFVMHNVVUZCVXl4RlFVRkhMRU5CUVVWQkxFdEJRVTBzVVVGQlUzTkdMRTFCUVU4c1EwRkJSWFJHTEV0QlFVMHNVVUZCVXl4RFFVRkhMRVZCUXpORkxFVkJRMFE0VGl4UlFVRlRMRU5CUVVVNVRpeExRVUZOTEZOQlFWVnpTeXhQUVVGUkxGVkJRVmtzUlVGREwwTjVSQ3hoUVVGakxFTkJRVVV2VGl4TFFVRk5MRk5CUVZWelN5eFBRVUZSTEZWQlFWa3NSVUZEY0VRd1JDeGxRVUZuUWl4RFFVRkZhRThzUzBGQlRTeFRRVUZWYzBzc1QwRkJVU3hWUVVGWExFTkJRM2hFTEVWQlEwUTFSU3h4UWtGQmMwSXNRMEZCUVN4RlFVTjBRa1lzYTBKQlFXMUNMRU5CUVVWTkxFMUJRVThzUlVGQlJ5eERRVU5zUXl4RlFVTkViVWtzV1VGQllTeERRVU5VYkVvc1NVRkJTeXcwUWtGRFRDOUZMRXRCUVUwc1EwRkJReXhUUVVGVkxGRkJRMnBDYTBZc1YwRkJXU3hEUVVOU1owb3NUVUZCVHl4RFFVTkliRThzUzBGQlRTeFJRVU5PYzBZc1RVRkJUeXhEUVVOSWRFWXNTMEZCVFN4VFFVTk9hMFlzVjBGQldTeERRVU5TYVVvc1QwRkJVU3hEUVVGRmJrOHNTMEZCVFN4UlFVRlRjMFlzVFVGQlR5eERRVUZGZEVZc1MwRkJUU3hSUVVGVExFTkJRVWNzUlVGRGNFUnFReXhMUVVGTkxFTkJRVVZwUXl4TFFVRk5MRkZCUVZVc1JVRkRlRUp2VHl4UFFVRlJMRU5CUVVWd1R5eExRVUZOTEZOQlFWVnZTU3hMUVVGTkxFTkJRVU1zVlVGQlZ5eFBRVUZSTEdWQlFXbENMRVZCUTNKRmJra3NUMEZCVVN4RFFVRkZSQ3hMUVVGTkxGRkJRVk1zUTBGRE4wSXNRMEZEU0N4RlFVTkVlVW9zVTBGQlZTeERRVUZETEU5QlFWRXNWVUZEYmtJdlJDeHhRa0ZCYzBJc1EwRkJRU3hGUVVOMFFrWXNhMEpCUVcxQ0xFTkJRVVZOTEUxQlFVOHNSVUZCUnl4RFFVTnVReXhEUVVOS0xFTkJRMGdzUlVGRFJIVkpMRmRCUVZrc1EwRkRVblJLTEVsQlFVc3NNa0pCUTB3dlJTeExRVUZOTEVOQlFVTXNVMEZCVlN4UlFVTnFRbXRHTEZkQlFWa3NRMEZEVW5SQ0xFdEJRVTBzUTBGQlJUVkVMRXRCUVUwc1VVRkJWU3hGUVVONFFuTlBMR05CUVdVc1EwRkJSWFJQTEV0QlFVMHNVVUZCVlN4RlFVTnFRM1ZQTEZOQlFWVXNRMEZCUlhaUExFdEJRVTBzVTBGQlZ5eEZRVU0zUWpKSExFOUJRVkVzUTBGQlJYQkNMRXRCUVUwc05FSkJRVGhDTEVWQlF6bERhVW9zWjBKQlFXbENMRU5CUTJKNFR5eExRVUZOTEZOQlEwNXJSaXhYUVVGWkxFTkJRMUoxU2l4WlFVRmhMRU5CUVVWNlR5eExRVUZOTEZOQlFWY3NSVUZEYUVNd1R5eE5RVUZQTEVOQlFVVXhUeXhMUVVGTkxGTkJRVlZ6U3l4UFFVRlJMRlZCUVZrc1JVRkROME54UlN4bFFVRm5RaXhEUVVGRk0wOHNTMEZCVFN4UlFVRlZMRVZCUTJ4RE5FOHNVVUZCVXl4RFFVRkZOVThzUzBGQlRTeFRRVUZWYzBzc1QwRkJVU3hWUVVGWkxFVkJReTlEZFVVc2EwSkJRVzFDTEVOQlFVVTNUeXhMUVVGTkxGRkJRVlVzUlVGRGNrTTRUeXhOUVVGUExFTkJRVVU1VHl4TFFVRk5MRk5CUVZWdlNTeExRVUZOTEVOQlFVTXNZMEZCWlN4aFFVRmpMRU5CUTJoRkxFVkJRMFF4UXl4eFFrRkJjMElzUTBGQlFTeEZRVU4wUWtZc2EwSkJRVzFDTEVOQlFVVk5MRTFCUVU4c1JVRkJSeXhEUVVOc1F5eEZRVU5FYVVvc1kwRkJaU3hEUVVOWUwwOHNTMEZCVFN4VFFVTk9hMFlzVjBGQldTeERRVU5TZFVvc1dVRkJZU3hEUVVGRmVrOHNTMEZCVFN4VFFVRlhMRVZCUTJoRE1FOHNUVUZCVHl4RFFVRkZNVThzUzBGQlRTeFRRVUZWYzBzc1QwRkJVU3hWUVVGWkxFVkJRemREY1VVc1pVRkJaMElzUTBGQlJUTlBMRXRCUVUwc1VVRkJWU3hGUVVOc1F6UlBMRkZCUVZNc1EwRkJSVFZQTEV0QlFVMHNVMEZCVlhOTExFOUJRVkVzVlVGQldTeEZRVU12UTNWRkxHdENRVUZ0UWl4RFFVRkZOMDhzUzBGQlRTeFJRVUZWTEVWQlEzSkRPRThzVFVGQlR5eERRVUZGT1U4c1MwRkJUU3hUUVVGVmIwa3NTMEZCVFN4RFFVRkRMR05CUVdVc1lVRkJZeXhEUVVOb1JTeEZRVU5FTVVNc2NVSkJRWE5DTEVOQlFVRXNSVUZEZEVKR0xHdENRVUZ0UWl4RFFVRkZUU3hOUVVGUExFVkJRVWNzUTBGRGJFTXNSVUZEUkd0S0xGVkJRVmNzUTBGRFVHaFFMRXRCUVUwc1UwRkRUbXRHTEZkQlFWa3NRMEZEVWl0S0xFOUJRVkVzUTBGRFNtcFFMRXRCUVUwc1UwRkRUbXRHTEZkQlFWa3NRMEZEVWl0RUxFdEJRVTBzUTBGQlJXcEtMRXRCUVUwc1EwRkJReXhUUVVGVkxGTkJRVmNzUlVGRGNFTnJVQ3hQUVVGUkxFTkJRVVZzVUN4TFFVRk5MRkZCUVZVc1JVRkRNVUp0VUN4TFFVRk5MRU5CUVVWdVVDeExRVUZOTEZOQlFWVXNRMEZETTBJc1JVRkRSREJHTEhGQ1FVRnpRaXhEUVVGQkxFVkJRM1JDUml4clFrRkJiVUlzUTBGQlJVMHNUVUZCVHl4RlFVRkhMRU5CUTJ4RExFVkJRMFJ6U2l4aFFVRmpMRU5CUTFad1VDeExRVUZOTEZOQlEwNXJSaXhYUVVGWkxFTkJRMUlyUkN4TFFVRk5MRU5CUVVWcVNpeExRVUZOTEVOQlFVTXNVMEZCVlN4VFFVRlhMRVZCUTNCRGExQXNUMEZCVVN4RFFVRkZiRkFzUzBGQlRTeFJRVUZWTEVWQlF6RkNjVkFzYTBKQlFXMUNMRU5CUVVVNVNpeExRVUZOTEdsRFFVRnRReXhGUVVNNVJITkZMRkZCUVZNc1EwRkJSWFJGTEV0QlFVMHNkVUpCUVhkQ0xFTkJRelZETEVWQlEwUkhMSEZDUVVGelFpeERRVUZCTEVWQlEzUkNSaXhyUWtGQmJVSXNRMEZCUlUwc1RVRkJUeXhGUVVGSExFTkJRMjVETEVOQlEwZ3NSVUZEUkVvc2NVSkJRWE5DTEVOQlFVRXNSVUZEZEVKR0xHdENRVUZ0UWl4RFFVRkZUU3hOUVVGUExFVkJRVWNzUTBGRGJFTXNSVUZEUkhkS0xHVkJRV2RDTEVOQlExcDBVQ3hMUVVGTkxGTkJRMDVyUml4WFFVRlpMRU5CUTFKNVJTeFZRVUZYTEVOQlFVVXpTaXhMUVVGTkxGRkJRVlVzUlVGRE4wSXdUeXhOUVVGUExFTkJRVVV4VHl4TFFVRk5MRk5CUVZWelN5eFBRVUZSTEZWQlFWa3NSVUZETjBOcFJpeGhRVUZqTEVOQlFVVjJVQ3hMUVVGTkxGTkJRVmNzUlVGRGFrTjNVQ3hQUVVGUkxFTkJRVVY0VUN4TFFVRk5MRk5CUVZWelN5eFBRVUZSTEZWQlFWY3NRMEZEYUVRc1JVRkRSRFZGTEhGQ1FVRnpRaXhEUVVGQkxFVkJRM1JDUml4clFrRkJiVUlzUTBGQlJVMHNUVUZCVHl4RlFVRkhMRU5CUTJ4RExFVkJRMFF5U2l4VlFVRlhMRU5CUTFCNlVDeExRVUZOTEZOQlEwNXJSaXhYUVVGWkxFTkJRMUozU3l4WlFVRmhMRU5CUVVVeFVDeExRVUZOTEZGQlFWTnpSaXhOUVVGUExFTkJRVVYwUml4TFFVRk5MRkZCUVZNc1EwRkJSeXhGUVVONlJESlFMRmxCUVdFc1EwRkRWRE5RTEV0QlFVMHNVVUZEVG5OR0xFMUJRVThzUTBGRFNIUkdMRXRCUVUwc1UwRkRUbXRHTEZkQlFWa3NRMEZEVWpCTExFOUJRVkVzUTBGQlJUVlFMRXRCUVUwc1VVRkJVeXhEUVVNMVFpeEZRVU5FTUVZc2NVSkJRWE5DTEVOQlFVRXNSVUZEZEVKR0xHdENRVUZ0UWl4RFFVRkZUU3hOUVVGUExFVkJRVWNzUTBGRGJrTXNRMEZEU0N4RlFVTkVLMG9zYzBKQlFYVkNMRU5CUVVVM1VDeExRVUZOTEZOQlFWVXNRMEZETlVNc1JVRkRSREJHTEhGQ1FVRnpRaXhEUVVGQkxFVkJRM1JDUml4clFrRkJiVUlzUTBGQlJVMHNUVUZCVHl4RlFVRkhMRU5CUTI1RExFTkJRMGdzUlVGRFJFb3NjVUpCUVhOQ0xFTkJRVUVzUlVGRGRFSkdMR3RDUVVGdFFpeERRVUZGVFN4TlFVRlBMRVZCUVVjc1EwRkRiRU1zUlVGRlJIVktMR3RDUVVGdFFpeERRVU5tZEVzc1NVRkJTeXhyUTBGRFRDOUZMRXRCUVUwc1VVRkRUbk5HTEUxQlFVOHNRMEZEU0hSR0xFdEJRVTBzVTBGRFRtdEdMRmRCUVZrc1EwRkRValJMTEhWQ1FVRjNRaXhEUVVOd1FqbFFMRXRCUVUwc1UwRkRUbXRHTEZkQlFWa3NRMEZEVWpaTExFdEJRVTBzUTBGQlJTOVFMRXRCUVUwc1VVRkJWU3hGUVVONFFtaERMRTFCUVU4c1EwRkJSV2RETEV0QlFVMHNVVUZCVXl4RFFVTXpRaXhGUVVORU1FWXNjVUpCUVhOQ0xFTkJRVUVzUlVGRGRFSkdMR3RDUVVGdFFpeERRVUZGVFN4TlFVRlBMRVZCUVVjc1EwRkRia01zUTBGRFNDeEZRVU5FU2l4eFFrRkJjMElzUTBGQlFTeEZRVU4wUWtZc2EwSkJRVzFDTEVOQlFVVk5MRTFCUVU4c1JVRkJSeXhEUVVOdVF5eERRVU5JTEVWQlJVUXJSQ3hSUVVGVExFTkJRMHc1UlN4SlFVRkxMSGRDUVVOTUwwVXNTMEZCVFN4UlFVTk9jMFlzVFVGQlR5eERRVU5JZEVZc1MwRkJUU3hUUVVOT2EwWXNWMEZCV1N4RFFVTlNPRXNzWVVGQll5eERRVUZGZWtzc1MwRkJUU3dyUWtGQmFVTXNSVUZEZGtRd1N5eE5RVUZQTEVOQlFVVnFVU3hMUVVGTkxFTkJRVU1zVTBGQlZTeFZRVUZaTEVWQlEzUkRhMUVzVjBGQldTeERRVUZGTTBzc1MwRkJUU3dyUWtGQmFVTXNSVUZEY2tRd1JpeFBRVUZSTEVOQlFVVnFUQ3hMUVVGTkxGRkJRVlVzUlVGRE1VSnJUQ3hSUVVGVExFTkJRVVV6Uml4TFFVRk5MRFJDUVVFMlFpeERRVU5xUkN4RlFVTkVSeXh4UWtGQmMwSXNRMEZCUVN4RlFVTjBRa1lzYTBKQlFXMUNMRU5CUVVWTkxFMUJRVThzUlVGQlJ5eERRVU51UXl4RFFVTklMRVZCUlVSVUxGRkJRVk1zUTBGRFRFNHNTVUZCU3l4M1FrRkRUSE5DTEUxQlFVOHNRMEZEU0N4RFFVRkZja2NzUzBGQlRTeFJRVUZUTEVWQlEycENMRU5CUTBsQkxFdEJRVTBzVTBGRFRtdEdMRmRCUVZrc1EwRkRVbTVJTEV0QlFVMHNRMEZCUlhkSUxFdEJRVTBzT0VKQlFXZERMRVZCUXpsRE5FVXNVMEZCVlN4RFFVRkZOVVVzUzBGQlRTdzRRa0ZCWjBNc1JVRkRiRVEwU3l4clFrRkJiVUlzUTBGQlJXNVJMRXRCUVUwc1VVRkJVeXhEUVVOMlF5eEZRVU5FTUVZc2NVSkJRWE5DTEVOQlFVRXNRMEZEZWtJc1JVRkZVaXhGUVVWRWMwSXNVVUZCVXl4RFFVTk1ha01zU1VGQlN5eDNRa0ZEVEM5RkxFdEJRVTBzUTBGQlF5eFRRVUZWTEZGQlEycENhMFlzVjBGQldTeERRVU5TYmtjc1MwRkJUU3hEUVVGRmFVSXNTMEZCVFN4UlFVRlZMRVZCUTNoQ2FVd3NUMEZCVVN4RFFVRkZha3dzUzBGQlRTeFJRVUZWTEVWQlF6RkNiMUVzV1VGQllTeERRVU5VY0ZFc1MwRkJUU3hUUVVOT2QwWXNhMEpCUVcxQ0xFTkJRMll5Uml4UFFVRlJMRU5CUVVWdVRDeExRVUZOTEVOQlFVTXNVMEZCVlN4VFFVRlZMRU5CUTNwRExFTkJRMGdzUlVGRFJIRlJMRXRCUVUwc1EwRkRSbkpSTEV0QlFVMHNVMEZEVG10R0xGZEJRVmtzUTBGRFVpdEdMRTlCUVZFc1EwRkJSV3BNTEV0QlFVMHNVVUZCVlN4RlFVTXhRbTlLTEU5QlFWRXNRMEZEU25CS0xFdEJRVTBzVVVGRFRuTkdMRTFCUVU4c1EwRkRTSFJHTEV0QlFVMHNVMEZEVG10R0xGZEJRVmtzUTBGRFVtOU1MRTlCUVZFc1EwRkJSWFJSTEV0QlFVMHNVMEZCVlhOTExFOUJRVkVzYlVKQlFYRkNMRVZCUTNaRWFVY3NVMEZCVlN4RFFVRkZkbEVzUzBGQlRTeFJRVUZWTEVWQlF6VkNkMUVzVVVGQlV5eERRVUZGZUZFc1MwRkJUU3hSUVVGVkxFVkJRek5DZVZFc1kwRkJaU3hEUVVOWWVsRXNTMEZCVFN4VFFVTk9NRVlzY1VKQlFYTkNMRU5CUVVFc1JVRkRkRUpHTEd0Q1FVRnRRaXhEUVVGRk1rWXNUMEZCVVN4RFFVRkZia3dzUzBGQlRTeFJRVUZUTEVOQlFVVXNRMEZEY0VRc1EwRkRTQ3hGUVVORU1FWXNjVUpCUVhOQ0xFTkJRVUVzUlVGRGRFSkdMR3RDUVVGdFFpeERRVUZGVFN4TlFVRlBMRVZCUVVjc1EwRkRia01zUTBGRFNDeEZRVU5FYjBZc1VVRkJVeXhEUVVOTWJFd3NTMEZCVFN4VFFVTk9NRVlzY1VKQlFYTkNMRU5CUVVFc1JVRkRkRUpHTEd0Q1FVRnRRaXhEUVVGRk1rWXNUMEZCVVN4RFFVRkZia3dzUzBGQlRTeFJRVUZUTEVOQlFVVXNRMEZEY0VRc1EwRkRTQ3hGUVVORU1FWXNjVUpCUVhOQ0xFTkJRVUVzUlVGRGRFSkdMR3RDUVVGdFFpeERRVUZGVFN4TlFVRlBMRVZCUVVjc1EwRkRiRU1zUlVGRFJEZEhMRk5CUVZVc1EwRkRUbVVzUzBGQlRTeERRVUZETEZWQlFWY3NWVUZEYkVKclJpeFhRVUZaTEVOQlExSnVSeXhMUVVGTkxFTkJRMFl5VWl4WFFVRlpMRU5CUVVFc1JVRkRXakZSTEV0QlFVMHNVVUZEVml4RFFVTklMRVZCUTBRd1JpeHhRa0ZCYzBJc1EwRkJRU3hGUVVOMFFrWXNhMEpCUVcxQ0xFTkJRVVZOTEUxQlFVOHNSVUZCUnl4RFFVTnNReXhGUVVORU5rc3NVMEZCVlN4RFFVRkZNMUVzUzBGQlRTeFRRVUZYTEVWQlF6ZENORkVzV1VGQllTeERRVUZGTlZFc1MwRkJUU3hUUVVGWExFVkJRMmhETmxFc1YwRkJXU3hEUVVGRk4xRXNTMEZCVFN4VFFVRlhMRVZCUXk5Q01rY3NUMEZCVVN4RFFVRkZjRUlzUzBGQlRTdzBRa0ZCTmtJc1EwRkRhRVFzUlVGRFJFY3NjVUpCUVhOQ0xFTkJRVUVzUlVGRGRFSkdMR3RDUVVGdFFpeERRVUZGVFN4TlFVRlBMRVZCUVVjc1EwRkRiRU1zUlVGRlJERkhMRTlCUVZFc1EwRkRTakpHTEVsQlFVc3NkVUpCUTB3dlJTeExRVUZOTEVOQlFVTXNVMEZCVlN4UlFVTnFRbXRHTEZkQlFWa3NRMEZEVW01SExFdEJRVTBzUTBGQlJXbENMRXRCUVUwc1VVRkJWU3hGUVVONFFtbE1MRTlCUVZFc1EwRkJSV3BNTEV0QlFVMHNVVUZCVlN4RlFVTXhRbTlSTEZsQlFXRXNRMEZEVkhCUkxFdEJRVTBzVTBGRFRuZEdMR3RDUVVGdFFpeERRVU5tTWtZc1QwRkJVU3hEUVVGRmJrd3NTMEZCVFN4RFFVRkRMRk5CUVZVc1UwRkJWU3hEUVVONlF5eERRVU5JTEVWQlEwUm1MRk5CUVZVc1EwRkRUbVVzUzBGQlRTeERRVUZETEZWQlFWY3NWVUZEYkVKclJpeFhRVUZaTEVOQlExSnVSeXhMUVVGTkxFTkJRMFl5VWl4WFFVRlpMRU5CUVVFc1JVRkRXakZSTEV0QlFVMHNVVUZEVml4RFFVTklMRVZCUTBRd1JpeHhRa0ZCYzBJc1EwRkJRU3hGUVVOMFFrWXNhMEpCUVcxQ0xFTkJRVVZOTEUxQlFVOHNSVUZCUnl4RFFVTnNReXhGUVVORVlTeFBRVUZSTEVOQlFVVndRaXhMUVVGTkxEUkNRVUUyUWl4RFFVTm9SQ3hGUVVORVJ5eHhRa0ZCYzBJc1EwRkJRU3hGUVVOMFFrWXNhMEpCUVcxQ0xFTkJRVVZOTEUxQlFVOHNSVUZCUnl4RFFVTnNReXhGUVVWRVowd3NUMEZCVVN4RFFVTktMMHdzU1VGQlN5eDFRa0ZEVEM5RkxFdEJRVTBzVTBGRFRtdEdMRmRCUVZrc1EwRkRVbTVITEV0QlFVMHNRMEZCUldsQ0xFdEJRVTBzVVVGQlZTeEZRVU40UW05TExGbEJRV0VzUTBGQlJYQkxMRXRCUVUwc1VVRkJWU3hGUVVNdlFuRktMRXRCUVUwc1EwRkJSWEpLTEV0QlFVMHNVVUZCVlN4RlFVTjRRbVlzVTBGQlZTeERRVU5PWlN4TFFVRk5MRU5CUVVNc1ZVRkJWeXhWUVVOc1FtdEdMRmRCUVZrc1EwRkRVbTVITEV0QlFVMHNRMEZCUldsQ0xFdEJRVTBzVVVGQlV5eERRVU16UWl4RFFVTklMRVZCUTBReVJ5eFBRVUZSTEVOQlFVVndRaXhMUVVGTkxEUkNRVUU0UWl4RlFVTTVRekJHTEU5QlFWRXNRMEZCUldwTUxFdEJRVTBzVVVGQlZTeEZRVU14UW05UkxGbEJRV0VzUTBGRFZIQlJMRXRCUVUwc1UwRkRUbmRHTEd0Q1FVRnRRaXhEUVVObU1rWXNUMEZCVVN4RFFVRkZia3dzUzBGQlRTeERRVUZETEZOQlFWVXNVMEZCVlN4RFFVTjZReXhEUVVOSUxFVkJRMFFyVVN4blFrRkJhVUlzUTBGQlJTOVJMRXRCUVUwc1VVRkJVeXhEUVVOeVF5eEZRVU5FTUVZc2NVSkJRWE5DTEVOQlFVRXNSVUZEZEVKR0xHdENRVUZ0UWl4RFFVRkZUU3hOUVVGUExFVkJRVWNzUTBGRGJFTXNSVUZGUkhORUxFOUJRVkVzUTBGRFNuSkZMRWxCUVVzc2RVSkJRMHd2UlN4TFFVRk5MRk5CUTA1clJpeFhRVUZaTEVOQlExSnVSeXhMUVVGTkxFTkJRVVZwUWl4TFFVRk5MRkZCUVZVc1JVRkRlRUpwUWl4UlFVRlRMRU5CUVVWcVFpeExRVUZOTEZGQlFWVXNSVUZETTBKdlN5eFpRVUZoTEVOQlFVVndTeXhMUVVGTkxGRkJRVlVzUlVGREwwSnhTaXhMUVVGTkxFTkJRVVZ5U2l4TFFVRk5MRkZCUVZVc1JVRkRlRUptTEZOQlFWVXNRMEZEVG1Vc1MwRkJUU3hEUVVGRExGVkJRVmNzVlVGRGJFSnJSaXhYUVVGWkxFTkJRMUp1Unl4TFFVRk5MRU5CUTBZeVVpeFhRVUZaTEVOQlFVRXNSVUZEV2pGUkxFdEJRVTBzVVVGRFZpeERRVU5LTEVOQlEwZ3NSVUZEUkRKSExFOUJRVkVzUTBGQlJYQkNMRXRCUVUwc05FSkJRVGhDTEVWQlF6bERkMHdzWjBKQlFXbENMRU5CUVVVdlVTeExRVUZOTEZGQlFWTXNRMEZEY2tNc1JVRkRSREJHTEhGQ1FVRnpRaXhEUVVGQkxFVkJRM1JDUml4clFrRkJiVUlzUTBGQlJVMHNUVUZCVHl4RlFVRkhMRU5CUTJ4RExFVkJSVVIzUXl4UlFVRlRMRU5CUTB4cVF5eE5RVUZQTEVOQlFVTXNRMEZCUlhKSExFdEJRVTBzVFVGQlR5eEZRVUZITEVOQlFVVkJMRXRCUVUwc1VVRkJVeXhGUVVGSExFTkJRVVZCTEV0QlFVMHNVVUZCVTNOR0xFMUJRVThzUTBGQlJYUkdMRXRCUVUwc1VVRkJVeXhEUVVGSExFVkJRemRHTEVWQlJVUm5VaXhsUVVGblFpeERRVU5hTTBzc1RVRkJUeXhEUVVGRExFTkJRVVZ5Unl4TFFVRk5MRkZCUVZNc1JVRkJSeXhEUVVGRmRVWXNTMEZCVFN3clFrRkJhVU1zUlVGRGVFVXNSVUZGUkRCTUxHZENRVUZwUWl4RFFVTmlhbElzUzBGQlRTeFJRVU5PYzBZc1RVRkJUeXhEUVVGRmRFWXNTMEZCVFN4UlFVRlZMRVZCUTNwQ2FVa3NXVUZCWVN4RFFVRkJMRU5CUTJoQ0xFVkJSVVJwU2l4aFFVRmpMRU5CUTFZM1N5eE5RVUZQTEVOQlEwZ3NRMEZEU1hKSExFdEJRVTBzVTBGRFRuZEdMR3RDUVVGdFFpeERRVU5tTWt3c1MwRkJUU3hEUVVOR2JsSXNTMEZCVFN4RFFVRkRMRk5CUVZVc1UwRkJWU3hWUVVGWExFOUJRekZETEVOQlEwZ3NSVUZEUkRCR0xIRkNRVUZ6UWl4RFFVRkJMRU5CUXpGQ0xFVkJRMEVzUTBGQlJURkdMRXRCUVUwc1VVRkJVM05HTEUxQlFVOHNRMEZCUlhSR0xFdEJRVTBzVVVGQlZTeEZRVUZGYVVrc1dVRkJZU3hEUVVGQkxFTkJRVTBzUlVGRmRFVXNSVUZGUkcxS0xGbEJRV0VzUTBGRFZIQlNMRXRCUVUwc1UwRkRUbXRHTEZkQlFWa3NRMEZEVW01SUxFdEJRVTBzUTBGQlJXbERMRXRCUVUwc1VVRkJWU3hGUVVONFFuRlNMRXRCUVUwc1EwRkJSWEpTTEV0QlFVMHNRMEZCUXl4VlFVRlhMRk5CUVZVc1EwRkRka01zUlVGRFJEQkdMSEZDUVVGelFpeERRVUZCTEVOQlEzcENMRVZCUTBRMFRDeGhRVUZqTEVOQlExWjBVaXhMUVVGTkxGTkJRMDVyUml4WFFVRlpMRU5CUTFKdVNDeExRVUZOTEVOQlFVVnBReXhMUVVGTkxGRkJRVlVzUlVGRGVFSTRTQ3hQUVVGUkxFTkJRVVU1U0N4TFFVRk5MRk5CUVZVc1EwRkROMElzUlVGRFJEQkdMSEZDUVVGelFpeERRVUZCTEVOQlEzcENMRVZCUTBRMlRDeDVRa0ZCTUVJc1EwRkRkRUoyVWl4TFFVRk5MRkZCUTA1elJpeE5RVUZQTEVOQlEwaGxMRTFCUVU4c1EwRkRTQ3hEUVVGRmNrY3NTMEZCVFN4UlFVRlRMRVZCUTJwQ0xFTkJRMGxCTEV0QlFVMHNVMEZEVG10R0xGZEJRVmtzUTBGRFVuUkdMRTlCUVZFc1EwRkJSVWtzUzBGQlRTeFJRVUZWTEVWQlF6RkNReXhQUVVGUkxFTkJRVVZFTEV0QlFVMHNVVUZCVlN4RlFVTXhRbmRTTEVsQlFVc3NRMEZCUlhoU0xFdEJRVTBzVVVGQlZTeEZRVU4yUW5sU0xFbEJRVXNzUTBGQlJYcFNMRXRCUVUwc1VVRkJWU3hGUVVOMlFqUkVMRXRCUVUwc1EwRkJSVFZFTEV0QlFVMHNVVUZCVXl4RFFVTXhRaXhGUVVORU1FWXNjVUpCUVhOQ0xFTkJRVUVzUlVGRGRFSkdMR3RDUVVGdFFpeERRVUZGVFN4TlFVRlBMRVZCUVVjc1EwRkRiRU1zUlVGRlZDeERRVU5JTEVWQlEwUjVRaXhSUVVGVExFTkJRMHgyU0N4TFFVRk5MRk5CUTA1M1JpeHJRa0ZCYlVJc1EwRkRabXROTEZkQlFWa3NRMEZEVW5KTUxFMUJRVThzUTBGRFNDeERRVUZGY2tjc1MwRkJUU3hUUVVGVkxFVkJRMnhDTEVOQlEwbEJMRXRCUVUwc1UwRkRUbXRHTEZkQlFWa3NRMEZEVW5sTkxFdEJRVTBzUTBGQlJUTlNMRXRCUVUwc1UwRkJWeXhGUVVONlFqUlNMRXRCUVUwc1EwRkJSVFZTTEV0QlFVMHNVMEZCVlN4RFFVTXpRaXhGUVVORWVVb3NVMEZCVlN4RFFVRkRMRTlCUVZFc1VVRkRia0l2UkN4eFFrRkJjMElzUTBGQlFTeEZRVU4wUWtZc2EwSkJRVzFDTEVOQlFVVk5MRTFCUVU4c1JVRkJSeXhEUVVOc1F5eEZRVVZVTEVOQlEwb3NRMEZEU0N4RlFVTkVORW9zV1VGQllTeERRVU5VYWt3c1VVRkJVeXhEUVVOTVRTeEpRVUZMTEc5RFFVTk1PRTBzVFVGQlR5eERRVUZETEVOQlFVVndTU3hUUVVGVkxFTkJRVU1zVVVGQlV5eEZRVUZITEVOQlFVVkJMRk5CUVZVc1EwRkJReXhSUVVGVExFZEJRM1pFZGtVc1YwRkJXU3hEUVVOU2EwSXNUVUZCVHl4RFFVTkljVVFzVTBGQlZTeERRVUZETEZWQlEyWXNRMEZEU2l4RFFVTktMRU5CUTBvc1EwRkRTaXhEUVVOS0xFVkRhakZDVFc1S0xFVkJRVTlETEZGQlFWRXNUVUZCVFN4RlFVTnlRblZTTEVWQlFVMTJVaXhSUVVGUkxFdEJRVXNzUlVGRGJrSjNVaXhGUVVGWmVGSXNVVUZCVVN4WlFVRlpMRVZCUldoRGVWSXNSVUZCVlN4RFFVVmFNMGdzVDBGQlVTdzJRa0ZEVW5SSUxFMUJRVTlTTEVWQlExQnRReXhSUVVGVGVFWXNSVUZEVkN0VExGTkJRVlVzZDBKQlExWkRMRXRCUVUwc2RVSkJSVTVETEd0Q1FVTkpMSGw0UWtGRFVpeEZRVFJEUVN4SlFVRk5ReXhGUVVGclFuUlZMRWxCUTNCQ0xFZEJRVWtyUkN4TlFVRk5kMUVzVVVGQlVYWlZMRU5CUVVjc1JVRkRha0lzU1VGQlMwY3NTVUZCU1Uwc1JVRkJTU3hGUVVGSFFTeEZRVUZKVkN4RlFVRkpVU3hQUVVGUlF5eEhRVUZMTEVWQlEycERObFFzUlVGQlpYUlZMRVZCUVVsVExFVkJRVVVzVFVGRlNDeFZRVUZtTEU5QlFVOVVMRWxCUTFaQkxFVkJRVWxyUXl4TlFVRlJiRU1zUlVGQlNYZE5MRk5CUTJoQ2VFMHNSVUZCU1hOSUxGRkJRVlUwVFN4RlFVRlJiRlVzUlVGQlNYZE5MRkZCUVZGblNTeFRRVUZWTEVWQlF6VkRMRTlCUVU5NFZTeEZRVUZKZDAwc1VVRkZaakZNTEU5QlFVOURMRXRCUVV0bUxFTkJRVWNzUlVGQlJXZENMRkZCUVZONVZDeEpRVU4wUWtnc1JVRkJaWFJWTEVWQlFVbDVWU3hGUVVGSkxFTkJRek5DTEVOQlFVTXNSMEZIVEN4UFFVRlBlbFVzUTBGRFdDeEZRelJKUVN4VFFVRlRNRlVzUlVGQmNVSXhUeXhGUVVGWE1rOHNSMEZEY2tNc1NVRkZWVU1zUlVGR1NrTXNSMEZxUW1WdVR5eEpRVU55UWl4SlFVRk5iMDhzUlVGQll5eEhRVlZ3UWl4UFFWUkJhRlVzVDBGQlR6SkdMRTlCUVU5RExFTkJRVkVzUlVGQlJURkdMRkZCUVZNeVJpeEpRVUZoUVN4RlFVRlJReXhUUVVGWExFbEJRVWsxUml4UlFVRlRUU3hIUVVGWGQxUXNSVUZCV1c1U0xFdEJRVXR5UXl4RFFVRk5MRU5CUVVNc1EwRkJReXhGUVVVMVIzbFVMRVZCUVZFc1NVRkJTVU1zU1VGRFpFWXNSVUZCV1ROUkxFbEJRVXM0VVN4SlFVTlFibFFzUlVGQlUwd3NSVUZCTkVKM1ZDeERRVUZKTEVWQlF5OURMRTlCUVU5d1ZDeEZRVUZqUXl4RFFVRk5MRVZCUVVsQkxFVkJRVk52VkN4TFFVRkJRU3hEUVVNMVF5eERRVUZETEVOQlEwd3NSVUZGVDI1U0xFMUJRVTFETEV0QlFVc3JVU3hEUVVGTExFVkJRMnhDU1N4UFFVRlJiRlVzUjBGQlUwRXNRMEZCU1N4RlFVTnlRbXRFTEVsQlFVdHNSQ3hKUVVGVkxFVkJRVWRCTEVkQlFVOHNRMEZCUlVVc1UwRkJWU3hEUVVGQkxFVkJRVTFHTEV0QlFVRkJMRU5CUVVzc1EwRkJSeXhGUVVGRExFTkJRemRFTEVkQlIzbERLMFVzUlVGQlMxVXNVVUZCVVN4RlFVTjRRaXhGUVVGMFFtMVBMRVZCUVdGeVZTeFRRVU5RYjFVc1JVRkJiMEpETEVWQlFXRXhVU3hKUVVGTGFWSXNSMEZCVFVNc1MwRkJTMnhRTEZWQlFWVnBVQ3hEUVVGRExFTkJRVU1zUlVGQlJTOVJMRXRCUVVzc1IwRkJSeXhGUVVNM1JYTlJMRVZCUVVkcVVDeHJRa0ZCUVVFc1QwRkRiVUpyVUN4dFVrRkRkRUlzUlVGRFFUVlBMRVZCUVV0WkxGRkJRVlZwVHl4RlFVVjJRaXhEUVVWclF5eFRRVUZ5UWxNc1JVRkJjMEp1VXl4SFFVRXdSR2hFTEVsQlFYcERPRVlzUlVGQk5rSXNSVUZCUVhOUUxGVkJRVUV2VlN4UlFVRkJNRlVzUzBGQlFVRXNTVUZCUVVzc1ZVRkJRU3hIUVVGQlFTeFZRVUZCTEVkQlFVY3NTMEZEYUVZc1NVRkJUWFpRTEVWQlFVOHhRaXhGUVVGVmJrSXNRMEZCVHl4RlFVVTVRaXhIUVVGSkxFTkJRVU0yUXl4RlFVRk5MRTlCUVU4M1F5eEZRVU5zUWl4SFFVRnZRaXhWUVVGb1FpeFBRVUZQTmtNc1JVRkJiVUlzVDBGQlR6ZERMRVZCUTNKRExFZEJRVWx5UXl4UFFVRlBNRlVzVlVGQlZVTXNaVUZCWlVNc1MwRkJTekZRTEVWQlFVMHNWVUZCVlN4RlFVRkhMRTlCUVU4M1F5eEZRVVZ1UlN4SlFVRk5kMU1zUlVGQlpUZFZMRTlCUVU5RExFdEJRVXRwUml4RFFVRkpMRVZCUlM5Q05GQXNSVUZCVHl4SFFVTlFha0lzUlVGQlR6bFNMRWRCUVZrclV5eEZRVUZMYWxNc1MwRkJTMlFzUTBGQlR5eEZRVmR3UXpaRUxFZEJWRTQxUml4UFFVRlBReXhMUVVGTGFVWXNRMEZCU1N4RlFVRkZhRVlzVVVGQlUwTXNTVUV6UjFSQkxFVkJORWRFUVN4RlFUVkhaVEJHTEVWQk5FZFVXQ3hGUVVGTEwwVXNSMEUxUjJ0Q01GUXNSVUUwUjFoQkxFZEJNVWN2UWpGSUxFVkJSR04wUnl4RlFVRktMRk5CUlVwclVDeEZRVUZwUWpWSkxFVkJRVTBzUjBGQlJ6Tk5MRTFCUVUwc1IwRkJSeXhGUVVGRkxFZEJRek5EY1ZVc1lVRkJSMnBRTEU5QlExbDZSU3hGUVVGSkxHMUZRVUZCTEVWQlFVRjVSU3hQUVVGdlJXMVJMRVZCUVdWRExGbEJRVmNzUlVGQlJTeHhTRUZCUVN4RlFVRkJjRkVzVDBGQmMwaHRVU3hQUVVONlR5eEhRVWx6UWpWVkxFVkJiVWRFUVN4RlFXNUhaVEJHTEVWQmJVZFVXQ3hGUVVGTEwwVXNSMEZ1UjJ0Q01GUXNSVUZ0UjFoQkxFZEJiRWR5UTI5Q0xFVkJRV2RDY0ZBc1JVRkJVU3RHTEdsQ1FVVXhRbWxKTEVWQlFVY3NWMEZCUVdwUUxFOUJRMWw2UlN3eVFrRkJTWGxGTEU5QlFYZENjVkVzUlVGQllTeHJZVUZCUVN4RFFVTjRSQ3hGUVdaU0xFbEJPRU4zUW5CUUxFVkJNMEpLUVN4RlFUSkdSRmdzUlVGQlN5OUZMRWRCTTBaVk1GVXNSVUV5UmtoQkxFVkJNVVl6UWl4SFFVRkphRkFzUlVGQlVYRlFMRWxCUVVzc1EwRkRZamRXTEVsQlFVazRWaXhGUVVGamRGQXNSVUZCVVhGUUxFbEJSM1JDUXl4RlFVRlpReXhYUVVGWExGbEJRVmtzU1VGRE4wSnFWaXhGUVVGUFoxWXNSVUZCV1ROV0xFMUJRVTBzUjBGQlJ5eEZRVUZGTEVkQlEyaERjVllzUlVGQllUVlVMRk5CUVZOa0xFTkJRVWtzUzBGRE1VSm5WaXhGUVVGWGRsRXNWMEZCUVVFc1QwRkJZM3BGTEVOQlFVa3NSMEZKY2tNd1JpeEZRVUZSWjBnc1lVRkJaWE5KTEVWQlEzWkNMRTlCUVU5MFVDeEZRVUZSY1ZBc1IwRkRia0lzUlVGSGEwSnlVQ3hGUVRKRlJGZ3NSVUZCU3k5RkxFbEJNVVZXZDBnc1lVRkRVamxDTEVWQlFWRXlRaXhOUVVGUkxFTkJRMXBGTEZGQlFWTTNRaXhGUVVGUk1rSXNUVUZEYWtKSExGZEJRVms1UWl4RlFVRlJPRUlzVlVGRGRrSXNSVUZEUkN4UFFVRlBPVUlzUlVGQlVUaENMR0ZCU1VNNVFpeEZRV3RGUkZnc1JVRkJTeTlGTEVsQmFrVmFhMVlzWVVGRFVuaFFMRVZCUVZGMVJ5eFJRVUZWTEVOQlFVVkRMRTlCUVZGNFJ5eEZRVUZSZDFBc1ZVRkJXU3hGUVVNMVEzaFFMRVZCUVZGNVVDeFZRVU5TZWxBc1JVRkJVWFZITEZGQlFWRkZMRkZCUVZWNlJ5eEZRVUZSZVZBc1VVRkRiRU1zVDBGQlQzcFFMRVZCUVZGNVVDeFRRVVZ1UWl4UFFVRlBlbEFzUlVGQlVYZFFMRmxCTkVSbVJTeEpRWGhFYjBJeFVDeEZRWGRFUkZnc1JVRkJTeTlGTEVkQmVFUlZNRlVzUlVGM1JFaEJMRVZCZGtSdVF5eEhRVUZKYUZBc1JVRkJVU3RKTEdGQlExSXNTVUZCUzNaUUxFbEJRVWx0Vnl4RlFVRk5MRVZCUVVkQkxFVkJRVTB6VUN4RlFVRlJLMGtzWVVGQllXeFFMRTlCUVZFNFZpeEhRVUZQTEVWQlFVY3NRMEZETTBRc1NVRkJUVU1zUlVGQllUVlFMRVZCUVZFclNTeGhRVUZoTkVjc1IwRkRia05ZTEVWQlFXRTFWQ3hUUVVGVGQxVXNSVUZCVjJwWExFMUJRVTBzUjBGQlJ5eEZRVUZGTEVWQlFVVXNTVUZETDBOeFJ5eEZRVUZSSzBrc1lVRkJZVFJITEVkQlFVazFVU3hoUVVGQlFTeFBRVUZuUWpaUkxFTkJRVlVzUlVGRk0wUXNRMEZyUkVvc1EwRkJReXhGUVVWblFpeEpRV0ZxUWl4UFFWcEJlbFlzVDBGQlQwTXNTMEZCUzJsR0xFTkJRVWtzUlVGQlJXaEdMRkZCUVZORExFbEJRM1pDZVVZc1JVRkJVM3BHTEVkQlFWRXJSU3hGUVVGTEwwVXNSMEZEZEVJc1QwRkJUeXRGTEVWQlFVc3ZSU3hGUVVOb1FpeERRVUZETEVWQlJVUXJSU3hGUVVGTGNVSXNVVUZCVlN4TlFVTm1ja0lzUlVGQlMxVXNVMEZCVjBFc1JVRkRhRUpuVHl4RlFVRnhRakZQTEVWQlFVMHlUeXhEUVVGSExFVkJSVGxDYUZVc1JVRkJiVUp4Uml4RlFVRk5MRlZCUVZVc1JVRkRia055Uml4RlFVRnRRbkZHTEVWQlFVMHNVMEZCVXl4RlFVYzVRalJRTEVWQlFVdDZVaXhKUVVGTFF5eEhRVUZETEV0QlFVRnpRaXhQUVVGVmRFSXNSVUZCUldoRExGRkJRVkVzVFVGQlR5eExRVUZMTEVOQlFVTXNRMEZCUlN4RlFVRkZhVU1zUzBGQlN5eEpRVUZKTEVkQlF6RkRMRVZCUVdSMVVpeEZRVUZMY0ZZc1QwRkJZU3hMUVVGUExFbEJRekZDZFVZc1JVRkJZME1zUlVGQlRVTXNRMEZCWVN4RFFVVjZReXgzUTBRMVRHOUVkVkVzU1VGRGVrTnNReXhGUVVGbGRFNHNRMEZCTmtJc2FVZERjRVZ3UWl4VFFVRkROMFFzUjBGQk1FUm9SQ3hKUVVGNlF6aEdMRVZCUVRaQ0xFVkJRVUZ6VUN4VlFVRkJMMVVzVVVGQlFUQlZMRXRCUVVGQkxFbEJRVUZMTEZWQlFVRXNSMEZCUVVFc1ZVRkJRU3hIUVVGSExFdEJRMnBHTEVsQlFVMTJVQ3hGUVVGUE1VSXNSVUZCVlc1Q0xFTkJRVThzUlVGRE9VSXNSMEZCU1N4RFFVRkROa01zUlVGQlRTeFBRVUZQTjBNc1JVRkRiRUlzUjBGQmIwSXNWVUZCYUVJc1QwRkJUelpETEVWQlFXMUNMRTlCUVU4M1F5eEZRVU55UXl4SFFVRkpMRU5CUVVNMlF5eEZRVUZMY1VJc1UwRkJWM0pDTEVWQlFVdHhRaXhSUVVGUk5rOHNWMEZCVnl4SFFVRkhMRVZCUVVjc1QwRkJUeTlUTEVWQlJURkVMRWxCUVUxNVV5eEZRVUZQTEVkQlExQnFRaXhGUVVGUE9WSXNSMEZCV1N0VExFVkJRVXRxVXl4TFFVRkxaQ3hEUVVGUExFVkJORVF4UXl4UFFURkVRUzlDTEU5QlFVOURMRXRCUVV0cFJpeEZRVUZMVlN4UlFVRlJMRVZCUVVVeFJpeFJRVUZUUXl4SlFVTm9ReXhKUVVGTk1FWXNSVUZCVlZnc1JVRkJTMVVzVTBGQlUzcEdMRWRCUXpGQ01FWXNSVUZCVVhkRkxFMUJRVTF3VEN4RlFVRmhORWNzUlVGQlV5d3JRa0ZCWjBOQkxFVkJRVkYzUlN4SlFVRkpMRVZCUTJoR2VFVXNSVUZCVVRSSExGZEJRVmQ0VGl4RlFVRmhORWNzUlVGQlV5eHBRMEZCYTBOQkxFVkJRVkUwUnl4VFFVRlRMRVZCUXpWR05VY3NSVUZCVVhsSUxGbEJRVmx5VHl4RlFVRmhORWNzUlVGQlV5d3JRa0ZCWjBOQkxFVkJRVkY1U0N4VlFVRlZMRVZCUXpWR2VrZ3NSVUZCVVRaSExHbENRVU5TZWs0c1JVRkJZVFJITEVWQlFWTXNkVU5CUVhkRFFTeEZRVUZSTmtjc1pVRkJaU3hGUVVkeVJqZEhMRVZCUVZFNFVDeG5Ra0ZEVWpsQ0xFVkJRVWNzVjBGQlFXcFFMRTlCUTFsNlJTeEZRVUZKTEhGQ1FVRkJMRVZCUVVGNVJTeFBRVUZ6UW1sQ0xFVkJRVkU0VUN4alFVRmhMSGRQUVVGQkxFTkJRemxFTEVWQlEwRXNUMEZCVHpsUUxFVkJRVkU0VUN4bFFVZG1PVkFzUlVGQlVTdEpMR1ZCUTFKcFJpeEZRVUZITEZkQlFVRnFVQ3hQUVVOWmVrVXNSVUZCU1N4dlFrRkJRU3hGUVVGQmVVVXNUMEZCY1VKcFFpeEZRVUZSSzBrc1lVRkJXU3h0VmtGQlFTeERRVU0xUkN4RlFVTkJMRTlCUVU4dlNTeEZRVUZSSzBrc1kwRkhSeXhEUVVGRExHRkJRV01zV1VGQllTeFRRVUZWTEdsQ1FVTTVRekZQTEZGQlFWTXdWaXhKUVVObU5WWXNUMEZCVHpCVkxGVkJRVlZETEdWQlFXVkRMRXRCUVVzdlR5eEZRVUZUSzFBc1EwRkJReXhIUVVNdlF5OUNMRVZCUVVkcVVDeFhRVUZCUVN4UFFVTlpla1VzVjBGQlNYbEZMRTlCUVZGblVpeEZRVUZETEVkQlFVRXNSVUZCUVdoU0xFOUJRVWxwUWl4RlFVRlJLMUFzYjFCQlEzaERMRVZCUlVvc1QwRkJUeTlRTEVWQlFWRXJVQ3hGUVVOdVFpeERRVUZETEVWQlJVY3ZVQ3hGUVVGUk9FWXNWVUZEVW10SkxFVkJRVWNzVjBGQlFXcFFMRTlCUTFsNlJTeEZRVUZKTEdWQlFVRXNSVUZCUVhsRkxFOUJRV2RDYVVJc1JVRkJVVGhHTEZGQlFVOHNkVXRCUVVFc1EwRkRiRVFzUlVGRFFTeFBRVUZQT1VZc1JVRkJVVGhHTEZOQlJXWTVSaXhGUVVGUlowY3NXVUZEVW1kSkxFVkJRVWNzVjBGQlFXcFFMRTlCUTFsNlJTeEZRVUZKTEdsQ1FVRkJMRVZCUVVGNVJTeFBRVUZyUW1sQ0xFVkJRVkZuUnl4VlFVRlRMR2xGUVVGQkxFTkJRM1JFTEVWQlEwRXNUMEZCVDJoSExFVkJRVkZuUnl4WFFVZHVRaXhQUVVGUGFFY3NSVUZCVVhkRkxFdEJRMllzVDBGQlQzaEZMRVZCUVZFMFJ5eFZRVU5tTEU5QlFVODFSeXhGUVVGUmVVZ3NWMEZEWml4UFFVRlBla2dzUlVGQlVUWkhMR1ZCUTI1Q0xFTkJRVU1zUlVGRlJIaElMRVZCUVV0eFFpeFJRVUZWTEVsQlEyWXhSeXhGUVVGdFFuRkdMRVZCUVUwc1ZVRkJWU3hGUVVOdVEzSkdMRVZCUVcxQ2NVWXNSVUZCVFN4VFFVRlRMRVZCU3psQ05GQXNSVUZCUzNwU0xFbEJRVXRETEVkQlFVTXNTMEZCUVhOQ0xFOUJRVlYwUWl4RlFVRkZhRU1zVVVGQlVTeE5RVUZQTEV0QlFVc3NRMEZCUXl4RFFVRkZMRVZCUVVWcFF5eExRVUZMTEVsQlFVa3NSMEZETVVNc1JVRkJaSFZTTEVWQlFVdHdWaXhQUVVGaExFdEJRVThzU1VGRE1VSjFSaXhGUVVGalF5eEZRVUZOUXl4RFFVRmhMRU5CUlhwRExIZENRVTF0UXl4VFFVRkRPVU1zUjBGQk1FUm9SQ3hKUVVGNlF6aEdMRVZCUVRaQ0xFVkJRVUZ6VUN4VlFVRkJMMVVzVVVGQlFUQlZMRXRCUVVGQkxFbEJRVUZMTEZWQlFVRXNSMEZCUVVFc1ZVRkJRU3hIUVVGSExFdEJRMnBHTEVsQlFVMTJVQ3hGUVVGUE1VSXNSVUZCVlc1Q0xFTkJRVThzUlVGRE9VSXNUMEZCU3paRExFZEJRMlVzVlVGQmFFSXNUMEZCVDBFc1IwRkRUa0VzUlVGQlMzRkNMRk5CUVZkeVFpeERRVUZCUVN4RlFVRkxjVUlzVVVGQlVUWlBMRmRCUVZjc1IwRkJSeXhIUVVGTmJGRXNSVUZCUzFVc1ZVRkZNMFExUml4UFFVRlBReXhMUVVGTGFVWXNSVUZCUzFVc1VVRkJVU3hGUVVGRk1VWXNVVUZCVTBNc1NVRkRhRU1zU1VGRldXbFJMRVZCUms1MlN5eEZRVUZWV0N4RlFVRkxWU3hUUVVGVGVrWXNSMEZETVVJd1JpeEZRVUZSZDBJc1VVRkJWWGhDTEVWQlFWRjNRaXhQUVVGUEswa3NXVUZEZWtKQkxFVkJRV04yU3l4RlFVRlJkMElzVDBGQldDeFZRVU5tSzBrc1JVRkJWVU1zVTBGRFRrUXNSVUZCVlVNc1QwRkJUMmhITEU5QlFVMTRSU3hGUVVGUmQwVXNTMEZCVHl0R0xFVkJRVlZETEU5QlFVOW9SeXhOUVVOMlJDdEdMRVZCUVZWRExFOUJRVTlETEZOQlFWRjZTeXhGUVVGUk5FY3NWVUZCV1RKRUxFVkJRVlZETEU5QlFVOURMRkZCUXpsRVJpeEZRVUZWUXl4UFFVRlBSU3hSUVVGTk1Vc3NSVUZCVVhsSUxGZEJRV0U0UXl4RlFVRlZReXhQUVVGUFJTeE5RVVZxUlVnc1JVRkJWVWtzWlVGQlowSktMRVZCUVZWSkxHRkJRV0ZHTEZOQlEycEVla3NzUlVGQlVUWkhMR2RDUVVGclFqQkVMRVZCUVZWSkxHRkJRV0ZHTEZGQlNYSkVla3NzUlVGQlVYZENMRkZCUTFKNFFpeEZRVUZSZDBJc1QwRkJUM0ZLTEdkQ1FVTm1OMHNzUlVGQlVYZENMRTlCUVU5eFNpeGxRVUZsTTBZc1YwRkRPVUlzUTBGQlEyeEdMRVZCUVZFclJTeFZRVVZVTDBVc1JVRkJVU3RGTEZGQlFWVXZSU3hGUVVGUmQwSXNUMEZCVDNGS0xHVkJRV1V6Uml4WFFVVndSQ3hQUVVGUGJFWXNSVUZCVVhkQ0xFMUJRMjVDTEVOQlFVTXNSVUZGUkc1RExFVkJRVXR4UWl4UlFVRlZMRTFCUldZeFJ5eEZRVUZ0UW5GR0xFVkJRVTBzVlVGQlZTeEZRVU51UTNKR0xFVkJRVzFDY1VZc1JVRkJUU3hUUVVGVExFVkJSVE5DUkN4RlFVRmpReXhGUVVGTlF5eERRVUZoTEVkQmFrTjBRamxETEVOQmEwTjBRaXgzUWtGdFNtMURMRk5CUVVOQkxFZEJRVEJFYUVRc1NVRjVRbkJHZDFjc1JVRjZRakpETVZFc1JVRkJOa0lzUlVGQlFYTlFMRlZCUVVFdlZTeFJRVUZCTUZVc1MwRkJRVUVzU1VGQlFVc3NWVUZCUVN4SFFVRkJRU3hWUVVGQkxFZEJRVWNzUzBGRE0wVnhRaXhGUVVGVGRFSXNSVUZCYlVKdVV5eEZRVUZUT0VNc1EwRkJZU3hGUVVWNFJDeEpRVUZOUkN4RlFVRlBNVUlzUlVGQlZYTlRMRU5CUVUwc1JVRkROMElzVFVGQlN6VlJMRU5CUVVGQkxFZEJRMlVzVlVGQmFFSXNUMEZCVDBFc1JVRkVUemRETEVkQlIxcDVVeXhGUVVGUFowSXNSVUZCVDJwV0xFMUJRVTBzYVVKQlFXbENMRWRCUVVzc1IwRkhhRVJpTEU5QlFVOURMRXRCUVV0cFJpeEZRVUZMVlN4VlFVRlpMRVZCUVVVc1JVRkJSVEZHTEZGQlFWTkRMRWxCUTJoRE1FWXNSVUZCVlZnc1JVRkJTMVVzVTBGQlUzcEdMRWRCUXpGQ01FWXNSVUZCVVhkRkxFMUJRVTF3VEN4RlFVRmhORWNzUlVGQlV5d3JRa0ZCWjBOQkxFVkJRVkYzUlN4SlFVRkpMRVZCUTJoR2VFVXNSVUZCVVRSSExGZEJRVmQ0VGl4RlFVRmhORWNzUlVGQlV5eHBRMEZCYTBOQkxFVkJRVkUwUnl4VFFVRlRMRVZCUXpWR05VY3NSVUZCVVhsSUxGbEJRVmx5VHl4RlFVRmhORWNzUlVGQlV5d3JRa0ZCWjBOQkxFVkJRVkY1U0N4VlFVRlZMRVZCUXpWR2VrZ3NSVUZCVVRaSExHbENRVU5TZWs0c1JVRkJZVFJITEVWQlFWTXNkVU5CUVhkRFFTeEZRVUZSTmtjc1pVRkJaU3hGUVVkNlJpeFBRVUZQTjBjc1JVRkJVWGRGTEV0QlEyWXNUMEZCVDNoRkxFVkJRVkUwUnl4VlFVTm1MRTlCUVU4MVJ5eEZRVUZSZVVnc1YwRkRaaXhQUVVGUGVrZ3NSVUZCVVRaSExHVkJRMjVDTEVOQlFVTXNSVUZKUkN4UFFVWk5iVW9zT0ZaQlFVMHNRMEZCU3pGV0xFdEJRVTBzY1VKQlFYRkNMRVZCUVVzclJTeERRVUZKTEVkQlJYWkRjVUlzVVVGRlpERkhMRVZCUVcxQ1oxY3NSVUZCVVN4VlFVRlZMRVZCUTNKRGFGY3NSVUZCYlVKblZ5eEZRVUZSTEZOQlFWTXNSVUZIYUVObUxFVkJRVXQ2VWl4SlFVRkxReXhIUVVGRExFdEJRVUZ6UWl4UFFVRlZkRUlzUlVGQlJXaERMRkZCUVZFc1dVRkJZU3hGUVVGRkxFTkJRVU1zUTBGQlJTeEZRVUZGYVVNc1MwRkJTeXhKUVVGSkxFZEJRemRETEVWQlFXUjFVaXhGUVVGTGNGWXNUMEZCWVN4TFFVRlBMRWxCUXpGQ2RVWXNSVUZCWXpSUkxFVkJRVkV4VVN4RFFVRmhMRVZCUlRORExITkRSRzVUYTBRNVF5eEpRVU01UXl4SlFVRk5ka01zUlVGQlZUQkVMRVZCUVZWdVFpeERRVUZQTEVWQlEycERMRWxCUVUwd1ZDeEZRVUZOTEVsQlFVazNReXhGUVVGSkxFTkJRVVU0UXl4VlFVRlhMRU5CUVVFc1JVRkJUVU1zVDBGQlVTeERRVUZCTEVOQlFVMHNRMEZCUXl4RlFVTjBSRGxETEVWQlFWVTBReXhEUVVGSExFVkJRMkl2Vml4UFFVRlBReXhMUVVGTGJWUXNRMEZCVHl4RlFVRkZiRlFzVVVGQlUzZE1MRWRCUVZkeFN5eEZRVUZKUnl4VlFVRlZlRXNzUlVGQlVUQklMRVZCUVZFeFNDeEZRVUZQTEVOQlFVTXNSVUZETDBVc1NVRkJUWGxMTEVWQlFWZEtMRVZCUVVsTExGRkJRVkZzVVN4RFFVRTJRaXhGUVVVeFJDeEhRVVJqYVZFc1JVRkJVM0pYTEVOQlFVOHNSVUZEYmtJc1RVRkJUeXhIUVVWc1FpeEpRVmROZFZjc1JVRkJZVE5WTEVWQlFVdGhMR05CUVdOR0xFVkJRVk1zUTBGQlJVY3NZVUZCWXl4RFFVRkJMRU5CUVVzc1EwRkJReXhGUVVOeVJTeFBRVUZQTWxRc1JVRkJVM3BVTEU5QlFVOVhMRWxCUVV0cFZDeEpRVU40UW1wWUxFbEJRVTFyV0N4RlFVRnBRa1FzUlVGQlNpeGhRVU5ETEhsQ1FVRm9Ra0VzUlVGQlNVVXNWVUZCYjBORUxFZEJRVmt6VWl4SlFVRkJRU3hQUVVGUk1GSXNSVUZCU1Vjc1QwRkJUME1zYTBKQlFXdENMRWRCUXpkR0xFbEJRVTFETEVWQlFXRktMRVZCUVdFdlZ5eE5RVUZOTEVkQlFVY3NSVUZCUlc5WUxFMUJRVTBzUTBGQlF5eEZRVU5zUkhaWUxFbEJRVWwzV0N4RlFVRlBVaXhGUVVGWFV5eE5RVUZOU0N4RlFVRlpMRU5CUVVFc1EwRkJTU3hGUVVVMVF5eEpRVUZOTTFRc1IwRkVZVFpVTEVWQlFVNHNUMEZCVkVFc1JVRkJjMEpTTEVWQlFWZFRMRTFCUVUxSUxFVkJRVmRETEUxQlFVMHNSVUZCUnl4RFFVRkRMRU5CUVVNc1JVRkJSeXhEUVVGQkxFTkJRVWtzUlVGRE5VUkRMRWRCUVU5QkxFVkJRVXRGTEUxQlFVMHNSMEZCU3l4RlFVRkpMRVZCUTJwRGFsVXNSMEZCVVZRc1JVRkJVVEpWTEZWQlFWVXNSVUZCUjJoVkxFTkJRVWNzUlVGQlJXNURMRTFCUVUwc1MwRkJTeXhIUVVGTExFbEJRVWx1UWl4UFFVRlRMRVZCUTNKRlRDeEpRVUZKTUVNc1JVRkZRVUVzUlVGRVowSXNlVUpCUVdoQ2RWVXNSVUZCU1VVc1VVRkRSeXhSUVVGQk5WSXNUMEZCVnpsQ0xFVkJRVWtzUjBGQlFTeEZRVUZCT0VJc1QwRkJTVEpTTEVWQlFWa3pVaXhOUVVGQlFTeEZRVUZCUVN4UFFVRlBNRklzUlVGQlNVY3NUMEZCVDBNc2JVSkJRV3RDTEc5Q1FVRkJMRVZCUVVFNVVpeFBRVUZ4UWpKU0xFVkJRV1VzUjBGQlFTeEZRVU42Uml4WFFVRm9Ra1FzUlVGQlNVVXNVVUZEUmpWU0xGRkJRVUZCTEU5QlFWYzVRaXhGUVVGSkxFZEJRVUVzUlVGQlFUaENMRTlCUVVreVVpeEZRVUZaTEcxRFFVRkJMRVZCUVVFelVpeFBRVUZ2UXpCU0xFVkJRVWxITEU5QlFVOHZTeXhaUVVOb1JTeFZRVUZvUWpSTExFVkJRVWxGTEZGQlEwWXNVVUZCUVRWU0xFOUJRVmM1UWl4RlFVRkpPRUlzUjBGQlFVRXNSVUZCUVVFc1QwRkJTVEpTTEVWQlFYVkdMREpGUVVGQkxFVkJRM3BITEZGQlFVRXpVaXhQUVVGWE9VSXNSVUZCU1N4SFFVRkJMRVZCUVVFNFFpeFBRVUZKTWxJc1JVRkJXVE5TTEV0QlFVRkJMRVZCUVVGQkxFOUJRVTB3VWl4RlFVRkpkbFVzVVVGQlR5eEpRVUZCTEVWQlFVRTJReXhQUVVGTE1GSXNSVUZCU1VVc1VVRkJUelZTTEVsQlFVRkJMRVZCUVVGQkxFOUJRVXN5VUN4TFFVRkxiRkFzVlVGQlZXbFNMRVZCUVVsSExFMUJRVTBzUlVGQlNTeEhRVUZCTEVWQk0wSnlSblJYTEVWQk5FSlpkMWNzUlVGQlZ5eEhRVE5DTVVOTkxFVkJRVmNzWjBSQk1rSnFRaXhKUVROQ1RVRXNSVUV5UWtGRExFZEJNVUpQTEdGQlFWUXZWeXhGUVVGeFFubEZMRWRCUVVGQkxFOUJRVlZ4VXl4RlFVRlJMR05CUVVFc1JVRkRPVUlzWVVGQlZEbFhMRVZCUVhGQ2VVVXNSMEZCUVVFc1QwRkJWWEZUTEVWQlFWRXNZMEZCUVN4RlFVTTVRaXhaUVVGVU9WY3NSVUZCYjBKNVJTeEhRVUZCUVN4UFFVRlZjVk1zUlVGQlVTeGhRVUZCTEVWQlF6ZENMRmxCUVZRNVZ5eEZRVUZ2UW5sRkxFZEJRVUZCTEU5QlFWVnhVeXhGUVVGUkxHRkJRVUVzUlVGRE4wSXNXVUZCVkRsWExFVkJRVzlDZVVVc1IwRkJRVUVzVDBGQlZYRlRMRVZCUVZFc1lVRkJRU3hGUVVWdVEwRXNTVUZ2UW1kRVRpeEZRVUZYTEVkQlFVVXZVaXhKUVVGQlFTeFBRVUZQSzFJc1JVRkJWeXhGUVVGRkxFVkJRVXNzU1VGRE4wWXNUVUZCVHl4RFFVRkZOMVFzUzBGQlFVRXNSVUZCVFdZc1VVRkJRVUVzUlVGQlUyMVdMRk5CUVVGQkxFTkJRVlVzUTBGRGRFTXNRMEZCUXl4RFFVTk1JbjA9XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIE5PREVfRU5WID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlY7XG5cbnZhciBpbnZhcmlhbnQgPSBmdW5jdGlvbihjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICBpZiAoTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhcmlhbnQgcmVxdWlyZXMgYW4gZXJyb3IgbWVzc2FnZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgICdNaW5pZmllZCBleGNlcHRpb24gb2NjdXJyZWQ7IHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCAnICtcbiAgICAgICAgJ2ZvciB0aGUgZnVsbCBlcnJvciBtZXNzYWdlIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuJ1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107IH0pXG4gICAgICApO1xuICAgICAgZXJyb3IubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB9XG5cbiAgICBlcnJvci5mcmFtZXNUb1BvcCA9IDE7IC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgaW52YXJpYW50J3Mgb3duIGZyYW1lXG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gaW52YXJpYW50O1xuIiwiLy8gQGZsb3dcblxuLy8gRGVmaW5lIHRoZSBcInR5cGVzXCIgb2YgZGF0YSBhIGRvY2tlciBjbGkgZmxhZyBjYW4gcmVwcmVzZW50IGluIHlhbWwuXG5leHBvcnQgdHlwZSBBcmdUeXBlID1cbiAgICAvLyBVc2VkIGZvciBsaXN0cyBvZiB0aGluZ3NcbiAgICAvLyBlLmcuIC0tZGV2aWNlIChodHRwczovL2RvY3MuZG9ja2VyLmNvbS9jb21wb3NlL2NvbXBvc2UtZmlsZS8jZGV2aWNlcylcbiAgICB8ICdBcnJheSdcblxuICAgIC8vIFVzZWQgdG8gc3RvcmUgYSBcImxpbWl0c1wiIHZhbHVlIG9mIHRoZSBpbnB1dCBmb3JtYXQ6IDx0eXBlPj08c29mdCBsaW1pdD5bOjxoYXJkIGxpbWl0Pl1cbiAgICAvLyBlLmcuIC0tdWxpbWl0XG4gICAgLy8gQHNlZSBodHRwczovL2RvY3MuZG9ja2VyLmNvbS9jb21wb3NlL2NvbXBvc2UtZmlsZS8jdWxpbWl0c1xuICAgIC8vIEBzZWUgaHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZW5naW5lL3JlZmVyZW5jZS9jb21tYW5kbGluZS9ydW4vI3NldC11bGltaXRzLWluLWNvbnRhaW5lci0tLXVsaW1pdFxuICAgIHwgJ1VsaW1pdHMnXG5cbiAgICAvLyBVc2VkIHRvIHN0b3JlIGEgYm9vbGVhbiB2YWx1ZSBmb3IgYW4gb3B0aW9uXG4gICAgLy8gZS5nLiAtLXByaXZpbGVnZWQgKGh0dHBzOi8vZG9jcy5kb2NrZXIuY29tL2NvbXBvc2UvY29tcG9zZS1maWxlLyNkb21haW5uYW1lLWhvc3RuYW1lLWlwYy1tYWNfYWRkcmVzcy1wcml2aWxlZ2VkLXJlYWRfb25seS1zaG1fc2l6ZS1zdGRpbl9vcGVuLXR0eS11c2VyLXdvcmtpbmdfZGlyKVxuICAgIHwgJ1N3aXRjaCdcblxuICAgIC8vIFVzZWQgdG8gc3RvcmUgYW4gYXJiaXRyYXJ5IHRleHQgdmFsdWUgZm9yIGFuIG9wdGlvblxuICAgIHwgJ1ZhbHVlJ1xuICAgIHwgJ0ludFZhbHVlJ1xuICAgIHwgJ0Zsb2F0VmFsdWUnXG4gICAgfCAnRGV2aWNlQmxvY2tJT0NvbmZpZ1JhdGUnXG4gICAgfCAnRGV2aWNlQmxvY2tJT0NvbmZpZ1dlaWdodCdcbiAgICB8ICdOZXR3b3JrcydcbiAgICB8ICdNYXBBcnJheSdcbiAgICB8ICdNYXAnXG4gICAgfCAnRW52cydcbiAgICB8ICdHcHVzJztcblxuLy8gVHlwZSB0byByZXByZXNlbnQgdGhlIHN0cnVjdHVyZSBvZiB0aGUgZG9ja2VyIGNvbXBvc2UgbWFwcGluZ1xuZXhwb3J0IHR5cGUgTWFwcGluZyA9IHtcbiAgICB0eXBlOiBBcmdUeXBlLFxuICAgIHBhdGg6IHN0cmluZyxcbn07XG5cbi8vIFR5cGUgdG8gcmVwcmVzZW50IGEgY29tcG9zZSBmaWxlIGVudHJ5XG5leHBvcnQgdHlwZSBBcnJheUNvbXBvc2VFbnRyeSA9IHtcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgdmFsdWU6IFtzdHJpbmddLFxufTtcblxuZXhwb3J0IHR5cGUgS1ZDb21wb3NlRW50cnkgPSB7XG4gICAgcGF0aDogc3RyaW5nLFxuICAgIHZhbHVlOiB7XG4gICAgICAgIFtzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfCBhbnksXG4gICAgfSxcbn07XG5cbmV4cG9ydCB0eXBlIFN3aXRjaENvbXBvc2VFbnRyeSA9IHtcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgdmFsdWU6IGJvb2xlYW4sXG59O1xuXG5leHBvcnQgdHlwZSBWYWx1ZUNvbXBvc2VFbnRyeSA9IHtcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgdmFsdWU6IHN0cmluZyB8IG51bWJlciB8IGFueSxcbn07XG5cbmV4cG9ydCB0eXBlIElnbm9yZUNvbXBvc2VFbnRyeSA9IHtcbiAgICBwYXRoPzogbnVsbCxcbiAgICB2YWx1ZT86IG51bGwsXG59O1xuXG5leHBvcnQgdHlwZSBDb21wb3NlRW50cnkgPVxuICAgIHwgQXJyYXlDb21wb3NlRW50cnlcbiAgICB8IEtWQ29tcG9zZUVudHJ5XG4gICAgfCBTd2l0Y2hDb21wb3NlRW50cnlcbiAgICB8IFZhbHVlQ29tcG9zZUVudHJ5XG4gICAgfCBJZ25vcmVDb21wb3NlRW50cnk7XG5cbmV4cG9ydCBjb25zdCBnZXRNYXBwaW5nID0gKHR5cGU6IEFyZ1R5cGUsIHBhdGg6IHN0cmluZyk6IE1hcHBpbmcgPT4gKHtcbiAgICB0eXBlLFxuICAgIHBhdGgsXG59KTtcblxuLy8gZG9ja2VyIGNsaSAtPiBkb2NrZXItY29tcG9zZSBvcHRpb25zXG5leHBvcnQgY29uc3QgTUFQUElOR1M6IHsgW3N0cmluZ106IE1hcHBpbmcgfSA9IHtcbiAgICAnYWRkLWhvc3QnOiBnZXRNYXBwaW5nKCdBcnJheScsICdleHRyYV9ob3N0cycpLFxuICAgICdibGtpby13ZWlnaHQnOiBnZXRNYXBwaW5nKCdJbnRWYWx1ZScsICdibGtpb19jb25maWcvd2VpZ2h0JyksXG4gICAgJ2Jsa2lvLXdlaWdodC1kZXZpY2UnOiBnZXRNYXBwaW5nKCdEZXZpY2VCbG9ja0lPQ29uZmlnV2VpZ2h0JywgJ2Jsa2lvX2NvbmZpZy93ZWlnaHRfZGV2aWNlJyksXG4gICAgJ2NhcC1hZGQnOiBnZXRNYXBwaW5nKCdBcnJheScsICdjYXBfYWRkJyksXG4gICAgJ2NhcC1kcm9wJzogZ2V0TWFwcGluZygnQXJyYXknLCAnY2FwX2Ryb3AnKSxcbiAgICAnY2dyb3VwLXBhcmVudCc6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ2Nncm91cF9wYXJlbnQnKSxcbiAgICBjZ3JvdXBuczogZ2V0TWFwcGluZygnVmFsdWUnLCAnY2dyb3VwJyksXG4gICAgJ2NwdS1wZXJpb2QnOiBnZXRNYXBwaW5nKCdWYWx1ZScsICdjcHVfcGVyaW9kJyksXG4gICAgJ2NwdS1xdW90YSc6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ2NwdV9xdW90YScpLFxuICAgICdjcHUtcnQtcGVyaW9kJzogZ2V0TWFwcGluZygnVmFsdWUnLCAnY3B1X3J0X3BlcmlvZCcpLFxuICAgICdjcHUtcnQtcnVudGltZSc6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ2NwdV9ydF9ydW50aW1lJyksXG4gICAgJ2NwdS1zaGFyZXMnOiBnZXRNYXBwaW5nKCdJbnRWYWx1ZScsICdjcHVfc2hhcmVzJyksXG4gICAgY3B1czogZ2V0TWFwcGluZygnRmxvYXRWYWx1ZScsICdkZXBsb3kvcmVzb3VyY2VzL2xpbWl0cy9jcHVzJyksXG4gICAgZGV0YWNoZWQ6IGdldE1hcHBpbmcoJ1N3aXRjaCcsICcnKSxcbiAgICAnZGV2aWNlLWNncm91cC1ydWxlJzogZ2V0TWFwcGluZygnQXJyYXknLCAnZGV2aWNlX2Nncm91cF9ydWxlcycpLFxuICAgICdkZXZpY2UtcmVhZC1icHMnOiBnZXRNYXBwaW5nKCdEZXZpY2VCbG9ja0lPQ29uZmlnUmF0ZScsICdibGtpb19jb25maWcvZGV2aWNlX3JlYWRfYnBzJyksXG4gICAgJ2RldmljZS1yZWFkLWlvcHMnOiBnZXRNYXBwaW5nKCdEZXZpY2VCbG9ja0lPQ29uZmlnUmF0ZScsICdibGtpb19jb25maWcvZGV2aWNlX3JlYWRfaW9wcycpLFxuICAgICdkZXZpY2Utd3JpdGUtYnBzJzogZ2V0TWFwcGluZygnRGV2aWNlQmxvY2tJT0NvbmZpZ1JhdGUnLCAnYmxraW9fY29uZmlnL2RldmljZV93cml0ZV9icHMnKSxcbiAgICAnZGV2aWNlLXdyaXRlLWlvcHMnOiBnZXRNYXBwaW5nKCdEZXZpY2VCbG9ja0lPQ29uZmlnUmF0ZScsICdibGtpb19jb25maWcvZGV2aWNlX3dyaXRlX2lvcHMnKSxcbiAgICBkZXZpY2U6IGdldE1hcHBpbmcoJ0FycmF5JywgJ2RldmljZXMnKSxcbiAgICAnZG5zLW9wdCc6IGdldE1hcHBpbmcoJ0FycmF5JywgJ2Ruc19vcHQnKSxcbiAgICAnZG5zLXNlYXJjaCc6IGdldE1hcHBpbmcoJ0FycmF5JywgJ2Ruc19zZWFyY2gnKSxcbiAgICBkbnM6IGdldE1hcHBpbmcoJ0FycmF5JywgJ2RucycpLFxuICAgIGRvbWFpbm5hbWU6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ2RvbWFpbm5hbWUnKSxcbiAgICBlbnRyeXBvaW50OiBnZXRNYXBwaW5nKCdBcnJheScsICdlbnRyeXBvaW50JyksXG4gICAgJ2Vudi1maWxlJzogZ2V0TWFwcGluZygnQXJyYXknLCAnZW52X2ZpbGUnKSxcbiAgICBlbnY6IGdldE1hcHBpbmcoJ0VudnMnLCAnZW52aXJvbm1lbnQnKSxcbiAgICBleHBvc2U6IGdldE1hcHBpbmcoJ0FycmF5JywgJ2V4cG9zZScpLFxuICAgIGdwdXM6IGdldE1hcHBpbmcoJ0dwdXMnLCAnZGVwbG95JyksXG4gICAgJ2dyb3VwLWFkZCc6IGdldE1hcHBpbmcoJ0FycmF5JywgJ2dyb3VwX2FkZCcpLFxuICAgICdoZWFsdGgtY21kJzogZ2V0TWFwcGluZygnVmFsdWUnLCAnaGVhbHRoY2hlY2svdGVzdCcpLFxuICAgICdoZWFsdGgtaW50ZXJ2YWwnOiBnZXRNYXBwaW5nKCdWYWx1ZScsICdoZWFsdGhjaGVjay9pbnRlcnZhbCcpLFxuICAgICdoZWFsdGgtcmV0cmllcyc6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ2hlYWx0aGNoZWNrL3JldHJpZXMnKSxcbiAgICAnaGVhbHRoLXN0YXJ0LXBlcmlvZCc6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ2hlYWx0aGNoZWNrL3N0YXJ0X3BlcmlvZCcpLFxuICAgICdoZWFsdGgtdGltZW91dCc6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ2hlYWx0aGNoZWNrL3RpbWVvdXQnKSxcbiAgICBob3N0bmFtZTogZ2V0TWFwcGluZygnVmFsdWUnLCAnaG9zdG5hbWUnKSxcbiAgICBpbml0OiBnZXRNYXBwaW5nKCdTd2l0Y2gnLCAnaW5pdCcpLFxuICAgIGludGVyYWN0aXZlOiBnZXRNYXBwaW5nKCdTd2l0Y2gnLCAnc3RkaW5fb3BlbicpLFxuICAgIGlwNjogZ2V0TWFwcGluZygnVmFsdWUnLCAnbmV0d29ya3MvwqRuZXR3b3JrwqQvaXB2Nl9hZGRyZXNzJyksXG4gICAgaXA6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ25ldHdvcmtzL8KkbmV0d29ya8KkL2lwdjRfYWRkcmVzcycpLFxuICAgIGlwYzogZ2V0TWFwcGluZygnVmFsdWUnLCAnaXBjJyksXG4gICAgaXNvbGF0aW9uOiBnZXRNYXBwaW5nKCdWYWx1ZScsICdpc29sYXRpb24nKSxcbiAgICBsYWJlbDogZ2V0TWFwcGluZygnQXJyYXknLCAnbGFiZWxzJyksXG4gICAgJ2xpbmstbG9jYWwtaXAnOiBnZXRNYXBwaW5nKCdBcnJheScsICduZXR3b3Jrcy/CpG5ldHdvcmvCpC9saW5rX2xvY2FsX2lwcycpLFxuICAgIGxpbms6IGdldE1hcHBpbmcoJ0FycmF5JywgJ2xpbmtzJyksXG4gICAgJ2xvZy1kcml2ZXInOiBnZXRNYXBwaW5nKCdWYWx1ZScsICdsb2dnaW5nL2RyaXZlcicpLFxuICAgICdsb2ctb3B0JzogZ2V0TWFwcGluZygnTWFwJywgJ2xvZ2dpbmcvb3B0aW9ucycpLFxuICAgICdtYWMtYWRkcmVzcyc6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ21hY19hZGRyZXNzJyksXG4gICAgJ21lbW9yeS1yZXNlcnZhdGlvbic6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ2RlcGxveS9yZXNvdXJjZXMvcmVzZXJ2YXRpb25zL21lbW9yeScpLFxuICAgICdtZW1vcnktc3dhcCc6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ21lbXN3YXBfbGltaXQnKSxcbiAgICAnbWVtb3J5LXN3YXBwaW5lc3MnOiBnZXRNYXBwaW5nKCdWYWx1ZScsICdtZW1fc3dhcHBpbmVzcycpLFxuICAgIG1lbW9yeTogZ2V0TWFwcGluZygnVmFsdWUnLCAnZGVwbG95L3Jlc291cmNlcy9saW1pdHMvbWVtb3J5JyksXG4gICAgbW91bnQ6IGdldE1hcHBpbmcoJ01hcEFycmF5JywgJ3ZvbHVtZXMnKSxcbiAgICBuYW1lOiBnZXRNYXBwaW5nKCdWYWx1ZScsICdjb250YWluZXJfbmFtZScpLFxuICAgIG5ldDogZ2V0TWFwcGluZygnTmV0d29ya3MnLCAnbmV0d29ya19tb2RlJyksIC8vIGFsaWFzIGZvciBuZXR3b3JrXG4gICAgJ25ldHdvcmstYWxpYXMnOiBnZXRNYXBwaW5nKCdBcnJheScsICduZXR3b3Jrcy/CpG5ldHdvcmvCpC9hbGlhc2VzJyksXG4gICAgbmV0d29yazogZ2V0TWFwcGluZygnTmV0d29ya3MnLCAnbmV0d29ya19tb2RlJyksXG4gICAgJ25vLWhlYWx0aGNoZWNrJzogZ2V0TWFwcGluZygnU3dpdGNoJywgJ2hlYWx0aGNoZWNrL2Rpc2FibGUnKSxcbiAgICAnb29tLWtpbGwtZGlzYWJsZSc6IGdldE1hcHBpbmcoJ1N3aXRjaCcsICdvb21fa2lsbF9kaXNhYmxlJyksXG4gICAgJ29vbS1zY29yZS1hZGonOiBnZXRNYXBwaW5nKCdWYWx1ZScsICdvb21fc2NvcmVfYWRqJyksXG4gICAgcGlkOiBnZXRNYXBwaW5nKCdWYWx1ZScsICdwaWQnKSxcbiAgICAncGlkcy1saW1pdCc6IGdldE1hcHBpbmcoJ0ludFZhbHVlJywgJ2RlcGxveS9yZXNvdXJjZXMvbGltaXRzL3BpZHMnKSxcbiAgICBwbGF0Zm9ybTogZ2V0TWFwcGluZygnVmFsdWUnLCAncGxhdGZvcm0nKSxcbiAgICBwcml2aWxlZ2VkOiBnZXRNYXBwaW5nKCdTd2l0Y2gnLCAncHJpdmlsZWdlZCcpLFxuICAgIHB1Ymxpc2g6IGdldE1hcHBpbmcoJ0FycmF5JywgJ3BvcnRzJyksXG4gICAgcHVsbDogZ2V0TWFwcGluZygnVmFsdWUnLCAncHVsbF9wb2xpY3knKSxcbiAgICAncmVhZC1vbmx5JzogZ2V0TWFwcGluZygnU3dpdGNoJywgJ3JlYWRfb25seScpLFxuICAgIHJlc3RhcnQ6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ3Jlc3RhcnQnKSxcbiAgICBybTogZ2V0TWFwcGluZygnU3dpdGNoJywgJycpLFxuICAgIHJ1bnRpbWU6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ3J1bnRpbWUnKSxcbiAgICAnc2VjdXJpdHktb3B0JzogZ2V0TWFwcGluZygnQXJyYXknLCAnc2VjdXJpdHlfb3B0JyksXG4gICAgJ3NobS1zaXplJzogZ2V0TWFwcGluZygnVmFsdWUnLCAnc2htX3NpemUnKSxcbiAgICAnc3RvcC1zaWduYWwnOiBnZXRNYXBwaW5nKCdWYWx1ZScsICdzdG9wX3NpZ25hbCcpLFxuICAgICdzdG9wLXRpbWVvdXQnOiBnZXRNYXBwaW5nKCdWYWx1ZScsICdzdG9wX2dyYWNlX3BlcmlvZCcpLFxuICAgICdzdG9yYWdlLW9wdCc6IGdldE1hcHBpbmcoJ01hcCcsICdzdG9yYWdlX29wdCcpLFxuICAgIHN5c2N0bDogZ2V0TWFwcGluZygnQXJyYXknLCAnc3lzY3RscycpLFxuICAgIHRtcGZzOiBnZXRNYXBwaW5nKCdWYWx1ZScsICd0bXBmcycpLFxuICAgIHR0eTogZ2V0TWFwcGluZygnU3dpdGNoJywgJ3R0eScpLFxuICAgIHVsaW1pdDogZ2V0TWFwcGluZygnVWxpbWl0cycsICd1bGltaXRzJyksXG4gICAgdXNlcjogZ2V0TWFwcGluZygnVmFsdWUnLCAndXNlcicpLFxuICAgIHVzZXJuczogZ2V0TWFwcGluZygnVmFsdWUnLCAndXNlcm5zX21vZGUnKSxcbiAgICB1dHM6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ3V0cycpLFxuICAgIHZvbHVtZTogZ2V0TWFwcGluZygnQXJyYXknLCAndm9sdW1lcycpLFxuICAgICd2b2x1bWVzLWZyb20nOiBnZXRNYXBwaW5nKCdBcnJheScsICd2b2x1bWVfZnJvbScpLFxuICAgIHdvcmtkaXI6IGdldE1hcHBpbmcoJ1ZhbHVlJywgJ3dvcmtpbmdfZGlyJyksXG59O1xuXG4vLyBBZGQgZmxhZyBtYXBwaW5nc1xuTUFQUElOR1MudiA9IE1BUFBJTkdTLnZvbHVtZTtcbk1BUFBJTkdTLnAgPSBNQVBQSU5HUy5wdWJsaXNoO1xuTUFQUElOR1MuZSA9IE1BUFBJTkdTLmVudjtcbk1BUFBJTkdTLmwgPSBNQVBQSU5HUy5sYWJlbDtcbk1BUFBJTkdTLmggPSBNQVBQSU5HUy5ob3N0bmFtZTtcbk1BUFBJTkdTLnUgPSBNQVBQSU5HUy51c2VyO1xuTUFQUElOR1MudyA9IE1BUFBJTkdTLndvcmtkaXI7XG5NQVBQSU5HUy5jID0gTUFQUElOR1NbJ2NwdS1zaGFyZXMnXTtcbk1BUFBJTkdTLmwgPSBNQVBQSU5HUy5sYWJlbDtcbk1BUFBJTkdTLnQgPSBNQVBQSU5HUy50dHk7XG5NQVBQSU5HUy5pID0gTUFQUElOR1MuaW50ZXJhY3RpdmU7XG5NQVBQSU5HUy5tID0gTUFQUElOR1MubWVtb3J5O1xuTUFQUElOR1MuZCA9IE1BUFBJTkdTLmRldGFjaGVkO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuXG5pbXBvcnQgeyBNQVBQSU5HUyB9IGZyb20gJy4vbWFwcGluZ3MnO1xuaW1wb3J0IHR5cGUge1xuICAgIENvbXBvc2VFbnRyeSxcbiAgICBLVkNvbXBvc2VFbnRyeSxcbiAgICBBcnJheUNvbXBvc2VFbnRyeSxcbiAgICBTd2l0Y2hDb21wb3NlRW50cnksXG4gICAgVmFsdWVDb21wb3NlRW50cnksXG4gICAgSWdub3JlQ29tcG9zZUVudHJ5LFxuICAgIE1hcHBpbmcsXG59IGZyb20gJy4vbWFwcGluZ3MnO1xuXG5pbXBvcnQgdHlwZSB7IFJhd1ZhbHVlIH0gZnJvbSAnLi9pbmRleCc7XG5cbmV4cG9ydCBjb25zdCBmcm9tRW50cmllcyA9IChpdGVyYWJsZTogSXRlcmFibGU8YW55Pik6IGFueSA9PlxuICAgIFsuLi5pdGVyYWJsZV0ucmVkdWNlKChvYmosIFtrZXksIHZhbF0pID0+ICh7IC4uLm9iaiwgW2tleV06IHZhbCB9KSwge30pO1xuXG5jb25zdCBwYXJzZUxpc3RBc1ZhbHVlQ29tcG9zZUVudHJ5T2JqZWN0ID0gKGFyZ1ZhbHVlOiBzdHJpbmcsIGxpc3RTZXBhcmF0b3I6IHN0cmluZywgZW50cnlTZXBhcmF0b3I6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IGFyZ3MgPSBhcmdWYWx1ZS5zcGxpdChsaXN0U2VwYXJhdG9yKTtcblxuICAgIHJldHVybiBmcm9tRW50cmllcyhcbiAgICAgICAgYXJncy5tYXAoKF9hcmcpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IFtrLCB2XSA9IF9hcmcuc3BsaXQoZW50cnlTZXBhcmF0b3IsIDIpO1xuICAgICAgICAgICAgcmV0dXJuIFtrLCAvXi0/XFxkKyQvLnRlc3QoU3RyaW5nKHYpKSA/IHBhcnNlSW50KHYsIDEwKSA6IHZdO1xuICAgICAgICB9KSxcbiAgICApO1xufTtcblxuZXhwb3J0IGNvbnN0IHN0cmlwUXVvdGVzID0gKHZhbDogc3RyaW5nKTogc3RyaW5nID0+XG4gICAgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiYgKHZhbFswXSA9PT0gXCInXCIgfHwgdmFsWzBdID09PSAnXCInKSAmJiB2YWxbdmFsLmxlbmd0aCAtIDFdID09PSB2YWxbMF1cbiAgICAgICAgPyB2YWwuc3Vic3RyaW5nKDEsIHZhbC5sZW5ndGggLSAxKVxuICAgICAgICA6IHZhbDtcblxuLyoqXG4gKiBUdXJuIGEgbWFwcGluZyBhbmQgdGhlIHZhbHVlIG9mIHRoZSBtYXBwaW5nIGludG8gYSBmb3JtYXR0ZWQganNvbiBvYmplY3RcbiAqL1xuZXhwb3J0IGNvbnN0IGdldENvbXBvc2VFbnRyeSA9IChtYXBwaW5nOiBNYXBwaW5nLCB2YWx1ZTogUmF3VmFsdWUpOiBDb21wb3NlRW50cnkgfCBBcnJheTxDb21wb3NlRW50cnk+ID0+IHtcbiAgICBpZiAobWFwcGluZy50eXBlID09PSAnQXJyYXknKSB7XG4gICAgICAgIHJldHVybiAoe1xuICAgICAgICAgICAgcGF0aDogbWFwcGluZy5wYXRoLFxuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZTogVE9ETzogTWFwIHRvIGFycmF5IG9mIHN0cmluZ3NcbiAgICAgICAgICAgIHZhbHVlOiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW1N0cmluZyh2YWx1ZSldLFxuICAgICAgICB9OiBBcnJheUNvbXBvc2VFbnRyeSk7XG4gICAgfVxuXG4gICAgaWYgKG1hcHBpbmcudHlwZSA9PT0gJ05ldHdvcmtzJykge1xuICAgICAgICBjb25zdCBzdHJpbmdWYWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgICAgIGlmICghc3RyaW5nVmFsdWUubWF0Y2goL14oaG9zdHxicmlkZ2V8bm9uZSkkfF5jb250YWluZXI6LisvKSkge1xuICAgICAgICAgICAgcmV0dXJuICh7XG4gICAgICAgICAgICAgICAgcGF0aDogJ25ldHdvcmtzJyxcbiAgICAgICAgICAgICAgICB2YWx1ZTogeyBbc3RyaW5nVmFsdWVdOiB7fSB9LFxuICAgICAgICAgICAgfTogVmFsdWVDb21wb3NlRW50cnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICh7XG4gICAgICAgICAgICBwYXRoOiAnbmV0d29ya19tb2RlJyxcbiAgICAgICAgICAgIHZhbHVlOiBzdHJpbmdWYWx1ZSxcbiAgICAgICAgfTogVmFsdWVDb21wb3NlRW50cnkpO1xuICAgIH1cblxuICAgIGlmIChtYXBwaW5nLnR5cGUgPT09ICdTd2l0Y2gnKSB7XG4gICAgICAgIHJldHVybiAoe1xuICAgICAgICAgICAgcGF0aDogbWFwcGluZy5wYXRoLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlID09PSAndHJ1ZScgfHwgdmFsdWUgPT09IHRydWUsXG4gICAgICAgIH06IFN3aXRjaENvbXBvc2VFbnRyeSk7XG4gICAgfVxuXG4gICAgaWYgKG1hcHBpbmcudHlwZSA9PT0gJ0dwdXMnKSB7XG4gICAgICAgIHJldHVybiAoe1xuICAgICAgICAgICAgcGF0aDogJ2RlcGxveScsXG4gICAgICAgICAgICB2YWx1ZToge1xuICAgICAgICAgICAgICAgIHJlc291cmNlczoge1xuICAgICAgICAgICAgICAgICAgICByZXNlcnZhdGlvbnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldmljZXM6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyaXZlcjogJ252aWRpYScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiB2YWx1ZSA9PT0gJ2FsbCcgPyAnYWxsJyA6IHBhcnNlSW50KHZhbHVlLCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcGFiaWxpdGllczogWydncHUnXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTogS1ZDb21wb3NlRW50cnkpO1xuICAgIH1cblxuICAgIGlmIChtYXBwaW5nLnR5cGUgPT09ICdFbnZzJykge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcblxuICAgICAgICByZXR1cm4gdmFsdWVzLm1hcCgoX3ZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbaywgLi4udl0gPSBTdHJpbmcoX3ZhbHVlKS5zcGxpdCgnPScpO1xuICAgICAgICAgICAgcmV0dXJuICh7XG4gICAgICAgICAgICAgICAgcGF0aDogbWFwcGluZy5wYXRoLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBbdi5sZW5ndGggPyBgJHtrfT0ke3N0cmlwUXVvdGVzKHYuam9pbignPScpKX1gIDoga10sXG4gICAgICAgICAgICB9OiBWYWx1ZUNvbXBvc2VFbnRyeSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChtYXBwaW5nLnR5cGUgPT09ICdNYXBBcnJheScpIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAoXG4gICAgICAgICAgICAoX3ZhbHVlKSA9PlxuICAgICAgICAgICAgICAgICh7XG4gICAgICAgICAgICAgICAgICAgIHBhdGg6IG1hcHBpbmcucGF0aCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IFtwYXJzZUxpc3RBc1ZhbHVlQ29tcG9zZUVudHJ5T2JqZWN0KFN0cmluZyhfdmFsdWUpLCAnLCcsICc9JyldLFxuICAgICAgICAgICAgICAgIH06IFZhbHVlQ29tcG9zZUVudHJ5KSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAobWFwcGluZy50eXBlID09PSAnTWFwJykge1xuICAgICAgICBjb25zdCBhcmdWYWx1ZSA9IEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCcpIDogdmFsdWU7XG5cbiAgICAgICAgcmV0dXJuICh7XG4gICAgICAgICAgICBwYXRoOiBtYXBwaW5nLnBhdGgsXG4gICAgICAgICAgICB2YWx1ZTogcGFyc2VMaXN0QXNWYWx1ZUNvbXBvc2VFbnRyeU9iamVjdChTdHJpbmcoYXJnVmFsdWUpLCAnLCcsICc9JyksXG4gICAgICAgIH06IFZhbHVlQ29tcG9zZUVudHJ5KTtcbiAgICB9XG5cbiAgICBpZiAobWFwcGluZy50eXBlID09PSAnRGV2aWNlQmxvY2tJT0NvbmZpZ1dlaWdodCcpIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAoKF92YWx1ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgW3BhdGgsIHdlaWdodF0gPSBTdHJpbmcoX3ZhbHVlKS5zcGxpdCgnOicpO1xuXG4gICAgICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICBwYXRoOiBtYXBwaW5nLnBhdGgsXG4gICAgICAgICAgICAgICAgdmFsdWU6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogcGFyc2VJbnQod2VpZ2h0LCAxMCksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIH06IFZhbHVlQ29tcG9zZUVudHJ5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1hcHBpbmcudHlwZSA9PT0gJ0RldmljZUJsb2NrSU9Db25maWdSYXRlJykge1xuICAgICAgICBjb25zdCB2YWx1ZXMgPSBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcblxuICAgICAgICByZXR1cm4gdmFsdWVzLm1hcCgoX3ZhbHVlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBbcGF0aCwgcmF0ZV0gPSBTdHJpbmcoX3ZhbHVlKS5zcGxpdCgnOicpO1xuXG4gICAgICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICBwYXRoOiBtYXBwaW5nLnBhdGgsXG4gICAgICAgICAgICAgICAgdmFsdWU6IFtcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhdGU6IC9eLT9cXGQrJC8udGVzdChTdHJpbmcocmF0ZSkpID8gcGFyc2VJbnQocmF0ZSwgMTApIDogcmF0ZSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgfTogVmFsdWVDb21wb3NlRW50cnkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAobWFwcGluZy50eXBlID09PSAnVWxpbWl0cycpIHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFt2YWx1ZV07XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAoKF92YWx1ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgW2xpbWl0TmFtZSwgbGltaXRWYWx1ZV0gPSBTdHJpbmcoX3ZhbHVlKS5zcGxpdCgnPScpO1xuICAgICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgICAgIGxpbWl0TmFtZSAmJiBsaW1pdFZhbHVlLFxuICAgICAgICAgICAgICAgIGAke21hcHBpbmcudHlwZX0gbXVzdCBiZSBpbiB0aGUgZm9ybWF0IG9mOiA8dHlwZT49PHNvZnQgbGltaXQ+Wzo8aGFyZCBsaW1pdD5dYCxcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGlmIChsaW1pdFZhbHVlLmluY2x1ZGVzKCc6JykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBbc29mdCwgaGFyZF0gPSBsaW1pdFZhbHVlLnNwbGl0KCc6Jyk7XG4gICAgICAgICAgICAgICAgaW52YXJpYW50KHNvZnQgJiYgaGFyZCwgYCR7bWFwcGluZy50eXBlfSBtdXN0IGJlIGluIHRoZSBmb3JtYXQgb2Y6IDx0eXBlPj08c29mdCBsaW1pdD5bOjxoYXJkIGxpbWl0Pl1gKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiAoe1xuICAgICAgICAgICAgICAgICAgICBwYXRoOiBgJHttYXBwaW5nLnBhdGh9LyR7bGltaXROYW1lfWAsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzb2Z0OiBwYXJzZUludChzb2Z0LCAxMCksXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXJkOiBwYXJzZUludChoYXJkLCAxMCksXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTogS1ZDb21wb3NlRW50cnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICBwYXRoOiBgJHttYXBwaW5nLnBhdGh9LyR7bGltaXROYW1lfWAsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHBhcnNlSW50KGxpbWl0VmFsdWUsIDEwKSxcbiAgICAgICAgICAgIH06IFZhbHVlQ29tcG9zZUVudHJ5KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG1hcHBpbmcudHlwZSA9PT0gJ0ludFZhbHVlJykge1xuICAgICAgICByZXR1cm4gKHtcbiAgICAgICAgICAgIHBhdGg6IG1hcHBpbmcucGF0aCxcbiAgICAgICAgICAgIHZhbHVlOiBwYXJzZUludCh2YWx1ZSwgMTApLFxuICAgICAgICB9OiBWYWx1ZUNvbXBvc2VFbnRyeSk7XG4gICAgfVxuXG4gICAgaWYgKG1hcHBpbmcudHlwZSA9PT0gJ0Zsb2F0VmFsdWUnKSB7XG4gICAgICAgIHJldHVybiAoe1xuICAgICAgICAgICAgcGF0aDogbWFwcGluZy5wYXRoLFxuICAgICAgICAgICAgdmFsdWU6IHBhcnNlRmxvYXQodmFsdWUpLFxuICAgICAgICB9OiBWYWx1ZUNvbXBvc2VFbnRyeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICh7XG4gICAgICAgIHBhdGg6IG1hcHBpbmcucGF0aCxcbiAgICAgICAgdmFsdWU6IFN0cmluZyh2YWx1ZSksXG4gICAgfTogVmFsdWVDb21wb3NlRW50cnkpO1xufTtcblxuLyoqXG4gKiBNYXAgYSB0b2tlbihzKSB0byB0aGUgYXJndW1lbnQgdHlwZSBhbmQgdmFsdWVcbiAqL1xuZXhwb3J0IGNvbnN0IG1heWJlR2V0Q29tcG9zZUVudHJ5ID0gKFxuICAgIC8qIFRoZSBkb2NrZXIgY2xpIGFyZ3VtZW50IGtleSAod2hhdCB0byBsb29rIHVwIGluIHRoZSBtYXBwaW5nIG9iamVjdHMpICovXG4gICAgbWFwS2V5OiBzdHJpbmcsXG4gICAgLyogVGhlIHZhbHVlKHMpIHRvIGJlIGFwcGxpZWQgKi9cbiAgICB2YWx1ZTogUmF3VmFsdWUsXG4pOiA/Q29tcG9zZUVudHJ5IHwgP0FycmF5PENvbXBvc2VFbnRyeT4gPT4ge1xuICAgIC8vIFRoZSAnTWFwcGluZycgb2JqZWN0ICh0byBtYXAgZnJvbSB0aGUgY2xpIGtleSB0byB0aGUgZG9ja2VyIGNvbXBvc2UgZXF1aXZhbGVudCBzdHJ1Y3R1cmUpXG4gICAgY29uc3QgbWFwcGluZyA9IE1BUFBJTkdTW21hcEtleV07XG5cbiAgICBpZiAoIW1hcHBpbmcpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgaWYgKG1hcHBpbmcucGF0aCA9PT0gJycpIHtcbiAgICAgICAgLy8gVE9ETzogVGhyb3cgZXJyb3IgLyB3YXJuaW5nXG4gICAgICAgIHJldHVybiAoe306IElnbm9yZUNvbXBvc2VFbnRyeSk7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHRoZXJlIGlzIGEgdmFsdWVcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAobWFwcGluZy50eXBlICE9PSAnU3dpdGNoJyAmJiAhdmFsdWUpIHtcbiAgICAgICAgLy8gVE9ETzogVGhyb3cgZXJyb3IgLyB3YXJuaW5nXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiBnZXRDb21wb3NlRW50cnkobWFwcGluZywgdmFsdWUpO1xufTtcblxuZXhwb3J0IGNvbnN0IGdldENvbXBvc2VKc29uID0gKGVudHJ5OiBDb21wb3NlRW50cnksIG5ldHdvcms6IGFueSk6IGFueSA9PiB7XG4gICAgaWYgKCFlbnRyeS5wYXRoKSByZXR1cm4ge307XG5cbiAgICAvLyAkRmxvd0ZpeE1lOiB1c2VkIHRvIGRpc2NhcmQgSWdub3JlQ29tcG9zZUVudHJ5LCBwYXRoIGFuZCB2YWx1ZSBkb2VzIG5vdCBleGlzdHNcbiAgICByZXR1cm4gZW50cnkucGF0aFxuICAgICAgICAucmVwbGFjZSgnwqRuZXR3b3JrwqQnLCBuZXR3b3JrLnRvU3RyaW5nKCkpXG4gICAgICAgIC5zcGxpdCgnLycpXG4gICAgICAgIC5yZWR1Y2VSaWdodCgocHJldiwgcGF0aEl0ZW0pID0+ICh7IFtwYXRoSXRlbV06IHByZXYgfSksIGVudHJ5LnZhbHVlKTtcbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgcGFyc2VyIGZyb20gJ3lhcmdzLXBhcnNlcic7XG5pbXBvcnQgZGVlcG1lcmdlIGZyb20gJ2RlZXBtZXJnZSc7XG5pbXBvcnQgQ29tcG9zZXZlcnRlciBmcm9tICdjb21wb3NldmVydGVyJztcblxuaW1wb3J0IHsgbWF5YmVHZXRDb21wb3NlRW50cnksIGdldENvbXBvc2VKc29uLCBmcm9tRW50cmllcywgc3RyaXBRdW90ZXMgfSBmcm9tICcuL2xvZ2ljJztcblxuZXhwb3J0IHR5cGUgUmF3VmFsdWUgPSBzdHJpbmcgfCBudW1iZXIgfCBib29sZWFuIHwgW3N0cmluZyB8IG51bWJlciB8IGJvb2xlYW5dIHwgYW55O1xuXG5leHBvcnQgdHlwZSBDb21wb3NlVmVyc2lvbiA9ICdsYXRlc3QnIHwgJ3YyeCcgfCAndjN4JztcblxuY29uc3QgZ2V0U2VydmljZU5hbWUgPSAoaW1hZ2U6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgaWYgKGltYWdlID09PSBudWxsIHx8IGltYWdlID09PSAnJyB8fCB0eXBlb2YgaW1hZ2UgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gJyEhIWludmFsaWQhISEnO1xuICAgIGxldCBuYW1lID0gaW1hZ2UuaW5jbHVkZXMoJy8nKSA/IGltYWdlLnNwbGl0KCcvJykuc2xpY2UoLTEpWzBdIDogaW1hZ2U7XG4gICAgbmFtZSA9IG5hbWUuaW5jbHVkZXMoJzonKSA/IG5hbWUuc3BsaXQoJzonKVswXSA6IG5hbWU7XG5cbiAgICByZXR1cm4gbmFtZTtcbn07XG5cbmV4cG9ydCB0eXBlIENvbXBvc2VGaWxlID0geyBjb21wb3NlRmlsZTogYW55LCBpZ25vcmVkT3B0aW9uc0NvbW1lbnRzOiBzdHJpbmcgfTtcblxuY29uc3QgZ2V0Q29tcG9zZUZpbGVKc29uID0gKGlucHV0OiBzdHJpbmcsIGV4aXN0aW5nQ29tcG9zZUZpbGU6IHN0cmluZyk6IENvbXBvc2VGaWxlID0+IHtcbiAgICBjb25zdCBmb3JtYXR0ZWRJbnB1dCA9IGlucHV0XG4gICAgICAgIC5yZXBsYWNlKC9cXG5cXHMqI1teXFxuXSsvZywgJycpXG4gICAgICAgIC5yZXBsYWNlKC9cXCRcXChbXildKlxcKS9nLCAobSkgPT4gbS5yZXBsYWNlKC9cXHMvZywgJ8KkJykpXG4gICAgICAgIC5yZXBsYWNlKC9cXFxcXFxuL2csICcnKVxuICAgICAgICAucmVwbGFjZSgvKFxccykrL2csICcgJylcbiAgICAgICAgLnRyaW0oKVxuICAgICAgICAucmVwbGFjZSgvXFxzLXAoXFxkKS9nLCAnIC1wICQxJylcbiAgICAgICAgLnJlcGxhY2UoL1xcc1xcXFxcXHMvZywgJyAnKVxuICAgICAgICAucmVwbGFjZSgvXFxzKjskL2csICcnKTtcbiAgICBjb25zdCBmb3JtYXR0ZWRJbnB1dEFyZ3MgPSBmb3JtYXR0ZWRJbnB1dC5yZXBsYWNlKFxuICAgICAgICAvXig/OlxccypcXCRcXHMrKT9kb2NrZXJcXHMrKHJ1bnxjcmVhdGV8Y29udGFpbmVyXFxzK3J1bnxzZXJ2aWNlXFxzK2NyZWF0ZSkvLFxuICAgICAgICAnJyxcbiAgICApO1xuICAgIGNvbnN0IHBhcnNlZElucHV0OiB7XG4gICAgICAgICtfOiBBcnJheTxzdHJpbmc+LFxuICAgICAgICArW2ZsYWc6IHN0cmluZ106IFJhd1ZhbHVlLFxuICAgIH0gPSBwYXJzZXIoZm9ybWF0dGVkSW5wdXRBcmdzLCB7XG4gICAgICAgIGNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgICAgICdoYWx0LWF0LW5vbi1vcHRpb24nOiB0cnVlLFxuICAgICAgICAgICAgJ2NhbWVsLWNhc2UtZXhwYW5zaW9uJzogZmFsc2UsXG4gICAgICAgICAgICAnYm9vbGVhbi1uZWdhdGlvbic6IGZhbHNlLFxuICAgICAgICB9LFxuICAgICAgICBib29sZWFuOiBbXG4gICAgICAgICAgICAnaScsXG4gICAgICAgICAgICAnaW50ZXJhY3RpdmUnLFxuICAgICAgICAgICAgJ3QnLFxuICAgICAgICAgICAgJ3R0eScsXG4gICAgICAgICAgICAnZCcsXG4gICAgICAgICAgICAnZGV0YWNoJyxcbiAgICAgICAgICAgICdybScsXG4gICAgICAgICAgICAnaW5pdCcsXG4gICAgICAgICAgICAnaGVscCcsXG4gICAgICAgICAgICAncHJpdmlsZWdlZCcsXG4gICAgICAgICAgICAnUCcsXG4gICAgICAgICAgICAncHVibGlzaC1hbGwnLFxuICAgICAgICAgICAgJ25vLWhlYWx0aGNoZWNrJyxcbiAgICAgICAgICAgICdvb20ta2lsbC1kaXNhYmxlJyxcbiAgICAgICAgICAgICdyZWFkLW9ubHknLFxuICAgICAgICAgICAgJ3NpZy1wcm94eScsXG4gICAgICAgIF0sXG4gICAgfSk7XG4gICAgY29uc3QgeyBfOiBjb21tYW5kLCAuLi5yYXdQYXJhbXMgfSA9IHBhcnNlZElucHV0O1xuICAgIGNvbnN0IGNsZWFuU3RyaW5nQXJnID0gKHY6IGFueSkgPT5cbiAgICAgICAgc3RyaXBRdW90ZXMoU3RyaW5nKHYpLnRyaW0oKSkucmVwbGFjZSgvXFwkXFwoW14pXSpcXCkvZywgKG0pID0+IG0ucmVwbGFjZSgvwqQvZywgJyAnKSk7XG4gICAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmZyb21FbnRyaWVzKFxuICAgICAgICBPYmplY3QuZW50cmllcyhyYXdQYXJhbXMpLm1hcCgoW2tleSwgdmFsdWVdOiBbc3RyaW5nLCBSYXdWYWx1ZV0pID0+IHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBba2V5LnRyaW0oKSwgdmFsdWUubWFwKCh2KSA9PiAodHlwZW9mIHYgPT09ICdzdHJpbmcnID8gY2xlYW5TdHJpbmdBcmcodikgOiB2KSldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIFtrZXkudHJpbSgpLCB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gY2xlYW5TdHJpbmdBcmcodmFsdWUpIDogdmFsdWVdO1xuICAgICAgICB9KSxcbiAgICApO1xuICAgIC8vIFRoZSBzZXJ2aWNlIG9iamVjdCB0aGF0IHdlJ2xsIHVwZGF0ZVxuICAgIGxldCBzZXJ2aWNlID0ge307XG5cbiAgICAvLyAkRmxvd0ZpeE1lOiBtYXkgYmUgZG8gYmV0dGVyXG4gICAgY29uc3QgeyBuZXQ6IG5ldEFyZywgbmV0d29yazogbmV0d29ya0FyZyB9ID0gcGFyYW1zO1xuICAgIGNvbnN0IG5ldHdvcmsgPSBuZXRBcmcgfHwgbmV0d29ya0FyZyB8fCAnZGVmYXVsdCc7XG5cbiAgICBjb25zdCBpZ25vcmVkT3B0aW9ucyA9IFtdO1xuICAgIC8vIExvb3AgdGhyb3VnaCB0aGUgdG9rZW5zIGFuZCBhcHBlbmQgdG8gdGhlIHNlcnZpY2Ugb2JqZWN0XG4gICAgT2JqZWN0LmVudHJpZXMocGFyYW1zKS5mb3JFYWNoKChba2V5LCB2YWx1ZV06IFtzdHJpbmcsIFJhd1ZhbHVlXSkgPT4ge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjE3NFxuICAgICAgICAvLyAkRmxvd0ZpeE1lOiBPYmplY3QuZW50cmllcyB3aXBlcyBvdXQgdHlwZXMgQVRPV1xuICAgICAgICBjb25zdCByZXN1bHQgPSBtYXliZUdldENvbXBvc2VFbnRyeShrZXksIHZhbHVlKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgY29uc3QgZW50cmllcyA9IEFycmF5LmlzQXJyYXkocmVzdWx0KSA/IHJlc3VsdCA6IFtyZXN1bHRdO1xuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFN0b3JlIHdoYXRldmVyIHRoZSBuZXh0IGVudHJ5IHdpbGwgYmVcbiAgICAgICAgICAgICAgICBjb25zdCBqc29uID0gZ2V0Q29tcG9zZUpzb24oZW50cnksIG5ldHdvcmspO1xuICAgICAgICAgICAgICAgIHNlcnZpY2UgPSBkZWVwbWVyZ2Uoc2VydmljZSwganNvbik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGRhc2ggPSBrZXkubGVuZ3RoID09PSAxID8gJy0nIDogJy0tJztcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlU3RyaW5nID0gdmFsdWUgPT09IHRydWUgPyAnJyA6IGA9JHt2YWx1ZS50b1N0cmluZygpfWA7XG4gICAgICAgICAgICBpZ25vcmVkT3B0aW9ucy5wdXNoKGAjICR7ZGFzaH0ke2tleX0ke3ZhbHVlU3RyaW5nfWApO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICBjb25zdCBpbWFnZSA9IHN0cmlwUXVvdGVzKGNvbW1hbmRbMF0/LnRyaW0oKSk7XG4gICAgLy8gJEZsb3dGaXhNZTogcHJvcCBtaXNzaW5nXG4gICAgc2VydmljZS5pbWFnZSA9IGltYWdlO1xuICAgIGlmIChjb21tYW5kLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgbGV0IGFyZ1N0YXJ0ID0gMTtcbiAgICAgICAgY29uc3QgY29tbWFuZEFyZ3NBcnJheSA9IFtdO1xuICAgICAgICB3aGlsZSAoYXJnU3RhcnQgPCBjb21tYW5kLmxlbmd0aCkge1xuICAgICAgICAgICAgY29tbWFuZEFyZ3NBcnJheS5wdXNoKGNvbW1hbmRbYXJnU3RhcnRdKTtcbiAgICAgICAgICAgIGFyZ1N0YXJ0ICs9IDE7XG4gICAgICAgIH1cbiAgICAgICAgLy8gJEZsb3dGaXhNZTogcHJvcCBtaXNzaW5nXG4gICAgICAgIHNlcnZpY2UuY29tbWFuZCA9IGNvbW1hbmRBcmdzQXJyYXkuam9pbignICcpO1xuICAgIH1cblxuICAgIC8vICRGbG93Rml4TWU6IHByb3AgbWlzc2luZ1xuICAgIGlmIChzZXJ2aWNlLm5ldHdvcmtfbW9kZSA9PT0gJ2hvc3QnKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWU6IHByb3AgbWlzc2luZ1xuICAgICAgICBkZWxldGUgc2VydmljZS5wb3J0cztcbiAgICB9XG5cbiAgICBjb25zdCBpc05hbWVkVm9sdW1lID0gKHNvdXJjZTogc3RyaW5nKSA9PlxuICAgICAgICBzb3VyY2UgJiZcbiAgICAgICAgIXNvdXJjZS5pbmNsdWRlcygnLycpICYmXG4gICAgICAgICFzb3VyY2UuaW5jbHVkZXMoJ1xcXFwnKSAmJlxuICAgICAgICAhc291cmNlLmluY2x1ZGVzKCckJykgJiZcbiAgICAgICAgIXNvdXJjZS5pbmNsdWRlcygnPCcpICYmXG4gICAgICAgICFzb3VyY2UuaW5jbHVkZXMoJz4nKTtcbiAgICBjb25zdCBuYW1lZFZvbHVtZXMgPSBbXTtcbiAgICAvLyAkRmxvd0ZpeE1lOiBwcm9wIG1pc3NpbmdcbiAgICBpZiAoc2VydmljZS52b2x1bWVzKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWU6IHByb3AgbWlzc2luZ1xuICAgICAgICBmb3IgKGxldCB2b2x1bWVJbmRleCA9IDA7IHZvbHVtZUluZGV4IDwgc2VydmljZS52b2x1bWVzLmxlbmd0aDsgdm9sdW1lSW5kZXggKz0gMSkge1xuICAgICAgICAgICAgbGV0IHNvdXJjZTtcbiAgICAgICAgICAgIC8vICRGbG93Rml4TWU6IHByb3AgbWlzc2luZ1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBzZXJ2aWNlLnZvbHVtZXNbdm9sdW1lSW5kZXhdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIC8vICRGbG93Rml4TWU6IHByb3AgbWlzc2luZ1xuICAgICAgICAgICAgICAgIGNvbnN0IHZvbHVtZU5hbWUgPSBzZXJ2aWNlLnZvbHVtZXNbdm9sdW1lSW5kZXhdLnNwbGl0KCc6JylbMF07XG4gICAgICAgICAgICAgICAgc291cmNlID0gdm9sdW1lTmFtZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZTogcHJvcCBtaXNzaW5nXG4gICAgICAgICAgICAgICAgY29uc3Qgdm9sdW1lU291cmNlID0gc2VydmljZS52b2x1bWVzW3ZvbHVtZUluZGV4XS5zb3VyY2U7XG4gICAgICAgICAgICAgICAgc291cmNlID0gdm9sdW1lU291cmNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzTmFtZWRWb2x1bWUoc291cmNlKSkge1xuICAgICAgICAgICAgICAgIG5hbWVkVm9sdW1lcy5wdXNoKFtzb3VyY2UsIHsgZXh0ZXJuYWw6IHsgbmFtZTogc291cmNlIH0gfV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gJEZsb3dGaXhNZTogcHJvcCBtaXNzaW5nXG4gICAgaWYgKHNlcnZpY2UubmV0d29ya3MpIHtcbiAgICAgICAgY29uc3QgaXNPYmplY3RFbXB0eSA9IChvYmo6IGFueSkgPT4gb2JqICYmIE9iamVjdC5rZXlzKG9iaikubGVuZ3RoID09PSAwICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gT2JqZWN0O1xuICAgICAgICAvLyAkRmxvd0ZpeE1lOiBwcm9wIG1pc3NpbmdcbiAgICAgICAgT2JqZWN0LmtleXMoc2VydmljZS5uZXR3b3JrcykuZm9yRWFjaCgoc2VydmljZU5ldHdvcmtOYW1lKSA9PiB7XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lOiBwcm9wIG1pc3NpbmdcbiAgICAgICAgICAgIGlmIChpc09iamVjdEVtcHR5KHNlcnZpY2UubmV0d29ya3Nbc2VydmljZU5ldHdvcmtOYW1lXSkpIHtcbiAgICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lOiBwcm9wIG1pc3NpbmdcbiAgICAgICAgICAgICAgICBzZXJ2aWNlLm5ldHdvcmtzW3NlcnZpY2VOZXR3b3JrTmFtZV0gPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gJEZsb3dGaXhNZTogcHJvcCBtaXNzaW5nXG4gICAgICAgIGlmIChPYmplY3QudmFsdWVzKHNlcnZpY2UubmV0d29ya3MpLmV2ZXJ5KCh2KSA9PiAhdikpIHtcbiAgICAgICAgICAgIC8vICRGbG93Rml4TWU6IHByb3AgbWlzc2luZ1xuICAgICAgICAgICAgc2VydmljZS5uZXR3b3JrcyA9IE9iamVjdC5rZXlzKHNlcnZpY2UubmV0d29ya3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgbmFtZWROZXR3b3JrcyA9IFtdO1xuICAgIC8vICRGbG93Rml4TWU6IHByb3AgbWlzc2luZ1xuICAgIGlmIChzZXJ2aWNlLm5ldHdvcmtzKSB7XG4gICAgICAgIC8vICRGbG93Rml4TWU6IHByb3AgbWlzc2luZ1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzZXJ2aWNlLm5ldHdvcmtzKSkge1xuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZTogcHJvcCBtaXNzaW5nXG4gICAgICAgICAgICBmb3IgKGxldCBuZXR3b3JrSW5kZXggPSAwOyBuZXR3b3JrSW5kZXggPCBzZXJ2aWNlLm5ldHdvcmtzLmxlbmd0aDsgbmV0d29ya0luZGV4ICs9IDEpIHtcbiAgICAgICAgICAgICAgICBuYW1lZE5ldHdvcmtzLnB1c2goW1xuICAgICAgICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lOiBwcm9wIG1pc3NpbmdcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZS5uZXR3b3Jrc1tuZXR3b3JrSW5kZXhdLFxuICAgICAgICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lOiBwcm9wIG1pc3NpbmdcbiAgICAgICAgICAgICAgICAgICAgeyBleHRlcm5hbDogdHJ1ZSwgbmFtZTogc2VydmljZS5uZXR3b3Jrc1tuZXR3b3JrSW5kZXhdIH0sXG4gICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyAkRmxvd0ZpeE1lOiBwcm9wIG1pc3NpbmdcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHNlcnZpY2UubmV0d29ya3MpLmZvckVhY2goKHNlcnZpY2VOZXR3b3JrTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFRPRE86IHN1cHBvc2VkIHRvIGJlIGRvbmUgYnkgYmFiZWwgOiBpZiAoc2VydmljZS5uZXR3b3Jrcy5oYXNPd25Qcm9wZXJ0eShuZXR3b3JrKSlcbiAgICAgICAgICAgICAgICBuYW1lZE5ldHdvcmtzLnB1c2goW3NlcnZpY2VOZXR3b3JrTmFtZSwgeyBleHRlcm5hbDogdHJ1ZSwgbmFtZTogc2VydmljZU5ldHdvcmtOYW1lIH1dKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3Qgc2VydmljZU5hbWUgPSBnZXRTZXJ2aWNlTmFtZShpbWFnZSk7XG5cbiAgICAvLyBPdXRlciB0ZW1wbGF0ZVxuICAgIGxldCByZXN1bHQ7XG4gICAgY29uc3QgZ2VuZXJhdGVkQ29tcG9zZSA9IHtcbiAgICAgICAgdmVyc2lvbjogJzMnLFxuICAgICAgICBzZXJ2aWNlczoge1xuICAgICAgICAgICAgW3NlcnZpY2VOYW1lXTogc2VydmljZSxcbiAgICAgICAgfSxcbiAgICB9O1xuICAgIGNvbnN0IGV4aXN0aW5nQ29tcG9zZSA9IENvbXBvc2V2ZXJ0ZXIueWFtbFBhcnNlKGV4aXN0aW5nQ29tcG9zZUZpbGUgPz8gJycpID8/IHt9O1xuICAgIHJlc3VsdCA9IGRlZXBtZXJnZShleGlzdGluZ0NvbXBvc2UsIGdlbmVyYXRlZENvbXBvc2UpO1xuICAgIGlmIChuYW1lZE5ldHdvcmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgY29uc3QgbmV0d29ya3MgPSB7IG5ldHdvcmtzOiBmcm9tRW50cmllcyhuYW1lZE5ldHdvcmtzKSB9O1xuICAgICAgICByZXN1bHQgPSBkZWVwbWVyZ2UocmVzdWx0LCBuZXR3b3Jrcyk7XG4gICAgfVxuICAgIGlmIChuYW1lZFZvbHVtZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCB2b2x1bWVzID0geyB2b2x1bWVzOiBmcm9tRW50cmllcyhuYW1lZFZvbHVtZXMpIH07XG4gICAgICAgIHJlc3VsdCA9IGRlZXBtZXJnZShyZXN1bHQsIHZvbHVtZXMpO1xuICAgIH1cblxuICAgIGxldCBpZ25vcmVkT3B0aW9uc0NvbW1lbnRzID0gJyc7XG4gICAgaWYgKGlnbm9yZWRPcHRpb25zLmxlbmd0aCA+IDApXG4gICAgICAgIGlnbm9yZWRPcHRpb25zQ29tbWVudHMgPSBgIyBpZ25vcmVkIG9wdGlvbnMgZm9yICcke3NlcnZpY2VOYW1lfSdcXG4ke2lnbm9yZWRPcHRpb25zLmpvaW4oJ1xcbicpfVxcbmA7XG5cbiAgICByZXR1cm4gKHtcbiAgICAgICAgY29tcG9zZUZpbGU6IHJlc3VsdCxcbiAgICAgICAgaWdub3JlZE9wdGlvbnNDb21tZW50cyxcbiAgICB9OiBDb21wb3NlRmlsZSk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCAoXG4gICAgaW5wdXQ6IHN0cmluZyxcbiAgICBleGlzdGluZ0NvbXBvc2VGaWxlOiBzdHJpbmcgPSAnJyxcbiAgICBjb21wb3NlVmVyc2lvbjogJ2xhdGVzdCcgfCAndjJ4JyB8ICd2M3gnID0gJ2xhdGVzdCcsXG4gICAgaW5kZW50OiBudW1iZXIgPSA0LFxuKTogP3N0cmluZyA9PiB7XG4gICAgY29uc3QgZ2xvYmFsSWdub3JlZE9wdGlvbnNDb21tZW50cyA9IFtdO1xuICAgIGxldCByZXN1bHQgPSB7fTtcbiAgICBjb25zdCBkb2NrZXJDb21tYW5kcyA9IGlucHV0LnNwbGl0KC9eKD86XFxzKlxcJCk/XFxzKmRvY2tlclxccysvZ20pO1xuICAgIGxldCBjb252ZXJ0ZWRFeGlzdGluZ0NvbXBvc2VGaWxlID0gZXhpc3RpbmdDb21wb3NlRmlsZTtcbiAgICBpZiAoZXhpc3RpbmdDb21wb3NlRmlsZSkge1xuICAgICAgICBpZiAoY29tcG9zZVZlcnNpb24gPT09ICd2MngnKVxuICAgICAgICAgICAgY29udmVydGVkRXhpc3RpbmdDb21wb3NlRmlsZSA9IENvbXBvc2V2ZXJ0ZXIubWlncmF0ZUZyb21WM3hUb1YyeChjb252ZXJ0ZWRFeGlzdGluZ0NvbXBvc2VGaWxlLCB7IGluZGVudCB9KTtcbiAgICAgICAgZWxzZSBpZiAoY29tcG9zZVZlcnNpb24gPT09ICdsYXRlc3QnKVxuICAgICAgICAgICAgY29udmVydGVkRXhpc3RpbmdDb21wb3NlRmlsZSA9IENvbXBvc2V2ZXJ0ZXIubWlncmF0ZVRvQ29tbW9uU3BlYyhjb252ZXJ0ZWRFeGlzdGluZ0NvbXBvc2VGaWxlLCB7IGluZGVudCB9KTtcbiAgICB9XG4gICAgZG9ja2VyQ29tbWFuZHMuZm9yRWFjaCgoZG9ja2VyQ29tbWFuZCkgPT4ge1xuICAgICAgICBjb25zdCBjb21tYW5kID0gU3RyaW5nKGRvY2tlckNvbW1hbmQpO1xuICAgICAgICBpZiAoIWNvbW1hbmQpIHJldHVybjtcbiAgICAgICAgaWYgKCFjb21tYW5kLm1hdGNoKC9eXFxzKihydW58Y3JlYXRlfGNvbnRhaW5lclxccytydW58c2VydmljZVxccytjcmVhdGUpLykpIHtcbiAgICAgICAgICAgIGdsb2JhbElnbm9yZWRPcHRpb25zQ29tbWVudHMucHVzaChgIyBpZ25vcmVkIDogZG9ja2VyICR7Y29tbWFuZH1cXG5gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IGNvbXBvc2VGaWxlLCBpZ25vcmVkT3B0aW9uc0NvbW1lbnRzIH0gPSBnZXRDb21wb3NlRmlsZUpzb24oXG4gICAgICAgICAgICBgZG9ja2VyICR7Y29tbWFuZH1gLFxuICAgICAgICAgICAgY29udmVydGVkRXhpc3RpbmdDb21wb3NlRmlsZSxcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGlnbm9yZWRPcHRpb25zQ29tbWVudHMpIGdsb2JhbElnbm9yZWRPcHRpb25zQ29tbWVudHMucHVzaChpZ25vcmVkT3B0aW9uc0NvbW1lbnRzKTtcblxuICAgICAgICByZXN1bHQgPSBkZWVwbWVyZ2UocmVzdWx0LCBjb21wb3NlRmlsZSk7XG4gICAgfSk7XG4gICAgLy8gJEZsb3dGaXhNZTogcHJvcCBtaXNzaW5nXG4gICAgaWYgKCFyZXN1bHQuc2VydmljZXMpXG4gICAgICAgIHRocm93IG5ldyBTeW50YXhFcnJvcignbXVzdCBoYXZlIGF0IGxlYXN0IGEgdmFsaWQgZG9ja2VyIHJ1bi9jcmVhdGUvc2VydmljZSBjcmVhdGUvY29udGFpbmVyIHJ1biBjb21tYW5kJyk7XG5cbiAgICBsZXQgZmluYWxDb21wb3NlWWFtbCA9IENvbXBvc2V2ZXJ0ZXIueWFtbFN0cmluZ2lmeShyZXN1bHQsIHsgaW5kZW50IH0pLnRyaW0oKTtcbiAgICBpZiAoY29tcG9zZVZlcnNpb24gPT09ICd2MngnKSBmaW5hbENvbXBvc2VZYW1sID0gQ29tcG9zZXZlcnRlci5taWdyYXRlRnJvbVYzeFRvVjJ4KGZpbmFsQ29tcG9zZVlhbWwsIHsgaW5kZW50IH0pO1xuICAgIGVsc2UgaWYgKGNvbXBvc2VWZXJzaW9uID09PSAnbGF0ZXN0JylcbiAgICAgICAgZmluYWxDb21wb3NlWWFtbCA9IENvbXBvc2V2ZXJ0ZXIubWlncmF0ZVRvQ29tbW9uU3BlYyhmaW5hbENvbXBvc2VZYW1sLCB7IGluZGVudCB9KTtcbiAgICBlbHNlIGlmIChjb21wb3NlVmVyc2lvbiAhPT0gJ3YzeCcpIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBDb21wb3NlVmVyc2lvbiAnJHtjb21wb3NlVmVyc2lvbn0nYCk7XG5cbiAgICByZXR1cm4gZ2xvYmFsSWdub3JlZE9wdGlvbnNDb21tZW50cy5qb2luKCdcXG4nKSArIGZpbmFsQ29tcG9zZVlhbWw7XG59O1xuIl0sIm5hbWVzIjpbImdsb2JhbCQxIiwiZ2xvYmFsIiwic2VsZiIsIndpbmRvdyIsInBlcmZvcm1hbmNlIiwicHJvY2VzcyIsIm5vdyIsIm1vek5vdyIsIm1zTm93Iiwib05vdyIsIndlYmtpdE5vdyIsImVudiIsImN3ZCIsImNhbWVsQ2FzZSIsImlucHV0Iiwib3B0aW9ucyIsIkFycmF5IiwiaXNBcnJheSIsIlR5cGVFcnJvciIsIk9iamVjdCIsImFzc2lnbiIsInBhc2NhbENhc2UiLCJtYXAiLCJ4IiwidHJpbSIsImZpbHRlciIsImxlbmd0aCIsImpvaW4iLCJ0b1VwcGVyQ2FzZSIsInRvTG93ZXJDYXNlIiwic3RyaW5nIiwibGV0IiwiaXNMYXN0Q2hhckxvd2VyIiwiaXNMYXN0Q2hhclVwcGVyIiwiaXNMYXN0TGFzdENoYXJVcHBlciIsImkiLCJjaGFyYWN0ZXIiLCJ0ZXN0Iiwic2xpY2UiLCJyZXBsYWNlIiwiXyIsInAxIiwibSIsImNoYXJBdCIsImNhbWVsY2FzZSIsImV4cG9ydHMiLCJjYW1lbGNhc2VNb2R1bGUiLCJkZWZhdWx0Iiwibm9ybWFsaXplQXJyYXkiLCJwYXJ0cyIsImFsbG93QWJvdmVSb290IiwidXAiLCJsYXN0Iiwic3BsaWNlIiwidW5zaGlmdCIsInNwbGl0UGF0aCIsImZpbGVuYW1lIiwic3BsaXRQYXRoUmUiLCJleGVjIiwicmVzb2x2ZSIsInJlc29sdmVkUGF0aCIsInJlc29sdmVkQWJzb2x1dGUiLCJhcmd1bWVudHMiLCJwYXRoIiwic3BsaXQiLCJwIiwibm9ybWFsaXplIiwiaXNQYXRoQWJzb2x1dGUiLCJpc0Fic29sdXRlIiwidHJhaWxpbmdTbGFzaCIsInN1YnN0ciIsInByb3RvdHlwZSIsImNhbGwiLCJpbmRleCIsInJlbGF0aXZlIiwiZnJvbSIsInRvIiwiYXJyIiwic3RhcnQiLCJlbmQiLCJmcm9tUGFydHMiLCJ0b1BhcnRzIiwiTWF0aCIsIm1pbiIsInNhbWVQYXJ0c0xlbmd0aCIsIm91dHB1dFBhcnRzIiwicHVzaCIsImNvbmNhdCIsImRpcm5hbWUiLCJyZXN1bHQiLCJyb290IiwiZGlyIiwiYmFzZW5hbWUiLCJleHQiLCJmIiwiZXh0bmFtZSIsInBhdGgkMSIsInNlcCIsImRlbGltaXRlciIsInhzIiwicmVzIiwic3RyIiwibGVuIiwiaXNCdWZmZXIiLCJvYmoiLCJfaXNCdWZmZXIiLCJpc0Zhc3RCdWZmZXIiLCJyZWFkRmxvYXRMRSIsImNvbnN0cnVjdG9yIiwiaW5oZXJpdHMkMSIsImNyZWF0ZSIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJ2YWx1ZSIsImVudW1lcmFibGUiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIlRlbXBDdG9yIiwiZm9ybWF0UmVnRXhwIiwiZm9ybWF0IiwiaXNTdHJpbmciLCJvYmplY3RzIiwiaW5zcGVjdCIsImFyZ3MiLCJTdHJpbmciLCJOdW1iZXIiLCJKU09OIiwic3RyaW5naWZ5IiwiaXNOdWxsIiwiaXNPYmplY3QiLCJkZXByZWNhdGUiLCJmbiIsIm1zZyIsIndhcm5lZCIsImlzVW5kZWZpbmVkIiwiYXBwbHkiLCJ0aGlzIiwibm9EZXByZWNhdGlvbiIsInRocm93RGVwcmVjYXRpb24iLCJFcnJvciIsInRyYWNlRGVwcmVjYXRpb24iLCJjb25zb2xlIiwidHJhY2UiLCJlcnJvciIsImRlYnVnRW52aXJvbiIsImRlYnVncyIsImRlYnVnbG9nIiwic2V0IiwiTk9ERV9ERUJVRyIsIlJlZ0V4cCIsIm9wdHMiLCJjdHgiLCJzZWVuIiwic3R5bGl6ZSIsInN0eWxpemVOb0NvbG9yIiwiZGVwdGgiLCJjb2xvcnMiLCJpc0Jvb2xlYW4iLCJzaG93SGlkZGVuIiwiX2V4dGVuZCIsImN1c3RvbUluc3BlY3QiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHlsZVR5cGUiLCJzdHlsZSIsInN0eWxlcyIsInJlY3Vyc2VUaW1lcyIsImlzRnVuY3Rpb24iLCJyZXQiLCJwcmltaXRpdmUiLCJzaW1wbGUiLCJpc051bWJlciIsImhhc2giLCJrZXlzIiwidmlzaWJsZUtleXMiLCJmb3JFYWNoIiwidmFsIiwiaWR4IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImlzRXJyb3IiLCJpbmRleE9mIiwiZm9ybWF0RXJyb3IiLCJuYW1lIiwiaXNSZWdFeHAiLCJ0b1N0cmluZyIsImlzRGF0ZSIsIkRhdGUiLCJiYXNlIiwiYXJyYXkiLCJicmFjZXMiLCJ0b1VUQ1N0cmluZyIsIm91dHB1dCIsImwiLCJoYXNPd25Qcm9wZXJ0eSIsImZvcm1hdFByb3BlcnR5Iiwia2V5IiwibWF0Y2giLCJwb3AiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsInJlZHVjZSIsInByZXYiLCJjdXIiLCJkZXNjIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0IiwibGluZSIsImFyIiwiYXJnIiwiaXNOdWxsT3JVbmRlZmluZWQiLCJpc1N5bWJvbCIsInVuZGVmaW5lZCIsInJlIiwib2JqZWN0VG9TdHJpbmciLCJkIiwiZSIsImlzUHJpbWl0aXZlIiwibWF5YmVCdWYiLCJCdWZmZXIuaXNCdWZmZXIiLCJvIiwicGFkIiwibiIsImJvbGQiLCJpdGFsaWMiLCJ1bmRlcmxpbmUiLCJpbnZlcnNlIiwid2hpdGUiLCJncmV5IiwiYmxhY2siLCJibHVlIiwiY3lhbiIsImdyZWVuIiwibWFnZW50YSIsInJlZCIsInllbGxvdyIsInNwZWNpYWwiLCJudW1iZXIiLCJib29sZWFuIiwibnVsbCIsImRhdGUiLCJyZWdleHAiLCJtb250aHMiLCJsb2ciLCJ0aW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldERhdGUiLCJnZXRNb250aCIsIm9yaWdpbiIsImFkZCIsInByb3AiLCJyZXF1aXJlJCQwIiwiZGVjYW1lbGl6ZSIsInJlcXVpcmUkJDIiLCJ0b2tlbml6ZUFyZ1N0cmluZyIsImFyZ1N0cmluZyIsInByZXZDIiwiYyIsIm9wZW5pbmciLCJpaSIsInV0aWwiLCJpbmhlcml0cyIsInBhcnNlIiwiYXJndiIsImNvbmZpZ0xvb2t1cCIsImNvZXJjZSIsImFwcGxpZWQiLCJhbGlhc2VzIiwiYWxpYXNBcnJheXMiLCJjaGFuZ2UiLCJjb21iaW5lZCIsInYiLCJhbGlhc0FycmF5IiwiYWxpYXMiLCJjb25maWd1cmF0aW9uIiwic2hvcnQtb3B0aW9uLWdyb3VwcyIsImNhbWVsLWNhc2UtZXhwYW5zaW9uIiwiZG90LW5vdGF0aW9uIiwicGFyc2UtbnVtYmVycyIsImJvb2xlYW4tbmVnYXRpb24iLCJuZWdhdGlvbi1wcmVmaXgiLCJkdXBsaWNhdGUtYXJndW1lbnRzLWFycmF5IiwiZmxhdHRlbi1kdXBsaWNhdGUtYXJyYXlzIiwicG9wdWxhdGUtLSIsImNvbWJpbmUtYXJyYXlzIiwic2V0LXBsYWNlaG9sZGVyLWtleSIsImhhbHQtYXQtbm9uLW9wdGlvbiIsInN0cmlwLWFsaWFzZWQiLCJzdHJpcC1kYXNoZWQiLCJkZWZhdWx0cyIsImNvbmZpZ09iamVjdHMiLCJlbnZQcmVmaXgiLCJub3RGbGFnc09wdGlvbiIsIm5vdEZsYWdzQXJndiIsIm5ld0FsaWFzZXMiLCJfXyIsImZsYWdzIiwiYXJyYXlzIiwiYm9vbHMiLCJzdHJpbmdzIiwibnVtYmVycyIsImNvdW50cyIsImNvbmZpZ3MiLCJkZWZhdWx0ZWQiLCJuYXJncyIsImNvZXJjaW9ucyIsIm5lZ2F0aXZlIiwibmVnYXRlZEJvb2xlYW4iLCJCb29sZWFuIiwib3B0IiwiYXNzaWdubWVudCIsImNvdW50IiwibmFyZyIsImsiLCJjb25maWciLCJleHRlbmRBbGlhc2VzIiwieSIsIm5vdEZsYWdzIiwic2V0QXJnIiwibmV4dCIsImNoZWNrQWxsQWxpYXNlcyIsImVhdE5hcmdzIiwiZWF0QXJyYXkiLCJkZWZhdWx0VmFsdWUiLCJsZXR0ZXJzIiwiYnJva2VuIiwiaiIsIm1heWJlQ29lcmNlTnVtYmVyIiwidG9FYXQiLCJhdmFpbGFibGUiLCJjb25zdW1lZCIsImFyZ3NUb1NldCIsIm11bHRpcGxlQXJyYXlGbGFnIiwiZGVmYXVsdEZvclR5cGUiLCJwcm9jZXNzVmFsdWUiLCJhZGROZXdBbGlhcyIsInNwbGl0S2V5Iiwic2V0S2V5IiwiYSIsInNoaWZ0IiwiX19kZWZpbmVTZXR0ZXJfXyIsIl9fZGVmaW5lR2V0dGVyX18iLCJzdWJzdHJpbmciLCJpbmNyZW1lbnQiLCJzaG91bGRDb2VyY2VOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwiZmxvb3IiLCJzZXRDb25maWdPYmplY3QiLCJmdWxsS2V5IiwiaGFzS2V5IiwiYXBwbHlFbnZWYXJzIiwiY29uZmlnT25seSIsInByZWZpeCIsImVudlZhciIsImxhc3RJbmRleE9mIiwiYXBwbHlEZWZhdWx0c0FuZEFsaWFzZXMiLCJzYW5pdGl6ZUtleSIsImlzVHlwZUFycmF5IiwiaXNWYWx1ZUFycmF5IiwiZHVwbGljYXRlIiwiZmxhZyIsImlzU2V0IiwidHlwZSIsIm51bSIsImNvbmZpZ0tleSIsImNvbmZpZ1BhdGgiLCJyZXNvbHZlZENvbmZpZ1BhdGgiLCJleCIsImNvbmZpZ09iamVjdCIsImFsaSIsImVyciIsImluY2x1ZGVzIiwib3JpZyIsIlBhcnNlciIsImRldGFpbGVkIiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJzdHJpbmdWYWx1ZSIsIiQkdHlwZW9mIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiU3ltYm9sIiwiZm9yIiwiY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQiLCJjbG9uZSIsImRlZXBtZXJnZSIsImRlZmF1bHRBcnJheU1lcmdlIiwidGFyZ2V0Iiwic291cmNlIiwiZWxlbWVudCIsImFycmF5TWVyZ2UiLCJkZXN0aW5hdGlvbiIsInNvdXJjZUlzQXJyYXkiLCJhbGwiLCJkZWVwbWVyZ2VfMSIsIkFMSUFTIiwiRE9DIiwiTUFQIiwiUEFJUiIsIlNDQUxBUiIsIlNFUSIsIk5PREVfVFlQRSIsImlzQWxpYXMiLCJub2RlIiwiaXNEb2N1bWVudCIsImlzTWFwIiwiaXNQYWlyIiwiaXNTY2FsYXIiLCJpc1NlcSIsImlzQ29sbGVjdGlvbiIsImlzTm9kZSIsIkJSRUFLIiwiU0tJUCIsIlJFTU9WRSIsInZpc2l0IiwidmlzaXRvciIsInZpc2l0b3JfIiwiaW5pdFZpc2l0b3IiLCJ2aXNpdF8iLCJjb250ZW50cyIsImZyZWV6ZSIsImN0cmwiLCJjYWxsVmlzaXRvciIsInJlcGxhY2VOb2RlIiwiaXRlbXMiLCJjaSIsImNrIiwiY3YiLCJhc3luYyIsInZpc2l0QXN5bmMiLCJhd2FpdCIsInZpc2l0QXN5bmNfIiwiQ29sbGVjdGlvbiIsIk5vZGUiLCJWYWx1ZSIsIkFsaWFzIiwiTWFwIiwiU2NhbGFyIiwiU2VxIiwiUGFpciIsInBhcmVudCIsInB0IiwidmlzaXQkMSIsImVzY2FwZUNoYXJzIiwiISIsIiwiLCJbIiwiXSIsInsiLCJ9IiwiRGlyZWN0aXZlcyIsInlhbWwiLCJ0YWdzIiwiZG9jU3RhcnQiLCJkb2NFbmQiLCJkZWZhdWx0WWFtbCIsImRlZmF1bHRUYWdzIiwiY29weSIsImF0RG9jdW1lbnQiLCJ2ZXJzaW9uIiwiYXROZXh0RG9jdW1lbnQiLCJleHBsaWNpdCIsIm9uRXJyb3IiLCJoYW5kbGUiLCJ0YWdOYW1lIiwidmVyYmF0aW0iLCJzdWZmaXgiLCJkZWNvZGVVUklDb21wb25lbnQiLCJ0YWdTdHJpbmciLCJ0YWciLCJlbnRyaWVzIiwic3RhcnRzV2l0aCIsImNoIiwiZG9jIiwibGluZXMiLCJ0YWdFbnRyaWVzIiwidGFnTmFtZXMiLCJfa2V5Iiwic29tZSIsInRuIiwiYW5jaG9ySXNWYWxpZCIsImFuY2hvciIsInNhIiwiYW5jaG9yTmFtZXMiLCJhbmNob3JzIiwiU2V0IiwiZmluZE5ld0FuY2hvciIsImV4Y2x1ZGUiLCJoYXMiLCJhcHBseVJldml2ZXIiLCJyZXZpdmVyIiwidjAiLCJ2MSIsImRlbGV0ZSIsInRvSlMiLCJ0b0pTT04iLCJkYXRhIiwiYWxpYXNDb3VudCIsIm9uQ3JlYXRlIiwia2VlcCIsIiEhIiwiTm9kZUJhc2UiLCJkZWZpbmVQcm9wZXJ0eSIsImdldFByb3RvdHlwZU9mIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsInJhbmdlIiwibWFwQXNNYXAiLCJtYXhBbGlhc0NvdW50Iiwib25BbmNob3IiLCJtYXBLZXlXYXJuZWQiLCJ2YWx1ZXMiLCJzdXBlciIsImZvdW5kIiwiX2FyZyIsIlJlZmVyZW5jZUVycm9yIiwiZ2V0QWxpYXNDb3VudCIsIml0ZW0iLCJrYyIsInZjIiwibWF4IiwiX29uQ29tbWVudCIsIl9vbkNob21wS2VlcCIsInNyYyIsInZlcmlmeUFsaWFzT3JkZXIiLCJpbXBsaWNpdEtleSIsImlzU2NhbGFyVmFsdWUiLCJCTE9DS19GT0xERUQiLCJCTE9DS19MSVRFUkFMIiwiUExBSU4iLCJRVU9URV9ET1VCTEUiLCJRVU9URV9TSU5HTEUiLCJkZWZhdWx0VGFnUHJlZml4IiwiY3JlYXRlTm9kZSIsInNjaGVtYSIsIkJpZ0ludCIsInZhbHVlT2YiLCJhbGlhc0R1cGxpY2F0ZU9iamVjdHMiLCJvblRhZ09iaiIsInNvdXJjZU9iamVjdHMiLCJyZWYiLCJ0YWdPYmoiLCJ0IiwiZmluZCIsImlkZW50aWZ5IiwiaXRlcmF0b3IiLCJub2RlQ2xhc3MiLCJjb2xsZWN0aW9uRnJvbVBhdGgiLCJpc0ludGVnZXIiLCJrZWVwVW5kZWZpbmVkIiwiaXNFbXB0eVBhdGgiLCJkb25lIiwiaXQiLCJhZGRJbiIsInJlc3QiLCJkZWxldGVJbiIsImdldEluIiwia2VlcFNjYWxhciIsImhhc0FsbE51bGxWYWx1ZXMiLCJhbGxvd1NjYWxhciIsImV2ZXJ5IiwiY29tbWVudEJlZm9yZSIsImNvbW1lbnQiLCJoYXNJbiIsInNldEluIiwic3RyaW5naWZ5Q29tbWVudCIsImluZGVudENvbW1lbnQiLCJpbmRlbnQiLCJsaW5lQ29tbWVudCIsImVuZHNXaXRoIiwiRk9MRF9GTE9XIiwiRk9MRF9CTE9DSyIsIkZPTERfUVVPVEVEIiwiZm9sZEZsb3dMaW5lcyIsInRleHQiLCJtb2RlIiwiaW5kZW50QXRTdGFydCIsImxpbmVXaWR0aCIsIm1pbkNvbnRlbnRXaWR0aCIsIm9uRm9sZCIsIm9uT3ZlcmZsb3ciLCJlbmRTdGVwIiwiZm9sZHMiLCJlc2NhcGVkRm9sZHMiLCJvdmVyZmxvdyIsImVzY1N0YXJ0IiwiZXNjRW5kIiwiY29uc3VtZU1vcmVJbmRlbnRlZExpbmVzIiwiZm9sZCIsImdldEZvbGRPcHRpb25zIiwiaXNCbG9jayIsImNvbnRhaW5zRG9jdW1lbnRNYXJrZXIiLCJkb3VibGVRdW90ZWRTdHJpbmciLCJqc29uIiwiZG91YmxlUXVvdGVkQXNKU09OIiwibWluTXVsdGlMaW5lTGVuZ3RoIiwiZG91YmxlUXVvdGVkTWluTXVsdGlMaW5lTGVuZ3RoIiwiY29kZSIsInNpbmdsZVF1b3RlZFN0cmluZyIsInNpbmdsZVF1b3RlIiwicXVvdGVkU3RyaW5nIiwiaGFzRG91YmxlIiwiaGFzU2luZ2xlIiwicXMiLCJibG9ja0VuZE5ld2xpbmVzIiwiYmxvY2tTdHJpbmciLCJvbkNvbW1lbnQiLCJvbkNob21wS2VlcCIsImJsb2NrUXVvdGUiLCJjb21tZW50U3RyaW5nIiwiZm9yY2VCbG9ja0luZGVudCIsImxpdGVyYWwiLCJpbmRlbnRMZW5ndGgiLCJsaW1pdCIsInN0ckxlbiIsImNob21wIiwiZW5kU3RhcnQiLCJlbmRObFBvcyIsInN0YXJ0V2l0aFNwYWNlIiwic3RhcnRFbmQiLCJzdGFydE5sUG9zIiwiaGVhZGVyIiwiZm9sZGVkVmFsdWUiLCJsaXRlcmFsRmFsbGJhY2siLCJmb2xkT3B0aW9ucyIsImJvZHkiLCJzdHJpbmdpZnlTdHJpbmciLCJpbkZsb3ciLCJzcyIsIl9zdHJpbmdpZnkiLCJfdHlwZSIsInBsYWluU3RyaW5nIiwiYWN0dWFsU3RyaW5nIiwiaW5kZW50U3RlcCIsImNvbXBhdCIsImRlZmF1bHRLZXlUeXBlIiwiZGVmYXVsdFN0cmluZ1R5cGUiLCJjcmVhdGVTdHJpbmdpZnlDb250ZXh0IiwiZGlyZWN0aXZlcyIsImZhbHNlU3RyIiwiZmxvd0NvbGxlY3Rpb25QYWRkaW5nIiwiaW5kZW50U2VxIiwibnVsbFN0ciIsInNpbXBsZUtleXMiLCJ0cnVlU3RyIiwidG9TdHJpbmdPcHRpb25zIiwiY29sbGVjdGlvblN0eWxlIiwicmVwZWF0IiwicmVzb2x2ZWRBbGlhc2VzIiwicHJvcHMiLCJ0ZXN0TWF0Y2giLCJzdHJpbmdpZnlQcm9wcyIsIndhcm4iLCJsb2dMZXZlbCIsIndhcm5pbmciLCJtZXJnZSIsImRlc2NyaXB0aW9uIiwiYWRkVG9KU01hcCIsImFkZE1lcmdlVG9KU01hcCIsIm1lcmdlVmFsdWUiLCJhZGRQYWlyVG9KU01hcCIsImpzS2V5IiwianNWYWx1ZSIsInN0cmluZ0tleSIsInN0ckN0eCIsImluU3RyaW5naWZ5S2V5Iiwic3RyS2V5IiwianNvblN0ciIsImNyZWF0ZVBhaXIiLCJzdHJpbmdpZnlQYWlyIiwiYWxsTnVsbFZhbHVlcyIsImtleUNvbW1lbnQiLCJleHBsaWNpdEtleSIsImtleUNvbW1lbnREb25lIiwiY2hvbXBLZWVwIiwidnNiIiwidmNiIiwidmFsdWVDb21tZW50IiwidmFsdWVDb21tZW50RG9uZSIsInNwYWNlQmVmb3JlIiwiZmxvdyIsIndzIiwidmFsdWVTdHIiLCJjcyIsInZzMCIsIm5sMCIsImhhc05ld2xpbmUiLCJoYXNQcm9wc0xpbmUiLCJzcDAiLCJzdHJpbmdpZnlDb2xsZWN0aW9uIiwiY29sbGVjdGlvbiIsInN0cmluZ2lmeUZsb3dDb2xsZWN0aW9uIiwic3RyaW5naWZ5QmxvY2tDb2xsZWN0aW9uIiwiYmxvY2tJdGVtUHJlZml4IiwiZmxvd0NoYXJzIiwiaXRlbUluZGVudCIsIml0ZW1DdHgiLCJpayIsImFkZENvbW1lbnRCZWZvcmUiLCJmY1BhZGRpbmciLCJyZXFOZXdsaW5lIiwibGluZXNBdFZhbHVlIiwiaXYiLCJzdW0iLCJpYyIsInRyaW1TdGFydCIsImZpbmRQYWlyIiwiWUFNTE1hcCIsInJlcGxhY2VyIiwic29ydE1hcEVudHJpZXMiLCJzb3J0IiwicGFpciIsIm92ZXJ3cml0ZSIsIl9wYWlyIiwic29ydEVudHJpZXMiLCJmaW5kSW5kZXgiLCJUeXBlIiwiWUFNTFNlcSIsImFzSXRlbUluZGV4Iiwic2VxIiwibnVsbFRhZyIsImJvb2xUYWciLCJzdHJpbmdpZnlOdW1iZXIiLCJtaW5GcmFjdGlvbkRpZ2l0cyIsImlzRmluaXRlIiwiaXNOYU4iLCJmbG9hdE5hTiIsIk5hTiIsIk5FR0FUSVZFX0lORklOSVRZIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJmbG9hdEV4cCIsInBhcnNlRmxvYXQiLCJ0b0V4cG9uZW50aWFsIiwiZmxvYXQiLCJkb3QiLCJpbnRJZGVudGlmeSIsImludFJlc29sdmUiLCJvZmZzZXQiLCJyYWRpeCIsImludEFzQmlnSW50IiwicGFyc2VJbnQiLCJpbnRTdHJpbmdpZnkiLCJpbnRPY3QiLCJfb25FcnJvciIsImludCIsImludEhleCIsInN0cmluZ2lmeUpTT04iLCJiaW5hcnkiLCJVaW50OEFycmF5IiwiYXRvYiIsImJ1ZmZlciIsImNoYXJDb2RlQXQiLCJidWYiLCJidG9hIiwicyIsImZyb21DaGFyQ29kZSIsImNlaWwiLCJyZXNvbHZlUGFpcnMiLCJjbiIsImNyZWF0ZVBhaXJzIiwiaXRlcmFibGUiLCJwYWlycyIsIllBTUxPTWFwIiwiYmluZCIsIm9tYXAiLCJzZWVuS2V5cyIsImJvb2xTdHJpbmdpZnkiLCJib29sT2JqIiwidHJ1ZVRhZyIsImZhbHNlVGFnIiwic2lnbiIsImludEJpbiIsIllBTUxTZXQiLCJrZWVwUGFpciIsInBhcnNlU2V4YWdlc2ltYWwiLCJhc0JpZ0ludCIsInN0cmluZ2lmeVNleGFnZXNpbWFsIiwiXzYwIiwicGFkU3RhcnQiLCJpbnRUaW1lIiwiZmxvYXRUaW1lIiwidGltZXN0YW1wIiwieWVhciIsIm1vbnRoIiwiZGF5IiwiaG91ciIsIm1pbnV0ZSIsInNlY29uZCIsIm1pbGxpc2VjIiwiVVRDIiwidHoiLCJhYnMiLCJ0b0lTT1N0cmluZyIsInNjaGVtYXMiLCJzY2hlbWEkMSIsInNjaGVtYSQyIiwidGFnc0J5TmFtZSIsImJvb2wiLCJjb3JlS25vd25UYWdzIiwidGFnOnlhbWwub3JnLDIwMDI6YmluYXJ5IiwidGFnOnlhbWwub3JnLDIwMDI6bWVyZ2UiLCJ0YWc6eWFtbC5vcmcsMjAwMjpvbWFwIiwidGFnOnlhbWwub3JnLDIwMDI6cGFpcnMiLCJ0YWc6eWFtbC5vcmcsMjAwMjpzZXQiLCJ0YWc6eWFtbC5vcmcsMjAwMjp0aW1lc3RhbXAiLCJnZXRUYWdzIiwiY3VzdG9tVGFncyIsInNjaGVtYU5hbWUiLCJhZGRNZXJnZVRhZyIsInNjaGVtYVRhZ3MiLCJzb3J0TWFwRW50cmllc0J5S2V5IiwiYiIsIlNjaGVtYSIsInJlc29sdmVLbm93blRhZ3MiLCJ0b1N0cmluZ0RlZmF1bHRzIiwia25vd25UYWdzIiwiRG9jdW1lbnQiLCJlcnJvcnMiLCJ3YXJuaW5ncyIsIl9yZXBsYWNlciIsImtlZXBTb3VyY2VUb2tlbnMiLCJwcmV0dHlFcnJvcnMiLCJzdHJpY3QiLCJzdHJpbmdLZXlzIiwidW5pcXVlS2V5cyIsIl9kaXJlY3RpdmVzIiwic2V0U2NoZW1hIiwiYXNzZXJ0Q29sbGVjdGlvbiIsImNyZWF0ZUFsaWFzIiwiYXNTdHIiLCJhbmNob3JQcmVmaXgiLCJzZXRBbmNob3JzIiwiYWxpYXNPYmplY3RzIiwicHJldkFuY2hvcnMiLCJzdiIsImpzb25BcmciLCJzdHJpbmdpZnlEb2N1bWVudCIsImhhc0RpcmVjdGl2ZXMiLCJjb250ZW50Q29tbWVudCIsImRjIiwiWUFNTEVycm9yIiwicG9zIiwibWVzc2FnZSIsIllBTUxQYXJzZUVycm9yIiwiWUFNTFdhcm5pbmciLCJwcmV0dGlmeUVycm9yIiwibGMiLCJsaW5lUG9zIiwiY29sIiwibGluZVN0ciIsImxpbmVTdGFydHMiLCJwb2ludGVyIiwicmVzb2x2ZVByb3BzIiwidG9rZW5zIiwiaW5kaWNhdG9yIiwicGFyZW50SW5kZW50Iiwic3RhcnRPbk5ld2xpbmUiLCJhdE5ld2xpbmUiLCJoYXNTcGFjZSIsImNvbW1lbnRTZXAiLCJyZXFTcGFjZSIsInRhYiIsIm5ld2xpbmVBZnRlclByb3AiLCJjb21tYSIsInRva2VuIiwiY2IiLCJjb250YWluc05ld2xpbmUiLCJzdCIsImZsb3dJbmRlbnRDaGVjayIsImZjIiwibWFwSW5jbHVkZXMiLCJzZWFyY2giLCJpc0VxdWFsIiwic3RhcnRDb2xNc2ciLCJyZXNvbHZlRW5kIiwiYmxvY2tNc2ciLCJyZXNvbHZlQ29sbGVjdGlvbiIsIkNOIiwiY29sbCIsImNvbXBvc2VOb2RlIiwiY29tcG9zZUVtcHR5Tm9kZSIsImJtIiwiY29sbEl0ZW0iLCJhdFJvb3QiLCJjb21tZW50RW5kIiwia2V5UHJvcHMiLCJhdEtleSIsImtleVN0YXJ0Iiwia2V5Tm9kZSIsInZhbHVlUHJvcHMiLCJ2YWx1ZU5vZGUiLCJzcmNUb2tlbiIsImJzIiwiZmNOYW1lIiwicHJldkl0ZW1Db21tZW50IiwibG9vcCIsImVuZFJhbmdlIiwiZXhwZWN0ZWRFbmQiLCJjZSIsImVlIiwiY2VQb3MiLCJDb2xsIiwicmVzb2x2ZUJsb2NrU2NhbGFyIiwic2NhbGFyIiwidHMiLCJmaXJzdCIsImxpbmUwIiwiY2hvbXBTdGFydCIsImNvbnRlbnQiLCJ0cmltSW5kZW50IiwiY29udGVudFN0YXJ0IiwicHJldk1vcmVJbmRlbnRlZCIsImNybGYiLCJyZXNvbHZlRmxvd1NjYWxhciIsInJlbCIsImJhZENoYXIiLCJmb2xkTGluZXMiLCJjYyIsImVzY2FwZUNvZGVzIiwidSIsIlUiLCJvayIsInJhdyIsImZyb21Db2RlUG9pbnQiLCJ3c1N0YXJ0IiwidmFsdWVFbmQiLCJsYXN0SW5kZXgiLCIwIiwiciIsIk4iLCJMIiwiUCIsIiAiLCJcIiIsIi8iLCJcXCIsIlx0IiwiY29tcG9zZVNjYWxhciIsInRhZ1Rva2VuIiwibWF0Y2hXaXRoVGVzdCIsImt0IiwiaXNTcmNUb2tlbiIsImV4cFR5cGUiLCJubCIsImxhc3RQcm9wIiwiYmVmb3JlIiwiZ2V0RXJyb3JQb3MiLCJwYXJzZVByZWx1ZGUiLCJwcmVsdWRlIiwiYXRDb21tZW50IiwiYWZ0ZXJFbXB0eUxpbmUiLCJDb21wb3NlciIsImF0RGlyZWN0aXZlcyIsImRlY29yYXRlIiwiYWZ0ZXJEb2MiLCJzdHJlYW1JbmZvIiwiY29tcG9zZSIsImZvcmNlRG9jIiwiZW5kT2Zmc2V0IiwieWllbGQiLCJjb21wb3NlRG9jIiwiY29udGVudEVuZCIsImFkZEVuZHRvQmxvY2tQcm9wcyIsInNldEZsb3dTY2FsYXJWYWx1ZSIsInRvayIsIm9hIiwic3RyaW5naWZ5VG9rZW4iLCJzdHJpbmdpZnlJdGVtIiwiY3N0IiwiX3Zpc2l0IiwiZmllbGQiLCJpdGVtQXRQYXRoIiwicGFyZW50Q29sbGVjdGlvbiIsIkJPTSIsInRva2VuVHlwZSIsImNvbnRleHQiLCJoZSIsImhlYWQiLCJhZnRlcktleSIsInNldEJsb2NrU2NhbGFyVmFsdWUiLCJpc0VtcHR5IiwiaGV4RGlnaXRzIiwidGFnQ2hhcnMiLCJmbG93SW5kaWNhdG9yQ2hhcnMiLCJpbnZhbGlkQW5jaG9yQ2hhcnMiLCJpc05vdEFuY2hvckNoYXIiLCJMZXhlciIsImF0RW5kIiwiYmxvY2tTY2FsYXJJbmRlbnQiLCJibG9ja1NjYWxhcktlZXAiLCJmbG93S2V5IiwiZmxvd0xldmVsIiwiaW5kZW50TmV4dCIsImluZGVudFZhbHVlIiwibGluZUVuZFBvcyIsImxleCIsImluY29tcGxldGUiLCJoYXNDaGFycyIsInBhcnNlTmV4dCIsImF0TGluZUVuZCIsImNvbnRpbnVlU2NhbGFyIiwiZHQiLCJnZXRMaW5lIiwic2V0TmV4dCIsInN0YXRlIiwicGVlayIsInBhcnNlU3RyZWFtIiwicGFyc2VMaW5lU3RhcnQiLCJwYXJzZUJsb2NrU3RhcnQiLCJwYXJzZURvY3VtZW50IiwicGFyc2VGbG93Q29sbGVjdGlvbiIsInBhcnNlUXVvdGVkU2NhbGFyIiwicGFyc2VCbG9ja1NjYWxhciIsInBhcnNlUGxhaW5TY2FsYXIiLCJwdXNoQ291bnQiLCJkaXJFbmQiLCJwdXNoU3BhY2VzIiwicHVzaE5ld2xpbmUiLCJzcCIsImNoMCIsImNoMSIsInB1c2hJbmRpY2F0b3JzIiwicHVzaFVudGlsIiwicGFyc2VCbG9ja1NjYWxhckhlYWRlciIsInF1b3RlIiwicWIiLCJwdXNoVG9JbmRleCIsImxhc3RDaGFyIiwiYWxsb3dFbXB0eSIsInB1c2hUYWciLCJhbGxvd1RhYnMiLCJMaW5lQ291bnRlciIsImFkZE5ld0xpbmUiLCJsb3ciLCJoaWdoIiwibWlkIiwiaW5jbHVkZXNUb2tlbiIsImxpc3QiLCJmaW5kTm9uRW1wdHlJbmRleCIsImlzRmxvd1Rva2VuIiwiZ2V0UHJldlByb3BzIiwiZ2V0Rmlyc3RLZXlTdGFydFByb3BzIiwiZml4Rmxvd1NlcUl0ZW1zIiwib25OZXdMaW5lIiwiYXROZXdMaW5lIiwiYXRTY2FsYXIiLCJvbktleUxpbmUiLCJzdGFjayIsImxleGVyIiwibGV4ZW1lIiwic3RlcCIsInNvdXJjZVRva2VuIiwidG9wIiwic3RyZWFtIiwiZG9jdW1lbnQiLCJibG9ja1NjYWxhciIsImJsb2NrTWFwIiwiYmxvY2tTZXF1ZW5jZSIsImZsb3dDb2xsZWN0aW9uIiwiZG9jdW1lbnRFbmQiLCJsaW5lRW5kIiwiYnYiLCJzdGFydEJsb2NrVmFsdWUiLCJhdEluZGVudGVkQ29tbWVudCIsImF0TWFwSW5kZW50IiwiYXROZXh0SXRlbSIsImZzIiwiZmxvd1NjYWxhciIsInBhcnNlT3B0aW9ucyIsImxpbmVDb3VudGVyIiwicGFyc2VBbGxEb2N1bWVudHMiLCJwYXJzZXIiLCJjb21wb3NlciIsImRvY3MiLCJlbXB0eSIsIl9kb2MiLCJfcmV2aXZlciIsInJvdW5kIiwicmVnZXhwQ29kZSIsImdldEVzbUV4cG9ydE5hbWUiLCJnZXRQcm9wZXJ0eSIsInNhZmVTdHJpbmdpZnkiLCJhZGRDb2RlQXJnIiwibmlsIiwiX0NvZGUiLCJOYW1lIiwiSURFTlRJRklFUiIsIl9Db2RlT3JOYW1lIiwiZW1wdHlTdHIiLCJuYW1lcyIsIl9pdGVtcyIsIl9hIiwiX3N0ciIsIl9uYW1lcyIsInN0cnMiLCJwbHVzIiwiZXhwciIsIm9wdGltaXplIiwic3RyQ29uY2F0IiwiYzEiLCJjMiIsInJ4IiwiVmFsdWVTY29wZSIsIlZhbHVlU2NvcGVOYW1lIiwiU2NvcGUiLCJ2YXJLaW5kcyIsIlVzZWRWYWx1ZVN0YXRlIiwiY29kZV8xIiwiVmFsdWVFcnJvciIsImNvbnN0IiwidmFyIiwicHJlZml4ZXMiLCJfcHJlZml4ZXMiLCJfcGFyZW50IiwidG9OYW1lIiwibmFtZU9yUHJlZml4IiwiX25ld05hbWUiLCJfbmFtZUdyb3VwIiwiX2IiLCJuYW1lU3RyIiwic2V0VmFsdWUiLCJwcm9wZXJ0eSIsIml0ZW1JbmRleCIsInNjb3BlUGF0aCIsIl92YWx1ZXMiLCJfc2NvcGUiLCJzY29wZSIsIl9uIiwidmFsdWVLZXkiLCJ2cyIsIl9uYW1lIiwiZ2V0VmFsdWUiLCJrZXlPclJlZiIsInNjb3BlUmVmcyIsInNjb3BlTmFtZSIsIl9yZWR1Y2VWYWx1ZXMiLCJzY29wZUNvZGUiLCJ1c2VkVmFsdWVzIiwiZ2V0Q29kZSIsInZhbHVlQ29kZSIsIm5hbWVTZXQiLCJTdGFydGVkIiwiZGVmIiwiZXM1IiwiQ29tcGxldGVkIiwib3IiLCJub3QiLCJDb2RlR2VuIiwib3BlcmF0b3JzIiwic2NvcGVfMSIsInJlcXVpcmUkJDEiLCJjb2RlXzIiLCJzY29wZV8yIiwiR1QiLCJHVEUiLCJMVCIsIkxURSIsIkVRIiwiTkVRIiwiTk9UIiwiT1IiLCJBTkQiLCJBREQiLCJvcHRpbWl6ZU5vZGVzIiwib3B0aW1pemVOYW1lcyIsIl9jb25zdGFudHMiLCJEZWYiLCJ2YXJLaW5kIiwicmhzIiwicmVuZGVyIiwiY29uc3RhbnRzIiwib3B0aW1pemVFeHByIiwiQXNzaWduIiwibGhzIiwic2lkZUVmZmVjdHMiLCJhZGRFeHByTmFtZXMiLCJBc3NpZ25PcCIsIm9wIiwiTGFiZWwiLCJsYWJlbCIsIkJyZWFrIiwiVGhyb3ciLCJBbnlDb2RlIiwiUGFyZW50Tm9kZSIsIm5vZGVzIiwic3VidHJhY3ROYW1lcyIsImFkZE5hbWVzIiwiQmxvY2tOb2RlIiwiUm9vdCIsIkVsc2UiLCJraW5kIiwiSWYiLCJjb25kaXRpb24iLCJlbHNlIiwibnMiLCJjb25kIiwiRm9yIiwiRm9yTG9vcCIsIml0ZXJhdGlvbiIsIkZvclJhbmdlIiwiRm9ySXRlciIsIkZ1bmMiLCJSZXR1cm4iLCJUcnkiLCJjYXRjaCIsImZpbmFsbHkiLCJDYXRjaCIsIkZpbmFsbHkiLCJyZXBsYWNlTmFtZSIsInBhciIsImV4dFNjb3BlIiwiX2Jsb2NrU3RhcnRzIiwiX2V4dFNjb3BlIiwiX25vZGVzIiwiX3Jvb3QiLCJzY29wZVZhbHVlIiwicHJlZml4T3JOYW1lIiwiZ2V0U2NvcGVWYWx1ZSIsIl9kZWYiLCJjb25zdGFudCIsIl9sZWFmTm9kZSIsIl9jb25zdGFudCIsIm9iamVjdCIsImtleVZhbHVlcyIsImlmIiwidGhlbkJvZHkiLCJlbHNlQm9keSIsIl9ibG9ja05vZGUiLCJlbmRJZiIsImVsc2VJZiIsIl9lbHNlTm9kZSIsIl9lbmRCbG9ja05vZGUiLCJfZm9yIiwiZm9yQm9keSIsImVuZEZvciIsImZvclJhbmdlIiwiZm9yT2YiLCJmb3JJbiIsIm93blByb3BlcnRpZXMiLCJicmVhayIsInJldHVybiIsInRyeSIsInRyeUJvZHkiLCJjYXRjaENvZGUiLCJmaW5hbGx5Q29kZSIsIl9jdXJyTm9kZSIsInRocm93IiwiYmxvY2siLCJub2RlQ291bnQiLCJlbmRCbG9jayIsInRvQ2xvc2UiLCJmdW5jIiwiZnVuY0JvZHkiLCJlbmRGdW5jIiwiTjEiLCJOMiIsImFuZENvZGUiLCJtYXBwZW5kIiwib3JDb2RlIiwiYW5kIiwiY2hlY2tTdHJpY3RNb2RlIiwiZ2V0RXJyb3JQYXRoIiwic2V0RXZhbHVhdGVkIiwiZXZhbHVhdGVkUHJvcHNUb05hbWUiLCJtZXJnZUV2YWx1YXRlZCIsImVhY2hJdGVtIiwiZXNjYXBlSnNvblBvaW50ZXIiLCJlc2NhcGVGcmFnbWVudCIsInVuZXNjYXBlRnJhZ21lbnQiLCJzY2hlbWFSZWZPclZhbCIsInNjaGVtYUhhc1J1bGVzIiwiY2hlY2tVbmtub3duUnVsZXMiLCJhbHdheXNWYWxpZFNjaGVtYSIsInRvSGFzaCIsImNvZGVnZW5fMSIsInNuaXBwZXRzIiwiUlVMRVMiLCJzY2hlbWFIYXNSdWxlc0J1dFJlZiIsInRvcFNjaGVtYVJlZiIsInNjaGVtYVBhdGgiLCJrZXl3b3JkIiwiJGRhdGEiLCJ1bmVzY2FwZUpzb25Qb2ludGVyIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwibWFrZU1lcmdlRXZhbHVhdGVkIiwibWVyZ2VOYW1lcyIsImdlbiIsIm1lcmdlVG9OYW1lIiwibWVyZ2VWYWx1ZXMiLCJyZXN1bHRUb05hbWUiLCJzdHJpY3RTY2hlbWEiLCJydWxlcyIsImtleXdvcmRzIiwicHMiLCJsb2dnZXIiLCJ1c2VGdW5jIiwiZGF0YVByb3AiLCJkYXRhUHJvcFR5cGUiLCJqc1Byb3BlcnR5U3ludGF4IiwiTnVtIiwibmFtZXNfMSIsInZhbEN4dCIsImluc3RhbmNlUGF0aCIsInBhcmVudERhdGEiLCJwYXJlbnREYXRhUHJvcGVydHkiLCJyb290RGF0YSIsImR5bmFtaWNBbmNob3JzIiwidkVycm9ycyIsImpzb25Qb3MiLCJqc29uTGVuIiwianNvblBhcnQiLCJleHRlbmRFcnJvcnMiLCJyZXBvcnRFeHRyYUVycm9yIiwicmVwb3J0RXJyb3IiLCJrZXl3b3JkJERhdGFFcnJvciIsImtleXdvcmRFcnJvciIsInV0aWxfMSIsImFkZEVycm9yIiwiZXJyT2JqIiwicmV0dXJuRXJyb3JzIiwiZXJycyIsInZhbGlkYXRlTmFtZSIsInNjaGVtYUVudiIsIiRhc3luYyIsIlZhbGlkYXRpb25FcnJvciIsInNjaGVtYVR5cGUiLCJjeHQiLCJlcnJvclBhdGhzIiwib3ZlcnJpZGVBbGxFcnJvcnMiLCJjb21wb3NpdGVSdWxlIiwiYWxsRXJyb3JzIiwiZXJyb3JPYmplY3RDb2RlIiwicmVzZXRFcnJvcnNDb3VudCIsImVycnNDb3VudCIsInNjaGVtYVZhbHVlIiwiZXJyb3JQYXRoIiwiZXJyU2NoZW1hUGF0aCIsInZlcmJvc2UiLCJFIiwicGFyYW1zIiwicHJvcGVydHlOYW1lIiwicGFyZW50U2NoZW1hIiwiY3JlYXRlRXJyb3JzIiwiZXJyb3JPYmplY3QiLCJpbnN0UGF0aCIsIlN0ciIsInNjaFBhdGgiLCJleHRyYUVycm9yUHJvcHMiLCJtZXNzYWdlcyIsImJvb2xTY2hlbWEiLCJib29sT3JFbXB0eVNjaGVtYSIsInRvcEJvb2xPckVtcHR5U2NoZW1hIiwiZXJyb3JzXzEiLCJib29sRXJyb3IiLCJmYWxzZVNjaGVtYUVycm9yIiwic2NoZW1hQ29kZSIsInZhbGlkIiwiZ2V0UnVsZXMiLCJpc0pTT05UeXBlIiwianNvblR5cGVzIiwiZ3JvdXBzIiwidHlwZXMiLCJpbnRlZ2VyIiwicG9zdCIsImFwcGxpY2FiaWxpdHkiLCJzaG91bGRVc2VSdWxlIiwic2hvdWxkVXNlR3JvdXAiLCJzY2hlbWFIYXNSdWxlc0ZvclR5cGUiLCJncm91cCIsInJ1bGUiLCJkZWZpbml0aW9uIiwiaW1wbGVtZW50cyIsImt3ZCIsImRhdGFUeXBlIiwicmVwb3J0VHlwZUVycm9yIiwiY2hlY2tEYXRhVHlwZXMiLCJjaGVja0RhdGFUeXBlIiwiY29lcmNlQW5kQ2hlY2tEYXRhVHlwZSIsImdldEpTT05UeXBlcyIsImdldFNjaGVtYVR5cGVzIiwiRGF0YVR5cGUiLCJydWxlc18xIiwiYXBwbGljYWJpbGl0eV8xIiwicmVxdWlyZSQkMyIsInJlcXVpcmUkJDQiLCJudWxsYWJsZSIsImNvZXJjZVR5cGVzIiwiY29lcmNlVG8iLCJDT0VSQ0lCTEUiLCJjaGVja1R5cGVzIiwid3JvbmdUeXBlIiwic3RyaWN0TnVtYmVycyIsIldyb25nIiwiY29lcmNlRGF0YSIsImNvZXJjZWQiLCJhc3NpZ25QYXJlbnREYXRhIiwidHlwZUVycm9yIiwic3RyaWN0TnVtcyIsImNvcnJlY3QiLCJDb3JyZWN0IiwibnVtQ29uZCIsIl9jb25kIiwiZGF0YVR5cGVzIiwibm90T2JqIiwiYXNzaWduRGVmYXVsdHMiLCJhc3NpZ25EZWZhdWx0IiwiY2hpbGREYXRhIiwidXNlRGVmYXVsdHMiLCJ0eSIsInByb3BlcnRpZXMiLCJzY2giLCJ2YWxpZGF0ZVVuaW9uIiwidmFsaWRhdGVBcnJheSIsInVzZVBhdHRlcm4iLCJjYWxsVmFsaWRhdGVDb2RlIiwic2NoZW1hUHJvcGVydGllcyIsImFsbFNjaGVtYVByb3BlcnRpZXMiLCJub1Byb3BlcnR5SW5EYXRhIiwiaXNPd25Qcm9wZXJ0eSIsImhhc1Byb3BGdW5jIiwicmVwb3J0TWlzc2luZ1Byb3AiLCJjaGVja01pc3NpbmdQcm9wIiwiY2hlY2tSZXBvcnRNaXNzaW5nUHJvcCIsInV0aWxfMiIsIm5ld1JlZ0V4cCIsInNldFBhcmFtcyIsIm1pc3NpbmdQcm9wZXJ0eSIsIm1pc3NpbmciLCJwcm9wZXJ0eUluRGF0YSIsInNjaGVtYU1hcCIsInBhc3NTY2hlbWEiLCJkYXRhQW5kU2NoZW1hIiwiZHluYW1pY1JlZiIsInBhdHRlcm4iLCJ1bmljb2RlUmVnRXhwIiwicmVnRXhwIiwidmFsaWRBcnIiLCJ2YWxpZGF0ZUl0ZW1zIiwibm90VmFsaWQiLCJzdWJzY2hlbWEiLCJhbHdheXNWYWxpZCIsInVuZXZhbHVhdGVkIiwic2NoVmFsaWQiLCJfc2NoIiwic2NoQ3h0Iiwic2NoZW1hUHJvcCIsIm1lcmdlZCIsIm1lcmdlVmFsaWRFdmFsdWF0ZWQiLCJyZXNldCIsInZhbGlkYXRlS2V5d29yZFVzYWdlIiwiZnVuY0tleXdvcmRDb2RlIiwibWFjcm9LZXl3b3JkQ29kZSIsIm1vZGlmeURhdGEiLCJ1c2VLZXl3b3JkIiwibWFjcm9TY2hlbWEiLCJtYWNybyIsInNjaGVtYVJlZiIsInZhbGlkYXRlU2NoZW1hIiwicGFzcyIsImNoZWNrQXN5bmNLZXl3b3JkIiwidmFsaWRhdGUiLCJjb21waWxlIiwidmFsaWRhdGVSZWYiLCJhc3NpZ25WYWxpZCIsIl9hd2FpdCIsInBhc3NDeHQiLCJwYXNzQ29udGV4dCIsIm1vZGlmeWluZyIsInJlcG9ydEVycnMiLCJibG9jayRkYXRhIiwicnVsZUVycnMiLCJ2YWxpZGF0ZUVycnMiLCJhZGRFcnJzIiwidmFsaWRTY2hlbWFUeXBlIiwiYWxsb3dVbmRlZmluZWQiLCJkZXBzIiwiZGVwZW5kZW5jaWVzIiwiZXJyb3JzVGV4dCIsImV4dGVuZFN1YnNjaGVtYU1vZGUiLCJleHRlbmRTdWJzY2hlbWFEYXRhIiwiZ2V0U3Vic2NoZW1hIiwiZHBUeXBlIiwiZGF0YVBhdGhBcnIiLCJkYXRhQ29udGV4dFByb3BzIiwiX25leHREYXRhIiwiZGF0YUxldmVsIiwiZGVmaW5lZFByb3BlcnRpZXMiLCJkYXRhTmFtZXMiLCJqdGREaXNjcmltaW5hdG9yIiwianRkTWV0YWRhdGEiLCJmYXN0RGVlcEVxdWFsIiwiZXF1YWwiLCJ0cmF2ZXJzZSIsImpzb25TY2hlbWFUcmF2ZXJzZU1vZHVsZSIsIl90cmF2ZXJzZSIsInByZSIsImpzb25QdHIiLCJyb290U2NoZW1hIiwicGFyZW50SnNvblB0ciIsInBhcmVudEtleXdvcmQiLCJrZXlJbmRleCIsImFycmF5S2V5d29yZHMiLCJwcm9wc0tleXdvcmRzIiwiZXNjYXBlSnNvblB0ciIsImFsbEtleXMiLCJza2lwS2V5d29yZHMiLCJhZGRpdGlvbmFsSXRlbXMiLCJjb250YWlucyIsImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiwicHJvcGVydHlOYW1lcyIsInRoZW4iLCJhbGxPZiIsImFueU9mIiwib25lT2YiLCIkZGVmcyIsImRlZmluaXRpb25zIiwicGF0dGVyblByb3BlcnRpZXMiLCJlbnVtIiwicmVxdWlyZWQiLCJtYXhpbXVtIiwibWluaW11bSIsImV4Y2x1c2l2ZU1heGltdW0iLCJleGNsdXNpdmVNaW5pbXVtIiwibXVsdGlwbGVPZiIsIm1heExlbmd0aCIsIm1pbkxlbmd0aCIsIm1heEl0ZW1zIiwibWluSXRlbXMiLCJ1bmlxdWVJdGVtcyIsIm1heFByb3BlcnRpZXMiLCJtaW5Qcm9wZXJ0aWVzIiwiZ2V0U2NoZW1hUmVmcyIsInJlc29sdmVVcmwiLCJub3JtYWxpemVJZCIsIl9nZXRGdWxsUGF0aCIsImdldEZ1bGxQYXRoIiwiaW5saW5lUmVmIiwiU0lNUExFX0lOTElORUQiLCJSRUZfS0VZV09SRFMiLCJoYXNSZWYiLCJjb3VudEtleXMiLCJJbmZpbml0eSIsIlRSQUlMSU5HX1NMQVNIX0hBU0giLCJBTkNIT1IiLCJyZXNvbHZlciIsImJhc2VJZCIsImlkIiwic2VyaWFsaXplIiwic2NoZW1hSWQiLCJ1cmlSZXNvbHZlciIsImJhc2VJZHMiLCJzY2hJZCIsInBhdGhQcmVmaXgiLCJsb2NhbFJlZnMiLCJzY2hlbWFSZWZzIiwiZnVsbFBhdGgiLCJpbm5lckJhc2VJZCIsImFkZFJlZiIsIl9yZXNvbHZlIiwiYW1iaWd1b3MiLCJzY2hPclJlZiIsInJlZnMiLCJjaGVja0FtYmlndW9zUmVmIiwiYWRkQW5jaG9yIiwiJGFuY2hvciIsIiRkeW5hbWljQW5jaG9yIiwic2NoMSIsInNjaDIiLCJnZXREYXRhIiwiS2V5d29yZEN4dCIsInZhbGlkYXRlRnVuY3Rpb25Db2RlIiwiYm9vbFNjaGVtYV8xIiwiZGF0YVR5cGVfMSIsImRhdGFUeXBlXzIiLCJkZWZhdWx0c18xIiwia2V5d29yZF8xIiwic3Vic2NoZW1hXzEiLCJyZXF1aXJlJCQ1IiwicmVxdWlyZSQkNiIsInJlcXVpcmUkJDciLCJyZXNvbHZlXzEiLCJyZXF1aXJlJCQ4IiwicmVxdWlyZSQkOSIsInJlcXVpcmUkJDEwIiwiaXNTY2hlbWFPYmoiLCJjaGVja0tleXdvcmRzIiwic2NoZW1hQ3h0SGFzUnVsZXMiLCJ0b3BTY2hlbWFPYmpDb2RlIiwidmFsaWRhdGVGdW5jdGlvbiIsIiRjb21tZW50IiwiY29tbWVudEtleXdvcmQiLCJjaGVja05vRGVmYXVsdCIsInJlc2V0RXZhbHVhdGVkIiwiZXZhbHVhdGVkIiwidHlwZUFuZEtleXdvcmRzIiwicmV0dXJuUmVzdWx0cyIsImFzc2lnbkV2YWx1YXRlZCIsInRyYWNrRXJyb3JzIiwic3VjY2Vzc0FjdGlvbiIsImZhaWxBY3Rpb24iLCJmYWlsUmVzdWx0IiwiZmFpbCIsImZhaWwkZGF0YSIsImludmFsaWQkZGF0YSIsImFwcGVuZCIsImVycm9yUGFyYW1zIiwiX2Vycm9yIiwiJGRhdGFFcnJvciIsImNvZGVCbG9jayIsIiRkYXRhVmFsaWQiLCJjaGVjayRkYXRhIiwidmFsaWRhdGVTY2hlbWFSZWYiLCJhcHBsIiwibmV4dENvbnRleHQiLCJzdWJzY2hlbWFDb2RlIiwic2NoZW1hQ3h0IiwiSlNPTl9QT0lOVEVSIiwiUkVMQVRJVkVfSlNPTl9QT0lOVEVSIiwiZnVuY1NvdXJjZVVybCIsInN1YlNjaGVtYU9iakNvZGUiLCJjaGVja1JlZnNBbmRLZXl3b3JkcyIsIiRyZWYiLCJpZ25vcmVLZXl3b3Jkc1dpdGhSZWYiLCJqdGQiLCJzY2hlbWFLZXl3b3JkcyIsInJvb3ROYW1lIiwidHlwZUVycm9ycyIsImNoZWNrU3RyaWN0VHlwZXMiLCJtZXRhIiwic3RyaWN0VHlwZXMiLCJjaGVja0NvbnRleHRUeXBlcyIsImluY2x1ZGVzVHlwZSIsInN0cmljdFR5cGVzRXJyb3IiLCJuYXJyb3dTY2hlbWFUeXBlcyIsIndpdGhUeXBlcyIsImFsbG93VW5pb25UeXBlcyIsImNoZWNrS2V5d29yZFR5cGVzIiwiaGFzQXBwbGljYWJsZVR5cGUiLCJrd2RUIiwic2NoVHMiLCJncm91cEtleXdvcmRzIiwia2V5d29yZENvZGUiLCJpdGVyYXRlS2V5d29yZHMiLCJydWxlVHlwZSIsImpzb25Qb2ludGVyIiwibWF0Y2hlcyIsImVycm9yTXNnIiwic2VnbWVudCIsInBvaW50ZXJUeXBlIiwidmFsaWRhdGlvbl9lcnJvciIsImFqdiIsInZhbGlkYXRpb24iLCJyZWZfZXJyb3IiLCJNaXNzaW5nUmVmRXJyb3IiLCJtaXNzaW5nUmVmIiwibWlzc2luZ1NjaGVtYSIsInJlc29sdmVTY2hlbWEiLCJnZXRDb21waWxpbmdTY2hlbWEiLCJyZXNvbHZlUmVmIiwiU2NoZW1hRW52IiwidmFsaWRhdGlvbl9lcnJvcl8xIiwidmFsaWRhdGVfMSIsImNvbXBpbGVTY2hlbWEiLCJzY2hPckZ1bmMiLCJpbmxpbmVSZWZzIiwiUFJFVkVOVF9TQ09QRV9DSEFOR0UiLCJyb290SWQiLCJfVmFsaWRhdGlvbkVycm9yIiwic291cmNlQ29kZSIsIl9jb21waWxhdGlvbnMiLCJ2YWxpZGF0ZUNvZGUiLCJGdW5jdGlvbiIsInNjb3BlVmFsdWVzIiwiZHluYW1pY1Byb3BzIiwiZHluYW1pY0l0ZW1zIiwic2NoRW52IiwiczEiLCJzMiIsInJlZlBhdGgiLCJnZXRKc29uUG9pbnRlciIsInBhcnNlZFJlZiIsImZyYWdtZW50IiwicGFydCIsInBhcnRTY2hlbWEiLCJIRVgiLCJzY29wZWRDaGFycyIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIkEiLCJCIiwiQyIsIkQiLCJGIiwiSVBWNF9SRUciLCJSRFMxIiwiUkRTMiIsIlJEUzMiLCJSRFM1Iiwibm9ybWFsaXplSVB2NCIsImhvc3QiLCJhZGRyZXNzIiwiZmluZFRva2VuIiwib3V0Iiwic2tpcCIsImlzSVBWNCIsInN0cmluZ0FycmF5VG9IZXhTdHJpcHBlZCIsImtlZXBaZXJvIiwiYWNjIiwic3RyaXAiLCJub3JtYWxpemVJUHY2IiwiaXNJUFY2IiwiaXB2NiIsInRva2VuQ291bnQiLCJ6b25lIiwiaXNab25lIiwiZW5kaXB2NkVuY291bnRlcmVkIiwiZW5kSXB2NiIsImNvbnN1bWUiLCJoZXgiLCJjdXJzb3IiLCJuZXdIb3N0IiwiZXNjYXBlZEhvc3QiLCJpbmQiLCJ1dGlscyIsInJlY29tcG9zZUF1dGhvcml0eSIsImNvbXBvbmVudHMiLCJ1cmlUb2tlbnMiLCJ1c2VyaW5mbyIsInVuZXNjYXBlIiwiaXBWNHJlcyIsImlwVjZyZXMiLCJwb3J0Iiwibm9ybWFsaXplQ29tcG9uZW50RW5jb2RpbmciLCJlc2MiLCJlc2NhcGUiLCJzY2hlbWUiLCJxdWVyeSIsInJlbW92ZURvdFNlZ21lbnRzIiwiaW0iLCJVVUlEX1JFRyIsIlVSTl9SRUciLCJpc1NlY3VyZSIsIndzQ29tcG9uZW50cyIsInNlY3VyZSIsImh0dHBQYXJzZSIsImh0dHBTZXJpYWxpemUiLCJodHRwIiwiZG9tYWluSG9zdCIsInJlc291cmNlTmFtZSIsIlNDSEVNRVMiLCJodHRwcyIsIndzcyIsInVybiIsInVybkNvbXBvbmVudHMiLCJ1cm5TY2hlbWUiLCJzY2hlbWVIYW5kbGVyIiwibmlkIiwibnNzIiwidXJpQ29tcG9uZW50cyIsInNraXBFc2NhcGUiLCJza2lwTm9ybWFsaXplIiwidXJuOnV1aWQiLCJ1dWlkQ29tcG9uZW50cyIsInV1aWQiLCJ0b2xlcmFudCIsInNjaGVtZXMiLCJoZXhMb29rVXAiLCJfdiIsIlVSSV9QQVJTRSIsImZhc3RVcmkiLCJ1cmkiLCJiYXNlVVJJIiwicmVsYXRpdmVVUkkiLCJzY2hlbWVsZXNzT3B0aW9ucyIsInJlc29sdmVDb21wb25lbnRzIiwidXJpQSIsInVyaUIiLCJza2lwTm9ybWFsaXphdGlvbiIsImNtcHRzIiwicmVmZXJlbmNlIiwiYXV0aG9yaXR5IiwiYWJzb2x1dGVQYXRoIiwicGFyc2VkIiwiZ290RW5jb2RpbmciLCJpc0lQIiwiaXB2NHJlc3VsdCIsImlwdjZyZXN1bHQiLCJ1bmljb2RlU3VwcG9ydCIsIlVSTCIsImRvbWFpblRvQVNDSUkiLCJlbmNvZGVVUkkiLCJmYXN0VXJpTW9kdWxlIiwicmVmX2Vycm9yXzEiLCJjb21waWxlXzEiLCJjb2RlZ2VuXzIiLCIkZGF0YVJlZlNjaGVtYSIsInVyaV8xIiwiZGVmYXVsdFJlZ0V4cCIsIk1FVEFfSUdOT1JFX09QVElPTlMiLCJFWFRfU0NPUEVfTkFNRVMiLCJyZW1vdmVkT3B0aW9ucyIsImVycm9yRGF0YVBhdGgiLCJqc29uUG9pbnRlcnMiLCJleHRlbmRSZWZzIiwibWlzc2luZ1JlZnMiLCJwcm9jZXNzQ29kZSIsInN0cmljdERlZmF1bHRzIiwic3RyaWN0S2V5d29yZHMiLCJ1bmtub3duRm9ybWF0cyIsImNhY2hlIiwiYWp2RXJyb3JzIiwiZGVwcmVjYXRlZE9wdGlvbnMiLCJ1bmljb2RlIiwiTUFYX0VYUFJFU1NJT04iLCJBanYiLCJmb3JtYXRzIiwiX2xvYWRpbmciLCJfY2FjaGUiLCJfb3B0eiIsIl9jIiwiX2QiLCJfZiIsIl9lIiwiX2giLCJfZyIsIl9rIiwiX2oiLCJzdHJpY3RUdXBsZXMiLCJfbSIsIl9sIiwic3RyaWN0UmVxdWlyZWQiLCJfcCIsIl9vIiwibG9vcFJlcXVpcmVkIiwiX3EiLCJsb29wRW51bSIsIl9yIiwiX3MiLCJfdCIsIl91IiwiYWRkVXNlZFNjaGVtYSIsIl93IiwiX3giLCJ2YWxpZGF0ZUZvcm1hdHMiLCJfeSIsIl96IiwiaW50MzJyYW5nZSIsIl8wIiwiZm9ybWF0T3B0Iiwibm9Mb2dzIiwiY2hlY2tPcHRpb25zIiwiX21ldGFPcHRzIiwibWV0YU9wdHMiLCJhZGRGb3JtYXQiLCJfYWRkVm9jYWJ1bGFyaWVzIiwiX2FkZERlZmF1bHRNZXRhU2NoZW1hIiwiZGVmcyIsImFkZFZvY2FidWxhcnkiLCJhZGRLZXl3b3JkIiwiYWRkTWV0YVNjaGVtYSIsIm9wdHNTY2hlbWFzIiwiYWRkU2NoZW1hIiwiX2RhdGFSZWZTY2hlbWEiLCIkaWQiLCJkZWZhdWx0TWV0YSIsInNjaGVtYUtleVJlZiIsImdldFNjaGVtYSIsIl9tZXRhIiwiX2FkZFNjaGVtYSIsIl9jb21waWxlU2NoZW1hRW52IiwiY29tcGlsZUFzeW5jIiwibG9hZFNjaGVtYSIsInJ1bkNvbXBpbGVBc3luYyIsIl9zY2hlbWEiLCJsb2FkTWV0YVNjaGVtYSIsIiRzY2hlbWEiLCJfY29tcGlsZUFzeW5jIiwiX3ZhbGlkYXRlU2NoZW1hIiwiX2NoZWNrVW5pcXVlIiwidGhyb3dPckxvZ0Vycm9yIiwia2V5UmVmIiwiZ2V0U2NoRW52IiwicmVtb3ZlU2NoZW1hIiwiX3JlbW92ZUFsbFNjaGVtYXMiLCJjbGVhciIsImt3ZE9yRGVmIiwiY2hlY2tLZXl3b3JkIiwiS0VZV09SRF9OQU1FIiwia2V5d29yZE1ldGFzY2hlbWEiLCJtZXRhU2NoZW1hIiwic2NoZW1hT3JEYXRhIiwiYWRkUnVsZSIsImdldEtleXdvcmQiLCJyZW1vdmVLZXl3b3JkIiwic2VwYXJhdG9yIiwiZGF0YVZhciIsIiRkYXRhTWV0YVNjaGVtYSIsImtleXdvcmRzSnNvblBvaW50ZXJzIiwic2VnIiwicmVnZXgiLCJfY29tcGlsZU1ldGFTY2hlbWEiLCJjdXJyZW50T3B0cyIsImNoZWNrT3B0cyIsInJ1bGVHcm91cCIsIl9ydWxlIiwiJGRhdGFSZWYiLCJjYWxsUmVmIiwiZ2V0VmFsaWRhdGUiLCJzY2hOYW1lIiwic2NoT3JFbnYiLCJjYWxsQXN5bmNSZWYiLCJhZGRFdmFsdWF0ZWRGcm9tIiwiYWRkRXJyb3JzRnJvbSIsInNjaEV2YWx1YXRlZCIsInJlZl8xIiwiY29yZSIsImNvcmVfMSIsImlkXzEiLCJsaW1pdExlbmd0aCIsInVjczJsZW5ndGhfMSIsInVjczJsZW5ndGgiLCJjb21wIiwidXNlTG9vcCIsImxvb3BBbGxSZXF1aXJlZCIsImV4aXRPbkVycm9yTW9kZSIsImxvb3BVbnRpbE1pc3NpbmciLCJyZXF1aXJlZEtleSIsImVxdWFsXzEiLCJpdGVtVHlwZXMiLCJpbmRpY2VzIiwiZXFsIiwib3V0ZXIiLCJfZW51bSIsImdldEVxbCIsInZTY2hlbWEiLCJlcXVhbENvZGUiLCJtdWx0aXBsZU9mXzEiLCJsaW1pdExlbmd0aF8xIiwicGF0dGVybl8xIiwibGltaXRQcm9wZXJ0aWVzXzEiLCJyZXF1aXJlZF8xIiwibGltaXRJdGVtc18xIiwidW5pcXVlSXRlbXNfMSIsImNvbnN0XzEiLCJlbnVtXzEiLCJ2YWxpZGF0aW9uXzEiLCJsaW1pdE51bWJlcl8xIiwibGltaXROdW1iZXIiLCJvcHMiLCJLV0RzIiwib2tTdHIiLCJwcmVjIiwibXVsdGlwbGVPZlByZWNpc2lvbiIsImludmFsaWQiLCJsaW1pdFByb3BlcnRpZXMiLCJsaW1pdEl0ZW1zIiwiX2NvbnN0IiwidmFsaWRhdGVBZGRpdGlvbmFsSXRlbXMiLCJ2YWxpZGF0ZVR1cGxlIiwiZXh0cmFJdGVtcyIsInNjaEFyciIsImNoZWNrU3RyaWN0VHVwbGUiLCJmdWxsVHVwbGUiLCJtaW5Db250YWlucyIsIm1heENvbnRhaW5zIiwidmFsaWRhdGVJdGVtc1dpdGhDb3VudCIsImNoZWNrTGltaXRzIiwiX3ZhbGlkIiwidmFsaWRhdGVTY2hlbWFEZXBzIiwidmFsaWRhdGVQcm9wZXJ0eURlcHMiLCJkZXBzQ291bnQiLCJwcm9wZXJ0eV9pZXMiLCJwcm9wRGVwcyIsInNjaERlcHMiLCJwcm9wZXJ0eURlcHMiLCJzY2hlbWFEZXBzIiwiaGFzUHJvcGVydHkiLCJkZXBQcm9wIiwiYWRkaXRpb25hbFByb3BlcnR5IiwicmVtb3ZlQWRkaXRpb25hbCIsInBhdFByb3BzIiwiZGVsZXRlQWRkaXRpb25hbCIsImFkZGl0aW9uYWxQcm9wZXJ0eUNvZGUiLCJhcHBseUFkZGl0aW9uYWxTY2hlbWEiLCJkZWZpbmVkUHJvcCIsInByb3BzU2NoZW1hIiwiYWRkaXRpb25hbFByb3BlcnRpZXNfMSIsImFsbFByb3BzIiwiYXBwbHlQcm9wZXJ0eVNjaGVtYSIsInBhdHRlcm5zIiwiYWx3YXlzVmFsaWRQYXR0ZXJucyIsImNoZWNrUHJvcGVydGllcyIsImFsbG93TWF0Y2hpbmdQcm9wZXJ0aWVzIiwicGF0IiwiY2hlY2tNYXRjaGluZ1Byb3BlcnRpZXMiLCJ2YWxpZGF0ZVByb3BlcnRpZXMiLCJfaWYiLCJoYXNTY2hlbWEiLCJpZkNsYXVzZSIsImhhc1RoZW4iLCJoYXNFbHNlIiwidmFsaWRhdGVDbGF1c2UiLCJhcHBsaWNhdG9yIiwiYWRkaXRpb25hbEl0ZW1zXzEiLCJwcmVmaXhJdGVtc18xIiwicHJlZml4SXRlbXMiLCJpdGVtc18xIiwiaXRlbXMyMDIwXzEiLCJpdGVtczIwMjAiLCJjb250YWluc18xIiwiZGVwZW5kZW5jaWVzXzEiLCJwcm9wZXJ0eU5hbWVzXzEiLCJwcm9wZXJ0aWVzXzEiLCJwYXR0ZXJuUHJvcGVydGllc18xIiwibm90XzEiLCJhbnlPZl8xIiwib25lT2ZfMSIsInBhc3NpbmciLCJkaXNjcmltaW5hdG9yIiwiYWxsT2ZfMSIsImlmXzEiLCJyZXF1aXJlJCQxNCIsInRoZW5FbHNlXzEiLCJ0aGVuRWxzZSIsImRyYWZ0MjAyMCIsInZhbGlkYXRlJERhdGFGb3JtYXQiLCJmbXRzIiwiZkRlZiIsImZUeXBlIiwiY2FsbEZvcm1hdCIsInZhbGlkRGF0YSIsInZhbGlkYXRlRm9ybWF0IiwiZm9ybWF0RGVmIiwiZm10VHlwZSIsImZtdFJlZiIsImZtdERlZiIsImZtdCIsInVua25vd25Gb3JtYXQiLCJ1bmtub3duTXNnIiwiYXBwbGljYXRvcl8xIiwibWV0YWRhdGFfMSIsImRyYWZ0N1ZvY2FidWxhcmllcyIsImRyYWZ0NyIsImZvcm1hdF8yIiwiZm9ybWF0XzEiLCJtZXRhZGF0YSIsImNvbnRlbnRWb2NhYnVsYXJ5IiwibWV0YWRhdGFWb2NhYnVsYXJ5IiwidHlwZXNfMSIsIkRpc2NyRXJyb3IiLCJUYWciLCJNYXBwaW5nIiwiZGlzY3JFcnJvciIsIm1hcHBpbmciLCJ0YWdWYWx1ZSIsIm9uZU9mTWFwcGluZyIsInRvcFJlcXVpcmVkIiwiaGFzUmVxdWlyZWQiLCJ0YWdSZXF1aXJlZCIsInByb3BTY2giLCJhZGRNYXBwaW5nIiwiZHJhZnQ3XzEiLCJkaXNjcmltaW5hdG9yXzEiLCJkcmFmdDdNZXRhU2NoZW1hIiwiTUVUQV9TVVBQT1JUX0RBVEEiLCJNRVRBX1NDSEVNQV9JRCIsIm1vZHVsZSIsImFqdl8xIiwidXNlZCIsIktFWVdPUkRfUFJPUEVSVFlfUEFSQU1TIiwiZGVwZW5kZW50UmVxdWlyZWQiLCJJTlRFUlBPTEFUSU9OIiwiSU5URVJQT0xBVElPTl9SRVBMQUNFIiwiRU1QVFlfU1RSIiwiZXJyb3JNZXNzYWdlIiwibWF0Y2hLZXl3b3JkRXJyb3IiLCJrd2RFcnJzIiwiZ2V0VGVtcGxhdGVzQ29kZSIsIm1zZ3MiLCJ0ZW1wbGF0ZXNDb2RlIiwidGVtcGxhdGVFeHByIiwicHRyIiwia3dkUHJvcEVycm9ycyIsImt3ZEVycm9ycyIsImVtU2NoZW1hIiwicHJvcEVycm9ycyIsImt3ZFNjaCIsImVyck1hcCIsInByb2Nlc3NLZXl3b3JkRXJyb3JzIiwidGVtcGxhdGVzIiwic2luZ2xlRXJyb3IiLCJwYXJhbXNFcnJvcnMiLCJsb29wRXJyb3JzIiwiZXJyTWVzc2FnZSIsInByb2Nlc3NLZXl3b3JkUHJvcEVycm9ycyIsImt3ZFByb3BQYXJhbXMiLCJwcm9wUGFyYW0iLCJrZXlQcm9wIiwidG1wbCIsInByb2Nlc3NDaGlsZEVycm9ycyIsImNoaWxkRXJyb3JzIiwiaXNPYmoiLCJpc0FyciIsImNoaWxkRXJycyIsImNoaWxkS3dkIiwiY2hpbGRQcm9wIiwiaW5pdCIsImNoaWxkcmVuIiwiY2hpbGQiLCJjaGlsZFJlZ2V4Iiwic2NoTWVzc2FnZSIsInByb2Nlc3NBbGxFcnJvcnMiLCJrZWVwRXJyb3JzIiwicmVtb3ZlVXNlZEVycm9ycyIsInN0cmluZ01hcCIsInN0cmluZ09yTWFwIiwic3RyaW5nTGlzdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiV2Vha01hcCIsImV4dGVybmFsIiwidm9sdW1lIiwiY29udGFpbmVyX3BhdGgiLCJub2NvcHkiLCJzZWxpbnV4IiwiZGV0YWlscyIsImlwX3BhcnQiLCJpcCIsImNvbnRhaW5lciIsInByb3RvX3BhcnQiLCJwcm90byIsImciLCJob3N0X2lwIiwicHVibGlzaGVkIiwicHJvdG9jb2wiLCJleHBhbmRWb2x1bWVzIiwic2VydmljZXMiLCJ2b2x1bWVzIiwiZXhwYW5kUG9ydHMiLCJwb3J0cyIsImgiLCJ0aXRsZSIsImluY2x1ZGUiLCJeW2EtekEtWjAtOS5fLV0rJCIsIm5ldHdvcmtzIiwic2VjcmV0cyIsIl54LSIsInNlcnZpY2UiLCJkZXZlbG9wIiwiZGVwbG95IiwiYW5ub3RhdGlvbnMiLCJhdHRhY2giLCJidWlsZCIsImRvY2tlcmZpbGUiLCJkb2NrZXJmaWxlX2lubGluZSIsInNzaCIsImxhYmVscyIsImNhY2hlX2Zyb20iLCJjYWNoZV90byIsIm5vX2NhY2hlIiwiYWRkaXRpb25hbF9jb250ZXh0cyIsIm5ldHdvcmsiLCJwdWxsIiwic2htX3NpemUiLCJleHRyYV9ob3N0cyIsImlzb2xhdGlvbiIsInByaXZpbGVnZWQiLCJ1bGltaXRzIiwicGxhdGZvcm1zIiwiYmxraW9fY29uZmlnIiwiZGV2aWNlX3JlYWRfYnBzIiwiZGV2aWNlX3JlYWRfaW9wcyIsImRldmljZV93cml0ZV9icHMiLCJkZXZpY2Vfd3JpdGVfaW9wcyIsIndlaWdodCIsIndlaWdodF9kZXZpY2UiLCJjYXBfYWRkIiwiY2FwX2Ryb3AiLCJjZ3JvdXAiLCJjZ3JvdXBfcGFyZW50IiwiY29tbWFuZCIsImNvbnRhaW5lcl9uYW1lIiwiY3B1X2NvdW50IiwiY3B1X3BlcmNlbnQiLCJjcHVfc2hhcmVzIiwiY3B1X3F1b3RhIiwiY3B1X3BlcmlvZCIsImNwdV9ydF9wZXJpb2QiLCJjcHVfcnRfcnVudGltZSIsImNwdXMiLCJjcHVzZXQiLCJjcmVkZW50aWFsX3NwZWMiLCJmaWxlIiwicmVnaXN0cnkiLCJkZXBlbmRzX29uIiwicmVzdGFydCIsImRldmljZV9jZ3JvdXBfcnVsZXMiLCJkZXZpY2VzIiwiZG5zIiwiZG5zX29wdCIsImRuc19zZWFyY2giLCJkb21haW5uYW1lIiwiZW50cnlwb2ludCIsImVudl9maWxlIiwiZW52aXJvbm1lbnQiLCJleHBvc2UiLCJleHRlbmRzIiwiZXh0ZXJuYWxfbGlua3MiLCJncm91cF9hZGQiLCJoZWFsdGhjaGVjayIsImhvc3RuYW1lIiwiaW1hZ2UiLCJpcGMiLCJsaW5rcyIsImxvZ2dpbmciLCJkcml2ZXIiLCJeLiskIiwibWFjX2FkZHJlc3MiLCJtZW1fbGltaXQiLCJtZW1fcmVzZXJ2YXRpb24iLCJtZW1fc3dhcHBpbmVzcyIsIm1lbXN3YXBfbGltaXQiLCJuZXR3b3JrX21vZGUiLCJpcHY0X2FkZHJlc3MiLCJpcHY2X2FkZHJlc3MiLCJsaW5rX2xvY2FsX2lwcyIsInByaW9yaXR5Iiwib29tX2tpbGxfZGlzYWJsZSIsIm9vbV9zY29yZV9hZGoiLCJwaWQiLCJwaWRzX2xpbWl0IiwicGxhdGZvcm0iLCJwcm9maWxlcyIsInB1bGxfcG9saWN5IiwicmVhZF9vbmx5IiwicnVudGltZSIsInNjYWxlIiwic2VjdXJpdHlfb3B0Iiwic3lzY3RscyIsInN0ZGluX29wZW4iLCJzdG9wX2dyYWNlX3BlcmlvZCIsInN0b3Bfc2lnbmFsIiwic3RvcmFnZV9vcHQiLCJ0bXBmcyIsInR0eSIsInVzZXIiLCJ1dHMiLCJ1c2VybnNfbW9kZSIsImNvbnNpc3RlbmN5IiwicHJvcGFnYXRpb24iLCJjcmVhdGVfaG9zdF9wYXRoIiwic2l6ZSIsInZvbHVtZXNfZnJvbSIsIndvcmtpbmdfZGlyIiwiZGlzYWJsZSIsImludGVydmFsIiwicmV0cmllcyIsInRpbWVvdXQiLCJzdGFydF9wZXJpb2QiLCJzdGFydF9pbnRlcnZhbCIsImRldmVsb3BtZW50Iiwid2F0Y2giLCJpZ25vcmUiLCJhY3Rpb24iLCJkZXBsb3ltZW50IiwiZW5kcG9pbnRfbW9kZSIsInJlcGxpY2FzIiwicm9sbGJhY2tfY29uZmlnIiwicGFyYWxsZWxpc20iLCJkZWxheSIsImZhaWx1cmVfYWN0aW9uIiwibW9uaXRvciIsIm1heF9mYWlsdXJlX3JhdGlvIiwib3JkZXIiLCJ1cGRhdGVfY29uZmlnIiwicmVzb3VyY2VzIiwibGltaXRzIiwibWVtb3J5IiwicGlkcyIsInJlc2VydmF0aW9ucyIsImdlbmVyaWNfcmVzb3VyY2VzIiwicmVzdGFydF9wb2xpY3kiLCJtYXhfYXR0ZW1wdHMiLCJwbGFjZW1lbnQiLCJjb25zdHJhaW50cyIsInByZWZlcmVuY2VzIiwic3ByZWFkIiwibWF4X3JlcGxpY2FzX3Blcl9ub2RlIiwiZGlzY3JldGVfcmVzb3VyY2Vfc3BlYyIsImNhcGFiaWxpdGllcyIsImRldmljZV9pZHMiLCJwcm9qZWN0X2RpcmVjdG9yeSIsImRyaXZlcl9vcHRzIiwiaXBhbSIsInN1Ym5ldCIsImlwX3JhbmdlIiwiZ2F0ZXdheSIsImF1eF9hZGRyZXNzZXMiLCJkZXByZWNhdGVkIiwiaW50ZXJuYWwiLCJlbmFibGVfaXB2NiIsImF0dGFjaGFibGUiLCJzZWNyZXQiLCJ0ZW1wbGF0ZV9kcml2ZXIiLCJzdHJpbmdfb3JfbGlzdCIsImxpc3Rfb2Zfc3RyaW5ncyIsImxpc3Rfb3JfZGljdCIsIi4rIiwiYmxraW9fbGltaXQiLCJyYXRlIiwiYmxraW9fd2VpZ2h0Iiwic2VydmljZV9jb25maWdfb3Jfc2VjcmV0IiwidWlkIiwiZ2lkIiwiXlthLXpdKyQiLCJoYXJkIiwic29mdCIsIiQiLCJkdXJhdGlvbiIsImJ5dGUiLCJzdWJuZXRfaXBfYWRkcmVzcyIsIk8iLCJuZXQiLCJsb2dfZHJpdmVyIiwibG9nX29wdCIsImdldERvY2tlckNvbXBvc2VTY2hlbWFXaXRob3V0Rm9ybWF0cyIsImdldFZvbHVtZU5hbWVGcm9tVm9sdW1lU3BlYyIsImlzTmFtZWRWb2x1bWUiLCJtaWdyYXRlRnJvbVYxVG9WMngiLCJtaWdyYXRlRnJvbVYyeFRvVjN4Iiwidm9sdW1lX2RyaXZlciIsIm1pZ3JhdGVGcm9tVjN4VG9WMngiLCJtaWdyYXRlVG9Db21tb25TcGVjIiwidG9QcmltaXRpdmUiLCJkZWZpbmVQcm9wZXJ0aWVzIiwidmFsaWRhdGVEb2NrZXJDb21wb3NlVG9Db21tb25TcGVjIiwiaGVscExpbmsiLCJ5YW1sQ2hlY2siLCJ5YW1sUGFyc2UiLCJ5YW1sU3RyaW5naWZ5IiwiYXJnSW5kZXgiLCJmcmFtZXNUb1BvcCIsImdldE1hcHBpbmciLCJNQVBQSU5HUyIsImFkZC1ob3N0IiwiYmxraW8td2VpZ2h0IiwiYmxraW8td2VpZ2h0LWRldmljZSIsImNhcC1hZGQiLCJjYXAtZHJvcCIsImNncm91cC1wYXJlbnQiLCJjZ3JvdXBucyIsImNwdS1wZXJpb2QiLCJjcHUtcXVvdGEiLCJjcHUtcnQtcGVyaW9kIiwiY3B1LXJ0LXJ1bnRpbWUiLCJjcHUtc2hhcmVzIiwiZGV0YWNoZWQiLCJkZXZpY2UtY2dyb3VwLXJ1bGUiLCJkZXZpY2UtcmVhZC1icHMiLCJkZXZpY2UtcmVhZC1pb3BzIiwiZGV2aWNlLXdyaXRlLWJwcyIsImRldmljZS13cml0ZS1pb3BzIiwiZGV2aWNlIiwiZG5zLW9wdCIsImRucy1zZWFyY2giLCJlbnYtZmlsZSIsImdwdXMiLCJncm91cC1hZGQiLCJoZWFsdGgtY21kIiwiaGVhbHRoLWludGVydmFsIiwiaGVhbHRoLXJldHJpZXMiLCJoZWFsdGgtc3RhcnQtcGVyaW9kIiwiaGVhbHRoLXRpbWVvdXQiLCJpbnRlcmFjdGl2ZSIsImlwNiIsImxpbmstbG9jYWwtaXAiLCJsaW5rIiwibG9nLWRyaXZlciIsImxvZy1vcHQiLCJtYWMtYWRkcmVzcyIsIm1lbW9yeS1yZXNlcnZhdGlvbiIsIm1lbW9yeS1zd2FwIiwibWVtb3J5LXN3YXBwaW5lc3MiLCJtb3VudCIsIm5ldHdvcmstYWxpYXMiLCJuby1oZWFsdGhjaGVjayIsIm9vbS1raWxsLWRpc2FibGUiLCJvb20tc2NvcmUtYWRqIiwicGlkcy1saW1pdCIsInB1Ymxpc2giLCJyZWFkLW9ubHkiLCJybSIsInNlY3VyaXR5LW9wdCIsInNobS1zaXplIiwic3RvcC1zaWduYWwiLCJzdG9wLXRpbWVvdXQiLCJzdG9yYWdlLW9wdCIsInN5c2N0bCIsInVsaW1pdCIsInVzZXJucyIsInZvbHVtZXMtZnJvbSIsIndvcmtkaXIiLCJmcm9tRW50cmllcyIsInciLCJfcmVmIiwiX29iamVjdFNwcmVhZCIsInBhcnNlTGlzdEFzVmFsdWVDb21wb3NlRW50cnlPYmplY3QiLCJhcmdWYWx1ZSIsImxpc3RTZXBhcmF0b3IiLCJlbnRyeVNlcGFyYXRvciIsInN0cmlwUXVvdGVzIiwiZ2V0Q29tcG9zZUVudHJ5IiwiX3ZhbHVlIiwibGltaXROYW1lIiwibGltaXRWYWx1ZSIsImludmFyaWFudCIsIm1heWJlR2V0Q29tcG9zZUVudHJ5IiwibWFwS2V5IiwiZ2V0Q29tcG9zZUpzb24iLCJlbnRyeSIsInJlZHVjZVJpZ2h0IiwicGF0aEl0ZW0iLCJnZXRTZXJ2aWNlTmFtZSIsImdldENvbXBvc2VGaWxlSnNvbiIsImV4aXN0aW5nQ29tcG9zZUZpbGUiLCJmb3JtYXR0ZWRJbnB1dEFyZ3MiLCJwYXJzZWRJbnB1dCIsInJhd1BhcmFtcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9leGNsdWRlZCIsImNsZWFuU3RyaW5nQXJnIiwibmV0QXJnIiwibmV0d29ya0FyZyIsImlnbm9yZWRPcHRpb25zIiwiX3JlZjIiLCJkYXNoIiwidmFsdWVTdHJpbmciLCJfY29tbWFuZCQiLCJhcmdTdGFydCIsImNvbW1hbmRBcmdzQXJyYXkiLCJuYW1lZFZvbHVtZXMiLCJ2b2x1bWVJbmRleCIsInNlcnZpY2VOZXR3b3JrTmFtZSIsIm5hbWVkTmV0d29ya3MiLCJuZXR3b3JrSW5kZXgiLCJzZXJ2aWNlTmFtZSIsImdlbmVyYXRlZENvbXBvc2UiLCJleGlzdGluZ0NvbXBvc2UiLCJfQ29tcG9zZXZlcnRlciR5YW1sUGEiLCJDb21wb3NldmVydGVyIiwiaWdub3JlZE9wdGlvbnNDb21tZW50cyIsImNvbXBvc2VGaWxlIiwiY29tcG9zZVZlcnNpb24iLCJnbG9iYWxJZ25vcmVkT3B0aW9uc0NvbW1lbnRzIiwiZG9ja2VyQ29tbWFuZHMiLCJjb252ZXJ0ZWRFeGlzdGluZ0NvbXBvc2VGaWxlIiwiZG9ja2VyQ29tbWFuZCIsIlN5bnRheEVycm9yIiwiZmluYWxDb21wb3NlWWFtbCJdLCJtYXBwaW5ncyI6ImtnREFBQSxJQUFBQSxFQUFrQyxhQUFsQixPQUFPQyxPQUF5QkEsT0FDcEIsYUFBaEIsT0FBT0MsS0FBdUJBLEtBQ1osYUFBbEIsT0FBT0MsT0FBeUJBLE9BQVMsR0NrS3JELElBQUlDLEVBQWNILEVBQU9HLGFBQWUsR0FpQ3pCQyxHQS9CYkQsRUFBWUUsS0FDWkYsRUFBWUcsUUFDWkgsRUFBWUksT0FDWkosRUFBWUssTUFDWkwsRUFBWU0sVUEyQkMsQ0FJYkMsSUFqRWUsR0E2RWZDLElBeERLLFdBQWtCLE1BQU8sR0FBRyx5aUJDOUg3QkMsRUFBWSxDQUFDQyxFQUFPQyxLQUN6QixHQUF1QixVQUFqQixPQUFPRCxHQUFzQkUsQ0FBQUEsTUFBTUMsUUFBUUgsQ0FBSyxFQUNyRCxNQUFNLElBQUlJLFVBQVUsOENBQThDLEVBR25FSCxFQUFVSSxPQUFPQyxPQUFPLENBQ3ZCQyxXQUFZLENBQUEsQ0FDWixFQUFFTixDQUFPLEVBWVYsT0FBcUIsS0FQcEJELEVBREdFLE1BQU1DLFFBQVFILENBQUssRUFDZEEsRUFBTVEsSUFBSUMsR0FBS0EsRUFBRUMsS0FBTSxDQUFBLEVBQzdCQyxPQUFPRixHQUFLQSxFQUFFRyxNQUFNLEVBQ3BCQyxLQUFLLEdBQUcsRUFFRmIsRUFBTVUsS0FBTSxHQUdYRSxPQUNGLEdBR2EsSUFBakJaLEVBQU1ZLE9BQ0ZYLEVBQVFNLFdBQWFQLEVBQU1jLFlBQWEsRUFBR2QsRUFBTWUsWUFBYSxHQVN0RWYsR0FIQ0EsRUFIb0JBLElBQVVBLEVBQU1lLFlBQWEsR0F4RHpCQyxJQUN6QkMsSUFBSUMsRUFBa0IsQ0FBQSxFQUNsQkMsRUFBa0IsQ0FBQSxFQUNsQkMsRUFBc0IsQ0FBQSxFQUUxQixJQUFLSCxJQUFJSSxFQUFJLEVBQUdBLEVBQUlMLEVBQU9KLE9BQVFTLENBQUMsR0FBSSxDQUN2QyxJQUFNQyxFQUFZTixFQUFPSyxHQUVyQkgsR0FBbUIsV0FBV0ssS0FBS0QsQ0FBUyxHQUFLQSxFQUFVUixZQUFhLElBQUtRLEdBQ2hGTixFQUFTQSxFQUFPUSxNQUFNLEVBQUdILENBQUMsRUFBSSxJQUFNTCxFQUFPUSxNQUFNSCxDQUFDLEVBQ2xESCxFQUFrQixDQUFBLEVBQ2xCRSxFQUFzQkQsRUFDdEJBLEVBQWtCLENBQUEsRUFDbEJFLENBQUMsSUFDU0YsR0FBbUJDLEdBQXVCLFdBQVdHLEtBQUtELENBQVMsR0FBS0EsRUFBVVAsWUFBYSxJQUFLTyxHQUM5R04sRUFBU0EsRUFBT1EsTUFBTSxFQUFHSCxFQUFJLENBQUMsRUFBSSxJQUFNTCxFQUFPUSxNQUFNSCxFQUFJLENBQUMsRUFDMURELEVBQXNCRCxFQUN0QkEsRUFBa0IsQ0FBQSxFQUNsQkQsRUFBa0IsQ0FBQSxJQUVsQkEsRUFBa0JJLEVBQVVQLFlBQWEsSUFBS08sR0FBYUEsRUFBVVIsWUFBVyxJQUFPUSxFQUN2RkYsRUFBc0JELEVBQ3RCQSxFQUFrQkcsRUFBVVIsWUFBYSxJQUFLUSxHQUFhQSxFQUFVUCxZQUFXLElBQU9PLEVBRTFGLENBRUMsT0FBT04sQ0FDUixHQWdDNEJoQixDQUFLLEVBR3hCQSxHQUNOeUIsUUFBUSxZQUFhLEVBQUUsRUFDdkJWLFlBQVcsRUFDWFUsUUFBUSxrQkFBbUIsQ0FBQ0MsRUFBR0MsSUFBT0EsRUFBR2IsWUFBYSxDQUFBLEVBQ3REVyxRQUFRLGFBQWNHLEdBQUtBLEVBQUVkLFlBQVcsQ0FBRSxFQTVCeEJMLEVBOEJEVCxFQTlCTUMsRUFBUU0sV0FBYUUsRUFBRW9CLE9BQU8sQ0FBQyxFQUFFZixZQUFXLEVBQUtMLEVBQUVlLE1BQU0sQ0FBQyxFQUFJZixFQStCeEYsRUFFQXFCLEVBQUFDLFFBQWlCaEMsRUFFakJpQyxFQUFBRCxRQUFBRSxRQUF5QmxDLGNDbER6QixTQUFTbUMsRUFBZUMsRUFBT0MsR0FHN0IsSUFEQSxJQUFJQyxFQUFLLEVBQ0FoQixFQUFJYyxFQUFNdkIsT0FBUyxFQUFRLEdBQUxTLEVBQVFBLENBQUMsR0FBSSxDQUMxQyxJQUFJaUIsRUFBT0gsRUFBTWQsR0FDSixNQUFUaUIsRUFDRkgsRUFBTUksT0FBT2xCLEVBQUcsQ0FBQyxFQUNDLE9BQVRpQixHQUNUSCxFQUFNSSxPQUFPbEIsRUFBRyxDQUFDLEVBQ2pCZ0IsQ0FBRSxJQUNPQSxJQUNURixFQUFNSSxPQUFPbEIsRUFBRyxDQUFDLEVBQ2pCZ0IsQ0FBRSxHQUVSLENBR0UsR0FBSUQsRUFDRixLQUFPQyxDQUFFLElBQ1BGLEVBQU1LLFFBQVEsSUFBSSxFQUl0QixPQUFPTCxDQUNULENBTWdCLFNBQVpNLEVBQXFCQyxHQUN2QixPQUFPQyxFQUFZQyxLQUFLRixDQUFRLEVBQUVsQixNQUFNLENBQUMsQ0FDM0MsQ0FKQSxJQUFJbUIsRUFDQSxnRUFPRyxTQUFTRSxJQUlkLElBSEEsSUFBSUMsRUFBZSxHQUNmQyxFQUFtQixDQUFBLEVBRWQxQixFQUFJMkIsVUFBVXBDLE9BQVMsRUFBUSxJQUFMUyxHQUFXLENBQUMwQixFQUFrQjFCLENBQUMsR0FBSSxDQUNwRSxJQUFJNEIsRUFBYSxHQUFMNUIsRUFBVTJCLFVBQVUzQixHQUFLLElBR3JDLEdBQW9CLFVBQWhCLE9BQU80QixFQUNULE1BQU0sSUFBSTdDLFVBQVUsMkNBQTJDLEVBQ3JENkMsSUFJWkgsRUFBZUcsRUFBTyxJQUFNSCxFQUM1QkMsRUFBc0MsTUFBbkJFLEVBQUtwQixPQUFPLENBQUMsRUFDcEMsQ0FVRSxPQUFTa0IsRUFBbUIsSUFBTSxLQUpsQ0QsRUFBZVosRUFBZXZCLEdBQU9tQyxFQUFhSSxNQUFNLEdBQUcsRUFBRyxTQUFTQyxHQUNyRSxNQUFPLENBQUMsQ0FBQ0EsQ0FDVixDQUFBLEVBQUcsQ0FBQ0osQ0FBZ0IsRUFBRWxDLEtBQUssR0FBRyxJQUUwQixHQUMzRCxDQUlPLFNBQVN1QyxFQUFVSCxHQUN4QixJQUFJSSxFQUFpQkMsRUFBV0wsQ0FBSSxFQUNoQ00sRUFBcUMsTUFBckJDLEdBQU9QLEVBQU0sQ0FBQSxDQUFFLEVBY25DLE9BTkVBLEdBTEZBLEVBQU9mLEVBQWV2QixHQUFPc0MsRUFBS0MsTUFBTSxHQUFHLEVBQUcsU0FBU0MsR0FDckQsTUFBTyxDQUFDLENBQUNBLENBQ1YsQ0FBQSxFQUFHLENBQUNFLENBQWMsRUFBRXhDLEtBQUssR0FBRyxJQUVmd0MsRUFHVkosRUFGSyxNQUVHTSxJQUNWTixHQUFRLE1BR0ZJLEVBQWlCLElBQU0sSUFBTUosQ0FDdkMsQ0FHTyxTQUFTSyxFQUFXTCxHQUN6QixNQUEwQixNQUFuQkEsRUFBS3BCLE9BQU8sQ0FBQyxDQUN0QixDQUdPLFNBQVNoQixJQUVkLE9BQU91QyxFQUFVekMsR0FETFQsTUFBTXVELFVBQVVqQyxNQUFNa0MsS0FBS1YsVUFBVyxDQUFDLEVBQ3BCLFNBQVNHLEVBQUdRLEdBQ3pDLEdBQWlCLFVBQWIsT0FBT1IsRUFDVCxNQUFNLElBQUkvQyxVQUFVLHdDQUF3QyxFQUU5RCxPQUFPK0MsQ0FDWCxDQUFHLEVBQUV0QyxLQUFLLEdBQUcsQ0FBQyxDQUNkLENBS08sU0FBUytDLEVBQVNDLEVBQU1DLEdBSTdCLFNBQVNwRCxFQUFLcUQsR0FFWixJQURBLElBQUlDLEVBQVEsRUFDTEEsRUFBUUQsRUFBSW5ELFFBQ0UsS0FBZm1ELEVBQUlDLEdBRGlCQSxDQUFLLElBS2hDLElBREEsSUFBSUMsRUFBTUYsRUFBSW5ELE9BQVMsRUFDVCxHQUFQcUQsR0FDWSxLQUFiRixFQUFJRSxHQURPQSxDQUFHLElBSXBCLE9BQVlBLEVBQVJELEVBQW9CLEdBQ2pCRCxFQUFJdkMsTUFBTXdDLEVBQU9DLEVBQU1ELEVBQVEsQ0FBQyxDQUMzQyxDQWhCRUgsRUFBT2hCLEVBQVFnQixDQUFJLEVBQUVMLE9BQU8sQ0FBQyxFQUM3Qk0sRUFBS2pCLEVBQVFpQixDQUFFLEVBQUVOLE9BQU8sQ0FBQyxFQXNCekIsSUFMQSxJQUFJVSxFQUFZeEQsRUFBS21ELEVBQUtYLE1BQU0sR0FBRyxDQUFDLEVBQ2hDaUIsRUFBVXpELEVBQUtvRCxFQUFHWixNQUFNLEdBQUcsQ0FBQyxFQUU1QnRDLEVBQVN3RCxLQUFLQyxJQUFJSCxFQUFVdEQsT0FBUXVELEVBQVF2RCxNQUFNLEVBQ2xEMEQsRUFBa0IxRCxFQUNiUyxFQUFJLEVBQUdBLEVBQUlULEVBQVFTLENBQUMsR0FDM0IsR0FBSTZDLEVBQVU3QyxLQUFPOEMsRUFBUTlDLEdBQUksQ0FDL0JpRCxFQUFrQmpELEVBQ2xCLEtBQ04sQ0FJRSxJQURBLElBQUlrRCxFQUFjLEdBQ1RsRCxFQUFJaUQsRUFBaUJqRCxFQUFJNkMsRUFBVXRELE9BQVFTLENBQUMsR0FDbkRrRCxFQUFZQyxLQUFLLElBQUksRUFLdkIsT0FGQUQsRUFBY0EsRUFBWUUsT0FBT04sRUFBUTNDLE1BQU04QyxDQUFlLENBQUMsR0FFNUN6RCxLQUFLLEdBQUcsQ0FDN0IsQ0FLTyxTQUFTNkQsRUFBUXpCLEdBQ3RCLElBQUkwQixFQUFTbEMsRUFBVVEsQ0FBSSxFQUN2QjJCLEVBQU9ELEVBQU8sR0FDZEUsRUFBTUYsRUFBTyxHQUVqQixPQUFLQyxHQUFTQyxFQVVQRCxHQUxIQyxFQUFBQSxHQUVJQSxFQUFJckIsT0FBTyxFQUFHcUIsRUFBSWpFLE9BQVMsQ0FBQyxHQUwzQixHQVNYLENBRU8sU0FBU2tFLEdBQVM3QixFQUFNOEIsR0FDekJDLEVBQUl2QyxFQUFVUSxDQUFJLEVBQUUsR0FLeEIsT0FGRStCLEVBREVELEdBQU9DLEVBQUV4QixPQUFPLENBQUUsRUFBR3VCLEVBQUluRSxNQUFNLElBQU1tRSxFQUNuQ0MsRUFBRXhCLE9BQU8sRUFBR3dCLEVBQUVwRSxPQUFTbUUsRUFBSW5FLE1BQU0sRUFFaENvRSxDQUNULENBR08sU0FBU0MsR0FBUWhDLEdBQ3RCLE9BQU9SLEVBQVVRLENBQUksRUFBRSxFQUN6QixDQUNlLElBQUFpQyxHQUFBLENBQ2JELFFBQVNBLEdBQ1RILFNBQVVBLEdBQ1ZKLFFBQVNBLEVBQ1RTLElBdENlLElBdUNmQyxVQXRDcUIsSUF1Q3JCeEIsU0FBVUEsRUFDVi9DLEtBQU1BLEVBQ055QyxXQUFZQSxFQUNaRixVQUFXQSxFQUNYUCxRQUFTQSxDQUNYLEVBQ0EsU0FBU2xDLEdBQVEwRSxFQUFJTCxHQUNqQixHQUFJSyxFQUFHMUUsT0FBUSxPQUFPMEUsRUFBRzFFLE9BQU9xRSxDQUFDLEVBRWpDLElBREEsSUFBSU0sRUFBTSxHQUNEakUsRUFBSSxFQUFHQSxFQUFJZ0UsRUFBR3pFLE9BQVFTLENBQUMsR0FDeEIyRCxFQUFFSyxFQUFHaEUsR0FBSUEsRUFBR2dFLENBQUUsR0FBR0MsRUFBSWQsS0FBS2EsRUFBR2hFLEVBQUUsRUFFdkMsT0FBT2lFLENBQ1gsQ0FHQSxJQUFJOUIsR0FBNkIsTUFBcEIsS0FBS0EsT0FBTyxDQUFBLENBQUUsRUFDdkIsU0FBVStCLEVBQUt2QixFQUFPd0IsR0FBTyxPQUFPRCxFQUFJL0IsT0FBT1EsRUFBT3dCLENBQUcsQ0FBRyxFQUM1RCxTQUFVRCxFQUFLdkIsRUFBT3dCLEdBRWxCLE9BREl4QixFQUFRLElBQUdBLEVBQVF1QixFQUFJM0UsT0FBU29ELEdBQzdCdUIsRUFBSS9CLE9BQU9RLEVBQU93QixDQUFHLENBQ3BDLHNFQTVEdUIsa0ZBRE4sT0MwbERWLFNBQVNDLEdBQVNDLEdBQ3ZCLE9BQWMsTUFBUEEsSUFBZ0IsQ0FBQyxDQUFDQSxFQUFJQyxXQUFhQyxHQUFhRixDQUFHLEdBU3hCLFlBQTNCLE9BRGNBLEVBUnVEQSxHQVMxREcsYUFBbUQsWUFBckIsT0FBT0gsRUFBSWxFLE9BQXdCb0UsR0FBYUYsRUFBSWxFLE1BQU0sRUFBRyxDQUFDLENBQUMsRUFSaEgsQ0FFRCxTQUFTb0UsR0FBY0YsR0FDckIsTUFBTyxDQUFDLENBQUNBLEVBQUlJLGFBQW1ELFlBQXBDLE9BQU9KLEVBQUlJLFlBQVlMLFVBQTJCQyxFQUFJSSxZQUFZTCxTQUFTQyxDQUFHLENBQzNHLENDbnZERCxJQUFBSyxHQXRCNkIsWUFBekIsT0FBTzFGLE9BQU8yRixPQUNMLFNBQWtCQyxFQUFNQyxHQUVqQ0QsRUFBS0UsT0FBU0QsRUFDZEQsRUFBS3hDLFVBQVlwRCxPQUFPMkYsT0FBT0UsRUFBVXpDLFVBQVcsQ0FDbERxQyxZQUFhLENBQ1hNLE1BQU9ILEVBQ1BJLFdBQVksQ0FBQSxFQUNaQyxTQUFVLENBQUEsRUFDVkMsYUFBYyxDQUFBLENBQ3RCLENBQ0EsQ0FBSyxDQUNGLEVBRVUsU0FBa0JOLEVBQU1DLEdBQ2pDRCxFQUFLRSxPQUFTRCxFQUNDLFNBQVhNLEtBQ0pBLEVBQVMvQyxVQUFZeUMsRUFBVXpDLFVBQy9Cd0MsRUFBS3hDLFVBQVksSUFBSStDLEVBQ3JCUCxFQUFLeEMsVUFBVXFDLFlBQWNHLENBQ2pDLEVDRElRLEdBQWUsV0FDWixTQUFTQyxHQUFPMUIsR0FDckIsR0FBSSxDQUFDMkIsR0FBUzNCLENBQUMsRUFBRyxDQUVoQixJQURBLElBQUk0QixFQUFVLEdBQ0x2RixFQUFJLEVBQUdBLEVBQUkyQixVQUFVcEMsT0FBUVMsQ0FBQyxHQUNyQ3VGLEVBQVFwQyxLQUFLcUMsRUFBUTdELFVBQVUzQixFQUFFLENBQUMsRUFFcEMsT0FBT3VGLEVBQVEvRixLQUFLLEdBQUcsQ0FDeEIsQ0FxQkQsSUFuQkEsSUFBSVEsRUFBSSxFQUNKeUYsRUFBTzlELFVBQ1B3QyxFQUFNc0IsRUFBS2xHLE9BQ1gyRSxFQUFNd0IsT0FBTy9CLENBQUMsRUFBRXZELFFBQVFnRixHQUFjLFNBQVNoRyxHQUNqRCxHQUFVLE9BQU5BLEVBQVksTUFBTyxJQUN2QixHQUFTK0UsR0FBTG5FLEVBQVUsT0FBT1osRUFDckIsT0FBUUEsR0FDTixJQUFLLEtBQU0sT0FBT3NHLE9BQU9ELEVBQUt6RixDQUFDLEdBQUcsRUFDbEMsSUFBSyxLQUFNLE9BQU8yRixPQUFPRixFQUFLekYsQ0FBQyxHQUFHLEVBQ2xDLElBQUssS0FDSCxJQUNFLE9BQU80RixLQUFLQyxVQUFVSixFQUFLekYsQ0FBQyxHQUFHLENBR2hDLENBRkMsTUFBT0ssR0FDUCxNQUFPLFlBQ1IsQ0FDSCxRQUNFLE9BQU9qQixDQUNWLENBQ0YsQ0FBQSxFQUNRQSxFQUFJcUcsRUFBS3pGLEdBQUlBLEVBQUltRSxFQUFLL0UsRUFBSXFHLEVBQUssRUFBRXpGLEdBQ3BDOEYsR0FBTzFHLENBQUMsR0FBSyxDQUFDMkcsR0FBUzNHLENBQUMsRUFDMUI4RSxHQUFPLElBQU05RSxFQUViOEUsR0FBTyxJQUFNc0IsRUFBUXBHLENBQUMsRUFHMUIsT0FBTzhFLEVBT0YsU0FBUzhCLEdBQVVDLEVBQUlDLEdBRTVCLElBVUlDLEVBVkosT0FBSUMsRUFBWXRJLEVBQU9JLE9BQU8sRUFDckIsV0FDTCxPQUFPOEgsR0FBVUMsRUFBSUMsQ0FBRyxFQUFFRyxNQUFNQyxLQUFNM0UsU0FBUyxDQUNoRCxFQUcyQixDQUFBLElBQTFCekQsRUFBUXFJLGNBQ0hOLEdBR0xFLEVBQVMsQ0FBQSxFQUNiLFdBQ0UsR0FBSSxDQUFDQSxFQUFRLENBQ1gsR0FBSWpJLEVBQVFzSSxpQkFDVixNQUFNLElBQUlDLE1BQU1QLENBQUcsRUFDVmhJLEVBQVF3SSxpQkFDakJDLFFBQVFDLE1BQU1WLENBQUcsRUFFakJTLFFBQVFFLE1BQU1YLENBQUcsRUFFbkJDLEVBQVMsQ0FBQSxDQUNWLENBQ0QsT0FBT0YsRUFBR0ksTUFBTUMsS0FBTTNFLFNBQVMsQ0FDaEMsR0FNSCxJQUNJbUYsR0FEQUMsR0FBUyxHQUVOLFNBQVNDLEdBQVNDLEdBZXZCLE9BZEliLEVBQVlVLEVBQVksSUFDMUJBLEdBQWU1SSxFQUFRTSxJQUFJMEksWUFBYyxJQUMzQ0QsRUFBTUEsRUFBSXhILFlBQWEsRUFDbEJzSCxHQUFPRSxLQUNOLElBQUlFLE9BQU8sTUFBUUYsRUFBTSxNQUFPLEdBQUcsRUFBRS9HLEtBQUs0RyxFQUFZLEVBRXhEQyxHQUFPRSxHQUFPLFdBQ1osSUFBSWYsRUFBTWIsR0FBT2dCLE1BQU0sS0FBTTFFLFNBQVMsRUFDdENnRixRQUFRRSxNQUFNLFlBQWFJLEVBSG5CLEVBRzZCZixDQUFHLENBQ3pDLEVBRURhLEdBQU9FLEdBQU8sY0FHWEYsR0FBT0UsR0FZVCxTQUFTekIsRUFBUW5CLEVBQUsrQyxHQUUzQixJQUFJQyxFQUFNLENBQ1JDLEtBQU0sR0FDTkMsUUFBU0MsRUFDVixFQWlCRCxPQWZ3QixHQUFwQjdGLFVBQVVwQyxTQUFhOEgsRUFBSUksTUFBUTlGLFVBQVUsSUFDekIsR0FBcEJBLFVBQVVwQyxTQUFhOEgsRUFBSUssT0FBUy9GLFVBQVUsSUFDOUNnRyxHQUFVUCxDQUFJLEVBRWhCQyxFQUFJTyxXQUFhUixFQUNSQSxHQUVUUyxHQUFRUixFQUFLRCxDQUFJLEVBR2ZoQixFQUFZaUIsRUFBSU8sVUFBVSxJQUFHUCxFQUFJTyxXQUFhLENBQUEsR0FDOUN4QixFQUFZaUIsRUFBSUksS0FBSyxJQUFHSixFQUFJSSxNQUFRLEdBQ3BDckIsRUFBWWlCLEVBQUlLLE1BQU0sSUFBR0wsRUFBSUssT0FBUyxDQUFBLEdBQ3RDdEIsRUFBWWlCLEVBQUlTLGFBQWEsSUFBR1QsRUFBSVMsY0FBZ0IsQ0FBQSxHQUNwRFQsRUFBSUssU0FBUUwsRUFBSUUsUUFBVVEsSUFDdkJDLEdBQVlYLEVBQUtoRCxFQUFLZ0QsRUFBSUksS0FBSyxDQUN2QyxDQWlDRCxTQUFTTSxHQUFpQjdELEVBQUsrRCxHQUN6QkMsRUFBUTFDLEVBQVEyQyxPQUFPRixHQUUzQixPQUFJQyxFQUNLLEtBQVkxQyxFQUFRa0MsT0FBT1EsR0FBTyxHQUFLLElBQU1oRSxFQUM3QyxLQUFZc0IsRUFBUWtDLE9BQU9RLEdBQU8sR0FBSyxJQUV2Q2hFLENBRVYsQ0FHRCxTQUFTc0QsR0FBZXRELEVBQUsrRCxHQUMzQixPQUFPL0QsQ0FDUixDQWNELFNBQVM4RCxHQUFZWCxFQUFLdEMsRUFBT3FELEdBRy9CLEdBQUlmLEVBQUlTLGVBQ0ovQyxHQUNBc0QsR0FBV3RELEVBQU1TLE9BQU8sR0FFeEJULEVBQU1TLFVBQVlBLElBRWhCVCxDQUFBQSxFQUFNTixhQUFlTSxFQUFNTixZQUFZckMsWUFBYzJDLEdBS3pELE9BSEtPLEdBRERnRCxFQUFNdkQsRUFBTVMsUUFBUTRDLEVBQWNmLENBQUcsQ0FDeEIsRUFHVmlCLEVBRkNOLEdBQVlYLEVBQUtpQixFQUFLRixDQUFZLEVBTTVDLElBQUlHLEdBK0ZOLENBQXlCbEIsRUFBS3RDLEtBQzVCLElBR015RCxFQUhOLE9BQUlwQyxFQUFZckIsQ0FBSyxFQUNac0MsRUFBSUUsUUFBUSxZQUFhLFdBQVcsRUFDekNqQyxHQUFTUCxDQUFLLEdBQ1p5RCxFQUFTLElBQU81QyxLQUFLQyxVQUFVZCxDQUFLLEVBQUUzRSxRQUFRLFNBQVUsRUFBRSxFQUNwQkEsUUFBUSxLQUFNLEtBQUssRUFDbkJBLFFBQVEsT0FBUSxHQUFHLEVBQUksSUFDMURpSCxFQUFJRSxRQUFRaUIsRUFBUSxRQUFRLEdBRWpDQyxHQUFTMUQsQ0FBSyxFQUNUc0MsRUFBSUUsUUFBUSxHQUFLeEMsRUFBTyxRQUFRLEVBQ3JDNEMsR0FBVTVDLENBQUssRUFDVnNDLEVBQUlFLFFBQVEsR0FBS3hDLEVBQU8sU0FBUyxFQUV0Q2UsR0FBT2YsQ0FBSyxFQUNQc0MsRUFBSUUsUUFBUSxPQUFRLE1BQU0sRUFEbkMsS0FBQSxDQUVELEdBL0dpQ0YsRUFBS3RDLENBQUssRUFDMUMsR0FBSXdELEVBQ0YsT0FBT0EsRUFJVCxJQWxDSUcsRUFrQ0FDLEVBQU8zSixPQUFPMkosS0FBSzVELENBQUssRUFDeEI2RCxHQW5DQUYsRUFBTyxHQW1DbUJDLEVBakN4QkUsUUFBUSxTQUFTQyxFQUFLQyxHQUMxQkwsRUFBS0ksR0FBTyxDQUFBLENBQ2IsQ0FBQSxFQUVNSixHQXFDUCxHQU5JckIsRUFBSU8sYUFDTmUsRUFBTzNKLE9BQU9nSyxvQkFBb0JqRSxDQUFLLEdBS3JDa0UsR0FBUWxFLENBQUssSUFDa0IsR0FBM0I0RCxFQUFLTyxRQUFRLFNBQVMsR0FBeUMsR0FBL0JQLEVBQUtPLFFBQVEsYUFBYSxHQUNoRSxPQUFPQyxHQUFZcEUsQ0FBSyxFQUkxQixHQUFvQixJQUFoQjRELEVBQUtwSixPQUFjLENBQ3JCLEdBQUk4SSxHQUFXdEQsQ0FBSyxFQUVsQixPQURJcUUsRUFBT3JFLEVBQU1xRSxLQUFPLEtBQU9yRSxFQUFNcUUsS0FBTyxHQUNyQy9CLEVBQUlFLFFBQVEsWUFBYzZCLEVBQU8sSUFBSyxTQUFTLEVBRXhELEdBQUlDLEdBQVN0RSxDQUFLLEVBQ2hCLE9BQU9zQyxFQUFJRSxRQUFRSixPQUFPL0UsVUFBVWtILFNBQVNqSCxLQUFLMEMsQ0FBSyxFQUFHLFFBQVEsRUFFcEUsR0FBSXdFLEdBQU94RSxDQUFLLEVBQ2QsT0FBT3NDLEVBQUlFLFFBQVFpQyxLQUFLcEgsVUFBVWtILFNBQVNqSCxLQUFLMEMsQ0FBSyxFQUFHLE1BQU0sRUFFaEUsR0FBSWtFLEdBQVFsRSxDQUFLLEVBQ2YsT0FBT29FLEdBQVlwRSxDQUFLLENBRTNCLENBRUQsSUFBSTBFLEVBQU8sR0FBSUMsRUFBUSxDQUFBLEVBQU9DLEVBQVMsQ0FBQyxJQUFLLEtBNkI3QyxHQTFCSTdLLEdBQVFpRyxDQUFLLElBQ2YyRSxFQUFRLENBQUEsRUFDUkMsRUFBUyxDQUFDLElBQUssTUFJYnRCLEdBQVd0RCxDQUFLLElBRWxCMEUsRUFBTyxjQURDMUUsRUFBTXFFLEtBQU8sS0FBT3JFLEVBQU1xRSxLQUFPLElBQ2YsS0FJeEJDLEdBQVN0RSxDQUFLLElBQ2hCMEUsRUFBTyxJQUFNdEMsT0FBTy9FLFVBQVVrSCxTQUFTakgsS0FBSzBDLENBQUssR0FJL0N3RSxHQUFPeEUsQ0FBSyxJQUNkMEUsRUFBTyxJQUFNRCxLQUFLcEgsVUFBVXdILFlBQVl2SCxLQUFLMEMsQ0FBSyxHQUloRGtFLEdBQVFsRSxDQUFLLElBQ2YwRSxFQUFPLElBQU1OLEdBQVlwRSxDQUFLLEdBR1osSUFBaEI0RCxFQUFLcEosU0FBaUIsQ0FBQ21LLEdBQXlCLEdBQWhCM0UsRUFBTXhGLFFBQ3hDLE9BQU9vSyxFQUFPLEdBQUtGLEVBQU9FLEVBQU8sR0FHbkMsR0FBSXZCLEVBQWUsRUFDakIsT0FBSWlCLEdBQVN0RSxDQUFLLEVBQ1RzQyxFQUFJRSxRQUFRSixPQUFPL0UsVUFBVWtILFNBQVNqSCxLQUFLMEMsQ0FBSyxFQUFHLFFBQVEsRUFFM0RzQyxFQUFJRSxRQUFRLFdBQVksU0FBUyxFQUk1Q0YsRUFBSUMsS0FBS25FLEtBQUs0QixDQUFLLEVBSWpCOEUsRUFERUgsR0FzQ04sQ0FBcUJyQyxFQUFLdEMsRUFBT3FELEVBQWNRLEVBQWFELEtBRTFELElBREEsSUFBSWtCLEVBQVMsR0FDSjdKLEVBQUksRUFBRzhKLEVBQUkvRSxFQUFNeEYsT0FBUVMsRUFBSThKLEVBQUcsRUFBRTlKLEVBQ3JDK0osR0FBZWhGLEVBQU9XLE9BQU8xRixDQUFDLENBQUMsRUFDakM2SixFQUFPMUcsS0FBSzZHLEdBQWUzQyxFQUFLdEMsRUFBT3FELEVBQWNRLEVBQ2pEbEQsT0FBTzFGLENBQUMsRUFBRyxDQUFBLENBQUksQ0FBQyxFQUVwQjZKLEVBQU8xRyxLQUFLLEVBQUUsRUFTbEIsT0FOQXdGLEVBQUtFLFFBQVEsU0FBU29CLEdBQ2ZBLEVBQUlDLE1BQU0sT0FBTyxHQUNwQkwsRUFBTzFHLEtBQUs2RyxHQUFlM0MsRUFBS3RDLEVBQU9xRCxFQUFjUSxFQUNqRHFCLEVBQUssQ0FBQSxDQUFJLENBQUMsQ0FFakIsQ0FBQSxFQUNNSixDQUNSLEdBdER3QnhDLEVBQUt0QyxFQUFPcUQsRUFBY1EsRUFBYUQsQ0FBSSxFQUV2REEsRUFBS3hKLElBQUksU0FBUzhLLEdBQ3pCLE9BQU9ELEdBQWUzQyxFQUFLdEMsRUFBT3FELEVBQWNRLEVBQWFxQixFQUFLUCxDQUFLLENBQ3hFLENBQUEsRUFHSHJDLEVBQUlDLEtBQUs2QyxJQUFLLEVBRVBDLElBMkdxQlAsRUFRNUIsT0FBYSxHQU5BQSxFQUFPUSxPQUFPLFNBQVNDLEVBQU1DLEdBR3hDLE9BRElBLEVBQUlyQixRQUFRLElBQUksRUFDYm9CLEVBQU9DLEVBQUluSyxRQUFRLGtCQUFtQixFQUFFLEVBQUViLE9BQVMsQ0FDM0QsRUFBRSxDQUFDLEVBR0tvSyxFQUFPLElBQ0csS0FBVEYsRUFBYyxHQUFLQSxFQUFPLE9BQzNCLElBQ0FJLEVBQU9ySyxLQUFLLE9BQU8sRUFDbkIsSUFDQW1LLEVBQU8sR0FHVEEsRUFBTyxHQUFLRixFQUFPLElBQU1JLEVBQU9ySyxLQUFLLElBQUksRUFBSSxJQUFNbUssRUFBTyxFQTNIbEUsQ0FzQkQsU0FBU1IsR0FBWXBFLEdBQ25CLE1BQU8sSUFBTTBCLE1BQU1yRSxVQUFVa0gsU0FBU2pILEtBQUswQyxDQUFLLEVBQUksR0FDckQsQ0F1QkQsU0FBU2lGLEdBQWUzQyxFQUFLdEMsRUFBT3FELEVBQWNRLEVBQWFxQixFQUFLUCxHQUNsRSxJQUFJTixFQUFNbEYsRUFDVnNHLEVBQU94TCxPQUFPeUwseUJBQXlCMUYsRUFBT2tGLENBQUcsR0FBSyxDQUFFbEYsTUFBT0EsRUFBTWtGLEVBQU0sRUFxQzNFLEdBcENJTyxFQUFLRSxJQUVMeEcsRUFERXNHLEVBQUt2RCxJQUNESSxFQUFJRSxRQUFRLGtCQUFtQixTQUFTLEVBRXhDRixFQUFJRSxRQUFRLFdBQVksU0FBUyxFQUdyQ2lELEVBQUt2RCxNQUNQL0MsRUFBTW1ELEVBQUlFLFFBQVEsV0FBWSxTQUFTLEdBR3RDd0MsR0FBZW5CLEVBQWFxQixDQUFHLElBQ2xDYixFQUFPLElBQU1hLEVBQU0sS0FFaEIvRixJQUNDbUQsRUFBSUMsS0FBSzRCLFFBQVFzQixFQUFLekYsS0FBSyxFQUFJLEVBTVQsQ0FBQSxHQUp0QmIsRUFBTThELEdBQVlYLEVBQUttRCxFQUFLekYsTUFEMUJlLEdBQU9zQyxDQUFZLEVBQ2MsS0FFQUEsRUFBZSxDQUZYLEdBSWpDYyxRQUFRLElBQUksSUFFaEJoRixFQURFd0YsRUFDSXhGLEVBQUlyQyxNQUFNLElBQUksRUFBRTFDLElBQUksU0FBU3dMLEdBQ2pDLE1BQU8sS0FBT0EsQ0FDZixDQUFBLEVBQUVuTCxLQUFLLElBQUksRUFBRTJDLE9BQU8sQ0FBQyxFQUVoQixLQUFPK0IsRUFBSXJDLE1BQU0sSUFBSSxFQUFFMUMsSUFBSSxTQUFTd0wsR0FDeEMsTUFBTyxNQUFRQSxDQUNoQixDQUFBLEVBQUVuTCxLQUFLLElBQUksR0FJaEIwRSxFQUFNbUQsRUFBSUUsUUFBUSxhQUFjLFNBQVMsR0FHekNuQixFQUFZZ0QsQ0FBSSxFQUFHLENBQ3JCLEdBQUlNLEdBQVNPLEVBQUlDLE1BQU0sT0FBTyxFQUM1QixPQUFPaEcsRUFLUGtGLEdBSEZBLEVBQU94RCxLQUFLQyxVQUFVLEdBQUtvRSxDQUFHLEdBQ3JCQyxNQUFNLDhCQUE4QixHQUMzQ2QsRUFBT0EsRUFBS2pILE9BQU8sRUFBR2lILEVBQUs3SixPQUFTLENBQUMsRUFDOUI4SCxFQUFJRSxRQUFRNkIsRUFBTSxNQUFNLElBRS9CQSxFQUFPQSxFQUFLaEosUUFBUSxLQUFNLEtBQUssRUFDbkJBLFFBQVEsT0FBUSxHQUFHLEVBQ25CQSxRQUFRLFdBQVksR0FBRyxFQUM1QmlILEVBQUlFLFFBQVE2QixFQUFNLFFBQVEsRUFFcEMsQ0FFRCxPQUFPQSxFQUFPLEtBQU9sRixDQUN0QixDQTBCTSxTQUFTcEYsR0FBUThMLEdBQ3RCLE9BQU8vTCxNQUFNQyxRQUFROEwsQ0FBRSxDQUN4QixDQUVNLFNBQVNqRCxHQUFVa0QsR0FDeEIsTUFBc0IsV0FBZixPQUFPQSxDQUNmLENBRU0sU0FBUy9FLEdBQU8rRSxHQUNyQixPQUFlLE9BQVJBLENBQ1IsQ0FFTSxTQUFTQyxHQUFrQkQsR0FDaEMsT0FBYyxNQUFQQSxDQUNSLENBRU0sU0FBU3BDLEdBQVNvQyxHQUN2QixNQUFzQixVQUFmLE9BQU9BLENBQ2YsQ0FFTSxTQUFTdkYsR0FBU3VGLEdBQ3ZCLE1BQXNCLFVBQWYsT0FBT0EsQ0FDZixDQUVNLFNBQVNFLEdBQVNGLEdBQ3ZCLE1BQXNCLFVBQWYsT0FBT0EsQ0FDZixDQUVNLFNBQVN6RSxFQUFZeUUsR0FDMUIsT0FBZUcsS0FBQUEsSUFBUkgsQ0FDUixDQUVNLFNBQVN4QixHQUFTNEIsR0FDdkIsT0FBT2xGLEdBQVNrRixDQUFFLEdBQTRCLG9CQUF2QkMsR0FBZUQsQ0FBRSxDQUN6QyxDQUVNLFNBQVNsRixHQUFTOEUsR0FDdkIsTUFBc0IsVUFBZixPQUFPQSxHQUE0QixPQUFSQSxDQUNuQyxDQUVNLFNBQVN0QixHQUFPNEIsR0FDckIsT0FBT3BGLEdBQVNvRixDQUFDLEdBQTJCLGtCQUF0QkQsR0FBZUMsQ0FBQyxDQUN2QyxDQUVNLFNBQVNsQyxHQUFRbUMsR0FDdEIsT0FBT3JGLEdBQVNxRixDQUFDLElBQ1UsbUJBQXRCRixHQUFlRSxDQUFDLEdBQTBCQSxhQUFhM0UsTUFDN0QsQ0FFTSxTQUFTNEIsR0FBV3dDLEdBQ3pCLE1BQXNCLFlBQWYsT0FBT0EsQ0FDZixDQUVNLFNBQVNRLEdBQVlSLEdBQzFCLE9BQWUsT0FBUkEsR0FDZSxXQUFmLE9BQU9BLEdBQ1EsVUFBZixPQUFPQSxHQUNRLFVBQWYsT0FBT0EsR0FDUSxVQUFmLE9BQU9BLEdBQ1EsS0FBQSxJQUFSQSxDQUNmLENBRU0sU0FBU3pHLEdBQVNrSCxHQUN2QixPQUFPQyxHQUFnQkQsQ0FBUSxDQUNoQyxDQUVELFNBQVNKLEdBQWVNLEdBQ3RCLE9BQU94TSxPQUFPb0QsVUFBVWtILFNBQVNqSCxLQUFLbUosQ0FBQyxDQUN4QyxDQUdELFNBQVNDLEdBQUlDLEdBQ1gsT0FBT0EsRUFBSSxHQUFLLElBQU1BLEVBQUVwQyxTQUFTLEVBQUUsRUFBSW9DLEVBQUVwQyxTQUFTLEVBQUUsQ0FDckQsQ0FsWEQ5RCxFQUFRa0MsT0FBUyxDQUNmaUUsS0FBUyxDQUFDLEVBQUcsSUFDYkMsT0FBVyxDQUFDLEVBQUcsSUFDZkMsVUFBYyxDQUFDLEVBQUcsSUFDbEJDLFFBQVksQ0FBQyxFQUFHLElBQ2hCQyxNQUFVLENBQUMsR0FBSSxJQUNmQyxLQUFTLENBQUMsR0FBSSxJQUNkQyxNQUFVLENBQUMsR0FBSSxJQUNmQyxLQUFTLENBQUMsR0FBSSxJQUNkQyxLQUFTLENBQUMsR0FBSSxJQUNkQyxNQUFVLENBQUMsR0FBSSxJQUNmQyxRQUFZLENBQUMsR0FBSSxJQUNqQkMsSUFBUSxDQUFDLEdBQUksSUFDYkMsT0FBVyxDQUFDLEdBQUksS0FJbEIvRyxFQUFRMkMsT0FBUyxDQUNmcUUsUUFBVyxPQUNYQyxPQUFVLFNBQ1ZDLFFBQVcsU0FDWDFCLFVBQWEsT0FDYjJCLEtBQVEsT0FDUmhOLE9BQVUsUUFDVmlOLEtBQVEsVUFFUkMsT0FBVSxPQTJWWixJQUFJQyxHQUFTLENBQUMsTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQU8sTUFBTyxNQUFPLE1BQ3hELE1BQU8sTUFBTyxPQWFyQixTQUFTQyxLQVZoQixJQUNNNUIsRUFDQTZCLEVBU0pyRyxRQUFRb0csSUFBSSxXQVZSNUIsRUFBSSxJQUFJM0IsS0FDUndELEVBQU8sQ0FBQ3ZCLEdBQUlOLEVBQUU4QixTQUFRLENBQUUsRUFDaEJ4QixHQUFJTixFQUFFK0IsWUFBWSxFQUNsQnpCLEdBQUlOLEVBQUVnQyxXQUFVLENBQUUsR0FBRzNOLEtBQUssR0FBRyxFQUNsQyxDQUFDMkwsRUFBRWlDLFFBQVMsRUFBRU4sR0FBTzNCLEVBQUVrQyxTQUFRLEdBQUtMLEdBQU14TixLQUFLLEdBQUcsR0FNckI2RixHQUFPZ0IsTUFBTSxLQUFNMUUsU0FBUyxDQUFDLENBQ2xFLENBbUJNLFNBQVNrRyxHQUFReUYsRUFBUUMsR0FFOUIsR0FBS0EsR0FBUXhILEdBQVN3SCxDQUFHLEVBSXpCLElBRkEsSUFBSTVFLEVBQU8zSixPQUFPMkosS0FBSzRFLENBQUcsRUFDdEJ2TixFQUFJMkksRUFBS3BKLE9BQ05TLENBQUMsSUFDTnNOLEVBQU8zRSxFQUFLM0ksSUFBTXVOLEVBQUk1RSxFQUFLM0ksSUFFN0IsT0FBT3NOLEVBR1QsU0FBU3ZELEdBQWUxRixFQUFLbUosR0FDM0IsT0FBT3hPLE9BQU9vRCxVQUFVMkgsZUFBZTFILEtBQUtnQyxFQUFLbUosQ0FBSSxDQUN0RCxDQUVjLElDOWpCWDlPLEdBQVkrTyxFQUNaQyxHQ0FhLFNBQVV4SixFQUFLSixHQUMvQixHQUFtQixVQUFmLE9BQU9JLEVBQ1YsTUFBTSxJQUFJbkYsVUFBVSxtQkFBbUIsRUFLeEMsT0FBT21GLEVBQ0w5RCxRQUFRLG9CQUFxQixNQUgvQjBELEVBQXFCLEtBQUEsSUFBUkEsRUFBc0IsSUFBTUEsR0FHRyxJQUFJLEVBQzlDMUQsUUFBUSwyQkFBNEIsS0FBTzBELEVBQU0sSUFBSSxFQUNyRHBFLFlBQWEsQ0FDaEIsRURWSWtDLEdBQU8rTCxHQUNQQyxHRUZhLFNBQVVDLEdBQ3pCLEdBQUloUCxNQUFNQyxRQUFRK08sQ0FBUyxFQUN6QixPQUFPQSxFQUFVMU8sSUFBSWlNLEdBQWtCLFVBQWIsT0FBT0EsRUFBaUJBLEVBQUksR0FBS0EsQ0FBQyxFQUc5RHlDLEVBQVlBLEVBQVV4TyxLQUFJLEVBUTFCLElBTkEsSUFDSXlPLEVBREE5TixFQUFJLEVBRUorTixFQUFJLEtBQ0pDLEVBQVUsS0FDVnZJLEVBQU8sR0FFRndJLEVBQUssRUFBR0EsRUFBS0osRUFBVXRPLE9BQVEwTyxDQUFFLEdBQ3hDSCxFQUFRQyxFQUlFLE9BSFZBLEVBQUlGLEVBQVVyTixPQUFPeU4sQ0FBRSxJQUdMRCxHQVNkRCxJQUFNQyxFQUNSQSxFQUFVLEtBQ00sTUFBTkQsR0FBbUIsTUFBTkEsSUFBZUMsRUFBQUEsR0FDNUJELEdBR1B0SSxFQUFLekYsS0FBSXlGLEVBQUt6RixHQUFLLElBQ3hCeUYsRUFBS3pGLElBQU0rTixHQWZPLE1BQVZELEdBQ0o5TixDQUFDLEdBaUJQLE9BQU95RixDQUNULEVGbkNJeUksa0VEMGpCVyxDQUNiQyxTQUFVQSxHQUNWdEcsUUFBU0EsR0FDVGtGLElBQUtBLEdBQ0wzSSxTQUFVQSxHQUNWaUgsWUFBYUEsR0FDYmhELFdBQVlBLEdBQ1pZLFFBQVNBLEdBQ1RNLE9BQVFBLEdBQ1J4RCxTQUFVQSxHQUNWc0QsU0FBVUEsR0FDVmpELFlBQWFBLEVBQ2IyRSxTQUFVQSxHQUNWekYsU0FBVUEsR0FDVm1ELFNBQVVBLEdBQ1ZxQyxrQkFBbUJBLEdBQ25CaEYsT0FBUUEsR0FDUjZCLFVBQVdBLEdBQ1g3SSxRQUFTQSxHQUNUMEcsUUFBU0EsRUFDVFEsVUFBV0EsR0FDWFgsT0FBUUEsR0FDUjJCLFNBQVVBLEVBQ1gsd1BDL2tCRCxTQUFTb0gsR0FBTzNJLEVBQU0yQixHQUNmQSxFQUFBQSxHQUFhLEdBR2xCM0IsRUFBT21JLEdBQWtCbkksQ0FBSSxFQXNJN0IsSUFuSUEsSUFpZm9CNEksRUFDZEMsRUF1Rm1CRCxFQUNuQkUsRUFDQUMsRUFrQnVCSCxFQTdsQnpCSSxHQSt6Qm1CQSxJQUN2QixJQUFJQyxFQUFjLEdBQ2RDLEVBQVMsQ0FBQSxFQUNUQyxFQUFXLEdBWWYsSUFSQTVQLE9BQU8ySixLQUFLOEYsQ0FBTyxFQUFFNUYsUUFBUSxTQUFVb0IsR0FDckN5RSxFQUFZdkwsS0FDVixHQUFHQyxPQUFPcUwsRUFBUXhFLEdBQU1BLENBQUcsQ0FDakMsQ0FDRyxDQUFBLEVBSU0wRSxHQUFRLENBQ2JBLEVBQVMsQ0FBQSxFQUNULElBQUssSUFBSTNPLEVBQUksRUFBR0EsRUFBSTBPLEVBQVluUCxPQUFRUyxDQUFDLEdBQ3ZDLElBQUssSUFBSWlPLEVBQUtqTyxFQUFJLEVBQUdpTyxFQUFLUyxFQUFZblAsT0FBUTBPLENBQUUsR0FLOUMsR0FKZ0JTLEVBQVkxTyxHQUFHVixPQUFPLFNBQVV1UCxHQUM5QyxNQUFzQyxDQUFBLElBQS9CSCxFQUFZVCxHQUFJL0UsUUFBUTJGLENBQUMsQ0FDakMsQ0FBQSxFQUVhdFAsT0FBUSxDQUNwQm1QLEVBQVkxTyxHQUFLME8sRUFBWTFPLEdBQUdvRCxPQUFPc0wsRUFBWVQsRUFBRyxFQUN0RFMsRUFBWXhOLE9BQU8rTSxFQUFJLENBQUMsRUFDeEJVLEVBQVMsQ0FBQSxFQUNULEtBQ1YsQ0FHQSxDQVdFLE9BUEFELEVBQVk3RixRQUFRLFNBQVVpRyxHQUM1QkEsRUFBYUEsRUFBV3hQLE9BQU8sU0FBVXVQLEVBQUc3TyxFQUFHakMsR0FDN0MsT0FBT0EsRUFBS21MLFFBQVEyRixDQUFDLElBQU03TyxDQUM1QixDQUFBLEVBQ0Q0TyxFQUFTRSxFQUFXM0UsSUFBRyxHQUFNMkUsQ0FDOUIsQ0FBQSxFQUVNRixDQUNULEdBMTJCK0J4SCxFQUFLMkgsT0FBUyxFQUFFLEVBQ3pDQyxFQUFnQmhRLE9BQU9DLE9BQU8sQ0FDaENnUSxzQkFBdUIsQ0FBQSxFQUN2QkMsdUJBQXdCLENBQUEsRUFDeEJDLGVBQWdCLENBQUEsRUFDaEJDLGdCQUFpQixDQUFBLEVBQ2pCQyxtQkFBb0IsQ0FBQSxFQUNwQkMsa0JBQW1CLE1BQ25CQyw0QkFBNkIsQ0FBQSxFQUM3QkMsMkJBQTRCLENBQUEsRUFDNUJDLGFBQWMsQ0FBQSxFQUNkQyxpQkFBa0IsQ0FBQSxFQUNsQkMsc0JBQXVCLENBQUEsRUFDdkJDLHFCQUFzQixDQUFBLEVBQ3RCQyxnQkFBaUIsQ0FBQSxFQUNqQkMsZUFBZ0IsQ0FBQSxDQUNqQixFQUFFMUksRUFBSzRILGFBQWEsRUFDakJlLEVBQVczSSxFQUFLeEcsU0FBVyxHQUMzQm9QLEVBQWdCNUksRUFBSzRJLGVBQWlCLEdBQ3RDQyxFQUFZN0ksRUFBSzZJLFVBQ2pCQyxFQUFpQmxCLEVBQWMsY0FDL0JtQixFQUFlRCxFQUFpQixLQUFPLElBQ3ZDRSxFQUFhLEdBRWJDLEVBQUtqSixFQUFLaUosSUFBTW5DLEdBQUs3SSxPQUNyQndCLEVBQVEsS0FDUnlKLEVBQVEsQ0FDVjdCLFFBQVMsR0FDVDhCLE9BQVEsR0FDUkMsTUFBTyxHQUNQQyxRQUFTLEdBQ1RDLFFBQVMsR0FDVEMsT0FBUSxHQUNSNU8sVUFBVyxHQUNYNk8sUUFBUyxHQUNUQyxVQUFXLEdBQ1hDLE1BQU8sR0FDUEMsVUFBVyxHQUNYcEksS0FBTSxFQUNWLEVBQ01xSSxFQUFXLHNCQUNYQyxFQUFpQixJQUFJOUosT0FBTyxNQUFRNkgsRUFBYyxtQkFBcUIsTUFBTSxFQStFN0VYLEdBN0VILEdBQUdqTCxPQUFPZ0UsRUFBS3NDLEtBQUssRUFBRXBLLE9BQU80UixPQUFPLEVBQUVySSxRQUFRLFNBQVVzSSxHQUN2RCxJQUFJbEgsRUFBTWtILEVBQUlsSCxLQUFPa0gsRUFHZkMsRUFBYXBTLE9BQU8ySixLQUFLd0ksQ0FBRyxFQUFFaFMsSUFBSSxTQUFVOEssR0FDaEQsTUFBTyxDQUNMeUMsUUFBUyxRQUNUL00sT0FBUSxVQUNSOE0sT0FBUSxTQUNULEVBQUV4QyxFQUNKLENBQUEsRUFBRTNLLE9BQU80UixPQUFPLEVBQUUvRyxJQUFHLEVBR2xCaUgsSUFDRmQsRUFBTWMsR0FBWW5ILEdBQU8sQ0FBQSxHQUczQnFHLEVBQU1DLE9BQU90RyxHQUFPLENBQUEsRUFDcEJxRyxFQUFNM0gsS0FBS3hGLEtBQUs4RyxDQUFHLENBQ3BCLENBQUEsRUFFQSxHQUFHN0csT0FBT2dFLEVBQUtzRixPQUFPLEVBQUVwTixPQUFPNFIsT0FBTyxFQUFFckksUUFBUSxTQUFVb0IsR0FDekRxRyxFQUFNRSxNQUFNdkcsR0FBTyxDQUFBLEVBQ25CcUcsRUFBTTNILEtBQUt4RixLQUFLOEcsQ0FBRyxDQUNwQixDQUFBLEVBRUEsR0FBRzdHLE9BQU9nRSxFQUFLekgsTUFBTSxFQUFFTCxPQUFPNFIsT0FBTyxFQUFFckksUUFBUSxTQUFVb0IsR0FDeERxRyxFQUFNRyxRQUFReEcsR0FBTyxDQUFBLEVBQ3JCcUcsRUFBTTNILEtBQUt4RixLQUFLOEcsQ0FBRyxDQUNwQixDQUFBLEVBRUEsR0FBRzdHLE9BQU9nRSxFQUFLcUYsTUFBTSxFQUFFbk4sT0FBTzRSLE9BQU8sRUFBRXJJLFFBQVEsU0FBVW9CLEdBQ3hEcUcsRUFBTUksUUFBUXpHLEdBQU8sQ0FBQSxFQUNyQnFHLEVBQU0zSCxLQUFLeEYsS0FBSzhHLENBQUcsQ0FDcEIsQ0FBQSxFQUVBLEdBQUc3RyxPQUFPZ0UsRUFBS2lLLEtBQUssRUFBRS9SLE9BQU80UixPQUFPLEVBQUVySSxRQUFRLFNBQVVvQixHQUN2RHFHLEVBQU1LLE9BQU8xRyxHQUFPLENBQUEsRUFDcEJxRyxFQUFNM0gsS0FBS3hGLEtBQUs4RyxDQUFHLENBQ3BCLENBQUEsRUFFQSxHQUFHN0csT0FBT2dFLEVBQUtyRixTQUFTLEVBQUV6QyxPQUFPNFIsT0FBTyxFQUFFckksUUFBUSxTQUFVb0IsR0FDM0RxRyxFQUFNdk8sVUFBVWtJLEdBQU8sQ0FBQSxFQUN2QnFHLEVBQU0zSCxLQUFLeEYsS0FBSzhHLENBQUcsQ0FDcEIsQ0FBQSxFQUVEakwsT0FBTzJKLEtBQUt2QixFQUFLa0ssTUFBUSxFQUFFLEVBQUV6SSxRQUFRLFNBQVUwSSxHQUM3Q2pCLEVBQU1RLE1BQU1TLEdBQUtuSyxFQUFLa0ssS0FBS0MsR0FDM0JqQixFQUFNM0gsS0FBS3hGLEtBQUtvTyxDQUFDLENBQ2xCLENBQUEsRUFFRHZTLE9BQU8ySixLQUFLdkIsRUFBS21ILFFBQVUsRUFBRSxFQUFFMUYsUUFBUSxTQUFVMEksR0FDL0NqQixFQUFNUyxVQUFVUSxHQUFLbkssRUFBS21ILE9BQU9nRCxHQUNqQ2pCLEVBQU0zSCxLQUFLeEYsS0FBS29PLENBQUMsQ0FDbEIsQ0FBQSxFQUVHMVMsTUFBTUMsUUFBUXNJLEVBQUtvSyxNQUFNLEdBQTRCLFVBQXZCLE9BQU9wSyxFQUFLb0ssT0FDM0MsR0FBR3BPLE9BQU9nRSxFQUFLb0ssTUFBTSxFQUFFbFMsT0FBTzRSLE9BQU8sRUFBRXJJLFFBQVEsU0FBVW9CLEdBQ3hEcUcsRUFBTU0sUUFBUTNHLEdBQU8sQ0FBQSxDQUN0QixDQUFBLEVBRURqTCxPQUFPMkosS0FBS3ZCLEVBQUtvSyxRQUFVLEVBQUUsRUFBRTNJLFFBQVEsU0FBVTBJLEdBQy9DakIsRUFBTU0sUUFBUVcsR0FBS25LLEVBQUtvSyxPQUFPRCxFQUNoQyxDQUFBLEVBS0hFLENBQWNySyxFQUFLNkMsSUFBS3dFLEVBQVNySCxFQUFLeEcsUUFBUzBQLEVBQU1DLFFBcWxCOUMxSCxRQUFRLFNBQVV4RSxHQUNyQnJGLE9BQU8ySixLQUFLdEUsR0FBTyxFQUFFLEVBQUV3RSxRQUFRLFNBQVVvQixHQUluQ3FHLEVBQU03QixRQUFReEUsS0FFbEJxRyxFQUFNN0IsUUFBUXhFLEdBQU8sR0FBRzdHLE9BQU9xTCxFQUFReEUsSUFBUSxFQUFFLEVBRWpEcUcsRUFBTTdCLFFBQVF4RSxHQUFLN0csT0FBTzZHLENBQUcsRUFBRXBCLFFBQVEsU0FBVXpKLEdBQzNDLElBQUljLEtBQUtkLENBQUMsR0FBSzRQLEVBQWMsMEJBQzNCakIsRUFBSXJQLEdBQVVVLENBQUMsS0FDVDZLLEdBQXlDLEtBQWxDcUcsRUFBTTdCLFFBQVF4RSxHQUFLZixRQUFRNkUsQ0FBQyxJQUMzQ3VDLEVBQU03QixRQUFReEUsR0FBSzlHLEtBQUs0SyxDQUFDLEVBQ3pCcUMsRUFBV3JDLEdBQUssQ0FBQSxFQUdyQixDQUFBLEVBRUR1QyxFQUFNN0IsUUFBUXhFLEdBQUs3RyxPQUFPNkcsQ0FBRyxFQUFFcEIsUUFBUSxTQUFVekosR0FDaEMsRUFBWEEsRUFBRUcsUUFBYyxRQUFRVyxLQUFLZCxDQUFDLEdBQUs0UCxFQUFjLDBCQUMvQ2pCLEVBQUlMLEdBQVd0TyxFQUFHLEdBQUcsS0FDZjZLLEdBQXlDLEtBQWxDcUcsRUFBTTdCLFFBQVF4RSxHQUFLZixRQUFRNkUsQ0FBQyxJQUMzQ3VDLEVBQU03QixRQUFReEUsR0FBSzlHLEtBQUs0SyxDQUFDLEVBQ3pCcUMsRUFBV3JDLEdBQUssQ0FBQSxFQUdyQixDQUFBLEVBQ0R1QyxFQUFNN0IsUUFBUXhFLEdBQUtwQixRQUFRLFNBQVV6SixHQUNuQ2tSLEVBQU03QixRQUFRclAsR0FBSyxDQUFDNkssR0FBSzdHLE9BQU9rTixFQUFNN0IsUUFBUXhFLEdBQUszSyxPQUFPLFNBQVVvUyxHQUNsRSxPQUFPdFMsSUFBTXNTLENBQ2QsQ0FBQSxDQUFDLENBQ0gsQ0FBQSxFQUNGLENBQUEsQ0FDRixDQUFBLEVBcG5CSDFTLE9BQU8ySixLQUFLb0gsQ0FBUSxFQUFFbEgsUUFBUSxTQUFVb0IsSUFDckNxRyxFQUFNN0IsUUFBUXhFLElBQVEsSUFBSXBCLFFBQVEsU0FBVWtHLEdBQzNDZ0IsRUFBU2hCLEdBQVNnQixFQUFTOUYsRUFDNUIsQ0FBQSxDQUNGLENBQUEsRUFFVSxDQUFFNUosRUFBRyxFQUFFLEdBU2RzUixHQVBKM1MsT0FBTzJKLEtBQUsySCxFQUFNRSxLQUFLLEVBQUUzSCxRQUFRLFNBQVVvQixHQUNyQ2pMLE9BQU9vRCxVQUFVMkgsZUFBZTFILEtBQUswTixFQUFVOUYsQ0FBRyxJQUNwRDJILEVBQU8zSCxFQUFLOEYsRUFBUzlGLEVBQUksRUEwbkIzQixHQUFHN0csT0FBT2tOLEVBQU03QixRQXpuQkR4RSxJQXluQmlCLEdBem5CakJBLENBeW5Cd0IsRUFBRXBCLFFBQVEsU0FBVTBJLEdBQ3pEakIsRUFBTU8sVUFBVVUsR0FBSyxDQUFBLENBQ3RCLENBQUEsRUF6bkJGLENBQUEsRUFFYyxJQUVOdlIsRUFBSSxFQUFHQSxFQUFJeUYsRUFBS2xHLE9BQVFTLENBQUMsR0FBSSxDQUNwQyxJQUVJaUssRUFFQTFKLEVBQ0FzUixFQUNBOU0sRUFOQThGLEVBQU1wRixFQUFLekYsR0FTZixHQUFJNkssRUFBSVgsTUFBTSxRQUFRLEdBQ3BCLENBQUM4RSxFQUFjLHdCQUEwQm5FLEVBQUlYLE1BQU0sT0FBTyxFQVF0RDRILEdBSEp2UixFQUFJc0ssRUFBSVgsTUFBTSx3QkFBd0IsR0FHaEIsR0FBSW9HLEVBQU1RLEtBQUssR0FDbkNyTCxFQUFLdkUsT0FBT2xCLEVBQUksRUFBRyxFQUFHTyxFQUFFLEVBQUUsRUFDMUJQLEVBQUkrUixFQUFTL1IsRUFBR08sRUFBRSxHQUFJa0YsQ0FBSSxHQUVqQnFNLEVBQWdCdlIsRUFBRSxHQUFJK1AsRUFBTUMsTUFBTSxHQUFLOUssRUFBS2xHLE9BQVNTLEVBQUksR0FDbEV5RixFQUFLdkUsT0FBT2xCLEVBQUksRUFBRyxFQUFHTyxFQUFFLEVBQUUsRUFDMUJQLEVBQUlnUyxFQUFTaFMsRUFBR08sRUFBRSxHQUFJa0YsQ0FBSSxHQUUxQm1NLEVBQU9yUixFQUFFLEdBQUlBLEVBQUUsRUFBRSxPQUVkLEdBQUlzSyxFQUFJWCxNQUFNK0csQ0FBYyxHQUFLakMsRUFBYyxvQkFFcEQ0QyxFQURBM0gsRUFBTVksRUFBSVgsTUFBTStHLENBQWMsRUFBRSxHQUNwQixDQUFBLENBQUssT0FHWixHQUFJcEcsRUFBSVgsTUFBTSxPQUFPLEdBQzFCLENBQUM4RSxFQUFjLHdCQUEwQm5FLEVBQUlYLE1BQU0sU0FBUyxFQUt4RDRILEVBSEo3SCxFQUFNWSxFQUFJWCxNQUFNLFVBQVUsRUFBRSxHQUdIb0csRUFBTVEsS0FBSyxFQUNsQzlRLEVBQUkrUixFQUFTL1IsRUFBR2lLLEVBQUt4RSxDQUFJLEVBRWhCcU0sRUFBZ0I3SCxFQUFLcUcsRUFBTUMsTUFBTSxHQUFLOUssRUFBS2xHLE9BQVNTLEVBQUksRUFDakVBLEVBQUlnUyxFQUFTaFMsRUFBR2lLLEVBQUt4RSxDQUFJLEVBSXJCb00sRUFBUzdHLEtBQUFBLEtBRmI2RyxFQUE0QixJQUFyQnZCLEVBQU1RLE1BQU03RyxHQUFhZSxLQUFBQSxFQUFZdkYsRUFBS3pGLEVBQUksS0FFekI2UixFQUFLM0gsTUFBTSxJQUFJLEdBQ3pDMkgsQ0FBQUEsRUFBSzNILE1BQU04RyxDQUFRLEdBQ2xCYyxFQUFnQjdILEVBQUtxRyxFQUFNRSxLQUFLLEdBQ2hDc0IsRUFBZ0I3SCxFQUFLcUcsRUFBTUssTUFBTSxJQUd6QixpQkFBaUJ6USxLQUFLMlIsQ0FBSSxHQUZuQ0QsRUFBTzNILEVBQUs0SCxDQUFJLEVBQ2hCN1IsQ0FBQyxJQUtENFIsRUFBTzNILEVBQUtnSSxFQUFhaEksQ0FBRyxDQUFDLE9BSzVCLEdBQUlZLEVBQUlYLE1BQU0sVUFBVSxFQUU3QjBILEdBREFyUixFQUFJc0ssRUFBSVgsTUFBTSxzQkFBc0IsR0FDM0IsR0FBSTNKLEVBQUUsRUFBRSxPQUdaLEdBQUlzSyxFQUFJWCxNQUFNLFNBQVMsRUFDNUIySCxFQUFPcE0sRUFBS3pGLEVBQUksR0FDaEJpSyxFQUFNWSxFQUFJWCxNQUFNLFdBQVcsRUFBRSxHQUVoQmMsS0FBQUEsSUFBVDZHLEdBQXVCQSxFQUFLM0gsTUFBTSxJQUFJLEdBQ3ZDNEgsRUFBZ0I3SCxFQUFLcUcsRUFBTUUsS0FBSyxHQUNoQ3NCLEVBQWdCN0gsRUFBS3FHLEVBQU1LLE1BQU0sRUFJbENpQixFQUFPM0gsRUFBS2dJLEVBQWFoSSxDQUFHLENBQUMsR0FIN0IySCxFQUFPM0gsRUFBSzRILENBQUksRUFDaEI3UixDQUFDLFNBSUUsR0FBSTZLLEVBQUlYLE1BQU0sU0FBUyxHQUFLLENBQUNXLEVBQUlYLE1BQU04RyxDQUFRLEVBQUcsQ0FJdkQsSUFBSyxJQUhMa0IsRUFBVXJILEVBQUkxSyxNQUFNLEVBQUcsQ0FBRSxDQUFBLEVBQUUwQixNQUFNLEVBQUUsRUFDbkNzUSxFQUFTLENBQUEsRUFFQUMsRUFBSSxFQUFHQSxFQUFJRixFQUFRM1MsT0FBUTZTLENBQUMsR0FBSSxDQUd2QyxHQUZBUCxFQUFPaEgsRUFBSTFLLE1BQU1pUyxFQUFJLENBQUMsRUFFbEJGLEVBQVFFLEVBQUksSUFBeUIsTUFBbkJGLEVBQVFFLEVBQUksR0FBWSxDQUM1Q3JOLEVBQVE4RixFQUFJMUssTUFBTWlTLEVBQUksQ0FBQyxFQUluQk4sRUFISjdILEVBQU1pSSxFQUFRRSxHQUdXOUIsRUFBTVEsS0FBSyxHQUNsQ3JMLEVBQUt2RSxPQUFPbEIsRUFBSSxFQUFHLEVBQUcrRSxDQUFLLEVBQzNCL0UsRUFBSStSLEVBQVMvUixFQUFHaUssRUFBS3hFLENBQUksR0FFaEJxTSxFQUFnQjdILEVBQUtxRyxFQUFNQyxNQUFNLEdBQUs5SyxFQUFLbEcsT0FBU1MsRUFBSSxHQUNqRXlGLEVBQUt2RSxPQUFPbEIsRUFBSSxFQUFHLEVBQUcrRSxDQUFLLEVBQzNCL0UsRUFBSWdTLEVBQVNoUyxFQUFHaUssRUFBS3hFLENBQUksR0FFekJtTSxFQUFPM0gsRUFBS2xGLENBQUssRUFHbkJvTixFQUFTLENBQUEsRUFDVCxLQUNWLENBRVEsR0FBYSxNQUFUTixFQUNGRCxFQUFPTSxFQUFRRSxHQUFJUCxDQUFJLE1BRHpCLENBTUEsR0FBSSxXQUFXM1IsS0FBS2dTLEVBQVFFLEVBQUUsR0FDNUIsMkJBQTJCbFMsS0FBSzJSLENBQUksRUFBRyxDQUN2Q0QsRUFBT00sRUFBUUUsR0FBSVAsQ0FBSSxFQUN2Qk0sRUFBUyxDQUFBLEVBQ1QsS0FDVixDQUVRLEdBQUlELEVBQVFFLEVBQUksSUFBTUYsRUFBUUUsRUFBSSxHQUFHbEksTUFBTSxJQUFJLEVBQUcsQ0FDaEQwSCxFQUFPTSxFQUFRRSxHQUFJUCxDQUFJLEVBQ3ZCTSxFQUFTLENBQUEsRUFDVCxNQUVBUCxFQUFPTSxFQUFRRSxHQUFJSCxFQUFhQyxFQUFRRSxFQUFFLENBQUMsQ0FmckQsQ0FpQkEsQ0FFTW5JLEVBQU1ZLEVBQUkxSyxNQUFNLENBQUEsQ0FBRSxFQUFFLEdBRWZnUyxHQUFrQixNQUFSbEksSUFFVDZILEVBQWdCN0gsRUFBS3FHLEVBQU1RLEtBQUssRUFDbEM5USxFQUFJK1IsRUFBUy9SLEVBQUdpSyxFQUFLeEUsQ0FBSSxFQUVoQnFNLEVBQWdCN0gsRUFBS3FHLEVBQU1DLE1BQU0sR0FBSzlLLEVBQUtsRyxPQUFTUyxFQUFJLEVBQ2pFQSxFQUFJZ1MsRUFBU2hTLEVBQUdpSyxFQUFLeEUsQ0FBSSxFQUlyQm9NLEVBQVM3RyxLQUFBQSxLQUZiNkcsRUFBT3BNLEVBQUt6RixFQUFJLEtBRVksY0FBY0UsS0FBSzJSLENBQUksR0FDakRBLENBQUFBLEVBQUszSCxNQUFNOEcsQ0FBUSxHQUNsQmMsRUFBZ0I3SCxFQUFLcUcsRUFBTUUsS0FBSyxHQUNoQ3NCLEVBQWdCN0gsRUFBS3FHLEVBQU1LLE1BQU0sSUFHekIsaUJBQWlCelEsS0FBSzJSLENBQUksR0FGbkNELEVBQU8zSCxFQUFLNEgsQ0FBSSxFQUNoQjdSLENBQUMsSUFLRDRSLEVBQU8zSCxFQUFLZ0ksRUFBYWhJLENBQUcsQ0FBQyxFQUlwQyxLQUFNLENBQUEsR0FBWSxPQUFSWSxFQUFjLENBQ3ZCOEcsRUFBV2xNLEVBQUt0RixNQUFNSCxFQUFJLENBQUMsRUFDM0IsS0FDRCxDQUFNLEdBQUlnUCxFQUFjLHNCQUF1QixDQUM5QzJDLEVBQVdsTSxFQUFLdEYsTUFBTUgsQ0FBQyxFQUN2QixNQUVBcU8sRUFBS2hPLEVBQUU4QyxLQUFLa1AsRUFBa0IsSUFBS3hILENBQUcsQ0FBQyxDQUM3QyxDQUNBLENBOENFLFNBQVNrSCxFQUFVL1IsRUFBR2lLLEVBQUt4RSxHQU96QixJQU5BLElBQ002TSxFQUFRUixFQUFnQjdILEVBQUtxRyxFQUFNUSxLQUFLLEVBSTFDeUIsRUFBWSxFQUNYdEUsRUFBS2pPLEVBQUksRUFBR2lPLEVBQUt4SSxFQUFLbEcsUUFDcEJrRyxDQUFBQSxFQUFLd0ksR0FBSS9ELE1BQU0sVUFBVSxFQURHK0QsQ0FBRSxHQUNGc0UsQ0FBUyxHQUl4Q0EsRUFBWUQsSUFBT3pMLEVBQVFKLE1BQU00SixFQUFHLHFDQUFzQ3BHLENBQUcsQ0FBQyxHQUVsRixJQUFNdUksRUFBV3pQLEtBQUtDLElBQUl1UCxFQUFXRCxDQUFLLEVBQzFDLElBQUtyRSxFQUFLak8sRUFBSSxFQUFHaU8sRUFBTXVFLEVBQVd4UyxFQUFJLEVBQUlpTyxDQUFFLEdBQzFDMkQsRUFBTzNILEVBQUt4RSxFQUFLd0ksRUFBRyxFQUd0QixPQUFRak8sRUFBSXdTLENBQ2hCLENBS0UsU0FBU1IsRUFBVWhTLEVBQUdpSyxFQUFLeEUsR0FJekIsSUFIQSxJQUFJOUMsRUFBUTNDLEVBQUksRUFDWnlTLEVBQVksR0FDWkMsRUFBd0IsRUFBSjFTLEVBQ2ZpTyxFQUFLak8sRUFBSSxFQUFHaU8sRUFBS3hJLEVBQUtsRyxPQUFRME8sQ0FBRSxHQUFJLENBQzNDLEdBQUksS0FBSy9OLEtBQUt1RixFQUFLd0ksRUFBRyxHQUFLLENBQUMrQyxFQUFTOVEsS0FBS3VGLEVBQUt3SSxFQUFHLEVBQUcsQ0FDL0NBLElBQU90TCxHQUNUaVAsRUFBTzNILEVBQUswSSxFQUFlLE9BQU8sQ0FBQyxFQUVyQ0QsRUFBb0IsQ0FBQSxFQUNwQixLQUNSLENBQ00xUyxFQUFJaU8sRUFDSndFLEVBQVV0UCxLQUFLc0MsRUFBS3dJLEVBQUcsQ0FDN0IsQ0FXSSxPQVZJeUUsRUFDRmQsRUFBTzNILEVBQUt3SSxFQUFVdFQsSUFBSSxTQUFVMEwsR0FDbEMsT0FBTytILEVBQWEzSSxFQUFLWSxDQUFHLENBQzdCLENBQUEsQ0FBQyxFQUVGNEgsRUFBVTVKLFFBQVEsU0FBVWdDLEdBQzFCK0csRUFBTzNILEVBQUtZLENBQUcsQ0FDaEIsQ0FBQSxFQUdJN0ssQ0FDWCxDQUVFLFNBQVM0UixFQUFRM0gsRUFBS25CLEdBa1hwQixHQUFHMUYsT0FBT2tOLEVBQU03QixRQWpYRHhFLElBaVhpQixHQWpYakJBLENBaVh3QixFQUFFcEIsUUFBUSxTQUFVMEksR0FDekQsT0FBT2pCLEVBQU1PLFVBQVVVLEVBQ3hCLENBQUEsRUFqWEcsSUFBSXJSLEtBQUsrSixDQUFHLEdBQUsrRSxFQUFjLDBCQUM3QkQsRUFBUTlFLEVBQUlwSSxNQUFNLEdBQUcsRUFBRTFDLElBQUksU0FBVXFPLEdBQ3ZDLE9BQU85TyxHQUFVOE8sQ0FBSSxDQUN0QixDQUFBLEVBQUVoTyxLQUFLLEdBQUcsRUE4Q2YsU0FBU3FULEVBQWE1SSxFQUFLOEUsR0FDbkJ1QixFQUFNN0IsUUFBUXhFLElBQVFxRyxFQUFNN0IsUUFBUXhFLEdBQUsxSyxTQUM3QytRLEVBQU03QixRQUFReEUsR0FBTyxDQUFDOEUsR0FDdEJxQixFQUFXckIsR0FBUyxDQUFBLEdBRWhCdUIsRUFBTTdCLFFBQVFNLElBQVV1QixFQUFNN0IsUUFBUU0sR0FBT3hQLFFBQ2pEc1QsRUFBWTlELEVBQU85RSxDQUFHLENBRTVCLEVBckRrQkEsRUFBSzhFLENBQUssR0EwVzFCLElBN1dRQSxFQU1GaEssRUFBUTZOLEVBQWEzSSxFQUFLbkIsQ0FBRyxFQUU3QmdLLEVBQVc3SSxFQUFJcEksTUFBTSxHQUFHLEVBQzVCa1IsRUFBTzFFLEVBQU15RSxFQUFVL04sQ0FBSyxFQUd4QnVMLEVBQU03QixRQUFReEUsSUFBUXFHLEVBQU03QixRQUFReEUsR0FBS3BCLFNBQzNDeUgsRUFBTTdCLFFBQVF4RSxHQUFLcEIsUUFBUSxTQUFVekosR0FDbkNBLEVBQUlBLEVBQUV5QyxNQUFNLEdBQUcsRUFDZmtSLEVBQU8xRSxFQUFNalAsRUFBRzJGLENBQUssQ0FDdEIsQ0FBQSxFQUltQixFQUFsQitOLEVBQVN2VCxRQUFjeVAsRUFBYyxrQkFDckNzQixFQUFNN0IsUUFBUXFFLEVBQVMsS0FBTyxJQUFJakssUUFBUSxTQUFVekosR0FDcERBLEVBQUlBLEVBQUV5QyxNQUFNLEdBQUcsRUFHZixJQUFJbVIsRUFBSSxHQUFHNVAsT0FBTzBQLENBQVEsRUFDMUJFLEVBQUVDLE1BQU8sRUFDVDdULEVBQUlBLEVBQUVnRSxPQUFPNFAsQ0FBQyxFQUVkRCxFQUFPMUUsRUFBTWpQLEVBQUcyRixDQUFLLENBQ3RCLENBQUEsRUFJQytNLEVBQWdCN0gsRUFBS3FHLEVBQU12TyxTQUFTLEdBQUssQ0FBQytQLEVBQWdCN0gsRUFBS3FHLEVBQU1DLE1BQU0sR0FDbEUsQ0FBQ3RHLEdBQUs3RyxPQUFPa04sRUFBTTdCLFFBQVF4RSxJQUFRLEVBQUUsRUFDM0NwQixRQUFRLFNBQVVvQixHQUNyQm9FLEVBQUs2RSxpQkFBaUJqSixFQUFLLFNBQVU0RSxHQUNuQy9GLEVBQU1sSCxHQUFLRyxVQUFVOE0sQ0FBQyxDQUN2QixDQUFBLEVBRURSLEVBQUs4RSxpQkFBaUJsSixFQUFLLFdBQ3pCLE1BQXNCLFVBQWYsT0FBT25CLEVBQW1CbEgsR0FBS0csVUFBVStHLENBQUcsRUFBSUEsQ0FDeEQsQ0FBQSxDQUNGLENBQUEsQ0FFUCxDQVlFLFNBQVM4SixFQUFjM0ksRUFBS25CLEdBRVAsVUFBZixPQUFPQSxHQUNHLE1BQVhBLEVBQUksSUFBeUIsTUFBWEEsRUFBSSxJQUN2QkEsRUFBSUEsRUFBSXZKLE9BQVMsS0FBT3VKLEVBQUksS0FFNUJBLEVBQU1BLEVBQUlzSyxVQUFVLEVBQUd0SyxFQUFJdkosT0FBUyxDQUFDLEdBUXZDLElBQUl3RixFQUFRc04sRUFBa0JwSSxFQUhDbkIsR0FEM0JnSixFQUFnQjdILEVBQUtxRyxFQUFNRSxLQUFLLEdBQUtzQixFQUFnQjdILEVBQUtxRyxFQUFNSyxNQUFNLElBQ3JELFVBQWYsT0FBTzdILEVBQWdDLFNBQVJBLEVBR0ZBLENBQUcsRUFZdEMsT0FUSWdKLEVBQWdCN0gsRUFBS3FHLEVBQU1LLE1BQU0sSUFBTXZLLEVBQVlyQixDQUFLLEdBQXNCLFdBQWpCLE9BQU9BLEtBQ3RFQSxFQUFRc08sSUFLZ0J0TyxFQUR0QitNLEVBQWdCN0gsRUFBS3FHLEVBQU12TyxTQUFTLEdBQUsrUCxFQUFnQjdILEVBQUtxRyxFQUFNQyxNQUFNLEVBQ3hFMVIsTUFBTUMsUUFBUWdLLENBQUcsRUFBV0EsRUFBSTNKLElBQUl5QyxHQUFLRyxTQUFTLEVBQ3pDSCxHQUFLRyxVQUFVK0csQ0FBRyxFQUUxQi9ELENBQ1gsQ0FFRSxTQUFTc04sRUFBbUJwSSxFQUFLbEYsR0FDL0IsSUErVGlCM0YsRUF6VGpCLE9BRjBGMkYsRUFKckYrTSxFQUFnQjdILEVBQUtxRyxFQUFNRyxPQUFPLEdBQU1xQixFQUFnQjdILEVBQUtxRyxFQUFNUyxTQUFTLEdBSTNFdUMsRUE0VEZsVSxPQURhQSxFQTlUcUIyRixLQWlVckIsVUFBYixPQUFPM0YsR0FFUCxDQUFBLENBQUEsaUJBQWlCYyxLQUFLZCxDQUFDLEdBRXZCQSxFQUFXLEVBQVhBLEVBQUVHLFFBQXVCLE1BQVRILEVBQUUsS0FDZiw0Q0FBNENjLEtBQUtkLENBQUMsSUF0VVQ0UCxFQUFjLGtCQUMxRHJKLE9BQU80TixjQUFjeFEsS0FBS3lRLE1BQU16TyxDQUFLLENBQzdDLEdBQ2lDLENBQUNxQixFQUFZckIsQ0FBSyxHQUFLK00sRUFBZ0I3SCxFQUFLcUcsRUFBTUksT0FBTyxHQUUvRTNMLEVBRjJGWSxPQUFPWixDQUFLLENBR2xILENBMENFLFNBQVMwTyxFQUFpQmpDLEVBQVFsSCxHQUNoQ3RMLE9BQU8ySixLQUFLNkksQ0FBTSxFQUFFM0ksUUFBUSxTQUFVb0IsR0FDcEMsSUFBSWxGLEVBQVF5TSxFQUFPdkgsR0FDZnlKLEVBQVVwSixFQUFPQSxFQUFPLElBQU1MLEVBQU1BLEVBS25CLFVBQWpCLE9BQU9sRixHQUFnQyxPQUFWQSxHQUFrQixDQUFDbEcsTUFBTUMsUUFBUWlHLENBQUssR0FBS2lLLEVBQWMsZ0JBRXhGeUUsRUFBZ0IxTyxFQUFPMk8sQ0FBTyxHQUkxQixDQUFDQyxFQUFPdEYsRUFBTXFGLEVBQVE3UixNQUFNLEdBQUcsQ0FBQyxHQUFNeU8sRUFBTU8sVUFBVTZDLElBQWNwRCxFQUFNQyxPQUFPbUQsSUFBWTFFLEVBQWMsb0JBQzdHNEMsRUFBTzhCLEVBQVMzTyxDQUFLLENBRzFCLENBQUEsQ0FDTCxDQVVFLFNBQVM2TyxFQUFjdkYsRUFBTXdGLEdBQzNCLElBRUlDLEVBRnFCLEtBQUEsSUFBZDdELElBRVA2RCxFQUE4QixVQUFyQixPQUFPN0QsRUFBeUJBLEVBQVksR0FDekRqUixPQUFPMkosS0FBS3pLLEVBQVFNLEdBQUcsRUFBRXFLLFFBQVEsU0FBVWtMLEdBQ3pDLElBRU1wTCxFQUZTLEtBQVhtTCxHQUFtRCxJQUFsQ0MsRUFBT0MsWUFBWUYsRUFBUSxDQUFDLElBRTNDbkwsRUFBT29MLEVBQU9sUyxNQUFNLElBQUksRUFBRTFDLElBQUksU0FBVThLLEVBQUtqSyxHQUkvQyxPQUhVLElBQU5BLElBQ0ZpSyxFQUFNQSxFQUFJbUosVUFBVVUsRUFBT3ZVLE1BQU0sR0FFNUJiLEdBQVV1TCxDQUFHLENBQ3JCLENBQUEsRUFFRyxFQUFFNEosR0FBY3ZELEVBQU1NLFFBQVFqSSxFQUFLbkosS0FBSyxHQUFHLElBQU8sQ0FBQ3FVLEtBQWlCRixFQUFPdEYsRUFBTTFGLENBQUksR0FBSzJILENBQUFBLEVBQU1PLFVBQVVsSSxFQUFLbkosS0FBSyxHQUFHLElBQ3pIb1MsRUFBT2pKLEVBQUtuSixLQUFLLEdBQUcsRUFBR3RCLEVBQVFNLElBQUl1VixFQUFPLENBRy9DLENBQUEsRUFDTCxDQStCRSxTQUFTRSxFQUF5QjVQLEVBQUtvSyxFQUFTc0IsR0FDOUMvUSxPQUFPMkosS0FBS29ILENBQVEsRUFBRWxILFFBQVEsU0FBVW9CLEdBQ2pDMEosRUFBT3RQLEVBQUs0RixFQUFJcEksTUFBTSxHQUFHLENBQUMsSUFDN0JrUixFQUFPMU8sRUFBSzRGLEVBQUlwSSxNQUFNLEdBQUcsRUFBR2tPLEVBQVM5RixFQUFJLEdBRXZDd0UsRUFBUXhFLElBQVEsSUFBSXBCLFFBQVEsU0FBVXpKLEdBQ2xDdVUsRUFBT3RQLEVBQUtqRixFQUFFeUMsTUFBTSxHQUFHLENBQUMsR0FDNUJrUixFQUFPMU8sRUFBS2pGLEVBQUV5QyxNQUFNLEdBQUcsRUFBR2tPLEVBQVM5RixFQUFJLENBQ3hDLENBQUEsRUFFSixDQUFBLENBQ0wsQ0FFRSxTQUFTMEosRUFBUXRQLEVBQUtzRSxHQUNwQixJQUFJNkMsRUFBSW5ILEVBUUo0RixJQU5nQ3RCLEVBQS9CcUcsRUFBYyxnQkFFbkJyRyxFQUYyQyxDQUFDQSxFQUFLbkosS0FBSyxHQUFHLElBRXBEVyxNQUFNLEVBQUcsQ0FBRSxDQUFBLEVBQUUwSSxRQUFRLFNBQVVvQixHQUNsQ3VCLEVBQUtBLEVBQUV2QixJQUFRLEVBQ2hCLENBQUEsRUFFU3RCLEVBQUtBLEVBQUtwSixPQUFTLElBRTdCLE1BQWlCLFVBQWIsT0FBT2lNLEdBQ0N2QixLQUFPdUIsQ0FDdkIsQ0FFRSxTQUFTdUgsRUFBUTFPLEVBQUtzRSxFQUFNNUQsR0FDMUIsSUFBSXlHLEVBQUluSCxFQThCRjRGLElBNUI4QnRCLEVBQS9CcUcsRUFBYyxnQkFFbkJyRyxFQUYyQyxDQUFDQSxFQUFLbkosS0FBSyxHQUFHLElBRXBEVyxNQUFNLEVBQUcsQ0FBQSxDQUFFLEVBQUUwSSxRQUFRLFNBQVVvQixFQUFLM0gsR0FHdkMySCxFQUFNaUssR0FBWWpLLENBQUcsRUFFSixVQUFiLE9BQU91QixHQUE2QlIsS0FBQUEsSUFBWFEsRUFBRXZCLEtBQzdCdUIsRUFBRXZCLEdBQU8sSUFZVHVCLEVBVG9CLFVBQWxCLE9BQU9BLEVBQUV2QixJQUFxQnBMLE1BQU1DLFFBQVEwTSxFQUFFdkIsRUFBSSxHQUVoRHBMLE1BQU1DLFFBQVEwTSxFQUFFdkIsRUFBSSxFQUN0QnVCLEVBQUV2QixHQUFLOUcsS0FBSyxFQUFFLEVBRWRxSSxFQUFFdkIsR0FBTyxDQUFDdUIsRUFBRXZCLEdBQU0sSUFJaEJ1QixFQUFFdkIsR0FBS3VCLEVBQUV2QixHQUFLMUssT0FBUyxJQUV2QmlNLEVBQUV2QixFQUVULENBQUEsRUFJV2lLLEdBQVl2TCxFQUFLQSxFQUFLcEosT0FBUyxFQUFFLEdBRXZDNFUsRUFBY3JDLEVBQWdCbkosRUFBS25KLEtBQUssR0FBRyxFQUFHOFEsRUFBTUMsTUFBTSxFQUMxRDZELEVBQWV2VixNQUFNQyxRQUFRaUcsQ0FBSyxFQUN4Q25GLElBQUl5VSxFQUFZckYsRUFBYyw2QkFHMUIsQ0FBQ3FGLEdBQWF2QyxFQUFnQjdILEVBQUtxRyxFQUFNUSxLQUFLLElBQ2hEdUQsRUFBWSxDQUFBLEVBQ1AsQ0FBQ2pPLEVBQVlvRixFQUFFdkIsRUFBSSxHQUEwQixJQUFyQnFHLEVBQU1RLE1BQU03RyxJQUFnQnBMLE1BQU1DLFFBQVEwTSxFQUFFdkIsRUFBSSxHQUFLdUIsRUFBRXZCLEdBQUsxSyxTQUFXK1EsRUFBTVEsTUFBTTdHLE1BQzlHdUIsRUFBRXZCLEdBQU9lLEtBQUFBLEdBSVRqRyxJQUFVc08sR0FDWjdILEVBQUV2QixHQUFPb0osR0FBVTdILEVBQUV2QixFQUFJLEVBQ2hCcEwsTUFBTUMsUUFBUTBNLEVBQUV2QixFQUFJLEVBQ3pCb0ssR0FBYUYsR0FBZUMsRUFDOUI1SSxFQUFFdkIsR0FBTytFLEVBQWMsNEJBQThCeEQsRUFBRXZCLEdBQUs3RyxPQUFPMkIsQ0FBSyxHQUFLbEcsTUFBTUMsUUFBUTBNLEVBQUV2QixHQUFLLEVBQUUsRUFBSXVCLEVBQUV2QixHQUFPLENBQUN1QixFQUFFdkIsS0FBTzdHLE9BQU8sQ0FBQzJCLEVBQU0sRUFDL0hzUCxHQUFhbkQsUUFBUWlELENBQVcsSUFBTWpELFFBQVFrRCxDQUFZLEVBR3BFNUksRUFBRXZCLEdBQU91QixFQUFFdkIsR0FBSzdHLE9BQU8sQ0FBQzJCLEVBQU0sRUFGOUJ5RyxFQUFFdkIsR0FBT2xGLEVBSVNpRyxLQUFBQSxJQUFYUSxFQUFFdkIsSUFBc0JrSyxFQUNqQzNJLEVBQUV2QixHQUFPbUssRUFBZXJQLEVBQVEsQ0FBQ0EsR0FDeEJzUCxHQUFhLEVBQWFySixLQUFBQSxJQUFYUSxFQUFFdkIsSUFBc0I2SCxFQUFnQjdILEVBQUtxRyxFQUFNRSxLQUFLLEdBQUtzQixFQUFnQm5KLEVBQUtuSixLQUFLLEdBQUcsRUFBRzhRLEVBQU1FLEtBQUssR0FBS3NCLEVBQWdCN0gsRUFBS3FHLEVBQU1LLE1BQU0sR0FDdEtuRixFQUFFdkIsR0FBTyxDQUFFdUIsRUFBRXZCLEdBQU1sRixHQUVuQnlHLEVBQUV2QixHQUFPbEYsQ0FFZixDQTBDRSxTQUFTK00sRUFBaUI3SCxFQUFLcUssR0FDN0IsSUFBSUMsRUFBUSxDQUFBLEVBT1osTUFOYyxHQUFHblIsT0FBT2tOLEVBQU03QixRQUFReEUsSUFBUSxHQUFJQSxDQUFHLEVBRTdDcEIsUUFBUSxTQUFVb0IsR0FDcEJxSyxFQUFLckssS0FBTXNLLEVBQVFELEVBQUtySyxHQUM3QixDQUFBLEVBRU1zSyxDQUNYLENBZ0JFLFNBQVN0QyxFQUFjaEksR0FDckIsTUFBSSxDQUFDNkgsRUFBZ0I3SCxFQUFLcUcsRUFBTUUsS0FBSyxHQUNqQyxDQUFDc0IsRUFBZ0I3SCxFQUFLcUcsRUFBTUssTUFBTSxHQUNsQyxHQUFHMUcsS0FBUzhGLEVBQ1BBLEVBQVM5RixHQUVUMEksR0FrQlMxSSxJQUNsQixJQUFJdUssRUFBTyxVQU1YLE9BSkkxQyxFQUFnQjdILEVBQUtxRyxFQUFNRyxPQUFPLEVBQUcrRCxFQUFPLFNBQ3ZDMUMsRUFBZ0I3SCxFQUFLcUcsRUFBTUksT0FBTyxFQUFHOEQsRUFBTyxTQUM1QzFDLEVBQWdCN0gsRUFBS3FHLEVBQU1DLE1BQU0sSUFBR2lFLEVBQU8sU0FFN0NBLENBQ1gsR0ExQnNDdkssQ0FBRyxDQUFDLENBRTFDLENBSUUsU0FBUzBJLEVBQWdCNkIsR0FRdkIsTUFQVSxDQUNSOUgsUUFBUyxDQUFBLEVBQ1QvTSxPQUFRLEdBQ1I4TSxPQUFRekIsS0FBQUEsRUFDUnRCLE1BQU8sRUFDYixFQUVlOEssRUFDZixDQXdCRSxTQUFTcE8sRUFBYXFPLEdBQ3BCLE9BQWV6SixLQUFBQSxJQUFSeUosQ0FDWCxDQUVFLE9BcmdCQWIsRUFBYXZGLEVBQU0sQ0FBQSxDQUFJLEVBQ3ZCdUYsRUFBYXZGLEVBQU0sQ0FBQSxDQUFLLEVBaU1KQSxFQWhNVkEsRUFxTVI0RixFQUpJM0YsRUFBZSxHQUltQmdDLEVBQU03QixRQUFTc0IsQ0FBUSxFQUU3RC9RLE9BQU8ySixLQUFLMkgsRUFBTU0sT0FBTyxFQUFFL0gsUUFBUSxTQUFVNkwsR0FDM0MsSUFBSUMsRUFBYXRHLEVBQUtxRyxJQUFjcEcsRUFBYW9HLEdBQ2pELEdBQUlDLEVBQ0YsSUFDRSxJQUFJbkQsRUFBUyxLQUNUb0QsRUFBcUJoVCxHQUFLSixRQUFRdEQsRUFBUU8sSUFBSyxFQUFFa1csQ0FBVSxFQUUvRCxHQUF3QyxZQUFwQyxPQUFPckUsRUFBTU0sUUFBUThELEdBQTJCLENBQ2xELElBQ0VsRCxFQUFTbEIsRUFBTU0sUUFBUThELEdBQVdFLENBQWtCLENBR2xFLENBRmMsTUFBT3hKLEdBQ1BvRyxFQUFTcEcsQ0FDdkIsQ0FDWSxHQUFJb0csYUFBa0IvSyxNQUVwQixPQURBSSxLQUFBQSxFQUFRMkssUUFJVkEsME5BQWlCb0QsQ0FBa0IsRUFHckNuQixFQUFnQmpDLENBQU0sQ0FHaEMsQ0FGVSxNQUFPcUQsR0FDSHhHLEVBQUtxRyxLQUFZN04sRUFBUUosTUFBTTRKLEVBQUcsK0JBQWdDc0UsQ0FBVSxDQUFDLEVBQzNGLENBRUssQ0FBQSxFQTRCNEIsS0FBQSxJQUFsQjNFLEdBQ1hBLEVBQWNuSCxRQUFRLFNBQVVpTSxHQUM5QnJCLEVBQWdCcUIsQ0FBWSxDQUM3QixDQUFBLEVBOVBIYixFQUF3QjVGLEVBQU1pQyxFQUFNN0IsUUFBU3NCLENBQVEsRUFzUjVCMUIsRUFyUlZBLEVBdVJURyxFQUFVLEdBQ2R4UCxPQUFPMkosS0FBSzBGLENBQUksRUFBRXhGLFFBQVEsU0FBVW9CLEdBQ2xDLEdBQUksQ0FBQ3VFLEVBQVF6RSxlQUFlRSxDQUFHLEdBRVAsWUFBbEIsT0FESnNFLEVBQVN1RCxFQUFnQjdILEVBQUtxRyxFQUFNUyxTQUFTLEdBRTNDLElBQ0UsSUFBSWhNLEVBQVF3SixFQUFPRixFQUFLcEUsRUFBSSxFQUMxQixHQUFHN0csT0FBT2tOLEVBQU03QixRQUFReEUsSUFBUSxHQUFJQSxDQUFJLEVBQUVwQixRQUFRa00sSUFDbER2RyxFQUFRdUcsR0FBTzFHLEVBQUswRyxHQUFPaFEsQ0FDNUIsQ0FBQSxDQUdiLENBRlksTUFBT2lRLEdBQ1BuTyxFQUFRbU8sQ0FDcEIsQ0FHSyxDQUFBLEVBclNDaEcsRUFBYyx5QkF3U1dYLEVBeFNnQ0EsRUF5UzNEaUMsRUFBTTNILEtBQUtFLFFBQVEsSUFFYixDQUFDb0IsRUFBSWYsUUFBUSxHQUFHLEdBQ0ssS0FBQSxJQUFkbUYsRUFBS3BFLEtBQXNCb0UsRUFBS3BFLEdBQU9lLEtBQUFBLEVBQ25ELENBQUEsR0ExU0hoTSxPQUFPMkosS0FBSzJILEVBQU1LLE1BQU0sRUFBRTlILFFBQVEsU0FBVW9CLEdBQ3JDMEosRUFBT3RGLEVBQU1wRSxFQUFJcEksTUFBTSxHQUFHLENBQUMsR0FBRytQLEVBQU8zSCxFQUFLLENBQUMsQ0FDakQsQ0FBQSxFQUdHaUcsR0FBa0J5QixFQUFTcFMsU0FBUThPLEVBQUs4QixHQUFnQixJQUM1RHdCLEVBQVM5SSxRQUFRLFNBQVVvQixHQUN6Qm9FLEVBQUs4QixHQUFjaE4sS0FBSzhHLENBQUcsQ0FDNUIsQ0FBQSxFQUVHK0UsRUFBYyx5QkFBMkJBLEVBQWMsaUJBQ3pEaFEsT0FBTzJKLEtBQUswRixDQUFJLEVBQUUvTyxPQUFPMkssR0FBZSxPQUFSQSxHQUFnQkEsRUFBSWdMLFNBQVMsR0FBRyxDQUFDLEVBQUVwTSxRQUFRb0IsSUFDekUsT0FBT29FLEVBQUtwRSxFQUNiLENBQUEsRUFHQytFLEVBQWMsa0JBRWYsR0FBRzVMLE9BQU8sR0FBR3BFLE9BQU8ySixLQUFLOEYsQ0FBTyxFQUFFdFAsSUFBSW9TLEdBQUs5QyxFQUFROEMsRUFBRSxDQUFDLEVBQUUxSSxRQUFRa0csSUFDM0RDLEVBQWMseUJBQ2hCLE9BQU9YLEVBQUtVLEVBQU1sTixNQUFNLEdBQUcsRUFBRTFDLElBQUlxTyxHQUFROU8sR0FBVThPLENBQUksQ0FBQyxFQUFFaE8sS0FBSyxHQUFHLEdBR3BFLE9BQU82TyxFQUFLVSxFQUNiLENBQUEsRUFvZUksQ0FDTFYsS0FBTUEsRUFDTnhILE1BQU9BLEVBQ1A0SCxRQUFTNkIsRUFBTTdCLFFBQ2YyQixXQUFZQSxFQUNacEIsY0FBZUEsQ0FDbkIsQ0FDQSxDQW9EQSxTQUFTcUUsR0FBVzZCLEdBQ2xCLE9BQWdCbEssS0FBQUEsSUFBVGtLLEVBQXFCQSxFQUFPLEVBQUksQ0FDekMsQ0FFQSxTQUFTQyxHQUFRMVAsRUFBTTJCLEdBR3JCLE9BRmFnSCxHQUFNM0ksRUFBS3RGLE1BQU8sRUFBRWlILENBQUksRUFFdkJpSCxJQUNoQixDQVVBLFNBQVM2RixHQUFhakssR0FDcEIsTUFBWSxjQUFSQSxFQUE0QixjQUN6QkEsQ0FDVCxDQVRBa0wsR0FBT0MsU0FBVyxTQUFVM1AsRUFBTTJCLEdBQ2hDLE9BQU9nSCxHQUFNM0ksRUFBS3RGLE1BQUssRUFBSWlILENBQUksQ0FDakMsRUcxNEJ3QixTQUFwQmlPLEdBQStDdFEsR0FDbEQsTUFBT3VRLEVBS0MsRUFEZ0J2USxFQUpEQSxJQUtZLFVBQWpCLE9BQU9BLElBR1BBLEVBUEhBLEVBVVEscUJBRm5Cd1EsRUFBY3ZXLE9BQU9vRCxVQUFVa0gsU0FBU2pILEtBQUswQyxDQUFLLEtBR2xDLGtCQUFoQndRLElBUW1CeFEsR0FDaEJBLEVBQU15USxXQUFhQyxJQVJQMVEsQ0FBSyxHQUx6QixJQUp5QkEsQ0FGekIsQ0hnNUJBLFNBQWlCb1EsSUdqNEJqQixJQUNJTSxHQURpQyxZQUFsQixPQUFPQyxRQUF5QkEsT0FBT0MsSUFDbEJELE9BQU9DLElBQUksZUFBZSxFQUFJLE1BVXRFLFNBQVNDLEdBQThCN1EsRUFBT25HLEdBQzdDLE1BQTBCLENBQUEsSUFBbEJBLEVBQVFpWCxPQUFtQmpYLEVBQVF5VyxrQkFBa0J0USxDQUFLLEVBQy9EK1EsR0FMSWpYLE1BQU1DLFFBS1lpRyxDQUxELEVBQUksR0FBSyxHQUtBQSxFQUFPbkcsQ0FBTyxFQUM1Q21HLENBQ0osQ0FFQSxTQUFTZ1IsR0FBa0JDLEVBQVFDLEVBQVFyWCxHQUMxQyxPQUFPb1gsRUFBTzVTLE9BQU82UyxDQUFNLEVBQUU5VyxJQUFJLFNBQVMrVyxHQUN6QyxPQUFPTixHQUE4Qk0sRUFBU3RYLENBQU8sQ0FDckQsQ0FBQSxDQUNGLENBbUJBLFNBQVNrWCxHQUFVRSxFQUFRQyxFQUFRclgsSUFDbENBLEVBQVVBLEdBQVcsSUFDYnVYLFdBQWF2WCxFQUFRdVgsWUFBY0osR0FDM0NuWCxFQUFReVcsa0JBQW9CelcsRUFBUXlXLG1CQUFxQkEsR0FFekQsSUF0Qm9CVyxFQUFRQyxFQUFRclgsRUFDaEN3WCxFQXFCQUMsRUFBZ0J4WCxNQUFNQyxRQUFRbVgsQ0FBTSxFQUl4QyxPQUZnQ0ksSUFEWnhYLE1BQU1DLFFBQVFrWCxDQUFNLEVBSzdCSyxFQUNIelgsRUFBUXVYLFdBQVdILEVBQVFDLEVBQVFyWCxDQUFPLEdBN0I5Qm9YLEVBK0JBQSxFQS9CUUMsRUErQkFBLEVBOUJ4QkcsRUFBYyxJQURrQnhYLEVBK0JBQSxHQTdCeEJ5VyxrQkFBa0JXLENBQU0sR0FDbkNoWCxPQUFPMkosS0FBS3FOLENBQU0sRUFBRW5OLFFBQVEsU0FBU29CLEdBQ3BDbU0sRUFBWW5NLEdBQU8yTCxHQUE4QkksRUFBTy9MLEdBQU1yTCxDQUFPLENBQ3hFLENBQUcsRUFFRkksT0FBTzJKLEtBQUtzTixDQUFNLEVBQUVwTixRQUFRLFNBQVNvQixHQUMvQnJMLEVBQVF5VyxrQkFBa0JZLEVBQU9oTSxFQUFJLEdBQU0rTCxFQUFPL0wsR0FHdERtTSxFQUFZbk0sR0FBTzZMLEdBQVVFLEVBQU8vTCxHQUFNZ00sRUFBT2hNLEdBQU1yTCxDQUFPLEVBRjlEd1gsRUFBWW5NLEdBQU8yTCxHQUE4QkssRUFBT2hNLEdBQU1yTCxDQUFPLENBSXhFLENBQUUsRUFDTXdYLEdBYUNSLEdBQThCSyxFQUFRclgsQ0FBTyxDQU10RCxDQUVBa1gsR0FBVVEsSUFBTSxTQUFzQjVNLEVBQU85SyxHQUM1QyxHQUFLQyxNQUFNQyxRQUFRNEssQ0FBSyxFQUl4QixPQUFPQSxFQUFNVyxPQUFPLFNBQVNDLEVBQU11SCxHQUNsQyxPQUFPaUUsR0FBVXhMLEVBQU11SCxFQUFNalQsQ0FBTyxDQUN0QyxFQUFJLEVBQUUsRUFMSixNQUFNLElBQUk2SCxNQUFNLG1DQUFtQyxDQU1yRCxFQUVBLElBQUk4UCxHQUFjVCxrQkN0RmxCLElBQU1VLEdBQVFkLE9BQU9DLElBQUksWUFBWSxFQUMvQmMsR0FBTWYsT0FBT0MsSUFBSSxlQUFlLEVBQ2hDZSxHQUFNaEIsT0FBT0MsSUFBSSxVQUFVLEVBQzNCZ0IsR0FBT2pCLE9BQU9DLElBQUksV0FBVyxFQUM3QmlCLEVBQVNsQixPQUFPQyxJQUFJLGFBQWEsRUFDakNrQixHQUFNbkIsT0FBT0MsSUFBSSxVQUFVLEVBQzNCbUIsRUFBWXBCLE9BQU9DLElBQUksZ0JBQWdCLEVBQ3ZDb0IsRUFBVSxHQUFVLENBQUMsQ0FBQ0MsR0FBd0IsVUFBaEIsT0FBT0EsR0FBcUJBLEVBQUtGLEtBQWVOLEdBQzlFUyxHQUFhLEdBQVUsQ0FBQyxDQUFDRCxHQUF3QixVQUFoQixPQUFPQSxHQUFxQkEsRUFBS0YsS0FBZUwsR0FDakZTLEdBQVEsR0FBVSxDQUFDLENBQUNGLEdBQXdCLFVBQWhCLE9BQU9BLEdBQXFCQSxFQUFLRixLQUFlSixHQUM1RVMsRUFBUyxHQUFVLENBQUMsQ0FBQ0gsR0FBd0IsVUFBaEIsT0FBT0EsR0FBcUJBLEVBQUtGLEtBQWVILEdBQzdFUyxFQUFXLEdBQVUsQ0FBQyxDQUFDSixHQUF3QixVQUFoQixPQUFPQSxHQUFxQkEsRUFBS0YsS0FBZUYsRUFDL0VTLEdBQVEsR0FBVSxDQUFDLENBQUNMLEdBQXdCLFVBQWhCLE9BQU9BLEdBQXFCQSxFQUFLRixLQUFlRCxHQUNsRixTQUFTUyxFQUFhTixHQUNsQixHQUFJQSxHQUF3QixVQUFoQixPQUFPQSxFQUNmLE9BQVFBLEVBQUtGLElBQ1QsS0FBS0osR0FDTCxLQUFLRyxHQUNELE1BQU8sQ0FBQSxDQUN2QixDQUNJLE1BQU8sQ0FBQSxDQUNYLENBQ0EsU0FBU1UsRUFBT1AsR0FDWixHQUFJQSxHQUF3QixVQUFoQixPQUFPQSxFQUNmLE9BQVFBLEVBQUtGLElBQ1QsS0FBS04sR0FDTCxLQUFLRSxHQUNMLEtBQUtFLEVBQ0wsS0FBS0MsR0FDRCxNQUFPLENBQUEsQ0FDdkIsQ0FDSSxNQUFPLENBQUEsQ0FDWCxDQUNBLElDL0JNVyxFQUFROUIsT0FBTyxhQUFhLEVBQzVCK0IsR0FBTy9CLE9BQU8sZUFBZSxFQUNuQyxJQUFNZ0MsRUFBU2hDLE9BQU8sYUFBYSxFQStCbkMsU0FBU2lDLEVBQU1YLEVBQU1ZLEdBQ1hDLEVBQVdDLEdBQVlGLENBQU8sRUFDaENYLEdBQVdELENBQUksRUFDSmUsR0FBTyxLQUFNZixFQUFLZ0IsU0FBVUgsRUFBVTdZLE9BQU9pWixPQUFPLENBQUNqQixFQUFLLENBQUMsSUFDM0RVLElBQ1BWLEVBQUtnQixTQUFXLE1BR3BCRCxHQUFPLEtBQU1mLEVBQU1hLEVBQVU3WSxPQUFPaVosT0FBTyxFQUFFLENBQUMsQ0FDdEQsQ0FVQSxTQUFTRixHQUFPOU4sRUFBSytNLEVBQU1ZLEVBQVNoVyxHQUNoQyxJQUFNc1csRUFBT0MsR0FBWWxPLEVBQUsrTSxFQUFNWSxFQUFTaFcsQ0FBSSxFQUNqRCxHQUFJMlYsRUFBT1csQ0FBSSxHQUFLZixFQUFPZSxDQUFJLEVBRTNCLE9BREFFLEdBQVluTyxFQUFLckksRUFBTXNXLENBQUksRUFDcEJILEdBQU85TixFQUFLaU8sRUFBTU4sRUFBU2hXLENBQUksRUFFMUMsR0FBb0IsVUFBaEIsT0FBT3NXLEVBQ1AsR0FBSVosRUFBYU4sQ0FBSSxFQUFHLENBQ3BCcFYsRUFBTzVDLE9BQU9pWixPQUFPclcsRUFBS3dCLE9BQU80VCxDQUFJLENBQUMsRUFDdEMsSUFBS3BYLElBQUlJLEVBQUksRUFBR0EsRUFBSWdYLEVBQUtxQixNQUFNOVksT0FBUSxFQUFFUyxFQUFHLENBQ3hDLElBQU1zWSxFQUFLUCxHQUFPL1gsRUFBR2dYLEVBQUtxQixNQUFNclksR0FBSTRYLEVBQVNoVyxDQUFJLEVBQ2pELEdBQWtCLFVBQWQsT0FBTzBXLEVBQ1B0WSxFQUFJc1ksRUFBSyxNQUNSLENBQUEsR0FBSUEsSUFBT2QsRUFDWixPQUFPQSxFQUNGYyxJQUFPWixJQUNaVixFQUFLcUIsTUFBTW5YLE9BQU9sQixFQUFHLENBQUMsRUFDdEJBLEVBQUFBLEVBQ3BCLENBQ0EsQ0FDQSxNQUNhLEdBQUltWCxFQUFPSCxDQUFJLEVBQUcsQ0FDbkJwVixFQUFPNUMsT0FBT2laLE9BQU9yVyxFQUFLd0IsT0FBTzRULENBQUksQ0FBQyxFQUNoQ3VCLEVBQUtSLEdBQU8sTUFBT2YsRUFBSy9NLElBQUsyTixFQUFTaFcsQ0FBSSxFQUNoRCxHQUFJMlcsSUFBT2YsRUFDUCxPQUFPQSxFQUNGZSxJQUFPYixJQUNaVixFQUFLL00sSUFBTSxNQUNUdU8sRUFBS1QsR0FBTyxRQUFTZixFQUFLalMsTUFBTzZTLEVBQVNoVyxDQUFJLEVBQ3BELEdBQUk0VyxJQUFPaEIsRUFDUCxPQUFPQSxFQUNGZ0IsSUFBT2QsSUFDWlYsRUFBS2pTLE1BQVEsS0FDN0IsQ0FFSSxPQUFPbVQsQ0FDWCxDQWdDQU8sZUFBZUMsR0FBVzFCLEVBQU1ZLEdBQ3RCQyxFQUFXQyxHQUFZRixDQUFPLEVBQ2hDWCxHQUFXRCxDQUFJLEVBQ0oyQixNQUFNQyxHQUFZLEtBQU01QixFQUFLZ0IsU0FBVUgsRUFBVTdZLE9BQU9pWixPQUFPLENBQUNqQixFQUFLLENBQUMsSUFDdEVVLElBQ1BWLEVBQUtnQixTQUFXLE1BR3BCVyxNQUFNQyxHQUFZLEtBQU01QixFQUFNYSxFQUFVN1ksT0FBT2laLE9BQU8sRUFBRSxDQUFDLENBQ2pFLENBVUFRLGVBQWVHLEdBQVkzTyxFQUFLK00sRUFBTVksRUFBU2hXLEdBQzNDLElBQU1zVyxFQUFPUyxNQUFNUixHQUFZbE8sRUFBSytNLEVBQU1ZLEVBQVNoVyxDQUFJLEVBQ3ZELEdBQUkyVixFQUFPVyxDQUFJLEdBQUtmLEVBQU9lLENBQUksRUFFM0IsT0FEQUUsR0FBWW5PLEVBQUtySSxFQUFNc1csQ0FBSSxFQUNwQlUsR0FBWTNPLEVBQUtpTyxFQUFNTixFQUFTaFcsQ0FBSSxFQUUvQyxHQUFvQixVQUFoQixPQUFPc1csRUFDUCxHQUFJWixFQUFhTixDQUFJLEVBQUcsQ0FDcEJwVixFQUFPNUMsT0FBT2laLE9BQU9yVyxFQUFLd0IsT0FBTzRULENBQUksQ0FBQyxFQUN0QyxJQUFLcFgsSUFBSUksRUFBSSxFQUFHQSxFQUFJZ1gsRUFBS3FCLE1BQU05WSxPQUFRLEVBQUVTLEVBQUcsQ0FDeEMsSUFBTXNZLEVBQUtLLE1BQU1DLEdBQVk1WSxFQUFHZ1gsRUFBS3FCLE1BQU1yWSxHQUFJNFgsRUFBU2hXLENBQUksRUFDNUQsR0FBa0IsVUFBZCxPQUFPMFcsRUFDUHRZLEVBQUlzWSxFQUFLLE1BQ1IsQ0FBQSxHQUFJQSxJQUFPZCxFQUNaLE9BQU9BLEVBQ0ZjLElBQU9aLElBQ1pWLEVBQUtxQixNQUFNblgsT0FBT2xCLEVBQUcsQ0FBQyxFQUN0QkEsRUFBQUEsRUFDcEIsQ0FDQSxDQUNBLE1BQ2EsR0FBSW1YLEVBQU9ILENBQUksRUFBRyxDQUNuQnBWLEVBQU81QyxPQUFPaVosT0FBT3JXLEVBQUt3QixPQUFPNFQsQ0FBSSxDQUFDLEVBQ2hDdUIsRUFBS0ksTUFBTUMsR0FBWSxNQUFPNUIsRUFBSy9NLElBQUsyTixFQUFTaFcsQ0FBSSxFQUMzRCxHQUFJMlcsSUFBT2YsRUFDUCxPQUFPQSxFQUNGZSxJQUFPYixJQUNaVixFQUFLL00sSUFBTSxNQUNUdU8sRUFBS0csTUFBTUMsR0FBWSxRQUFTNUIsRUFBS2pTLE1BQU82UyxFQUFTaFcsQ0FBSSxFQUMvRCxHQUFJNFcsSUFBT2hCLEVBQ1AsT0FBT0EsRUFDRmdCLElBQU9kLElBQ1pWLEVBQUtqUyxNQUFRLEtBQzdCLENBRUksT0FBT21ULENBQ1gsQ0FDQSxTQUFTSixHQUFZRixHQUNqQixNQUF1QixVQUFuQixPQUFPQSxJQUNOQSxFQUFRaUIsWUFBY2pCLEVBQVFrQixNQUFRbEIsRUFBUW1CLE9BQ3hDL1osT0FBT0MsT0FBTyxDQUNqQitaLE1BQU9wQixFQUFRa0IsS0FDZkcsSUFBS3JCLEVBQVFrQixLQUNiSSxPQUFRdEIsRUFBUWtCLEtBQ2hCSyxJQUFLdkIsRUFBUWtCLElBQ3pCLEVBQVdsQixFQUFRbUIsT0FBUyxDQUNoQkUsSUFBS3JCLEVBQVFtQixNQUNiRyxPQUFRdEIsRUFBUW1CLE1BQ2hCSSxJQUFLdkIsRUFBUW1CLEtBQ3pCLEVBQVduQixFQUFRaUIsWUFBYyxDQUNyQkksSUFBS3JCLEVBQVFpQixXQUNiTSxJQUFLdkIsRUFBUWlCLFVBQ2hCLEVBQUVqQixDQUFPLEVBRVBBLENBQ1gsQ0FDQSxTQUFTTyxHQUFZbE8sRUFBSytNLEVBQU1ZLEVBQVNoVyxHQUNyQyxNQUF1QixZQUFuQixPQUFPZ1csRUFDQUEsRUFBUTNOLEVBQUsrTSxFQUFNcFYsQ0FBSSxFQUM5QnNWLEdBQU1GLENBQUksRUFDSFksRUFBUXFCLE1BQU1oUCxFQUFLK00sRUFBTXBWLENBQUksRUFDcEN5VixHQUFNTCxDQUFJLEVBQ0hZLEVBQVF1QixNQUFNbFAsRUFBSytNLEVBQU1wVixDQUFJLEVBQ3BDdVYsRUFBT0gsQ0FBSSxFQUNKWSxFQUFRd0IsT0FBT25QLEVBQUsrTSxFQUFNcFYsQ0FBSSxFQUNyQ3dWLEVBQVNKLENBQUksRUFDTlksRUFBUXNCLFNBQVNqUCxFQUFLK00sRUFBTXBWLENBQUksRUFDdkNtVixFQUFRQyxDQUFJLEVBQ0xZLEVBQVFvQixRQUFRL08sRUFBSytNLEVBQU1wVixDQUFJLEVBRDFDLEtBQUEsQ0FHSixDQUNBLFNBQVN3VyxHQUFZbk8sRUFBS3JJLEVBQU1vVixHQUN0QnFDLEVBQVN6WCxFQUFLQSxFQUFLckMsT0FBUyxHQUNsQyxHQUFJK1gsRUFBYStCLENBQU0sRUFDbkJBLEVBQU9oQixNQUFNcE8sR0FBTytNLE9BRW5CLEdBQUlHLEVBQU9rQyxDQUFNLEVBQ04sUUFBUnBQLEVBQ0FvUCxFQUFPcFAsSUFBTStNLEVBRWJxQyxFQUFPdFUsTUFBUWlTLE1BRWxCLENBQUEsR0FBSUMsQ0FBQUEsR0FBV29DLENBQU0sRUFLdEIsTUFETUMsRUFBS3ZDLEVBQVFzQyxDQUFNLEVBQUksUUFBVSxTQUNqQyxJQUFJNVMsa0NBQWtDNlMsVUFBVyxFQUp2REQsRUFBT3JCLFNBQVdoQixDQUsxQixDQUNBLENBckxLdUMsRUFBQy9CLE1BQVFBLEVBRVQrQixFQUFDOUIsS0FBT0EsR0FFUjhCLEVBQUM3QixPQUFTQSxFQW1GZmdCLEdBQVdsQixNQUFRQSxFQUVuQmtCLEdBQVdqQixLQUFPQSxHQUVsQmlCLEdBQVdoQixPQUFTQSxFQ3pJcEIsSUFBTThCLEdBQWMsQ0FDaEJDLElBQUssTUFDTEMsSUFBSyxNQUNMQyxJQUFLLE1BQ0xDLElBQUssTUFDTEMsSUFBSyxNQUNMQyxJQUFLLEtBQ1QsUUFFTUMsRUFDRnRWLFlBQVl1VixFQUFNQyxHQUtkM1QsS0FBSzRULFNBQVcsS0FFaEI1VCxLQUFLNlQsT0FBUyxDQUFBLEVBQ2Q3VCxLQUFLMFQsS0FBT2hiLE9BQU9DLE9BQU8sR0FBSThhLEVBQVdLLFlBQWFKLENBQUksRUFDMUQxVCxLQUFLMlQsS0FBT2piLE9BQU9DLE9BQU8sR0FBSThhLEVBQVdNLFlBQWFKLENBQUksQ0FDbEUsQ0FDSXBFLFFBQ0ksSUFBTXlFLEVBQU8sSUFBSVAsRUFBV3pULEtBQUswVCxLQUFNMVQsS0FBSzJULElBQUksRUFFaEQsT0FEQUssRUFBS0osU0FBVzVULEtBQUs0VCxTQUNkSSxDQUNmLENBS0lDLGFBQ0ksSUFBTXRXLEVBQU0sSUFBSThWLEVBQVd6VCxLQUFLMFQsS0FBTTFULEtBQUsyVCxJQUFJLEVBQy9DLE9BQVEzVCxLQUFLMFQsS0FBS1EsU0FDZCxJQUFLLE1BQ0RsVSxLQUFLbVUsZUFBaUIsQ0FBQSxFQUN0QixNQUNKLElBQUssTUFDRG5VLEtBQUttVSxlQUFpQixDQUFBLEVBQ3RCblUsS0FBSzBULEtBQU8sQ0FDUlUsU0FBVVgsRUFBV0ssWUFBWU0sU0FDakNGLFFBQVMsS0FDWixFQUNEbFUsS0FBSzJULEtBQU9qYixPQUFPQyxPQUFPLEdBQUk4YSxFQUFXTSxXQUFXLENBRXBFLENBQ1EsT0FBT3BXLENBQ2YsQ0FLSXNKLElBQUk1QyxFQUFNZ1EsR0FDRnJVLEtBQUttVSxpQkFDTG5VLEtBQUswVCxLQUFPLENBQUVVLFNBQVVYLEVBQVdLLFlBQVlNLFNBQVVGLFFBQVMsS0FBTyxFQUN6RWxVLEtBQUsyVCxLQUFPamIsT0FBT0MsT0FBTyxHQUFJOGEsRUFBV00sV0FBVyxFQUNwRC9ULEtBQUttVSxlQUFpQixDQUFBLEdBRTFCLElBU3VCM0csRUFVUjBHLEVBbkJUMVosRUFBUTZKLEVBQUt0TCxLQUFJLEVBQUd3QyxNQUFNLFFBQVEsRUFDbEN1SCxFQUFPdEksRUFBTW1TLE1BQU8sRUFDMUIsT0FBUTdKLEdBQ0osSUFBSyxPQUNELE9BQXFCLElBQWpCdEksRUFBTXZCLFNBQ05vYixFQUFRLEVBQUcsaURBQWlELEVBQ3hEN1osRUFBTXZCLE9BQVMsR0FDUixDQUFBLEdBRVQsQ0FBQ3FiLEVBQVE5RyxHQUFVaFQsRUFDekJ3RixLQUFLMlQsS0FBS1csR0FBVTlHLEVBQ2IsQ0FBQSxHQUVYLElBQUssUUFFRCxPQURBeE4sS0FBSzBULEtBQUtVLFNBQVcsQ0FBQSxFQUNBLElBQWpCNVosRUFBTXZCLFFBQ05vYixFQUFRLEVBQUcsaURBQWlELEVBQ3JELENBQUEsSUFFTCxDQUFDSCxHQUFXMVosRUFDRixRQUFaMFosR0FBaUMsUUFBWkEsR0FDckJsVSxLQUFLMFQsS0FBS1EsUUFBVUEsRUFDYixDQUFBLElBSVBHLEVBQVEsRUFBRyw0QkFBNEJILEVBRHZCLGFBQWF0YSxLQUFLc2EsQ0FBTyxDQUNnQixFQUNsRCxDQUFBLElBR2YsUUFFSSxPQURBRyxFQUFRLEVBQUcscUJBQXFCdlIsRUFBUSxDQUFBLENBQUksRUFDckMsQ0FBQSxDQUN2QixDQUNBLENBT0l5UixRQUFRNUUsRUFBUTBFLEdBQ1osR0FBZSxNQUFYMUUsRUFDQSxNQUFPLElBQ1gsR0FBa0IsTUFBZEEsRUFBTyxHQUNQMEUsRUFBUSxvQkFBb0IxRSxDQUFRLE1BRHhDLENBSUEsR0FBa0IsTUFBZEEsRUFBTyxHQUVQLE1BQWlCLE9BRFg2RSxFQUFXN0UsRUFBTzlWLE1BQU0sRUFBRyxDQUFBLENBQUUsSUFDRSxPQUFiMmEsR0FDcEJILHVDQUE2QzFFLGVBQW9CLEVBQzFELE9BRXVCLE1BQTlCQSxFQUFPQSxFQUFPMVcsT0FBUyxJQUN2Qm9iLEVBQVEsaUNBQWlDLEVBQ3RDRyxHQUVYLEdBQU0sQ0FBQSxDQUFHRixFQUFRRyxHQUFVOUUsRUFBTy9MLE1BQU0saUJBQWlCLEVBR25ENEosR0FGRGlILEdBQ0RKLFNBQWUxRSxxQkFBMEIsRUFDOUIzUCxLQUFLMlQsS0FBS1csSUFDekIsR0FBSTlHLEVBQ0EsSUFDSSxPQUFPQSxFQUFTa0gsbUJBQW1CRCxDQUFNLENBS3pELENBSFksTUFBT2xVLEdBRUgsT0FEQThULEVBQVFqVixPQUFPbUIsQ0FBSyxDQUFDLEVBQ2QsSUFDdkIsQ0FFUSxHQUFlLE1BQVgrVCxFQUNBLE9BQU8zRSxFQUNYMEUsRUFBUSwwQkFBMEIxRSxDQUFRLENBMUJsRCxDQTJCUSxPQUFPLElBQ2YsQ0FLSWdGLFVBQVVDLEdBQ04sSUFBSyxHQUFNLENBQUNOLEVBQVE5RyxLQUFXOVUsT0FBT21jLFFBQVE3VSxLQUFLMlQsSUFBSSxFQUNuRCxHQUFJaUIsRUFBSUUsV0FBV3RILENBQU0sRUFDckIsT0FBTzhHLEVBQXVCTSxFQUFJOUgsVUFBVVUsRUFBT3ZVLE1BQU0sRUFwSXhDYSxRQUFRLGFBQWNpYixHQUFNN0IsR0FBWTZCLEVBQUcsRUFzSXBFLE1BQWtCLE1BQVhILEVBQUksR0FBYUEsT0FBV0EsSUFDM0MsQ0FDSTVSLFNBQVNnUyxHQUNMLElBQU1DLEVBQVFqVixLQUFLMFQsS0FBS1UsU0FDbEIsQ0FBQyxVQUFTcFUsS0FBSzBULEtBQUtRLFNBQVcsUUFDL0IsR0FDQWdCLEVBQWF4YyxPQUFPbWMsUUFBUTdVLEtBQUsyVCxJQUFJLEVBQzNDcmEsSUFBSTZiLEVBQ0osR0FBSUgsR0FBMkIsRUFBcEJFLEVBQVdqYyxRQUFjZ1ksRUFBTytELEVBQUl0RCxRQUFRLEVBQUcsQ0FDdEQsSUFBTWlDLEVBQU8sR0FDYnRDLEVBQU0yRCxFQUFJdEQsU0FBVSxDQUFDMEQsRUFBTTFFLEtBQ25CTyxFQUFPUCxDQUFJLEdBQUtBLEVBQUtrRSxNQUNyQmpCLEVBQUtqRCxFQUFLa0UsS0FBTyxDQUFBLEVBQ3JDLENBQWEsRUFDRE8sRUFBV3pjLE9BQU8ySixLQUFLc1IsQ0FBSSxDQUN2QyxNQUVZd0IsRUFBVyxHQUNmLElBQUssR0FBTSxDQUFDYixFQUFROUcsS0FBVzBILEVBQ1osT0FBWFosR0FBOEIsdUJBQVg5RyxHQUVsQndILEdBQU9HLENBQUFBLEVBQVNFLEtBQUtDLEdBQU1BLEVBQUdSLFdBQVd0SCxDQUFNLENBQUMsR0FDakR5SCxFQUFNcFksYUFBYXlYLEtBQVU5RyxDQUFRLEVBRTdDLE9BQU95SCxFQUFNL2IsS0FBSyxJQUFJLENBQzlCLENBQ0EsQ0NuS0EsU0FBU3FjLEdBQWNDLEdBQ25CLEdBQUksc0JBQXNCNWIsS0FBSzRiLENBQU0sRUFHakMsTUFGTUMsRUFBS25XLEtBQUtDLFVBQVVpVyxDQUFNLEVBRTFCLElBQUlyVixNQURFLDZEQUE2RHNWLENBQ3RELEVBRXZCLE9BQU8sQ0FDWCxDQUNBLFNBQVNDLEdBQVl6WSxHQUNqQixJQUFNMFksRUFBVSxJQUFJQyxJQU9wQixPQU5BdkUsRUFBTXBVLEVBQU0sQ0FDUndWLE1BQU0yQyxFQUFNMUUsR0FDSkEsRUFBSzhFLFFBQ0xHLEVBQVExTyxJQUFJeUosRUFBSzhFLE1BQU0sQ0FDdkMsQ0FDQSxDQUFLLEVBQ01HLENBQ1gsQ0FFQSxTQUFTRSxHQUFjckksRUFBUXNJLEdBQzNCLElBQUt4YyxJQUFJSSxFQUFJLEdBQVMsRUFBRUEsRUFBRyxDQUFYLEVBQVcsQ0FDdkIsSUFBTW9KLEVBQU8sR0FBRzBLLEVBQVM5VCxFQUN6QixHQUFJLENBQUNvYyxFQUFRQyxJQUFJalQsQ0FBSSxFQUNqQixPQUFPQSxDQUNuQixDQUFBLENBQ0EsQ0MxQkEsU0FBU2tULEdBQWFDLEVBQVNsWSxFQUFLNEYsRUFBS25CLEdBQ3JDLEdBQUlBLEdBQXNCLFVBQWYsT0FBT0EsRUFDZCxHQUFJakssTUFBTUMsUUFBUWdLLENBQUcsRUFDakIsSUFBS2xKLElBQUlJLEVBQUksRUFBR21FLEVBQU0yRSxFQUFJdkosT0FBUVMsRUFBSW1FLEVBQUssRUFBRW5FLEVBQUcsQ0FDNUMsSUFBTXdjLEVBQUsxVCxFQUFJOUksR0FDVHljLEVBQUtILEdBQWFDLEVBQVN6VCxFQUFLcEQsT0FBTzFGLENBQUMsRUFBR3djLENBQUUsRUFFeEN4UixLQUFBQSxJQUFQeVIsRUFDQSxPQUFPM1QsRUFBSTlJLEdBQ055YyxJQUFPRCxJQUNaMVQsRUFBSTlJLEdBQUt5YyxFQUM3QixNQUVhLEdBQUkzVCxhQUFlbVEsSUFDcEIsSUFBSyxJQUFNMUgsS0FBSzFTLE1BQU0yRCxLQUFLc0csRUFBSUgsS0FBSSxDQUFFLEVBQUcsQ0FDcEMsSUFBTTZULEVBQUsxVCxFQUFJNEIsSUFBSTZHLENBQUMsRUFDZGtMLEVBQUtILEdBQWFDLEVBQVN6VCxFQUFLeUksRUFBR2lMLENBQUUsRUFDaEN4UixLQUFBQSxJQUFQeVIsRUFDQTNULEVBQUk0VCxPQUFPbkwsQ0FBQyxFQUNQa0wsSUFBT0QsR0FDWjFULEVBQUk3QixJQUFJc0ssRUFBR2tMLENBQUUsQ0FDakMsTUFFYSxHQUFJM1QsYUFBZW9ULElBQ3BCLElBQUssSUFBTU0sS0FBTTNkLE1BQU0yRCxLQUFLc0csQ0FBRyxFQUFHLENBQzlCLElBQU0yVCxFQUFLSCxHQUFhQyxFQUFTelQsRUFBSzBULEVBQUlBLENBQUUsRUFDakN4UixLQUFBQSxJQUFQeVIsRUFDQTNULEVBQUk0VCxPQUFPRixDQUFFLEVBQ1JDLElBQU9ELElBQ1oxVCxFQUFJNFQsT0FBT0YsQ0FBRSxFQUNiMVQsRUFBSXlFLElBQUlrUCxDQUFFLEVBRTlCLE1BR1ksSUFBSyxHQUFNLENBQUNsTCxFQUFHaUwsS0FBT3hkLE9BQU9tYyxRQUFRclMsQ0FBRyxFQUFHLENBQ3ZDLElBQU0yVCxFQUFLSCxHQUFhQyxFQUFTelQsRUFBS3lJLEVBQUdpTCxDQUFFLEVBQ2hDeFIsS0FBQUEsSUFBUHlSLEVBQ0EsT0FBTzNULEVBQUl5SSxHQUNOa0wsSUFBT0QsSUFDWjFULEVBQUl5SSxHQUFLa0wsRUFDN0IsQ0FHSSxPQUFPRixFQUFRbGEsS0FBS2dDLEVBQUs0RixFQUFLbkIsQ0FBRyxDQUNyQyxDQ3hDQSxTQUFTNlQsRUFBSzVYLEVBQU84RixFQUFLeEQsR0FFdEIsR0FBSXhJLE1BQU1DLFFBQVFpRyxDQUFLLEVBQ25CLE9BQU9BLEVBQU01RixJQUFJLENBQUMwUCxFQUFHN08sSUFBTTJjLEVBQUs5TixFQUFHbkosT0FBTzFGLENBQUMsRUFBR3FILENBQUcsQ0FBQyxFQUN0RCxHQUFJdEMsR0FBaUMsWUFBeEIsT0FBT0EsRUFBTTZYLE9BQXVCLENBRTdDLEdBQUksQ0FBQ3ZWLElMZUssRUtmYXRDLEVMZUZxUyxDQUFBQSxFQUFTSixDQUFJLEdBQUtNLENBQUFBLEVBQWFOLENBQUksSUFBTyxDQUFDQSxFQUFLOEUsT0tkakUsT0FBTy9XLEVBQU02WCxPQUFPL1IsRUFBS3hELENBQUcsRUFDaEMsSUFBTXdWLEVBQU8sQ0FBRUMsV0FBWSxFQUFHekwsTUFBTyxFQUFHcE4sSUFBSytHLEtBQUFBLENBQVcsRUFDeEQzRCxFQUFJNFUsUUFBUWhWLElBQUlsQyxFQUFPOFgsQ0FBSSxFQUMzQnhWLEVBQUkwVixTQUFXOVksSUFDWDRZLEVBQUs1WSxJQUFNQSxFQUNYLE9BQU9vRCxFQUFJMFYsUUFDZCxFQUNLOVksRUFBTWMsRUFBTTZYLE9BQU8vUixFQUFLeEQsQ0FBRyxFQUdqQyxPQUZJQSxFQUFJMFYsVUFDSjFWLEVBQUkwVixTQUFTOVksQ0FBRyxFQUNiQSxDQUNmLENMR2tCLElBQUEsRUtGZCxNQUFxQixVQUFqQixPQUFPYyxHQUF1QnNDLEdBQUsyVixLQUVoQ2pZLEVBRElZLE9BQU9aLENBQUssQ0FFM0IsQ0gwSUFnVixFQUFXSyxZQUFjLENBQUVNLFNBQVUsQ0FBQSxFQUFPRixRQUFTLEtBQU8sRUFDNURULEVBQVdNLFlBQWMsQ0FBRTRDLEtBQU0sb0JBQXNCLFFJektqREMsR0FDRnpZLFlBQVkrUCxHQUNSeFYsT0FBT21lLGVBQWU3VyxLQUFNd1EsRUFBVyxDQUFFL1IsTUFBT3lQLEVBQU0sQ0FDOUQsQ0FFSXFCLFFBQ0ksSUFBTXlFLEVBQU90YixPQUFPMkYsT0FBTzNGLE9BQU9vZSxlQUFlOVcsSUFBSSxFQUFHdEgsT0FBT3FlLDBCQUEwQi9XLElBQUksQ0FBQyxFQUc5RixPQUZJQSxLQUFLZ1gsUUFDTGhELEVBQUtnRCxNQUFRaFgsS0FBS2dYLE1BQU1uZCxNQUFPLEdBQzVCbWEsQ0FDZixDQUVJcUMsS0FBS3JCLEVBQUssQ0FBRWlDLFNBQUFBLEVBQVVDLGNBQUFBLEVBQWVDLFNBQUFBLEVBQVVsQixRQUFBQSxDQUFTLEVBQUcsSUFDdkQsR0FBSSxDQUFDdEYsR0FBV3FFLENBQUcsRUFDZixNQUFNLElBQUl2YyxVQUFVLGlDQUFpQyxFQUNuRHNJLEVBQU0sQ0FDUjRVLFFBQVMsSUFBSWhELElBQ2JxQyxJQUFBQSxFQUNBMEIsS0FBTSxDQUFBLEVBQ05PLFNBQXVCLENBQUEsSUFBYkEsRUFDVkcsYUFBYyxDQUFBLEVBQ2RGLGNBQXdDLFVBQXpCLE9BQU9BLEVBQTZCQSxFQUFnQixHQUN0RSxFQUNELElBQU12WixFQUFNMFksRUFBS3JXLEtBQU0sR0FBSWUsQ0FBRyxFQUM5QixHQUF3QixZQUFwQixPQUFPb1csRUFDUCxJQUFLLEdBQU0sQ0FBRXBNLE1BQUFBLEVBQU9wTixJQUFBQSxDQUFLLElBQUlvRCxFQUFJNFUsUUFBUTBCLE9BQVEsRUFDN0NGLEVBQVN4WixFQUFLb04sQ0FBSyxFQUMzQixNQUEwQixZQUFuQixPQUFPa0wsRUFDUkQsR0FBYUMsRUFBUyxDQUFFLEdBQUl0WSxDQUFLLEVBQUUsR0FBSUEsQ0FBRyxFQUMxQ0EsQ0FDZCxDQUNBLE9DN0JNK1UsV0FBY2tFLEdBQ2hCelksWUFBWXdSLEdBQ1IySCxNQUFNcEgsRUFBSyxFQUNYbFEsS0FBSzJQLE9BQVNBLEVBQ2RqWCxPQUFPbWUsZUFBZTdXLEtBQU0sTUFBTyxDQUMvQlcsTUFDSSxNQUFNLElBQUlSLE1BQU0sOEJBQThCLENBQzlELENBQ0EsQ0FBUyxDQUNULENBS0lqRixRQUFROFosR0FDSjFiLElBQUlpZSxFQUFRN1MsS0FBQUEsRUFTWixPQVJBMk0sRUFBTTJELEVBQUssQ0FDUHhDLEtBQU0sQ0FBQzRDLEVBQU0xRSxLQUNULEdBQUlBLElBQVMxUSxLQUNULE9BQU9xUixFQUFNSCxNQUNiUixFQUFLOEUsU0FBV3hWLEtBQUsyUCxTQUNyQjRILEVBQVE3RyxFQUM1QixDQUNBLENBQVMsRUFDTTZHLENBQ2YsQ0FDSWpCLE9BQU9rQixFQUFNelcsR0FDVCxHQUFJLENBQUNBLEVBQ0QsTUFBTyxDQUFFNE8sT0FBUTNQLEtBQUsyUCxNQUFRLEVBQ2xDLElBR1UvUCxFQUhKLENBQUUrVixRQUFBQSxFQUFTWCxJQUFBQSxFQUFLa0MsY0FBQUEsQ0FBZSxFQUFHblcsRUFDbEM0TyxFQUFTM1AsS0FBSzlFLFFBQVE4WixDQUFHLEVBQy9CLEdBQUksQ0FBQ3JGLEVBRUQsTUFETS9QLEVBQU0sK0RBQStESSxLQUFLMlAsT0FDMUUsSUFBSThILGVBQWU3WCxDQUFHLEVBRWhDdEcsSUFBSWlkLEVBQU9aLEVBQVF2UixJQUFJdUwsQ0FBTSxFQU83QixHQU5LNEcsSUFFREYsRUFBSzFHLEVBQVEsS0FBTTVPLENBQUcsRUFDdEJ3VixFQUFPWixFQUFRdlIsSUFBSXVMLENBQU0sR0FHekIsQ0FBQzRHLEdBQXFCN1IsS0FBQUEsSUFBYjZSLEVBQUs1WSxJQUVkLE1BQU0sSUFBSThaLGVBREUsd0RBQ2dCLEVBRWhDLEdBQXFCLEdBQWpCUCxJQUNBWCxFQUFLeEwsT0FBUyxFQUNVLElBQXBCd0wsRUFBS0MsYUFDTEQsRUFBS0MsV0FzQnJCLFNBQVNrQixFQUFjMUMsRUFBS3RFLEVBQU1pRixHQUM5QixDQUFBLEdBQUlsRixFQUFRQyxDQUFJLEVBQUcsQ0FDZixJQUFNZixFQUFTZSxFQUFLeFYsUUFBUThaLENBQUcsRUFDekJRLEVBQVNHLEdBQVdoRyxHQUFVZ0csRUFBUXZSLElBQUl1TCxDQUFNLEVBQ3RELE9BQU82RixFQUFTQSxFQUFPekssTUFBUXlLLEVBQU9nQixXQUFhLENBQzNELENBQ1MsR0FBSXhGLEVBQWFOLENBQUksRUFBRyxDQUN6QnBYLElBQUl5UixFQUFRLEVBQ1osSUFBSyxJQUFNNE0sS0FBUWpILEVBQUtxQixNQUFPLENBQzNCLElBQU10SyxFQUFJaVEsRUFBYzFDLEVBQUsyQyxFQUFNaEMsQ0FBTyxFQUN0Q2xPLEVBQUlzRCxJQUNKQSxFQUFRdEQsRUFDeEIsQ0FDUSxPQUFPc0QsQ0FDZixDQUNTLEdBQUk4RixFQUFPSCxDQUFJLEVBQUcsQ0FDbkIsSUFBTWtILEVBQUtGLEVBQWMxQyxFQUFLdEUsRUFBSy9NLElBQUtnUyxDQUFPLEVBQ3pDa0MsRUFBS0gsRUFBYzFDLEVBQUt0RSxFQUFLalMsTUFBT2tYLENBQU8sRUFDakQsT0FBT2xaLEtBQUtxYixJQUFJRixFQUFJQyxDQUFFLENBQzlCLENBQUEsQ0FDSSxPQUFPLENBQ1gsRUEzQ2dEN0MsRUFBS3JGLEVBQVFnRyxDQUFPLEdBQ3BEWSxFQUFLeEwsTUFBUXdMLEVBQUtDLFdBQWFVLEdBRS9CLE1BQU0sSUFBSU8sZUFERSw4REFDZ0IsRUFHcEMsT0FBT2xCLEVBQUs1WSxHQUNwQixDQUNJcUYsU0FBU2pDLEVBQUtnWCxFQUFZQyxHQUN0QixJQUljcFksRUFKUnFZLEVBQU0sSUFBSWpZLEtBQUsyUCxPQUNyQixHQUFJNU8sRUFBSyxDQUVMLEdBREF3VSxHQUFjdlYsS0FBSzJQLE1BQU0sRUFDckI1TyxFQUFJekksUUFBUTRmLGtCQUFvQixDQUFDblgsRUFBSTRVLFFBQVFJLElBQUkvVixLQUFLMlAsTUFBTSxFQUU1RCxNQURNL1AsRUFBTSwrREFBK0RJLEtBQUsyUCxPQUMxRSxJQUFJeFAsTUFBTVAsQ0FBRyxFQUV2QixHQUFJbUIsRUFBSW9YLFlBQ0osT0FBVUYsRUFBSCxHQUN2QixDQUNRLE9BQU9BLENBQ2YsQ0FDQSxDQ3hFQSxJQUFNRyxHQUFnQixHQUFXLENBQUMzWixHQUEyQixZQUFqQixPQUFPQSxHQUF5QyxVQUFqQixPQUFPQSxRQUM1RW1VLFVBQWVnRSxHQUNqQnpZLFlBQVlNLEdBQ1I2WSxNQUFNaEgsQ0FBTSxFQUNadFEsS0FBS3ZCLE1BQVFBLENBQ3JCLENBQ0k2WCxPQUFPL1IsRUFBS3hELEdBQ1IsT0FBT0EsR0FBSzJWLEtBQU8xVyxLQUFLdkIsTUFBUTRYLEVBQUtyVyxLQUFLdkIsTUFBTzhGLEVBQUt4RCxDQUFHLENBQ2pFLENBQ0lpQyxXQUNJLE9BQU81RCxPQUFPWSxLQUFLdkIsS0FBSyxDQUNoQyxDQUNBLENBQ0FtVSxFQUFPeUYsYUFBZSxlQUN0QnpGLEVBQU8wRixjQUFnQixnQkFDdkIxRixFQUFPMkYsTUFBUSxRQUNmM0YsRUFBTzRGLGFBQWUsZUFDdEI1RixFQUFPNkYsYUFBZSxlQ2pCdEIsSUFBTUMsR0FBbUIscUJBV3pCLFNBQVNDLEdBQVdsYSxFQUFPOFYsRUFBU3hULEdBR2hDLEdBQUlrUSxFQURBeFMsRUFEQWtTLEdBQVdsUyxDQUFLLEVBQ1JBLEVBQU1pVCxTQUNQalQsQ0FBSyxFQUNaLE9BQU9BLEVBQ1gsR0FBSW9TLEVBQU9wUyxDQUFLLEVBR1osT0FGTTVGLEVBQU1rSSxFQUFJNlgsT0FBT3hJLElBQUt1SSxhQUFhNVgsRUFBSTZYLE9BQVEsS0FBTTdYLENBQUcsR0FDMURnUixNQUFNbFYsS0FBSzRCLENBQUssRUFDYjVGLEdBRVA0RixhQUFpQlcsUUFDakJYLGFBQWlCWSxRQUNqQlosYUFBaUJtTSxTQUNFLGFBQWxCLE9BQU9pTyxRQUEwQnBhLGFBQWlCb2EsVUFHbkRwYSxFQUFRQSxFQUFNcWEsUUFBUyxHQUUzQixHQUFNLENBQUVDLHNCQUFBQSxFQUF1QjVCLFNBQUFBLEVBQVU2QixTQUFBQSxFQUFVSixPQUFBQSxFQUFRSyxjQUFBQSxDQUFhLEVBQUtsWSxFQUc3RXpILElBQUk0ZixFQUFNeFUsS0FBQUEsRUFDVixHQUFJcVUsR0FBeUJ0YSxHQUEwQixVQUFqQixPQUFPQSxFQUFvQixDQUU3RCxHQURBeWEsRUFBTUQsRUFBYzdVLElBQUkzRixDQUFLLEVBSXpCLE9BRkt5YSxFQUFJMUQsU0FDTDBELEVBQUkxRCxPQUFTMkIsRUFBUzFZLENBQUssR0FDeEIsSUFBSWlVLEdBQU13RyxFQUFJMUQsTUFBTSxFQUczQjBELEVBQU0sQ0FBRTFELE9BQVEsS0FBTTlFLEtBQU0sSUFBTSxFQUNsQ3VJLEVBQWN0WSxJQUFJbEMsRUFBT3lhLENBQUcsQ0FFeEMsQ0FHSTVmLElBQUk2ZixHQTlDUixDQUF1QjFhLEVBQU84VixFQUFTWixLQUNuQyxHQUFJWSxFQUFTLENBQ1QsSUFBTTNRLEVBQVErUCxFQUFLM2EsT0FBT29nQixHQUFLQSxFQUFFeEUsTUFBUUwsQ0FBTyxFQUMxQzRFLEVBQVN2VixFQUFNeVYsS0FBS0QsR0FBSyxDQUFDQSxFQUFFcmEsTUFBTSxHQUFLNkUsRUFBTSxHQUNuRCxHQUFLdVYsRUFFTCxPQUFPQSxFQURILE1BQU0sSUFBSWhaLGFBQWFvVSxhQUFtQixDQUV0RCxDQUNJLE9BQU9aLEVBQUswRixLQUFLRCxHQUFLQSxFQUFFRSxXQUFXN2EsQ0FBSyxHQUFLLENBQUMyYSxFQUFFcmEsTUFBTSxDQUMxRCxHQXFDK0JOLEVBRHZCOFYsRUFEQUEsR0FBU08sV0FBVyxJQUFJLEVBQ2Q0RCxHQUFtQm5FLEVBQVExYSxNQUFNLENBQUMsRUFDZDBhLEVBQVNxRSxFQUFPakYsSUFBSSxFQUN0RCxHQUFJLENBQUN3RixFQUFRLENBS1QsR0FBSSxFQUZBMWEsRUFGQUEsR0FBaUMsWUFBeEIsT0FBT0EsRUFBTTZYLE9BRWQ3WCxFQUFNNlgsT0FBUSxFQUVyQjdYLElBQTBCLFVBQWpCLE9BQU9BLEVBQW9CLENBQ3JDLElBQU1pUyxFQUFPLElBQUlrQyxFQUFPblUsQ0FBSyxFQUc3QixPQUZJeWEsSUFDQUEsRUFBSXhJLEtBQU9BLEdBQ1JBLENBQ25CLENBQ1F5SSxFQUNJMWEsRUFBQUEsYUFBaUJrVSxNQUVYdkQsT0FBT21LLFlBQVk3Z0IsT0FBTytGLENBQUssRUFDM0JtYSxFQUFPckksSUFDUHFJLEVBQU94SSxHQUM3QixDQUNRNEksSUFDQUEsRUFBU0csQ0FBTSxFQUNmLE9BQU9wWSxFQUFJaVksVUFFZixJQUFNdEksRUFBT3lJLEdBQVFSLFdBQ2ZRLEVBQU9SLFdBQVc1WCxFQUFJNlgsT0FBUW5hLEVBQU9zQyxDQUFHLEVBQ0wsWUFBbkMsT0FBT29ZLEdBQVFLLFdBQVd0ZCxLQUN0QmlkLEVBQU9LLFVBQVV0ZCxLQUFLNkUsRUFBSTZYLE9BQVFuYSxFQUFPc0MsQ0FBRyxFQUM1QyxJQUFJNlIsRUFBT25VLENBQUssRUFPMUIsT0FOSThWLEVBQ0E3RCxFQUFLa0UsSUFBTUwsRUFDTDRFLEVBQU83ZSxVQUNib1csRUFBS2tFLElBQU11RSxFQUFPdkUsS0FDbEJzRSxJQUNBQSxFQUFJeEksS0FBT0EsR0FDUkEsQ0FDWCxDQ2xGQSxTQUFTK0ksR0FBbUJiLEVBQVF0ZCxFQUFNbUQsR0FDdENuRixJQUFJaVAsRUFBSTlKLEVBQ1IsSUFBS25GLElBQUlJLEVBQUk0QixFQUFLckMsT0FBUyxFQUFRLEdBQUxTLEVBQVEsRUFBRUEsRUFBRyxDQUN2QyxJQUVVZ1QsRUFGSnpCLEVBQUkzUCxFQUFLNUIsR0FJWDZPLEVBSGEsVUFBYixPQUFPMEMsR0FBa0I1TCxPQUFPcWEsVUFBVXpPLENBQUMsR0FBVSxHQUFMQSxJQUMxQ3lCLEVBQUksSUFDUnpCLEdBQUsxQyxFQUNIbUUsR0FHQSxJQUFJaUcsSUFBSSxDQUFDLENBQUMxSCxFQUFHMUMsR0FBRyxDQUVoQyxDQUNJLE9BQU9vUSxHQUFXcFEsRUFBRzdELEtBQUFBLEVBQVcsQ0FDNUJxVSxzQkFBdUIsQ0FBQSxFQUN2QlksY0FBZSxDQUFBLEVBQ2Z4QyxTQUFVLEtBQ04sTUFBTSxJQUFJaFgsTUFBTSw4Q0FBOEMsQ0FDakUsRUFDRHlZLE9BQUFBLEVBQ0FLLGNBQWUsSUFBSXRHLEdBQzNCLENBQUssQ0FDTCxDQUdBLElBQU1pSCxHQUFjLEdBQWtCLE1BQVJ0ZSxHQUNULFVBQWhCLE9BQU9BLEdBQXFCLENBQUMsQ0FBQ0EsRUFBSzhULE9BQU9tSyxVQUFXLEVBQUNoTyxLQUFNLEVBQUNzTyxXQUM1RHRILFdBQW1CcUUsR0FDckJ6WSxZQUFZK1AsRUFBTTBLLEdBQ2R0QixNQUFNcEosQ0FBSSxFQUNWeFYsT0FBT21lLGVBQWU3VyxLQUFNLFNBQVUsQ0FDbEN2QixNQUFPbWEsRUFDUGhhLGFBQWMsQ0FBQSxFQUNkRixXQUFZLENBQUEsRUFDWkMsU0FBVSxDQUFBLENBQ3RCLENBQVMsQ0FDVCxDQU1JNFEsTUFBTXFKLEdBQ0YsSUFBTTVFLEVBQU90YixPQUFPMkYsT0FBTzNGLE9BQU9vZSxlQUFlOVcsSUFBSSxFQUFHdEgsT0FBT3FlLDBCQUEwQi9XLElBQUksQ0FBQyxFQU05RixPQUxJNFksSUFDQTVFLEVBQUs0RSxPQUFTQSxHQUNsQjVFLEVBQUtqQyxNQUFRaUMsRUFBS2pDLE1BQU1sWixJQUFJaWhCLEdBQU03SSxFQUFPNkksQ0FBRSxHQUFLakosRUFBT2lKLENBQUUsRUFBSUEsRUFBR3ZLLE1BQU1xSixDQUFNLEVBQUlrQixDQUFFLEVBQzlFOVosS0FBS2dYLFFBQ0xoRCxFQUFLZ0QsTUFBUWhYLEtBQUtnWCxNQUFNbmQsTUFBTyxHQUM1Qm1hLENBQ2YsQ0FNSStGLE1BQU16ZSxFQUFNbUQsR0FDUixHQUFJbWIsR0FBWXRlLENBQUksRUFDaEIwRSxLQUFLaUgsSUFBSXhJLENBQUssTUFDYixDQUNELEdBQU0sQ0FBQ2tGLEtBQVFxVyxHQUFRMWUsRUFDakJvVixFQUFPMVEsS0FBS29FLElBQUlULEVBQUssQ0FBQSxDQUFJLEVBQy9CLEdBQUlxTixFQUFhTixDQUFJLEVBQ2pCQSxFQUFLcUosTUFBTUMsRUFBTXZiLENBQUssTUFDckIsQ0FBQSxHQUFhaUcsS0FBQUEsSUFBVGdNLEdBQXNCMVEsQ0FBQUEsS0FBSzRZLE9BR2hDLE1BQU0sSUFBSXpZLHFDQUFxQ3dELHNCQUF3QnFXLENBQU0sRUFGN0VoYSxLQUFLVyxJQUFJZ0QsRUFBSzhWLEdBQW1CelosS0FBSzRZLE9BQVFvQixFQUFNdmIsQ0FBSyxDQUFDLENBRW9CLENBQzlGLENBQ0EsQ0FLSXdiLFNBQVMzZSxHQUNMLEdBQU0sQ0FBQ3FJLEtBQVFxVyxHQUFRMWUsRUFDdkIsR0FBb0IsSUFBaEIwZSxFQUFLL2dCLE9BQ0wsT0FBTytHLEtBQUtvVyxPQUFPelMsQ0FBRyxFQUMxQixJQUFNK00sRUFBTzFRLEtBQUtvRSxJQUFJVCxFQUFLLENBQUEsQ0FBSSxFQUMvQixHQUFJcU4sRUFBYU4sQ0FBSSxFQUNqQixPQUFPQSxFQUFLdUosU0FBU0QsQ0FBSSxFQUV6QixNQUFNLElBQUk3WixxQ0FBcUN3RCxzQkFBd0JxVyxDQUFNLENBQ3pGLENBTUlFLE1BQU01ZSxFQUFNNmUsR0FDUixHQUFNLENBQUN4VyxLQUFRcVcsR0FBUTFlLEVBQ2pCb1YsRUFBTzFRLEtBQUtvRSxJQUFJVCxFQUFLLENBQUEsQ0FBSSxFQUMvQixPQUFvQixJQUFoQnFXLEVBQUsvZ0IsT0FDRSxDQUFDa2hCLEdBQWNySixFQUFTSixDQUFJLEVBQUlBLEVBQUtqUyxNQUFRaVMsRUFFN0NNLEVBQWFOLENBQUksRUFBSUEsRUFBS3dKLE1BQU1GLEVBQU1HLENBQVUsRUFBSXpWLEtBQUFBLENBQ3ZFLENBQ0kwVixpQkFBaUJDLEdBQ2IsT0FBT3JhLEtBQUsrUixNQUFNdUksTUFBTTVKLEdBQ2ZHLENBQUFBLENBQUFBLEVBQU9ILENBQUksSUFHSCxPQURQdEwsRUFBSXNMLEVBQUtqUyxRQUVWNGIsR0FDR3ZKLEVBQVMxTCxDQUFDLEdBQ0MsTUFBWEEsRUFBRTNHLE9BQ0YsQ0FBQzJHLEVBQUVtVixlQUNILENBQUNuVixFQUFFb1YsU0FDSCxDQUFDcFYsRUFBRXdQLElBQ2QsQ0FDVCxDQUlJNkYsTUFBTW5mLEdBQ0YsR0FBTSxDQUFDcUksS0FBUXFXLEdBQVExZSxFQUN2QixPQUFvQixJQUFoQjBlLEVBQUsvZ0IsT0FDRStHLEtBQUsrVixJQUFJcFMsQ0FBRyxFQUVoQnFOLENBQUFBLENBQUFBLEVBREROLEVBQU8xUSxLQUFLb0UsSUFBSVQsRUFBSyxDQUFBLENBQUksQ0FDUCxHQUFJK00sRUFBSytKLE1BQU1ULENBQUksQ0FDbkQsQ0FLSVUsTUFBTXBmLEVBQU1tRCxHQUNSLEdBQU0sQ0FBQ2tGLEtBQVFxVyxHQUFRMWUsRUFDdkIsR0FBb0IsSUFBaEIwZSxFQUFLL2dCLE9BQ0wrRyxLQUFLVyxJQUFJZ0QsRUFBS2xGLENBQUssTUFFbEIsQ0FDRCxJQUFNaVMsRUFBTzFRLEtBQUtvRSxJQUFJVCxFQUFLLENBQUEsQ0FBSSxFQUMvQixHQUFJcU4sRUFBYU4sQ0FBSSxFQUNqQkEsRUFBS2dLLE1BQU1WLEVBQU12YixDQUFLLE1BQ3JCLENBQUEsR0FBYWlHLEtBQUFBLElBQVRnTSxHQUFzQjFRLENBQUFBLEtBQUs0WSxPQUdoQyxNQUFNLElBQUl6WSxxQ0FBcUN3RCxzQkFBd0JxVyxDQUFNLEVBRjdFaGEsS0FBS1csSUFBSWdELEVBQUs4VixHQUFtQnpaLEtBQUs0WSxPQUFRb0IsRUFBTXZiLENBQUssQ0FBQyxDQUVvQixDQUM5RixDQUNBLENBQ0EsQ0N6SUEsSUFBTWtjLEdBQW1CLEdBQVMvYyxFQUFJOUQsUUFBUSxrQkFBbUIsR0FBRyxFQUNwRSxTQUFTOGdCLEVBQWNKLEVBQVNLLEdBQzVCLE1BQUksUUFBUWpoQixLQUFLNGdCLENBQU8sRUFDYkEsRUFBUTFOLFVBQVUsQ0FBQyxFQUN2QitOLEVBQVNMLEVBQVExZ0IsUUFBUSxhQUFjK2dCLENBQU0sRUFBSUwsQ0FDNUQsQ0FDQSxJQUFNTSxHQUFjLENBQUNsZCxFQUFLaWQsRUFBUUwsSUFBWTVjLEVBQUltZCxTQUFTLElBQUksRUFDekRILEVBQWNKLEVBQVNLLENBQU0sRUFDN0JMLEVBQVE3TCxTQUFTLElBQUksRUFDakIsS0FBT2lNLEVBQWNKLEVBQVNLLENBQU0sR0FDbkNqZCxFQUFJbWQsU0FBUyxHQUFHLEVBQUksR0FBSyxLQUFPUCxFQ2pCckNRLEdBQVksT0FDWkMsR0FBYSxRQUNiQyxHQUFjLFNBTXBCLFNBQVNDLEdBQWNDLEVBQU1QLEVBQVFRLEVBQU8sT0FBUSxDQUFFQyxjQUFBQSxFQUFlQyxVQUFBQSxFQUFZLEdBQUlDLGdCQUFBQSxFQUFrQixHQUFJQyxPQUFBQSxFQUFRQyxXQUFBQSxDQUFVLEVBQUssSUFDOUgsR0FBSSxDQUFDSCxHQUFhQSxFQUFZLEVBQzFCLE9BQU9ILEVBQ1BHLEVBQVlDLElBQ1pBLEVBQWtCLEdBQ3RCLElBQU1HLEVBQVVsZixLQUFLcWIsSUFBSSxFQUFJMEQsRUFBaUIsRUFBSUQsRUFBWVYsRUFBTzVoQixNQUFNLEVBQzNFLEdBQUltaUIsRUFBS25pQixRQUFVMGlCLEVBQ2YsT0FBT1AsRUFDWCxJQUFNUSxFQUFRLEdBQ1JDLEVBQWUsR0FDckJ2aUIsSUFBSWdELEVBQU1pZixFQUFZVixFQUFPNWhCLE9BT3pCc0MsR0FOeUIsVUFBekIsT0FBTytmLElBQ0hBLEVBQWdCQyxFQUFZOWUsS0FBS3FiLElBQUksRUFBRzBELENBQWUsRUFDdkRJLEVBQU0vZSxLQUFLLENBQUMsRUFFWlAsRUFBTWlmLEVBQVlELEdBRWQ1VyxLQUFBQSxHQUNSVixFQUFPVSxLQUFBQSxFQUNQb1gsRUFBVyxDQUFBLEVBQ1hwaUIsRUFBSSxDQUFFLEVBQ05xaUIsRUFBVyxDQUFFLEVBQ2JDLEVBQVMsQ0FBRSxFQUNYWCxJQUFTSixJQUVDLENBQUUsS0FEWnZoQixFQUFJdWlCLEdBQXlCYixFQUFNMWhCLEVBQUdtaEIsRUFBTzVoQixNQUFNLEtBRS9DcUQsRUFBTTVDLEVBQUlpaUIsR0FFbEIsSUFBS3JpQixJQUFJeWIsRUFBS0EsRUFBS3FHLEVBQU0xaEIsR0FBSyxJQUFPLENBQ2pDLEdBQUkyaEIsSUFBU0gsSUFBc0IsT0FBUG5HLEVBQWEsQ0FFckMsT0FBUXFHLEdBRFJXLEVBQVdyaUIsR0FDTSxJQUNiLElBQUssSUFDREEsR0FBSyxFQUNMLE1BQ0osSUFBSyxJQUNEQSxHQUFLLEVBQ0wsTUFDSixJQUFLLElBQ0RBLEdBQUssRUFDTCxNQUNKLFFBQ0lBLEdBQUssQ0FDekIsQ0FDWXNpQixFQUFTdGlCLENBQ3JCLENBQ1EsR0FBVyxPQUFQcWIsRUFDSXNHLElBQVNKLEtBQ1R2aEIsRUFBSXVpQixHQUF5QmIsRUFBTTFoQixFQUFHbWhCLEVBQU81aEIsTUFBTSxHQUN2RHFELEVBQU01QyxFQUFJbWhCLEVBQU81aEIsT0FBUzBpQixFQUMxQnBnQixFQUFRbUosS0FBQUEsT0FhUixHQVZXLE1BQVBxUSxHQUNBL1EsR0FDUyxNQUFUQSxHQUNTLE9BQVRBLEdBQ1MsT0FBVEEsSUFFTXVILEVBQU82UCxFQUFLMWhCLEVBQUksS0FDRCxNQUFUNlIsR0FBeUIsT0FBVEEsR0FBMEIsT0FBVEEsSUFDekNoUSxFQUFRN0IsR0FFWkEsR0FBSzRDLEVBQ0wsR0FBSWYsRUFDQXFnQixFQUFNL2UsS0FBS3RCLENBQUssRUFDaEJlLEVBQU1mLEVBQVFvZ0IsRUFDZHBnQixFQUFRbUosS0FBQUEsT0FFUCxHQUFJMlcsSUFBU0gsR0FBYSxDQUUzQixLQUFnQixNQUFUbFgsR0FBeUIsT0FBVEEsR0FDbkJBLEVBQU8rUSxFQUNQQSxFQUFLcUcsRUFBTTFoQixHQUFLLEdBQ2hCb2lCLEVBQVcsQ0FBQSxFQUdmLElBQU1oUSxFQUFJcFMsRUFBSXNpQixFQUFTLEVBQUl0aUIsRUFBSSxFQUFJcWlCLEVBQVcsRUFFOUMsR0FBSUYsRUFBYS9QLEdBQ2IsT0FBT3NQLEVBQ1hRLEVBQU0vZSxLQUFLaVAsQ0FBQyxFQUNaK1AsRUFBYS9QLEdBQUssQ0FBQSxFQUNsQnhQLEVBQU13UCxFQUFJNlAsRUFDVnBnQixFQUFRbUosS0FBQUEsQ0FDNUIsTUFFb0JvWCxFQUFXLENBQUEsRUFJdkI5WCxFQUFPK1EsQ0FDZixDQUdJLEdBRkkrRyxHQUFZSixHQUNaQSxFQUFZLEVBQ0ssSUFBakJFLEVBQU0zaUIsT0FDTixPQUFPbWlCLEVBQ1BLLEdBQ0FBLEVBQVEsRUFDWm5pQixJQUFJcUUsRUFBTXlkLEVBQUt2aEIsTUFBTSxFQUFHK2hCLEVBQU0sRUFBRSxFQUNoQyxJQUFLdGlCLElBQUlJLEVBQUksRUFBR0EsRUFBSWtpQixFQUFNM2lCLE9BQVEsRUFBRVMsRUFBRyxDQUNuQyxJQUFNd2lCLEVBQU9OLEVBQU1saUIsR0FDbkIsSUFBTTRDLEVBQU1zZixFQUFNbGlCLEVBQUksSUFBTTBoQixFQUFLbmlCLE9BQ3BCLElBQVRpakIsRUFDQXZlO0VBQVdrZCxFQUFTTyxFQUFLdmhCLE1BQU0sRUFBR3lDLENBQUcsR0FFakMrZSxJQUFTSCxJQUFlVyxFQUFhSyxLQUNyQ3ZlLEdBQVV5ZCxFQUFLYyxHQUFSLE1BQ1h2ZTtFQUFZa2QsRUFBU08sRUFBS3ZoQixNQUFNcWlCLEVBQU8sRUFBRzVmLENBQUcsRUFFekQsQ0FDSSxPQUFPcUIsQ0FDWCxDQUtBLFNBQVNzZSxHQUF5QmIsRUFBTTFoQixFQUFHbWhCLEdBQ3ZDdmhCLElBQUlnRCxFQUFNNUMsRUFDTjJDLEVBQVEzQyxFQUFJLEVBQ1pxYixFQUFLcUcsRUFBSy9lLEdBQ2QsS0FBYyxNQUFQMFksR0FBcUIsT0FBUEEsR0FDakIsR0FBSXJiLEVBQUkyQyxFQUFRd2UsRUFDWjlGLEVBQUtxRyxFQUFLLEVBQUUxaEIsT0FFWCxDQUNELE1BQ0lxYixFQUFLcUcsRUFBSyxFQUFFMWhCLEtBQ00sT0FBUHFiLElBQ2Z6WSxFQUFNNUMsRUFDTjJDLEVBQVEzQyxFQUFJLEVBQ1pxYixFQUFLcUcsRUFBSy9lLEVBQ3RCLENBRUksT0FBT0MsQ0FDWCxDQzVJQSxJQUFNNmYsR0FBaUIsQ0FBQ3BiLEVBQUtxYixLQUFhLENBQ3RDZCxjQUFlYyxFQUFVcmIsRUFBSThaLE9BQU81aEIsT0FBUzhILEVBQUl1YSxjQUNqREMsVUFBV3hhLEVBQUl6SSxRQUFRaWpCLFVBQ3ZCQyxnQkFBaUJ6YSxFQUFJekksUUFBUWtqQixlQUNoQyxHQUdLYSxHQUF5QixHQUFTLG1CQUFtQnppQixLQUFLZ0UsQ0FBRyxFQW1CbkUsU0FBUzBlLEdBQW1CN2QsRUFBT3NDLEdBQy9CLElBQU13YixFQUFPamQsS0FBS0MsVUFBVWQsQ0FBSyxFQUNqQyxHQUFJc0MsRUFBSXpJLFFBQVFra0IsbUJBQ1osT0FBT0QsRUFDWCxJQUFRcEUsRUFBZ0JwWCxFQUFMLFlBQ2IwYixFQUFxQjFiLEVBQUl6SSxRQUFRb2tCLCtCQUNqQzdCLEVBQVM5WixFQUFJOFosU0FBV3dCLEdBQXVCNWQsQ0FBSyxFQUFJLEtBQU8sSUFDckVuRixJQUFJc0UsRUFBTSxHQUNOdkIsRUFBUSxFQUNaLElBQUsvQyxJQUFJSSxFQUFJLEVBQUdxYixFQUFLd0gsRUFBSzdpQixHQUFJcWIsRUFBSUEsRUFBS3dILEVBQUssRUFBRTdpQixHQVExQyxHQVBXLE1BQVBxYixHQUE4QixPQUFoQndILEVBQUs3aUIsRUFBSSxJQUErQixNQUFoQjZpQixFQUFLN2lCLEVBQUksS0FFL0NrRSxHQUFPMmUsRUFBSzFpQixNQUFNd0MsRUFBTzNDLENBQUMsRUFBSSxNQUM5QkEsR0FBSyxFQUNMMkMsRUFBUTNDLEVBQ1JxYixFQUFLLE1BRUUsT0FBUEEsRUFDQSxPQUFRd0gsRUFBSzdpQixFQUFJLElBQ2IsSUFBSyxJQUVHa0UsR0FBTzJlLEVBQUsxaUIsTUFBTXdDLEVBQU8zQyxDQUFDLEVBQzFCLElBQU1pakIsRUFBT0osRUFBSzFnQixPQUFPbkMsRUFBSSxFQUFHLENBQUMsRUFDakMsT0FBUWlqQixHQUNKLElBQUssT0FDRC9lLEdBQU8sTUFDUCxNQUNKLElBQUssT0FDREEsR0FBTyxNQUNQLE1BQ0osSUFBSyxPQUNEQSxHQUFPLE1BQ1AsTUFDSixJQUFLLE9BQ0RBLEdBQU8sTUFDUCxNQUNKLElBQUssT0FDREEsR0FBTyxNQUNQLE1BQ0osSUFBSyxPQUNEQSxHQUFPLE1BQ1AsTUFDSixJQUFLLE9BQ0RBLEdBQU8sTUFDUCxNQUNKLElBQUssT0FDREEsR0FBTyxNQUNQLE1BQ0osUUFDOEIsT0FBdEIrZSxFQUFLOWdCLE9BQU8sRUFBRyxDQUFDLEVBQ2hCK0IsR0FBTyxNQUFRK2UsRUFBSzlnQixPQUFPLENBQUMsRUFFNUIrQixHQUFPMmUsRUFBSzFnQixPQUFPbkMsRUFBRyxDQUFDLENBQzNELENBQ3dCQSxHQUFLLEVBQ0wyQyxFQUFRM0MsRUFBSSxFQUVoQixNQUNKLElBQUssSUFDRCxHQUFJeWUsR0FDZ0IsTUFBaEJvRSxFQUFLN2lCLEVBQUksSUFDVDZpQixFQUFLdGpCLE9BQVN3akIsRUFDZC9pQixHQUFLLE1BRUosQ0FHRCxJQURBa0UsR0FBTzJlLEVBQUsxaUIsTUFBTXdDLEVBQU8zQyxDQUFDLEVBQUksT0FDUCxPQUFoQjZpQixFQUFLN2lCLEVBQUksSUFDSSxNQUFoQjZpQixFQUFLN2lCLEVBQUksSUFDTyxNQUFoQjZpQixFQUFLN2lCLEVBQUksSUFDVGtFLEdBQU8sS0FDUGxFLEdBQUssRUFFVGtFLEdBQU9pZCxFQUVhLE1BQWhCMEIsRUFBSzdpQixFQUFJLEtBQ1RrRSxHQUFPLE1BQ1hsRSxHQUFLLEVBQ0wyQyxFQUFRM0MsRUFBSSxDQUNwQyxDQUNvQixNQUNKLFFBQ0lBLEdBQUssQ0FDekIsQ0FHSSxPQURBa0UsRUFBTXZCLEVBQVF1QixFQUFNMmUsRUFBSzFpQixNQUFNd0MsQ0FBSyxFQUFJa2dCLEVBQ2pDcEUsRUFDRHZhLEVBQ0F1ZCxHQUFjdmQsRUFBS2lkLEVBQVFLLEdBQWFpQixHQUFlcGIsRUFBSyxDQUFBLENBQUssQ0FBQyxDQUM1RSxDQUNBLFNBQVM2YixHQUFtQm5lLEVBQU9zQyxHQUMvQixJQUtNOFosRUFMTixNQUFnQyxDQUFBLElBQTVCOVosRUFBSXpJLFFBQVF1a0IsYUFDWDliLEVBQUlvWCxhQUFlMVosRUFBTWtRLFNBQVMsSUFBSSxHQUN2QyxrQkFBa0IvVSxLQUFLNkUsQ0FBSyxFQUVyQjZkLEdBQW1CN2QsRUFBT3NDLENBQUcsR0FDbEM4WixFQUFTOVosRUFBSThaLFNBQVd3QixHQUF1QjVkLENBQUssRUFBSSxLQUFPLElBQy9EZCxFQUFNLElBQU1jLEVBQU0zRSxRQUFRLEtBQU0sSUFBSSxFQUFFQSxRQUFRO0VBQWUrZ0IsQ0FBUSxFQUFJLElBQ3hFOVosRUFBSW9YLFlBQ0x4YSxFQUNBd2QsR0FBY3hkLEVBQUtrZCxFQUFRRyxHQUFXbUIsR0FBZXBiLEVBQUssQ0FBQSxDQUFLLENBQUMsRUFDMUUsQ0FDQSxTQUFTK2IsR0FBYXJlLEVBQU9zQyxHQUN6QixJQUtVZ2MsRUFDQUMsRUFORkgsRUFBZ0I5YixFQUFJekksb0JBQzVCZ0IsSUFBSTJqQixFQWFKLE9BWElBLEVBRGdCLENBQUEsSUFBaEJKLElBR01FLEVBQVl0ZSxFQUFNa1EsU0FBUyxHQUFHLEVBQzlCcU8sRUFBWXZlLEVBQU1rUSxTQUFTLEdBQUcsRUFDaENvTyxHQUFhLENBQUNDLElBRVRBLENBQUFBLEdBQWNELElBR2RGLEdBQWNELEdBQXFCTixJQUV0QzdkLEVBQU9zQyxDQUFHLENBQ3hCLENBR0F6SCxJQUFJNGpCLEdBQ0osSUFDSUEsR0FBbUIsSUFBSXJjLE9BQU8seUJBQTBCLEdBQUcsQ0FJL0QsQ0FGQSxNQUNJcWMsR0FBbUIsY0FDdkIsQ0FDQSxTQUFTQyxHQUFZLENBQUUzQyxRQUFBQSxFQUFTdE0sS0FBQUEsRUFBTXpQLE1BQUFBLENBQUssRUFBSXNDLEVBQUtxYyxFQUFXQyxHQUMzRCxHQUFNLENBQUVDLFdBQUFBLEVBQVlDLGNBQUFBLEVBQWVoQyxVQUFBQSxDQUFXLEVBQUd4YSxFQUFJekksUUFHckQsR0FBSSxDQUFDZ2xCLEdBQWMsWUFBWTFqQixLQUFLNkUsQ0FBSyxHQUFLLFFBQVE3RSxLQUFLNkUsQ0FBSyxFQUM1RCxPQUFPcWUsR0FBYXJlLEVBQU9zQyxDQUFHLEVBRWxDLElBQU04WixFQUFTOVosRUFBSThaLFNBQ2Q5WixFQUFJeWMsa0JBQW9CbkIsR0FBdUI1ZCxDQUFLLEVBQUksS0FBTyxJQUM5RGdmLEVBQXlCLFlBQWZILEdBRUssV0FBZkEsR0FBMkJwUCxJQUFTMEUsRUFBT3lGLGVBRXZDbkssSUFBUzBFLEVBQU8wRixlQUVaLEVBaktsQixDQUE2QjFhLEVBQUsyZCxFQUFXbUMsS0FDekMsR0FBS25DLEdBQWFBLEVBQUFBLEVBQVksR0FBOUIsQ0FFQSxJQUFNb0MsRUFBUXBDLEVBQVltQyxFQUNwQkUsRUFBU2hnQixFQUFJM0UsT0FDbkIsR0FBSTJrQixFQUFBQSxHQUFVRCxHQUFkLENBRUEsSUFBS3JrQixJQUFJSSxFQUFJLEVBQUcyQyxFQUFRLEVBQUczQyxFQUFJa2tCLEVBQVEsRUFBRWxrQixFQUNyQyxHQUFlLE9BQVhrRSxFQUFJbEUsR0FBYSxDQUNqQixHQUFJQSxFQUFJMkMsRUFBUXNoQixFQUNaLE9BQU8sRUFFWCxHQUFJQyxHQURKdmhCLEVBQVEzQyxFQUFJLElBQ1Vpa0IsRUFDbEIsTUFDaEIsQ0FFSSxPQUFPLENBVlMsQ0FKQSxDQWVwQixHQWdKdUNsZixFQUFPOGMsRUFBV1YsRUFBTzVoQixNQUFNLEdBQ2xFLEdBQUksQ0FBQ3dGLEVBQ0QsT0FBT2dmLEVBQVUsTUFBUSxNQUU3Qm5rQixJQUFJdWtCLEVBQ0FDLEVBQ0osSUFBS0EsRUFBV3JmLEVBQU14RixPQUFtQixFQUFYNmtCLEVBQWMsRUFBRUEsRUFBVSxDQUNwRCxJQUFNL0ksRUFBS3RXLEVBQU1xZixFQUFXLEdBQzVCLEdBQVcsT0FBUC9JLEdBQXNCLE9BQVBBLEdBQXNCLE1BQVBBLEVBQzlCLEtBQ1osQ0FDSXpiLElBQUlnRCxFQUFNbUMsRUFBTXFPLFVBQVVnUixDQUFRLEVBQ2xDLElBQU1DLEVBQVd6aEIsRUFBSXNHLFFBQVEsSUFBSSxFQUNoQixDQUFBLElBQWJtYixFQUNBRixFQUFRLElBRUhwZixJQUFVbkMsR0FBT3loQixJQUFhemhCLEVBQUlyRCxPQUFTLEdBQ2hENGtCLEVBQVEsSUFDSlIsR0FDQUEsRUFBYSxHQUdqQlEsRUFBUSxHQUVSdmhCLElBQ0FtQyxFQUFRQSxFQUFNNUUsTUFBTSxFQUFHLENBQUN5QyxFQUFJckQsTUFBTSxFQUdsQ3FELEdBRElBLEVBRHdCLE9BQXhCQSxFQUFJQSxFQUFJckQsT0FBUyxHQUNYcUQsRUFBSXpDLE1BQU0sRUFBRyxDQUFBLENBQUUsRUFDbkJ5QyxHQUFJeEMsUUFBUW9qQixHQUFrQixLQUFLckMsQ0FBUSxHQUdyRHZoQixJQUFJMGtCLEVBQWlCLENBQUEsRUFDakJDLEVBQ0FDLEVBQWEsQ0FBRSxFQUNuQixJQUFLRCxFQUFXLEVBQUdBLEVBQVd4ZixFQUFNeEYsT0FBUSxFQUFFZ2xCLEVBQVUsQ0FDcEQsSUFBTWxKLEVBQUt0VyxFQUFNd2YsR0FDakIsR0FBVyxNQUFQbEosRUFDQWlKLEVBQWlCLENBQUEsTUFDaEIsQ0FBQSxHQUFXLE9BQVBqSixFQUdMLE1BRkFtSixFQUFhRCxDQUViLENBQ1osQ0FDSTNrQixJQUFJK0MsRUFBUW9DLEVBQU1xTyxVQUFVLEVBQUdvUixFQUFhRCxFQUFXQyxFQUFhLEVBQUlELENBQVEsRUFPNUVFLEdBTkE5aEIsSUFDQW9DLEVBQVFBLEVBQU1xTyxVQUFVelEsRUFBTXBELE1BQU0sRUFDcENvRCxFQUFRQSxFQUFNdkMsUUFBUSxPQUFRLEtBQUsrZ0IsQ0FBUSxJQUlqQ21ELEVBRktuRCxFQUFTLElBQU0sSUFFVSxJQUFNZ0QsR0FNbEQsR0FMSXJELElBQ0EyRCxHQUFVLElBQU1aLEVBQWMvQyxFQUFRMWdCLFFBQVEsYUFBYyxHQUFHLENBQUMsRUFDNURzakIsSUFDQUEsRUFBVyxFQUVmLENBQUNLLEVBQVMsQ0FDSlcsRUFBYzNmLEVBQ2YzRSxRQUFRLE9BQVEsTUFBTSxFQUN0QkEsUUFBUSxpREFBa0QsTUFBTSxFQUVoRUEsUUFBUSxPQUFRLEtBQUsrZ0IsQ0FBUSxFQUNsQ3ZoQixJQUFJK2tCLEVBQWtCLENBQUEsRUFDaEJDLEVBQWNuQyxHQUFlcGIsRUFBSyxDQUFBLENBQUksRUFNdEN3ZCxHQUxhLFdBQWZqQixHQUEyQnBQLElBQVMwRSxFQUFPeUYsZUFDM0NpRyxFQUFZNUMsV0FBYSxLQUNyQjJDLEVBQWtCLENBQUEsQ0FDckIsR0FFUWxELEdBQWMsR0FBRzllLEVBQVEraEIsRUFBYzloQixFQUFPdWUsRUFBUUksR0FBWXFELENBQVcsR0FDMUYsR0FBSSxDQUFDRCxFQUNELFVBQVdGO0VBQVd0RCxFQUFTMEQsQ0FDM0MsQ0FFSSxPQURBOWYsRUFBUUEsRUFBTTNFLFFBQVEsT0FBUSxLQUFLK2dCLENBQVEsTUFDaENzRDtFQUFXdEQsRUFBU3hlLEVBQVFvQyxFQUFRbkMsQ0FDbkQsQ0FrREEsU0FBU2tpQixHQUFnQjdHLEVBQU01VyxFQUFLcWMsRUFBV0MsR0FDM0MsR0FBTSxDQUFFbEYsWUFBQUEsRUFBYXNHLE9BQUFBLENBQU0sRUFBSzFkLEVBQzFCMmQsRUFBMkIsVUFBdEIsT0FBTy9HLEVBQUtsWixNQUNqQmtaLEVBQ0FqZixPQUFPQyxPQUFPLEdBQUlnZixFQUFNLENBQUVsWixNQUFPVyxPQUFPdVksRUFBS2xaLEtBQUssRUFBRyxFQUNyRHlQLEVBQVN5SixFQUFMLEtBTUpnSCxFQUFhLElBQ2YsT0FBUUMsR0FDSixLQUFLaE0sRUFBT3lGLGFBQ1osS0FBS3pGLEVBQU8wRixjQUNSLE9BQU9ILEdBQWVzRyxFQUNoQjNCLEdBQWE0QixFQUFHamdCLE1BQU9zQyxDQUFHLEVBQzFCb2MsR0FBWXVCLEVBQUkzZCxFQUFLcWMsRUFBV0MsQ0FBVyxFQUNyRCxLQUFLekssRUFBTzRGLGFBQ1IsT0FBTzhELEdBQW1Cb0MsRUFBR2pnQixNQUFPc0MsQ0FBRyxFQUMzQyxLQUFLNlIsRUFBTzZGLGFBQ1IsT0FBT21FLEdBQW1COEIsRUFBR2pnQixNQUFPc0MsQ0FBRyxFQUMzQyxLQUFLNlIsRUFBTzJGLE1BQ0RzRyxDQUFBQSxJQXhFRmxILEVBd0VjK0csRUFBWkcsSUF4RUk5ZCxFQXdFWUEsRUFBaEI4ZCxJQXhFU3pCLEVBd0VZQSxFQUFyQnlCLElBeEVvQnhCLEVBd0VZQSxFQXZFbkQsR0FBTSxDQUFFblAsS0FBQUEsRUFBTXpQLE1BQUFBLENBQUssRUFBS2taLEVBQ2xCLENBQUVtSCxhQUFBQSxFQUFjM0csWUFBQUEsRUFBYTBDLE9BQUFBLEVBQVFrRSxXQUFBQSxFQUFZTixPQUFBQSxDQUFNLEVBQUsxZCxFQUNsRSxHQUFLb1gsR0FBZTFaLEVBQU1rUSxTQUFTLElBQUksR0FDbEM4UCxHQUFVLFdBQVc3a0IsS0FBSzZFLENBQUssRUFDaEMsT0FBT3FlLEdBQWFyZSxFQUFPc0MsQ0FBRyxFQUVsQyxHQUFJLENBQUN0QyxHQUNELG9GQUFvRjdFLEtBQUs2RSxDQUFLLEVBTzlGLE9BQU8wWixHQUFlc0csR0FBVSxDQUFDaGdCLEVBQU1rUSxTQUFTLElBQUksRUFDOUNtTyxHQUFhcmUsRUFBT3NDLENBQUcsRUFDdkJvYyxHQUFZeEYsRUFBTTVXLEVBQUtxYyxFQUFXQyxDQUFXLEVBRXZELEdBQUksQ0FBQ2xGLEdBQ0QsQ0FBQ3NHLEdBQ0R2USxJQUFTMEUsRUFBTzJGLE9BQ2hCOVosRUFBTWtRLFNBQVMsSUFBSSxFQUVuQixPQUFPd08sR0FBWXhGLEVBQU01VyxFQUFLcWMsRUFBV0MsQ0FBVyxFQUV4RCxHQUFJaEIsR0FBdUI1ZCxDQUFLLEVBQUcsQ0FDL0IsR0FBZSxLQUFYb2MsRUFFQSxPQURBOVosRUFBSXljLGlCQUFtQixDQUFBLEVBQ2hCTCxHQUFZeEYsRUFBTTVXLEVBQUtxYyxFQUFXQyxDQUFXLEVBRW5ELEdBQUlsRixHQUFlMEMsSUFBV2tFLEVBQy9CLE9BQU9qQyxHQUFhcmUsRUFBT3NDLENBQUcsQ0FFMUMsQ0FDSSxJQUFNbkQsRUFBTWEsRUFBTTNFLFFBQVE7RUFBZStnQixDQUFRLEVBSWpELEdBQUlpRSxFQUFjLENBQ2QsSUFBTWxsQixFQUFPLEdBQVNnYixFQUFJdGEsU0FBdUIsMEJBQVpzYSxFQUFJQSxLQUFtQ0EsRUFBSWhiLE1BQU1BLEtBQUtnRSxDQUFHLEVBQ3hGLENBQUVvaEIsT0FBQUEsRUFBUXJMLEtBQUFBLENBQU0sRUFBRzVTLEVBQUlpVSxJQUFJNEQsT0FDakMsR0FBSWpGLEVBQUswQixLQUFLemIsQ0FBSSxHQUFLb2xCLEdBQVEzSixLQUFLemIsQ0FBSSxFQUNwQyxPQUFPa2pCLEdBQWFyZSxFQUFPc0MsQ0FBRyxDQUMxQyxDQUNJLE9BQU9vWCxFQUNEdmEsRUFDQXVkLEdBQWN2ZCxFQUFLaWQsRUFBUUcsR0FBV21CLEdBQWVwYixFQUFLLENBQUEsQ0FBSyxDQUFDLEVBeUJuRDhkLE1BQTJDLENBQ3RELFFBQ0ksT0FBTyxJQUN2QixDQUNLLEVBQ0R2bEIsSUFBSXFFLEVBQU1naEIsRUFuQkZ6USxFQUhKQSxJQUFTMEUsRUFBTzRGLGNBRVosa0RBQWtENWUsS0FBSzhrQixFQUFHamdCLEtBQUssRUFDeERtVSxFQUFPNEYsYUFtQkR0SyxDQUFJLEVBQ3pCLEdBQVksT0FBUnZRLEVBQWMsQ0FDZCxHQUFNLENBQUVzaEIsZUFBQUEsRUFBZ0JDLGtCQUFBQSxDQUFtQixFQUFHbmUsRUFBSXpJLFFBQzVDOGdCLEVBQUtqQixHQUFlOEcsR0FBbUJDLEVBRTdDLEdBQVksUUFEWnZoQixFQUFNZ2hCLEVBQVd2RixDQUFDLEdBRWQsTUFBTSxJQUFJalosTUFBTSxtQ0FBbUNpWixDQUFHLENBQ2xFLENBQ0ksT0FBT3piLENBQ1gsQ0N6VUEsU0FBU3doQixHQUF1Qm5LLEVBQUsxYyxHQUMzQnVTLEVBQU1uUyxPQUFPQyxPQUFPLENBQ3RCMmtCLFdBQVksQ0FBQSxFQUNaQyxjQUFlNUMsR0FDZnNFLGVBQWdCLEtBQ2hCQyxrQkFBbUIsUUFDbkJFLFdBQVksS0FDWjVDLG1CQUFvQixDQUFBLEVBQ3BCRSwrQkFBZ0MsR0FDaEMyQyxTQUFVLFFBQ1ZDLHNCQUF1QixDQUFBLEVBQ3ZCQyxVQUFXLENBQUEsRUFDWGhFLFVBQVcsR0FDWEMsZ0JBQWlCLEdBQ2pCZ0UsUUFBUyxPQUNUQyxXQUFZLENBQUEsRUFDWjVDLFlBQWEsS0FDYjZDLFFBQVMsT0FDVHhILGlCQUFrQixDQUFBLENBQ3JCLEVBQUVsRCxFQUFJNEQsT0FBTytHLGdCQUFpQnJuQixDQUFPLEVBQ3RDZ0IsSUFBSW1sQixFQUNKLE9BQVE1VCxFQUFJK1UsaUJBQ1IsSUFBSyxRQUNEbkIsRUFBUyxDQUFBLEVBQ1QsTUFDSixJQUFLLE9BQ0RBLEVBQVMsQ0FBQSxFQUNULE1BQ0osUUFDSUEsRUFBUyxJQUNyQixDQUNJLE1BQU8sQ0FDSDlJLFFBQVMsSUFBSUMsSUFDYlosSUFBQUEsRUFDQXNLLHNCQUF1QnpVLEVBQUl5VSxzQkFBd0IsSUFBTSxHQUN6RHpFLE9BQVEsR0FDUmtFLFdBQWtDLFVBQXRCLE9BQU9sVSxFQUFJZ1EsT0FBc0IsSUFBSWdGLE9BQU9oVixFQUFJZ1EsTUFBTSxFQUFJLEtBQ3RFNEQsT0FBQUEsRUFDQW5tQixRQUFTdVMsQ0FDWixDQUNMLENBNkNBLFNBQVN0TCxHQUFVb1ksRUFBTTVXLEVBQUtxYyxFQUFXQyxHQUNyQyxHQUFJeE0sRUFBTzhHLENBQUksRUFDWCxPQUFPQSxFQUFLM1UsU0FBU2pDLEVBQUtxYyxFQUFXQyxDQUFXLEVBQ3BELEdBQUk1TSxFQUFRa0gsQ0FBSSxFQUFHLENBQ2YsR0FBSTVXLEVBQUlpVSxJQUFJb0ssV0FDUixPQUFPekgsRUFBSzNVLFNBQVNqQyxDQUFHLEVBQzVCLEdBQUlBLEVBQUkrZSxpQkFBaUIvSixJQUFJNEIsQ0FBSSxFQUM3QixNQUFNLElBQUlsZixVQUFVLHlEQUF5RCxFQUd6RXNJLEVBQUkrZSxnQkFDSi9lLEVBQUkrZSxnQkFBZ0I3WSxJQUFJMFEsQ0FBSSxFQUU1QjVXLEVBQUkrZSxnQkFBa0IsSUFBSWxLLElBQUksQ0FBQytCLEVBQUssRUFDeENBLEVBQU9BLEVBQUt6YyxRQUFRNkYsRUFBSWlVLEdBQUcsQ0FFdkMsQ0FDSTFiLElBQUk2ZixFQUFTelUsS0FBQUEsRUFDYixJQWhDMEJ5VSxFQUFVeEQsRUFBU1gsRUFHdkMrSyxFQTZCQXJQLEVBQU9PLEVBQU8wRyxDQUFJLEVBQ2xCQSxFQUNBNVcsRUFBSWlVLElBQUkyRCxXQUFXaEIsRUFBTSxDQUFFcUIsU0FBVTlULEdBQU1pVSxFQUFTalUsRUFBSSxFQUd4RDZhLEdBRkQ1RyxFQUFBQSxJQWpFVCxDQUFzQnhGLEVBQU1nRSxLQUN4QixHQUFJQSxFQUFLL0MsSUFBSyxDQUNWLElBQU1oUixFQUFRK1AsRUFBSzNhLE9BQU9vZ0IsR0FBS0EsRUFBRXhFLE1BQVErQyxFQUFLL0MsR0FBRyxFQUNqRCxHQUFtQixFQUFmaFIsRUFBTTNLLE9BQ04sT0FBTzJLLEVBQU15VixLQUFLRCxHQUFLQSxFQUFFcmEsU0FBVzRZLEVBQUs1WSxNQUFNLEdBQUs2RSxFQUFNLEVBQ3RFLENBQ0l0SyxJQUFJNmYsRUFBU3pVLEtBQUFBLEVBQ1QzRyxFQUNKLEdBQUkrUyxFQUFTNkcsQ0FBSSxFQUFHLENBQ2hCNVosRUFBTTRaLEVBQUtsWixNQUNYbkYsSUFBSXNLLEVBQVErUCxFQUFLM2EsT0FBT29nQixHQUFLQSxFQUFFRSxXQUFXdmIsQ0FBRyxDQUFDLEVBQzNCLEVBQWY2RixFQUFNM0ssUUFFaUIsR0FEakIrbUIsRUFBWXBjLEVBQU01SyxPQUFPb2dCLEdBQUtBLEVBQUV4ZixJQUFJLEdBQzVCWCxTQUNWMkssRUFBUW9jLEdBRWhCN0csRUFDSXZWLEVBQU15VixLQUFLRCxHQUFLQSxFQUFFcmEsU0FBVzRZLEVBQUs1WSxNQUFNLEdBQUs2RSxFQUFNeVYsS0FBS0QsR0FBSyxDQUFDQSxFQUFFcmEsTUFBTSxDQUNsRixNQUVRaEIsRUFBTTRaLEVBQ053QixFQUFTeEYsRUFBSzBGLEtBQUtELEdBQUtBLEVBQUVJLFdBQWF6YixhQUFlcWIsRUFBRUksU0FBUyxFQUVyRSxHQUFLTCxFQUlMLE9BQU9BLEVBRkgsTUFETXJXLEVBQU8vRSxHQUFLSSxhQUFhMkUsTUFBUSxPQUFPL0UsRUFDeEMsSUFBSW9DLDhCQUE4QjJDLFNBQVksQ0FHNUQsR0FzQzhCL0IsRUFBSWlVLElBQUk0RCxPQUFPakYsS0FBTWpELENBQUksRUFDckN1UCxDQXJDTXZQLEVBQU15SSxFQUFRLENBQUV4RCxRQUFBQSxFQUFTWCxJQUFBQSxDQUFHLEdBcUNsQ2lMLENBQWV2UCxFQUFNeUksRUFBUXBZLEdBcEN0Q2lVLEVBQUlvSyxZQUVIVyxFQUFRLElBQ1J2SyxHQUFVMUUsRUFBU0osQ0FBSSxHQUFLTSxFQUFhTixDQUFJLElBQU1BLEVBQUs4RSxTQUNoREQsR0FBY0MsQ0FBTSxJQUM5QkcsRUFBUTFPLElBQUl1TyxDQUFNLEVBQ2xCdUssRUFBTWxqQixLQUFLLElBQUkyWSxDQUFRLElBRXJCWixFQUFNbEUsRUFBS2tFLE1BQWlCdUUsRUFBTzdlLFFBQVUsS0FBTzZlLEVBQU92RSxPQUU3RG1MLEVBQU1sakIsS0FBS21ZLEVBQUlvSyxXQUFXekssVUFBVUMsQ0FBRyxDQUFDLEVBQ3JDbUwsRUFBTTdtQixLQUFLLEdBQUcsR0FWVixJQXNDTDBFLEdBRmEsRUFBZm1pQixFQUFNOW1CLFNBQ044SCxFQUFJdWEsZUFBaUJ2YSxFQUFJdWEsZUFBaUIsR0FBS3lFLEVBQU05bUIsT0FBUyxHQUMxQixZQUE1QixPQUFPa2dCLEVBQU81WixVQUNwQjRaLEVBQU81WixVQUFVbVIsRUFBTTNQLEVBQUtxYyxFQUFXQyxDQUFXLEVBQ2xEdk0sRUFBU0osQ0FBSSxFQUNUOE4sR0FBZ0I5TixFQUFNM1AsRUFBS3FjLEVBQVdDLENBQVcsRUFDakQzTSxFQUFLMU4sU0FBU2pDLEVBQUtxYyxFQUFXQyxDQUFXLEdBQ25ELE9BQUswQyxFQUVFalAsRUFBU0osQ0FBSSxHQUFnQixNQUFYOVMsRUFBSSxJQUF5QixNQUFYQSxFQUFJLEdBQ3RDbWlCLEVBQUgsSUFBWW5pQixFQUNUbWlCO0VBQVVoZixFQUFJOFosT0FBU2pkLEVBSHJCQSxDQUlmLENDMUhBLFNBQVNzaUIsR0FBS0MsRUFBVUMsR0FDSCxVQUFiRCxHQUFxQyxTQUFiQSxHQUN4QjlmLFFBQVE2ZixLQUFLRSxDQUFPLENBRTVCLENDRUEsSUFDTUMsRUFBUSxDQUNWL0csU0FBVTdhLEdBRkksT0FFS0EsR0FDRyxVQUFqQixPQUFPQSxHQUhFLE9BR29CQSxFQUFNNmhCLFlBQ3hDaG1CLFFBQVMsTUFDVHNhLElBQUssMEJBQ0xoYixLQUFNLE9BQ05zQixRQUFTLElBQU14QyxPQUFPQyxPQUFPLElBQUlpYSxFQUFPeEQsT0FQMUIsSUFPMEMsQ0FBQyxFQUFHLENBQ3hEbVIsV0FBWUMsRUFDcEIsQ0FBSyxFQUNEamhCLFVBQVcsSUFWRyxJQVdsQixFQU1BLFNBQVNpaEIsR0FBZ0J6ZixFQUFLbEksRUFBSzRGLEdBRS9CLEdBREFBLEVBQVFzQyxHQUFPMFAsRUFBUWhTLENBQUssRUFBSUEsRUFBTXZELFFBQVE2RixFQUFJaVUsR0FBRyxFQUFJdlcsRUFDckRzUyxHQUFNdFMsQ0FBSyxFQUNYLElBQUssSUFBTXFiLEtBQU1yYixFQUFNc1QsTUFDbkIwTyxHQUFXMWYsRUFBS2xJLEVBQUtpaEIsQ0FBRSxPQUMxQixHQUFJdmhCLE1BQU1DLFFBQVFpRyxDQUFLLEVBQ3hCLElBQUssSUFBTXFiLEtBQU1yYixFQUNiZ2lCLEdBQVcxZixFQUFLbEksRUFBS2loQixDQUFFLE9BRTNCMkcsR0FBVzFmLEVBQUtsSSxFQUFLNEYsQ0FBSyxDQUNsQyxDQUNBLFNBQVNnaUIsR0FBVzFmLEVBQUtsSSxFQUFLNEYsR0FDMUIsSUFBTWtSLEVBQVM1TyxHQUFPMFAsRUFBUWhTLENBQUssRUFBSUEsRUFBTXZELFFBQVE2RixFQUFJaVUsR0FBRyxFQUFJdlcsRUFDaEUsR0FBSSxDQUFDbVMsR0FBTWpCLENBQU0sRUFDYixNQUFNLElBQUl4UCxNQUFNLDJDQUEyQyxFQUUvRCxJQUFLLEdBQU0sQ0FBQ3dELEVBQUtsRixLQURGa1IsRUFBTzJHLE9BQU8sS0FBTXZWLEVBQUs0UixHQUFHLEVBRW5DOVosYUFBZThaLElBQ1Y5WixFQUFJa2QsSUFBSXBTLENBQUcsR0FDWjlLLEVBQUk4SCxJQUFJZ0QsRUFBS2xGLENBQUssRUFFakI1RixhQUFlK2MsSUFDcEIvYyxFQUFJb08sSUFBSXRELENBQUcsRUFFTGpMLE9BQU9vRCxVQUFVMkgsZUFBZTFILEtBQUtsRCxFQUFLOEssQ0FBRyxHQUNuRGpMLE9BQU9tZSxlQUFlaGUsRUFBSzhLLEVBQUssQ0FDNUJsRixNQUFBQSxFQUNBRSxTQUFVLENBQUEsRUFDVkQsV0FBWSxDQUFBLEVBQ1pFLGFBQWMsQ0FBQSxDQUM5QixDQUFhLENBSWIsQ0N2REEsU0FBUzhoQixHQUFlM2YsRUFBS2xJLEVBQUssQ0FBRThLLElBQUFBLEVBQUtsRixNQUFBQSxDQUFLLEdBQzFDLElEZWdCc0MsRUFBSzRDLEVDWXJCLE9BM0JJc04sRUFBT3ROLENBQUcsR0FBS0EsRUFBSTRjLFdBQ25CNWMsRUFBSTRjLFdBQVd4ZixFQUFLbEksRUFBSzRGLENBQUssR0RjbEJzQyxFQ1pJQSxFRFlDNEMsRUNaSUEsR0RZSzBjLEVBQU0vRyxTQUFTM1YsQ0FBRyxHQUMvQ21OLEVBQVNuTixDQUFHLElBQ1IsQ0FBQ0EsRUFBSXVLLE1BQVF2SyxFQUFJdUssT0FBUzBFLEVBQU8yRixRQUNsQzhILEVBQU0vRyxTQUFTM1YsRUFBSWxGLEtBQUssSUFDNUJzQyxHQUFLaVUsSUFBSTRELE9BQU9qRixLQUFLMEIsS0FBS1QsR0FBT0EsRUFBSUEsTUFBUXlMLEVBQU16TCxLQUFPQSxFQUFJdGEsT0FBTyxFQ2ZqRWttQixHQUFnQnpmLEVBQUtsSSxFQUFLNEYsQ0FBSyxHQUV6QmtpQixFQUFRdEssRUFBSzFTLEVBQUssR0FBSTVDLENBQUcsRUFDM0JsSSxhQUFlOFosSUFDZjlaLEVBQUk4SCxJQUFJZ2dCLEVBQU90SyxFQUFLNVgsRUFBT2tpQixFQUFPNWYsQ0FBRyxDQUFDLEVBRWpDbEksYUFBZStjLElBQ3BCL2MsRUFBSW9PLElBQUkwWixDQUFLLEdBSVBDLEVBQVV2SyxFQUFLNVgsRUFEZm9pQixHQWVsQixDQUFzQmxkLEVBQUtnZCxFQUFPNWYsS0FDOUIsR0FBYyxPQUFWNGYsRUFDQSxNQUFPLEdBQ1gsR0FBcUIsVUFBakIsT0FBT0EsRUFDUCxPQUFPdmhCLE9BQU91aEIsQ0FBSyxFQUN2QixHQUFJMVAsRUFBT3ROLENBQUcsR0FBSzVDLEdBQUtpVSxJQUFLLENBQ3pCLElBRVd0RSxFQUZMb1EsRUFBUzNCLEdBQXVCcGUsRUFBSWlVLElBQUssRUFBRSxFQUNqRDhMLEVBQU9uTCxRQUFVLElBQUlDLElBQ3JCLElBQVdsRixLQUFRM1AsRUFBSTRVLFFBQVF0VCxLQUFNLEVBQ2pDeWUsRUFBT25MLFFBQVExTyxJQUFJeUosRUFBSzhFLE1BQU0sRUFDbENzTCxFQUFPckMsT0FBUyxDQUFBLEVBQ2hCcUMsRUFBT0MsZUFBaUIsQ0FBQSxFQUNsQkMsRUFBU3JkLEVBQUlYLFNBQVM4ZCxDQUFNLEVBQ2xDLEdBQUksQ0FBQy9mLEVBQUlxVyxhQUFjLENBQ25COWQsSUFBSTJuQixFQUFVM2hCLEtBQUtDLFVBQVV5aEIsQ0FBTSxFQUNkLEdBQWpCQyxFQUFRaG9CLFNBQ1Jnb0IsRUFBVUEsRUFBUW5VLFVBQVUsRUFBRyxFQUFFLEVBQUksUUFDekNvVCxHQUFLbmYsRUFBSWlVLElBQUkxYyxRQUFRNm5CLDJGQUE0RmMsMkNBQWlELEVBQ2xLbGdCLEVBQUlxVyxhQUFlLENBQUEsQ0FDL0IsQ0FDUSxPQUFPNEosQ0FDZixDQUNJLE9BQU8xaEIsS0FBS0MsVUFBVW9oQixDQUFLLENBQy9CLEdBdEMyQ2hkLEVBQUtnZCxFQUFPNWYsQ0FBRyxFQUNQQSxDQUFHLEVBQ3RDOGYsS0FBYWhvQixFQUNiSCxPQUFPbWUsZUFBZWhlLEVBQUtnb0IsRUFBVyxDQUNsQ3BpQixNQUFPbWlCLEVBQ1BqaUIsU0FBVSxDQUFBLEVBQ1ZELFdBQVksQ0FBQSxFQUNaRSxhQUFjLENBQUEsQ0FDbEMsQ0FBaUIsRUFFRC9GLEVBQUlnb0IsR0FBYUQsS0FHdEIvbkIsQ0FDWCxDQzlCQSxTQUFTcW9CLEdBQVd2ZCxFQUFLbEYsRUFBT3NDLEdBQ3RCa0ssRUFBSTBOLEdBQVdoVixFQUFLZSxLQUFBQSxFQUFXM0QsQ0FBRyxFQUNsQ3dILEVBQUlvUSxHQUFXbGEsRUFBT2lHLEtBQUFBLEVBQVczRCxDQUFHLEVBQzFDLE9BQU8sSUFBSStSLEVBQUs3SCxFQUFHMUMsQ0FBQyxDQUN4QixPQUNNdUssRUFDRjNVLFlBQVl3RixFQUFLbEYsRUFBUSxNQUNyQi9GLE9BQU9tZSxlQUFlN1csS0FBTXdRLEVBQVcsQ0FBRS9SLE1BQU80UixHQUFNLEVBQ3REclEsS0FBSzJELElBQU1BLEVBQ1gzRCxLQUFLdkIsTUFBUUEsQ0FDckIsQ0FDSThRLE1BQU1xSixHQUNGdGYsR0FBSSxDQUFFcUssSUFBQUEsRUFBS2xGLE1BQUFBLENBQUssRUFBS3VCLEtBS3JCLE9BSklpUixFQUFPdE4sQ0FBRyxJQUNWQSxFQUFNQSxFQUFJNEwsTUFBTXFKLENBQU0sR0FDdEIzSCxFQUFPeFMsQ0FBSyxJQUNaQSxFQUFRQSxFQUFNOFEsTUFBTXFKLENBQU0sR0FDdkIsSUFBSTlGLEVBQUtuUCxFQUFLbEYsQ0FBSyxDQUNsQyxDQUNJNlgsT0FBT3ZjLEVBQUdnSCxHQUVOLE9BQU8yZixHQUFlM2YsRUFEVEEsR0FBS2tXLFNBQVcsSUFBSXRFLElBQVEsR0FDUjNTLElBQUksQ0FDN0MsQ0FDSWdELFNBQVNqQyxFQUFLcWMsRUFBV0MsR0FDZHRjLEdBQUFBLEdBQUtpVSxJQUNObU0sQ0FBQUEsR0FBQUEsQ0N6QlMsQ0FBRXhkLElBQUFBLEVBQUtsRixNQUFBQSxDQUFPLEVBQUVzQyxFQUFLcWMsRUFBV0MsR0R5QnpDOEQsQ0FBY25oQixLQUFNZSxFQUFLcWMsRUFBV0MsR0N4QnhDLENBQUUrRCxjQUFBQSxFQUFlcE0sSUFBQUEsRUFBSzZGLE9BQUFBLEVBQVFrRSxXQUFBQSxFQUFZem1CLFFBQVMsQ0FBRWlsQixjQUFBQSxFQUFlZ0MsVUFBQUEsRUFBV0UsV0FBQUEsQ0FBVSxDQUFJLEVBQUcxZSxFQUN0R3pILElBQUkrbkIsRUFBY3BRLEVBQU90TixDQUFHLEdBQUtBLEVBQUk2VyxTQUFZLEtBQ2pELEdBQUlpRixFQUFZLENBQ1osR0FBSTRCLEVBQ0EsTUFBTSxJQUFJbGhCLE1BQU0sa0RBQWtELEVBRXRFLEdBQUk2USxFQUFhck4sQ0FBRyxHQUFNLENBQUNzTixFQUFPdE4sQ0FBRyxHQUFvQixVQUFmLE9BQU9BLEVBRTdDLE1BQU0sSUFBSXhELE1BREUsNERBQ08sQ0FFL0IsQ0FDSTdHLElBQUlnb0IsRUFBYyxDQUFDN0IsSUFDZCxDQUFDOWIsR0FDRzBkLEdBQXVCLE1BQVQ1aUIsR0FBaUIsQ0FBQ3NDLEVBQUkwZCxRQUNyQ3pOLEVBQWFyTixDQUFHLElBQ2ZtTixFQUFTbk4sQ0FBRyxFQUNQQSxFQUFJdUssT0FBUzBFLEVBQU95RixjQUFnQjFVLEVBQUl1SyxPQUFTMEUsRUFBTzBGLGNBQ3pDLFVBQWYsT0FBTzNVLElBTWpCNGQsR0FMSnhnQixFQUFNckksT0FBT0MsT0FBTyxHQUFJb0ksRUFBSyxDQUN6QnFnQixjQUFlLENBQUEsRUFDZmpKLFlBQWEsQ0FBQ21KLElBQWdCN0IsR0FBYyxDQUFDMkIsR0FDN0N2RyxPQUFRQSxFQUFTa0UsQ0FDekIsQ0FBSyxFQUNvQixDQUFBLEdBQ2pCeUMsRUFBWSxDQUFBLEVBQ1o1akIsRUFBTTJCLEdBQVVvRSxFQUFLNUMsRUFBSyxJQUFPd2dCLEVBQWlCLENBQUEsRUFBTyxJQUFPQyxFQUFZLENBQUEsQ0FBSyxFQUNyRixHQUFJLENBQUNGLEdBQWUsQ0FBQ3ZnQixFQUFJMGQsUUFBdUIsS0FBYjdnQixFQUFJM0UsT0FBZSxDQUNsRCxHQUFJd21CLEVBQ0EsTUFBTSxJQUFJdGYsTUFBTSw4RUFBOEUsRUFDbEdtaEIsRUFBYyxDQUFBLENBQ3RCLENBQ0ksR0FBSXZnQixFQUFJMGQsUUFDSixHQUFJMkMsR0FBMEIsTUFBVDNpQixFQUdqQixPQUZJOGlCLEdBQWtCbkUsR0FDbEJBLEVBQVcsRUFDQSxLQUFSeGYsRUFBYSxJQUFNMGpCLEVBQWMsS0FBSzFqQixFQUFRQSxDQUNqRSxNQUVTLEdBQUt3akIsR0FBaUIsQ0FBQzNCLEdBQXlCLE1BQVRoaEIsR0FBaUI2aUIsRUFPekQsT0FOQTFqQixFQUFNLEtBQUtBLEVBQ1B5akIsR0FBYyxDQUFDRSxFQUNmM2pCLEdBQU9rZCxHQUFZbGQsRUFBS21ELEVBQUk4WixPQUFRMEMsRUFBYzhELENBQVUsQ0FBQyxFQUV4REcsR0FBYW5FLEdBQ2xCQSxFQUFhLEVBQ1Z6ZixFQUVQMmpCLElBQ0FGLEVBQWEsTUFDYkMsR0FDSUQsSUFDQXpqQixHQUFPa2QsR0FBWWxkLEVBQUttRCxFQUFJOFosT0FBUTBDLEVBQWM4RCxDQUFVLENBQUMsR0FDakV6akIsT0FBV0E7RUFBUWlkLE9BR25CamQsR0FBTSxJQUNGeWpCLElBQ0F6akIsR0FBT2tkLEdBQVlsZCxFQUFLbUQsRUFBSThaLE9BQVEwQyxFQUFjOEQsQ0FBVSxDQUFDLElBRXJFL25CLElBQUltb0IsRUFBS0MsRUFBS0MsRUE0QlZDLEdBM0JBM1EsRUFBT3hTLENBQUssR0FDWmdqQixFQUFNLENBQUMsQ0FBQ2hqQixFQUFNb2pCLFlBQ2RILEVBQU1qakIsRUFBTThiLGNBQ1pvSCxFQUFlbGpCLEVBQU0rYixVQUdyQmlILEVBQU0sQ0FBQSxFQUNOQyxFQUFNLEtBQ05DLEVBQWUsS0FDWGxqQixHQUEwQixVQUFqQixPQUFPQSxJQUNoQkEsRUFBUXVXLEVBQUkyRCxXQUFXbGEsQ0FBSyxJQUVwQ3NDLEVBQUlvWCxZQUFjLENBQUEsRUFDYm1KLEdBQWdCRCxHQUFjdlEsQ0FBQUEsRUFBU3JTLENBQUssSUFDN0NzQyxFQUFJdWEsY0FBZ0IxZCxFQUFJM0UsT0FBUyxHQUNyQ3VvQixFQUFZLENBQUEsRUFDUGpDLEdBQ0RSLEVBQXFCLEdBQXJCQSxFQUFXOWxCLFNBQ1Y4SCxFQUFJMGQsUUFDSjZDLEdBQ0R2USxDQUFBQSxHQUFNdFMsQ0FBSyxHQUNWQSxFQUFNcWpCLE1BQ05yakIsRUFBTW1XLEtBQ05uVyxFQUFNK1csU0FFUHpVLEVBQUk4WixPQUFTOVosRUFBSThaLE9BQU8vTixVQUFVLENBQUMsR0FFaEIsQ0FBQSxHQUVuQmlWLEdBREVDLEVBQVd6aUIsR0FBVWQsRUFBT3NDLEVBQUssSUFBTzZnQixFQUFtQixDQUFBLEVBQU8sSUFBT0osRUFBWSxDQUFBLENBQUssRUFDdkYsS0FDVCxHQUFJSCxHQUFjSSxHQUFPQyxFQUNyQkssRUFBS04sRUFBTSxLQUFPLEdBQ2RDLElBQ01PLEVBQUsxRSxFQUFjbUUsQ0FBRyxFQUM1Qks7RUFBV25ILEVBQWNxSCxFQUFJbGhCLEVBQUk4WixNQUFNLEdBRTFCLEtBQWJtSCxHQUFvQmpoQixFQUFJMGQsT0FLeEJzRDtFQUFXaGhCLEVBQUk4WixPQUpKLE9BQVBrSCxJQUNBQSxFQUFLLGFBTVosR0FBSSxDQUFDVCxHQUFldFEsRUFBYXZTLENBQUssRUFBRyxDQUNwQ3lqQixFQUFNRixFQUFTLEdBQ2ZHLEVBQU1ILEVBQVNwZixRQUFRLElBQUksRUFDM0J3ZixFQUFxQixDQUFFLElBQVZELEVBQ2JMLEVBQU8vZ0IsRUFBSTBkLFFBQVVoZ0IsRUFBTXFqQixNQUErQixJQUF2QnJqQixFQUFNc1QsTUFBTTlZLE9BQ3JELEdBQUltcEIsR0FBYyxDQUFDTixFQUFNLENBQ3JCeG9CLElBQUkrb0IsRUFBZSxDQUFBLEVBQ25CLEdBQUlELElBQXVCLE1BQVJGLEdBQXVCLE1BQVJBLEdBQWMsQ0FDNUM1b0IsSUFBSWdwQixFQUFNTixFQUFTcGYsUUFBUSxHQUFHLEdBT2xCLE1BRlIwZixFQUpRLE1BQVJKLEdBQ1EsQ0FBRSxJQUFWSSxHQUNBQSxFQUFNSCxHQUNnQixNQUF0QkgsRUFBU00sRUFBTSxHQUNUTixFQUFTcGYsUUFBUSxJQUFLMGYsRUFBTSxDQUFDLEVBRW5DQSxJQUFjSCxFQUFNRyxLQUNwQkQsRUFBZSxDQUFBLEVBQ25DLENBQ2lCQSxJQUNETjtFQUFVaGhCLEVBQUk4WixPQUM5QixDQUNBLEtBQzBCLEtBQWJtSCxHQUFtQyxPQUFoQkEsRUFBUyxLQUNqQ0QsRUFBSyxJQWFULE9BWEFua0IsR0FBT21rQixFQUFLQyxFQUNSamhCLEVBQUkwZCxPQUNBbUQsR0FBb0J4RSxHQUNwQkEsRUFBVyxFQUVWdUUsR0FBZ0IsQ0FBQ0MsRUFDdEJoa0IsR0FBT2tkLEdBQVlsZCxFQUFLbUQsRUFBSThaLE9BQVEwQyxFQUFjb0UsQ0FBWSxDQUFDLEVBRTFESCxHQUFhbkUsR0FDbEJBLEVBQWEsRUFFVnpmLENEcEhrRCxDQUMvQzBCLE9BQUFBLEtBQUtDLFVBQVVTLElBQUksQ0FDakMsQ0FDQSxDRTdCQSxTQUFTdWlCLEdBQW9CQyxFQUFZemhCLEVBQUt6SSxHQUcxQyxPQUZheUksRUFBSTBkLFFBQVUrRCxFQUFXVixLQUNiVyxHQUEwQkMsSUFDbENGLEVBQVl6aEIsRUFBS3pJLENBQU8sQ0FDN0MsQ0FDQSxTQUFTb3FCLEdBQXlCLENBQUVsSSxRQUFBQSxFQUFTekksTUFBQUEsQ0FBSyxFQUFJaFIsRUFBSyxDQUFFNGhCLGdCQUFBQSxFQUFpQkMsVUFBQUEsRUFBV0MsV0FBQUEsRUFBWXhGLFlBQUFBLEVBQWFELFVBQUFBLENBQVMsR0FDdkgsR0FBTSxDQUFFdkMsT0FBQUEsRUFBUXZpQixRQUFTLENBQUVpbEIsY0FBQUEsQ0FBYSxDQUFJLEVBQUd4YyxFQUN6QytoQixFQUFVcHFCLE9BQU9DLE9BQU8sR0FBSW9JLEVBQUssQ0FBRThaLE9BQVFnSSxFQUFZM1UsS0FBTSxLQUFNLEVBQ3pFNVUsSUFBSWtvQixFQUFZLENBQUEsRUFDaEIsSUFBTXZNLEVBQVEsR0FDZCxJQUFLM2IsSUFBSUksRUFBSSxFQUFHQSxFQUFJcVksRUFBTTlZLE9BQVEsRUFBRVMsRUFBRyxDQUNuQyxJQVVVcXBCLEVBVkpwTCxFQUFPNUYsRUFBTXJZLEdBQ25CSixJQUFJa2hCLEVBQVUsS0FpQlY1YyxHQWhCQXFULEVBQU8wRyxDQUFJLEdBQ1AsQ0FBQzZKLEdBQWE3SixFQUFLa0ssYUFDbkI1TSxFQUFNcFksS0FBSyxFQUFFLEVBQ2pCbW1CLEdBQWlCamlCLEVBQUtrVSxFQUFPMEMsRUFBSzRDLGNBQWVpSCxDQUFTLEVBQ3REN0osRUFBSzZDLFVBQ0xBLEVBQVU3QyxFQUFLNkMsVUFFZDNKLEVBQU84RyxDQUFJLElBQ1ZvTCxFQUFLOVIsRUFBTzBHLEVBQUtoVSxHQUFHLEVBQUlnVSxFQUFLaFUsSUFBTSxRQUVqQyxDQUFDNmQsR0FBYXVCLEVBQUdsQixhQUNqQjVNLEVBQU1wWSxLQUFLLEVBQUUsRUFDakJtbUIsR0FBaUJqaUIsRUFBS2tVLEVBQU84TixFQUFHeEksY0FBZWlILENBQVMsR0FHaEVBLEVBQVksQ0FBQSxFQUNGamlCLEdBQVVvWSxFQUFNbUwsRUFBUyxJQUFPdEksRUFBVSxLQUFPLElBQU9nSCxFQUFZLENBQUEsQ0FBSyxHQUMvRWhILElBQ0E1YyxHQUFPa2QsR0FBWWxkLEVBQUtpbEIsRUFBWXRGLEVBQWMvQyxDQUFPLENBQUMsR0FDMURnSCxHQUFhaEgsSUFDYmdILEVBQVksQ0FBQSxHQUNoQnZNLEVBQU1wWSxLQUFLOGxCLEVBQWtCL2tCLENBQUcsQ0FDeEMsQ0FDSXRFLElBQUlzRSxFQUNKLEdBQXFCLElBQWpCcVgsRUFBTWhjLE9BQ04yRSxFQUFNZ2xCLEVBQVV2bUIsTUFBUXVtQixFQUFVdG1CLFFBRWpDLENBQ0RzQixFQUFNcVgsRUFBTSxHQUNaLElBQUszYixJQUFJSSxFQUFJLEVBQUdBLEVBQUl1YixFQUFNaGMsT0FBUSxFQUFFUyxFQUFHLENBQ25DLElBQU0ySyxFQUFPNFEsRUFBTXZiLEdBQ25Ca0UsR0FBT3lHO0VBQVl3VyxFQUFTeFcsRUFBUyxJQUNqRCxDQUNBLENBUUksT0FQSW1XLEdBQ0E1YyxHQUFPLEtBQU9nZCxFQUFjMkMsRUFBYy9DLENBQU8sRUFBR0ssQ0FBTSxFQUN0RHVDLEdBQ0FBLEVBQVcsR0FFVm9FLEdBQWFuRSxHQUNsQkEsRUFBYSxFQUNWemYsQ0FDWCxDQUNBLFNBQVM2a0IsR0FBd0IsQ0FBRTFRLE1BQUFBLENBQU8sRUFBRWhSLEVBQUssQ0FBRTZoQixVQUFBQSxFQUFXQyxXQUFBQSxJQUMxRCxHQUFNLENBQUVoSSxPQUFBQSxFQUFRa0UsV0FBQUEsRUFBWU8sc0JBQXVCMkQsRUFBVzNxQixRQUFTLENBQUVpbEIsY0FBQUEsQ0FBZSxDQUFBLEVBQUt4YyxFQUV2RitoQixHQURORCxHQUFjOUQsRUFDRXJtQixPQUFPQyxPQUFPLEdBQUlvSSxFQUFLLENBQ25DOFosT0FBUWdJLEVBQ1JwRSxPQUFRLENBQUEsRUFDUnZRLEtBQU0sSUFDZCxDQUFLLEdBQ0Q1VSxJQUFJNHBCLEVBQWEsQ0FBQSxFQUNiQyxFQUFlLEVBQ25CLElBQU1sTyxFQUFRLEdBQ2QsSUFBSzNiLElBQUlJLEVBQUksRUFBR0EsRUFBSXFZLEVBQU05WSxPQUFRLEVBQUVTLEVBQUcsQ0FDbkMsSUFVVXFwQixFQVFBSyxFQWxCSnpMLEVBQU81RixFQUFNclksR0FDbkJKLElBQUlraEIsRUFBVSxLQThCVjVjLEdBN0JBcVQsRUFBTzBHLENBQUksR0FDUEEsRUFBS2tLLGFBQ0w1TSxFQUFNcFksS0FBSyxFQUFFLEVBQ2pCbW1CLEdBQWlCamlCLEVBQUtrVSxFQUFPMEMsRUFBSzRDLGNBQWUsQ0FBQSxDQUFLLEVBQ2xENUMsRUFBSzZDLFVBQ0xBLEVBQVU3QyxFQUFLNkMsVUFFZDNKLEVBQU84RyxDQUFJLEtBQ1ZvTCxFQUFLOVIsRUFBTzBHLEVBQUtoVSxHQUFHLEVBQUlnVSxFQUFLaFUsSUFBTSxRQUVqQ29mLEVBQUdsQixhQUNINU0sRUFBTXBZLEtBQUssRUFBRSxFQUNqQm1tQixHQUFpQmppQixFQUFLa1UsRUFBTzhOLEVBQUd4SSxjQUFlLENBQUEsQ0FBSyxFQUNoRHdJLEVBQUd2SSxXQUNIMEksRUFBYSxDQUFBLElBRWZFLEVBQUtuUyxFQUFPMEcsRUFBS2xaLEtBQUssRUFBSWtaLEVBQUtsWixNQUFRLE9BRXJDMmtCLEVBQUc1SSxVQUNIQSxFQUFVNEksRUFBRzVJLFNBQ2I0SSxFQUFHN0ksZ0JBQ0gySSxFQUFhLENBQUEsSUFFRSxNQUFkdkwsRUFBS2xaLE9BQWlCc2tCLEdBQUl2SSxVQUMvQkEsRUFBVXVJLEVBQUd2SSxVQUdqQkEsSUFDQTBJLEVBQWEsQ0FBQSxHQUNQM2pCLEdBQVVvWSxFQUFNbUwsRUFBUyxJQUFPdEksRUFBVSxJQUFLLEdBQ3JEOWdCLEVBQUlxWSxFQUFNOVksT0FBUyxJQUNuQjJFLEdBQU8sS0FDUDRjLElBQ0E1YyxHQUFPa2QsR0FBWWxkLEVBQUtpbEIsRUFBWXRGLEVBQWMvQyxDQUFPLENBQUMsR0FDMUQsQ0FBQzBJLElBQWVqTyxFQUFNaGMsT0FBU2txQixHQUFnQnZsQixFQUFJK1EsU0FBUyxJQUFJLEtBQ2hFdVUsRUFBYSxDQUFBLEdBQ2pCak8sRUFBTXBZLEtBQUtlLENBQUcsRUFDZHVsQixFQUFlbE8sRUFBTWhjLE1BQzdCLENBQ0ksSUFNYzRFLEVBTlIsQ0FBRXhCLE1BQUFBLEVBQU9DLElBQUFBLENBQUcsRUFBS3NtQixFQUN2QixHQUFxQixJQUFqQjNOLEVBQU1oYyxPQUNOLE9BQU9vRCxFQUFRQyxFQU9mLEdBSks0bUIsSUFDS3JsQixFQUFNb1gsRUFBTWxSLE9BQU8sQ0FBQ3NmLEVBQUtoZixJQUFTZ2YsRUFBTWhmLEVBQUtwTCxPQUFTLEVBQUcsQ0FBQyxFQUNoRWlxQixFQUFxQyxFQUF4Qm5pQixFQUFJekksUUFBUWlqQixXQUFpQjFkLEVBQU1rRCxFQUFJekksUUFBUWlqQixXQUU1RDJILEVBQVksQ0FDWjVwQixJQUFJc0UsRUFBTXZCLEVBQ1YsSUFBSyxJQUFNZ0ksS0FBUTRRLEVBQ2ZyWCxHQUFPeUc7RUFBWTBhLEVBQWFsRSxFQUFTeFcsRUFBUyxLQUN0RCxPQUFVekc7RUFBUWlkLEVBQVN2ZSxDQUN2QyxDQUVZLE1BQU8sR0FBR0QsRUFBUTRtQixFQUFZaE8sRUFBTS9iLEtBQUssR0FBRyxFQUFJK3BCLEVBQVkzbUIsQ0FHeEUsQ0FDQSxTQUFTMG1CLEdBQWlCLENBQUVuSSxPQUFBQSxFQUFRdmlCLFFBQVMsQ0FBRWlsQixjQUFBQSxDQUFhLEdBQU10SSxFQUFPdUYsRUFBU2dILElBRTFFaEgsRUFEQUEsR0FBV2dILEVBQ0RoSCxFQUFRMWdCLFFBQVEsT0FBUSxFQUFFLEVBQ3BDMGdCLEtBQ004SSxFQUFLMUksRUFBYzJDLEVBQWMvQyxDQUFPLEVBQUdLLENBQU0sRUFDdkQ1RixFQUFNcFksS0FBS3ltQixFQUFHQyxVQUFXLENBQUEsRUFFakMsQ0NySUEsU0FBU0MsR0FBU3pSLEVBQU9wTyxHQUNyQixJQUNXbVcsRUFETDdPLEVBQUk2RixFQUFTbk4sQ0FBRyxFQUFJQSxFQUFJbEYsTUFBUWtGLEVBQ3RDLElBQVdtVyxLQUFNL0gsRUFDYixHQUFJbEIsRUFBT2lKLENBQUUsRUFBRyxDQUNaLEdBQUlBLEVBQUduVyxNQUFRQSxHQUFPbVcsRUFBR25XLE1BQVFzSCxFQUM3QixPQUFPNk8sRUFDWCxHQUFJaEosRUFBU2dKLEVBQUduVyxHQUFHLEdBQUttVyxFQUFHblcsSUFBSWxGLFFBQVV3TSxFQUNyQyxPQUFPNk8sQ0FDdkIsQ0FHQSxPQUNNMkosVUFBZ0JsUixHQUNsQmdDLHFCQUNJLE1BQU8sdUJBQ2YsQ0FDSXBXLFlBQVl5YSxHQUNSdEIsTUFBTWxILEdBQUt3SSxDQUFNLEVBQ2pCNVksS0FBSytSLE1BQVEsRUFDckIsQ0FLSTdWLFlBQVkwYyxFQUFRN2EsRUFBS2dELEdBQ3JCLEdBQU0sQ0FBRTRZLGNBQUFBLEVBQWUrSixTQUFBQSxDQUFRLEVBQUszaUIsRUFDOUJsSSxFQUFNLElBQUltSCxLQUFLNFksQ0FBTSxFQUMzQixJQUFNM1IsRUFBTSxDQUFDdEQsRUFBS2xGLEtBQ2QsR0FBd0IsWUFBcEIsT0FBT2lsQixFQUNQamxCLEVBQVFpbEIsRUFBUzNuQixLQUFLZ0MsRUFBSzRGLEVBQUtsRixDQUFLLE9BQ3BDLEdBQUlsRyxNQUFNQyxRQUFRa3JCLENBQVEsR0FBSyxDQUFDQSxFQUFTL1UsU0FBU2hMLENBQUcsRUFDdEQsT0FDVWUsS0FBQUEsSUFBVmpHLEdBQXVCa2IsQ0FBQUEsR0FDdkI5Z0IsRUFBSWtaLE1BQU1sVixLQUFLcWtCLEdBQVd2ZCxFQUFLbEYsRUFBT3NDLENBQUcsQ0FBQyxDQUNqRCxFQUNELEdBQUloRCxhQUFlNFUsSUFDZixJQUFLLEdBQU0sQ0FBQ2hQLEVBQUtsRixLQUFVVixFQUN2QmtKLEVBQUl0RCxFQUFLbEYsQ0FBSyxPQUVqQixHQUFJVixHQUFzQixVQUFmLE9BQU9BLEVBQ25CLElBQUssSUFBTTRGLEtBQU9qTCxPQUFPMkosS0FBS3RFLENBQUcsRUFDN0JrSixFQUFJdEQsRUFBSzVGLEVBQUk0RixFQUFJLEVBS3pCLE1BSHFDLFlBQWpDLE9BQU9pVixFQUFPK0ssZ0JBQ2Q5cUIsRUFBSWtaLE1BQU02UixLQUFLaEwsRUFBTytLLGNBQWMsRUFFakM5cUIsQ0FDZixDQU9Jb08sSUFBSTRjLEVBQU1DLEdBQ054cUIsSUFBSXlxQixFQUVBQSxFQURBbFQsRUFBT2dULENBQUksRUFDSEEsRUFDRkEsR0FBd0IsVUFBaEIsT0FBT0EsR0FBdUIsUUFBU0EsRUFLN0MsSUFBSS9RLEVBQUsrUSxFQUFLbGdCLElBQUtrZ0IsRUFBS3BsQixLQUFLLEVBSDdCLElBQUlxVSxFQUFLK1EsRUFBTUEsR0FBTXBsQixLQUFLLEVBSWhDdUYsRUFBT3dmLEdBQVN4akIsS0FBSytSLE1BQU9nUyxFQUFNcGdCLEdBQUcsRUFDM0MsSUFBTXFnQixFQUFjaGtCLEtBQUs0WSxRQUFRK0ssZUFDakMsR0FBSTNmLEVBQU0sQ0FDTixHQUFJLENBQUM4ZixFQUNELE1BQU0sSUFBSTNqQixhQUFhNGpCLEVBQU1wZ0IsaUJBQWlCLEVBRTlDbU4sRUFBUzlNLEVBQUt2RixLQUFLLEdBQUsyWixHQUFjMkwsRUFBTXRsQixLQUFLLEVBQ2pEdUYsRUFBS3ZGLE1BQU1BLE1BQVFzbEIsRUFBTXRsQixNQUV6QnVGLEVBQUt2RixNQUFRc2xCLEVBQU10bEIsS0FDbkMsS0FDaUJ1bEIsQ0FBQUEsR0FFSyxDQUFFLEtBRE50cUIsRUFBSXNHLEtBQUsrUixNQUFNa1MsVUFBVXRNLEdBQVFxTSxFQUFZRCxFQUFPcE0sQ0FBSSxFQUFJLENBQUMsR0FPbkUzWCxLQUFLK1IsTUFBTWxWLEtBQUtrbkIsQ0FBSyxFQUhqQi9qQixLQUFLK1IsTUFBTW5YLE9BQU9sQixFQUFHLEVBQUdxcUIsQ0FBSyxDQUs3QyxDQUNJM04sT0FBT3pTLEdBQ0dtVyxFQUFLMEosR0FBU3hqQixLQUFLK1IsTUFBT3BPLENBQUcsRUFDbkMsTUFBS21XLENBQUFBLENBQUFBLEdBR2UsRUFEUjlaLEtBQUsrUixNQUFNblgsT0FBT29GLEtBQUsrUixNQUFNblAsUUFBUWtYLENBQUUsRUFBRyxDQUFDLEVBQzVDN2dCLE1BQ25CLENBQ0ltTCxJQUFJVCxFQUFLd1csR0FFQ3pKLEVBREs4UyxHQUFTeGpCLEtBQUsrUixNQUFPcE8sQ0FBRyxHQUNsQmxGLE1BQ2pCLE9BQVEsQ0FBQzBiLEdBQWNySixFQUFTSixDQUFJLEVBQUlBLEVBQUtqUyxNQUFRaVMsSUFBU2hNLEtBQUFBLENBQ3RFLENBQ0lxUixJQUFJcFMsR0FDQSxNQUFPLENBQUMsQ0FBQzZmLEdBQVN4akIsS0FBSytSLE1BQU9wTyxDQUFHLENBQ3pDLENBQ0loRCxJQUFJZ0QsRUFBS2xGLEdBQ0x1QixLQUFLaUgsSUFBSSxJQUFJNkwsRUFBS25QLEVBQUtsRixDQUFLLEVBQUcsQ0FBQSxDQUFJLENBQzNDLENBTUk2WCxPQUFPdmMsRUFBR2dILEVBQUttakIsR0FDWCxJQUdXdk0sRUFITDllLEVBQU1xckIsRUFBTyxJQUFJQSxFQUFTbmpCLEdBQUtrVyxTQUFXLElBQUl0RSxJQUFRLEdBQ3hENVIsR0FBSzBWLFVBQ0wxVixFQUFJMFYsU0FBUzVkLENBQUcsRUFDcEIsSUFBVzhlLEtBQVEzWCxLQUFLK1IsTUFDcEIyTyxHQUFlM2YsRUFBS2xJLEVBQUs4ZSxDQUFJLEVBQ2pDLE9BQU85ZSxDQUNmLENBQ0ltSyxTQUFTakMsRUFBS3FjLEVBQVdDLEdBQ3JCLEdBQUksQ0FBQ3RjLEVBQ0QsT0FBT3pCLEtBQUtDLFVBQVVTLElBQUksRUFDOUIsSUFBSyxJQUFNMlgsS0FBUTNYLEtBQUsrUixNQUNwQixHQUFJLENBQUNsQixFQUFPOEcsQ0FBSSxFQUNaLE1BQU0sSUFBSXhYLDRDQUE0Q2IsS0FBS0MsVUFBVW9ZLENBQUksV0FBVyxFQUk1RixNQUZJLENBQUM1VyxFQUFJcWdCLGVBQWlCcGhCLEtBQUtvYSxpQkFBaUIsQ0FBQSxDQUFLLElBQ2pEclosRUFBTXJJLE9BQU9DLE9BQU8sR0FBSW9JLEVBQUssQ0FBRXFnQixjQUFlLENBQUEsRUFBTSxHQUNqRG1CLEdBQW9CdmlCLEtBQU1lLEVBQUssQ0FDbEM0aEIsZ0JBQWlCLEdBQ2pCQyxVQUFXLENBQUV2bUIsTUFBTyxJQUFLQyxJQUFLLEdBQUssRUFDbkN1bUIsV0FBWTloQixFQUFJOFosUUFBVSxHQUMxQndDLFlBQUFBLEVBQ0FELFVBQUFBLENBQ1osQ0FBUyxDQUNULENBQ0EsQ0MxSUEsSUFBTXZrQixHQUFNLENBQ1IycEIsV0FBWSxNQUNabG9CLFFBQVMsQ0FBQSxFQUNUa2YsVUFBV2lLLEVBQ1g3TyxJQUFLLHdCQUNMMVosUUFBUXJDLEVBQUt3YixHQUdULE9BRkt6RCxHQUFNL1gsQ0FBRyxHQUNWd2IsRUFBUSxpQ0FBaUMsRUFDdEN4YixDQUNWLEVBQ0Q4ZixXQUFZLENBQUNDLEVBQVE3YSxFQUFLZ0QsSUFBUTBpQixFQUFRdm5CLEtBQUswYyxFQUFRN2EsRUFBS2dELENBQUcsQ0FDbkUsUUNQTW9qQixVQUFnQjVSLEdBQ2xCZ0MscUJBQ0ksTUFBTyx1QkFDZixDQUNJcFcsWUFBWXlhLEdBQ1J0QixNQUFNL0csR0FBS3FJLENBQU0sRUFDakI1WSxLQUFLK1IsTUFBUSxFQUNyQixDQUNJOUssSUFBSXhJLEdBQ0F1QixLQUFLK1IsTUFBTWxWLEtBQUs0QixDQUFLLENBQzdCLENBU0kyWCxPQUFPelMsR0FDR2xCLEVBQU0yaEIsR0FBWXpnQixDQUFHLEVBQzNCLE1BQW1CLFVBQWYsT0FBT2xCLEdBR1MsRUFEUnpDLEtBQUsrUixNQUFNblgsT0FBTzZILEVBQUssQ0FBQyxFQUN6QnhKLE1BQ25CLENBQ0ltTCxJQUFJVCxFQUFLd1csR0FDTCxJQUFNMVgsRUFBTTJoQixHQUFZemdCLENBQUcsRUFDM0IsR0FBbUIsVUFBZixPQUFPbEIsRUFHWCxPQURNcVgsRUFBSzlaLEtBQUsrUixNQUFNdFAsR0FDZixDQUFDMFgsR0FBY3JKLEVBQVNnSixDQUFFLEVBQUlBLEVBQUdyYixNQUFRcWIsQ0FDeEQsQ0FPSS9ELElBQUlwUyxHQUNNbEIsRUFBTTJoQixHQUFZemdCLENBQUcsRUFDM0IsTUFBc0IsVUFBZixPQUFPbEIsR0FBb0JBLEVBQU16QyxLQUFLK1IsTUFBTTlZLE1BQzNELENBUUkwSCxJQUFJZ0QsRUFBS2xGLEdBQ0wsSUFBTWdFLEVBQU0yaEIsR0FBWXpnQixDQUFHLEVBQzNCLEdBQW1CLFVBQWYsT0FBT2xCLEVBQ1AsTUFBTSxJQUFJdEMscUNBQXFDd0QsSUFBTSxFQUNuREssRUFBT2hFLEtBQUsrUixNQUFNdFAsR0FDcEJxTyxFQUFTOU0sQ0FBSSxHQUFLb1UsR0FBYzNaLENBQUssRUFDckN1RixFQUFLdkYsTUFBUUEsRUFFYnVCLEtBQUsrUixNQUFNdFAsR0FBT2hFLENBQzlCLENBQ0k2WCxPQUFPdmMsRUFBR2dILEdBQ04sSUFJVzRXLEVBSkwwTSxFQUFNLEdBQ1J0akIsR0FBSzBWLFVBQ0wxVixFQUFJMFYsU0FBUzROLENBQUcsRUFDcEIvcUIsSUFBSUksRUFBSSxFQUNSLElBQVdpZSxLQUFRM1gsS0FBSytSLE1BQ3BCc1MsRUFBSXhuQixLQUFLd1osRUFBS3NCLEVBQU12WSxPQUFPMUYsQ0FBQyxFQUFFLEVBQUdxSCxDQUFHLENBQUMsRUFDekMsT0FBT3NqQixDQUNmLENBQ0lyaEIsU0FBU2pDLEVBQUtxYyxFQUFXQyxHQUNyQixPQUFLdGMsRUFFRXdoQixHQUFvQnZpQixLQUFNZSxFQUFLLENBQ2xDNGhCLGdCQUFpQixLQUNqQkMsVUFBVyxDQUFFdm1CLE1BQU8sSUFBS0MsSUFBSyxHQUFLLEVBQ25DdW1CLFlBQWE5aEIsRUFBSThaLFFBQVUsSUFBTSxLQUNqQ3dDLFlBQUFBLEVBQ0FELFVBQUFBLENBQ1osQ0FBUyxFQVBVOWQsS0FBS0MsVUFBVVMsSUFBSSxDQVF0QyxDQUNJOUQsWUFBWTBjLEVBQVE3YSxFQUFLZ0QsR0FDckIsSUFNa0I0QyxFQU5WK2YsRUFBYTNpQixFQUFMLFNBQ1ZzakIsRUFBTSxJQUFJcmtCLEtBQUs0WSxDQUFNLEVBQzNCLEdBQUk3YSxHQUFPcVIsT0FBT21LLFlBQVk3Z0IsT0FBT3FGLENBQUcsRUFBRyxDQUN2Q3pFLElBQUlJLEVBQUksRUFDUixJQUFLSixJQUFJd2dCLEtBQU0vYixFQUNhLFlBQXBCLE9BQU8ybEIsSUFDRC9mLEVBQU01RixhQUFlNlgsSUFBTWtFLEVBQUsxYSxPQUFPMUYsQ0FBQyxFQUFFLEVBQ2hEb2dCLEVBQUs0SixFQUFTM25CLEtBQUtnQyxFQUFLNEYsRUFBS21XLENBQUUsR0FFbkN1SyxFQUFJdFMsTUFBTWxWLEtBQUs4YixHQUFXbUIsRUFBSXBWLEtBQUFBLEVBQVczRCxDQUFHLENBQUMsQ0FFN0QsQ0FDUSxPQUFPc2pCLENBQ2YsQ0FDQSxDQUNBLFNBQVNELEdBQVl6Z0IsR0FDakJySyxJQUFJbUosRUFBTXFPLEVBQVNuTixDQUFHLEVBQUlBLEVBQUlsRixNQUFRa0YsRUFHdEMsTUFBc0IsVUFBZixPQURIbEIsRUFEQUEsR0FBc0IsVUFBZixPQUFPQSxFQUNScEQsT0FBT29ELENBQUcsRUFDTkEsSUFBb0JwRCxPQUFPcWEsVUFBVWpYLENBQUcsR0FBWSxHQUFQQSxFQUNyREEsRUFDQSxJQUNWLENDM0dBLElBQU00aEIsR0FBTSxDQUNSN0IsV0FBWSxNQUNabG9CLFFBQVMsQ0FBQSxFQUNUa2YsVUFBVzJLLEVBQ1h2UCxJQUFLLHdCQUNMMVosUUFBUW1wQixFQUFLaFEsR0FHVCxPQUZLdEQsR0FBTXNULENBQUcsR0FDVmhRLEVBQVEsa0NBQWtDLEVBQ3ZDZ1EsQ0FDVixFQUNEMUwsV0FBWSxDQUFDQyxFQUFRN2EsRUFBS2dELElBQVFvakIsRUFBUWpvQixLQUFLMGMsRUFBUTdhLEVBQUtnRCxDQUFHLENBQ25FLEVDWk0xSCxHQUFTLENBQ1hpZ0IsU0FBVTdhLEdBQTBCLFVBQWpCLE9BQU9BLEVBQzFCbkUsUUFBUyxDQUFBLEVBQ1RzYSxJQUFLLHdCQUNMMVosUUFBUzBDLEdBQU9BLEVBQ2hCMkIsVUFBVW9ZLEVBQU01VyxFQUFLcWMsRUFBV0MsR0FFNUIsT0FBT21CLEdBQWdCN0csRUFEdkI1VyxFQUFNckksT0FBT0MsT0FBTyxDQUFFbW1CLGFBQWMsQ0FBQSxDQUFNLEVBQUUvZCxDQUFHLEVBQ2JxYyxFQUFXQyxDQUFXLENBQ2hFLENBQ0EsRUNUTWlILEdBQVUsQ0FDWmhMLFNBQVU3YSxHQUFrQixNQUFUQSxFQUNuQmthLFdBQVksSUFBTSxJQUFJL0YsRUFBTyxJQUFJLEVBQ2pDdFksUUFBUyxDQUFBLEVBQ1RzYSxJQUFLLHlCQUNMaGIsS0FBTSx3QkFDTnNCLFFBQVMsSUFBTSxJQUFJMFgsRUFBTyxJQUFJLEVBQzlCclQsVUFBVyxDQUFDLENBQUVvUSxPQUFBQSxDQUFRLEVBQUU1TyxJQUEwQixVQUFsQixPQUFPNE8sR0FBdUIyVSxHQUFRMXFCLEtBQUtBLEtBQUsrVixDQUFNLEVBQ2hGQSxFQUNBNU8sRUFBSXpJLFFBQVFrbkIsT0FDdEIsRUNWTStFLEdBQVUsQ0FDWmpMLFNBQVU3YSxHQUEwQixXQUFqQixPQUFPQSxFQUMxQm5FLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSyx5QkFDTGhiLEtBQU0sb0NBQ05zQixRQUFTMEMsR0FBTyxJQUFJZ1YsRUFBa0IsTUFBWGhWLEVBQUksSUFBeUIsTUFBWEEsRUFBSSxFQUFVLEVBQzNEMkIsVUFBVSxDQUFFb1EsT0FBQUEsRUFBUWxSLE1BQUFBLENBQUssRUFBSXNDLEdBQ3pCLEdBQUk0TyxHQUFVNFUsR0FBUTNxQixLQUFLQSxLQUFLK1YsQ0FBTSxHQUU5QmxSLEtBRHFCLE1BQWRrUixFQUFPLElBQTRCLE1BQWRBLEVBQU8sSUFFbkMsT0FBT0EsRUFFZixPQUFPbFIsRUFBUXNDLEVBQUl6SSxRQUFRb25CLFFBQVUzZSxFQUFJekksUUFBUSttQixRQUN6RCxDQUNBLEVDaEJBLFNBQVNtRixFQUFnQixDQUFFemxCLE9BQUFBLEVBQVEwbEIsa0JBQUFBLEVBQW1CN1AsSUFBQUEsRUFBS25XLE1BQUFBLENBQUssR0FDNUQsR0FBcUIsVUFBakIsT0FBT0EsRUFDUCxPQUFPVyxPQUFPWCxDQUFLLEVBQ3ZCLElBQU0wUCxFQUF1QixVQUFqQixPQUFPMVAsRUFBcUJBLEVBQVFZLE9BQU9aLENBQUssRUFDNUQsR0FBSSxDQUFDaW1CLFNBQVN2VyxDQUFHLEVBQ2IsT0FBT3dXLE1BQU14VyxDQUFHLEVBQUksT0FBU0EsRUFBTSxFQUFJLFFBQVUsT0FDckQ3VSxJQUFJOEwsRUFBSTlGLEtBQUtDLFVBQVVkLENBQUssRUFDNUIsR0FBSSxDQUFDTSxHQUNEMGxCLElBQ0MsQ0FBQzdQLEdBQWUsNEJBQVJBLElBQ1QsTUFBTWhiLEtBQUt3TCxDQUFDLEVBQUcsQ0FDZjlMLElBQUlJLEVBQUkwTCxFQUFFeEMsUUFBUSxHQUFHLEVBS2pCaUMsR0FKQW5MLEVBQUksSUFDSkEsRUFBSTBMLEVBQUVuTSxPQUNObU0sR0FBSyxLQUVEcWYsR0FBcUJyZixFQUFFbk0sT0FBU1MsRUFBSSxJQUM1QyxLQUFhLEVBQU5tTCxDQUFDLElBQ0pPLEdBQUssR0FDakIsQ0FDSSxPQUFPQSxDQUNYLENDbEJBLElBQU13ZixHQUFXLENBQ2J0TCxTQUFVN2EsR0FBMEIsVUFBakIsT0FBT0EsRUFDMUJuRSxRQUFTLENBQUEsRUFDVHNhLElBQUssMEJBQ0xoYixLQUFNLGlEQUNOc0IsUUFBUzBDLEdBQXVDLFFBQWhDQSxFQUFJL0QsTUFBTSxDQUFFLENBQUEsRUFBRVQsY0FDeEJ5ckIsSUFDVyxNQUFYam5CLEVBQUksR0FDQXlCLE9BQU95bEIsa0JBQ1B6bEIsT0FBTzBsQixrQkFDakJ4bEIsVUFBV2lsQixDQUNmLEVBQ01RLEdBQVcsQ0FDYjFMLFNBQVU3YSxHQUEwQixVQUFqQixPQUFPQSxFQUMxQm5FLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSywwQkFDTDdWLE9BQVEsTUFDUm5GLEtBQU0seURBQ05zQixRQUFTMEMsR0FBT3FuQixXQUFXcm5CLENBQUcsRUFDOUIyQixVQUFVbVIsR0FDTixJQUFNdkMsRUFBTTlPLE9BQU9xUixFQUFLalMsS0FBSyxFQUM3QixPQUFPaW1CLFNBQVN2VyxDQUFHLEVBQUlBLEVBQUkrVyxjQUFlLEVBQUdWLEVBQWdCOVQsQ0FBSSxDQUN6RSxDQUNBLEVBQ015VSxHQUFRLENBQ1Y3TCxTQUFVN2EsR0FBMEIsVUFBakIsT0FBT0EsRUFDMUJuRSxRQUFTLENBQUEsRUFDVHNhLElBQUssMEJBQ0xoYixLQUFNLHFDQUNOc0IsUUFBUTBDLEdBQ0osSUFBTThTLEVBQU8sSUFBSWtDLEVBQU9xUyxXQUFXcm5CLENBQUcsQ0FBQyxFQUNqQ3duQixFQUFNeG5CLEVBQUlnRixRQUFRLEdBQUcsRUFHM0IsTUFGWSxDQUFBLElBQVJ3aUIsR0FBc0MsTUFBeEJ4bkIsRUFBSUEsRUFBSTNFLE9BQVMsS0FDL0J5WCxFQUFLK1Qsa0JBQW9CN21CLEVBQUkzRSxPQUFTbXNCLEVBQU0sR0FDekMxVSxDQUNWLEVBQ0RuUixVQUFXaWxCLENBQ2YsRUN0Q0EsSUFBTWEsR0FBYyxHQUE0QixVQUFqQixPQUFPNW1CLEdBQXNCWSxPQUFPcWEsVUFBVWpiLENBQUssRUFDNUU2bUIsR0FBYSxDQUFDMW5CLEVBQUsybkIsRUFBUUMsRUFBTyxDQUFFQyxZQUFBQSxDQUFXLElBQVFBLEVBQWM1TSxPQUFPamIsQ0FBRyxFQUFJOG5CLFNBQVM5bkIsRUFBSWtQLFVBQVV5WSxDQUFNLEVBQUdDLENBQUssRUFDOUgsU0FBU0csR0FBYWpWLEVBQU04VSxFQUFPaFksR0FDL0IsSUFBUS9PLEVBQVVpUyxFQUFMLE1BQ2IsT0FBSTJVLEdBQVk1bUIsQ0FBSyxHQUFjLEdBQVRBLEVBQ2YrTyxFQUFTL08sRUFBTXVFLFNBQVN3aUIsQ0FBSyxFQUNqQ2hCLEVBQWdCOVQsQ0FBSSxDQUMvQixDQUNBLElBQU1rVixHQUFTLENBQ1h0TSxTQUFVN2EsR0FBUzRtQixHQUFZNW1CLENBQUssR0FBYyxHQUFUQSxFQUN6Q25FLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSyx3QkFDTDdWLE9BQVEsTUFDUm5GLEtBQU0sYUFDTnNCLFFBQVMsQ0FBQzBDLEVBQUtpb0IsRUFBVWhiLElBQVF5YSxHQUFXMW5CLEVBQUssRUFBRyxFQUFHaU4sQ0FBRyxFQUMxRHRMLFVBQVdtUixHQUFRaVYsR0FBYWpWLEVBQU0sRUFBRyxJQUFJLENBQ2pELEVBQ01vVixHQUFNLENBQ1J4TSxTQUFVK0wsR0FDVi9xQixRQUFTLENBQUEsRUFDVHNhLElBQUssd0JBQ0xoYixLQUFNLGdCQUNOc0IsUUFBUyxDQUFDMEMsRUFBS2lvQixFQUFVaGIsSUFBUXlhLEdBQVcxbkIsRUFBSyxFQUFHLEdBQUlpTixDQUFHLEVBQzNEdEwsVUFBV2lsQixDQUNmLEVBQ011QixHQUFTLENBQ1h6TSxTQUFVN2EsR0FBUzRtQixHQUFZNW1CLENBQUssR0FBYyxHQUFUQSxFQUN6Q25FLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSyx3QkFDTDdWLE9BQVEsTUFDUm5GLEtBQU0sbUJBQ05zQixRQUFTLENBQUMwQyxFQUFLaW9CLEVBQVVoYixJQUFReWEsR0FBVzFuQixFQUFLLEVBQUcsR0FBSWlOLENBQUcsRUFDM0R0TCxVQUFXbVIsR0FBUWlWLEdBQWFqVixFQUFNLEdBQUksSUFBSSxDQUNsRCxFQzNCTWtJLEdBQVMsQ0FDWC9mLEdBQ0F3ckIsR0FDQWhyQixHQUNBaXJCLEdBQ0FDLEdBQ0FxQixHQUNBRSxHQUNBQyxHQUNBbkIsR0FDQUksR0FDQUcsSUNmSixTQUFTRSxHQUFZNW1CLEdBQ2pCLE1BQXdCLFVBQWpCLE9BQU9BLEdBQXNCWSxPQUFPcWEsVUFBVWpiLENBQUssQ0FDOUQsQ0FDQSxJQUFNdW5CLEdBQWdCLENBQUEsQ0FBR3ZuQixNQUFBQSxDQUFPLElBQUthLEtBQUtDLFVBQVVkLENBQUssRUFvRG5EbWEsR0FBUyxDQUFDL2YsR0FBS3dyQixJQUFLdm5CLE9BbkROLENBQ2hCLENBQ0l3YyxTQUFVN2EsR0FBMEIsVUFBakIsT0FBT0EsRUFDMUJuRSxRQUFTLENBQUEsRUFDVHNhLElBQUssd0JBQ0wxWixRQUFTMEMsR0FBT0EsRUFDaEIyQixVQUFXeW1CLEVBQ2QsRUFDRCxDQUNJMU0sU0FBVTdhLEdBQWtCLE1BQVRBLEVBQ25Ca2EsV0FBWSxJQUFNLElBQUkvRixFQUFPLElBQUksRUFDakN0WSxRQUFTLENBQUEsRUFDVHNhLElBQUsseUJBQ0xoYixLQUFNLFNBQ05zQixRQUFTLElBQU0sS0FDZnFFLFVBQVd5bUIsRUFDZCxFQUNELENBQ0kxTSxTQUFVN2EsR0FBMEIsV0FBakIsT0FBT0EsRUFDMUJuRSxRQUFTLENBQUEsRUFDVHNhLElBQUsseUJBQ0xoYixLQUFNLGlCQUNOc0IsUUFBUzBDLEdBQWUsU0FBUkEsRUFDaEIyQixVQUFXeW1CLEVBQ2QsRUFDRCxDQUNJMU0sU0FBVStMLEdBQ1YvcUIsUUFBUyxDQUFBLEVBQ1RzYSxJQUFLLHdCQUNMaGIsS0FBTSx3QkFDTnNCLFFBQVMsQ0FBQzBDLEVBQUtpb0IsRUFBVSxDQUFFSixZQUFBQSxDQUFhLElBQUtBLEVBQWM1TSxPQUFPamIsQ0FBRyxFQUFJOG5CLFNBQVM5bkIsRUFBSyxFQUFFLEVBQ3pGMkIsVUFBVyxDQUFBLENBQUdkLE1BQUFBLENBQU8sSUFBSzRtQixHQUFZNW1CLENBQUssRUFBSUEsRUFBTXVFLFNBQVEsRUFBSzFELEtBQUtDLFVBQVVkLENBQUssQ0FDekYsRUFDRCxDQUNJNmEsU0FBVTdhLEdBQTBCLFVBQWpCLE9BQU9BLEVBQzFCbkUsUUFBUyxDQUFBLEVBQ1RzYSxJQUFLLDBCQUNMaGIsS0FBTSx5REFDTnNCLFFBQVMwQyxHQUFPcW5CLFdBQVdybkIsQ0FBRyxFQUM5QjJCLFVBQVd5bUIsRUFDbkIsR0FFa0IsQ0FDZDFyQixRQUFTLENBQUEsRUFDVHNhLElBQUssR0FDTGhiLEtBQU0sSUFDTnNCLFFBQVEwQyxFQUFLeVcsR0FFVCxPQURBQSxFQUFRLDJCQUEyQi9VLEtBQUtDLFVBQVUzQixDQUFHLENBQUcsRUFDakRBLENBQ2YsQ0FDQSxDQUN1RCxFQ3hEakRxb0IsR0FBUyxDQUNYM00sU0FBVTdhLEdBQVNBLGFBQWlCeW5CLFdBQ3BDNXJCLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSywyQkFTTDFaLFFBQVErYyxFQUFLNUQsR0FDVCxHQUFvQixZQUFoQixPQUFPOFIsS0FVUCxPQURBOVIsRUFBUSwwRkFBMEYsRUFDM0Y0RCxFQVJQLElBQU1yYSxFQUFNdW9CLEtBQUtsTyxFQUFJbmUsUUFBUSxVQUFXLEVBQUUsQ0FBQyxFQUNyQ3NzQixFQUFTLElBQUlGLFdBQVd0b0IsRUFBSTNFLE1BQU0sRUFDeEMsSUFBS0ssSUFBSUksRUFBSSxFQUFHQSxFQUFJa0UsRUFBSTNFLE9BQVEsRUFBRVMsRUFDOUIwc0IsRUFBTzFzQixHQUFLa0UsRUFBSXlvQixXQUFXM3NCLENBQUMsRUFDaEMsT0FBTzBzQixDQU1kLEVBQ0Q3bUIsVUFBVSxDQUFFaWIsUUFBQUEsRUFBU3RNLEtBQUFBLEVBQU16UCxNQUFBQSxDQUFLLEVBQUlzQyxFQUFLcWMsRUFBV0MsR0FDaEQsSUFBTWlKLEVBQU03bkIsRUFDWm5GLElBQUlzRSxFQUNKLEdBQW9CLFlBQWhCLE9BQU8yb0IsS0FPUCxNQUFNLElBQUlwbUIsTUFBTSwwRkFBMEYsRUFQOUUsQ0FDNUI3RyxJQUFJa3RCLEVBQUksR0FDUixJQUFLbHRCLElBQUlJLEVBQUksRUFBR0EsRUFBSTRzQixFQUFJcnRCLE9BQVEsRUFBRVMsRUFDOUI4c0IsR0FBS3BuQixPQUFPcW5CLGFBQWFILEVBQUk1c0IsRUFBRSxFQUNuQ2tFLEVBQU0yb0IsS0FBS0MsQ0FBQyxDQUN4QixDQU1RLElBRkt0WSxFQUFBQSxHQUNNMEUsRUFBTzBGLGlCQUNMMUYsRUFBTzRGLGFBQWMsQ0FDOUIsSUFBTStDLEVBQVk5ZSxLQUFLcWIsSUFBSS9XLEVBQUl6SSxRQUFRaWpCLFVBQVl4YSxFQUFJOFosT0FBTzVoQixPQUFROEgsRUFBSXpJLFFBQVFrakIsZUFBZSxFQUMzRnBXLEVBQUkzSSxLQUFLaXFCLEtBQUs5b0IsRUFBSTNFLE9BQVNzaUIsQ0FBUyxFQUNwQ3RHLEVBQVEsSUFBSTFjLE1BQU02TSxDQUFDLEVBQ3pCLElBQUs5TCxJQUFJSSxFQUFJLEVBQUd3TCxFQUFJLEVBQUd4TCxFQUFJMEwsRUFBRyxFQUFFMUwsRUFBR3dMLEdBQUtxVyxFQUNwQ3RHLEVBQU12YixHQUFLa0UsRUFBSS9CLE9BQU9xSixFQUFHcVcsQ0FBUyxFQUV0QzNkLEVBQU1xWCxFQUFNL2IsS0FBS2dWLElBQVMwRSxFQUFPMEYsY0FBZ0IsS0FBTyxHQUFHLENBQ3ZFLENBQ1EsT0FBT2tHLEdBQWdCLENBQUVoRSxRQUFBQSxFQUFTdE0sS0FBQUEsRUFBTXpQLE1BQU9iLEdBQU9tRCxFQUFLcWMsRUFBV0MsQ0FBVyxDQUN6RixDQUNBLEVDakRBLFNBQVNzSixHQUFhdEMsRUFBS2hRLEdBQ3ZCLEdBQUl0RCxHQUFNc1QsQ0FBRyxFQUNULElBQUsvcUIsSUFBSUksRUFBSSxFQUFHQSxFQUFJMnFCLEVBQUl0UyxNQUFNOVksT0FBUSxFQUFFUyxFQUFHLENBQ3ZDSixJQUFJcWUsRUFBTzBNLEVBQUl0UyxNQUFNclksR0FDckIsSUFLVW1xQixFQU1JK0MsRUFYVi9WLEVBQU84RyxDQUFJLElBRU4vRyxHQUFNK0csQ0FBSSxJQUNTLEVBQXBCQSxFQUFLNUYsTUFBTTlZLFFBQ1hvYixFQUFRLGdEQUFnRCxFQUN0RHdQLEVBQU9sTSxFQUFLNUYsTUFBTSxJQUFNLElBQUllLEVBQUssSUFBSUYsRUFBTyxJQUFJLENBQUMsRUFDbkQrRSxFQUFLNEMsZ0JBQ0xzSixFQUFLbGdCLElBQUk0VyxjQUFnQnNKLEVBQUtsZ0IsSUFBSTRXLGNBQ3pCNUMsRUFBSzRDO0VBQWtCc0osRUFBS2xnQixJQUFJNFcsY0FDbkM1QyxFQUFLNEMsZUFDWDVDLEVBQUs2QyxXQUNDb00sRUFBSy9DLEVBQUtwbEIsT0FBU29sQixFQUFLbGdCLEtBQzNCNlcsUUFBVW9NLEVBQUdwTSxRQUNQN0MsRUFBSzZDO0VBQVlvTSxFQUFHcE0sUUFDdkI3QyxFQUFLNkMsU0FFZjdDLEVBQU9rTSxHQUVYUSxFQUFJdFMsTUFBTXJZLEdBQUttWCxFQUFPOEcsQ0FBSSxFQUFJQSxFQUFPLElBQUk3RSxFQUFLNkUsQ0FBSSxFQUM5RCxNQUdRdEQsRUFBUSxrQ0FBa0MsRUFDOUMsT0FBT2dRLENBQ1gsQ0FDQSxTQUFTd0MsR0FBWWpPLEVBQVFrTyxFQUFVL2xCLEdBQ25DLElBQVEyaUIsRUFBYTNpQixFQUFMLFNBQ1ZnbUIsRUFBUSxJQUFJNUMsRUFBUXZMLENBQU0sRUFDaENtTyxFQUFNblMsSUFBTSwwQkFDWnRiLElBQUlJLEVBQUksRUFDUixHQUFJb3RCLEdBQVkxWCxPQUFPbUssWUFBWTdnQixPQUFPb3VCLENBQVEsRUFDOUMsSUFBS3h0QixJQUFJd2dCLEtBQU1nTixFQUFVLENBQ0csWUFBcEIsT0FBT3BELElBQ1A1SixFQUFLNEosRUFBUzNuQixLQUFLK3FCLEVBQVUxbkIsT0FBTzFGLENBQUMsRUFBRSxFQUFHb2dCLENBQUUsR0FDaER4Z0IsSUFBSXFLLEVBQUtsRixFQUNULEdBQUlsRyxNQUFNQyxRQUFRc2hCLENBQUUsRUFBRyxDQUNuQixHQUFrQixJQUFkQSxFQUFHN2dCLE9BS0gsTUFBTSxJQUFJUixVQUFVLGdDQUFnQ3FoQixDQUFJLEVBSnhEblcsRUFBTW1XLEVBQUcsR0FDVHJiLEVBQVFxYixFQUFHLEVBSS9CLE1BQ2lCLEdBQUlBLEdBQU1BLGFBQWNwaEIsT0FBUSxDQUNqQyxJQUFNMkosRUFBTzNKLE9BQU8ySixLQUFLeVgsQ0FBRSxFQUMzQixHQUFvQixJQUFoQnpYLEVBQUtwSixPQUtMLE1BQU0sSUFBSVIsOENBQThDNEosRUFBS3BKLGFBQWEsRUFKMUUwSyxFQUFNdEIsRUFBSyxHQUNYNUQsRUFBUXFiLEVBQUduVyxFQUsvQixNQUVnQkEsRUFBTW1XLEVBRVZpTixFQUFNaFYsTUFBTWxWLEtBQUtxa0IsR0FBV3ZkLEVBQUtsRixFQUFPc0MsQ0FBRyxDQUFDLENBQ3hELENBQ0ksT0FBT2dtQixDQUNYLENBQ0EsSUFBTUEsR0FBUSxDQUNWdkUsV0FBWSxNQUNabG9CLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSywwQkFDTDFaLFFBQVN5ckIsR0FDVGhPLFdBQVlrTyxFQUNoQixRQ3JFTUcsV0FBaUI3QyxFQUNuQmhtQixjQUNJbVosTUFBTyxFQUNQdFgsS0FBS2lILElBQU13YyxFQUFRM25CLFVBQVVtTCxJQUFJZ2dCLEtBQUtqbkIsSUFBSSxFQUMxQ0EsS0FBS29XLE9BQVNxTixFQUFRM25CLFVBQVVzYSxPQUFPNlEsS0FBS2puQixJQUFJLEVBQ2hEQSxLQUFLb0UsSUFBTXFmLEVBQVEzbkIsVUFBVXNJLElBQUk2aUIsS0FBS2puQixJQUFJLEVBQzFDQSxLQUFLK1YsSUFBTTBOLEVBQVEzbkIsVUFBVWlhLElBQUlrUixLQUFLam5CLElBQUksRUFDMUNBLEtBQUtXLElBQU04aUIsRUFBUTNuQixVQUFVNkUsSUFBSXNtQixLQUFLam5CLElBQUksRUFDMUNBLEtBQUs0VSxJQUFNb1MsR0FBU3BTLEdBQzVCLENBS0kwQixPQUFPdmMsRUFBR2dILEdBQ04sR0FBSSxDQUFDQSxFQUNELE9BQU91VyxNQUFNaEIsT0FBT3ZjLENBQUMsRUFDekIsSUFHVzhwQixFQUhMaHJCLEVBQU0sSUFBSThaLElBQ1o1UixHQUFLMFYsVUFDTDFWLEVBQUkwVixTQUFTNWQsQ0FBRyxFQUNwQixJQUFXZ3JCLEtBQVE3akIsS0FBSytSLE1BQU8sQ0FDM0J6WSxJQUFJcUssRUFBS2xGLEVBUVQsR0FQSW9TLEVBQU9nVCxDQUFJLEdBQ1hsZ0IsRUFBTTBTLEVBQUt3TixFQUFLbGdCLElBQUssR0FBSTVDLENBQUcsRUFDNUJ0QyxFQUFRNFgsRUFBS3dOLEVBQUtwbEIsTUFBT2tGLEVBQUs1QyxDQUFHLEdBR2pDNEMsRUFBTTBTLEVBQUt3TixFQUFNLEdBQUk5aUIsQ0FBRyxFQUV4QmxJLEVBQUlrZCxJQUFJcFMsQ0FBRyxFQUNYLE1BQU0sSUFBSXhELE1BQU0sOENBQThDLEVBQ2xFdEgsRUFBSThILElBQUlnRCxFQUFLbEYsQ0FBSyxDQUM5QixDQUNRLE9BQU81RixDQUNmLENBQ0lxRCxZQUFZMGMsRUFBUWtPLEVBQVUvbEIsR0FDcEJnbUIsRUFBUUYsR0FBWWpPLEVBQVFrTyxFQUFVL2xCLENBQUcsRUFDekNtbUIsRUFBTyxJQUFJbG5CLEtBRWpCLE9BREFrbkIsRUFBS25WLE1BQVFnVixFQUFNaFYsTUFDWm1WLENBQ2YsQ0FDQSxDQUNBRixHQUFTcFMsSUFBTSx5QkFDZixJQUFNc1MsR0FBTyxDQUNUMUUsV0FBWSxNQUNabEosU0FBVTdhLEdBQVNBLGFBQWlCa1UsSUFDcEM2RyxVQUFXd04sR0FDWDFzQixRQUFTLENBQUEsRUFDVHNhLElBQUsseUJBQ0wxWixRQUFRbXBCLEVBQUtoUSxHQUNULElBRWExUSxFQUZQb2pCLEVBQVFKLEdBQWF0QyxFQUFLaFEsQ0FBTyxFQUNqQzhTLEVBQVcsR0FDakIsSUFBVyxDQUFFeGpCLElBQUFBLEtBQVNvakIsRUFBTWhWLE1BQ3BCakIsRUFBU25OLENBQUcsSUFDUndqQixFQUFTeFksU0FBU2hMLEVBQUlsRixLQUFLLEVBQzNCNFYsRUFBUSxpREFBaUQxUSxFQUFJbEYsS0FBTyxFQUdwRTBvQixFQUFTdHFCLEtBQUs4RyxFQUFJbEYsS0FBSyxHQUluQyxPQUFPL0YsT0FBT0MsT0FBTyxJQUFJcXVCLEdBQVlELENBQUssQ0FDN0MsRUFDRHBPLFdBQVksQ0FBQ0MsRUFBUWtPLEVBQVUvbEIsSUFBUWltQixHQUFTOXFCLEtBQUswYyxFQUFRa08sRUFBVS9sQixDQUFHLENBQzlFLEVDckVBLFNBQVNxbUIsR0FBYyxDQUFFM29CLE1BQUFBLEVBQU9rUixPQUFBQSxDQUFNLEVBQUk1TyxHQUN0QyxJQUFNc21CLEVBQVU1b0IsRUFBUTZvQixHQUFVQyxHQUNsQyxPQUFJNVgsR0FBVTBYLEVBQVF6dEIsS0FBS0EsS0FBSytWLENBQU0sRUFDM0JBLEVBQ0psUixFQUFRc0MsRUFBSXpJLFFBQVFvbkIsUUFBVTNlLEVBQUl6SSxRQUFRK21CLFFBQ3JELENBQ0EsSUFBTWlJLEdBQVUsQ0FDWmhPLFNBQVU3YSxHQUFtQixDQUFBLElBQVZBLEVBQ25CbkUsUUFBUyxDQUFBLEVBQ1RzYSxJQUFLLHlCQUNMaGIsS0FBTSw2Q0FDTnNCLFFBQVMsSUFBTSxJQUFJMFgsRUFBTyxDQUFBLENBQUksRUFDOUJyVCxVQUFXNm5CLEVBQ2YsRUFDTUcsR0FBVyxDQUNiak8sU0FBVTdhLEdBQW1CLENBQUEsSUFBVkEsRUFDbkJuRSxRQUFTLENBQUEsRUFDVHNhLElBQUsseUJBQ0xoYixLQUFNLCtDQUNOc0IsUUFBUyxJQUFNLElBQUkwWCxFQUFPLENBQUEsQ0FBSyxFQUMvQnJULFVBQVc2bkIsRUFDZixFQ3BCQSxJQUFNeEMsR0FBVyxDQUNidEwsU0FBVTdhLEdBQTBCLFVBQWpCLE9BQU9BLEVBQzFCbkUsUUFBUyxDQUFBLEVBQ1RzYSxJQUFLLDBCQUNMaGIsS0FBTSxpREFDTnNCLFFBQVMsR0FBeUMsUUFBaEMwQyxFQUFJL0QsTUFBTSxDQUFFLENBQUEsRUFBRVQsY0FDMUJ5ckIsSUFDVyxNQUFYam5CLEVBQUksR0FDQXlCLE9BQU95bEIsa0JBQ1B6bEIsT0FBTzBsQixrQkFDakJ4bEIsVUFBV2lsQixDQUNmLEVBQ01RLEVBQVcsQ0FDYjFMLFNBQVU3YSxHQUEwQixVQUFqQixPQUFPQSxFQUMxQm5FLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSywwQkFDTDdWLE9BQVEsTUFDUm5GLEtBQU0sd0RBQ05zQixRQUFTLEdBQVMrcEIsV0FBV3JuQixFQUFJOUQsUUFBUSxLQUFNLEVBQUUsQ0FBQyxFQUNsRHlGLFVBQVVtUixHQUNOLElBQU12QyxFQUFNOU8sT0FBT3FSLEVBQUtqUyxLQUFLLEVBQzdCLE9BQU9pbUIsU0FBU3ZXLENBQUcsRUFBSUEsRUFBSStXLGNBQWUsRUFBR1YsRUFBZ0I5VCxDQUFJLENBQ3pFLENBQ0EsRUFDTXlVLEVBQVEsQ0FDVjdMLFNBQVU3YSxHQUEwQixVQUFqQixPQUFPQSxFQUMxQm5FLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSywwQkFDTGhiLEtBQU0sb0NBQ05zQixRQUFRMEMsR0FDSixJQUFNOFMsRUFBTyxJQUFJa0MsRUFBT3FTLFdBQVdybkIsRUFBSTlELFFBQVEsS0FBTSxFQUFFLENBQUMsQ0FBQyxFQUNuRHNyQixFQUFNeG5CLEVBQUlnRixRQUFRLEdBQUcsRUFNM0IsTUFMWSxDQUFBLElBQVJ3aUIsR0FFd0IsT0FEbEIvbkIsRUFBSU8sRUFBSWtQLFVBQVVzWSxFQUFNLENBQUMsRUFBRXRyQixRQUFRLEtBQU0sRUFBRSxHQUMzQ3VELEVBQUVwRSxPQUFTLEtBQ2J5WCxFQUFLK1Qsa0JBQW9CcG5CLEVBQUVwRSxRQUU1QnlYLENBQ1YsRUFDRG5SLFVBQVdpbEIsQ0FDZixFQ3pDQSxJQUFNYSxHQUFjLEdBQTRCLFVBQWpCLE9BQU81bUIsR0FBc0JZLE9BQU9xYSxVQUFVamIsQ0FBSyxFQUNsRixTQUFTNm1CLEdBQVcxbkIsRUFBSzJuQixFQUFRQyxFQUFPLENBQUVDLFlBQUFBLENBQVcsR0FDakQsSUFBTStCLEVBQU81cEIsRUFBSSxHQUlqQixHQUhhLE1BQVQ0cEIsR0FBeUIsTUFBVEEsSUFDaEJqQyxHQUFVLEdBQ2QzbkIsRUFBTUEsRUFBSWtQLFVBQVV5WSxDQUFNLEVBQUV6ckIsUUFBUSxLQUFNLEVBQUUsRUFDeEMyckIsRUFBYSxDQUNiLE9BQVFELEdBQ0osS0FBSyxFQUNENW5CLEVBQU0sS0FBS0EsRUFDWCxNQUNKLEtBQUssRUFDREEsRUFBTSxLQUFLQSxFQUNYLE1BQ0osS0FBSyxHQUNEQSxFQUFNLEtBQUtBLENBRTNCLENBQ1EsSUFBTXdILEVBQUl5VCxPQUFPamIsQ0FBRyxFQUNwQixNQUFnQixNQUFUNHBCLEVBQWUzTyxPQUFPLENBQUEsQ0FBRSxFQUFJelQsRUFBSUEsQ0FDL0MsQ0FDSSxJQUFNQSxFQUFJc2dCLFNBQVM5bkIsRUFBSzRuQixDQUFLLEVBQzdCLE1BQWdCLE1BQVRnQyxFQUFlLENBQUUsRUFBR3BpQixFQUFJQSxDQUNuQyxDQUNBLFNBQVN1Z0IsR0FBYWpWLEVBQU04VSxFQUFPaFksR0FDL0IsSUFBUS9PLEVBQVVpUyxFQUFMLE1BQ2IsT0FBSTJVLEdBQVk1bUIsQ0FBSyxHQUNYYixFQUFNYSxFQUFNdUUsU0FBU3dpQixDQUFLLEVBQ3pCL21CLEVBQVEsRUFBSSxJQUFNK08sRUFBUzVQLEVBQUkvQixPQUFPLENBQUMsRUFBSTJSLEVBQVM1UCxHQUV4RDRtQixFQUFnQjlULENBQUksQ0FDL0IsQ0FDQSxJQUFNK1csR0FBUyxDQUNYbk8sU0FBVStMLEdBQ1YvcUIsUUFBUyxDQUFBLEVBQ1RzYSxJQUFLLHdCQUNMN1YsT0FBUSxNQUNSbkYsS0FBTSxtQkFDTnNCLFFBQVMsQ0FBQzBDLEVBQUtpb0IsRUFBVWhiLElBQVF5YSxHQUFXMW5CLEVBQUssRUFBRyxFQUFHaU4sQ0FBRyxFQUMxRHRMLFVBQVdtUixHQUFRaVYsR0FBYWpWLEVBQU0sRUFBRyxJQUFJLENBQ2pELEVBQ01rVixHQUFTLENBQ1h0TSxTQUFVK0wsR0FDVi9xQixRQUFTLENBQUEsRUFDVHNhLElBQUssd0JBQ0w3VixPQUFRLE1BQ1JuRixLQUFNLGtCQUNOc0IsUUFBUyxDQUFDMEMsRUFBS2lvQixFQUFVaGIsSUFBUXlhLEdBQVcxbkIsRUFBSyxFQUFHLEVBQUdpTixDQUFHLEVBQzFEdEwsVUFBV21SLEdBQVFpVixHQUFhalYsRUFBTSxFQUFHLEdBQUcsQ0FDaEQsRUFDTW9WLEdBQU0sQ0FDUnhNLFNBQVUrTCxHQUNWL3FCLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSyx3QkFDTGhiLEtBQU0sc0JBQ05zQixRQUFTLENBQUMwQyxFQUFLaW9CLEVBQVVoYixJQUFReWEsR0FBVzFuQixFQUFLLEVBQUcsR0FBSWlOLENBQUcsRUFDM0R0TCxVQUFXaWxCLENBQ2YsRUFDTXVCLEdBQVMsQ0FDWHpNLFNBQVUrTCxHQUNWL3FCLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSyx3QkFDTDdWLE9BQVEsTUFDUm5GLEtBQU0seUJBQ05zQixRQUFTLENBQUMwQyxFQUFLaW9CLEVBQVVoYixJQUFReWEsR0FBVzFuQixFQUFLLEVBQUcsR0FBSWlOLENBQUcsRUFDM0R0TCxVQUFXbVIsR0FBUWlWLEdBQWFqVixFQUFNLEdBQUksSUFBSSxDQUNsRCxRQ2hFTWdYLFdBQWdCakUsRUFDbEJ0bEIsWUFBWXlhLEdBQ1J0QixNQUFNc0IsQ0FBTSxFQUNaNVksS0FBSzRVLElBQU04UyxHQUFROVMsR0FDM0IsQ0FDSTNOLElBQUl0RCxHQUNBckssSUFBSXVxQixFQUVBQSxFQURBaFQsRUFBT2xOLENBQUcsRUFDSEEsRUFDRkEsR0FDVSxVQUFmLE9BQU9BLEdBQ1AsUUFBU0EsR0FDVCxVQUFXQSxHQUNHLE9BQWRBLEVBQUlsRixNQUNHLElBQUlxVSxFQUFLblAsRUFBSUEsSUFBSyxJQUFJLEVBRXRCLElBQUltUCxFQUFLblAsRUFBSyxJQUFJLEVBQ2hCNmYsR0FBU3hqQixLQUFLK1IsTUFBTzhSLEVBQUtsZ0IsR0FBRyxHQUV0QzNELEtBQUsrUixNQUFNbFYsS0FBS2duQixDQUFJLENBQ2hDLENBS0l6ZixJQUFJVCxFQUFLZ2tCLEdBQ0M5RCxFQUFPTCxHQUFTeGpCLEtBQUsrUixNQUFPcE8sQ0FBRyxFQUNyQyxNQUFPLENBQUNna0IsR0FBWTlXLEVBQU9nVCxDQUFJLEVBQ3pCL1MsRUFBUytTLEVBQUtsZ0IsR0FBRyxFQUNia2dCLEVBQUtsZ0IsSUFBSWxGLE1BQ1RvbEIsRUFBS2xnQixJQUNUa2dCLENBQ2QsQ0FDSWxqQixJQUFJZ0QsRUFBS2xGLEdBQ0wsR0FBcUIsV0FBakIsT0FBT0EsRUFDUCxNQUFNLElBQUkwQixNQUFNLGlFQUFpRSxPQUFPMUIsQ0FBTyxFQUNuRyxJQUFNdUYsRUFBT3dmLEdBQVN4akIsS0FBSytSLE1BQU9wTyxDQUFHLEVBQ2pDSyxHQUFRLENBQUN2RixFQUNUdUIsS0FBSytSLE1BQU1uWCxPQUFPb0YsS0FBSytSLE1BQU1uUCxRQUFRb0IsQ0FBSSxFQUFHLENBQUMsRUFFeEMsQ0FBQ0EsR0FBUXZGLEdBQ2R1QixLQUFLK1IsTUFBTWxWLEtBQUssSUFBSWlXLEVBQUtuUCxDQUFHLENBQUMsQ0FFekMsQ0FDSTJTLE9BQU92YyxFQUFHZ0gsR0FDTixPQUFPdVcsTUFBTWhCLE9BQU92YyxFQUFHZ0gsRUFBSzZVLEdBQUcsQ0FDdkMsQ0FDSTVTLFNBQVNqQyxFQUFLcWMsRUFBV0MsR0FDckIsR0FBSSxDQUFDdGMsRUFDRCxPQUFPekIsS0FBS0MsVUFBVVMsSUFBSSxFQUM5QixHQUFJQSxLQUFLb2EsaUJBQWlCLENBQUEsQ0FBSSxFQUMxQixPQUFPOUMsTUFBTXRVLFNBQVN0SyxPQUFPQyxPQUFPLEdBQUlvSSxFQUFLLENBQUVxZ0IsY0FBZSxDQUFBLENBQUksQ0FBRSxFQUFHaEUsRUFBV0MsQ0FBVyxFQUU3RixNQUFNLElBQUlsZCxNQUFNLHFDQUFxQyxDQUNqRSxDQUNJakUsWUFBWTBjLEVBQVFrTyxFQUFVL2xCLEdBQzFCLElBQVEyaUIsRUFBYTNpQixFQUFMLFNBQ1ZKLEVBQU0sSUFBSVgsS0FBSzRZLENBQU0sRUFDM0IsR0FBSWtPLEdBQVkxWCxPQUFPbUssWUFBWTdnQixPQUFPb3VCLENBQVEsRUFDOUMsSUFBS3h0QixJQUFJbUYsS0FBU3FvQixFQUNVLFlBQXBCLE9BQU9wRCxJQUNQamxCLEVBQVFpbEIsRUFBUzNuQixLQUFLK3FCLEVBQVVyb0IsRUFBT0EsQ0FBSyxHQUNoRGtDLEVBQUlvUixNQUFNbFYsS0FBS3FrQixHQUFXemlCLEVBQU8sS0FBTXNDLENBQUcsQ0FBQyxFQUVuRCxPQUFPSixDQUNmLENBQ0EsQ0FDQSttQixHQUFROVMsSUFBTSx3QkFDZCxJQUFNalUsR0FBTSxDQUNSNmhCLFdBQVksTUFDWmxKLFNBQVU3YSxHQUFTQSxhQUFpQm1YLElBQ3BDNEQsVUFBV2tPLEdBQ1hwdEIsUUFBUyxDQUFBLEVBQ1RzYSxJQUFLLHdCQUNMK0QsV0FBWSxDQUFDQyxFQUFRa08sRUFBVS9sQixJQUFRMm1CLEdBQVF4ckIsS0FBSzBjLEVBQVFrTyxFQUFVL2xCLENBQUcsRUFDekU3RixRQUFRckMsRUFBS3diLEdBQ1QsR0FBSXpELEdBQU0vWCxDQUFHLEVBQUcsQ0FDWixHQUFJQSxFQUFJdWhCLGlCQUFpQixDQUFBLENBQUksRUFDekIsT0FBTzFoQixPQUFPQyxPQUFPLElBQUkrdUIsR0FBVzd1QixDQUFHLEVBRXZDd2IsRUFBUSxxQ0FBcUMsQ0FDN0QsTUFFWUEsRUFBUSxpQ0FBaUMsRUFDN0MsT0FBT3hiLENBQ2YsQ0FDQSxFQ3ZGQSxTQUFTK3VCLEdBQWlCaHFCLEVBQUtpcUIsR0FDM0IsSUFBTUwsRUFBTzVwQixFQUFJLEdBQ1hwRCxFQUFpQixNQUFUZ3RCLEdBQXlCLE1BQVRBLEVBQWU1cEIsRUFBSWtQLFVBQVUsQ0FBQyxFQUFJbFAsRUFDaEUsSUFBTXVRLEVBQU0sSUFBTzBaLEVBQVdoUCxPQUFZeFosUUFBTCtGLENBQUMsRUFDaEN6SCxFQUFNbkQsRUFDUFYsUUFBUSxLQUFNLEVBQUUsRUFDaEJ5QixNQUFNLEdBQUcsRUFDVHdJLE9BQU8sQ0FBQ3BHLEVBQUtuQyxJQUFNbUMsRUFBTXdRLEVBQUksRUFBRSxFQUFJQSxFQUFJM1MsQ0FBQyxFQUFHMlMsRUFBSSxDQUFDLENBQUMsRUFDdEQsTUFBaUIsTUFBVHFaLEVBQWVyWixFQUFJLENBQUEsQ0FBRSxFQUFJeFEsRUFBTUEsQ0FDM0MsQ0FNQSxTQUFTbXFCLEdBQXFCcFgsR0FDMUJwWCxJQUFNbUYsRUFBVWlTLEVBQUwsTUFDUHZDLEVBQU0sR0FBTy9JLEVBQ2pCLEdBQXFCLFVBQWpCLE9BQU8zRyxFQUNQMFAsRUFBTS9JLEdBQUt5VCxPQUFPelQsQ0FBQyxPQUNsQixHQUFJdWYsTUFBTWxtQixDQUFLLEdBQUssQ0FBQ2ltQixTQUFTam1CLENBQUssRUFDcEMsT0FBTytsQixFQUFnQjlULENBQUksRUFDL0JwWCxJQUFJa3VCLEVBQU8sR0FDUC9vQixFQUFRLElBQ1Irb0IsRUFBTyxJQUNQL29CLEdBQVMwUCxFQUFJLEVBQUUsR0FFbkIsSUFBTTRaLEVBQU01WixFQUFJLEVBQUUsRUFDWjNULEVBQVEsQ0FBQ2lFLEVBQVFzcEIsR0FZdkIsT0FYSXRwQixFQUFRLEdBQ1JqRSxFQUFNSyxRQUFRLENBQUMsR0FHZjRELEdBQVNBLEVBQVFqRSxFQUFNLElBQU11dEIsRUFDN0J2dEIsRUFBTUssUUFBUTRELEVBQVFzcEIsQ0FBRyxFQUNaLElBQVR0cEIsSUFDQUEsR0FBU0EsRUFBUWpFLEVBQU0sSUFBTXV0QixFQUM3QnZ0QixFQUFNSyxRQUFRNEQsQ0FBSyxJQUduQitvQixFQUNKaHRCLEVBQ0szQixJQUFJdU0sR0FBS2hHLE9BQU9nRyxDQUFDLEVBQUU0aUIsU0FBUyxFQUFHLEdBQUcsQ0FBQyxFQUNuQzl1QixLQUFLLEdBQUcsRUFDUlksUUFBUSxhQUFjLEVBQUUsQ0FFckMsQ0FDQSxJQUFNbXVCLEdBQVUsQ0FDWjNPLFNBQVU3YSxHQUEwQixVQUFqQixPQUFPQSxHQUFzQlksT0FBT3FhLFVBQVVqYixDQUFLLEVBQ3RFbkUsUUFBUyxDQUFBLEVBQ1RzYSxJQUFLLHdCQUNMN1YsT0FBUSxPQUNSbkYsS0FBTSx1Q0FDTnNCLFFBQVMsQ0FBQzBDLEVBQUtpb0IsRUFBVSxDQUFFSixZQUFBQSxDQUFXLElBQU9tQyxHQUFpQmhxQixFQUFLNm5CLENBQVcsRUFDOUVsbUIsVUFBV3VvQixFQUNmLEVBQ01JLEdBQVksQ0FDZDVPLFNBQVU3YSxHQUEwQixVQUFqQixPQUFPQSxFQUMxQm5FLFFBQVMsQ0FBQSxFQUNUc2EsSUFBSywwQkFDTDdWLE9BQVEsT0FDUm5GLEtBQU0sZ0RBQ05zQixRQUFTMEMsR0FBT2dxQixHQUFpQmhxQixFQUFLLENBQUEsQ0FBSyxFQUMzQzJCLFVBQVd1b0IsRUFDZixFQUNBLElBQU1LLEdBQVksQ0FDZDdPLFNBQVU3YSxHQUFTQSxhQUFpQnlFLEtBQ3BDNUksUUFBUyxDQUFBLEVBQ1RzYSxJQUFLLDhCQUlMaGIsS0FBTWlILE9BQU8sMkpBS0osRUFDVDNGLFFBQVEwQyxHQUNFZ0csRUFBUWhHLEVBQUlnRyxNQUFNdWtCLEdBQVV2dUIsSUFBSSxFQUN0QyxHQUFJLENBQUNnSyxFQUNELE1BQU0sSUFBSXpELE1BQU0sc0RBQXNELEVBQzFFLEdBQU0sQ0FBQSxDQUFHaW9CLEVBQU1DLEVBQU9DLEVBQUtDLEVBQU1DLEVBQVFDLEdBQVU3a0IsRUFBTS9LLElBQUl3RyxNQUFNLEVBQzdEcXBCLEVBQVc5a0IsRUFBTSxHQUFLdkUsUUFBUXVFLEVBQU0sR0FBSyxNQUFNL0gsT0FBTyxFQUFHLENBQUMsQ0FBQyxFQUFJLEVBQ3JFdkMsSUFBSWdOLEVBQU9wRCxLQUFLeWxCLElBQUlQLEVBQU1DLEVBQVEsRUFBR0MsRUFBS0MsR0FBUSxFQUFHQyxHQUFVLEVBQUdDLEdBQVUsRUFBR0MsQ0FBUSxFQUNqRkUsRUFBS2hsQixFQUFNLEdBQ2pCLEdBQUlnbEIsR0FBYSxNQUFQQSxFQUFZLENBQ2xCdHZCLElBQUl1TCxFQUFJK2lCLEdBQWlCZ0IsRUFBSSxDQUFBLENBQUssRUFDOUJuc0IsS0FBS29zQixJQUFJaGtCLENBQUMsRUFBSSxLQUNkQSxHQUFLLElBQ1R5QixHQUFRLElBQVF6QixDQUM1QixDQUNRLE9BQU8sSUFBSTNCLEtBQUtvRCxDQUFJLENBQ3ZCLEVBQ0QvRyxVQUFXLENBQUEsQ0FBR2QsTUFBQUEsQ0FBTyxJQUFLQSxFQUFNcXFCLGNBQWNodkIsUUFBUSxzQkFBdUIsRUFBRSxDQUNuRixFQ3BGTThlLEdBQVMsQ0FDWC9mLEdBQ0F3ckIsR0FDQWhyQixHQUNBaXJCLEdBQ0FnRCxHQUNBQyxHQUNBRSxHQUNBN0IsR0FDQUUsR0FDQUMsR0FDQW5CLEdBQ0FJLEVBQ0FHLEVBQ0FjLEdBQ0E1RixFQUNBNkcsR0FDQUgsR0FDQXBtQixHQUNBc25CLEdBQ0FDLEdBQ0FDLElDbEJKLElBQU1ZLEdBQVUsSUFBSXBXLElBQUksQ0FDcEIsQ0FBQyxPQUFRaUcsSUFDVCxDQUFDLFdBQVksQ0FBQy9mLEdBQUt3ckIsR0FBS2hyQixLQUN4QixDQUFDLE9BQVEydkIsSUFDVCxDQUFDLFNBQVVDLElBQ1gsQ0FBQyxXQUFZQSxJQUNoQixFQUNLQyxHQUFhLENBQ2ZqRCxPQUFBQSxHQUNBa0QsS0FBTTVFLEdBQ1ZZLE1BQUlBLEdBQ0pILFNBQUlBLEdBQ0pKLFNBQUlBLEdBQ0FzRCxVQUFBQSxHQUNKcEMsSUFBSUEsR0FDSkMsT0FBSUEsR0FDSkgsT0FBSUEsR0FDQXFDLFFBQUFBLEdBQ0FwdkIsSUFBQUEsR0FDQXduQixNQUFBQSxFQUNBaGEsS0FBTWllLEdBQ040QyxLQUFBQSxHQUNBSCxNQUFBQSxHQUNBMUMsSUFBQUEsR0FDQTFqQixJQUFBQSxHQUNBd25CLFVBQUFBLEVBQ0osRUFDTWlCLEdBQWdCLENBQ2xCQywyQkFBNEJwRCxHQUM1QnFELDBCQUEyQmpKLEVBQzNCa0oseUJBQTBCckMsR0FDMUJzQywwQkFBMkJ6QyxHQUMzQjBDLHdCQUF5QjlvQixHQUN6QitvQiw4QkFBK0J2QixFQUNuQyxFQUNBLFNBQVN3QixHQUFRQyxFQUFZQyxFQUFZQyxHQUNyQyxJQUFNQyxFQUFhaEIsR0FBUTNrQixJQUFJeWxCLENBQVUsRUFDekMsR0FBSUUsR0FBYyxDQUFDSCxFQUNmLE9BQU9FLEdBQWUsQ0FBQ0MsRUFBV3BiLFNBQVMwUixDQUFLLEVBQzFDMEosRUFBV2p0QixPQUFPdWpCLENBQUssRUFDdkIwSixFQUFXbHdCLE1BQU8sRUFFNUJQLElBQUlxYSxFQUFPb1csRUFDWCxHQUFJLENBQUNwVyxFQUFNLENBQ1AsR0FBSXBiLENBQUFBLE1BQU1DLFFBQVFveEIsQ0FBVSxFQU94QixNQUpNdm5CLEVBQU85SixNQUFNMkQsS0FBSzZzQixHQUFRMW1CLEtBQU0sQ0FBQSxFQUNqQ3JKLE9BQU8ySyxHQUFlLFdBQVJBLENBQWdCLEVBQzlCOUssSUFBSThLLEdBQU9yRSxLQUFLQyxVQUFVb0UsQ0FBRyxDQUFDLEVBQzlCekssS0FBSyxJQUFJLEVBQ1IsSUFBSWlILHlCQUF5QjBwQixrQkFBMkJ4bkIsOEJBQWlDLEVBTi9Gc1IsRUFBTyxFQVFuQixDQUNJLEdBQUlwYixNQUFNQyxRQUFRb3hCLENBQVUsRUFDeEIsSUFBSyxJQUFNaFYsS0FBT2dWLEVBQ2RqVyxFQUFPQSxFQUFLN1csT0FBTzhYLENBQUcsTUFFQyxZQUF0QixPQUFPZ1YsSUFDWmpXLEVBQU9pVyxFQUFXalcsRUFBSzlaLE9BQU8sR0FJbEMsT0FESThaLEVBREFtVyxFQUNPblcsRUFBSzdXLE9BQU91akIsQ0FBSyxFQUNyQjFNLEdBQUs1UCxPQUFPLENBQUM0UCxFQUFNaUIsS0FDdEIsSUFBTXVFLEVBQXdCLFVBQWYsT0FBT3ZFLEVBQW1Cc1UsR0FBV3RVLEdBQU9BLEVBQzNELEdBQUt1RSxFQVNMLE9BRkt4RixFQUFLaEYsU0FBU3dLLENBQU0sR0FDckJ4RixFQUFLOVcsS0FBS3NjLENBQU0sRUFDYnhGLEVBSkgsTUFKTVksRUFBVWpWLEtBQUtDLFVBQVVxVixDQUFHLEVBQzVCdlMsRUFBTzNKLE9BQU8ySixLQUFLNm1CLEVBQVUsRUFDOUJyd0IsSUFBSThLLEdBQU9yRSxLQUFLQyxVQUFVb0UsQ0FBRyxDQUFDLEVBQzlCekssS0FBSyxJQUFJLEVBQ1IsSUFBSWlILDRCQUE0Qm9VLGlCQUF1QmxTLENBQU0sQ0FLMUUsRUFBRSxFQUFFLENBQ1QsQ0N2RkEsSUFBTTJuQixHQUFzQixDQUFDdGQsRUFBR3VkLElBQU12ZCxFQUFFL0ksSUFBTXNtQixFQUFFdG1CLElBQU0sQ0FBRSxFQUFHK0ksRUFBRS9JLElBQU1zbUIsRUFBRXRtQixJQUFNLEVBQUksUUFDekV1bUIsR0FDRi9yQixZQUFZLENBQUU2Z0IsT0FBQUEsRUFBUTRLLFdBQUFBLEVBQVl2SixNQUFBQSxFQUFPOEosaUJBQUFBLEVBQWtCdlIsT0FBQUEsRUFBUStLLGVBQUFBLEVBQWdCeUcsaUJBQUFBLElBQy9FcHFCLEtBQUtnZixPQUFTem1CLE1BQU1DLFFBQVF3bUIsQ0FBTSxFQUM1QjJLLEdBQVEzSyxFQUFRLFFBQVEsRUFDeEJBLEVBQ0kySyxHQUFRLEtBQU0zSyxDQUFNLEVBQ3BCLEtBQ1ZoZixLQUFLOEMsS0FBMEIsVUFBbEIsT0FBTzhWLEdBQXVCQSxHQUFXLE9BQ3RENVksS0FBS3FxQixVQUFZRixFQUFtQmYsR0FBZ0IsR0FDcERwcEIsS0FBSzJULEtBQU9nVyxHQUFRQyxFQUFZNXBCLEtBQUs4QyxLQUFNdWQsQ0FBSyxFQUNoRHJnQixLQUFLMmYsZ0JBQWtCeUssR0FBb0IsS0FDM0MxeEIsT0FBT21lLGVBQWU3VyxLQUFNb1EsR0FBSyxDQUFFM1IsTUFBTzVGLEdBQUssRUFDL0NILE9BQU9tZSxlQUFlN1csS0FBTXNRLEVBQVEsQ0FBRTdSLE1BQU9wRixHQUFRLEVBQ3JEWCxPQUFPbWUsZUFBZTdXLEtBQU11USxHQUFLLENBQUU5UixNQUFPNGxCLEdBQUssRUFFL0Nya0IsS0FBSzJqQixlQUN5QixZQUExQixPQUFPQSxFQUNEQSxFQUNtQixDQUFBLElBQW5CQSxFQUNJcUcsR0FDQSxJQUN0QixDQUNJemEsUUFDSSxJQUFNeUUsRUFBT3RiLE9BQU8yRixPQUFPNnJCLEdBQU9wdUIsVUFBV3BELE9BQU9xZSwwQkFBMEIvVyxJQUFJLENBQUMsRUFFbkYsT0FEQWdVLEVBQUtMLEtBQU8zVCxLQUFLMlQsS0FBSzlaLE1BQU8sRUFDdEJtYSxDQUNmLENBQ0EsT0N0Qk1zVyxHQUNGbnNCLFlBQVlNLEVBQU9pbEIsRUFBVXByQixHQUV6QjBILEtBQUt1YSxjQUFnQixLQUVyQnZhLEtBQUt3YSxRQUFVLEtBRWZ4YSxLQUFLdXFCLE9BQVMsR0FFZHZxQixLQUFLd3FCLFNBQVcsR0FDaEI5eEIsT0FBT21lLGVBQWU3VyxLQUFNd1EsRUFBVyxDQUFFL1IsTUFBTzBSLEdBQUssRUFDckQ3VyxJQUFJbXhCLEVBQVksS0FDUSxZQUFwQixPQUFPL0csR0FBMkJuckIsTUFBTUMsUUFBUWtyQixDQUFRLEVBQ3hEK0csRUFBWS9HLEVBRUtoZixLQUFBQSxJQUFacE0sR0FBeUJvckIsSUFDOUJwckIsRUFBVW9yQixFQUNWQSxFQUFXaGYsS0FBQUEsR0FFVG1HLEVBQU1uUyxPQUFPQyxPQUFPLENBQ3RCOHNCLFlBQWEsQ0FBQSxFQUNiaUYsaUJBQWtCLENBQUEsRUFDbEJ2SyxTQUFVLE9BQ1Z3SyxhQUFjLENBQUEsRUFDZEMsT0FBUSxDQUFBLEVBQ1JDLFdBQVksQ0FBQSxFQUNaQyxXQUFZLENBQUEsRUFDWjVXLFFBQVMsS0FDWixFQUFFNWIsQ0FBTyxFQUVWZ0IsSUFBTTRhLEdBRE5sVSxLQUFLMUgsUUFBVXVTLEdBQ0YsUUFDVHZTLEdBQVN5eUIsYUFDVC9xQixLQUFLb2YsV0FBYTltQixFQUFReXlCLFlBQVk5VyxXQUFZLEVBQzlDalUsS0FBS29mLFdBQVcxTCxLQUFLVSxXQUNyQkYsRUFBVWxVLEtBQUtvZixXQUFXMUwsS0FBS1EsVUFHbkNsVSxLQUFLb2YsV0FBYSxJQUFJM0wsRUFBVyxDQUFFUyxRQUFBQSxDQUFPLENBQUUsRUFDaERsVSxLQUFLZ3JCLFVBQVU5VyxFQUFTNWIsQ0FBTyxFQUUvQjBILEtBQUswUixTQUNTaE4sS0FBQUEsSUFBVmpHLEVBQXNCLEtBQU91QixLQUFLMlksV0FBV2xhLEVBQU9nc0IsRUFBV255QixDQUFPLENBQ2xGLENBTUlpWCxRQUNJLElBQU15RSxFQUFPdGIsT0FBTzJGLE9BQU9pc0IsR0FBU3h1QixVQUFXLEVBQzFDMFUsR0FBWSxDQUFFL1IsTUFBTzBSLEVBQUcsQ0FDckMsQ0FBUyxFQWVELE9BZEE2RCxFQUFLdUcsY0FBZ0J2YSxLQUFLdWEsY0FDMUJ2RyxFQUFLd0csUUFBVXhhLEtBQUt3YSxRQUNwQnhHLEVBQUt1VyxPQUFTdnFCLEtBQUt1cUIsT0FBTzF3QixNQUFPLEVBQ2pDbWEsRUFBS3dXLFNBQVd4cUIsS0FBS3dxQixTQUFTM3dCLE1BQU8sRUFDckNtYSxFQUFLMWIsUUFBVUksT0FBT0MsT0FBTyxHQUFJcUgsS0FBSzFILE9BQU8sRUFDekMwSCxLQUFLb2YsYUFDTHBMLEVBQUtvTCxXQUFhcGYsS0FBS29mLFdBQVc3UCxNQUFPLEdBQzdDeUUsRUFBSzRFLE9BQVM1WSxLQUFLNFksT0FBT3JKLE1BQU8sRUFFakN5RSxFQUFLdEMsU0FBV1QsRUFBT2pSLEtBQUswUixRQUFRLEVBQzlCMVIsS0FBSzBSLFNBQVNuQyxNQUFNeUUsRUFBSzRFLE1BQU0sRUFDL0I1WSxLQUFLMFIsU0FDUDFSLEtBQUtnWCxRQUNMaEQsRUFBS2dELE1BQVFoWCxLQUFLZ1gsTUFBTW5kLE1BQU8sR0FDNUJtYSxDQUNmLENBRUkvTSxJQUFJeEksR0FDSXdzQixHQUFpQmpyQixLQUFLMFIsUUFBUSxHQUM5QjFSLEtBQUswUixTQUFTekssSUFBSXhJLENBQUssQ0FDbkMsQ0FFSXNiLE1BQU16ZSxFQUFNbUQsR0FDSndzQixHQUFpQmpyQixLQUFLMFIsUUFBUSxHQUM5QjFSLEtBQUswUixTQUFTcUksTUFBTXplLEVBQU1tRCxDQUFLLENBQzNDLENBVUl5c0IsWUFBWXhhLEVBQU01TixHQUNkLElBQ1VrQixFQUtWLE9BTkswTSxFQUFLOEUsU0FDQXhSLEVBQU8wUixHQUFZMVYsSUFBSSxFQUM3QjBRLEVBQUs4RSxPQUVELENBQUMxUyxHQUFRa0IsRUFBSytSLElBQUlqVCxDQUFJLEVBQUkrUyxHQUFjL1MsR0FBUSxJQUFLa0IsQ0FBSSxFQUFJbEIsR0FFOUQsSUFBSTRQLEdBQU1oQyxFQUFLOEUsTUFBTSxDQUNwQyxDQUNJbUQsV0FBV2xhLEVBQU9pbEIsRUFBVXByQixHQUN4QmdCLElBQUlteEIsRUFBWS9sQixLQUFBQSxFQUNRLFlBQXBCLE9BQU9nZixHQUNQamxCLEVBQVFpbEIsRUFBUzNuQixLQUFLLENBQUUsR0FBSTBDLENBQU8sRUFBRSxHQUFJQSxDQUFLLEVBQzlDZ3NCLEVBQVkvRyxHQUVQbnJCLE1BQU1DLFFBQVFrckIsQ0FBUSxHQUdSLEdBRGJ5SCxFQUFRekgsRUFBUzFxQixPQUROLEdBQW9CLFVBQWIsT0FBT3VQLEdBQWtCQSxhQUFhbkosUUFBVW1KLGFBQWFsSixNQUMvQyxFQUFFeEcsSUFBSXVHLE1BQU0sR0FDeENuRyxTQUNOeXFCLEVBQVdBLEVBQVM1bUIsT0FBT3F1QixDQUFLLEdBQ3BDVixFQUFZL0csR0FFS2hmLEtBQUFBLElBQVpwTSxHQUF5Qm9yQixJQUM5QnByQixFQUFVb3JCLEVBQ1ZBLEVBQVdoZixLQUFBQSxHQWJmLEdBZU0sQ0FBRXFVLHNCQUFBQSxFQUF1QnFTLGFBQUFBLEVBQWN0SixLQUFBQSxFQUFNbkksY0FBQUEsRUFBZVgsU0FBQUEsRUFBVXBFLElBQUFBLEdBQVF0YyxHQUFXLEdBQ3pGLENBQUU2ZSxTQUFBQSxFQUFVa1UsV0FBQUEsRUFBWXBTLGNBQUFBLENBQWUsR3pDNUZyRCxDQUEyQmpFLEVBQUt4SCxLQUM1QixJQUFNOGQsRUFBZSxHQUNmclMsRUFBZ0IsSUFBSXRHLElBQ3RCNFksRUFBYyxLQUNsQixNQUFPLENBQ0hwVSxTQUFVLElBQ05tVSxFQUFhenVCLEtBQUs4UyxDQUFNLEVBQ25CNGIsRUFBQUEsR0FDYTdWLEdBQVlWLENBQUcsRUFDM0JRLEVBQVNLLEdBQWNySSxFQUFRK2QsQ0FBVyxFQUVoRCxPQURBQSxFQUFZdGtCLElBQUl1TyxDQUFNLEVBQ2ZBLENBQ1YsRUFNRDZWLFdBQVksS0FDUixJQUFLLElBQU0xYixLQUFVMmIsRUFBYyxDQUMvQixJQU9VL3FCLEVBUEoyWSxFQUFNRCxFQUFjN1UsSUFBSXVMLENBQU0sRUFDcEMsR0FBbUIsVUFBZixPQUFPdUosR0FDUEEsQ0FBQUEsRUFBSTFELFFBQ0gxRSxDQUFBQSxFQUFTb0ksRUFBSXhJLElBQUksR0FBS00sQ0FBQUEsRUFBYWtJLEVBQUl4SSxJQUFJLEVBTTVDLE1BRk1uUSxFQUFRLElBQUlKLE1BQU0sNERBQTRELEdBQzlFd1AsT0FBU0EsRUFDVHBQLEVBTE4yWSxFQUFJeEksS0FBSzhFLE9BQVMwRCxFQUFJMUQsTUFPMUMsQ0FDUyxFQUNEeUQsY0FBQUEsQ0FDSCxDQUNMLEd5Q3lEMEVqWixLQUVsRW9yQixHQUFnQixHQUFHLEVBVWIxYSxFQUFPaUksR0FBV2xhLEVBQU9tVyxFQVRuQixDQUNSbUUsc0JBQXVCQSxHQUF5QixDQUFBLEVBQ2hEWSxjQUFlQSxHQUFpQixDQUFBLEVBQ2hDeEMsU0FBQUEsRUFDQTZCLFNBQUFBLEVBQ0EwSyxTQUFVK0csRUFDVjdSLE9BQVE1WSxLQUFLNFksT0FDYkssY0FBQUEsQ0FDSCxDQUNzQyxFQUl2QyxPQUhJNkksR0FBUTlRLEVBQWFOLENBQUksSUFDekJBLEVBQUtvUixLQUFPLENBQUEsR0FDaEJ1SixFQUFZLEVBQ0wzYSxDQUNmLENBS0l3USxXQUFXdmQsRUFBS2xGLEVBQU9uRyxFQUFVLElBQ3ZCMlMsRUFBSWpMLEtBQUsyWSxXQUFXaFYsRUFBSyxLQUFNckwsQ0FBTyxFQUN0Q2lRLEVBQUl2SSxLQUFLMlksV0FBV2xhLEVBQU8sS0FBTW5HLENBQU8sRUFDOUMsT0FBTyxJQUFJd2EsRUFBSzdILEVBQUcxQyxDQUFDLENBQzVCLENBS0k2TixPQUFPelMsR0FDSCxNQUFPc25CLENBQUFBLENBQUFBLEdBQWlCanJCLEtBQUswUixRQUFRLEdBQUkxUixLQUFLMFIsU0FBUzBFLE9BQU96UyxDQUFHLENBQ3pFLENBS0lzVyxTQUFTM2UsR0FDTCxPQUFJc2UsR0FBWXRlLENBQUksRUFDSyxNQUFqQjBFLEtBQUswUixVQUlGLEVBRFAxUixLQUFLMFIsU0FBVyxNQUdidVosQ0FBQUEsQ0FBQUEsR0FBaUJqckIsS0FBSzBSLFFBQVEsR0FDL0IxUixLQUFLMFIsU0FBU3VJLFNBQVMzZSxDQUFJLENBRXpDLENBTUk4SSxJQUFJVCxFQUFLd1csR0FDTCxPQUFPbkosRUFBYWhSLEtBQUswUixRQUFRLEVBQzNCMVIsS0FBSzBSLFNBQVN0TixJQUFJVCxFQUFLd1csQ0FBVSxFQUNqQ3pWLEtBQUFBLENBQ2QsQ0FNSXdWLE1BQU01ZSxFQUFNNmUsR0FDUixPQUFJUCxHQUFZdGUsQ0FBSSxFQUNULENBQUM2ZSxHQUFjckosRUFBUzlRLEtBQUswUixRQUFRLEVBQ3RDMVIsS0FBSzBSLFNBQVNqVCxNQUNkdUIsS0FBSzBSLFNBQ1JWLEVBQWFoUixLQUFLMFIsUUFBUSxFQUMzQjFSLEtBQUswUixTQUFTd0ksTUFBTTVlLEVBQU02ZSxDQUFVLEVBQ3BDelYsS0FBQUEsQ0FDZCxDQUlJcVIsSUFBSXBTLEdBQ0EsTUFBT3FOLENBQUFBLENBQUFBLEVBQWFoUixLQUFLMFIsUUFBUSxHQUFJMVIsS0FBSzBSLFNBQVNxRSxJQUFJcFMsQ0FBRyxDQUNsRSxDQUlJOFcsTUFBTW5mLEdBQ0YsT0FBSXNlLEdBQVl0ZSxDQUFJLEVBQ1NvSixLQUFBQSxJQUFsQjFFLEtBQUswUixTQUNUVixDQUFBQSxDQUFBQSxFQUFhaFIsS0FBSzBSLFFBQVEsR0FBSTFSLEtBQUswUixTQUFTK0ksTUFBTW5mLENBQUksQ0FDckUsQ0FLSXFGLElBQUlnRCxFQUFLbEYsR0FDZ0IsTUFBakJ1QixLQUFLMFIsU0FFTDFSLEtBQUswUixTQUFXK0gsR0FBbUJ6WixLQUFLNFksT0FBUSxDQUFDalYsR0FBTWxGLENBQUssRUFFdkR3c0IsR0FBaUJqckIsS0FBSzBSLFFBQVEsR0FDbkMxUixLQUFLMFIsU0FBUy9RLElBQUlnRCxFQUFLbEYsQ0FBSyxDQUV4QyxDQUtJaWMsTUFBTXBmLEVBQU1tRCxHQUNKbWIsR0FBWXRlLENBQUksRUFFaEIwRSxLQUFLMFIsU0FBV2pULEVBRU0sTUFBakJ1QixLQUFLMFIsU0FFVjFSLEtBQUswUixTQUFXK0gsR0FBbUJ6WixLQUFLNFksT0FBUXJnQixNQUFNMkQsS0FBS1osQ0FBSSxFQUFHbUQsQ0FBSyxFQUVsRXdzQixHQUFpQmpyQixLQUFLMFIsUUFBUSxHQUNuQzFSLEtBQUswUixTQUFTZ0osTUFBTXBmLEVBQU1tRCxDQUFLLENBRTNDLENBUUl1c0IsVUFBVTlXLEVBQVM1YixFQUFVLElBR3pCZ0IsSUFBSXVSLEVBQ0osT0FGSXFKLEVBRG1CLFVBQW5CLE9BQU9BLEVBQ0c5VSxPQUFPOFUsQ0FBTyxFQUVwQkEsR0FDSixJQUFLLE1BQ0dsVSxLQUFLb2YsV0FDTHBmLEtBQUtvZixXQUFXMUwsS0FBS1EsUUFBVSxNQUUvQmxVLEtBQUtvZixXQUFhLElBQUkzTCxFQUFXLENBQUVTLFFBQVMsS0FBSyxDQUFFLEVBQ3ZEckosRUFBTSxDQUFFc2YsaUJBQWtCLENBQUEsRUFBT3ZSLE9BQVEsVUFBWSxFQUNyRCxNQUNKLElBQUssTUFDTCxJQUFLLE9BQ0c1WSxLQUFLb2YsV0FDTHBmLEtBQUtvZixXQUFXMUwsS0FBS1EsUUFBVUEsRUFFL0JsVSxLQUFLb2YsV0FBYSxJQUFJM0wsRUFBVyxDQUFFUyxRQUFBQSxDQUFPLENBQUUsRUFDaERySixFQUFNLENBQUVzZixpQkFBa0IsQ0FBQSxFQUFNdlIsT0FBUSxNQUFRLEVBQ2hELE1BQ0osS0FBSyxLQUNHNVksS0FBS29mLFlBQ0wsT0FBT3BmLEtBQUtvZixXQUNoQnZVLEVBQU0sS0FDTixNQUNKLFFBQ0ksSUFBTTJnQixFQUFLbHNCLEtBQUtDLFVBQVUyVSxDQUFPLEVBQ2pDLE1BQU0sSUFBSS9ULE1BQU0sK0RBQStEcXJCLENBQUksQ0FFbkcsQ0FFUSxHQUFJbHpCLEVBQVFzZ0Isa0JBQWtCbGdCLE9BQzFCc0gsS0FBSzRZLE9BQVN0Z0IsRUFBUXNnQixXQUNyQixDQUFBLEdBQUkvTixDQUFBQSxFQUdMLE1BQU0sSUFBSTFLLE1BQU0scUVBQXFFLEVBRnJGSCxLQUFLNFksT0FBUyxJQUFJc1IsR0FBT3h4QixPQUFPQyxPQUFPa1MsRUFBS3ZTLENBQU8sQ0FBQyxDQUVrQyxDQUNsRyxDQUVJK2QsS0FBSyxDQUFFa0csS0FBQUEsRUFBTWtQLFFBQUFBLEVBQVN4VSxTQUFBQSxFQUFVQyxjQUFBQSxFQUFlQyxTQUFBQSxFQUFVbEIsUUFBQUEsQ0FBUyxFQUFHLElBQzNEbFYsRUFBTSxDQUNSNFUsUUFBUyxJQUFJaEQsSUFDYnFDLElBQUtoVixLQUNMMFcsS0FBTSxDQUFDNkYsRUFDUHRGLFNBQXVCLENBQUEsSUFBYkEsRUFDVkcsYUFBYyxDQUFBLEVBQ2RGLGNBQXdDLFVBQXpCLE9BQU9BLEVBQTZCQSxFQUFnQixHQUN0RSxFQUNELElBQU12WixFQUFNMFksRUFBS3JXLEtBQUswUixTQUFVK1osR0FBVyxHQUFJMXFCLENBQUcsRUFDbEQsR0FBd0IsWUFBcEIsT0FBT29XLEVBQ1AsSUFBSyxHQUFNLENBQUVwTSxNQUFBQSxFQUFPcE4sSUFBQUEsQ0FBSyxJQUFJb0QsRUFBSTRVLFFBQVEwQixPQUFRLEVBQzdDRixFQUFTeFosRUFBS29OLENBQUssRUFDM0IsTUFBMEIsWUFBbkIsT0FBT2tMLEVBQ1JELEdBQWFDLEVBQVMsQ0FBRSxHQUFJdFksQ0FBSyxFQUFFLEdBQUlBLENBQUcsRUFDMUNBLENBQ2QsQ0FPSTJZLE9BQU9tVixFQUFTdFUsR0FDWixPQUFPblgsS0FBS3FXLEtBQUssQ0FBRWtHLEtBQU0sQ0FBQSxFQUFNa1AsUUFBQUEsRUFBU3hVLFNBQVUsQ0FBQSxFQUFPRSxTQUFBQSxFQUFVLENBQzNFLENBRUluVSxTQUFTMUssRUFBVSxJQUNmLEdBQXlCLEVBQXJCMEgsS0FBS3VxQixPQUFPdHhCLE9BQ1osTUFBTSxJQUFJa0gsTUFBTSw0Q0FBNEMsRUFDaEUsR0FBSSxXQUFZN0gsSUFDWCxDQUFDK0csT0FBT3FhLFVBQVVwaEIsRUFBUXVpQixNQUFNLEdBQUt4YixPQUFPL0csRUFBUXVpQixNQUFNLEdBQUssR0FFaEUsTUFETTJMLEVBQUlsbkIsS0FBS0MsVUFBVWpILEVBQVF1aUIsTUFBTSxFQUNqQyxJQUFJMWEsTUFBTSxtREFBbURxbUIsQ0FBRyxFQUVuRWtGLENBQUFBLElDalVZMVcsRURpVU1oVixLQ2hVdkJpVixFQUFRLEdBQ2QzYixJQUFJcXlCLEVBQXVDLENBQUEsSUFBdkJyekIsRUFBUThtQixXQUNELENBQUEsSUFBdkI5bUIsRUFBUThtQixZQUF3QnBLLEVBQUlvSyxjQUM5QmxpQixFQUFNOFgsRUFBSW9LLFdBQVdwYyxTQUFTZ1MsQ0FBRyxJQUVuQ0MsRUFBTXBZLEtBQUtLLENBQUcsRUFDZHl1QixFQUFnQixDQUFBLEdBRVgzVyxFQUFJb0ssV0FBV3hMLFdBQ3BCK1gsRUFBZ0IsQ0FBQSxJQUVwQkEsR0FDQTFXLEVBQU1wWSxLQUFLLEtBQUssRUFDcEIsSUFBTWtFLEVBQU1vZSxHQUF1Qm5LLEVBQUsxYyxDQUFPLEVBQ3ZDaWxCLEVBQWtCeGMsRUFBSXpJLHNCQUMxQjBjLEVBQUl1RixnQkFDaUIsSUFBakJ0RixFQUFNaGMsUUFDTmdjLEVBQU1wYSxRQUFRLEVBQUUsRUFDZG9uQixFQUFLMUUsRUFBY3ZJLEVBQUl1RixhQUFhLEVBQzFDdEYsRUFBTXBhLFFBQVErZixFQUFjcUgsRUFBSSxFQUFFLENBQUMsR0FFdkMzb0IsSUFBSWtvQixFQUFZLENBQUEsRUFDWm9LLEVBQWlCLEtBQ3JCLEdBQUk1VyxFQUFJdEQsU0FBVSxDQUNWVCxFQUFPK0QsRUFBSXRELFFBQVEsSUFDZnNELEVBQUl0RCxTQUFTbVEsYUFBZThKLEdBQzVCMVcsRUFBTXBZLEtBQUssRUFBRSxFQUNibVksRUFBSXRELFNBQVM2SSxnQkFDUDBILEVBQUsxRSxFQUFjdkksRUFBSXRELFNBQVM2SSxhQUFhLEVBQ25EdEYsRUFBTXBZLEtBQUsrZCxFQUFjcUgsRUFBSSxFQUFFLENBQUMsR0FHcENsaEIsRUFBSXljLGlCQUFtQixDQUFDLENBQUN4SSxFQUFJd0YsUUFDN0JvUixFQUFpQjVXLEVBQUl0RCxTQUFTOEksU0FUbEMsSUFXTTZDLEVBQWN1TyxFQUFpQmxuQixLQUFBQSxFQUFZLElBQU84YyxFQUFZLENBQUEsRUFDcEVsb0IsSUFBSWlsQixFQUFPaGYsR0FBVXlWLEVBQUl0RCxTQUFVM1EsRUFBSyxJQUFPNnFCLEVBQWlCLEtBQU92TyxDQUFXLEVBQzlFdU8sSUFDQXJOLEdBQVF6RCxHQUFZeUQsRUFBTSxHQUFJaEIsRUFBY3FPLENBQWMsQ0FBQyxHQUM5QyxNQUFack4sRUFBSyxJQUEwQixNQUFaQSxFQUFLLElBQ0csUUFBNUJ0SixFQUFNQSxFQUFNaGMsT0FBUyxHQU1yQmdjLEVBQU1wWSxLQUFLMGhCLENBQUksRUFIZnRKLEVBQU1BLEVBQU1oYyxPQUFTLEdBQUssT0FBT3NsQixDQUk3QyxNQUVRdEosRUFBTXBZLEtBQUswQyxHQUFVeVYsRUFBSXRELFNBQVUzUSxDQUFHLENBQUMsRUFFM0MsR0FBSWlVLEVBQUlvSyxZQUFZdkwsT0FDWm1CLEVBQUl3RixTQUNFeUgsRUFBSzFFLEVBQWN2SSxFQUFJd0YsT0FBTyxHQUM3QjdMLFNBQVMsSUFBSSxHQUNoQnNHLEVBQU1wWSxLQUFLLEtBQUssRUFDaEJvWSxFQUFNcFksS0FBSytkLEVBQWNxSCxFQUFJLEVBQUUsQ0FBQyxHQUdoQ2hOLEVBQU1wWSxLQUFLLE9BQU9vbEIsQ0FBSSxFQUkxQmhOLEVBQU1wWSxLQUFLLEtBQUssTUFHbkIsQ0FDRHZELElBQUl1eUIsRUFBSzdXLEVBQUl3RixTQUVUcVIsRUFEQUEsR0FBTXJLLEVBQ0RxSyxFQUFHL3hCLFFBQVEsT0FBUSxFQUFFLEVBQzFCK3hCLEtBQ01ySyxHQUFhb0ssQ0FBQUEsR0FBK0MsS0FBNUIzVyxFQUFNQSxFQUFNaGMsT0FBUyxJQUN2RGdjLEVBQU1wWSxLQUFLLEVBQUUsRUFDakJvWSxFQUFNcFksS0FBSytkLEVBQWMyQyxFQUFjc08sQ0FBRSxFQUFHLEVBQUUsQ0FBQyxFQUUzRCxDQUNJLE9BQU81VyxFQUFNL2IsS0FBSyxJQUFJLEVBQUksSURvUGdCLENBQzlDLENBQ0EsQ0FDQSxTQUFTK3hCLEdBQWlCdlosR0FDdEIsR0FBSVYsRUFBYVUsQ0FBUSxFQUNyQixPQUFPLEVBQ1gsTUFBTSxJQUFJdlIsTUFBTSxpREFBaUQsQ0FDckUsT0U1VU0yckIsV0FBa0IzckIsTUFDcEJoQyxZQUFZMkUsRUFBTWlwQixFQUFLcFAsRUFBTXFQLEdBQ3pCMVUsTUFBTyxFQUNQdFgsS0FBSzhDLEtBQU9BLEVBQ1o5QyxLQUFLMmMsS0FBT0EsRUFDWjNjLEtBQUtnc0IsUUFBVUEsRUFDZmhzQixLQUFLK3JCLElBQU1BLENBQ25CLENBQ0EsT0FDTUUsV0FBdUJILEdBQ3pCM3RCLFlBQVk0dEIsRUFBS3BQLEVBQU1xUCxHQUNuQjFVLE1BQU0saUJBQWtCeVUsRUFBS3BQLEVBQU1xUCxDQUFPLENBQ2xELENBQ0EsT0FDTUUsV0FBb0JKLEdBQ3RCM3RCLFlBQVk0dEIsRUFBS3BQLEVBQU1xUCxHQUNuQjFVLE1BQU0sY0FBZXlVLEVBQUtwUCxFQUFNcVAsQ0FBTyxDQUMvQyxDQUNBLENBQ0EsSUFBTUcsR0FBZ0IsQ0FBQ2xVLEVBQUttVSxJQUFPLElBQy9CLEdBQXFCLENBQUUsSUFBbkI3ckIsRUFBTXdyQixJQUFJLEdBQWQsQ0FFQXhyQixFQUFNOHJCLFFBQVU5ckIsRUFBTXdyQixJQUFJbHpCLElBQUlrekIsR0FBT0ssRUFBR0MsUUFBUU4sQ0FBRyxDQUFDLEVBQ3BELEdBQU0sQ0FBRTFuQixLQUFBQSxFQUFNaW9CLElBQUFBLENBQUcsRUFBSy9yQixFQUFNOHJCLFFBQVEsR0FDcEM5ckIsRUFBTXlyQixxQkFBdUIzbkIsYUFBZ0Jpb0IsRUFDN0NoekIsSUFBSTBZLEVBQUtzYSxFQUFNLEVBQ1hDLEVBQVV0VSxFQUNUbkwsVUFBVXNmLEVBQUdJLFdBQVdub0IsRUFBTyxHQUFJK25CLEVBQUdJLFdBQVdub0IsRUFBSyxFQUN0RHZLLFFBQVEsV0FBWSxFQUFFLEVBVTNCLEdBUlUsSUFBTmtZLEdBQTZCLEdBQWpCdWEsRUFBUXR6QixTQUNkc3FCLEVBQVk5bUIsS0FBS0MsSUFBSXNWLEVBQUssR0FBSXVhLEVBQVF0ekIsT0FBUyxFQUFFLEVBQ3ZEc3pCLEVBQVUsSUFBTUEsRUFBUXpmLFVBQVV5VyxDQUFTLEVBQzNDdlIsR0FBTXVSLEVBQVksR0FFRCxHQUFqQmdKLEVBQVF0ekIsU0FDUnN6QixFQUFVQSxFQUFRemYsVUFBVSxFQUFHLEVBQUUsRUFBSSxLQUU5QixFQUFQekksR0FBWSxPQUFPekssS0FBSzJ5QixFQUFRemYsVUFBVSxFQUFHa0YsQ0FBRSxDQUFDLEVBQUcsQ0FFbkQxWSxJQUFJMEssRUFBT2lVLEVBQUluTCxVQUFVc2YsRUFBR0ksV0FBV25vQixFQUFPLEdBQUkrbkIsRUFBR0ksV0FBV25vQixFQUFPLEVBQUUsRUFDdkQsR0FBZEwsRUFBSy9LLFNBQ0wrSyxFQUFPQSxFQUFLOEksVUFBVSxFQUFHLEVBQUUsRUFBSSxPQUNuQ3lmLEVBQVV2b0IsRUFBT3VvQixDQUN6QixDQUNJLEdBQUksT0FBTzN5QixLQUFLMnlCLENBQU8sRUFBRyxDQUN0Qmp6QixJQUFJeVIsRUFBUSxFQUNaLElBQU16TyxFQUFNaUUsRUFBTThyQixRQUFRLEdBSXBCSSxHQUhGbndCLEdBQU9BLEVBQUkrSCxPQUFTQSxHQUFRL0gsRUFBSWd3QixJQUFNQSxJQUN0Q3ZoQixFQUFRdE8sS0FBS3FiLElBQUksRUFBR3JiLEtBQUtDLElBQUlKLEVBQUlnd0IsSUFBTUEsRUFBSyxHQUFLdGEsQ0FBRSxDQUFDLEdBRXhDLElBQUk2TixPQUFPN04sQ0FBRSxFQUFJLElBQUk2TixPQUFPOVUsQ0FBSyxHQUNqRHhLLEVBQU15ckI7O0VBQW1CTztFQUFZRTtDQUM3QyxDQWhDUSxDQWlDUixFQ3REQSxTQUFTQyxHQUFhQyxFQUFRLENBQUU3SyxLQUFBQSxFQUFNOEssVUFBQUEsRUFBV3JoQixLQUFBQSxFQUFNZ2EsT0FBQUEsRUFBUWxSLFFBQUFBLEVBQVN3WSxhQUFBQSxFQUFjQyxlQUFBQSxJQUNsRnh6QixJQUFJdW9CLEVBQWMsQ0FBQSxFQUNka0wsRUFBWUQsRUFDWkUsRUFBV0YsRUFDWHRTLEVBQVUsR0FDVnlTLEVBQWEsR0FDYjdLLEVBQWEsQ0FBQSxFQUNiOEssRUFBVyxDQUFBLEVBQ1hDLEVBQU0sS0FDTjNYLEVBQVMsS0FDVFosRUFBTSxLQUNOd1ksRUFBbUIsS0FDbkJDLEVBQVEsS0FDUjlWLEVBQVEsS0FDUmxiLEVBQVEsS0FDWixJQUFLLElBQU1peEIsS0FBU1gsRUFjaEIsT0FiSU8sSUFDbUIsVUFBZkksRUFBTXBmLE1BQ1MsWUFBZm9mLEVBQU1wZixNQUNTLFVBQWZvZixFQUFNcGYsTUFDTm1HLEVBQVFpWixFQUFNL0gsT0FBUSxlQUFnQix1RUFBdUUsRUFDakgySCxFQUFXLENBQUEsR0FFWEMsSUFDSUosR0FBNEIsWUFBZk8sRUFBTXBmLE1BQXFDLFlBQWZvZixFQUFNcGYsTUFDL0NtRyxFQUFROFksRUFBSyxnQkFBaUIscUNBQXFDLEVBRXZFQSxFQUFNLE1BRUZHLEVBQU1wZixNQUNWLElBQUssUUFJSTRULEdBQ2MsY0FBZDhLLEdBQTRDLG9CQUFmcmhCLEdBQU0yQyxNQUNwQ29mLENBQUFBLEVBQU0zZCxPQUFPaEIsU0FBUyxJQUFJLElBQzFCd2UsRUFBTUcsR0FFVk4sRUFBVyxDQUFBLEVBQ1gsTUFDSixJQUFLLFVBQ0lBLEdBQ0QzWSxFQUFRaVosRUFBTyxlQUFnQix3RUFBd0UsRUFDM0csSUFBTUMsRUFBS0QsRUFBTTNkLE9BQU83QyxVQUFVLENBQUMsR0FBSyxJQUNuQzBOLEVBR0RBLEdBQVd5UyxFQUFhTSxFQUZ4Qi9TLEVBQVUrUyxFQUdkTixFQUFhLEdBQ2JGLEVBQVksQ0FBQSxFQUNaLE1BRUosSUFBSyxVQUNHQSxFQUNJdlMsRUFDQUEsR0FBVzhTLEVBQU0zZCxPQUNYNEgsR0FBdUIsaUJBQWRxVixJQUNmL0ssRUFBYyxDQUFBLEdBR2xCb0wsR0FBY0ssRUFBTTNkLE9BQ3hCb2QsRUFBWSxDQUFBLEVBQ1ozSyxFQUFhLENBQUEsR0FDVDVNLEdBQVVaLEtBQ1Z3WSxFQUFtQkUsR0FDdkJOLEVBQVcsQ0FBQSxFQUNYLE1BQ0osSUFBSyxTQUNHeFgsR0FDQW5CLEVBQVFpWixFQUFPLG1CQUFvQixvQ0FBb0MsRUFDdkVBLEVBQU0zZCxPQUFPb0wsU0FBUyxHQUFHLEdBQ3pCMUcsRUFBUWlaLEVBQU0vSCxPQUFTK0gsRUFBTTNkLE9BQU8xVyxPQUFTLEVBQUcsWUFBYSxrQ0FBbUMsQ0FBQSxDQUFJLEVBQ3hHdWMsRUFBUzhYLEVBQ0ssT0FBVmp4QixJQUNBQSxFQUFRaXhCLEVBQU0vSCxRQUNsQndILEVBQVksQ0FBQSxFQUNaQyxFQUFXLENBQUEsRUFDWEUsRUFBVyxDQUFBLEVBQ1gsTUFDSixJQUFLLE1BQ0d0WSxHQUNBUCxFQUFRaVosRUFBTyxnQkFBaUIsaUNBQWlDLEVBQ3JFMVksRUFBTTBZLEVBQ1EsT0FBVmp4QixJQUNBQSxFQUFRaXhCLEVBQU0vSCxRQUNsQndILEVBQVksQ0FBQSxFQUNaQyxFQUFXLENBQUEsRUFDWEUsRUFBVyxDQUFBLEVBQ1gsTUFFSixLQUFLTixHQUVHcFgsR0FBVVosSUFDVlAsRUFBUWlaLEVBQU8sdURBQXdEQSxFQUFNM2Qsa0JBQWtCLEVBQy9GNEgsR0FDQWxELEVBQVFpWixFQUFPLGlDQUFrQ0EsRUFBTTNkLGNBQWFtUyxHQUFRLGFBQWMsRUFDOUZ2SyxFQUFRK1YsRUFDUlAsRUFDa0IsaUJBQWRILEdBQThDLHFCQUFkQSxFQUNwQ0ksRUFBVyxDQUFBLEVBQ1gsTUFDSixJQUFLLFFBQ0QsR0FBSWxMLEVBQU0sQ0FDRnVMLEdBQ0FoWixFQUFRaVosRUFBTyxtQkFBb0IsbUJBQW1CeEwsQ0FBTSxFQUNoRXVMLEVBQVFDLEVBQ1JQLEVBQVksQ0FBQSxFQUNaQyxFQUFXLENBQUEsRUFDWCxLQUNwQixDQUVZLFFBQ0kzWSxFQUFRaVosRUFBTyxpQ0FBa0NBLEVBQU1wZixZQUFZLEVBQ25FNmUsRUFBWSxDQUFBLEVBQ1pDLEVBQVcsQ0FBQSxDQUMzQixDQUVVcnlCLEVBQU9neUIsRUFBT0EsRUFBTzF6QixPQUFTLEdBQzlCcUQsRUFBTTNCLEVBQU9BLEVBQUs0cUIsT0FBUzVxQixFQUFLZ1YsT0FBTzFXLE9BQVNzc0IsRUFjdEQsT0FiSTJILEdBQ0EzaEIsR0FDYyxVQUFkQSxFQUFLMkMsTUFDUyxZQUFkM0MsRUFBSzJDLE1BQ1MsVUFBZDNDLEVBQUsyQyxPQUNVLFdBQWQzQyxFQUFLMkMsTUFBcUMsS0FBaEIzQyxFQUFLb0UsU0FDaEMwRSxFQUFROUksRUFBS2dhLE9BQVEsZUFBZ0IsdUVBQXVFLEVBRTVHNEgsSUFDRUosR0FBYUksRUFBSXRTLFFBQVVnUyxHQUNWLGNBQWZ0aEIsR0FBTTJDLE1BQ1MsY0FBZjNDLEdBQU0yQyxPQUNWbUcsRUFBUThZLEVBQUssZ0JBQWlCLHFDQUFxQyxFQUNoRSxDQUNIRSxNQUFBQSxFQUNBOVYsTUFBQUEsRUFDQXNLLFlBQUFBLEVBQ0FySCxRQUFBQSxFQUNBNEgsV0FBQUEsRUFDQTVNLE9BQUFBLEVBQ0FaLElBQUFBLEVBQ0F3WSxpQkFBQUEsRUFDQTl3QixJQUFBQSxFQUNBRCxNQUFPQSxHQUFTQyxDQUNuQixDQUNMLENDakpBLFNBQVNreEIsR0FBZ0I3cEIsR0FDckIsR0FBS0EsRUFFTCxPQUFRQSxFQUFJdUssTUFDUixJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssdUJBQ0wsSUFBSyx1QkFDRCxHQUFJdkssRUFBSWdNLE9BQU9oQixTQUFTLElBQUksRUFDeEIsT0FBTyxFQUNYLEdBQUloTCxFQUFJckgsSUFDSixJQUFLLElBQU1teEIsS0FBTTlwQixFQUFJckgsSUFDakIsR0FBZ0IsWUFBWm14QixFQUFHdmYsS0FDSCxPQUFPLEVBQ25CLE9BQ0osSUFBSyxrQkFDRCxJQUFLLElBQU00TCxLQUFNblcsRUFBSW9PLE1BQU8sQ0FDeEIsSUFBSyxJQUFNMGIsS0FBTTNULEVBQUd6ZCxNQUNoQixHQUFnQixZQUFab3hCLEVBQUd2ZixLQUNILE9BQU8sRUFDZixHQUFJNEwsRUFBR3RjLElBQ0gsSUFBSyxJQUFNaXdCLEtBQU0zVCxFQUFHdGMsSUFDaEIsR0FBZ0IsWUFBWml3QixFQUFHdmYsS0FDSCxPQUFPLEVBQ25CLEdBQUlzZixHQUFnQjFULEVBQUduVyxHQUFHLEdBQUs2cEIsR0FBZ0IxVCxFQUFHcmIsS0FBSyxFQUNuRCxPQUFPLENBQzNCLENBQ1ksT0FDSixRQUNJLE9BQU8sQ0FDbkIsQ0FDQSxDQzdCQSxTQUFTaXZCLEdBQWdCN1MsRUFBUThTLEVBQUl0WixHQUNqQyxJQUNVL1gsRUFETyxvQkFBYnF4QixHQUFJemYsT0FDRTVSLEVBQU1xeEIsRUFBR3J4QixJQUFJLElBQ1h1ZSxTQUFXQSxHQUNDLE1BQWZ2ZSxFQUFJcVQsUUFBaUMsTUFBZnJULEVBQUlxVCxRQUMzQjZkLENBQUFBLEdBQWdCRyxDQUFFLEdBRWxCdFosRUFBUS9YLEVBQUssYUFERCx5REFDb0IsQ0FBQSxDQUFJLENBR2hELENDVkEsU0FBU3N4QixHQUFZN3NCLEVBQUtnUixFQUFPOGIsR0FDckIvQyxFQUFlL3BCLEVBQUl6SSxtQkFDM0IsR0FBbUIsQ0FBQSxJQUFmd3lCLEVBQUosQ0FFQSxJQUFNZ0QsRUFBZ0MsWUFBdEIsT0FBT2hELEVBQ2pCQSxFQUNBLENBQUNwZSxFQUFHdWQsSUFBTXZkLElBQU11ZCxHQUFNblosRUFBU3BFLENBQUMsR0FBS29FLEVBQVNtWixDQUFDLEdBQUt2ZCxFQUFFak8sUUFBVXdyQixFQUFFeHJCLE1BQ3hFLE9BQU9zVCxFQUFNc0QsS0FBS3dPLEdBQVFpSyxFQUFRakssRUFBS2xnQixJQUFLa3FCLENBQU0sQ0FBQyxDQUpuQyxDQUtwQixDQ0hBLElBQU1FLEdBQWMsa0RDUHBCLFNBQVNDLEdBQVcxeEIsRUFBS2lwQixFQUFRMkgsRUFBVTdZLEdBQ3ZDL2EsSUFBSWtoQixFQUFVLEdBQ2QsR0FBSWxlLEVBQUssQ0FDTGhELElBQUkwekIsRUFBVyxDQUFBLEVBQ1h4dkIsRUFBTSxHQUNWLElBQUssSUFBTTh2QixLQUFTaHhCLEVBQUssQ0FDckIsR0FBTSxDQUFFcVQsT0FBQUEsRUFBUXpCLEtBQUFBLENBQUksRUFBS29mLEVBQ3pCLE9BQVFwZixHQUNKLElBQUssUUFDRDhlLEVBQVcsQ0FBQSxFQUNYLE1BQ0osSUFBSyxVQUNHRSxHQUFZLENBQUNGLEdBQ2IzWSxFQUFRaVosRUFBTyxlQUFnQix3RUFBd0UsRUFDM0csSUFBTUMsRUFBSzVkLEVBQU83QyxVQUFVLENBQUMsR0FBSyxJQUM3QjBOLEVBR0RBLEdBQVdoZCxFQUFNK3ZCLEVBRmpCL1MsRUFBVStTLEVBR2QvdkIsRUFBTSxHQUNOLE1BRUosSUFBSyxVQUNHZ2QsSUFDQWhkLEdBQU9tUyxHQUNYcWQsRUFBVyxDQUFBLEVBQ1gsTUFDSixRQUNJM1ksRUFBUWlaLEVBQU8saUNBQWtDcGYsZUFBa0IsQ0FDdkYsQ0FDWXFYLEdBQVU1VixFQUFPMVcsTUFDN0IsQ0FDQSxDQUNJLE1BQU8sQ0FBRXVoQixRQUFBQSxFQUFTK0ssT0FBQUEsQ0FBUSxDQUM5QixDQ3pCQSxJQUFNMEksR0FBVyw0REFDWDdSLEdBQVUsR0FBV2tSLElBQXlCLGNBQWZBLEVBQU1wZixNQUF1QyxjQUFmb2YsRUFBTXBmLE1DRnpFLFNBQVNnZ0IsR0FBa0JDLEVBQUlwdEIsRUFBS3VzQixFQUFPalosRUFBU0UsRUFBU0ssR0FDbkR3WixHQUFzQixjQUFmZCxFQUFNcGYsS0hEdkIsQ0FBeUIsQ0FBRW1nQixZQUFBQSxFQUFhQyxpQkFBQUEsQ0FBZ0IsRUFBSXZ0QixFQUFLd3RCLEVBQUlsYSxFQUFTTyxLQUMxRSxJQU1XNFosRUFMTDMxQixFQUFNLElBRE0rYixHQUFLNEUsV0FBYWlLLEdBQ1YxaUIsRUFBSTZYLE1BQU0sRUFDaEM3WCxFQUFJMHRCLFNBQ0oxdEIsRUFBSTB0QixPQUFTLENBQUEsR0FDakJuMUIsSUFBSWlzQixFQUFTZ0osRUFBR2hKLE9BQ1ptSixFQUFhLEtBQ2pCLElBQVdGLEtBQVlELEVBQUd4YyxNQUFPLENBQzdCLEdBQU0sQ0FBRTFWLE1BQUFBLEVBQU9zSCxJQUFBQSxFQUFLbkcsSUFBQUEsRUFBS2lCLE1BQUFBLENBQU8sRUFBRyt2QixFQUU3QkcsRUFBV2pDLEdBQWFyd0IsRUFBTyxDQUNqQ3V3QixVQUFXLG1CQUNYcmhCLEtBQU01SCxHQUFPbkcsSUFBTSxHQUNuQituQixPQUFBQSxFQUNBbFIsUUFBQUEsRUFDQXdZLGFBQWMwQixFQUFHMVQsT0FDakJpUyxlQUFnQixDQUFBLENBQzVCLENBQVMsRUFDSzNVLEVBQWMsQ0FBQ3dXLEVBQVNwWCxNQUM5QixHQUFJWSxFQUFhLENBT2IsR0FOSXhVLElBQ2lCLGNBQWJBLEVBQUl1SyxLQUNKbUcsRUFBUWtSLEVBQVEsd0JBQXlCLHlEQUF5RCxFQUM3RixXQUFZNWhCLEdBQU9BLEVBQUlrWCxTQUFXMFQsRUFBRzFULFFBQzFDeEcsRUFBUWtSLEVBQVEsYUFBY3dJLEVBQVcsR0FFN0MsQ0FBQ1ksRUFBU25aLFFBQVUsQ0FBQ21aLEVBQVMvWixLQUFPLENBQUNwWCxFQUFLLENBQzNDa3hCLEVBQWFDLEVBQVNyeUIsSUFDbEJxeUIsRUFBU25VLFVBQ0wzaEIsRUFBSTJoQixRQUNKM2hCLEVBQUkyaEIsU0FBVyxLQUFPbVUsRUFBU25VLFFBRS9CM2hCLEVBQUkyaEIsUUFBVW1VLEVBQVNuVSxTQUUvQixRQUNoQixFQUNnQm1VLEVBQVN2QixrQkFBb0JJLEdBQWdCN3BCLENBQUcsSUFDaEQwUSxFQUFRMVEsR0FBT3RILEVBQU1BLEVBQU1wRCxPQUFTLEdBQUkseUJBQTBCLDJDQUEyQyxDQUU3SCxNQUNpQjAxQixFQUFTcFgsT0FBT3NELFNBQVcwVCxFQUFHMVQsUUFDbkN4RyxFQUFRa1IsRUFBUSxhQUFjd0ksRUFBVyxFQUc3Q2h0QixFQUFJNnRCLE1BQVEsQ0FBQSxFQUNaLElBQU1DLEVBQVdGLEVBQVNyeUIsSUFDcEJ3eUIsRUFBVW5yQixFQUNWMHFCLEVBQVl0dEIsRUFBSzRDLEVBQUtnckIsRUFBVXRhLENBQU8sRUFDdkNpYSxFQUFpQnZ0QixFQUFLOHRCLEVBQVV4eUIsRUFBTyxLQUFNc3lCLEVBQVV0YSxDQUFPLEVBTzlEMGEsR0FORmh1QixFQUFJNlgsT0FBT29HLFFBQ1gwTyxHQUFnQmEsRUFBRzFULE9BQVFsWCxFQUFLMFEsQ0FBTyxFQUMzQ3RULEVBQUk2dEIsTUFBUSxDQUFBLEVBQ1JoQixHQUFZN3NCLEVBQUtsSSxFQUFJa1osTUFBTytjLENBQU8sR0FDbkN6YSxFQUFRd2EsRUFBVSxnQkFBaUIseUJBQXlCLEVBRTdDbkMsR0FBYWx2QixHQUFPLEdBQUksQ0FDdkNvdkIsVUFBVyxnQkFDWHJoQixLQUFNOU0sRUFDTjhtQixPQUFRdUosRUFBUTlYLE1BQU0sR0FDdEIzQyxRQUFBQSxFQUNBd1ksYUFBYzBCLEVBQUcxVCxPQUNqQmlTLGVBQWdCLENBQUNucEIsR0FBb0IsaUJBQWJBLEVBQUl1SyxJQUN4QyxDQUFTLEdBQ0RxWCxFQUFTd0osRUFBV3p5QixJQUNoQnl5QixFQUFXeFgsT0FDUFksSUFDb0IsY0FBaEIxWixHQUFPeVAsTUFBeUI2Z0IsRUFBVzNNLFlBQzNDL04sRUFBUWtSLEVBQVEsd0JBQXlCLHFEQUFxRCxFQUM5RnhrQixFQUFJekksUUFBUXN5QixTQUNaK0QsRUFBU3R5QixNQUFRMHlCLEVBQVd4WCxNQUFNZ08sT0FBUyxNQUMzQ2xSLEVBQVF5YSxFQUFROVgsTUFBTyxzQkFBdUIsNkZBQTZGLEVBRzdJZ1ksRUFBWXZ3QixFQUNaNHZCLEVBQVl0dEIsRUFBS3RDLEVBQU9zd0IsRUFBWTFhLENBQU8sRUFDM0NpYSxFQUFpQnZ0QixFQUFLd2tCLEVBQVEvbkIsRUFBSyxLQUFNdXhCLEVBQVkxYSxDQUFPLEVBQzlEdFQsRUFBSTZYLE9BQU9vRyxRQUNYME8sR0FBZ0JhLEVBQUcxVCxPQUFRcGMsRUFBTzRWLENBQU8sRUFDN0NrUixFQUFTeUosRUFBVWhZLE1BQU0sR0FDbkI2TSxFQUFPLElBQUkvUSxFQUFLZ2MsRUFBU0UsQ0FBUyxFQUNwQ2p1QixFQUFJekksUUFBUW95QixtQkFDWjdHLEVBQUtvTCxTQUFXVCxHQUNwQjMxQixFQUFJa1osTUFBTWxWLEtBQUtnbkIsQ0FBSSxJQUlmMUwsR0FDQTlELEVBQVF5YSxFQUFROVgsTUFBTyxlQUFnQixxREFBcUQsRUFDNUYrWCxFQUFXdlUsVUFDUHNVLEVBQVF0VSxRQUNSc1UsRUFBUXRVLFNBQVcsS0FBT3VVLEVBQVd2VSxRQUVyQ3NVLEVBQVF0VSxRQUFVdVUsRUFBV3ZVLFNBRS9CcUosRUFBTyxJQUFJL1EsRUFBS2djLENBQU8sRUFDekIvdEIsRUFBSXpJLFFBQVFveUIsbUJBQ1o3RyxFQUFLb0wsU0FBV1QsR0FDcEIzMUIsRUFBSWtaLE1BQU1sVixLQUFLZ25CLENBQUksRUFFL0IsQ0FJSSxPQUhJNkssR0FBY0EsRUFBYW5KLEdBQzNCbFIsRUFBUXFhLEVBQVksYUFBYyxtQ0FBbUMsRUFDekU3MUIsRUFBSW1lLE1BQVEsQ0FBQ3VYLEVBQUdoSixPQUFRQSxFQUFRbUosR0FBY25KLEdBQ3ZDMXNCLENBQ1gsRUdyR3lCLGNBQWZ5MEIsRUFBTXBmLEtDUGhCLENBQXlCLENBQUVtZ0IsWUFBQUEsRUFBYUMsaUJBQUFBLENBQWdCLEVBQUl2dEIsRUFBS211QixFQUFJN2EsRUFBU08sS0FDMUUsSUFRYXZZLEVBQU9vQyxFQVBkNGxCLEVBQU0sSUFETXpQLEdBQUs0RSxXQUFhMkssR0FDVnBqQixFQUFJNlgsTUFBTSxFQUNoQzdYLEVBQUkwdEIsU0FDSjF0QixFQUFJMHRCLE9BQVMsQ0FBQSxHQUNiMXRCLEVBQUk2dEIsUUFDSjd0QixFQUFJNnRCLE1BQVEsQ0FBQSxHQUNoQnQxQixJQUFJaXNCLEVBQVMySixFQUFHM0osT0FDWm1KLEVBQWEsS0FDakIsSUFBVyxDQUFFcnlCLE1BQUFBLEVBQU9vQyxNQUFBQSxDQUFLLElBQU15d0IsRUFBR25kLE1BQU8sQ0FDckMsSUFBTWdPLEVBQVEyTSxHQUFhcndCLEVBQU8sQ0FDOUJ1d0IsVUFBVyxlQUNYcmhCLEtBQU05TSxFQUNOOG1CLE9BQUFBLEVBQ0FsUixRQUFBQSxFQUNBd1ksYUFBY3FDLEVBQUdyVSxPQUNqQmlTLGVBQWdCLENBQUEsQ0FDNUIsQ0FBUyxFQUNELEdBQUksQ0FBQy9NLEVBQU14SSxNQUFPLENBQ2QsR0FBSXdJLEVBQUFBLEVBQU12SyxRQUFVdUssRUFBTW5MLEtBQU9uVyxHQU01QixDQUNEaXdCLEVBQWEzTyxFQUFNempCLElBQ2Z5akIsRUFBTXZGLFVBQ042SixFQUFJN0osUUFBVXVGLEVBQU12RixTQUN4QixRQUNoQixDQVZvQi9iLEdBQXdCLGNBQWZBLEVBQU15UCxLQUNmbUcsRUFBUTBMLEVBQU16akIsSUFBSyxhQUFjLGtEQUFrRCxFQUVuRitYLEVBQVFrUixFQUFRLGVBQWdCLG1DQUFtQyxDQVF2RixDQUNjN1UsRUFBT2pTLEVBQ1A0dkIsRUFBWXR0QixFQUFLdEMsRUFBT3NoQixFQUFPMUwsQ0FBTyxFQUN0Q2lhLEVBQWlCdnRCLEVBQUtnZixFQUFNempCLElBQUtELEVBQU8sS0FBTTBqQixFQUFPMUwsQ0FBTyxFQUM5RHRULEVBQUk2WCxPQUFPb0csUUFDWDBPLEdBQWdCd0IsRUFBR3JVLE9BQVFwYyxFQUFPNFYsQ0FBTyxFQUM3Q2tSLEVBQVM3VSxFQUFLc0csTUFBTSxHQUNwQnFOLEVBQUl0UyxNQUFNbFYsS0FBSzZULENBQUksQ0FDM0IsQ0FFSSxPQURBMlQsRUFBSXJOLE1BQVEsQ0FBQ2tZLEVBQUczSixPQUFRQSxFQUFRbUosR0FBY25KLEdBQ3ZDbEIsQ0FDWCxFRm5DQSxDQUErQixDQUFFZ0ssWUFBQUEsRUFBYUMsaUJBQUFBLENBQWdCLEVBQUl2dEIsRUFBSzRzQixFQUFJdFosRUFBU08sS0FDaEYsSUFBTWhFLEVBQTRCLE1BQXBCK2MsRUFBR3R4QixNQUFNc1QsT0FDakJ3ZixFQUFTdmUsRUFBUSxXQUFhLGdCQUU5QndkLEVBQU8sSUFETXhaLEdBQUs0RSxZQUFjNUksRUFBUTZTLEVBQVVVLElBQzdCcGpCLEVBQUk2WCxNQUFNLEVBQ3JDd1YsRUFBS3RNLEtBQU8sQ0FBQSxHQUVSMk0sRUFEVzF0QixFQUFJMHRCLFVBRWYxdEIsRUFBSTB0QixPQUFTLENBQUEsR0FDYjF0QixFQUFJNnRCLFFBQ0o3dEIsRUFBSTZ0QixNQUFRLENBQUEsR0FDaEJ0MUIsSUFBSWlzQixFQUFTb0ksRUFBR3BJLE9BQVNvSSxFQUFHdHhCLE1BQU1zVCxPQUFPMVcsT0FDekMsSUFBS0ssSUFBSUksRUFBSSxFQUFHQSxFQUFJaTBCLEVBQUc1YixNQUFNOVksT0FBUSxFQUFFUyxFQUFHLENBQ3RDLElBQU04MEIsRUFBV2IsRUFBRzViLE1BQU1yWSxHQUNwQixDQUFFMkMsTUFBQUEsRUFBT3NILElBQUFBLEVBQUtuRyxJQUFBQSxFQUFLaUIsTUFBQUEsQ0FBTyxFQUFHK3ZCLEVBQzdCek8sRUFBUTJNLEdBQWFyd0IsRUFBTyxDQUM5QnlsQixLQUFNcU4sRUFDTnZDLFVBQVcsbUJBQ1hyaEIsS0FBTTVILEdBQU9uRyxJQUFNLEdBQ25CK25CLE9BQUFBLEVBQ0FsUixRQUFBQSxFQUNBd1ksYUFBY2MsRUFBRzlTLE9BQ2pCaVMsZUFBZ0IsQ0FBQSxDQUM1QixDQUFTLEVBQ0QsR0FBSSxDQUFDL00sRUFBTXhJLE1BQU8sQ0FDZCxHQUFJLEVBQUN3SSxFQUFNdkssUUFBV3VLLEVBQU1uTCxLQUFRcFgsR0FBUWlCLEdBQU8sQ0FDckMsSUFBTi9FLEdBQVdxbUIsRUFBTXNOLE1BQ2pCaFosRUFBUTBMLEVBQU1zTixNQUFPLG1CQUFvQixtQkFBbUI4QixDQUFRLEVBQy9EejFCLEVBQUlpMEIsRUFBRzViLE1BQU05WSxPQUFTLEdBQzNCb2IsRUFBUTBMLEVBQU0xakIsTUFBTyxtQkFBb0IsNEJBQTRCOHlCLENBQVEsRUFDN0VwUCxFQUFNdkYsVUFDRjRULEVBQUs1VCxRQUNMNFQsRUFBSzVULFNBQVcsS0FBT3VGLEVBQU12RixRQUU3QjRULEVBQUs1VCxRQUFVdUYsRUFBTXZGLFNBRTdCK0ssRUFBU3hGLEVBQU16akIsSUFDZixRQUNoQixDQUNnQixDQUFDc1UsR0FBUzdQLEVBQUl6SSxRQUFRc3lCLFFBQVU0QyxHQUFnQjdwQixDQUFHLEdBQ25EMFEsRUFBUTFRLEVBQ1IseUJBQTBCLGtFQUFrRSxDQUM1RyxDQUNRLEdBQVUsSUFBTmpLLEVBQ0lxbUIsRUFBTXNOLE9BQ05oWixFQUFRMEwsRUFBTXNOLE1BQU8sbUJBQW9CLG1CQUFtQjhCLENBQVEsT0FLeEUsR0FGS3BQLEVBQU1zTixPQUNQaFosRUFBUTBMLEVBQU0xakIsTUFBTyxvQ0FBcUM4eUIsU0FBYyxFQUN4RXBQLEVBQU12RixRQUFTLENBQ2ZsaEIsSUFBSTgxQixFQUFrQixHQUN0QkMsRUFBTSxJQUFLLElBQU01QixLQUFNcHhCLEVBQ25CLE9BQVFveEIsRUFBR3ZmLE1BQ1AsSUFBSyxRQUNMLElBQUssUUFDRCxNQUNKLElBQUssVUFDRGtoQixFQUFrQjNCLEVBQUc5ZCxPQUFPN0MsVUFBVSxDQUFDLEVBQ3ZDLE1BQU11aUIsRUFDVixRQUNJLE1BQU1BLENBQ2xDLENBRWdCLEdBQUlELEVBQWlCLENBQ2pCOTFCLElBQUkwSyxFQUFPb3FCLEVBQUtyYyxNQUFNcWMsRUFBS3JjLE1BQU05WSxPQUFTLElBRXRDK0ssRUFEQTZNLEVBQU83TSxDQUFJLEVBQ0pBLEVBQUt2RixPQUFTdUYsRUFBS0wsSUFDMUJLLEdBQUt3VyxRQUNMeFcsRUFBS3dXLFNBQVcsS0FBTzRVLEVBRXZCcHJCLEVBQUt3VyxRQUFVNFUsRUFDbkJyUCxFQUFNdkYsUUFBVXVGLEVBQU12RixRQUFRMU4sVUFBVXNpQixFQUFnQm4yQixPQUFTLENBQUMsQ0FDdEYsQ0FDQSxDQUVRLEdBQUsyWCxHQUFVcFQsR0FBUXVpQixFQUFNeEksTUFXeEIsQ0FHRHhXLEVBQUk2dEIsTUFBUSxDQUFBLEVBQ1osSUFBTUMsRUFBVzlPLEVBQU16akIsSUFDakJ3eUIsRUFBVW5yQixFQUNWMHFCLEVBQVl0dEIsRUFBSzRDLEVBQUtvYyxFQUFPMUwsQ0FBTyxFQUNwQ2lhLEVBQWlCdnRCLEVBQUs4dEIsRUFBVXh5QixFQUFPLEtBQU0wakIsRUFBTzFMLENBQU8sRUFLM0QwYSxHQUpGM1MsR0FBUXpZLENBQUcsR0FDWDBRLEVBQVF5YSxFQUFROVgsTUFBTyxnQkFBaUJpWCxFQUFRLEVBQ3BEbHRCLEVBQUk2dEIsTUFBUSxDQUFBLEVBRU9sQyxHQUFhbHZCLEdBQU8sR0FBSSxDQUN2Q3NrQixLQUFNcU4sRUFDTnZDLFVBQVcsZ0JBQ1hyaEIsS0FBTTlNLEVBQ044bUIsT0FBUXVKLEVBQVE5WCxNQUFNLEdBQ3RCM0MsUUFBQUEsRUFDQXdZLGFBQWNjLEVBQUc5UyxPQUNqQmlTLGVBQWdCLENBQUEsQ0FDaEMsQ0FBYSxHQUNELEdBQUlpQyxFQUFXeFgsT0FDWCxHQUFJLENBQUMzRyxHQUFTLENBQUNtUCxFQUFNeEksT0FBU3hXLEVBQUl6SSxRQUFRc3lCLE9BQVEsQ0FDOUMsR0FBSXB0QixFQUNBLElBQUssSUFBTWl3QixLQUFNandCLEVBQUssQ0FDbEIsR0FBSWl3QixJQUFPc0IsRUFBV3hYLE1BQ2xCLE1BQ0osR0FBZ0IsWUFBWmtXLEVBQUd2ZixLQUFvQixDQUN2Qm1HLEVBQVFvWixFQUFJLHlCQUEwQixrRUFBa0UsRUFDeEcsS0FDaEMsQ0FDQSxDQUN3QjFOLEVBQU0xakIsTUFBUTB5QixFQUFXeFgsTUFBTWdPLE9BQVMsTUFDeENsUixFQUFRMGEsRUFBV3hYLE1BQU8sc0JBQXVCLDZGQUE2RixDQUN0SyxDQUFBLE1BRXFCOVksSUFDRCxXQUFZQSxHQUFTQSxFQUFNa1IsUUFBOEIsTUFBcEJsUixFQUFNa1IsT0FBTyxHQUNsRDBFLEVBQVE1VixFQUFPLGVBQWdCLDRCQUE0QjB3QixDQUFRLEVBRW5FOWEsRUFBUTBhLEVBQVcxeUIsTUFBTyx5Q0FBMEM4eUIsU0FBYyxHQUcxRixJQUFNSCxFQUFZdndCLEVBQ1o0dkIsRUFBWXR0QixFQUFLdEMsRUFBT3N3QixFQUFZMWEsQ0FBTyxFQUMzQzBhLEVBQVd4WCxNQUNQK1csRUFBaUJ2dEIsRUFBS2d1QixFQUFXenlCLElBQUtrQixFQUFLLEtBQU11eEIsRUFBWTFhLENBQU8sRUFDcEUsS0FXSndQLEdBVkZtTCxFQUNJNVMsR0FBUTNkLENBQUssR0FDYjRWLEVBQVEyYSxFQUFVaFksTUFBTyxnQkFBaUJpWCxFQUFRLEVBRWpEYyxFQUFXdlUsVUFDWnNVLEVBQVF0VSxRQUNSc1UsRUFBUXRVLFNBQVcsS0FBT3VVLEVBQVd2VSxRQUVyQ3NVLEVBQVF0VSxRQUFVdVUsRUFBV3ZVLFNBRXhCLElBQUkxSCxFQUFLZ2MsRUFBU0UsQ0FBUyxHQUNwQ2p1QixFQUFJekksUUFBUW95QixtQkFDWjdHLEVBQUtvTCxTQUFXVCxHQUNoQjVkLEdBRUlnZCxHQUFZN3NCLEdBRFZsSSxFQUFNdTFCLEdBQ2FyYyxNQUFPK2MsQ0FBTyxHQUNuQ3phLEVBQVF3YSxFQUFVLGdCQUFpQix5QkFBeUIsRUFDaEVoMkIsRUFBSWtaLE1BQU1sVixLQUFLZ25CLENBQUksS0FHYmhyQixFQUFNLElBQUk0cUIsRUFBUTFpQixFQUFJNlgsTUFBTSxHQUM5QmtKLEtBQU8sQ0FBQSxFQUNYanBCLEVBQUlrWixNQUFNbFYsS0FBS2duQixDQUFJLEVBQ2J5TCxHQUFZTixHQUFhRixHQUFTOVgsTUFDeENuZSxFQUFJbWUsTUFBUSxDQUFDOFgsRUFBUTlYLE1BQU0sR0FBSXNZLEVBQVMsR0FBSUEsRUFBUyxJQUNyRGxCLEVBQUtyYyxNQUFNbFYsS0FBS2hFLENBQUcsR0FFdkIwc0IsRUFBU3lKLEVBQVlBLEVBQVVoWSxNQUFNLEdBQUsrWCxFQUFXenlCLEdBQ2pFLEtBdkY0QyxDQUcxQjB5QixFQUFZdndCLEVBQ1o0dkIsRUFBWXR0QixFQUFLdEMsRUFBT3NoQixFQUFPMUwsQ0FBTyxFQUN0Q2lhLEVBQWlCdnRCLEVBQUtnZixFQUFNempCLElBQUtrQixFQUFLLEtBQU11aUIsRUFBTzFMLENBQU8sRUFDaEUrWixFQUFLcmMsTUFBTWxWLEtBQUtteUIsQ0FBUyxFQUN6QnpKLEVBQVN5SixFQUFVaFksTUFBTSxHQUNyQm9GLEdBQVEzZCxDQUFLLEdBQ2I0VixFQUFRMmEsRUFBVWhZLE1BQU8sZ0JBQWlCaVgsRUFBUSxDQUNsRSxDQThFQSxDQUNJLElBTVVuckIsRUFOSnlzQixFQUFjM2UsRUFBUSxJQUFNLElBQzVCLENBQUM0ZSxLQUFPQyxHQUFNOUIsRUFBR3J4QixJQUN2QmhELElBQUlvMkIsRUFBUW5LLEVBeUJaLE9BeEJJaUssR0FBTUEsRUFBRzdmLFNBQVc0ZixFQUNwQkcsRUFBUUYsRUFBR2pLLE9BQVNpSyxFQUFHN2YsT0FBTzFXLFFBRXhCNkosRUFBT3FzQixFQUFPLEdBQUdoMkIsWUFBVyxFQUFLZzJCLEVBQU9yaUIsVUFBVSxDQUFDLEVBSXpEdUgsRUFBUWtSLEVBQVFrSixFQUFTLGVBQWlCLGFBSDlCQSxFQUNIM3JCLEVBQUgsb0JBQTJCeXNCLEVBQ3hCenNCLEVBQUgscUVBQTRFeXNCLENBQ3ZCLEVBQ3ZEQyxHQUEyQixJQUFyQkEsRUFBRzdmLE9BQU8xVyxRQUNoQncyQixFQUFHNTBCLFFBQVEyMEIsQ0FBRSxHQUVMLEVBQVpDLEVBQUd4MkIsU0FDR3FELEVBQU0weEIsR0FBV3lCLEVBQUlDLEVBQU8zdUIsRUFBSXpJLFFBQVFzeUIsT0FBUXZXLENBQU8sR0FDckRtRyxVQUNBNFQsRUFBSzVULFFBQ0w0VCxFQUFLNVQsU0FBVyxLQUFPbGUsRUFBSWtlLFFBRTNCNFQsRUFBSzVULFFBQVVsZSxFQUFJa2UsU0FFM0I0VCxFQUFLcFgsTUFBUSxDQUFDMlcsRUFBR3BJLE9BQVFtSyxFQUFPcHpCLEVBQUlpcEIsU0FHcEM2SSxFQUFLcFgsTUFBUSxDQUFDMlcsRUFBR3BJLE9BQVFtSyxFQUFPQSxHQUU3QnRCLENBQ1gsR0NsTTBCRCxFQUFJcHRCLEVBQUt1c0IsRUFBT2paLEVBQVNPLENBQUcsRUFJNUMrYSxFQUFPdkIsRUFBS2p3QixZQVNsQixNQU5nQixNQUFab1csR0FBbUJBLElBQVlvYixFQUFLcGIsUUFDcEM2WixFQUFLeFosSUFBTSthLEVBQUtwYixRQUdoQkEsSUFDQTZaLEVBQUt4WixJQUFNTCxHQUNSNlosQ0FDWCxDRXRCQSxTQUFTd0IsR0FBbUI3dUIsRUFBSzh1QixFQUFReGIsR0FDckMsSUFBTWhZLEVBQVF3ekIsRUFBT3RLLE9BQ2ZwSCxHQXNIVixDQUFnQyxDQUFFb0gsT0FBQUEsRUFBUXhGLE1BQUFBLENBQUssRUFBSTZLLEVBQVF2VyxLQUV2RCxHQUFzQix3QkFBbEIwTCxFQUFNLEdBQUc3UixLQUVULE9BREFtRyxFQUFRMEwsRUFBTSxHQUFJLGFBQWMsK0JBQStCLEVBQ3hELEtBRVgsSUFBUXBRLEVBQVdvUSxFQUFNLEdBQVgsT0FDUjFFLEVBQU8xTCxFQUFPLEdBQ2hCa0wsRUFBUyxFQUNUZ0QsRUFBUSxHQUNSdGQsRUFBUSxDQUFFLEVBQ2QsSUFBS2pILElBQUlJLEVBQUksRUFBR0EsRUFBSWlXLEVBQU8xVyxPQUFRLEVBQUVTLEVBQUcsQ0FDcEMsSUFJVTBMLEVBSkoyUCxFQUFLcEYsRUFBT2pXLEdBQ2Jta0IsR0FBaUIsTUFBUDlJLEdBQXFCLE1BQVBBLEdBR25CM1AsRUFBSS9GLE9BQU8wVixDQUFFLEVBQ2YsQ0FBQzhGLEdBQVV6VixFQUNYeVYsRUFBU3pWLEVBQ00sQ0FBRSxJQUFaN0UsSUFDTEEsRUFBUWdsQixFQUFTN3JCLElBTnJCbWtCLEVBQVE5SSxDQVFwQixDQUNrQixDQUFFLElBQVp4VSxHQUNBOFQsRUFBUTlULEVBQU8sbUJBQW9CLGtEQUFrRG9QLENBQVEsRUFDakdyVyxJQUFJMHpCLEVBQVcsQ0FBQSxFQUNYeFMsRUFBVSxHQUNWdmhCLEVBQVMwVyxFQUFPMVcsT0FDcEIsSUFBS0ssSUFBSUksRUFBSSxFQUFHQSxFQUFJcW1CLEVBQU05bUIsT0FBUSxFQUFFUyxFQUFHLENBQ25DLElBQU00ekIsRUFBUXZOLEVBQU1ybUIsR0FDcEIsT0FBUTR6QixFQUFNcGYsTUFDVixJQUFLLFFBQ0Q4ZSxFQUFXLENBQUEsRUFFZixJQUFLLFVBQ0QvekIsR0FBVXEwQixFQUFNM2QsT0FBTzFXLE9BQ3ZCLE1BQ0osSUFBSyxVQUNHMnhCLEdBQVUsQ0FBQ29DLEdBRVgzWSxFQUFRaVosRUFBTyxlQURDLHdFQUNzQixFQUUxQ3IwQixHQUFVcTBCLEVBQU0zZCxPQUFPMVcsT0FDdkJ1aEIsRUFBVThTLEVBQU0zZCxPQUFPN0MsVUFBVSxDQUFDLEVBQ2xDLE1BQ0osSUFBSyxRQUNEdUgsRUFBUWlaLEVBQU8sbUJBQW9CQSxFQUFNdEIsT0FBTyxFQUNoRC95QixHQUFVcTBCLEVBQU0zZCxPQUFPMVcsT0FDdkIsTUFFSixRQUNJLElBQU0reUIsRUFBVSw0Q0FBNENzQixFQUFNcGYsS0FFNUQ0aEIsR0FETnpiLEVBQVFpWixFQUFPLG1CQUFvQnRCLENBQU8sRUFDL0JzQixFQUFNM2QsUUFDYm1nQixHQUFvQixVQUFkLE9BQU9BLElBQ2I3MkIsR0FBVTYyQixFQUFHNzJCLE9BRWpDLENBQ0EsQ0FDSSxNQUFPLENBQUVvaUIsS0FBQUEsRUFBTVIsT0FBQUEsRUFBUWdELE1BQUFBLEVBQU9yRCxRQUFBQSxFQUFTdmhCLE9BQUFBLENBQVEsQ0FDbkQsR0FsTDBDNDJCLEVBQVE5dUIsRUFBSXpJLFFBQVFzeUIsT0FBUXZXLENBQU8sRUFDekUsR0FBSSxDQUFDOEosRUFDRCxNQUFPLENBQUUxZixNQUFPLEdBQUl5UCxLQUFNLEtBQU1zTSxRQUFTLEdBQUl4RCxNQUFPLENBQUMzYSxFQUFPQSxFQUFPQSxFQUFRLEVBQy9FLElBQU02UixFQUF1QixNQUFoQmlRLEVBQU85QyxLQUFlekksRUFBT3lGLGFBQWV6RixFQUFPMEYsY0FDMURyRCxFQUFRNGEsRUFBT2xnQixRQWdMTEEsSUFDaEIsSUFBTXBVLEVBQVFvVSxFQUFPcFUsTUFBTSxRQUFRLEVBRTdCdEIsR0FBSTgxQixFQURJeDBCLEVBQU0sSUFDSnFJLE1BQU0sT0FBTyxFQUl2QnFSLEVBQVEsQ0FBQythLEVBSEQvMUIsSUFBSSxHQUNaLENBQUNBLEVBQUUsR0FBSTgxQixFQUFNbDJCLE1BQU1JLEVBQUUsR0FBR2hCLE1BQU0sR0FDOUIsQ0FBQyxHQUFJODJCLElBRVgsSUFBS3oyQixJQUFJSSxFQUFJLEVBQUdBLEVBQUk2QixFQUFNdEMsT0FBUVMsR0FBSyxFQUNuQ3ViLEVBQU1wWSxLQUFLLENBQUN0QixFQUFNN0IsR0FBSTZCLEVBQU03QixFQUFJLEdBQUcsRUFDdkMsT0FBT3ViLENBQ1gsR0EzTDZDNGEsRUFBT2xnQixNQUFNLEVBQUksR0FFMURyVyxJQUFJMjJCLEVBQWFoYixFQUFNaGMsT0FDdkIsSUFBS0ssSUFBSUksRUFBSXViLEVBQU1oYyxPQUFTLEVBQVEsR0FBTFMsRUFBUSxFQUFFQSxFQUFHLENBQ3hDLElBQU13MkIsRUFBVWpiLEVBQU12YixHQUFHLEdBQ3pCLEdBQWdCLEtBQVp3MkIsR0FBOEIsT0FBWkEsRUFHbEIsTUFGQUQsRUFBYXYyQixDQUd6QixDQUVJLEdBQW1CLElBQWZ1MkIsRUFBa0IsQ0FDbEIsSUFBTXh4QixFQUF5QixNQUFqQjBmLEVBQU9OLE9BQWdDLEVBQWY1SSxFQUFNaGMsT0FDdEMsS0FBSzRtQixPQUFPcGpCLEtBQUtxYixJQUFJLEVBQUc3QyxFQUFNaGMsT0FBUyxDQUFDLENBQUMsRUFDekMsR0FDRnFELEVBQU1ELEVBQVE4aEIsRUFBT2xsQixPQUd6QixPQUZJNDJCLEVBQU9sZ0IsU0FDUHJULEdBQU91ekIsRUFBT2xnQixPQUFPMVcsUUFDbEIsQ0FBRXdGLE1BQUFBLEVBQU95UCxLQUFBQSxFQUFNc00sUUFBUzJELEVBQU8zRCxRQUFTeEQsTUFBTyxDQUFDM2EsRUFBT0MsRUFBS0EsRUFBTSxDQUNqRixDQUVJaEQsSUFBSTYyQixFQUFhTixFQUFPaFYsT0FBU3NELEVBQU90RCxPQUNwQzBLLEVBQVNzSyxFQUFPdEssT0FBU3BILEVBQU9sbEIsT0FDaENtM0IsRUFBZSxFQUNuQixJQUFLOTJCLElBQUlJLEVBQUksRUFBR0EsRUFBSXUyQixFQUFZLEVBQUV2MkIsRUFBRyxDQUNqQyxHQUFNLENBQUNtaEIsRUFBUXFWLEdBQVdqYixFQUFNdmIsR0FDaEMsR0FBZ0IsS0FBWncyQixHQUE4QixPQUFaQSxFQUlqQixDQUNHclYsRUFBTzVoQixPQUFTazNCLEdBRWhCOWIsRUFBUWtSLEVBQVMxSyxFQUFPNWhCLE9BQVEsZUFEaEIsaUdBQ3VDLEVBRXJDLElBQWxCa2xCLEVBQU90RCxTQUNQc1YsRUFBYXRWLEVBQU81aEIsUUFDeEJtM0IsRUFBZTEyQixFQUNJLElBQWZ5MkIsR0FBcUJwdkIsRUFBSTB0QixRQUV6QnBhLEVBQVFrUixFQUFRLGFBREEscURBQ3FCLEVBRXpDLEtBQ1osQ0FoQmtDLElBQWxCcEgsRUFBT3RELFFBQWdCQSxFQUFPNWhCLE9BQVNrM0IsSUFDdkNBLEVBQWF0VixFQUFPNWhCLFFBZ0I1QnNzQixHQUFVMUssRUFBTzVoQixPQUFTaTNCLEVBQVFqM0IsT0FBUyxDQUNuRCxDQUVJLElBQUtLLElBQUlJLEVBQUl1YixFQUFNaGMsT0FBUyxFQUFHUyxHQUFLdTJCLEVBQVksRUFBRXYyQixFQUMxQ3ViLEVBQU12YixHQUFHLEdBQUdULE9BQVNrM0IsSUFDckJGLEVBQWF2MkIsRUFBSSxHQUV6QkosSUFBSW1GLEVBQVEsR0FDUmpCLEVBQU0sR0FDTjZ5QixFQUFtQixDQUFBLEVBRXZCLElBQUsvMkIsSUFBSUksRUFBSSxFQUFHQSxFQUFJMDJCLEVBQWMsRUFBRTEyQixFQUNoQytFLEdBQVN3VyxFQUFNdmIsR0FBRyxHQUFHRyxNQUFNczJCLENBQVUsRUFBSSxLQUM3QyxJQUFLNzJCLElBQUlJLEVBQUkwMkIsRUFBYzEyQixFQUFJdTJCLEVBQVksRUFBRXYyQixFQUFHLENBQzVDSixHQUFJLENBQUN1aEIsRUFBUXFWLEdBQVdqYixFQUFNdmIsR0FDOUI2ckIsR0FBVTFLLEVBQU81aEIsT0FBU2kzQixFQUFRajNCLE9BQVMsRUFDM0MsSUFLVWdmLEVBTEpxWSxFQUF1QyxPQUFoQ0osRUFBUUEsRUFBUWozQixPQUFTLElBRWxDaTNCLEVBREFJLEVBQ1VKLEVBQVFyMkIsTUFBTSxFQUFHLENBQUEsQ0FBRSxFQUU3QnEyQixJQUFXclYsRUFBTzVoQixPQUFTazNCLElBQ3JCbFksRUFBTWtHLEVBQU90RCxPQUNiLGlDQUNBLGFBRU54RyxFQUFRa1IsRUFBUzJLLEVBQVFqM0IsUUFBVXEzQixFQUFPLEVBQUksR0FBSSxhQURsQywyREFBMkRyWSxDQUNKLEVBQ3ZFNEMsRUFBUyxJQUVUM00sSUFBUzBFLEVBQU8wRixlQUNoQjdaLEdBQVNqQixFQUFNcWQsRUFBT2hoQixNQUFNczJCLENBQVUsRUFBSUQsRUFDMUMxeUIsRUFBTSxNQUVEcWQsRUFBTzVoQixPQUFTazNCLEdBQTZCLE9BQWZELEVBQVEsSUFFL0IsTUFBUjF5QixFQUNBQSxFQUFNLEtBQ0E2eUIsR0FBNEIsT0FBUjd5QixJQUMxQkEsRUFBTSxRQUNWaUIsR0FBU2pCLEVBQU1xZCxFQUFPaGhCLE1BQU1zMkIsQ0FBVSxFQUFJRCxFQUMxQzF5QixFQUFNLEtBQ042eUIsRUFBbUIsQ0FBQSxHQUVGLEtBQVpILEVBRU8sT0FBUjF5QixFQUNBaUIsR0FBUyxLQUVUakIsRUFBTSxNQUdWaUIsR0FBU2pCLEVBQU0weUIsRUFDZjF5QixFQUFNLElBQ042eUIsRUFBbUIsQ0FBQSxFQUUvQixDQUNJLE9BQVFsUyxFQUFPTixPQUNYLElBQUssSUFDRCxNQUNKLElBQUssSUFDRCxJQUFLdmtCLElBQUlJLEVBQUl1MkIsRUFBWXYyQixFQUFJdWIsRUFBTWhjLE9BQVEsRUFBRVMsRUFDekMrRSxHQUFTLEtBQU93VyxFQUFNdmIsR0FBRyxHQUFHRyxNQUFNczJCLENBQVUsRUFDaEIsT0FBNUIxeEIsRUFBTUEsRUFBTXhGLE9BQVMsS0FDckJ3RixHQUFTLE1BQ2IsTUFDSixRQUNJQSxHQUFTLElBQ3JCLENBQ1VuQyxFQUFNRCxFQUFROGhCLEVBQU9sbEIsT0FBUzQyQixFQUFPbGdCLE9BQU8xVyxPQUNsRCxNQUFPLENBQUV3RixNQUFBQSxFQUFPeVAsS0FBQUEsRUFBTXNNLFFBQVMyRCxFQUFPM0QsUUFBU3hELE1BQU8sQ0FBQzNhLEVBQU9DLEVBQUtBLEVBQU0sQ0FDN0UsQ0N0SEEsU0FBU2kwQixHQUFrQlYsRUFBUWpGLEVBQVF2VyxHQUN2QyxHQUFNLENBQUVrUixPQUFBQSxFQUFRclgsS0FBQUEsRUFBTXlCLE9BQUFBLEVBQVFyVCxJQUFBQSxDQUFLLEVBQUd1ekIsRUFDbENqUixFQUNBbmdCLEVBQ0osSUFBTW9uQixFQUFXLENBQUMySyxFQUFLN1QsRUFBTS9jLElBQVF5VSxFQUFRa1IsRUFBU2lMLEVBQUs3VCxFQUFNL2MsQ0FBRyxFQUNwRSxPQUFRc08sR0FDSixJQUFLLFNBQ0QwUSxFQUFRaE0sRUFBTzJGLE1BQ2Y5WixHQTZCWixDQUFvQmtSLEVBQVEwRSxLQUN4Qi9hLElBQUltM0IsRUFBVSxHQUNkLE9BQVE5Z0IsRUFBTyxJQUVYLElBQUssS0FDRDhnQixFQUFVLGtCQUNWLE1BQ0osSUFBSyxJQUNEQSxFQUFVLDZCQUNWLE1BQ0osSUFBSyxJQUNEQSxFQUFVLGtDQUNWLE1BQ0osSUFBSyxJQUNMLElBQUssSUFDREEsRUFBVSwwQkFBMEI5Z0IsRUFBTyxHQUMzQyxNQUVKLElBQUssSUFDTCxJQUFLLElBQ0Q4Z0IsRUFBVSxzQkFBc0I5Z0IsRUFBTyxFQUduRCxDQUdJLE9BRkk4Z0IsR0FDQXBjLEVBQVEsRUFBRyxtQkFBb0IsaUNBQWlDb2MsQ0FBUyxFQUN0RUMsR0FBVS9nQixDQUFNLENBQzNCLEdBeEQrQkEsRUFBUWtXLENBQVEsRUFDbkMsTUFDSixJQUFLLHVCQUNEakgsRUFBUWhNLEVBQU82RixhQUNmaGEsR0FxRFosQ0FBMkJrUixFQUFRMEUsS0FDRyxNQUE5QjFFLEVBQU9BLEVBQU8xVyxPQUFTLElBQWdDLElBQWxCMFcsRUFBTzFXLFFBQzVDb2IsRUFBUTFFLEVBQU8xVyxPQUFRLGVBQWdCLHdCQUF3QixFQUM1RHkzQixHQUFVL2dCLEVBQU85VixNQUFNLEVBQUcsQ0FBRSxDQUFBLENBQUMsRUFBRUMsUUFBUSxNQUFPLEdBQUcsSUF4RHRCNlYsRUFBUWtXLENBQVEsRUFDMUMsTUFDSixJQUFLLHVCQUNEakgsRUFBUWhNLEVBQU80RixhQUNmL1osR0FnR1osQ0FBMkJrUixFQUFRMEUsS0FDL0IvYSxJQUFJcUUsRUFBTSxHQUNWLElBQUtyRSxJQUFJSSxFQUFJLEVBQUdBLEVBQUlpVyxFQUFPMVcsT0FBUyxFQUFHLEVBQUVTLEVBQUcsQ0FDeEMsSUFBTXFiLEVBQUtwRixFQUFPalcsR0FDbEIsR0FBVyxPQUFQcWIsR0FBaUMsT0FBbEJwRixFQUFPalcsRUFBSSxHQUU5QixHQUFXLE9BQVBxYixFQUFhLENBQ2IsR0FBTSxDQUFFbUgsS0FBQUEsRUFBTXFKLE9BQUFBLENBQU0sR0FxRGhDLENBQXFCNVYsRUFBUTRWLEtBQ3pCanNCLElBQUk0aUIsRUFBTyxHQUNQbkgsRUFBS3BGLEVBQU80VixFQUFTLEdBQ3pCLEtBQU94USxFQUFPLE1BQVBBLEdBQXFCLE9BQVBBLEdBQXNCLE9BQVBBLEdBQXNCLE9BQVBBLEdBQ3BDLE9BQVBBLEdBQXNDLE9BQXZCcEYsRUFBTzRWLEVBQVMsS0FFeEIsT0FBUHhRLElBQ0FtSCxHQUFRLE1BQ1pxSixHQUFVLEVBQ1Z4USxFQUFLcEYsRUFBTzRWLEVBQVMsR0FJekIsTUFBTyxDQUFFckosS0FGSkEsRUFBQUEsR0FDTSxJQUNJcUosT0FBQUEsQ0FBUSxDQUMzQixHQW5FaUQ1VixFQUFRalcsQ0FBQyxFQUM5Q2lFLEdBQU91ZSxFQUNQeGlCLEVBQUk2ckIsQ0FDaEIsTUFDYSxHQUFXLE9BQVB4USxFQUFhLENBQ2xCemIsSUFBSWlTLEVBQU9vRSxFQUFPLEVBQUVqVyxHQUNkaTNCLEVBQUtDLEdBQVlybEIsR0FDdkIsR0FBSW9sQixFQUNBaHpCLEdBQU9nekIsT0FDTixHQUFhLE9BQVRwbEIsRUFHTCxJQURBQSxFQUFPb0UsRUFBT2pXLEVBQUksR0FDRixNQUFUNlIsR0FBeUIsT0FBVEEsR0FDbkJBLEVBQU9vRSxFQUFPLEVBQUVqVyxFQUFJLFFBRXZCLEdBQWEsT0FBVDZSLEdBQW1DLE9BQWxCb0UsRUFBT2pXLEVBQUksR0FHakMsSUFEQTZSLEVBQU9vRSxFQUFPLEVBQUVqVyxFQUFJLEdBQ0osTUFBVDZSLEdBQXlCLE9BQVRBLEdBQ25CQSxFQUFPb0UsRUFBTyxFQUFFalcsRUFBSSxPQUVWLE1BQVQ2UixHQUF5QixNQUFUQSxHQUF5QixNQUFUQSxHQUMvQnRTLEVBQVMsQ0FBRUgsRUFBRyxFQUFHKzNCLEVBQUcsRUFBR0MsRUFBRyxDQUFHLEVBQUN2bEIsR0FDcEM1TixJQWlFaEIsQ0FBdUJnUyxFQUFRNFYsRUFBUXRzQixFQUFRb2IsS0FDM0MsSUFBTXNjLEVBQUtoaEIsRUFBTzlULE9BQU8wcEIsRUFBUXRzQixDQUFNLEVBRWpDMGpCLEdBQU9vVSxFQURGSixFQUFHMTNCLFNBQVdBLEdBQVUsaUJBQWlCVyxLQUFLKzJCLENBQUUsR0FDekNqTCxTQUFTaUwsRUFBSSxFQUFFLEVBQUk5TCxJQUNyQyxPQUFJRixNQUFNaEksQ0FBSSxHQUNKcVUsRUFBTXJoQixFQUFPOVQsT0FBTzBwQixFQUFTLEVBQUd0c0IsRUFBUyxDQUFDLEVBQ2hEb2IsRUFBUWtSLEVBQVMsRUFBRyxnQkFBaUIsMkJBQTJCeUwsQ0FBSyxFQUM5REEsR0FFSjV4QixPQUFPNnhCLGNBQWN0VSxDQUFJLENBQ3BDLEdBM0VxQ2hOLEVBQVFqVyxFQUFJLEVBQUdULEVBQVFvYixDQUFPLEVBQ25EM2EsR0FBS1QsSUFHQyszQixFQUFNcmhCLEVBQU85VCxPQUFPbkMsRUFBSSxFQUFHLENBQUMsRUFDbEMyYSxFQUFRM2EsRUFBSSxFQUFHLGdCQUFpQiwyQkFBMkJzM0IsQ0FBSyxFQUNoRXJ6QixHQUFPcXpCLEVBRXZCLE1BQ2EsR0FBVyxNQUFQamMsR0FBcUIsT0FBUEEsRUFBYSxDQUVoQyxJQUFNbWMsRUFBVXgzQixFQUNoQkosSUFBSWlTLEVBQU9vRSxFQUFPalcsRUFBSSxHQUN0QixLQUFnQixNQUFUNlIsR0FBeUIsT0FBVEEsR0FDbkJBLEVBQU9vRSxFQUFPLEVBQUVqVyxFQUFJLEdBQ1gsT0FBVDZSLEdBQTRCLE9BQVRBLEdBQW1DLE9BQWxCb0UsRUFBT2pXLEVBQUksS0FDL0NpRSxHQUFPakUsRUFBSXczQixFQUFVdmhCLEVBQU85VixNQUFNcTNCLEVBQVN4M0IsRUFBSSxDQUFDLEVBQUlxYixFQUNwRSxNQUVZcFgsR0FBT29YLENBRW5CLENBR0ksTUFGa0MsTUFBOUJwRixFQUFPQSxFQUFPMVcsT0FBUyxJQUFnQyxJQUFsQjBXLEVBQU8xVyxRQUM1Q29iLEVBQVExRSxFQUFPMVcsT0FBUSxlQUFnQix3QkFBd0IsRUFDNUQwRSxDQUNYLEdBdkpzQ2dTLEVBQVFrVyxDQUFRLEVBQzFDLE1BRUosUUFFSSxPQURBeFIsRUFBUXdiLEVBQVEsbUJBQW9CLDRDQUE0QzNoQixDQUFNLEVBQy9FLENBQ0h6UCxNQUFPLEdBQ1B5UCxLQUFNLEtBQ05zTSxRQUFTLEdBQ1R4RCxNQUFPLENBQUN1TyxFQUFRQSxFQUFTNVYsRUFBTzFXLE9BQVFzc0IsRUFBUzVWLEVBQU8xVyxPQUMzRCxDQUNiLENBQ0ksSUFBTWs0QixFQUFXNUwsRUFBUzVWLEVBQU8xVyxPQUMzQjBMLEVBQUtxcEIsR0FBVzF4QixFQUFLNjBCLEVBQVV2RyxFQUFRdlcsQ0FBTyxFQUNwRCxNQUFPLENBQ0g1VixNQUFBQSxFQUNBeVAsS0FBTTBRLEVBQ05wRSxRQUFTN1YsRUFBRzZWLFFBQ1p4RCxNQUFPLENBQUN1TyxFQUFRNEwsRUFBVXhzQixFQUFHNGdCLE9BQ2hDLENBQ0wsQ0FrQ0EsU0FBU21MLEdBQVUvZ0IsR0FRZnJXLElBQUl5MkIsRUFBTzFyQixFQUNYLElBQ0kwckIsRUFBUSxJQUFJbHZCLE9BQU8sNkJBQThCLElBQUksRUFDckR3RCxFQUFPLElBQUl4RCxPQUFPLHdDQUF5QyxJQUFJLENBS3ZFLENBSEksTUFDSWt2QixFQUFRLHFCQUNSMXJCLEVBQU8sMEJBQ2YsQ0FDSS9LLElBQUlzSyxFQUFRbXNCLEVBQU05MEIsS0FBSzBVLENBQU0sRUFDN0IsR0FBSSxDQUFDL0wsRUFDRCxPQUFPK0wsRUFDWHJXLElBQUlxRSxFQUFNaUcsRUFBTSxHQUNacEcsRUFBTSxJQUNOdXVCLEVBQU1nRSxFQUFNcUIsVUFFaEIsSUFEQS9zQixFQUFLK3NCLFVBQVlyRixFQUNUbm9CLEVBQVFTLEVBQUtwSixLQUFLMFUsQ0FBTSxHQUNYLEtBQWIvTCxFQUFNLEdBQ00sT0FBUnBHLEVBQ0FHLEdBQU9ILEVBRVBBLEVBQU0sTUFHVkcsR0FBT0gsRUFBTW9HLEVBQU0sR0FDbkJwRyxFQUFNLEtBRVZ1dUIsRUFBTTFuQixFQUFLK3NCLFVBRWYsSUFBTXoyQixFQUFPLGVBR2IsT0FGQUEsRUFBS3kyQixVQUFZckYsRUFDakJub0IsRUFBUWpKLEVBQUtNLEtBQUswVSxDQUFNLEVBQ2pCaFMsRUFBTUgsR0FBT29HLElBQVEsSUFBTSxHQUN0QyxDQTRFQSxJQUFNZ3RCLEdBQWMsQ0FDaEJTLEVBQUssS0FDTDNrQixFQUFHLElBQ0h1ZCxFQUFHLEtBQ0hubEIsRUFBRyxJQUNIekgsRUFBRyxLQUNIK0gsRUFBRyxLQUNIa3NCLEVBQUcsS0FDSGxZLEVBQUcsS0FDSDdRLEVBQUcsS0FDSGdwQixFQUFHLElBQ0h4M0IsRUFBRyxJQUNIeTNCLEVBQUcsU0FDSEMsRUFBRyxTQUNIQyxJQUFLLElBQ0xDLElBQUssSUFDTEMsSUFBSyxJQUNMQyxLQUFNLEtBQ05DLEtBQU0sSUFDVixFQzVNQSxTQUFTQyxHQUFjaHhCLEVBQUt1c0IsRUFBTzBFLEVBQVUzZCxHQUN6QyxHQUFNLENBQUU1VixNQUFBQSxFQUFPeVAsS0FBQUEsRUFBTXNNLFFBQUFBLEVBQVN4RCxNQUFBQSxDQUFPLEVBQWtCLGlCQUFmc1csRUFBTXBmLEtBQ3hDMGhCLEdBQW1CN3VCLEVBQUt1c0IsRUFBT2paLENBQU8sRUFDdENrYyxHQUFrQmpELEVBQU92c0IsRUFBSXpJLFFBQVFzeUIsT0FBUXZXLENBQU8sRUFDcERFLEVBQVV5ZCxFQUNWanhCLEVBQUlxZSxXQUFXN0ssUUFBUXlkLEVBQVNyaUIsT0FBUS9QLEdBQU95VSxFQUFRMmQsRUFBVSxxQkFBc0JweUIsQ0FBRyxDQUFDLEVBQzNGLEtBQ050RyxJQUFJc2IsRUFFQUEsRUFEQTdULEVBQUl6SSxRQUFRdXlCLFlBQWM5cEIsRUFBSTZ0QixNQUN4Qjd0QixFQUFJNlgsT0FBT3RJLEdBRVppRSxHQTRCYixDQUE2QnFFLEVBQVFuYSxFQUFPOFYsRUFBU3lkLEVBQVUzZCxLQUMzRCxHQUFnQixNQUFaRSxFQUFKLENBRUEsSUFDV0ssRUFRQUEsRUFUTHFkLEVBQWdCLEdBQ3RCLElBQVdyZCxLQUFPZ0UsRUFBT2pGLEtBQ3JCLEdBQUksQ0FBQ2lCLEVBQUk0TixZQUFjNU4sRUFBSUEsTUFBUUwsRUFBUyxDQUN4QyxHQUFJSyxDQUFBQSxFQUFJdGEsU0FBV3NhLENBQUFBLEVBQUloYixLQUduQixPQUFPZ2IsRUFGUHFkLEVBQWNwMUIsS0FBSytYLENBQUcsQ0FHdEMsQ0FFSSxJQUFXQSxLQUFPcWQsRUFDZCxHQUFJcmQsRUFBSWhiLE1BQU1BLEtBQUs2RSxDQUFLLEVBQ3BCLE9BQU9tVyxFQUNmLElBQU1zZCxFQUFLdFosRUFBT3lSLFVBQVU5VixHQUM1QixHQUFJMmQsR0FBTSxDQUFDQSxFQUFHMVAsV0FJVixPQURBNUosRUFBT2pGLEtBQUs5VyxLQUFLbkUsT0FBT0MsT0FBTyxHQUFJdTVCLEVBQUksQ0FBRTUzQixRQUFTLENBQUEsRUFBT1YsS0FBTThLLEtBQUFBLENBQVcsQ0FBQSxDQUFDLEVBQ3BFd3RCLEVBRVg3ZCxFQUFRMmQsRUFBVSxxQkFBc0IsbUJBQW1CemQsRUFBdUIsMEJBQVpBLENBQW1DLENBcEJoRixDQXFCekIsT0FBT3FFLEVBQU90SSxFQUNsQixHQW5Ea0N2UCxFQUFJNlgsT0FBUW5hLEVBQU84VixFQUFTeWQsRUFBVTNkLENBQU8sRUFDbkQsV0FBZmlaLEVBQU1wZixNQW1EbkIsQ0FBNkIsQ0FBRTBnQixNQUFBQSxFQUFPeFAsV0FBQUEsRUFBWXhHLE9BQUFBLENBQU0sRUFBSW5hLEVBQU82dUIsRUFBT2paLEtBQ3RFLElBTWN5YixFQU5SbGIsRUFBTWdFLEVBQU9qRixLQUFLMEYsS0FBS3pFLElBQXdCLENBQUEsSUFBaEJBLEVBQUl0YSxTQUFxQnMwQixHQUF5QixRQUFoQmhhLEVBQUl0YSxVQUN2RXNhLEVBQUloYixNQUFNQSxLQUFLNkUsQ0FBSyxDQUFDLEdBQUttYSxFQUFPdEksR0FXckMsT0FWSXNJLEVBQU9vRyxTQUNEQSxFQUFTcEcsRUFBT29HLE9BQU8zRixLQUFLekUsR0FBT0EsRUFBSXRhLFNBQVdzYSxFQUFJaGIsTUFBTUEsS0FBSzZFLENBQUssQ0FBQyxHQUN6RW1hLEVBQU90SSxHQUNQc0UsRUFBSUEsTUFBUW9LLEVBQU9wSyxPQUNia2IsRUFBSzFRLEVBQVd6SyxVQUFVQyxFQUFJQSxHQUFHLEVBQ2pDcU4sRUFBSzdDLEVBQVd6SyxVQUFVcUssRUFBT3BLLEdBQUcsRUFFMUNQLEVBQVFpWixFQUFPLHNEQUQ4QndDLFFBQVM3TixFQUNaLENBQUEsQ0FBSSxHQUcvQ3JOLENBQ1gsR0FoRWtDN1QsRUFBS3RDLEVBQU82dUIsRUFBT2paLENBQU8sRUFFOUN0VCxFQUFJNlgsT0FBT3RJLEdBQ3JCaFgsSUFBSXUyQixFQUNKLElBQ0ksSUFBTWx5QixFQUFNaVgsRUFBSTFaLFFBQVF1RCxFQUFPbUIsR0FBT3lVLEVBQVEyZCxHQUFZMUUsRUFBTyxxQkFBc0IxdEIsQ0FBRyxFQUFHbUIsRUFBSXpJLE9BQU8sRUFDeEd1M0IsRUFBUy9lLEVBQVNuVCxDQUFHLEVBQUlBLEVBQU0sSUFBSWlWLEVBQU9qVixDQUFHLENBTXJELENBSkksTUFBTzRDLEdBQ0dYLEVBQU1XLGFBQWlCSixNQUFRSSxFQUFNeXJCLFFBQVU1c0IsT0FBT21CLENBQUssRUFDakU4VCxFQUFRMmQsR0FBWTFFLEVBQU8scUJBQXNCMXRCLENBQUcsRUFDcERpd0IsRUFBUyxJQUFJamQsRUFBT25VLENBQUssQ0FDakMsQ0FXSSxPQVZBb3hCLEVBQU83WSxNQUFRQSxFQUNmNlksRUFBT2xnQixPQUFTbFIsRUFDWnlQLElBQ0EyaEIsRUFBTzNoQixLQUFPQSxHQUNkcUcsSUFDQXNiLEVBQU9qYixJQUFNTCxHQUNiSyxFQUFJN1YsU0FDSjh3QixFQUFPOXdCLE9BQVM2VixFQUFJN1YsUUFDcEJ5YixJQUNBcVYsRUFBT3JWLFFBQVVBLEdBQ2RxVixDQUNYLENDcENBLElBQU0xQixHQUFLLENBQUVFLFlBQUFBLEdBQWFDLGlCQUFBQSxFQUFrQixFQUM1QyxTQUFTRCxHQUFZdHRCLEVBQUt1c0IsRUFBT3ZOLEVBQU8xTCxHQUNwQyxJQUFNdWEsRUFBUTd0QixFQUFJNnRCLE1BQ1osQ0FBRS9NLFlBQUFBLEVBQWFySCxRQUFBQSxFQUFTaEYsT0FBQUEsRUFBUVosSUFBQUEsQ0FBSyxFQUFHbUwsRUFDOUN6bUIsSUFBSW9YLEVBQ0F5aEIsRUFBYSxDQUFBLEVBQ2pCLE9BQVE3RSxFQUFNcGYsTUFDVixJQUFLLFFBQ0R3QyxHQXdFWixDQUFzQixDQUFFcFksUUFBQUEsR0FBVyxDQUFFaXRCLE9BQUFBLEVBQVE1VixPQUFBQSxFQUFRclQsSUFBQUEsQ0FBSyxFQUFFK1gsS0FDeEQsSUFBTTVMLEVBQVEsSUFBSWlLLEdBQU0vQyxFQUFPN0MsVUFBVSxDQUFDLENBQUMsRUFVM0MsTUFUcUIsS0FBakJyRSxFQUFNa0gsUUFDTjBFLEVBQVFrUixFQUFRLFlBQWEsaUNBQWlDLEVBQzlEOWMsRUFBTWtILE9BQU9vTCxTQUFTLEdBQUcsR0FDekIxRyxFQUFRa1IsRUFBUzVWLEVBQU8xVyxPQUFTLEVBQUcsWUFBYSxpQ0FBa0MsQ0FBQSxDQUFJLEVBQ3JGazRCLEVBQVc1TCxFQUFTNVYsRUFBTzFXLE9BQzNCMEwsRUFBS3FwQixHQUFXMXhCLEVBQUs2MEIsRUFBVTc0QixFQUFRc3lCLE9BQVF2VyxDQUFPLEVBQzVENUwsRUFBTXVPLE1BQVEsQ0FBQ3VPLEVBQVE0TCxFQUFVeHNCLEVBQUc0Z0IsUUFDaEM1Z0IsRUFBRzZWLFVBQ0gvUixFQUFNK1IsUUFBVTdWLEVBQUc2VixTQUNoQi9SLENBQ1gsR0FwRmdDMUgsRUFBS3VzQixFQUFPalosQ0FBTyxHQUNuQ21CLEdBQVVaLElBQ1ZQLEVBQVFpWixFQUFPLGNBQWUsK0NBQStDLEVBQ2pGLE1BQ0osSUFBSyxTQUNMLElBQUssdUJBQ0wsSUFBSyx1QkFDTCxJQUFLLGVBQ0Q1YyxFQUFPcWhCLEdBQWNoeEIsRUFBS3VzQixFQUFPMVksRUFBS1AsQ0FBTyxFQUN6Q21CLElBQ0E5RSxFQUFLOEUsT0FBU0EsRUFBTzdGLE9BQU83QyxVQUFVLENBQUMsR0FDM0MsTUFDSixJQUFLLFlBQ0wsSUFBSyxZQUNMLElBQUssa0JBQ0Q0RCxHTExaLENBQTJCeWQsRUFBSXB0QixFQUFLdXNCLEVBQU92TixFQUFPMUwsS0FDOUMsSUFBTTJkLEVBQVdqUyxFQUFNbkwsSUFDakJMLEVBQVd5ZCxFQUVYanhCLEVBQUlxZSxXQUFXN0ssUUFBUXlkLEVBQVNyaUIsT0FBUS9QLEdBQU95VSxFQUFRMmQsRUFBVSxxQkFBc0JweUIsQ0FBRyxDQUFDLEVBRDNGLEtBY0F3eUIsR0FaYSxjQUFmOUUsRUFBTXBmLE9BQ0EsQ0FBRXNILE9BQUFBLEVBQVE0WCxpQkFBa0JpRixDQUFJLEVBQUd0UyxFQUNuQ3VTLEVBQVc5YyxHQUFVd2MsRUFDckJ4YyxFQUFPK1AsT0FBU3lNLEVBQVN6TSxPQUNyQi9QLEVBQ0F3YyxFQUNIeGMsR0FBVXdjLEtBQ0EsQ0FBQ0ssR0FBTUEsRUFBRzlNLE9BQVMrTSxFQUFTL00sU0FFekNsUixFQUFRaWUsRUFBVSxlQURGLDRDQUN5QixFQUdsQixjQUFmaEYsRUFBTXBmLE1BRUQsY0FBZm9mLEVBQU1wZixNQUVxQixNQUF2Qm9mLEVBQU1qeEIsTUFBTXNULE9BQ1IsTUFDQSxPQUdkLEdBQUksQ0FBQ3FpQixHQUNELENBQUN6ZCxHQUNXLE1BQVpBLEdBQ0NBLElBQVlrUCxFQUFRbFAsU0FBdUIsT0FBWjZkLEdBQy9CN2QsSUFBWTRQLEVBQVE1UCxTQUF1QixPQUFaNmQsRUFDaEMsT0FBT2xFLEdBQWtCQyxFQUFJcHRCLEVBQUt1c0IsRUFBT2paLEVBQVNFLENBQU8sRUFFN0RqYixJQUFJc2IsRUFBTTdULEVBQUk2WCxPQUFPakYsS0FBSzBGLEtBQUtELEdBQUtBLEVBQUV4RSxNQUFRTCxHQUFXNkUsRUFBRW9KLGFBQWU0UCxDQUFPLEVBQ2pGLEdBQUksQ0FBQ3hkLEVBQUssQ0FDTixJQUFNc2QsRUFBS254QixFQUFJNlgsT0FBT3lSLFVBQVU5VixHQUNoQyxHQUFJMmQsQ0FBQUEsR0FBTUEsRUFBRzFQLGFBQWU0UCxFQVd4QixPQU5JRixHQUFJMVAsV0FDSm5PLEVBQVEyZCxFQUFVLHlCQUEwQkUsRUFBR3RkLGdCQUFnQndkLDZCQUFtQ0YsRUFBRzFQLFdBQWMsQ0FBQSxDQUFJLEVBR3ZIbk8sRUFBUTJkLEVBQVUscUJBQXNCLG1CQUFtQnpkLEVBQVcsQ0FBQSxDQUFJLEVBRXZFMlosR0FBa0JDLEVBQUlwdEIsRUFBS3VzQixFQUFPalosRUFBU0UsQ0FBTyxFQVZ6RHhULEVBQUk2WCxPQUFPakYsS0FBSzlXLEtBQUtuRSxPQUFPQyxPQUFPLEdBQUl1NUIsRUFBSSxDQUFFNTNCLFFBQVMsQ0FBQSxDQUFPLENBQUEsQ0FBQyxFQUM5RHNhLEVBQU1zZCxDQVdsQixDQVVJLE9BVE05RCxFQUFPRixHQUFrQkMsRUFBSXB0QixFQUFLdXNCLEVBQU9qWixFQUFTRSxFQUFTSyxDQUFHLEVBQzlEalgsRUFBTWlYLEVBQUkxWixVQUFVa3pCLEVBQU14dUIsR0FBT3lVLEVBQVEyZCxFQUFVLHFCQUFzQnB5QixDQUFHLEVBQUdtQixFQUFJekksT0FBTyxHQUFLODFCLEdBQy9GMWQsRUFBT08sRUFBT3RULENBQUcsRUFDakJBLEVBQ0EsSUFBSWlWLEVBQU9qVixDQUFHLEdBQ2ZxWixNQUFRb1gsRUFBS3BYLE1BQ2xCdEcsRUFBS2tFLElBQU1MLEVBQ1BLLEdBQUs3VixTQUNMMlIsRUFBSzNSLE9BQVM2VixFQUFJN1YsUUFDZjJSLENBQ1gsR0t2RHFDeWQsR0FBSXB0QixFQUFLdXNCLEVBQU92TixFQUFPMUwsQ0FBTyxFQUNuRG1CLElBQ0E5RSxFQUFLOEUsT0FBU0EsRUFBTzdGLE9BQU83QyxVQUFVLENBQUMsR0FDM0MsTUFDSixRQUlJdUgsRUFBUWlaLEVBQU8sbUJBSGdCLFVBQWZBLEVBQU1wZixLQUNoQm9mLEVBQU10QixvQ0FDc0JzQixFQUFNcGYsT0FDRSxFQUMxQ3dDLEVBQU80ZCxHQUFpQnZ0QixFQUFLdXNCLEVBQU0vSCxPQUFRN2dCLEtBQUFBLEVBQVcsS0FBTXFiLEVBQU8xTCxDQUFPLEVBQzFFOGQsRUFBYSxDQUFBLENBRXpCLENBc0JJLE9BckJJM2MsR0FBMEIsS0FBaEI5RSxFQUFLOEUsUUFDZm5CLEVBQVFtQixFQUFRLFlBQWEsa0NBQWtDLEVBQy9Eb1osR0FDQTd0QixFQUFJekksUUFBUXV5QixhQUNYLENBQUMvWixFQUFTSixDQUFJLEdBQ1csVUFBdEIsT0FBT0EsRUFBS2pTLE9BQ1hpUyxFQUFLa0UsS0FBb0IsMEJBQWJsRSxFQUFLa0UsTUFFdEJQLEVBQVFPLEdBQU8wWSxFQUFPLGlCQURWLDJDQUMrQixFQUUzQ3pMLElBQ0FuUixFQUFLbVIsWUFBYyxDQUFBLEdBQ25CckgsSUFDbUIsV0FBZjhTLEVBQU1wZixNQUFzQyxLQUFqQm9mLEVBQU0zZCxPQUNqQ2UsRUFBSzhKLFFBQVVBLEVBRWY5SixFQUFLNkosY0FBZ0JDLEdBR3pCelosRUFBSXpJLFFBQVFveUIsa0JBQW9CeUgsSUFDaEN6aEIsRUFBS3VlLFNBQVczQixHQUNiNWMsQ0FDWCxDQUNBLFNBQVM0ZCxHQUFpQnZ0QixFQUFLd2tCLEVBQVFnTixFQUFReEcsRUFBSyxDQUFFbEssWUFBQUEsRUFBYXJILFFBQUFBLEVBQVNoRixPQUFBQSxFQUFRWixJQUFBQSxFQUFLdFksSUFBQUEsQ0FBRyxFQUFJK1gsR0FPdEYzRCxFQUFPcWhCLEdBQWNoeEIsRUFOYixDQUNWbU4sS0FBTSxTQUNOcVgsUUNyRVIsQ0FBNkJBLEVBQVFnTixFQUFReEcsS0FDekMsR0FBSXdHLEVBR0EsSUFBS2o1QixJQUFJSSxHQURMcXlCLEVBRFEsT0FBUkEsRUFDTXdHLEVBQU90NUIsT0FDSjh5QixHQUFNLEVBQVEsR0FBTHJ5QixFQUFRLEVBQUVBLEVBQUcsQ0FDL0JKLElBQUltMEIsRUFBSzhFLEVBQU83NEIsR0FDaEIsT0FBUSt6QixFQUFHdmYsTUFDUCxJQUFLLFFBQ0wsSUFBSyxVQUNMLElBQUssVUFDRHFYLEdBQVVrSSxFQUFHOWQsT0FBTzFXLE9BQ3BCLFFBQ3BCLENBSVksSUFEQXcwQixFQUFLOEUsRUFBTyxFQUFFNzRCLEdBQ00sVUFBYit6QixHQUFJdmYsTUFDUHFYLEdBQVVrSSxFQUFHOWQsT0FBTzFXLE9BQ3BCdzBCLEVBQUs4RSxFQUFPLEVBQUU3NEIsR0FFbEIsS0FDWixDQUVJLE9BQU82ckIsQ0FDWCxHRDZDb0NBLEVBQVFnTixFQUFReEcsQ0FBRyxFQUMvQ2xSLE9BQVEsQ0FBRSxFQUNWbEwsT0FBUSxFQUNYLEVBQ3NDaUYsRUFBS1AsQ0FBTyxFQVluRCxPQVhJbUIsSUFDQTlFLEVBQUs4RSxPQUFTQSxFQUFPN0YsT0FBTzdDLFVBQVUsQ0FBQyxFQUNuQixLQUFoQjRELEVBQUs4RSxTQUNMbkIsRUFBUW1CLEVBQVEsWUFBYSxrQ0FBa0MsRUFFbkVxTSxJQUNBblIsRUFBS21SLFlBQWMsQ0FBQSxHQUNuQnJILElBQ0E5SixFQUFLOEosUUFBVUEsRUFDZjlKLEVBQUtzRyxNQUFNLEdBQUsxYSxHQUVib1UsQ0FDWCxDRS9FQSxTQUFTOGhCLEdBQVl2YSxHQUNqQixJQUlnQnRJLEVBSmhCLE1BQW1CLFVBQWYsT0FBT3NJLEVBQ0EsQ0FBQ0EsRUFBS0EsRUFBTSxHQUNuQjFmLE1BQU1DLFFBQVF5ZixDQUFHLEVBQ0ssSUFBZkEsRUFBSWhmLE9BQWVnZixFQUFNLENBQUNBLEVBQUksR0FBSUEsRUFBSSxLQUMzQyxDQUFFc04sT0FBQUEsRUFBUTVWLE9BQUFBLENBQU0sRUFBS3NJLEVBQ3BCLENBQUNzTixFQUFRQSxHQUE0QixVQUFsQixPQUFPNVYsRUFBc0JBLEVBQU8xVyxPQUFTLElBQzNFLENBQ0EsU0FBU3c1QixHQUFhQyxHQUNsQnA1QixJQUFJa2hCLEVBQVUsR0FDVm1ZLEVBQVksQ0FBQSxFQUNaQyxFQUFpQixDQUFBLEVBQ3JCLElBQUt0NUIsSUFBSUksRUFBSSxFQUFHQSxFQUFJZzVCLEVBQVF6NUIsT0FBUSxFQUFFUyxFQUFHLENBQ3JDLElBQU1pVyxFQUFTK2lCLEVBQVFoNUIsR0FDdkIsT0FBUWlXLEVBQU8sSUFDWCxJQUFLLElBQ0Q2SyxJQUNpQixLQUFaQSxFQUFpQixHQUFLb1ksRUFBaUIsT0FBUyxPQUM1Q2pqQixFQUFPN0MsVUFBVSxDQUFDLEdBQUssS0FDaEM2bEIsRUFBWSxDQUFBLEVBQ1pDLEVBQWlCLENBQUEsRUFDakIsTUFDSixJQUFLLElBQzJCLE1BQXhCRixFQUFRaDVCLEVBQUksS0FBSyxLQUNqQkEsR0FBSyxHQUNUaTVCLEVBQVksQ0FBQSxFQUNaLE1BQ0osUUFFU0EsSUFDREMsRUFBaUIsQ0FBQSxHQUNyQkQsRUFBWSxDQUFBLENBQzVCLENBQ0EsQ0FDSSxNQUFPLENBQUVuWSxRQUFBQSxFQUFTb1ksZUFBQUEsQ0FBZ0IsQ0FDdEMsT0FZTUMsR0FDRjEwQixZQUFZN0YsRUFBVSxJQUNsQjBILEtBQUtnVixJQUFNLEtBQ1hoVixLQUFLOHlCLGFBQWUsQ0FBQSxFQUNwQjl5QixLQUFLMHlCLFFBQVUsR0FDZjF5QixLQUFLdXFCLE9BQVMsR0FDZHZxQixLQUFLd3FCLFNBQVcsR0FDaEJ4cUIsS0FBS3FVLFFBQVUsQ0FBQzFFLEVBQVFnTixFQUFNcVAsRUFBUzVMLEtBQzdCMkwsRUFBTXlHLEdBQVk3aUIsQ0FBTSxFQUMxQnlRLEVBQ0FwZ0IsS0FBS3dxQixTQUFTM3RCLEtBQUssSUFBSXF2QixHQUFZSCxFQUFLcFAsRUFBTXFQLENBQU8sQ0FBQyxFQUV0RGhzQixLQUFLdXFCLE9BQU8xdEIsS0FBSyxJQUFJb3ZCLEdBQWVGLEVBQUtwUCxFQUFNcVAsQ0FBTyxDQUFDLENBQzlELEVBRURoc0IsS0FBS29mLFdBQWEsSUFBSTNMLEVBQVcsQ0FBRVMsUUFBUzViLEVBQVE0YixTQUFXLE1BQU8sRUFDdEVsVSxLQUFLMUgsUUFBVUEsQ0FDdkIsQ0FDSXk2QixTQUFTL2QsRUFBS2dlLEdBQ1YsR0FBTSxDQUFFeFksUUFBQUEsRUFBU29ZLGVBQUFBLENBQWMsRUFBS0gsR0FBYXp5QixLQUFLMHlCLE9BQU8sRUFFN0QsR0FBSWxZLEVBQVMsQ0FDVCxJQUFNcVIsRUFBSzdXLEVBQUl0RCxTQUNmLEdBQUlzaEIsRUFDQWhlLEVBQUl3RixRQUFVeEYsRUFBSXdGLFFBQWF4RixFQUFJd0Y7RUFBWUEsRUFBWUEsT0FFMUQsR0FBSW9ZLEdBQWtCNWQsRUFBSW9LLFdBQVd4TCxVQUFZLENBQUNpWSxFQUNuRDdXLEVBQUl1RixjQUFnQkMsT0FFbkIsR0FBSXhKLEVBQWE2YSxDQUFFLEdBQUssQ0FBQ0EsRUFBRy9KLE1BQTBCLEVBQWxCK0osRUFBRzlaLE1BQU05WSxPQUFZLENBQzFESyxJQUFJd2dCLEVBQUsrUixFQUFHOVosTUFBTSxHQUdad2IsR0FERnpULEVBREFqSixFQUFPaUosQ0FBRSxFQUNKQSxFQUFHblcsSUFDRG1XLEdBQUdTLGNBQ2RULEVBQUdTLGNBQWdCZ1QsRUFBUS9TO0VBQVkrUyxFQUFPL1MsQ0FDOUQsS0FDaUIsQ0FDSytTLEVBQUsxQixFQUFHdFIsY0FDZHNSLEVBQUd0UixjQUFnQmdULEVBQVEvUztFQUFZK1MsRUFBTy9TLENBQzlELENBQ0EsQ0FDWXdZLEdBQ0F6NkIsTUFBTXVELFVBQVVlLEtBQUtrRCxNQUFNaVYsRUFBSXVWLE9BQVF2cUIsS0FBS3VxQixNQUFNLEVBQ2xEaHlCLE1BQU11RCxVQUFVZSxLQUFLa0QsTUFBTWlWLEVBQUl3VixTQUFVeHFCLEtBQUt3cUIsUUFBUSxJQUd0RHhWLEVBQUl1VixPQUFTdnFCLEtBQUt1cUIsT0FDbEJ2VixFQUFJd1YsU0FBV3hxQixLQUFLd3FCLFVBRXhCeHFCLEtBQUsweUIsUUFBVSxHQUNmMXlCLEtBQUt1cUIsT0FBUyxHQUNkdnFCLEtBQUt3cUIsU0FBVyxFQUN4QixDQU1JeUksYUFDSSxNQUFPLENBQ0h6WSxRQUFTaVksR0FBYXp5QixLQUFLMHlCLE9BQU8sRUFBRWxZLFFBQ3BDNEUsV0FBWXBmLEtBQUtvZixXQUNqQm1MLE9BQVF2cUIsS0FBS3VxQixPQUNiQyxTQUFVeHFCLEtBQUt3cUIsUUFDbEIsQ0FDVCxDQU9JMEksU0FBU3ZHLEVBQVF3RyxFQUFXLENBQUEsRUFBT0MsRUFBWSxDQUFBLEdBQzNDLElBQUssSUFBTTlGLEtBQVNYLEVBQ2hCMEcsTUFBT3J6QixLQUFLdUwsS0FBSytoQixDQUFLLEVBQzFCK0YsTUFBT3J6QixLQUFLMUQsSUFBSTYyQixFQUFVQyxDQUFTLENBQzNDLENBRUk3bkIsTUFBTStoQixHQUNGLE9BQVFBLEVBQU1wZixNQUNWLElBQUssWUFDRGxPLEtBQUtvZixXQUFXblksSUFBSXFtQixFQUFNM2QsT0FBUSxDQUFDNFYsRUFBUXlHLEVBQVM1TCxLQUNoRCxJQUFNMkwsRUFBTXlHLEdBQVlsRixDQUFLLEVBQzdCdkIsRUFBSSxJQUFNeEcsRUFDVnZsQixLQUFLcVUsUUFBUTBYLEVBQUssZ0JBQWlCQyxFQUFTNUwsQ0FBTyxDQUN2RSxDQUFpQixFQUNEcGdCLEtBQUsweUIsUUFBUTcxQixLQUFLeXdCLEVBQU0zZCxNQUFNLEVBQzlCM1AsS0FBSzh5QixhQUFlLENBQUEsRUFDcEIsTUFDSixJQUFLLFdBQ1dRLENDM0lSaDdCLEVBQVM4bUIsRUFBWSxDQUFFbUcsT0FBQUEsRUFBUWxwQixNQUFBQSxFQUFPb0MsTUFBQUEsRUFBT25DLElBQUFBLENBQUssRUFBRStYLEdEMkk1Q2lmLENBQVd0ekIsS0FBSzFILFFBQVMwSCxLQUFLb2YsV0FBWWtPLEVBQU90dEIsS0FBS3FVLFNDMUl4RXZULEVBQU9wSSxPQUFPQyxPQUFPLENBQUVveUIsWUFBYTNMLENBQVksRUFBRTltQixDQUFPLEVBRXpEeUksRUFBTSxDQUNSNnRCLE1BQU8sQ0FBQSxFQUNQSCxPQUFRLENBQUEsRUFDUnJQLFlBQVlwSyxFQUpKLElBQUlzVixHQUFTNWxCLEtBQUFBLEVBQVc1RCxDQUFJLEdBSXBCc2UsV0FDaEI5bUIsUUFBUzBjLEVBQUkxYyxRQUNic2dCLE9BQVE1RCxFQUFJNEQsTUFDZixHQUNLbUgsRUFBUTJNLEdBQWFyd0IsRUFBTyxDQUM5QnV3QixVQUFXLFlBQ1hyaEIsS0FBTTlNLEdBQVNuQyxJQUFNLEdBQ3JCaXBCLE9BQUFBLEVBQ0FsUixRQUFBQSxFQUNBd1ksYUFBYyxFQUNkQyxlQUFnQixDQUFBLENBQ3hCLENBQUssR0FDU3ZWLFFBQ052QyxFQUFJb0ssV0FBV3hMLFNBQVcsQ0FBQSxFQUN0Qm5WLENBQUFBLEdBQ2dCLGNBQWZBLEVBQU15UCxNQUF1QyxjQUFmelAsRUFBTXlQLE1BQ3BDNlIsRUFBTXFDLFlBQ1AvTixFQUFRMEwsRUFBTXpqQixJQUFLLGVBQWdCLHVFQUF1RSxHQUdsSDBZLEVBQUl0RCxTQUFXalQsRUFDVDR2QixHQUFZdHRCLEVBQUt0QyxFQUFPc2hCLEVBQU8xTCxDQUFPLEVBQ3RDaWEsR0FBaUJ2dEIsRUFBS2dmLEVBQU16akIsSUFBS0QsRUFBTyxLQUFNMGpCLEVBQU8xTCxDQUFPLEVBQzVEa2YsRUFBYXZlLEVBQUl0RCxTQUFTc0YsTUFBTSxJQUVsQ3JTLEVBRE9xcEIsR0FBVzF4QixFQUFLaTNCLEVBQVksQ0FBQSxFQUFPbGYsQ0FBTyxHQUM5Q21HLFVBQ0h4RixFQUFJd0YsUUFBVTdWLEVBQUc2VixTQUNyQnhGLEVBQUlnQyxNQUFRLENBQUN1TyxFQUFRZ08sRUFBWTV1QixFQUFHNGdCLFFEMEdsQnZRLEVDekdYQSxFRDBHU2hWLEtBQUs4eUIsY0FBZ0IsQ0FBQzlkLEVBQUlvSyxXQUFXeEwsVUFDckM1VCxLQUFLcVUsUUFBUWlaLEVBQU8sZUFBZ0IsaURBQWlELEVBQ3pGdHRCLEtBQUsreUIsU0FBUy9kLEVBQUssQ0FBQSxDQUFLLEVBQ3BCaFYsS0FBS2dWLE1BQ0xxZSxNQUFNcnpCLEtBQUtnVixLQUNmaFYsS0FBS2dWLElBQU1BLEVBQ1hoVixLQUFLOHlCLGFBQWUsQ0FBQSxFQUNwQixNQUVKLElBQUssa0JBQ0wsSUFBSyxRQUNELE1BQ0osSUFBSyxVQUNMLElBQUssVUFDRDl5QixLQUFLMHlCLFFBQVE3MUIsS0FBS3l3QixFQUFNM2QsTUFBTSxFQUM5QixNQUNKLElBQUssUUFDSy9QLEVBQU0wdEIsRUFBTTNkLE9BQ1QyZCxFQUFNdEIsUUFBVCxLQUFxQjFzQixLQUFLQyxVQUFVK3RCLEVBQU0zZCxNQUFNLEVBQ2hEMmQsRUFBTXRCLFFBQ056ckIsRUFBUSxJQUFJMHJCLEdBQWV1RyxHQUFZbEYsQ0FBSyxFQUFHLG1CQUFvQjF0QixDQUFHLEdBQ3hFSSxLQUFLOHlCLGNBQWdCLENBQUM5eUIsS0FBS2dWLElBQzNCaFYsS0FFQUEsS0FBS2dWLEtBRkF1VixPQUFPMXRCLEtBQUswRCxDQUFLLEVBRzFCLE1BRUosSUFBSyxVQUNJUCxLQUFLZ1YsS0FLVmhWLEtBQUtnVixJQUFJb0ssV0FBV3ZMLE9BQVMsQ0FBQSxFQUN2QnZYLEVBQU0weEIsR0FBV1YsRUFBTWh4QixJQUFLZ3hCLEVBQU0vSCxPQUFTK0gsRUFBTTNkLE9BQU8xVyxPQUFRK0csS0FBS2dWLElBQUkxYyxRQUFRc3lCLE9BQVE1cUIsS0FBS3FVLE9BQU8sRUFDM0dyVSxLQUFLK3lCLFNBQVMveUIsS0FBS2dWLElBQUssQ0FBQSxDQUFJLEVBQ3hCMVksRUFBSWtlLFVBQ0VxUixFQUFLN3JCLEtBQUtnVixJQUFJd0YsUUFDcEJ4YSxLQUFLZ1YsSUFBSXdGLFFBQVVxUixFQUFRQTtFQUFPdnZCLEVBQUlrZSxRQUFZbGUsRUFBSWtlLFNBRTFEeGEsS0FBS2dWLElBQUlnQyxNQUFNLEdBQUsxYSxFQUFJaXBCLFFBVnBCdmxCLEtBQUt1cUIsT0FBTzF0QixLQUFLLElBQUlvdkIsR0FBZXVHLEdBQVlsRixDQUFLLEVBQUcsbUJBRDVDLCtDQUNtRSxDQUFDLEVBV3BGLE1BRUosUUFDSXR0QixLQUFLdXFCLE9BQU8xdEIsS0FBSyxJQUFJb3ZCLEdBQWV1RyxHQUFZbEYsQ0FBSyxFQUFHLG1CQUFvQixxQkFBcUJBLEVBQU1wZixJQUFNLENBQUMsQ0FDOUgsQ0N6TEEsSUFBb0I1VixFQUFTOG1CLEVBQWNtRyxFQUFRbHBCLEVBQU9vQyxFQUFPbkMsRUFBTytYLEVBVTlEMEwsQ0RnTFYsQ0FPSXpqQixLQUFLNjJCLEVBQVcsQ0FBQSxFQUFPQyxFQUFZLENBQUEsR0FDM0JwekIsS0FBS2dWLEtBQ0xoVixLQUFLK3lCLFNBQVMveUIsS0FBS2dWLElBQUssQ0FBQSxDQUFJLEVBQzVCcWUsTUFBTXJ6QixLQUFLZ1YsSUFDWGhWLEtBQUtnVixJQUFNLE1BRU5tZSxJQUNDcnlCLEVBQU9wSSxPQUFPQyxPQUFPLENBQUVveUIsWUFBYS9xQixLQUFLb2YsVUFBVSxFQUFJcGYsS0FBSzFILE9BQU8sRUFDbkUwYyxFQUFNLElBQUlzVixHQUFTNWxCLEtBQUFBLEVBQVc1RCxDQUFJLEVBQ3BDZCxLQUFLOHlCLGNBQ0w5eUIsS0FBS3FVLFFBQVErZSxFQUFXLGVBQWdCLHVDQUF1QyxFQUNuRnBlLEVBQUlnQyxNQUFRLENBQUMsRUFBR29jLEVBQVdBLEdBQzNCcHpCLEtBQUsreUIsU0FBUy9kLEVBQUssQ0FBQSxDQUFLLEVBQ3hCcWUsTUFBTXJlLEVBRWxCLENBQ0EsQ0V6REEsU0FBU3dlLEdBQW1CelQsRUFBT3pqQixHQUMvQixHQUFJQSxFQUNBLElBQUssSUFBTW14QixLQUFNbnhCLEVBQ2IsT0FBUW14QixFQUFHdmYsTUFDUCxJQUFLLFFBQ0wsSUFBSyxVQUNENlIsRUFBTWxqQixLQUFLNHdCLENBQUUsRUFDYixNQUNKLElBQUssVUFFRCxPQURBMU4sRUFBTWxqQixLQUFLNHdCLENBQUUsRUFDTixDQUMzQixDQUVBLENBQ0EsU0FBU2dHLEdBQW1CbkcsRUFBTzNkLEVBQVF6QixHQUN2QyxPQUFRb2YsRUFBTXBmLE1BQ1YsSUFBSyxTQUNMLElBQUssdUJBQ0wsSUFBSyx1QkFDRG9mLEVBQU1wZixLQUFPQSxFQUNib2YsRUFBTTNkLE9BQVNBLEVBQ2YsTUFDSixJQUFLLGVBQWdCLENBQ2pCLElBSVcrakIsRUFKTHAzQixFQUFNZ3hCLEVBQU12TixNQUFNbG1CLE1BQU0sQ0FBQyxFQUMvQlAsSUFBSXE2QixFQUFLaGtCLEVBQU8xVyxPQUNZLHdCQUF4QnEwQixFQUFNdk4sTUFBTSxHQUFHN1IsT0FDZnlsQixHQUFNckcsRUFBTXZOLE1BQU0sR0FBR3BRLE9BQU8xVyxRQUNoQyxJQUFXeTZCLEtBQU9wM0IsRUFDZG8zQixFQUFJbk8sUUFBVW9PLEVBQ2xCLE9BQU9yRyxFQUFNdk4sTUFDYnJuQixPQUFPQyxPQUFPMjBCLEVBQU8sQ0FBRXBmLEtBQUFBLEVBQU15QixPQUFBQSxFQUFRclQsSUFBQUEsRUFBSyxFQUMxQyxLQUNaLENBQ1EsSUFBSyxZQUNMLElBQUssWUFFSysxQixFQUFLLENBQUVua0IsS0FBTSxVQUFXcVgsT0FEZitILEVBQU0vSCxPQUFTNVYsRUFBTzFXLE9BQ0M0aEIsT0FBUXlTLEVBQU16UyxPQUFRbEwsT0FBUSxJQUFNLEVBQzFFLE9BQU8yZCxFQUFNdmIsTUFDYnJaLE9BQU9DLE9BQU8yMEIsRUFBTyxDQUFFcGYsS0FBQUEsRUFBTXlCLE9BQUFBLEVBQVFyVCxJQUFLLENBQUMrMUIsR0FBSyxFQUNoRCxNQUVKLFFBQ0ksSUFNVzF1QixFQU5Ma1gsRUFBUyxXQUFZeVMsRUFBUUEsRUFBTXpTLE9BQVMsQ0FBRSxFQUM5Q3ZlLEVBQU0sUUFBU2d4QixHQUFTLzBCLE1BQU1DLFFBQVE4MEIsRUFBTWh4QixHQUFHLEVBQy9DZ3hCLEVBQU1oeEIsSUFBSXRELE9BQU95MEIsR0FBa0IsVUFBWkEsRUFBR3ZmLE1BQ1osWUFBWnVmLEVBQUd2ZixNQUNTLFlBQVp1ZixFQUFHdmYsSUFBa0IsRUFDdkIsR0FDTixJQUFXdkssS0FBT2pMLE9BQU8ySixLQUFLaXJCLENBQUssRUFDbkIsU0FBUjNwQixHQUEwQixXQUFSQSxHQUNsQixPQUFPMnBCLEVBQU0zcEIsR0FDckJqTCxPQUFPQyxPQUFPMjBCLEVBQU8sQ0FBRXBmLEtBQUFBLEVBQU0yTSxPQUFBQSxFQUFRbEwsT0FBQUEsRUFBUXJULElBQUFBLEVBQUssQ0FFOUQsQ0FDQSxDQzVNQSxTQUFTczNCLEdBQWV0RyxHQUNwQixPQUFRQSxFQUFNcGYsTUFDVixJQUFLLGVBQWdCLENBQ2pCNVUsSUFBSXFFLEVBQU0sR0FDVixJQUFLLElBQU0rMUIsS0FBT3BHLEVBQU12TixNQUNwQnBpQixHQUFPaTJCLEdBQWVGLENBQUcsRUFDN0IsT0FBTy8xQixFQUFNMnZCLEVBQU0zZCxNQUMvQixDQUNRLElBQUssWUFDTCxJQUFLLFlBQWEsQ0FDZHJXLElBQUlxRSxFQUFNLEdBQ1YsSUFBSyxJQUFNZ2EsS0FBUTJWLEVBQU12YixNQUNyQnBVLEdBQU9rMkIsR0FBY2xjLENBQUksRUFDN0IsT0FBT2hhLENBQ25CLENBQ1EsSUFBSyxrQkFBbUIsQ0FDcEJyRSxJQUFJcUUsRUFBTTJ2QixFQUFNanhCLE1BQU1zVCxPQUN0QixJQUFLLElBQU1nSSxLQUFRMlYsRUFBTXZiLE1BQ3JCcFUsR0FBT2syQixHQUFjbGMsQ0FBSSxFQUM3QixJQUFLLElBQU04VixLQUFNSCxFQUFNaHhCLElBQ25CcUIsR0FBTzh2QixFQUFHOWQsT0FDZCxPQUFPaFMsQ0FDbkIsQ0FDUSxJQUFLLFdBQVksQ0FDYnJFLElBQUlxRSxFQUFNazJCLEdBQWN2RyxDQUFLLEVBQzdCLEdBQUlBLEVBQU1oeEIsSUFDTixJQUFLLElBQU1teEIsS0FBTUgsRUFBTWh4QixJQUNuQnFCLEdBQU84dkIsRUFBRzlkLE9BQ2xCLE9BQU9oUyxDQUNuQixDQUNRLFFBQVMsQ0FDTHJFLElBQUlxRSxFQUFNMnZCLEVBQU0zZCxPQUNoQixHQUFJLFFBQVMyZCxHQUFTQSxFQUFNaHhCLElBQ3hCLElBQUssSUFBTW14QixLQUFNSCxFQUFNaHhCLElBQ25CcUIsR0FBTzh2QixFQUFHOWQsT0FDbEIsT0FBT2hTLENBQ25CLENBQ0EsQ0FDQSxDQUNBLFNBQVNrMkIsR0FBYyxDQUFFeDNCLE1BQUFBLEVBQU9zSCxJQUFBQSxFQUFLbkcsSUFBQUEsRUFBS2lCLE1BQUFBLENBQUssR0FDM0NuRixJQUFJcUUsRUFBTSxHQUNWLElBQUssSUFBTTh2QixLQUFNcHhCLEVBQ2JzQixHQUFPOHZCLEVBQUc5ZCxPQUdkLEdBRkloTSxJQUNBaEcsR0FBT2kyQixHQUFlandCLENBQUcsR0FDekJuRyxFQUNBLElBQUssSUFBTWl3QixLQUFNandCLEVBQ2JHLEdBQU84dkIsRUFBRzlkLE9BR2xCLE9BRklsUixJQUNBZCxHQUFPaTJCLEdBQWVuMUIsQ0FBSyxHQUN4QmQsQ0FDWCxDQzFEQSxJQUFNdVQsR0FBUTlCLE9BQU8sYUFBYSxFQUM1QitCLEdBQU8vQixPQUFPLGVBQWUsRUFDbkMsSUFBTWdDLEdBQVNoQyxPQUFPLGFBQWEsRUE2Qm5DLFNBQVNpQyxHQUFNeWlCLEVBQUt4aUIsR0FDWixTQUFVd2lCLEdBQW9CLGFBQWJBLEVBQUk1bEIsT0FDckI0bEIsRUFBTSxDQUFFejNCLE1BQU95M0IsRUFBSXozQixNQUFPb0MsTUFBT3ExQixFQUFJcjFCLEtBQU8sR0FzQ3BELFNBQVNzMUIsRUFBT3o0QixFQUFNcWMsRUFBTXJHLEdBQ3hCaFksSUFBSXNZLEVBQU9OLEVBQVFxRyxFQUFNcmMsQ0FBSSxFQUM3QixHQUFvQixVQUFoQixPQUFPc1csRUFDUCxPQUFPQSxFQUNYLElBQUssSUFBTW9pQixJQUFTLENBQUMsTUFBTyxTQUFVLENBQ2xDLElBQU0xRyxFQUFRM1YsRUFBS3FjLEdBQ25CLEdBQUkxRyxHQUFTLFVBQVdBLEVBQU8sQ0FDM0IsSUFBS2gwQixJQUFJSSxFQUFJLEVBQUdBLEVBQUk0ekIsRUFBTXZiLE1BQU05WSxPQUFRLEVBQUVTLEVBQUcsQ0FDekMsSUFBTXNZLEVBQUsraEIsRUFBT3I3QixPQUFPaVosT0FBT3JXLEVBQUt3QixPQUFPLENBQUMsQ0FBQ2szQixFQUFPdDZCLEdBQUcsQ0FBQyxFQUFHNHpCLEVBQU12YixNQUFNclksR0FBSTRYLENBQU8sRUFDbkYsR0FBa0IsVUFBZCxPQUFPVSxFQUNQdFksRUFBSXNZLEVBQUssTUFDUixDQUFBLEdBQUlBLElBQU9kLEdBQ1osT0FBT0EsR0FDRmMsSUFBT1osS0FDWmtjLEVBQU12YixNQUFNblgsT0FBT2xCLEVBQUcsQ0FBQyxFQUN2QkEsRUFBQUEsRUFDcEIsQ0FDQSxDQUNnQyxZQUFoQixPQUFPa1ksR0FBaUMsUUFBVm9pQixJQUM5QnBpQixFQUFPQSxFQUFLK0YsRUFBTXJjLENBQUksRUFDdEMsQ0FDQSxDQUNJLE1BQXVCLFlBQWhCLE9BQU9zVyxFQUFzQkEsRUFBSytGLEVBQU1yYyxDQUFJLEVBQUlzVyxDQUMzRCxFQTVEV2xaLE9BQU9pWixPQUFPLEVBQUUsRUFBR21pQixFQUFLeGlCLENBQU8sQ0FDMUMsQ0FLQUQsR0FBTUgsTUFBUUEsR0FFZEcsR0FBTUYsS0FBT0EsR0FFYkUsR0FBTUQsT0FBU0EsR0FFZkMsR0FBTTRpQixXQUFhLENBQUNILEVBQUt4NEIsS0FDckJoQyxJQUFJcWUsRUFBT21jLEVBQ1gsSUFBSyxHQUFNLENBQUNFLEVBQU9oNEIsS0FBVVYsRUFBTSxDQUN6Qm80QixFQUFNL2IsSUFBT3FjLEdBQ25CLEdBQUlOLEVBQUFBLEdBQU8sVUFBV0EsR0FJbEIsT0FIQS9iLEVBQU8rYixFQUFJM2hCLE1BQU0vVixFQUk3QixDQUNJLE9BQU8yYixDQUNYLEVBTUF0RyxHQUFNNmlCLGlCQUFtQixDQUFDSixFQUFLeDRCLEtBQ3JCeVgsRUFBUzFCLEdBQU00aUIsV0FBV0gsRUFBS3g0QixFQUFLekIsTUFBTSxFQUFHLENBQUEsQ0FBRSxDQUFDLEVBQ2hEbTZCLEVBQVExNEIsRUFBS0EsRUFBS3JDLE9BQVMsR0FBRyxHQUM5Qm0xQixFQUFPcmIsSUFBU2loQixHQUN0QixHQUFJNUYsR0FBUSxVQUFXQSxFQUNuQixPQUFPQSxFQUNYLE1BQU0sSUFBSWp1QixNQUFNLDZCQUE2QixDQUNqRCxFQ2pFQSxJQUFNZzBCLEdBQU0sU0FnQ1osU0FBU0MsR0FBVXprQixHQUNmLE9BQVFBLEdBQ0osS0FBS3drQixHQUNELE1BQU8sa0JBQ1gsSUFsQ1MsSUFtQ0wsTUFBTyxXQUNYLElBbENTLElBbUNMLE1BQU8saUJBQ1gsSUFsQ08sSUFtQ0gsTUFBTyxTQUNYLElBQUssTUFDRCxNQUFPLFlBQ1gsSUFBSyxNQUNELE1BQU8sVUFDWCxJQUFLLEdBQ0wsSUFBSyxLQUNMLElBQUssT0FDRCxNQUFPLFVBQ1gsSUFBSyxJQUNELE1BQU8sZUFDWCxJQUFLLElBQ0QsTUFBTyxtQkFDWCxJQUFLLElBQ0QsTUFBTyxnQkFDWCxJQUFLLElBQ0QsTUFBTyxpQkFDWCxJQUFLLElBQ0QsTUFBTyxlQUNYLElBQUssSUFDRCxNQUFPLGlCQUNYLElBQUssSUFDRCxNQUFPLGVBQ1gsSUFBSyxJQUNELE1BQU8sT0FDbkIsQ0FDSSxPQUFReGtCLEVBQU8sSUFDWCxJQUFLLElBQ0wsSUFBSyxLQUNELE1BQU8sUUFDWCxJQUFLLElBQ0QsTUFBTyxVQUNYLElBQUssSUFDRCxNQUFPLGlCQUNYLElBQUssSUFDRCxNQUFPLFFBQ1gsSUFBSyxJQUNELE1BQU8sU0FDWCxJQUFLLElBQ0QsTUFBTyxNQUNYLElBQUssSUFDRCxNQUFPLHVCQUNYLElBQUssSUFDRCxNQUFPLHVCQUNYLElBQUssSUFDTCxJQUFLLElBQ0QsTUFBTyxxQkFDbkIsQ0FDSSxPQUFPLElBQ1gsa0RBeEZpQixhQUVBLFdBRUYsc0JINEJmLFNBQTJCbFIsRUFBTzQxQixHQUM5QixHQUFNLENBQUVsYyxZQUFBQSxFQUFjLENBQUEsRUFBTzBDLE9BQUFBLEVBQVE0RCxPQUFBQSxFQUFTLENBQUEsRUFBTzhHLE9BQUFBLEVBQVMsQ0FBRSxFQUFFclgsS0FBQUEsRUFBTyxPQUFTLEVBQUdtbUIsRUFDL0Uxa0IsRUFBUzZPLEdBQWdCLENBQUV0USxLQUFBQSxFQUFNelAsTUFBQUEsQ0FBSyxFQUFJLENBQzVDMFosWUFBQUEsRUFDQTBDLE9BQWlCLEVBQVRBLEVBQWEsSUFBSWdGLE9BQU9oRixDQUFNLEVBQUksR0FDMUM0RCxPQUFBQSxFQUNBbm1CLFFBQVMsQ0FBRWdsQixXQUFZLENBQUEsRUFBTS9CLFVBQVcsQ0FBRSxDQUFBLENBQ2xELENBQUssRUFDS2pmLEVBQU0rM0IsRUFBUS8zQixLQUFPLENBQ3ZCLENBQUU0UixLQUFNLFVBQVdxWCxPQUFRLENBQUEsRUFBSTFLLE9BQUFBLEVBQVFsTCxPQUFRLElBQUksR0FFdkQsT0FBUUEsRUFBTyxJQUNYLElBQUssSUFDTCxJQUFLLElBQ0QsSUFBTTJrQixFQUFLM2tCLEVBQU8vTSxRQUFRLElBQUksRUFDeEIyeEIsRUFBTzVrQixFQUFPN0MsVUFBVSxFQUFHd25CLENBQUUsRUFDN0IvVixFQUFPNU8sRUFBTzdDLFVBQVV3bkIsRUFBSyxDQUFDLEVBQUksS0FDbEN2VSxFQUFRLENBQ1YsQ0FBRTdSLEtBQU0sc0JBQXVCcVgsT0FBQUEsRUFBUTFLLE9BQUFBLEVBQVFsTCxPQUFRNGtCLENBQUksR0FJL0QsT0FGS2YsR0FBbUJ6VCxFQUFPempCLENBQUcsR0FDOUJ5akIsRUFBTWxqQixLQUFLLENBQUVxUixLQUFNLFVBQVdxWCxPQUFRLENBQUEsRUFBSTFLLE9BQUFBLEVBQVFsTCxPQUFRLEtBQU0sRUFDN0QsQ0FBRXpCLEtBQU0sZUFBZ0JxWCxPQUFBQSxFQUFRMUssT0FBQUEsRUFBUWtGLE1BQUFBLEVBQU9wUSxPQUFRNE8sQ0FBTSxFQUV4RSxJQUFLLElBQ0QsTUFBTyxDQUFFclEsS0FBTSx1QkFBd0JxWCxPQUFBQSxFQUFRMUssT0FBQUEsRUFBUWxMLE9BQUFBLEVBQVFyVCxJQUFBQSxDQUFLLEVBQ3hFLElBQUssSUFDRCxNQUFPLENBQUU0UixLQUFNLHVCQUF3QnFYLE9BQUFBLEVBQVExSyxPQUFBQSxFQUFRbEwsT0FBQUEsRUFBUXJULElBQUFBLENBQUssRUFDeEUsUUFDSSxNQUFPLENBQUU0UixLQUFNLFNBQVVxWCxPQUFBQSxFQUFRMUssT0FBQUEsRUFBUWxMLE9BQUFBLEVBQVFyVCxJQUFBQSxDQUFLLENBQ2xFLENBQ0EsZUd6RHFCLEdBQVcsQ0FBQyxDQUFDZ3hCLEdBQVMsVUFBV0EsV0FFckMsR0FBVyxDQUFDLENBQUNBLElBQ1YsV0FBZkEsRUFBTXBmLE1BQ1kseUJBQWZvZixFQUFNcGYsTUFDUyx5QkFBZm9mLEVBQU1wZixNQUNTLGlCQUFmb2YsRUFBTXBmLGtCQUdkLFNBQXFCb2YsR0FDakIsT0FBUUEsR0FDSixLQUFLNkcsR0FDRCxNQUFPLFFBQ1gsSUFuQlMsSUFvQkwsTUFBTyxRQUNYLElBbkJTLElBb0JMLE1BQU8sYUFDWCxJQW5CTyxJQW9CSCxNQUFPLFdBQ1gsUUFDSSxPQUFPNzBCLEtBQUtDLFVBQVUrdEIsQ0FBSyxDQUN2QyxDQUNBLGtCSDlCQSxTQUF5QkEsRUFBTzFDLEVBQVMsQ0FBQSxFQUFNdlcsR0FDM0MsR0FBSWlaLEVBQU8sQ0FDUCxJQUFNekgsRUFBVyxDQUFDa0csRUFBS3BQLEVBQU1xUCxLQUNuQnpHLEVBQXdCLFVBQWYsT0FBT3dHLEVBQW1CQSxFQUFNeHpCLE1BQU1DLFFBQVF1ekIsQ0FBRyxFQUFJQSxFQUFJLEdBQUtBLEVBQUl4RyxPQUNqRixHQUFJbFIsQ0FBQUEsRUFHQSxNQUFNLElBQUk0WCxHQUFlLENBQUMxRyxFQUFRQSxFQUFTLEdBQUk1SSxFQUFNcVAsQ0FBTyxFQUY1RDNYLEVBQVFrUixFQUFRNUksRUFBTXFQLENBQU8sQ0FHcEMsRUFDRCxPQUFRc0IsRUFBTXBmLE1BQ1YsSUFBSyxTQUNMLElBQUssdUJBQ0wsSUFBSyx1QkFDRCxPQUFPcWlCLEdBQWtCakQsRUFBTzFDLEVBQVEvRSxDQUFRLEVBQ3BELElBQUssZUFDRCxPQUFPK0osR0FBbUIsQ0FBRXQzQixRQUFTLENBQUVzeUIsT0FBQUEsQ0FBTSxDQUFJLEVBQUUwQyxFQUFPekgsQ0FBUSxDQUNsRixDQUNBLENBQ0ksT0FBTyxJQUNYLGlCQStEQSxTQUF3QnlILEVBQU83dUIsRUFBTzQxQixFQUFVLElBQzVDLzZCLEdBQUksQ0FBRWs3QixTQUFBQSxFQUFXLENBQUEsRUFBT3JjLFlBQUFBLEVBQWMsQ0FBQSxFQUFPc0csT0FBQUEsRUFBUyxDQUFBLEVBQU92USxLQUFBQSxDQUFJLEVBQUttbUIsRUFDbEV4WixFQUFTLFdBQVl5UyxFQUFRQSxFQUFNelMsT0FBUyxLQUdoRCxHQUZJMlosR0FBOEIsVUFBbEIsT0FBTzNaLElBQ25CQSxHQUFVLEdBQ1YsQ0FBQzNNLEVBQ0QsT0FBUW9mLEVBQU1wZixNQUNWLElBQUssdUJBQ0RBLEVBQU8sZUFDUCxNQUNKLElBQUssdUJBQ0RBLEVBQU8sZUFDUCxNQUNKLElBQUssZUFDRCxJQUFNaVEsRUFBU21QLEVBQU12TixNQUFNLEdBQzNCLEdBQW9CLHdCQUFoQjVCLEVBQU9qUSxLQUNQLE1BQU0sSUFBSS9OLE1BQU0sNkJBQTZCLEVBQ2pEK04sRUFBNEIsTUFBckJpUSxFQUFPeE8sT0FBTyxHQUFhLGVBQWlCLGdCQUNuRCxNQUVKLFFBQ0l6QixFQUFPLE9BQ3ZCLENBQ0ksSUFBTXlCLEVBQVM2TyxHQUFnQixDQUFFdFEsS0FBQUEsRUFBTXpQLE1BQUFBLENBQUssRUFBSSxDQUM1QzBaLFlBQWFBLEdBQTBCLE9BQVgwQyxFQUM1QkEsT0FBbUIsT0FBWEEsR0FBNEIsRUFBVEEsRUFBYSxJQUFJZ0YsT0FBT2hGLENBQU0sRUFBSSxHQUM3RDRELE9BQUFBLEVBQ0FubUIsUUFBUyxDQUFFZ2xCLFdBQVksQ0FBQSxFQUFNL0IsVUFBVyxDQUFFLENBQUEsQ0FDbEQsQ0FBSyxFQUNELE9BQVE1TCxFQUFPLElBQ1gsSUFBSyxJQUNMLElBQUssSUFDRDhrQixJQVlpQm5ILEVBWkdBLEVBYXRCZ0gsR0FBSzNrQixFQWJ3QkEsR0FhakIvTSxRQUFRLElBQUksRUFDeEIyeEIsRUFBTzVrQixFQUFPN0MsVUFBVSxFQUFHd25CLENBQUUsRUFDN0IvVixFQUFPNU8sRUFBTzdDLFVBQVV3bkIsRUFBSyxDQUFDLEVBQUksS0FDeEMsR0FBbUIsaUJBQWZoSCxFQUFNcGYsS0FBeUIsQ0FDekJpUSxFQUFTbVAsRUFBTXZOLE1BQU0sR0FDM0IsR0FBb0Isd0JBQWhCNUIsRUFBT2pRLEtBQ1AsTUFBTSxJQUFJL04sTUFBTSw2QkFBNkIsRUFDakRnZSxFQUFPeE8sT0FBUzRrQixFQUNoQmpILEVBQU0zZCxPQUFTNE8sQ0FDdkIsS0FDUyxDQUNELElBT1c1YSxFQVBINGhCLEVBQVcrSCxFQUFMLE9BQ1J6UyxFQUFTLFdBQVl5UyxFQUFRQSxFQUFNelMsT0FBUyxDQUFFLEVBQzlDa0YsRUFBUSxDQUNWLENBQUU3UixLQUFNLHNCQUF1QnFYLE9BQUFBLEVBQVExSyxPQUFBQSxFQUFRbEwsT0FBUTRrQixDQUFJLEdBRTFEZixHQUFtQnpULEVBQU8sUUFBU3VOLEVBQVFBLEVBQU1oeEIsSUFBTW9JLEtBQUFBLENBQVMsR0FDakVxYixFQUFNbGpCLEtBQUssQ0FBRXFSLEtBQU0sVUFBV3FYLE9BQVEsQ0FBQSxFQUFJMUssT0FBQUEsRUFBUWxMLE9BQVEsS0FBTSxFQUNwRSxJQUFXaE0sS0FBT2pMLE9BQU8ySixLQUFLaXJCLENBQUssRUFDbkIsU0FBUjNwQixHQUEwQixXQUFSQSxHQUNsQixPQUFPMnBCLEVBQU0zcEIsR0FDckJqTCxPQUFPQyxPQUFPMjBCLEVBQU8sQ0FBRXBmLEtBQU0sZUFBZ0IyTSxPQUFBQSxFQUFRa0YsTUFBQUEsRUFBT3BRLE9BQVE0TyxFQUFNLENBQ2xGLENBbENZLE1BQ0osSUFBSyxJQUNEa1YsR0FBbUJuRyxFQUFPM2QsRUFBUSxzQkFBc0IsRUFDeEQsTUFDSixJQUFLLElBQ0Q4akIsR0FBbUJuRyxFQUFPM2QsRUFBUSxzQkFBc0IsRUFDeEQsTUFDSixRQUNJOGpCLEdBQW1CbkcsRUFBTzNkLEVBQVEsUUFBUSxDQUN0RCxDQUNBLFlDNUhrQixJQUFTLFNBQVVta0IsRUFBTUYsR0FBc0JDLElBQVBDLENBQUcsMEJHK0Q3RCxTQUFTWSxFQUFRM2YsR0FDYixPQUFRQSxHQUNKLEtBQUtyUSxLQUFBQSxFQUNMLElBQUssSUFDTCxJQUFLLEtBQ0wsSUFBSyxLQUNMLElBQUssS0FDRCxNQUFPLENBQUEsRUFDWCxRQUNJLE1BQU8sQ0FBQSxDQUNuQixDQUNBLENBQ0EsSUFBTWl3QixHQUFZLElBQUkvZSxJQUFJLHdCQUF3QixFQUM1Q2dmLEdBQVcsSUFBSWhmLElBQUksbUZBQW1GLEVBQ3RHaWYsR0FBcUIsSUFBSWpmLElBQUksT0FBTyxFQUNwQ2tmLEdBQXFCLElBQUlsZixJQUFJLGNBQWMsRUFDM0NtZixHQUFrQixHQUFRLENBQUNoZ0IsR0FBTStmLEdBQW1CL2UsSUFBSWhCLENBQUUsUUFnQjFEaWdCLEdBQ0Y3MkIsY0FLSTZCLEtBQUtpMUIsTUFBUSxDQUFBLEVBTWJqMUIsS0FBS2sxQixrQkFBb0IsQ0FBRSxFQU0zQmwxQixLQUFLbTFCLGdCQUFrQixDQUFBLEVBRXZCbjFCLEtBQUtvbUIsT0FBUyxHQUtkcG1CLEtBQUtvMUIsUUFBVSxDQUFBLEVBRWZwMUIsS0FBS3ExQixVQUFZLEVBS2pCcjFCLEtBQUtzMUIsV0FBYSxFQUVsQnQxQixLQUFLdTFCLFlBQWMsRUFFbkJ2MUIsS0FBS3cxQixXQUFhLEtBRWxCeDFCLEtBQUt1TCxLQUFPLEtBRVp2TCxLQUFLK3JCLElBQU0sQ0FDbkIsQ0FPSTBKLEtBQUs5bEIsRUFBUStsQixFQUFhLENBQUEsR0FDdEIsR0FBSS9sQixFQUFRLENBQ1IsR0FBc0IsVUFBbEIsT0FBT0EsRUFDUCxNQUFNbFgsVUFBVSx3QkFBd0IsRUFDNUN1SCxLQUFLb21CLE9BQVNwbUIsS0FBS29tQixPQUFTcG1CLEtBQUtvbUIsT0FBU3pXLEVBQVNBLEVBQ25EM1AsS0FBS3cxQixXQUFhLElBQzlCLENBQ1F4MUIsS0FBS2kxQixNQUFRLENBQUNTLEVBQ2RwOEIsSUFBSWlTLEVBQU92TCxLQUFLdUwsTUFBUSxTQUN4QixLQUFPQSxJQUFTbXFCLEdBQWMxMUIsS0FBSzIxQixTQUFTLENBQUMsSUFDekNwcUIsRUFBTzhuQixNQUFPcnpCLEtBQUs0MUIsVUFBVXJxQixDQUFJLENBQzdDLENBQ0lzcUIsWUFDSXY4QixJQUFJSSxFQUFJc0csS0FBSytyQixJQUNUaFgsRUFBSy9VLEtBQUtvbUIsT0FBTzFzQixHQUNyQixLQUFjLE1BQVBxYixHQUFxQixPQUFQQSxHQUNqQkEsRUFBSy9VLEtBQUtvbUIsT0FBTyxFQUFFMXNCLEdBQ3ZCLE1BQUtxYixDQUFBQSxHQUFhLE1BQVBBLEdBQXFCLE9BQVBBLEdBRWQsT0FBUEEsR0FDOEIsT0FBdkIvVSxLQUFLb21CLE9BQU8xc0IsRUFBSSxFQUVuQyxDQUNJUSxPQUFPa0wsR0FDSCxPQUFPcEYsS0FBS29tQixPQUFPcG1CLEtBQUsrckIsSUFBTTNtQixFQUN0QyxDQUNJMHdCLGVBQWV2USxHQUNYanNCLElBQUl5YixFQUFLL1UsS0FBS29tQixPQUFPYixHQUNyQixHQUFzQixFQUFsQnZsQixLQUFLczFCLFdBQWdCLENBQ3JCaDhCLElBQUl1aEIsRUFBUyxFQUNiLEtBQWMsTUFBUDlGLEdBQ0hBLEVBQUsvVSxLQUFLb21CLE9BQU8sRUFBRXZMLEVBQVMwSyxHQUNoQyxHQUFXLE9BQVB4USxFQUFhLENBQ2IsSUFBTXhKLEVBQU92TCxLQUFLb21CLE9BQU92TCxFQUFTMEssRUFBUyxHQUMzQyxHQUFhLE9BQVRoYSxHQUFrQixDQUFDQSxHQUFRLENBQUN2TCxLQUFLaTFCLE1BQ2pDLE9BQU8xUCxFQUFTMUssRUFBUyxDQUM3QyxDQUNZLE1BQWMsT0FBUDlGLEdBQWU4RixHQUFVN2EsS0FBS3MxQixZQUFlLENBQUN2Z0IsR0FBTSxDQUFDL1UsS0FBS2kxQixNQUMzRDFQLEVBQVMxSyxFQUNULENBQUUsQ0FDcEIsQ0FDUSxHQUFXLE1BQVA5RixHQUFxQixNQUFQQSxFQUFZLENBQ3BCZ2hCLEVBQUsvMUIsS0FBS29tQixPQUFPdnFCLE9BQU8wcEIsRUFBUSxDQUFDLEVBQ3ZDLElBQVksUUFBUHdRLEdBQXVCLFFBQVBBLElBQWlCckIsRUFBUTEwQixLQUFLb21CLE9BQU9iLEVBQVMsRUFBRSxFQUNqRSxNQUFPLENBQUUsQ0FDekIsQ0FDUSxPQUFPQSxDQUNmLENBQ0l5USxVQUNJMThCLElBQUlnRCxFQUFNMEQsS0FBS3cxQixXQUtmLE9BSm1CLFVBQWYsT0FBT2w1QixHQUE2QixDQUFFLElBQVZBLEdBQWNBLEVBQU0wRCxLQUFLK3JCLE9BQ3JEenZCLEVBQU0wRCxLQUFLb21CLE9BQU94akIsUUFBUSxLQUFNNUMsS0FBSytyQixHQUFHLEVBQ3hDL3JCLEtBQUt3MUIsV0FBYWw1QixHQUVWLENBQUUsSUFBVkEsRUFDTzBELEtBQUtpMUIsTUFBUWoxQixLQUFLb21CLE9BQU90WixVQUFVOU0sS0FBSytyQixHQUFHLEVBQUksTUFDN0IsT0FBekIvckIsS0FBS29tQixPQUFPOXBCLEVBQU0sSUFDbEJBLEVBQUFBLEVBQ0cwRCxLQUFLb21CLE9BQU90WixVQUFVOU0sS0FBSytyQixJQUFLenZCLENBQUcsRUFDbEQsQ0FDSXE1QixTQUFTdndCLEdBQ0wsT0FBT3BGLEtBQUsrckIsSUFBTTNtQixHQUFLcEYsS0FBS29tQixPQUFPbnRCLE1BQzNDLENBQ0lnOUIsUUFBUUMsR0FLSixPQUpBbDJCLEtBQUtvbUIsT0FBU3BtQixLQUFLb21CLE9BQU90WixVQUFVOU0sS0FBSytyQixHQUFHLEVBQzVDL3JCLEtBQUsrckIsSUFBTSxFQUNYL3JCLEtBQUt3MUIsV0FBYSxLQUNsQngxQixLQUFLdUwsS0FBTzJxQixFQUNMLElBQ2YsQ0FDSUMsS0FBSy93QixHQUNELE9BQU9wRixLQUFLb21CLE9BQU92cUIsT0FBT21FLEtBQUsrckIsSUFBSzNtQixDQUFDLENBQzdDLENBQ0l3d0IsV0FBV3JxQixHQUNQLE9BQVFBLEdBQ0osSUFBSyxTQUNELE9BQU84bkIsTUFBT3J6QixLQUFLbzJCLFlBQWEsRUFDcEMsSUFBSyxhQUNELE9BQU8vQyxNQUFPcnpCLEtBQUtxMkIsZUFBZ0IsRUFDdkMsSUFBSyxjQUNELE9BQU9oRCxNQUFPcnpCLEtBQUtzMkIsZ0JBQWlCLEVBQ3hDLElBQUssTUFDRCxPQUFPakQsTUFBT3J6QixLQUFLdTJCLGNBQWUsRUFDdEMsSUFBSyxPQUNELE9BQU9sRCxNQUFPcnpCLEtBQUt3MkIsb0JBQXFCLEVBQzVDLElBQUssZ0JBQ0QsT0FBT25ELE1BQU9yekIsS0FBS3kyQixrQkFBbUIsRUFDMUMsSUFBSyxlQUNELE9BQU9wRCxNQUFPcnpCLEtBQUswMkIsaUJBQWtCLEVBQ3pDLElBQUssZUFDRCxPQUFPckQsTUFBT3J6QixLQUFLMjJCLGlCQUFrQixDQUNyRCxDQUNBLENBQ0lQLGVBQ0k5OEIsSUFBSStLLEVBQU9yRSxLQUFLZzJCLFFBQVMsRUFDekIsR0FBYSxPQUFUM3hCLEVBQ0EsT0FBT3JFLEtBQUtpMkIsUUFBUSxRQUFRLEVBS2hDLEdBSkk1eEIsRUFBSyxLQUFPOHZCLEtBQ1pkLE1BQU9yekIsS0FBSzQyQixVQUFVLENBQUMsRUFDdkJ2eUIsRUFBT0EsRUFBS3lJLFVBQVUsQ0FBQyxHQUVYLE1BQVp6SSxFQUFLLEdBQVksQ0FDakIvSyxJQUFJdTlCLEVBQVN4eUIsRUFBS3BMLE9BQ2RncEIsRUFBSzVkLEVBQUt6QixRQUFRLEdBQUcsRUFDekIsS0FBYyxDQUFBLElBQVBxZixHQUFXLENBQ2QsSUFBTWxOLEVBQUsxUSxFQUFLNGQsRUFBSyxHQUNyQixHQUFXLE1BQVBsTixHQUFxQixPQUFQQSxFQUFhLENBQzNCOGhCLEVBQVM1VSxFQUFLLEVBQ2QsS0FDcEIsQ0FFb0JBLEVBQUs1ZCxFQUFLekIsUUFBUSxJQUFLcWYsRUFBSyxDQUFDLENBRWpELENBQ1ksT0FBYSxDQUNULElBQU1sTixFQUFLMVEsRUFBS3d5QixFQUFTLEdBQ3pCLEdBQVcsTUFBUDloQixHQUFxQixPQUFQQSxFQUdkLE1BRkE4aEIsRUFBQUEsQ0FHcEIsQ0FDWSxJQUFNenhCLEdBQUksTUFBUXBGLEtBQUs0MkIsVUFBVUMsQ0FBTSxJQUFDLE1BQVk3MkIsS0FBSzgyQixXQUFXLENBQUEsQ0FBSSxHQUd4RSxPQUZBekQsTUFBT3J6QixLQUFLNDJCLFVBQVV2eUIsRUFBS3BMLE9BQVNtTSxDQUFDLEVBQ3JDcEYsS0FBSysyQixZQUFhLEVBQ1gsUUFDbkIsQ0FDUSxPQUFJLzJCLEtBQUs2MUIsYUFDQ21CLEVBQUszRCxNQUFPcnpCLEtBQUs4MkIsV0FBVyxDQUFBLENBQUksRUFDdEN6RCxNQUFPcnpCLEtBQUs0MkIsVUFBVXZ5QixFQUFLcEwsT0FBUys5QixDQUFFLEVBQ3RDM0QsTUFBT3J6QixLQUFLKzJCLFlBQWEsRUFDbEIsV0FFWDFELEtEbFJTLElDbVJGQSxNQUFPcnpCLEtBQUtxMkIsZUFBZ0IsRUFDM0MsQ0FDSUEsa0JBQ0ksSUFBTXRoQixFQUFLL1UsS0FBSzlGLE9BQU8sQ0FBQyxFQUN4QixHQUFJLENBQUM2YSxHQUFNLENBQUMvVSxLQUFLaTFCLE1BQ2IsT0FBT2oxQixLQUFLaTJCLFFBQVEsWUFBWSxFQUNwQyxHQUFXLE1BQVBsaEIsR0FBcUIsTUFBUEEsRUFBWSxDQUMxQixHQUFJLENBQUMvVSxLQUFLaTFCLE9BQVMsQ0FBQ2oxQixLQUFLMjFCLFNBQVMsQ0FBQyxFQUMvQixPQUFPMzFCLEtBQUtpMkIsUUFBUSxZQUFZLEVBQzlCelAsRUFBSXhtQixLQUFLbTJCLEtBQUssQ0FBQyxFQUNyQixJQUFXLFFBQU4zUCxHQUFxQixRQUFOQSxJQUFnQmtPLEVBQVExMEIsS0FBSzlGLE9BQU8sQ0FBQyxDQUFDLEVBSXRELE9BSEFtNUIsTUFBT3J6QixLQUFLNDJCLFVBQVUsQ0FBQyxFQUN2QjUyQixLQUFLdTFCLFlBQWMsRUFDbkJ2MUIsS0FBS3MxQixXQUFhLEVBQ0wsUUFBTjlPLEVBQWMsTUFBUSxRQUU3QyxDQUlRLE9BSEF4bUIsS0FBS3UxQixZQUFjbEMsTUFBT3J6QixLQUFLODJCLFdBQVcsQ0FBQSxDQUFLLEVBQzNDOTJCLEtBQUtzMUIsV0FBYXQxQixLQUFLdTFCLGFBQWUsQ0FBQ2IsRUFBUTEwQixLQUFLOUYsT0FBTyxDQUFDLENBQUMsSUFDN0Q4RixLQUFLczFCLFdBQWF0MUIsS0FBS3UxQixhQUNwQmxDLE1BQU9yekIsS0FBS3MyQixnQkFBaUIsQ0FDNUMsQ0FDSUEsbUJBQ0ksR0FBTSxDQUFDVyxFQUFLQyxHQUFPbDNCLEtBQUttMkIsS0FBSyxDQUFDLEVBQzlCLE9BQUtlLEdBQVFsM0IsS0FBS2kxQixNQUVMLE1BQVJnQyxHQUF1QixNQUFSQSxHQUF1QixNQUFSQSxHQUFnQnZDLENBQUFBLEVBQVF3QyxDQUFHLEVBTXZELE9BTEc5eEIsR0FBSSxNQUFRcEYsS0FBSzQyQixVQUFVLENBQUMsSUFBQyxNQUFZNTJCLEtBQUs4MkIsV0FBVyxDQUFBLENBQUksR0FDbkU5MkIsS0FBS3MxQixXQUFhdDFCLEtBQUt1MUIsWUFBYyxFQUNyQ3YxQixLQUFLdTFCLGFBQWVud0IsRUFDYml1QixNQUFPcnpCLEtBQUtzMkIsZ0JBQWlCLEdBTDdCdDJCLEtBQUtpMkIsUUFBUSxhQUFhLENBUTdDLENBQ0lNLGlCQUNJbEQsTUFBT3J6QixLQUFLODJCLFdBQVcsQ0FBQSxDQUFJLEVBQzNCLElBQU16eUIsRUFBT3JFLEtBQUtnMkIsUUFBUyxFQUMzQixHQUFhLE9BQVQzeEIsRUFDQSxPQUFPckUsS0FBS2kyQixRQUFRLEtBQUssRUFDN0IzOEIsSUFBSThMLEVBQUlpdUIsTUFBT3J6QixLQUFLbTNCLGVBQWdCLEVBQ3BDLE9BQVE5eUIsRUFBS2UsSUFDVCxJQUFLLElBQ0RpdUIsTUFBT3J6QixLQUFLNDJCLFVBQVV2eUIsRUFBS3BMLE9BQVNtTSxDQUFDLEVBRXpDLEtBQUtWLEtBQUFBLEVBRUQsT0FEQTJ1QixNQUFPcnpCLEtBQUsrMkIsWUFBYSxFQUNsQjFELE1BQU9yekIsS0FBS3EyQixlQUFnQixFQUN2QyxJQUFLLElBQ0wsSUFBSyxJQUlELE9BSEFoRCxNQUFPcnpCLEtBQUs0MkIsVUFBVSxDQUFDLEVBQ3ZCNTJCLEtBQUtvMUIsUUFBVSxDQUFBLEVBQ2ZwMUIsS0FBS3ExQixVQUFZLEVBQ1YsT0FDWCxJQUFLLElBQ0wsSUFBSyxJQUdELE9BREFoQyxNQUFPcnpCLEtBQUs0MkIsVUFBVSxDQUFDLEVBQ2hCLE1BQ1gsSUFBSyxJQUVELE9BREF2RCxNQUFPcnpCLEtBQUtvM0IsVUFBVXJDLEVBQWUsRUFDOUIsTUFDWCxJQUFLLElBQ0wsSUFBSyxJQUNELE9BQU8xQixNQUFPcnpCLEtBQUt5MkIsa0JBQW1CLEVBQzFDLElBQUssSUFDTCxJQUFLLElBS0QsT0FIQXJ4QixHQURBQSxHQUFLaXVCLE1BQU9yekIsS0FBS3EzQix1QkFBd0IsSUFDcENoRSxNQUFPcnpCLEtBQUs4MkIsV0FBVyxDQUFBLENBQUksR0FDaEN6RCxNQUFPcnpCLEtBQUs0MkIsVUFBVXZ5QixFQUFLcEwsT0FBU21NLENBQUMsRUFDckNpdUIsTUFBT3J6QixLQUFLKzJCLFlBQWEsRUFDbEIxRCxNQUFPcnpCLEtBQUswMkIsaUJBQWtCLEVBQ3pDLFFBQ0ksT0FBT3JELE1BQU9yekIsS0FBSzIyQixpQkFBa0IsQ0FDckQsQ0FDQSxDQUNJSCx1QkFDSWw5QixJQUFJKzRCLEVBQUkyRSxFQUNKbmMsRUFBUyxDQUFFLEVBQ2YsS0FFYSxHQURUd1gsRUFBS2dCLE1BQU9yekIsS0FBSysyQixZQUFhLElBRTFCQyxFQUFLM0QsTUFBT3J6QixLQUFLODJCLFdBQVcsQ0FBQSxDQUFLLEVBQ2pDOTJCLEtBQUt1MUIsWUFBYzFhLEVBQVNtYyxHQUc1QkEsRUFBSyxFQUdNLEVBQVYzRSxHQURMMkUsR0FBTTNELE1BQU9yekIsS0FBSzgyQixXQUFXLENBQUEsQ0FBSSxLQUVyQyxJQUFNenlCLEVBQU9yRSxLQUFLZzJCLFFBQVMsRUFDM0IsR0FBYSxPQUFUM3hCLEVBQ0EsT0FBT3JFLEtBQUtpMkIsUUFBUSxNQUFNLEVBQzlCLElBQWdCLENBQUEsSUFBWHBiLEdBQWlCQSxFQUFTN2EsS0FBS3MxQixZQUEwQixNQUFaanhCLEVBQUssSUFDdkMsSUFBWHdXLElBQ0l4VyxFQUFLeVEsV0FBVyxLQUFLLEdBQUt6USxFQUFLeVEsV0FBVyxLQUFLLElBQ2hENGYsRUFBUXJ3QixFQUFLLEVBQUUsSUFPZixFQUhvQndXLElBQVc3YSxLQUFLczFCLFdBQWEsR0FDOUIsSUFBbkJ0MUIsS0FBS3ExQixZQUNRLE1BQVpoeEIsRUFBSyxJQUEwQixNQUFaQSxFQUFLLEtBS3pCLE9BRkFyRSxLQUFLcTFCLFVBQVksRUFDakJoQyxLRDFYQyxJQzJYTUEsTUFBT3J6QixLQUFLcTJCLGVBQWdCLEVBRzNDLzhCLElBQUk4TCxFQUFJLEVBQ1IsS0FBbUIsTUFBWmYsRUFBS2UsSUFFUkEsR0FEQUEsR0FBS2l1QixNQUFPcnpCLEtBQUs0MkIsVUFBVSxDQUFDLElBQ3ZCdkQsTUFBT3J6QixLQUFLODJCLFdBQVcsQ0FBQSxDQUFJLEdBQ2hDOTJCLEtBQUtvMUIsUUFBVSxDQUFBLEVBR25CLE9BQVEvd0IsRUFEUmUsR0FBS2l1QixNQUFPcnpCLEtBQUttM0IsZUFBZ0IsSUFFN0IsS0FBS3p5QixLQUFBQSxFQUNELE1BQU8sT0FDWCxJQUFLLElBRUQsT0FEQTJ1QixNQUFPcnpCLEtBQUs0MkIsVUFBVXZ5QixFQUFLcEwsT0FBU21NLENBQUMsRUFDOUIsT0FDWCxJQUFLLElBQ0wsSUFBSyxJQUlELE9BSEFpdUIsTUFBT3J6QixLQUFLNDJCLFVBQVUsQ0FBQyxFQUN2QjUyQixLQUFLbzFCLFFBQVUsQ0FBQSxFQUNmcDFCLEtBQUtxMUIsV0FBYSxFQUNYLE9BQ1gsSUFBSyxJQUNMLElBQUssSUFJRCxPQUhBaEMsTUFBT3J6QixLQUFLNDJCLFVBQVUsQ0FBQyxFQUN2QjUyQixLQUFLbzFCLFFBQVUsQ0FBQSxFQUNmcDFCLEVBQUFBLEtBQUtxMUIsVUFDRXIxQixLQUFLcTFCLFVBQVksT0FBUyxNQUNyQyxJQUFLLElBRUQsT0FEQWhDLE1BQU9yekIsS0FBS28zQixVQUFVckMsRUFBZSxFQUM5QixPQUNYLElBQUssSUFDTCxJQUFLLElBRUQsT0FEQS8wQixLQUFLbzFCLFFBQVUsQ0FBQSxFQUNSL0IsTUFBT3J6QixLQUFLeTJCLGtCQUFtQixFQUMxQyxJQUFLLElBQ0QsSUFBTWxyQixFQUFPdkwsS0FBSzlGLE9BQU8sQ0FBQyxFQUMxQixHQUFJOEYsS0FBS28xQixTQUFXVixFQUFRbnBCLENBQUksR0FBYyxNQUFUQSxFQUlqQyxPQUhBdkwsS0FBS28xQixRQUFVLENBQUEsRUFDZi9CLE1BQU9yekIsS0FBSzQyQixVQUFVLENBQUMsRUFDdkJ2RCxNQUFPcnpCLEtBQUs4MkIsV0FBVyxDQUFBLENBQUksRUFDcEIsT0FJZixRQUVJLE9BREE5MkIsS0FBS28xQixRQUFVLENBQUEsRUFDUi9CLE1BQU9yekIsS0FBSzIyQixpQkFBa0IsQ0FDckQsQ0FDQSxDQUNJRixxQkFDSSxJQUFNYSxFQUFRdDNCLEtBQUs5RixPQUFPLENBQUMsRUFDM0JaLElBQUlnRCxFQUFNMEQsS0FBS29tQixPQUFPeGpCLFFBQVEwMEIsRUFBT3QzQixLQUFLK3JCLElBQU0sQ0FBQyxFQUNqRCxHQUFjLE1BQVZ1TCxFQUNBLEtBQWUsQ0FBQSxJQUFSaDdCLEdBQXVDLE1BQXpCMEQsS0FBS29tQixPQUFPOXBCLEVBQU0sSUFDbkNBLEVBQU0wRCxLQUFLb21CLE9BQU94akIsUUFBUSxJQUFLdEcsRUFBTSxDQUFDLE9BSTFDLEtBQWUsQ0FBQSxJQUFSQSxHQUFZLENBQ2ZoRCxJQUFJOEwsRUFBSSxFQUNSLEtBQW9DLE9BQTdCcEYsS0FBS29tQixPQUFPOXBCLEVBQU0sRUFBSThJLElBQ3pCQSxHQUFLLEVBQ1QsR0FBSUEsRUFBSSxHQUFNLEVBQ1YsTUFDSjlJLEVBQU0wRCxLQUFLb21CLE9BQU94akIsUUFBUSxJQUFLdEcsRUFBTSxDQUFDLENBQ3RELENBR1EsSUFBTWk3QixFQUFLdjNCLEtBQUtvbUIsT0FBT3RaLFVBQVUsRUFBR3hRLENBQUcsRUFDdkNoRCxJQUFJKzRCLEVBQUtrRixFQUFHMzBCLFFBQVEsS0FBTTVDLEtBQUsrckIsR0FBRyxFQUNsQyxHQUFXLENBQUEsSUFBUHNHLEVBQVcsQ0FDWCxLQUFjLENBQUEsSUFBUEEsR0FBVyxDQUNkLElBQU1wUSxFQUFLamlCLEtBQUs4MUIsZUFBZXpELEVBQUssQ0FBQyxFQUNyQyxHQUFXLENBQUUsSUFBVHBRLEVBQ0EsTUFDSm9RLEVBQUtrRixFQUFHMzBCLFFBQVEsS0FBTXFmLENBQUUsQ0FDeEMsQ0FDdUIsQ0FBQSxJQUFQb1EsSUFFQS8xQixFQUFNKzFCLEdBQXFCLE9BQWZrRixFQUFHbEYsRUFBSyxHQUFjLEVBQUksR0FFdEQsQ0FDUSxHQUFZLENBQUEsSUFBUi8xQixFQUFZLENBQ1osR0FBSSxDQUFDMEQsS0FBS2kxQixNQUNOLE9BQU9qMUIsS0FBS2kyQixRQUFRLGVBQWUsRUFDdkMzNUIsRUFBTTBELEtBQUtvbUIsT0FBT250QixNQUM5QixDQUVRLE9BREFvNkIsTUFBT3J6QixLQUFLdzNCLFlBQVlsN0IsRUFBTSxFQUFHLENBQUEsQ0FBSyxFQUMvQjBELEtBQUtxMUIsVUFBWSxPQUFTLEtBQ3pDLENBQ0lnQywwQkFDSXIzQixLQUFLazFCLGtCQUFvQixDQUFFLEVBQzNCbDFCLEtBQUttMUIsZ0JBQWtCLENBQUEsRUFDdkI3N0IsSUFBSUksRUFBSXNHLEtBQUsrckIsSUFDYixPQUFhLENBQ1QsSUFBTWhYLEVBQUsvVSxLQUFLb21CLE9BQU8sRUFBRTFzQixHQUN6QixHQUFXLE1BQVBxYixFQUNBL1UsS0FBS20xQixnQkFBa0IsQ0FBQSxPQUN0QixHQUFTLElBQUxwZ0IsR0FBWUEsR0FBTSxJQUN2Qi9VLEtBQUtrMUIsa0JBQW9CNzFCLE9BQU8wVixDQUFFLEVBQUksT0FDckMsR0FBVyxNQUFQQSxFQUNMLEtBQ2hCLENBQ1EsT0FBT3NlLE1BQU9yekIsS0FBS28zQixVQUFVcmlCLEdBQU0yZixFQUFRM2YsQ0FBRSxHQUFZLE1BQVBBLENBQVUsQ0FDcEUsQ0FDSTJoQixvQkFDSXA5QixJQUFJKzRCLEVBQUtyeUIsS0FBSytyQixJQUFNLEVBQ2hCbFIsRUFBUyxFQUNUOUYsRUFDSnNhLEVBQU0sSUFBSy8xQixJQUFJSSxFQUFJc0csS0FBSytyQixJQUFNaFgsRUFBSy9VLEtBQUtvbUIsT0FBTzFzQixHQUFLLEVBQUVBLEVBQ2xELE9BQVFxYixHQUNKLElBQUssSUFDRDhGLEdBQVUsRUFDVixNQUNKLElBQUssS0FDRHdYLEVBQUszNEIsRUFDTG1oQixFQUFTLEVBQ1QsTUFDSixJQUFLLEtBQ0QsSUFBTXRQLEVBQU92TCxLQUFLb21CLE9BQU8xc0IsRUFBSSxHQUM3QixHQUFJLENBQUM2UixHQUFRLENBQUN2TCxLQUFLaTFCLE1BQ2YsT0FBT2oxQixLQUFLaTJCLFFBQVEsY0FBYyxFQUN0QyxHQUFhLE9BQVQxcUIsRUFDQSxNQUVSLFFBQ0ksTUFBTThqQixDQUMxQixDQUVRLEdBQUksQ0FBQ3RhLEdBQU0sQ0FBQy9VLEtBQUtpMUIsTUFDYixPQUFPajFCLEtBQUtpMkIsUUFBUSxjQUFjLEVBQ3RDLEdBQUlwYixHQUFVN2EsS0FBS3MxQixXQUFZLENBQ0ksQ0FBRSxJQUE3QnQxQixLQUFLazFCLGtCQUNMbDFCLEtBQUtzMUIsV0FBYXphLEVBRWxCN2EsS0FBS3MxQixXQUNEdDFCLEtBQUtrMUIsbUJBQXlDLElBQXBCbDFCLEtBQUtzMUIsV0FBbUIsRUFBSXQxQixLQUFLczFCLFlBRW5FLEVBQUcsQ0FDQyxJQUFNclQsRUFBS2ppQixLQUFLODFCLGVBQWV6RCxFQUFLLENBQUMsRUFDckMsR0FBVyxDQUFFLElBQVRwUSxFQUNBLE1BQ0pvUSxFQUFLcnlCLEtBQUtvbUIsT0FBT3hqQixRQUFRLEtBQU1xZixDQUFFLENBQ3BDLE9BQWUsQ0FBRSxJQUFUb1EsR0FDVCxHQUFXLENBQUEsSUFBUEEsRUFBVyxDQUNYLEdBQUksQ0FBQ3J5QixLQUFLaTFCLE1BQ04sT0FBT2oxQixLQUFLaTJCLFFBQVEsY0FBYyxFQUN0QzVELEVBQUtyeUIsS0FBS29tQixPQUFPbnRCLE1BQ2pDLENBQ0EsQ0FHUUssSUFBSUksRUFBSTI0QixFQUFLLEVBRWIsSUFEQXRkLEVBQUsvVSxLQUFLb21CLE9BQU8xc0IsR0FDSCxNQUFQcWIsR0FDSEEsRUFBSy9VLEtBQUtvbUIsT0FBTyxFQUFFMXNCLEdBQ3ZCLEdBQVcsT0FBUHFiLEVBQWEsQ0FDYixLQUFjLE9BQVBBLEdBQXNCLE1BQVBBLEdBQXFCLE9BQVBBLEdBQXNCLE9BQVBBLEdBQy9DQSxFQUFLL1UsS0FBS29tQixPQUFPLEVBQUUxc0IsR0FDdkIyNEIsRUFBSzM0QixFQUFJLENBQ3JCLE1BQ2EsR0FBSSxDQUFDc0csS0FBS20xQixnQkFDWCxPQUFHLENBQ0M3N0IsSUFBSUksRUFBSTI0QixFQUFLLEVBQ1R0ZCxFQUFLL1UsS0FBS29tQixPQUFPMXNCLEdBQ1YsT0FBUHFiLElBQ0FBLEVBQUsvVSxLQUFLb21CLE9BQU8sRUFBRTFzQixJQUV2QixJQURBLElBQU0rOUIsRUFBVy85QixFQUNILE1BQVBxYixHQUNIQSxFQUFLL1UsS0FBS29tQixPQUFPLEVBQUUxc0IsR0FDdkIsR0FBSXFiLEVBQU8sT0FBUEEsR0FBZXJiLEdBQUtzRyxLQUFLK3JCLEtBQU9yeUIsRUFBSSxFQUFJbWhCLEVBQVM0YyxHQUdqRCxNQUZBcEYsRUFBSzM0QixDQUd6QixDQUlRLE9BRkEyNUIsS0QxaUJPLElDMmlCUEEsTUFBT3J6QixLQUFLdzNCLFlBQVluRixFQUFLLEVBQUcsQ0FBQSxDQUFJLEVBQzdCZ0IsTUFBT3J6QixLQUFLcTJCLGVBQWdCLENBQzNDLENBQ0lNLG9CQUNJLElBQU1sWSxFQUEwQixFQUFqQnplLEtBQUtxMUIsVUFDcEIvN0IsSUFBSWdELEVBQU0wRCxLQUFLK3JCLElBQU0sRUFDakJyeUIsRUFBSXNHLEtBQUsrckIsSUFBTSxFQUNmaFgsRUFDSixLQUFRQSxFQUFLL1UsS0FBS29tQixPQUFPLEVBQUUxc0IsSUFDdkIsR0FBVyxNQUFQcWIsRUFBWSxDQUNaLElBQU14SixFQUFPdkwsS0FBS29tQixPQUFPMXNCLEVBQUksR0FDN0IsR0FBSWc3QixFQUFRbnBCLENBQUksR0FBTWtULEdBQVVvVyxHQUFtQjllLElBQUl4SyxDQUFJLEVBQ3ZELE1BQ0pqUCxFQUFNNUMsQ0FDdEIsTUFDaUIsR0FBSWc3QixFQUFRM2YsQ0FBRSxFQUFHLENBQ2xCemIsSUFBSWlTLEVBQU92TCxLQUFLb21CLE9BQU8xc0IsRUFBSSxHQVUzQixHQVRXLE9BQVBxYixJQUNhLE9BQVR4SixHQUNBN1IsR0FBSyxFQUNMcWIsRUFBSyxLQUNMeEosRUFBT3ZMLEtBQUtvbUIsT0FBTzFzQixFQUFJLElBR3ZCNEMsRUFBTTVDLEdBRUQsTUFBVDZSLEdBQWlCa1QsR0FBVW9XLEdBQW1COWUsSUFBSXhLLENBQUksRUFDdEQsTUFDSixHQUFXLE9BQVB3SixFQUFhLENBQ1BrTixFQUFLamlCLEtBQUs4MUIsZUFBZXA4QixFQUFJLENBQUMsRUFDcEMsR0FBVyxDQUFFLElBQVR1b0IsRUFDQSxNQUNKdm9CLEVBQUkrQyxLQUFLcWIsSUFBSXBlLEVBQUd1b0IsRUFBSyxDQUFDLENBQzFDLENBQ0EsS0FDaUIsQ0FDRCxHQUFJeEQsR0FBVW9XLEdBQW1COWUsSUFBSWhCLENBQUUsRUFDbkMsTUFDSnpZLEVBQU01QyxDQUN0QixDQUVRLE9BQUtxYixHQUFPL1UsS0FBS2kxQixPQUVqQjVCLEtEdGxCTyxJQ3VsQlBBLE1BQU9yekIsS0FBS3czQixZQUFZbDdCLEVBQU0sRUFBRyxDQUFBLENBQUksRUFDOUJtaUIsRUFBUyxPQUFTLE9BSGR6ZSxLQUFLaTJCLFFBQVEsY0FBYyxDQUk5QyxDQUNJVyxXQUFXeHhCLEdBQ1AsT0FBUSxFQUFKQSxHQUNBaXVCLE1BQU1yekIsS0FBS29tQixPQUFPdnFCLE9BQU9tRSxLQUFLK3JCLElBQUszbUIsQ0FBQyxFQUNwQ3BGLEtBQUsrckIsS0FBTzNtQixFQUNMQSxHQUVKLENBQ2YsQ0FDSW95QixhQUFhOTlCLEVBQUdnK0IsR0FDTmxSLEVBQUl4bUIsS0FBS29tQixPQUFPdnNCLE1BQU1tRyxLQUFLK3JCLElBQUtyeUIsQ0FBQyxFQUN2QyxPQUFJOHNCLEdBQ0E2TSxNQUFNN00sRUFDTnhtQixLQUFLK3JCLEtBQU92RixFQUFFdnRCLE9BQ1B1dEIsRUFBRXZ0QixTQUVKeStCLElBQ0xyRSxLQUFNLElBQ0gsRUFDZixDQUNJOEQsa0JBQ0ksT0FBUW4zQixLQUFLOUYsT0FBTyxDQUFDLEdBQ2pCLElBQUssSUFDRCxPQUFRLE1BQVE4RixLQUFLMjNCLFFBQVMsSUFDOUMsTUFBNEIzM0IsS0FBSzgyQixXQUFXLENBQUEsQ0FBSSxJQUNoRCxNQUE0QjkyQixLQUFLbTNCLGtCQUNyQixJQUFLLElBQ0QsT0FBUSxNQUFRbjNCLEtBQUtvM0IsVUFBVXJDLEVBQWUsSUFDOUQsTUFBNEIvMEIsS0FBSzgyQixXQUFXLENBQUEsQ0FBSSxJQUNoRCxNQUE0QjkyQixLQUFLbTNCLGtCQUNyQixJQUFLLElBQ0wsSUFBSyxJQUNMLElBQUssSUFDRCxJQUFNMVksRUFBMEIsRUFBakJ6ZSxLQUFLcTFCLFVBQ2Q2QixFQUFNbDNCLEtBQUs5RixPQUFPLENBQUMsRUFDekIsR0FBSXc2QixFQUFRd0MsQ0FBRyxHQUFNelksR0FBVW9XLEdBQW1COWUsSUFBSW1oQixDQUFHLEVBS3JELE9BSkt6WSxFQUVJemUsS0FBS28xQixVQUNWcDFCLEtBQUtvMUIsUUFBVSxDQUFBLEdBRmZwMUIsS0FBS3MxQixXQUFhdDFCLEtBQUt1MUIsWUFBYyxHQUdqQyxNQUFRdjFCLEtBQUs0MkIsVUFBVSxDQUFDLElBQ3BELE1BQWdDNTJCLEtBQUs4MkIsV0FBVyxDQUFBLENBQUksSUFDcEQsTUFBZ0M5MkIsS0FBS20zQixpQkFHckMsQ0FDUSxPQUFPLENBQ2YsQ0FDSVEsV0FDSSxHQUF1QixNQUFuQjMzQixLQUFLOUYsT0FBTyxDQUFDLEVBQVcsQ0FDeEJaLElBQUlJLEVBQUlzRyxLQUFLK3JCLElBQU0sRUFDZmhYLEVBQUsvVSxLQUFLb21CLE9BQU8xc0IsR0FDckIsS0FBTyxDQUFDZzdCLEVBQVEzZixDQUFFLEdBQVksTUFBUEEsR0FDbkJBLEVBQUsvVSxLQUFLb21CLE9BQU8sRUFBRTFzQixHQUN2QixPQUFPMjVCLE1BQU9yekIsS0FBS3czQixZQUFtQixNQUFQemlCLEVBQWFyYixFQUFJLEVBQUlBLEVBQUcsQ0FBQSxDQUFLLENBQ3hFLENBQ2EsQ0FDREosSUFBSUksRUFBSXNHLEtBQUsrckIsSUFBTSxFQUNmaFgsRUFBSy9VLEtBQUtvbUIsT0FBTzFzQixHQUNyQixLQUFPcWIsR0FDSCxHQUFJNmYsR0FBUzdlLElBQUloQixDQUFFLEVBQ2ZBLEVBQUsvVSxLQUFLb21CLE9BQU8sRUFBRTFzQixPQUNsQixDQUFBLEdBQVcsTUFBUHFiLEdBQ0w0ZixDQUFBQSxHQUFVNWUsSUFBSS9WLEtBQUtvbUIsT0FBTzFzQixFQUFJLEVBQUUsR0FDaENpN0IsQ0FBQUEsR0FBVTVlLElBQUkvVixLQUFLb21CLE9BQU8xc0IsRUFBSSxFQUFFLEVBSWhDLE1BSEFxYixFQUFLL1UsS0FBS29tQixPQUFRMXNCLEdBQUssRUFHdkIsQ0FFUixPQUFPMjVCLE1BQU9yekIsS0FBS3czQixZQUFZOTlCLEVBQUcsQ0FBQSxDQUFLLENBQ25ELENBQ0EsQ0FDSXE5QixlQUNJLElBQU1oaUIsRUFBSy9VLEtBQUtvbUIsT0FBT3BtQixLQUFLK3JCLEtBQzVCLE1BQVcsT0FBUGhYLEVBQ09zZSxNQUFPcnpCLEtBQUs0MkIsVUFBVSxDQUFDLEVBQ2xCLE9BQVA3aEIsR0FBa0MsT0FBbkIvVSxLQUFLOUYsT0FBTyxDQUFDLEVBQzFCbTVCLE1BQU9yekIsS0FBSzQyQixVQUFVLENBQUMsRUFFdkIsQ0FDbkIsQ0FDSUUsWUFBWWMsR0FDUnQrQixJQUFJSSxFQUFJc0csS0FBSytyQixJQUFNLEVBRW5CLElBREF6eUIsSUFBSXliLEVBR1ksT0FEWkEsRUFBSy9VLEtBQUtvbUIsT0FBTyxFQUFFMXNCLEtBQ0NrK0IsR0FBb0IsT0FBUDdpQixJQUNyQyxJQUFNM1AsRUFBSTFMLEVBQUlzRyxLQUFLK3JCLElBS25CLE9BSlEsRUFBSjNtQixJQUNBaXVCLE1BQU1yekIsS0FBS29tQixPQUFPdnFCLE9BQU9tRSxLQUFLK3JCLElBQUszbUIsQ0FBQyxFQUNwQ3BGLEtBQUsrckIsSUFBTXJ5QixHQUVSMEwsQ0FDZixDQUNJZ3lCLFdBQVd4OUIsR0FDUE4sSUFBSUksRUFBSXNHLEtBQUsrckIsSUFDVGhYLEVBQUsvVSxLQUFLb21CLE9BQU8xc0IsR0FDckIsS0FBTyxDQUFDRSxFQUFLbWIsQ0FBRSxHQUNYQSxFQUFLL1UsS0FBS29tQixPQUFPLEVBQUUxc0IsR0FDdkIsT0FBTzI1QixNQUFPcnpCLEtBQUt3M0IsWUFBWTk5QixFQUFHLENBQUEsQ0FBSyxDQUMvQyxDQUNBLE9DcnNCTW0rQixHQUNGMTVCLGNBQ0k2QixLQUFLd3NCLFdBQWEsR0FLbEJ4c0IsS0FBSzgzQixXQUFhLEdBQVk5M0IsS0FBS3dzQixXQUFXM3ZCLEtBQUswb0IsQ0FBTSxFQU16RHZsQixLQUFLcXNCLFFBQVUsSUFDWC95QixJQUFJeStCLEVBQU0sRUFDTkMsRUFBT2g0QixLQUFLd3NCLFdBQVd2ekIsT0FDM0IsS0FBTzgrQixFQUFNQyxHQUFNLENBQ2YsSUFBTUMsRUFBT0YsRUFBTUMsR0FBUyxFQUN4Qmg0QixLQUFLd3NCLFdBQVd5TCxHQUFPMVMsRUFDdkJ3UyxFQUFZLEVBQU5FLEVBRU5ELEVBQU9DLENBQzNCLENBQ1ksSUFJTTU3QixFQUpOLE9BQUkyRCxLQUFLd3NCLFdBQVd1TCxLQUFTeFMsRUFDbEIsQ0FBRWxoQixLQUFNMHpCLEVBQU0sRUFBR3pMLElBQUssQ0FBRyxFQUN4QixJQUFSeUwsRUFDTyxDQUFFMXpCLEtBQU0sRUFBR2lvQixJQUFLL0csQ0FBUSxHQUM3QmxwQixFQUFRMkQsS0FBS3dzQixXQUFXdUwsRUFBTSxHQUM3QixDQUFFMXpCLEtBQU0wekIsRUFBS3pMLElBQUsvRyxFQUFTbHBCLEVBQVEsQ0FBRyxFQUNoRCxDQUNULENBQ0EsQ0NqQ0EsU0FBUzY3QixHQUFjQyxFQUFNanFCLEdBQ3pCLElBQUs1VSxJQUFJSSxFQUFJLEVBQUdBLEVBQUl5K0IsRUFBS2wvQixPQUFRLEVBQUVTLEVBQy9CLEdBQUl5K0IsRUFBS3orQixHQUFHd1UsT0FBU0EsRUFDakIsT0FBTyxDQUVuQixDQUNBLFNBQVNrcUIsR0FBa0JELEdBQ3ZCLElBQUs3K0IsSUFBSUksRUFBSSxFQUFHQSxFQUFJeStCLEVBQUtsL0IsT0FBUSxFQUFFUyxFQUMvQixPQUFReStCLEVBQUt6K0IsR0FBR3dVLE1BQ1osSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFVBQ0QsTUFDSixRQUNJLE9BQU94VSxDQUN2QixDQUVJLE1BQU8sQ0FBRSxDQUNiLENBQ0EsU0FBUzIrQixHQUFZL0ssR0FDakIsT0FBUUEsR0FBT3BmLE1BQ1gsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLHVCQUNMLElBQUssdUJBQ0wsSUFBSyxrQkFDRCxPQUFPLEVBQ1gsUUFDSSxNQUNaLENBQ0EsQ0FDQSxTQUFTb3FCLEdBQWF2bEIsR0FDbEIsT0FBUUEsRUFBTzdFLE1BQ1gsSUFBSyxXQUNELE9BQU82RSxFQUFPMVcsTUFDbEIsSUFBSyxZQUNELElBQU15ZCxFQUFLL0csRUFBT2hCLE1BQU1nQixFQUFPaEIsTUFBTTlZLE9BQVMsR0FDOUMsT0FBTzZnQixFQUFHdGMsS0FBT3NjLEVBQUd6ZCxNQUV4QixJQUFLLFlBQ0QsT0FBTzBXLEVBQU9oQixNQUFNZ0IsRUFBT2hCLE1BQU05WSxPQUFTLEdBQUdvRCxNQUVqRCxRQUNJLE1BQU8sRUFDbkIsQ0FDQSxDQUVBLFNBQVNrOEIsR0FBc0J2MEIsR0FDM0IsR0FBb0IsSUFBaEJBLEVBQUsvSyxPQUNMLE1BQU8sR0FDWEssSUFBSUksRUFBSXNLLEVBQUsvSyxPQUNibzJCLEVBQU0sS0FBYyxHQUFQLEVBQUUzMUIsR0FDWCxPQUFRc0ssRUFBS3RLLEdBQUd3VSxNQUNaLElBQUssWUFDTCxJQUFLLG1CQUNMLElBQUssZ0JBQ0wsSUFBSyxlQUNMLElBQUssVUFDRCxNQUFNbWhCLENBQ3RCLENBRUksS0FBMkIsVUFBcEJyckIsRUFBSyxFQUFFdEssSUFBSXdVLE9BR2xCLE9BQU9sSyxFQUFLcEosT0FBT2xCLEVBQUdzSyxFQUFLL0ssTUFBTSxDQUNyQyxDQUNBLFNBQVN1L0IsR0FBZ0I3SyxHQUNyQixHQUFzQixtQkFBbEJBLEVBQUd0eEIsTUFBTTZSLEtBQ1QsSUFBSyxJQUFNNEwsS0FBTTZULEVBQUc1YixNQUNaK0gsQ0FBQUEsRUFBR3RjLEtBQ0ZzYyxFQUFHcmIsT0FDSHk1QixHQUFjcGUsRUFBR3pkLE1BQU8sa0JBQWtCLEdBQzFDNjdCLEdBQWNwZSxFQUFHdGMsSUFBSyxlQUFlLElBQ2xDc2MsRUFBR25XLE1BQ0htVyxFQUFHcmIsTUFBUXFiLEVBQUduVyxLQUNsQixPQUFPbVcsRUFBR25XLElBQ04wMEIsR0FBWXZlLEVBQUdyYixLQUFLLEVBQ2hCcWIsRUFBR3JiLE1BQU1uQyxJQUNUL0QsTUFBTXVELFVBQVVlLEtBQUtrRCxNQUFNK1osRUFBR3JiLE1BQU1uQyxJQUFLd2QsRUFBR3RjLEdBQUcsRUFFL0NzYyxFQUFHcmIsTUFBTW5DLElBQU13ZCxFQUFHdGMsSUFHdEJqRixNQUFNdUQsVUFBVWUsS0FBS2tELE1BQU0rWixFQUFHemQsTUFBT3lkLEVBQUd0YyxHQUFHLEVBQy9DLE9BQU9zYyxFQUFHdGMsSUFJMUIsT0E0Qk1xUixHQUtGMVEsWUFBWXM2QixHQUVSejRCLEtBQUswNEIsVUFBWSxDQUFBLEVBRWpCMTRCLEtBQUsyNEIsU0FBVyxDQUFBLEVBRWhCMzRCLEtBQUs2YSxPQUFTLEVBRWQ3YSxLQUFLdWxCLE9BQVMsRUFFZHZsQixLQUFLNDRCLFVBQVksQ0FBQSxFQUVqQjU0QixLQUFLNjRCLE1BQVEsR0FFYjc0QixLQUFLMlAsT0FBUyxHQUVkM1AsS0FBS2tPLEtBQU8sR0FFWmxPLEtBQUs4NEIsTUFBUSxJQUFJOUQsR0FDakJoMUIsS0FBS3k0QixVQUFZQSxDQUN6QixDQVNJM3dCLE9BQU82SCxFQUFRK2xCLEVBQWEsQ0FBQSxHQUNwQjExQixLQUFLeTRCLFdBQTZCLElBQWhCejRCLEtBQUt1bEIsUUFDdkJ2bEIsS0FBS3k0QixVQUFVLENBQUMsRUFDcEIsSUFBSyxJQUFNTSxLQUFVLzRCLEtBQUs4NEIsTUFBTXJELElBQUk5bEIsRUFBUStsQixDQUFVLEVBQ2xEckMsTUFBT3J6QixLQUFLdUwsS0FBS3d0QixDQUFNLEVBQ3RCckQsSUFDRHJDLE1BQU9yekIsS0FBSzFELElBQUssRUFDN0IsQ0FJSWlQLE1BQU1vRSxHQUVGLEdBREEzUCxLQUFLMlAsT0FBU0EsRUFDVjNQLEtBQUsyNEIsU0FDTDM0QixLQUFLMjRCLFNBQVcsQ0FBQSxFQUNoQnRGLE1BQU9yekIsS0FBS2c1QixLQUFNLEVBQ2xCaDVCLEtBQUt1bEIsUUFBVTVWLEVBQU8xVyxXQUgxQixDQU1BLElBQU1pVixFQUFPa21CLEdBQVV6a0IsQ0FBTSxFQUM3QixHQUFLekIsRUFLQSxHQUFhLFdBQVRBLEVBQ0xsTyxLQUFLMDRCLFVBQVksQ0FBQSxFQUNqQjE0QixLQUFLMjRCLFNBQVcsQ0FBQSxFQUNoQjM0QixLQUFLa08sS0FBTyxhQUVYLENBR0QsT0FGQWxPLEtBQUtrTyxLQUFPQSxFQUNabWxCLE1BQU9yekIsS0FBS2c1QixLQUFNLEVBQ1Y5cUIsR0FDSixJQUFLLFVBQ0RsTyxLQUFLMDRCLFVBQVksQ0FBQSxFQUNqQjE0QixLQUFLNmEsT0FBUyxFQUNWN2EsS0FBS3k0QixXQUNMejRCLEtBQUt5NEIsVUFBVXo0QixLQUFLdWxCLE9BQVM1VixFQUFPMVcsTUFBTSxFQUM5QyxNQUNKLElBQUssUUFDRytHLEtBQUswNEIsV0FBMkIsTUFBZC9vQixFQUFPLEtBQ3pCM1AsS0FBSzZhLFFBQVVsTCxFQUFPMVcsUUFDMUIsTUFDSixJQUFLLG1CQUNMLElBQUssZ0JBQ0wsSUFBSyxlQUNHK0csS0FBSzA0QixZQUNMMTRCLEtBQUs2YSxRQUFVbEwsRUFBTzFXLFFBQzFCLE1BQ0osSUFBSyxXQUNMLElBQUssaUJBQ0QsT0FDSixRQUNJK0csS0FBSzA0QixVQUFZLENBQUEsQ0FDckMsQ0FDWTE0QixLQUFLdWxCLFFBQVU1VixFQUFPMVcsTUFDbEMsTUFuQ1lvNkIsTUFBT3J6QixLQUFLNkQsSUFBSSxDQUFFcUssS0FBTSxRQUFTcVgsT0FBUXZsQixLQUFLdWxCLE9BQVF5RyxRQUR0QyxxQkFBcUJyYyxFQUMwQkEsT0FBQUEsRUFBUSxFQUN2RTNQLEtBQUt1bEIsUUFBVTVWLEVBQU8xVyxNQUxsQyxDQXdDQSxDQUVJcUQsT0FDSSxLQUEyQixFQUFwQjBELEtBQUs2NEIsTUFBTTUvQixRQUNkbzZCLE1BQU9yekIsS0FBSzZELElBQUssQ0FDN0IsQ0FDSW8xQixrQkFPSSxNQU5XLENBQ1AvcUIsS0FBTWxPLEtBQUtrTyxLQUNYcVgsT0FBUXZsQixLQUFLdWxCLE9BQ2IxSyxPQUFRN2EsS0FBSzZhLE9BQ2JsTCxPQUFRM1AsS0FBSzJQLE1BQ2hCLENBRVQsQ0FDSXFwQixRQUNJLElBQU1FLEVBQU1sNUIsS0FBS20yQixLQUFLLENBQUMsRUFDdkIsR0FBa0IsWUFBZG4yQixLQUFLa08sTUFBd0JnckIsR0FBb0IsWUFBYkEsRUFBSWhyQixLQUE1QyxDQVVBLEdBQUksQ0FBQ2dyQixFQUNELE9BQU83RixNQUFPcnpCLEtBQUttNUIsT0FBUSxFQUMvQixPQUFRRCxFQUFJaHJCLE1BQ1IsSUFBSyxXQUNELE9BQU9tbEIsTUFBT3J6QixLQUFLbzVCLFNBQVNGLENBQUcsRUFDbkMsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLHVCQUNMLElBQUssdUJBQ0QsT0FBTzdGLE1BQU9yekIsS0FBSzZ2QixPQUFPcUosQ0FBRyxFQUNqQyxJQUFLLGVBQ0QsT0FBTzdGLE1BQU9yekIsS0FBS3E1QixZQUFZSCxDQUFHLEVBQ3RDLElBQUssWUFDRCxPQUFPN0YsTUFBT3J6QixLQUFLczVCLFNBQVNKLENBQUcsRUFDbkMsSUFBSyxZQUNELE9BQU83RixNQUFPcnpCLEtBQUt1NUIsY0FBY0wsQ0FBRyxFQUN4QyxJQUFLLGtCQUNELE9BQU83RixNQUFPcnpCLEtBQUt3NUIsZUFBZU4sQ0FBRyxFQUN6QyxJQUFLLFVBQ0QsT0FBTzdGLE1BQU9yekIsS0FBS3k1QixZQUFZUCxDQUFHLENBQ2xELENBRVE3RixNQUFPcnpCLEtBQUs2RCxJQUFLLENBdkJ6QixLQVRRLENBQ0ksS0FBMkIsRUFBcEI3RCxLQUFLNjRCLE1BQU01L0IsUUFDZG82QixNQUFPcnpCLEtBQUs2RCxJQUFLLEVBQ3JCN0QsS0FBSzY0QixNQUFNaDhCLEtBQUssQ0FDWnFSLEtBQU0sVUFDTnFYLE9BQVF2bEIsS0FBS3VsQixPQUNiNVYsT0FBUTNQLEtBQUsyUCxNQUM3QixDQUFhLENBRWIsQ0F3QkEsQ0FDSXdtQixLQUFLL3dCLEdBQ0QsT0FBT3BGLEtBQUs2NEIsTUFBTTc0QixLQUFLNjRCLE1BQU01L0IsT0FBU21NLEVBQzlDLENBQ0l2QixLQUFLdEQsR0FDRCxJQUFNK3NCLEVBQVEvc0IsR0FBU1AsS0FBSzY0QixNQUFNaDFCLElBQUssRUFFdkMsR0FBS3lwQixFQUlBLEdBQTBCLElBQXRCdHRCLEtBQUs2NEIsTUFBTTUvQixPQUNoQm82QixNQUFNL0YsTUFFTCxDQUNELElBQU00TCxFQUFNbDVCLEtBQUttMkIsS0FBSyxDQUFDLEVBV3ZCLE9BVm1CLGlCQUFmN0ksRUFBTXBmLEtBRU5vZixFQUFNelMsT0FBUyxXQUFZcWUsRUFBTUEsRUFBSXJlLE9BQVMsRUFFMUIsb0JBQWZ5UyxFQUFNcGYsTUFBMkMsYUFBYmdyQixFQUFJaHJCLE9BRTdDb2YsRUFBTXpTLE9BQVMsR0FFQSxvQkFBZnlTLEVBQU1wZixNQUNOc3FCLEdBQWdCbEwsQ0FBSyxFQUNqQjRMLEVBQUlockIsTUFDUixJQUFLLFdBQ0RnckIsRUFBSXo2QixNQUFRNnVCLEVBQ1osTUFDSixJQUFLLGVBQ0Q0TCxFQUFJblosTUFBTWxqQixLQUFLeXdCLENBQUssRUFDcEIsTUFDSixJQUFLLFlBQ0QsSUFBTXhULEVBQUtvZixFQUFJbm5CLE1BQU1tbkIsRUFBSW5uQixNQUFNOVksT0FBUyxHQUN4QyxHQUFJNmdCLEVBQUdyYixNQUdILE9BRkF5NkIsRUFBSW5uQixNQUFNbFYsS0FBSyxDQUFFUixNQUFPLEdBQUlzSCxJQUFLMnBCLEVBQU85dkIsSUFBSyxHQUFJLEVBQWpEMDdCLEtBQ0FsNUIsS0FBSzQ0QixVQUFZLENBQUEsR0FHaEIsR0FBSTllLENBQUFBLEVBQUd0YyxJQU1SLE9BRkE5RSxPQUFPQyxPQUFPbWhCLEVBQUksQ0FBRW5XLElBQUsycEIsRUFBTzl2QixJQUFLLEdBQUksRUFBekM5RSxLQUNBc0gsS0FBSzQ0QixVQUFZLENBQUM5ZSxFQUFHd0gsYUFKckJ4SCxFQUFHcmIsTUFBUTZ1QixFQU9mLE1BRUosSUFBSyxZQUNLeFQsRUFBS29mLEVBQUlubkIsTUFBTW1uQixFQUFJbm5CLE1BQU05WSxPQUFTLEdBQ3BDNmdCLEVBQUdyYixNQUNIeTZCLEVBQUlubkIsTUFBTWxWLEtBQUssQ0FBRVIsTUFBTyxHQUFJb0MsTUFBTzZ1QixFQUFPLEVBRTFDeFQsRUFBR3JiLE1BQVE2dUIsRUFDZixNQUVKLElBQUssa0JBQ0t4VCxFQUFLb2YsRUFBSW5uQixNQUFNbW5CLEVBQUlubkIsTUFBTTlZLE9BQVMsR0FPeEMsT0FOQSxLQUFJLENBQUM2Z0IsR0FBTUEsRUFBR3JiLE1BQ1Z5NkIsRUFBSW5uQixNQUFNbFYsS0FBSyxDQUFFUixNQUFPLEdBQUlzSCxJQUFLMnBCLEVBQU85dkIsSUFBSyxHQUFJLEVBQzVDc2MsRUFBR3RjLElBQ1JzYyxFQUFHcmIsTUFBUTZ1QixFQUVYNTBCLE9BQU9DLE9BQU9taEIsRUFBSSxDQUFFblcsSUFBSzJwQixFQUFPOXZCLElBQUssR0FBSSxHQUlqRCxRQUNJNjFCLE1BQU9yekIsS0FBSzZELElBQUssRUFDakJ3dkIsTUFBT3J6QixLQUFLNkQsSUFBSXlwQixDQUFLLENBQ3pDLENBQzhCLGFBQWI0TCxFQUFJaHJCLE1BQ1EsY0FBYmdyQixFQUFJaHJCLE1BQ1MsY0FBYmdyQixFQUFJaHJCLE1BQ1ksY0FBZm9mLEVBQU1wZixNQUF1QyxjQUFmb2YsRUFBTXBmLE9BQy9CdlQsRUFBTzJ5QixFQUFNdmIsTUFBTXViLEVBQU12YixNQUFNOVksT0FBUyxLQUUxQyxDQUFDMEIsRUFBSzZDLEtBQ04sQ0FBQzdDLEVBQUs4RCxPQUNjLEVBQXBCOUQsRUFBSzBCLE1BQU1wRCxRQUN1QixDQUFFLElBQXBDbS9CLEdBQWtCejlCLEVBQUswQixLQUFLLElBQ1YsSUFBakJpeEIsRUFBTXpTLFFBQ0hsZ0IsRUFBSzBCLE1BQU1pZSxNQUFNbVQsR0FBa0IsWUFBWkEsRUFBR3ZmLE1BQXNCdWYsRUFBRzVTLE9BQVN5UyxFQUFNelMsTUFBTSxLQUMzRCxhQUFicWUsRUFBSWhyQixLQUNKZ3JCLEVBQUk1OEIsSUFBTTNCLEVBQUswQixNQUVmNjhCLEVBQUlubkIsTUFBTWxWLEtBQUssQ0FBRVIsTUFBTzFCLEVBQUswQixNQUFPLEVBQ3hDaXhCLEVBQU12YixNQUFNblgsT0FBTyxDQUFBLEVBQUksQ0FBQyxFQUc1QyxNQW5GWXk0QixLQUFNLENBQUVubEIsS0FBTSxRQUFTcVgsT0FBUXZsQixLQUFLdWxCLE9BQVE1VixPQUFRLEdBQUlxYyxRQUR4Qyw2QkFDaUQsQ0FvRjdFLENBQ0ltTixVQUNJLE9BQVFuNUIsS0FBS2tPLE1BQ1QsSUFBSyxpQkFFRCxPQURBbWxCLEtBQUFBLEtBQU0sQ0FBRW5sQixLQUFNLFlBQWFxWCxPQUFRdmxCLEtBQUt1bEIsT0FBUTVWLE9BQVEzUCxLQUFLMlAsTUFBUSxHQUV6RSxJQUFLLGtCQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUVELE9BREEwakIsS0FBQUEsTUFBTXJ6QixLQUFLaTVCLGFBRWYsSUFBSyxXQUNMLElBQUssWUFDRCxJQUFNamtCLEVBQU0sQ0FDUjlHLEtBQU0sV0FDTnFYLE9BQVF2bEIsS0FBS3VsQixPQUNibHBCLE1BQU8sRUFDVixFQUlELE1BSGtCLGNBQWQyRCxLQUFLa08sTUFDTDhHLEVBQUkzWSxNQUFNUSxLQUFLbUQsS0FBS2k1QixXQUFXLEVBRG5DLEtBRUFqNUIsS0FBSzY0QixNQUFNaDhCLEtBQUttWSxDQUFHLENBR25DLENBQ1FxZSxLQUFNLENBQ0ZubEIsS0FBTSxRQUNOcVgsT0FBUXZsQixLQUFLdWxCLE9BQ2J5RyxzQkFBdUJoc0IsS0FBS2tPLDRCQUM1QnlCLE9BQVEzUCxLQUFLMlAsTUFDaEIsQ0FDVCxDQUNJeXBCLFVBQVVwa0IsR0FDTixHQUFJQSxFQUFJdlcsTUFDSixPQUFPNDBCLE1BQU9yekIsS0FBSzA1QixRQUFRMWtCLENBQUcsRUFDbEMsT0FBUWhWLEtBQUtrTyxNQUNULElBQUssWUFPRCxPQU5BLEtBQXFDLENBQUEsSUFBakNrcUIsR0FBa0JwakIsRUFBSTNZLEtBQUssR0FDM0JnM0IsTUFBT3J6QixLQUFLNkQsSUFBSyxFQUNqQnd2QixNQUFPcnpCLEtBQUtnNUIsS0FBTSxHQUdsQmhrQixFQUFJM1ksTUFBTVEsS0FBS21ELEtBQUtpNUIsV0FBVyxHQUd2QyxJQUFLLFNBQ0wsSUFBSyxNQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUVELE9BREFqa0IsS0FBQUEsRUFBSTNZLE1BQU1RLEtBQUttRCxLQUFLaTVCLFdBQVcsQ0FFL0MsQ0FDUSxJQUFNVSxFQUFLMzVCLEtBQUs0NUIsZ0JBQWdCNWtCLENBQUcsRUFDL0Iya0IsRUFDQTM1QixLQUFLNjRCLE1BQU1oOEIsS0FBSzg4QixDQUFFLEVBRWxCdEcsS0FBTSxDQUNGbmxCLEtBQU0sUUFDTnFYLE9BQVF2bEIsS0FBS3VsQixPQUNieUcsc0JBQXVCaHNCLEtBQUtrTyw4QkFDNUJ5QixPQUFRM1AsS0FBSzJQLE1BQ2hCLENBRWIsQ0FDSWtnQixRQUFRQSxHQUNKLEdBQWtCLGtCQUFkN3ZCLEtBQUtrTyxLQUEwQixDQUMvQixJQUNNN1IsRUFBUWs4QixHQURERCxHQUFhdDRCLEtBQUttMkIsS0FBSyxDQUFDLENBQUMsQ0FDRSxFQUN4Qzc4QixJQUFJa0UsRUFDQXF5QixFQUFPdnpCLE1BQ1BrQixFQUFNcXlCLEVBQU92ekIsS0FDVE8sS0FBS21ELEtBQUtpNUIsV0FBVyxFQUN6QixPQUFPcEosRUFBT3Z6QixLQUdka0IsRUFBTSxDQUFDd0MsS0FBS2k1QixhQUNWcGdDLEVBQU0sQ0FDUnFWLEtBQU0sWUFDTnFYLE9BQVFzSyxFQUFPdEssT0FDZjFLLE9BQVFnVixFQUFPaFYsT0FDZjlJLE1BQU8sQ0FBQyxDQUFFMVYsTUFBQUEsRUFBT3NILElBQUtrc0IsRUFBUXJ5QixJQUFBQSxDQUFLLEVBQ3RDLEVBQ0R3QyxLQUFLNDRCLFVBQVksQ0FBQSxFQUNqQjU0QixLQUFLNjRCLE1BQU03NEIsS0FBSzY0QixNQUFNNS9CLE9BQVMsR0FBS0osQ0FDaEQsTUFFWXc2QixNQUFPcnpCLEtBQUswNUIsUUFBUTdKLENBQU0sQ0FDdEMsQ0FDSXdKLGFBQWF4SixHQUNULE9BQVE3dkIsS0FBS2tPLE1BQ1QsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFVBRUQsT0FEQTJoQixLQUFBQSxFQUFPOVAsTUFBTWxqQixLQUFLbUQsS0FBS2k1QixXQUFXLEVBRXRDLElBQUssU0FLRCxHQUpBcEosRUFBT2xnQixPQUFTM1AsS0FBSzJQLE9BRXJCM1AsS0FBSzA0QixVQUFZLENBQUEsRUFDakIxNEIsS0FBSzZhLE9BQVMsRUFDVjdhLEtBQUt5NEIsVUFBVyxDQUNoQm4vQixJQUFJKzRCLEVBQUtyeUIsS0FBSzJQLE9BQU8vTSxRQUFRLElBQUksRUFBSSxFQUNyQyxLQUFjLElBQVB5dkIsR0FDSHJ5QixLQUFLeTRCLFVBQVV6NEIsS0FBS3VsQixPQUFTOE0sQ0FBRSxFQUMvQkEsRUFBS3J5QixLQUFLMlAsT0FBTy9NLFFBQVEsS0FBTXl2QixDQUFFLEVBQUksQ0FFN0QsQ0FDZ0JnQixNQUFPcnpCLEtBQUs2RCxJQUFLLEVBQ2pCLE1BRUosUUFDSXd2QixNQUFPcnpCLEtBQUs2RCxJQUFLLEVBQ2pCd3ZCLE1BQU9yekIsS0FBS2c1QixLQUFNLENBQ2xDLENBQ0EsQ0FDSU0sVUFBVXpnQyxHQUNOLElBQU1paEIsRUFBS2poQixFQUFJa1osTUFBTWxaLEVBQUlrWixNQUFNOVksT0FBUyxHQUV4QyxPQUFRK0csS0FBS2tPLE1BQ1QsSUFBSyxVQWdCRCxPQWZBbE8sS0FBSzQ0QixVQUFZLENBQUEsRUFBakI1NEIsS0FDSThaLEVBQUdyYixPQUNHbkMsRUFBTSxRQUFTd2QsRUFBR3JiLE1BQVFxYixFQUFHcmIsTUFBTW5DLElBQU1vSSxLQUFBQSxFQUU1QixhQURObk0sTUFBTUMsUUFBUThELENBQUcsRUFBSUEsRUFBSUEsRUFBSXJELE9BQVMsR0FBS3lMLEtBQUFBLElBQzlDd0osS0FDTjVSLEdBQUtPLEtBQUttRCxLQUFLaTVCLFdBQVcsRUFFMUJwZ0MsRUFBSWtaLE1BQU1sVixLQUFLLENBQUVSLE1BQU8sQ0FBQzJELEtBQUtpNUIsYUFBYyxJQUUzQ25mLEVBQUd0YyxLQUlSc2MsRUFBR3pkLE9BSElRLEtBQUttRCxLQUFLaTVCLFdBQVcsR0FNcEMsSUFBSyxRQUNMLElBQUssVUFDRCxHQUFJbmYsRUFBR3JiLE1BQ0g1RixFQUFJa1osTUFBTWxWLEtBQUssQ0FBRVIsTUFBTyxDQUFDMkQsS0FBS2k1QixhQUFjLE9BRTNDLEdBQUluZixFQUFHdGMsSUFDUnNjLEVBQUd0YyxJQUFJWCxLQUFLbUQsS0FBS2k1QixXQUFXLE1BRTNCLENBQ0QsR0FBSWo1QixLQUFLNjVCLGtCQUFrQi9mLEVBQUd6ZCxNQUFPeEQsRUFBSWdpQixNQUFNLEVBQUcsQ0FDOUMsSUFDTXZlLEVBRE96RCxFQUFJa1osTUFBTWxaLEVBQUlrWixNQUFNOVksT0FBUyxJQUN4QndGLE9BQU9uQyxJQUN6QixHQUFJL0QsTUFBTUMsUUFBUThELENBQUcsRUFJakIsT0FIQS9ELE1BQU11RCxVQUFVZSxLQUFLa0QsTUFBTXpELEVBQUt3ZCxFQUFHemQsS0FBSyxFQUN4Q0MsRUFBSU8sS0FBS21ELEtBQUtpNUIsV0FBVyxFQUR6QjFnQyxLQUVBTSxFQUFJa1osTUFBTWxPLElBQUssQ0FHM0MsQ0FDb0JpVyxFQUFHemQsTUFBTVEsS0FBS21ELEtBQUtpNUIsV0FBVyxDQUNsRCxDQUNnQixNQUNoQixDQUNRLEdBQUlqNUIsS0FBSzZhLFFBQVVoaUIsRUFBSWdpQixPQUFRLENBQzNCLElBb0UwQnhlLEVBcEVwQnk5QixFQUFjLENBQUM5NUIsS0FBSzQ0QixXQUFhNTRCLEtBQUs2YSxTQUFXaGlCLEVBQUlnaUIsT0FDckRrZixFQUFhRCxJQUNkaGdCLEVBQUd0YyxLQUFPc2MsRUFBR3dILGNBQ0EsaUJBQWR0aEIsS0FBS2tPLEtBRVQ1VSxJQUFJK0MsRUFBUSxHQUNaLEdBQUkwOUIsR0FBY2pnQixFQUFHdGMsS0FBTyxDQUFDc2MsRUFBR3JiLE1BQU8sQ0FDbkMsSUFBTTR6QixFQUFLLEdBQ1gsSUFBSy80QixJQUFJSSxFQUFJLEVBQUdBLEVBQUlvZ0IsRUFBR3RjLElBQUl2RSxPQUFRLEVBQUVTLEVBQUcsQ0FDcEMsSUFBTSt6QixFQUFLM1QsRUFBR3RjLElBQUk5RCxHQUNsQixPQUFRK3pCLEVBQUd2ZixNQUNQLElBQUssVUFDRG1rQixFQUFHeDFCLEtBQUtuRCxDQUFDLEVBQ1QsTUFDSixJQUFLLFFBQ0QsTUFDSixJQUFLLFVBQ0crekIsRUFBRzVTLE9BQVNoaUIsRUFBSWdpQixTQUNoQndYLEVBQUdwNUIsT0FBUyxHQUNoQixNQUNKLFFBQ0lvNUIsRUFBR3A1QixPQUFTLENBQ3hDLENBQ0EsQ0FDaUMsR0FBYm81QixFQUFHcDVCLFNBQ0hvRCxFQUFReWQsRUFBR3RjLElBQUk1QyxPQUFPeTNCLEVBQUcsRUFBRSxFQUMvQyxDQUNZLE9BQVFyeUIsS0FBS2tPLE1BQ1QsSUFBSyxTQUNMLElBQUssTUFZRCxPQVhBLEtBQUk2ckIsR0FBY2pnQixFQUFHcmIsT0FDakJwQyxFQUFNUSxLQUFLbUQsS0FBS2k1QixXQUFXLEVBQzNCcGdDLEVBQUlrWixNQUFNbFYsS0FBSyxDQUFFUixNQUFBQSxDQUFLLENBQUUsRUFDeEIyRCxLQUFLNDRCLFVBQVksQ0FBQSxJQUVaOWUsRUFBR3RjLEtBSVJzYyxFQUFHemQsT0FISVEsS0FBS21ELEtBQUtpNUIsV0FBVyxHQU1wQyxJQUFLLG1CQWtCRCxPQWpCS25mLEVBQUd0YyxLQUFRc2MsRUFBR3dILFlBSVZ5WSxHQUFjamdCLEVBQUdyYixPQUN0QnBDLEVBQU1RLEtBQUttRCxLQUFLaTVCLFdBQVcsRUFDM0JwZ0MsRUFBSWtaLE1BQU1sVixLQUFLLENBQUVSLE1BQUFBLEVBQU9pbEIsWUFBYSxDQUFBLEVBQU0sR0FHM0N0aEIsS0FBSzY0QixNQUFNaDhCLEtBQUssQ0FDWnFSLEtBQU0sWUFDTnFYLE9BQVF2bEIsS0FBS3VsQixPQUNiMUssT0FBUTdhLEtBQUs2YSxPQUNiOUksTUFBTyxDQUFDLENBQUUxVixNQUFPLENBQUMyRCxLQUFLaTVCLGFBQWMzWCxZQUFhLENBQUEsQ0FBTSxFQUNwRixDQUF5QixHQWJEeEgsRUFBR3pkLE1BQU1RLEtBQUttRCxLQUFLaTVCLFdBQVcsRUFDOUJuZixFQUFHd0gsWUFBYyxDQUFBLEdBRnJCLEtBZ0JBdGhCLEtBQUs0NEIsVUFBWSxDQUFBLEdBRXJCLElBQUssZ0JBd0VELE9BdkVJOWUsRUFBR3dILFlBQ0V4SCxFQUFHdGMsSUFjQ3NjLEVBQUdyYixNQUNSNUYsRUFBSWtaLE1BQU1sVixLQUFLLENBQUVSLE1BQU8sR0FBSXNILElBQUssS0FBTW5HLElBQUssQ0FBQ3dDLEtBQUtpNUIsWUFBWSxDQUFFLEVBRTNEZixHQUFjcGUsRUFBR3RjLElBQUssZUFBZSxFQUMxQ3dDLEtBQUs2NEIsTUFBTWg4QixLQUFLLENBQ1pxUixLQUFNLFlBQ05xWCxPQUFRdmxCLEtBQUt1bEIsT0FDYjFLLE9BQVE3YSxLQUFLNmEsT0FDYjlJLE1BQU8sQ0FBQyxDQUFFMVYsTUFBQUEsRUFBT3NILElBQUssS0FBTW5HLElBQUssQ0FBQ3dDLEtBQUtpNUIsWUFBYyxFQUNyRixDQUE2QixFQUVJWixHQUFZdmUsRUFBR25XLEdBQUcsR0FDdkIsQ0FBQ3UwQixHQUFjcGUsRUFBR3RjLElBQUssU0FBUyxHQUMxQm5CLEVBQVFrOEIsR0FBc0J6ZSxFQUFHemQsS0FBSyxFQUN0Q3NILEVBQU1tVyxFQUFHblcsS0FDVG5HLEVBQU1zYyxFQUFHdGMsS0FDWFgsS0FBS21ELEtBQUtpNUIsV0FBVyxFQUV6QixPQUFPbmYsRUFBR25XLElBRVYsT0FBT21XLEVBQUd0YyxJQUNWd0MsS0FBSzY0QixNQUFNaDhCLEtBQUssQ0FDWnFSLEtBQU0sWUFDTnFYLE9BQVF2bEIsS0FBS3VsQixPQUNiMUssT0FBUTdhLEtBQUs2YSxPQUNiOUksTUFBTyxDQUFDLENBQUUxVixNQUFBQSxFQUFPc0gsSUFBQUEsRUFBS25HLElBQUFBLENBQUssRUFDM0QsQ0FBNkIsR0FFbUIsRUFBZm5CLEVBQU1wRCxPQUVYNmdCLEVBQUd0YyxJQUFNc2MsRUFBR3RjLElBQUlWLE9BQU9ULEVBQU8yRCxLQUFLaTVCLFdBQVcsRUFHOUNuZixFQUFHdGMsSUFBSVgsS0FBS21ELEtBQUtpNUIsV0FBVyxFQTlDeEJmLEdBQWNwZSxFQUFHemQsTUFBTyxTQUFTLEVBQ2pDM0QsT0FBT0MsT0FBT21oQixFQUFJLENBQUVuVyxJQUFLLEtBQU1uRyxJQUFLLENBQUN3QyxLQUFLaTVCLGFBQWMsR0FHbEQ1OEIsRUFBUWs4QixHQUFzQnplLEVBQUd6ZCxLQUFLLEVBQzVDMkQsS0FBSzY0QixNQUFNaDhCLEtBQUssQ0FDWnFSLEtBQU0sWUFDTnFYLE9BQVF2bEIsS0FBS3VsQixPQUNiMUssT0FBUTdhLEtBQUs2YSxPQUNiOUksTUFBTyxDQUFDLENBQUUxVixNQUFBQSxFQUFPc0gsSUFBSyxLQUFNbkcsSUFBSyxDQUFDd0MsS0FBS2k1QixZQUFjLEVBQ3pGLENBQWlDLEdBd0NKbmYsRUFBR3RjLElBR0NzYyxFQUFHcmIsT0FBU3M3QixFQUNqQmxoQyxFQUFJa1osTUFBTWxWLEtBQUssQ0FBRVIsTUFBQUEsRUFBT3NILElBQUssS0FBTW5HLElBQUssQ0FBQ3dDLEtBQUtpNUIsWUFBWSxDQUFFLEVBRXZEZixHQUFjcGUsRUFBR3RjLElBQUssZUFBZSxFQUMxQ3dDLEtBQUs2NEIsTUFBTWg4QixLQUFLLENBQ1pxUixLQUFNLFlBQ05xWCxPQUFRdmxCLEtBQUt1bEIsT0FDYjFLLE9BQVE3YSxLQUFLNmEsT0FDYjlJLE1BQU8sQ0FBQyxDQUFFMVYsTUFBTyxHQUFJc0gsSUFBSyxLQUFNbkcsSUFBSyxDQUFDd0MsS0FBS2k1QixZQUFjLEVBQ3pGLENBQTZCLEVBR0RuZixFQUFHdGMsSUFBSVgsS0FBS21ELEtBQUtpNUIsV0FBVyxFQWQ1QnZnQyxPQUFPQyxPQUFPbWhCLEVBQUksQ0FBRW5XLElBQUssS0FBTW5HLElBQUssQ0FBQ3dDLEtBQUtpNUIsYUFBYyxFQXJEaEUsS0FzRUFqNUIsS0FBSzQ0QixVQUFZLENBQUEsR0FFckIsSUFBSyxRQUNMLElBQUssU0FDTCxJQUFLLHVCQUNMLElBQUssdUJBQ0QsSUFBTW9CLEVBQUtoNkIsS0FBS2k2QixXQUFXajZCLEtBQUtrTyxJQUFJLEVBWXBDLE9BWEEsS0FBSTZyQixHQUFjamdCLEVBQUdyYixPQUNqQjVGLEVBQUlrWixNQUFNbFYsS0FBSyxDQUFFUixNQUFBQSxFQUFPc0gsSUFBS3EyQixFQUFJeDhCLElBQUssR0FBSSxFQUMxQ3dDLEtBQUs0NEIsVUFBWSxDQUFBLEdBRVo5ZSxFQUFHdGMsSUFDUndDLEtBQUs2NEIsTUFBTWg4QixLQUFLbTlCLENBQUUsR0FHbEJ0aEMsT0FBT0MsT0FBT21oQixFQUFJLENBQUVuVyxJQUFLcTJCLEVBQUl4OEIsSUFBSyxHQUFJLEVBQ3RDd0MsS0FBSzQ0QixVQUFZLENBQUEsSUFJekIsUUFDSSxJQUFNZSxFQUFLMzVCLEtBQUs0NUIsZ0JBQWdCL2dDLENBQUcsRUFDbkMsR0FBSThnQyxFQUtBLE9BSklHLEdBQTJCLGNBQVpILEVBQUd6ckIsTUFDbEJyVixFQUFJa1osTUFBTWxWLEtBQUssQ0FBRVIsTUFBQUEsQ0FBSyxDQUFFLEVBRDVCLEtBR0EyRCxLQUFLNjRCLE1BQU1oOEIsS0FBSzg4QixDQUFFLENBSTFDLENBQ0EsQ0FDUXRHLE1BQU9yekIsS0FBSzZELElBQUssRUFDakJ3dkIsTUFBT3J6QixLQUFLZzVCLEtBQU0sQ0FDMUIsQ0FDSU8sZUFBZWxWLEdBQ1gsSUFBTXZLLEVBQUt1SyxFQUFJdFMsTUFBTXNTLEVBQUl0UyxNQUFNOVksT0FBUyxHQUN4QyxPQUFRK0csS0FBS2tPLE1BQ1QsSUFBSyxVQVdELE9BVkEsS0FBSTRMLEVBQUdyYixPQUNHbkMsRUFBTSxRQUFTd2QsRUFBR3JiLE1BQVFxYixFQUFHcmIsTUFBTW5DLElBQU1vSSxLQUFBQSxFQUU1QixhQURObk0sTUFBTUMsUUFBUThELENBQUcsRUFBSUEsRUFBSUEsRUFBSXJELE9BQVMsR0FBS3lMLEtBQUFBLElBQzlDd0osS0FDTjVSLEdBQUtPLEtBQUttRCxLQUFLaTVCLFdBQVcsRUFFMUI1VSxFQUFJdFMsTUFBTWxWLEtBQUssQ0FBRVIsTUFBTyxDQUFDMkQsS0FBS2k1QixhQUFjLEdBR2hEbmYsRUFBR3pkLE1BQU1RLEtBQUttRCxLQUFLaTVCLFdBQVcsR0FFdEMsSUFBSyxRQUNMLElBQUssVUFDRCxHQUFJbmYsRUFBR3JiLE1BQ0g0bEIsRUFBSXRTLE1BQU1sVixLQUFLLENBQUVSLE1BQU8sQ0FBQzJELEtBQUtpNUIsYUFBYyxNQUMzQyxDQUNELEdBQUlqNUIsS0FBSzY1QixrQkFBa0IvZixFQUFHemQsTUFBT2dvQixFQUFJeEosTUFBTSxFQUFHLENBQzlDLElBQ012ZSxFQURPK25CLEVBQUl0UyxNQUFNc1MsRUFBSXRTLE1BQU05WSxPQUFTLElBQ3hCd0YsT0FBT25DLElBQ3pCLEdBQUkvRCxNQUFNQyxRQUFROEQsQ0FBRyxFQUlqQixPQUhBL0QsTUFBTXVELFVBQVVlLEtBQUtrRCxNQUFNekQsRUFBS3dkLEVBQUd6ZCxLQUFLLEVBQ3hDQyxFQUFJTyxLQUFLbUQsS0FBS2k1QixXQUFXLEVBRHpCMWdDLEtBRUE4ckIsRUFBSXRTLE1BQU1sTyxJQUFLLENBRzNDLENBQ29CaVcsRUFBR3pkLE1BQU1RLEtBQUttRCxLQUFLaTVCLFdBQVcsQ0FDbEQsQ0FDZ0IsT0FDSixJQUFLLFNBQ0wsSUFBSyxNQUNELEdBQUluZixFQUFHcmIsT0FBU3VCLEtBQUs2YSxRQUFVd0osRUFBSXhKLE9BQy9CLE1BRUosT0FEQWYsS0FBQUEsRUFBR3pkLE1BQU1RLEtBQUttRCxLQUFLaTVCLFdBQVcsRUFFbEMsSUFBSyxlQUNELEdBQUlqNUIsS0FBSzZhLFNBQVd3SixFQUFJeEosT0FDcEIsTUFLSixPQUpBLEtBQUlmLEVBQUdyYixPQUFTeTVCLEdBQWNwZSxFQUFHemQsTUFBTyxjQUFjLEVBQ2xEZ29CLEVBQUl0UyxNQUFNbFYsS0FBSyxDQUFFUixNQUFPLENBQUMyRCxLQUFLaTVCLGFBQWMsRUFFNUNuZixFQUFHemQsTUFBTVEsS0FBS21ELEtBQUtpNUIsV0FBVyxFQUVsRCxDQUNRLEdBQUlqNUIsS0FBSzZhLE9BQVN3SixFQUFJeEosT0FBUSxDQUMxQixJQUFNOGUsRUFBSzM1QixLQUFLNDVCLGdCQUFnQnZWLENBQUcsRUFDbkMsR0FBSXNWLEVBRUEsT0FEQTM1QixLQUFBQSxLQUFLNjRCLE1BQU1oOEIsS0FBSzg4QixDQUFFLENBR2xDLENBQ1F0RyxNQUFPcnpCLEtBQUs2RCxJQUFLLEVBQ2pCd3ZCLE1BQU9yekIsS0FBS2c1QixLQUFNLENBQzFCLENBQ0lRLGdCQUFnQjdMLEdBQ1osSUFFUXVMLEVBRkZwZixFQUFLNlQsRUFBRzViLE1BQU00YixFQUFHNWIsTUFBTTlZLE9BQVMsR0FDdEMsR0FBa0IsbUJBQWQrRyxLQUFLa08sS0FFTCxLQUNJbWxCLE1BQU9yekIsS0FBSzZELElBQUssR0FDakJxMUIsRUFBTWw1QixLQUFLbTJCLEtBQUssQ0FBQyxJQUNRLG9CQUFiK0MsRUFBSWhyQixZQUVuQixHQUFzQixJQUFsQnlmLEVBQUdyeEIsSUFBSXJELE9BQWMsQ0FDMUIsT0FBUStHLEtBQUtrTyxNQUNULElBQUssUUFDTCxJQUFLLG1CQUtELE9BSkEsS0FBSSxDQUFDNEwsR0FBTUEsRUFBR3RjLElBQ1Ztd0IsRUFBRzViLE1BQU1sVixLQUFLLENBQUVSLE1BQU8sQ0FBQzJELEtBQUtpNUIsYUFBYyxFQUUzQ25mLEVBQUd6ZCxNQUFNUSxLQUFLbUQsS0FBS2k1QixXQUFXLEdBRXRDLElBQUssZ0JBT0QsT0FOQSxLQUFJLENBQUNuZixHQUFNQSxFQUFHcmIsTUFDVmt2QixFQUFHNWIsTUFBTWxWLEtBQUssQ0FBRVIsTUFBTyxHQUFJc0gsSUFBSyxLQUFNbkcsSUFBSyxDQUFDd0MsS0FBS2k1QixZQUFZLENBQUUsRUFDMURuZixFQUFHdGMsSUFDUnNjLEVBQUd0YyxJQUFJWCxLQUFLbUQsS0FBS2k1QixXQUFXLEVBRTVCdmdDLE9BQU9DLE9BQU9taEIsRUFBSSxDQUFFblcsSUFBSyxLQUFNbkcsSUFBSyxDQUFDd0MsS0FBS2k1QixhQUFjLEdBRWhFLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxVQUNMLElBQUssU0FDTCxJQUFLLE1BT0QsT0FOQSxLQUFJLENBQUNuZixHQUFNQSxFQUFHcmIsTUFDVmt2QixFQUFHNWIsTUFBTWxWLEtBQUssQ0FBRVIsTUFBTyxDQUFDMkQsS0FBS2k1QixhQUFjLEdBQ3RDbmYsRUFBR3RjLEtBR1JzYyxFQUFHemQsT0FGSVEsS0FBS21ELEtBQUtpNUIsV0FBVyxHQUlwQyxJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssdUJBQ0wsSUFBSyx1QkFDRCxJQUFNZSxFQUFLaDZCLEtBQUtpNkIsV0FBV2o2QixLQUFLa08sSUFBSSxFQU9wQyxPQU5BLEtBQUksQ0FBQzRMLEdBQU1BLEVBQUdyYixNQUNWa3ZCLEVBQUc1YixNQUFNbFYsS0FBSyxDQUFFUixNQUFPLEdBQUlzSCxJQUFLcTJCLEVBQUl4OEIsSUFBSyxHQUFJLEVBQ3hDc2MsRUFBR3RjLElBQ1J3QyxLQUFLNjRCLE1BQU1oOEIsS0FBS205QixDQUFFLEVBRWxCdGhDLE9BQU9DLE9BQU9taEIsRUFBSSxDQUFFblcsSUFBS3EyQixFQUFJeDhCLElBQUssR0FBSSxHQUc5QyxJQUFLLGVBQ0wsSUFBSyxlQUVELE9BREFtd0IsS0FBQUEsRUFBR3J4QixJQUFJTyxLQUFLbUQsS0FBS2k1QixXQUFXLENBRWhELENBQ1ksSUFBTVUsRUFBSzM1QixLQUFLNDVCLGdCQUFnQmpNLENBQUUsRUFFOUJnTSxFQUNBMzVCLEtBQUs2NEIsTUFBTWg4QixLQUFLODhCLENBQUUsR0FFbEJ0RyxNQUFPcnpCLEtBQUs2RCxJQUFLLEVBQ2pCd3ZCLE1BQU9yekIsS0FBS2c1QixLQUFNLEVBRWxDLEtBQ2EsQ0FDRCxJQWFVeDdCLEVBYkp1VixFQUFTL1MsS0FBS20yQixLQUFLLENBQUMsRUFDTixjQUFoQnBqQixFQUFPN0UsT0FDUyxrQkFBZGxPLEtBQUtrTyxNQUE0QjZFLEVBQU84SCxTQUFXOFMsRUFBRzlTLFFBQ3JDLFlBQWQ3YSxLQUFLa08sTUFDRixDQUFDNkUsRUFBT2hCLE1BQU1nQixFQUFPaEIsTUFBTTlZLE9BQVMsR0FBR3VFLE1BQy9DNjFCLE1BQU9yekIsS0FBSzZELElBQUssRUFDakJ3dkIsTUFBT3J6QixLQUFLZzVCLEtBQU0sR0FFQyxrQkFBZGg1QixLQUFLa08sTUFDTSxvQkFBaEI2RSxFQUFPN0UsTUFFRDdSLEVBQVFrOEIsR0FEREQsR0FBYXZsQixDQUFNLENBQ1EsRUFDeEN5bEIsR0FBZ0I3SyxDQUFFLEdBQ1pud0IsRUFBTW13QixFQUFHcnhCLElBQUkxQixPQUFPLEVBQUcreUIsRUFBR3J4QixJQUFJckQsTUFBTSxHQUN0QzRELEtBQUttRCxLQUFLaTVCLFdBQVcsRUFDbkJwZ0MsRUFBTSxDQUNScVYsS0FBTSxZQUNOcVgsT0FBUW9JLEVBQUdwSSxPQUNYMUssT0FBUThTLEVBQUc5UyxPQUNYOUksTUFBTyxDQUFDLENBQUUxVixNQUFBQSxFQUFPc0gsSUFBS2dxQixFQUFJbndCLElBQUFBLENBQUssRUFDbEMsRUFDRHdDLEtBQUs0NEIsVUFBWSxDQUFBLEVBQ2pCNTRCLEtBQUs2NEIsTUFBTTc0QixLQUFLNjRCLE1BQU01L0IsT0FBUyxHQUFLSixHQUdwQ3c2QixNQUFPcnpCLEtBQUswNUIsUUFBUS9MLENBQUUsQ0FFdEMsQ0FDQSxDQUNJc00sV0FBVy9yQixHQUNQLEdBQUlsTyxLQUFLeTRCLFVBQVcsQ0FDaEJuL0IsSUFBSSs0QixFQUFLcnlCLEtBQUsyUCxPQUFPL00sUUFBUSxJQUFJLEVBQUksRUFDckMsS0FBYyxJQUFQeXZCLEdBQ0hyeUIsS0FBS3k0QixVQUFVejRCLEtBQUt1bEIsT0FBUzhNLENBQUUsRUFDL0JBLEVBQUtyeUIsS0FBSzJQLE9BQU8vTSxRQUFRLEtBQU15dkIsQ0FBRSxFQUFJLENBRXJELENBQ1EsTUFBTyxDQUNIbmtCLEtBQUFBLEVBQ0FxWCxPQUFRdmxCLEtBQUt1bEIsT0FDYjFLLE9BQVE3YSxLQUFLNmEsT0FDYmxMLE9BQVEzUCxLQUFLMlAsTUFDaEIsQ0FDVCxDQUNJaXFCLGdCQUFnQjdtQixHQUNaLE9BQVEvUyxLQUFLa08sTUFDVCxJQUFLLFFBQ0wsSUFBSyxTQUNMLElBQUssdUJBQ0wsSUFBSyx1QkFDRCxPQUFPbE8sS0FBS2k2QixXQUFXajZCLEtBQUtrTyxJQUFJLEVBQ3BDLElBQUssc0JBQ0QsTUFBTyxDQUNIQSxLQUFNLGVBQ05xWCxPQUFRdmxCLEtBQUt1bEIsT0FDYjFLLE9BQVE3YSxLQUFLNmEsT0FDYmtGLE1BQU8sQ0FBQy9mLEtBQUtpNUIsYUFDYnRwQixPQUFRLEVBQ1gsRUFDTCxJQUFLLGlCQUNMLElBQUssaUJBQ0QsTUFBTyxDQUNIekIsS0FBTSxrQkFDTnFYLE9BQVF2bEIsS0FBS3VsQixPQUNiMUssT0FBUTdhLEtBQUs2YSxPQUNieGUsTUFBTzJELEtBQUtpNUIsWUFDWmxuQixNQUFPLEdBQ1B6VixJQUFLLEVBQ1IsRUFDTCxJQUFLLGVBQ0QsTUFBTyxDQUNINFIsS0FBTSxZQUNOcVgsT0FBUXZsQixLQUFLdWxCLE9BQ2IxSyxPQUFRN2EsS0FBSzZhLE9BQ2I5SSxNQUFPLENBQUMsQ0FBRTFWLE1BQU8sQ0FBQzJELEtBQUtpNUIsWUFBYyxFQUN4QyxFQUNMLElBQUssbUJBQ0RqNUIsS0FBSzQ0QixVQUFZLENBQUEsRUFDakIsSUFDTXY4QixFQUFRazhCLEdBRERELEdBQWF2bEIsQ0FBTSxDQUNRLEVBRXhDLE9BREExVyxFQUFNUSxLQUFLbUQsS0FBS2k1QixXQUFXLEVBQ3BCLENBQ0gvcUIsS0FBTSxZQUNOcVgsT0FBUXZsQixLQUFLdWxCLE9BQ2IxSyxPQUFRN2EsS0FBSzZhLE9BQ2I5SSxNQUFPLENBQUMsQ0FBRTFWLE1BQUFBLEVBQU9pbEIsWUFBYSxDQUFBLENBQU0sRUFDdkMsRUFFTCxJQUFLLGdCQUNEdGhCLEtBQUs0NEIsVUFBWSxDQUFBLEVBRVh2OEIsRUFBUWs4QixHQURERCxHQUFhdmxCLENBQU0sQ0FDUSxFQUN4QyxNQUFPLENBQ0g3RSxLQUFNLFlBQ05xWCxPQUFRdmxCLEtBQUt1bEIsT0FDYjFLLE9BQVE3YSxLQUFLNmEsT0FDYjlJLE1BQU8sQ0FBQyxDQUFFMVYsTUFBQUEsRUFBT3NILElBQUssS0FBTW5HLElBQUssQ0FBQ3dDLEtBQUtpNUIsWUFBYyxFQUN4RCxDQUVqQixDQUNRLE9BQU8sSUFDZixDQUNJWSxrQkFBa0J4OUIsRUFBT3dlLEdBQ3JCLE1BQWtCLFlBQWQ3YSxLQUFLa08sTUFFTGxPLEVBQUFBLEtBQUs2YSxRQUFVQSxJQUVaeGUsRUFBTWllLE1BQU1tVCxHQUFrQixZQUFaQSxFQUFHdmYsTUFBa0MsVUFBWnVmLEVBQUd2ZixJQUFnQixDQUM3RSxDQUNJdXJCLGFBQWE1bEIsR0FDUyxhQUFkN1QsS0FBS2tPLE9BQ0QyRixFQUFPdlgsSUFDUHVYLEVBQU92WCxJQUFJTyxLQUFLbUQsS0FBS2k1QixXQUFXLEVBRWhDcGxCLEVBQU92WCxJQUFNLENBQUMwRCxLQUFLaTVCLGFBQ0wsWUFBZGo1QixLQUFLa08sUUFDTG1sQixNQUFPcnpCLEtBQUs2RCxJQUFLLEVBRWpDLENBQ0k2MUIsU0FBU3BNLEdBQ0wsT0FBUXR0QixLQUFLa08sTUFDVCxJQUFLLFFBQ0wsSUFBSyxZQUNMLElBQUssVUFDTCxJQUFLLGVBQ0wsSUFBSyxlQUNMLElBQUssZ0JBQ0RtbEIsTUFBT3J6QixLQUFLNkQsSUFBSyxFQUNqQnd2QixNQUFPcnpCLEtBQUtnNUIsS0FBTSxFQUNsQixNQUNKLElBQUssVUFDRGg1QixLQUFLNDRCLFVBQVksQ0FBQSxFQUlyQixRQUVRdEwsRUFBTWh4QixJQUNOZ3hCLEVBQU1oeEIsSUFBSU8sS0FBS21ELEtBQUtpNUIsV0FBVyxFQUUvQjNMLEVBQU1oeEIsSUFBTSxDQUFDMEQsS0FBS2k1QixhQUNKLFlBQWRqNUIsS0FBS2tPLE9BQ0xtbEIsTUFBT3J6QixLQUFLNkQsSUFBSyxFQUNyQyxDQUNBLENBQ0EsQ0MvNkJBLFNBQVNxMkIsR0FBYTVoQyxHQUNsQixJQUFNcXlCLEVBQXdDLENBQUEsSUFBekJyeUIsRUFBUXF5QixhQUU3QixNQUFPLENBQUV3UCxZQURXN2hDLEVBQVE2aEMsYUFBZ0J4UCxHQUFnQixJQUFJa04sSUFBa0IsS0FDNURsTixhQUFBQSxDQUFjLENBQ3hDLENBVUEsU0FBU3lQLEdBQWtCenFCLEVBQVFyWCxFQUFVLElBQ3pDLEdBQU0sQ0FBRTZoQyxZQUFBQSxFQUFheFAsYUFBQUEsR0FBaUJ1UCxHQUFhNWhDLENBQU8sRUFDcEQraEMsRUFBUyxJQUFJeHJCLEdBQU9zckIsR0FBYXJDLFVBQVUsRUFDM0N3QyxFQUFXLElBQUl6SCxHQUFTdjZCLENBQU8sRUFDL0JpaUMsRUFBT2hpQyxNQUFNMkQsS0FBS28rQixFQUFTcEgsUUFBUW1ILEVBQU92eUIsTUFBTTZILENBQU0sQ0FBQyxDQUFDLEVBQzlELEdBQUlnYixHQUFnQndQLEVBQ2hCLElBQUssSUFBTW5sQixLQUFPdWxCLEVBQ2R2bEIsRUFBSXVWLE9BQU9ob0IsUUFBUTRwQixHQUFjeGMsRUFBUXdxQixDQUFXLENBQUMsRUFDckRubEIsRUFBSXdWLFNBQVNqb0IsUUFBUTRwQixHQUFjeGMsRUFBUXdxQixDQUFXLENBQUMsRUFFL0QsT0FBa0IsRUFBZEksRUFBS3RoQyxPQUNFc2hDLEVBQ0o3aEMsT0FBT0MsT0FBTyxHQUFJLENBQUU2aEMsTUFBTyxDQUFBLENBQU0sRUFBRUYsRUFBU3JILFlBQVksQ0FDbkUsQ0FFQSxTQUFTc0QsR0FBYzVtQixFQUFRclgsRUFBVSxJQUNyQyxJQUtXbWlDLEVBTEwsQ0FBRU4sWUFBQUEsRUFBYXhQLGFBQUFBLEdBQWlCdVAsR0FBYTVoQyxDQUFPLEVBQ3BEK2hDLEVBQVMsSUFBSXhyQixHQUFPc3JCLEdBQWFyQyxVQUFVLEVBR2pEeCtCLElBQUkwYixFQUFNLEtBQ1YsSUFBV3lsQixLQUhNLElBQUk1SCxHQUFTdjZCLENBQU8sRUFHVDQ2QixRQUFRbUgsRUFBT3Z5QixNQUFNNkgsQ0FBTSxFQUFHLENBQUEsRUFBTUEsRUFBTzFXLE1BQU0sRUFDekUsR0FBSytiLEdBRUEsR0FBNkIsV0FBekJBLEVBQUkxYyxRQUFRNm5CLFNBQXVCLENBQ3hDbkwsRUFBSXVWLE9BQU8xdEIsS0FBSyxJQUFJb3ZCLEdBQWV3TyxFQUFLempCLE1BQU1uZCxNQUFNLEVBQUcsQ0FBQyxFQUFHLGdCQUFpQix5RUFBeUUsQ0FBQyxFQUN0SixLQUNaLENBQUEsTUFKWW1iLEVBQU15bEIsRUFVZCxPQUpJOVAsR0FBZ0J3UCxJQUNoQm5sQixFQUFJdVYsT0FBT2hvQixRQUFRNHBCLEdBQWN4YyxFQUFRd3FCLENBQVcsQ0FBQyxFQUNyRG5sQixFQUFJd1YsU0FBU2pvQixRQUFRNHBCLEdBQWN4YyxFQUFRd3FCLENBQVcsQ0FBQyxHQUVwRG5sQixDQUNYLENBQ0EsU0FBU2xOLEdBQU1tUSxFQUFLaEMsRUFBUzNkLEdBQ3pCZ0IsSUFBSW9oQyxFQUFXaDJCLEtBQUFBLEVBT1RzUSxHQU5pQixZQUFuQixPQUFPaUIsRUFDUHlrQixFQUFXemtCLEVBRU12UixLQUFBQSxJQUFacE0sR0FBeUIyZCxHQUE4QixVQUFuQixPQUFPQSxJQUNoRDNkLEVBQVUyZCxHQUVGc2dCLEdBQWN0ZSxFQUFLM2YsQ0FBTyxHQUN0QyxHQUFJLENBQUMwYyxFQUNELE9BQU8sS0FFWCxHQURBQSxFQUFJd1YsU0FBU2pvQixRQUFRNmQsR0FBV0YsR0FBS2xMLEVBQUkxYyxRQUFRNm5CLFNBQVVDLENBQU8sQ0FBQyxFQUMzQyxFQUFwQnBMLEVBQUl1VixPQUFPdHhCLE9BQVksQ0FDdkIsR0FBNkIsV0FBekIrYixFQUFJMWMsUUFBUTZuQixTQUNaLE1BQU1uTCxFQUFJdVYsT0FBTyxHQUVqQnZWLEVBQUl1VixPQUFTLEVBQ3pCLENBQ0ksT0FBT3ZWLEVBQUlxQixLQUFLM2QsT0FBT0MsT0FBTyxDQUFFc2QsUUFBU3lrQixHQUFZcGlDLENBQU8sQ0FBQyxDQUNqRSxDQUNBLFNBQVNpSCxHQUFVZCxFQUFPaWxCLEVBQVVwckIsR0FDaENnQixJQUFJbXhCLEVBQVksS0FhaEIsR0Fad0IsWUFBcEIsT0FBTy9HLEdBQTJCbnJCLE1BQU1DLFFBQVFrckIsQ0FBUSxFQUN4RCtHLEVBQVkvRyxFQUVLaGYsS0FBQUEsSUFBWnBNLEdBQXlCb3JCLElBQzlCcHJCLEVBQVVvckIsR0FJUyxVQUFuQixPQURBcHJCLEVBRG1CLFVBQW5CLE9BQU9BLEVBQ0dBLEVBQVFXLE9BQ1hYLEtBRVBBLEdBRE11aUIsRUFBU3BlLEtBQUtrK0IsTUFBTXJpQyxDQUFPLEdBQ2QsRUFBSW9NLEtBQUFBLEVBQXFCLEVBQVRtVyxFQUFhLENBQUVBLE9BQVEsR0FBTSxDQUFFQSxPQUFBQSxDQUFRLEdBRWhFblcsS0FBQUEsSUFBVmpHLEVBQXFCLENBQ3JCLElBQVFrYixHQUFrQnJoQixHQUFXb3JCLEdBQVksSUFBNUIsY0FDckIsR0FBSSxDQUFDL0osRUFDRCxNQUNaLENBQ0ksT0FBSWhKLEdBQVdsUyxDQUFLLEdBQUssQ0FBQ2dzQixFQUNmaHNCLEVBQ0osSUFBSTZyQixHQUFTN3JCLEVBQU9nc0IsRUFBV255QixDQUFPLEdBRDVCMEssU0FBUzFLLENBQU8sQ0FFckMsaTFCQ2xHQUksT0FBT21lLGVBQWN6YyxFQUFVLGFBQWMsQ0FBRXFFLE1BQU8sQ0FBQSxFQUFNLEVBQzVEckUsRUFBQXdnQyxXQUFxQnhnQyxFQUEyQnlnQyxpQkFBQXpnQyxFQUFBMGdDLFlBQXNCMWdDLEVBQXdCMmdDLGNBQUEzZ0MsRUFBQW1GLFVBQW9CbkYsWUFBb0JBLEVBQXFCNGdDLFdBQUE1Z0MsRUFBQXdELElBQWN4RCxFQUFZTCxFQUFBSyxFQUFBNmdDLElBQWM3Z0MsRUFBZ0I4Z0MsTUFBQTlnQyxFQUFBK2dDLEtBQWUvZ0MsRUFBcUJnaEMsV0FBQWhoQyxFQUFBaWhDLFlBQXNCMzJCLEtBQUFBLFFBRXZRMjJCLEdBRU5qaEMsRUFBQWloQyxZQUFzQkEsRUFDdEJqaEMsRUFBQWdoQyxXQUFxQiw4QkFDZkQsVUFBYUUsRUFDZmw5QixZQUFZcW9CLEdBRVIsR0FEQWxQLE1BQU8sRUFDSCxDQUFDbGQsRUFBUWdoQyxXQUFXeGhDLEtBQUs0c0IsQ0FBQyxFQUMxQixNQUFNLElBQUlybUIsTUFBTSwwQ0FBMEMsRUFDOURILEtBQUtwQyxJQUFNNG9CLENBQ25CLENBQ0l4akIsV0FDSSxPQUFPaEQsS0FBS3BDLEdBQ3BCLENBQ0kwOUIsV0FDSSxNQUFPLENBQUEsQ0FDZixDQUNJQyxZQUNJLE1BQU8sRUFBR3Y3QixLQUFLcEMsS0FBTSxDQUFHLENBQ2hDLENBQ0EsQ0FDQXhELEVBQUErZ0MsS0FBZUEsUUFDVEQsVUFBY0csRUFDaEJsOUIsWUFBWXdlLEdBQ1JyRixNQUFPLEVBQ1B0WCxLQUFLdzdCLE9BQXlCLFVBQWhCLE9BQU83ZSxFQUFvQixDQUFDQSxHQUFRQSxDQUMxRCxDQUNJM1osV0FDSSxPQUFPaEQsS0FBS3BDLEdBQ3BCLENBQ0kwOUIsV0FDSSxJQUVNM2pCLEVBRk4sTUFBQSxFQUF5QixFQUFyQjNYLEtBQUt3N0IsT0FBT3ZpQyxRQUdBLE1BRFYwZSxFQUFPM1gsS0FBS3c3QixPQUFPLEtBQ00sT0FBVDdqQixFQUM5QixDQUNJL1osVUFDSSxJQUFJNjlCLEVBQ0osT0FBUSxPQUFDQSxFQUFLejdCLEtBQUswN0IsTUFBa0NELEVBQU16N0IsS0FBSzA3QixLQUFPMTdCLEtBQUt3N0IsT0FBT3ozQixPQUFPLENBQUN5aUIsRUFBRy9lLElBQU0sR0FBRytlLEVBQUkvZSxFQUFLLEVBQUUsQ0FDMUgsQ0FDSTh6QixZQUNJLElBQUlFLEVBQ0osT0FBUSxPQUFDQSxFQUFLejdCLEtBQUsyN0IsUUFBb0NGLEVBQU16N0IsS0FBSzI3QixPQUFTMzdCLEtBQUt3N0IsT0FBT3ozQixPQUFPLENBQUN3M0IsRUFBTzl6QixLQUM5RkEsYUFBYTB6QixJQUNiSSxFQUFNOXpCLEVBQUU3SixNQUFRMjlCLEVBQU05ekIsRUFBRTdKLE1BQVEsR0FBSyxHQUNsQzI5QixHQUNSLEVBQUUsQ0FDYixDQUNBLENBR0EsU0FBU3hoQyxFQUFFNmhDLEtBQVN6OEIsR0FDaEIsSUFBTXdkLEVBQU8sQ0FBQ2lmLEVBQUssSUFDbkJ0aUMsSUFBSUksRUFBSSxFQUNSLEtBQU9BLEVBQUl5RixFQUFLbEcsUUFDWitoQyxFQUFXcmUsRUFBTXhkLEVBQUt6RixFQUFFLEVBQ3hCaWpCLEVBQUs5ZixLQUFLKytCLEVBQUssRUFBRWxpQyxFQUFFLEVBRXZCLE9BQU8sSUFBSXdoQyxFQUFNdmUsQ0FBSSxDQUN6QixDQVZBdmlCLEVBQUE4Z0MsTUFBZ0JBLEVBQ2hCOWdDLEVBQUE2Z0MsSUFBYyxJQUFJQyxFQUFNLEVBQUUsRUFVMUI5Z0MsRUFBQUwsRUFBWUEsRUFDWixJQUFNOGhDLEVBQU8sSUFBSVgsRUFBTSxHQUFHLEVBQzFCLFNBQVN0OUIsRUFBSWcrQixLQUFTejhCLEdBQ2xCLElBQU0yOEIsRUFBTyxDQUFDZixFQUFjYSxFQUFLLEVBQUUsR0FDbkN0aUMsSUFBSUksRUFBSSxFQUNSLEtBQU9BLEVBQUl5RixFQUFLbEcsUUFDWjZpQyxFQUFLai9CLEtBQUtnL0IsQ0FBSSxFQUNkYixFQUFXYyxFQUFNMzhCLEVBQUt6RixFQUFFLEVBQ3hCb2lDLEVBQUtqL0IsS0FBS2cvQixFQUFNZCxFQUFjYSxFQUFLLEVBQUVsaUMsRUFBRSxDQUFDLEVBRTVDcWlDLENBQUFBLElBYWNELEVBYkxBLEVBY1R4aUMsSUFBSUksRUFBSSxFQUNSLEtBQU9BLEVBQUlvaUMsRUFBSzdpQyxPQUFTLEdBQUcsQ0FDeEIsR0FBSTZpQyxFQUFLcGlDLEtBQU9taUMsRUFBTSxDQUNsQixJQUFNbCtCLEdBVWxCLENBQXdCK08sRUFBR3VkLElBQ2IsT0FBTkEsRUFDT3ZkLEVBQ0QsT0FBTkEsRUFDT3VkLEVBQ0ssVUFBWixPQUFPdmQsRUFTSyxVQUFaLE9BQU91ZCxHQUEwQixNQUFUQSxFQUFFLElBQWdCdmQsYUFBYXl1QixFQUEzRCxLQUFBLEVBQ1csSUFBSXp1QixFQUFJdWQsRUFBRXB3QixNQUFNLENBQUMsRUFUcEJvd0IsYUFBYWtSLEdBQTRCLE1BQXBCenVCLEVBQUVBLEVBQUV6VCxPQUFTLEdBQXRDLEtBQUEsRUFFZ0IsVUFBWixPQUFPZ3hCLEVBQ0EsR0FBR3ZkLEVBQUU3UyxNQUFNLEVBQUcsQ0FBQSxDQUFFLEVBQUlvd0IsRUFBcEIsSUFDRSxNQUFUQSxFQUFFLEdBQ0t2ZCxFQUFFN1MsTUFBTSxFQUFHLENBQUUsQ0FBQSxFQUFJb3dCLEVBQUVwd0IsTUFBTSxDQUFDLEVBRHJDLEtBQUEsR0FwQitCaWlDLEVBQUtwaUMsRUFBSSxHQUFJb2lDLEVBQUtwaUMsRUFBSSxFQUFFLEVBQ25ELEdBQVlnTCxLQUFBQSxJQUFSL0csRUFBbUIsQ0FDbkJtK0IsRUFBS2xoQyxPQUFPbEIsRUFBSSxFQUFHLEVBQUdpRSxDQUFHLEVBQ3pCLFFBQ2hCLENBQ1ltK0IsRUFBS3BpQyxDQUFDLElBQU0sR0FDeEIsQ0FDUUEsQ0FBQyxFQUNULENBekJpQixDQUNiLE9BQU8sSUFBSXdoQyxFQUFNWSxDQUFJLENBQ3pCLENBRUEsU0FBU2QsRUFBV3JlLEVBQU1wWSxHQUNsQkEsYUFBZTIyQixFQUNmdmUsRUFBSzlmLEtBQUssR0FBRzBILEVBQUlpM0IsTUFBTSxFQUNsQmozQixhQUFlNDJCLEVBQ3BCeGUsRUFBSzlmLEtBQUswSCxDQUFHLEVBRWJvWSxFQUFLOWYsS0F5Q1UsVUFBWixPQURVL0QsRUF4Q1N5TCxJQXlDaUIsV0FBWixPQUFPekwsR0FBd0IsT0FBTkEsRUFDbERBLEVBQ0FpaUMsRUFBY3hpQyxNQUFNQyxRQUFRTSxDQUFDLEVBQUlBLEVBQUVJLEtBQUssR0FBRyxFQUFJSixDQUFDLENBM0N4QixDQUNsQyxDQWdEQSxTQUFTaWlDLEVBQWNqaUMsR0FDbkIsT0FBT3dHLEtBQUtDLFVBQVV6RyxDQUFDLEVBQ2xCZ0IsUUFBUSxVQUFXLFNBQVMsRUFDNUJBLFFBQVEsVUFBVyxTQUFTLENBQ3JDLENBNURBTSxFQUFBd0QsSUFBY0EsRUFTZHhELEVBQUE0Z0MsV0FBcUJBLEVBb0NyQjVnQyxFQUFBNGhDLFVBSEEsU0FBbUJDLEVBQUlDLEdBQ25CLE9BQU9BLEVBQUdaLFNBQVEsRUFBS1csRUFBS0EsRUFBR1gsU0FBUSxFQUFLWSxFQUFLdCtCLElBQU9xK0IsSUFBS0MsR0FDakUsRUFXQTloQyxFQUFBbUYsVUFIQSxTQUFtQnpHLEdBQ2YsT0FBTyxJQUFJb2lDLEVBQU1ILEVBQWNqaUMsQ0FBQyxDQUFDLENBQ3JDLEVBT0FzQixFQUFBMmdDLGNBQXdCQSxFQUl4QjNnQyxFQUFBMGdDLFlBSEEsU0FBcUJuM0IsR0FDakIsTUFBcUIsVUFBZCxPQUFPQSxHQUFtQnZKLEVBQVFnaEMsV0FBV3hoQyxLQUFLK0osQ0FBRyxFQUFJLElBQUl1M0IsRUFBTSxJQUFJdjNCLENBQUssRUFBSTVKLEtBQU00SixJQUNqRyxFQVNBdkosRUFBQXlnQyxpQkFOQSxTQUEwQmwzQixHQUN0QixHQUFrQixVQUFkLE9BQU9BLEdBQW1CdkosRUFBUWdoQyxXQUFXeGhDLEtBQUsrSixDQUFHLEVBQ3JELE9BQU8sSUFBSXUzQixFQUFNLEdBQUd2M0IsQ0FBSyxFQUU3QixNQUFNLElBQUl4RCx1Q0FBdUN3RCxrQ0FBb0MsQ0FDekYsRUFLQXZKLEVBQUF3Z0MsV0FIQSxTQUFvQnVCLEdBQ2hCLE9BQU8sSUFBSWpCLEVBQU1pQixFQUFHbjVCLFVBQVUsQ0FDbEMsa0VDeEpBdEssT0FBT21lLGVBQWN6YyxFQUFVLGFBQWMsQ0FBRXFFLE1BQU8sQ0FBQSxFQUFNLEVBQzVEckUsRUFBQWdpQyxXQUFxQmhpQyxFQUF5QmlpQyxlQUFBamlDLEVBQUFraUMsTUFBZ0JsaUMsRUFBbUJtaUMsU0FBQW5pQyxFQUFBb2lDLGVBQXlCOTNCLEtBQUFBLEVBQzFHLElBQU0rM0IsRUFBU3QxQixHQUFpQixRQUMxQnUxQixVQUFtQnY4QixNQUNyQmhDLFlBQVkyRSxHQUNSd1UsNkJBQTZCeFUsZUFBa0IsRUFDL0M5QyxLQUFLdkIsTUFBUXFFLEVBQUtyRSxLQUMxQixDQUNBLENBQ0EsSUFBSSs5QixFQUNPQSxHQUFBQSxFQUdSQSxJQUFtQnBpQyxFQUFBb2lDLGVBQXlCQSxFQUFpQixLQUY3Q0EsRUFBd0IsUUFBSSxHQUFLLFVBQ2hEQSxFQUFlQSxFQUEwQixVQUFJLEdBQUssWUFFdERwaUMsRUFBbUJtaUMsU0FBQSxDQUNmSSxNQUFPLElBQUlGLEVBQU90QixLQUFLLE9BQU8sRUFDOUI3aEMsSUFBSyxJQUFJbWpDLEVBQU90QixLQUFLLEtBQUssRUFDMUJ5QixJQUFLLElBQUlILEVBQU90QixLQUFLLEtBQUssQ0FDN0IsUUFDS21CLEVBQ0ZuK0IsWUFBWSxDQUFFMCtCLFNBQUFBLEVBQVU5cEIsT0FBQUEsQ0FBTSxFQUFLLElBQy9CL1MsS0FBSzI3QixPQUFTLEdBQ2QzN0IsS0FBSzg4QixVQUFZRCxFQUNqQjc4QixLQUFLKzhCLFFBQVVocUIsQ0FDdkIsQ0FDSWlxQixPQUFPQyxHQUNILE9BQU9BLGFBQXdCUixFQUFPdEIsS0FBTzhCLEVBQWVqOUIsS0FBSzhDLEtBQUttNkIsQ0FBWSxDQUMxRixDQUNJbjZCLEtBQUswSyxHQUNELE9BQU8sSUFBSWl2QixFQUFPdEIsS0FBS243QixLQUFLazlCLFNBQVMxdkIsQ0FBTSxDQUFDLENBQ3BELENBQ0kwdkIsU0FBUzF2QixHQUVMLE1BQU8sR0FBR0EsR0FEQ3hOLEtBQUsyN0IsT0FBT251QixJQUFXeE4sS0FBS205QixXQUFXM3ZCLENBQU0sR0FDbEN4UixLQUFLLEVBQ25DLENBQ0ltaEMsV0FBVzN2QixHQUNQLElBQVE0dkIsRUFDUixHQUFLLE9BQUNBLEVBQUssT0FBQzNCLEVBQUt6N0IsS0FBSys4QixTQUFxQ3I0QixLQUFBQSxFQUFTKzJCLEVBQUdxQixZQUFnRE0sRUFBR3JuQixJQUFJdkksQ0FBTSxHQUFPeE4sS0FBSzg4QixXQUFhLENBQUM5OEIsS0FBSzg4QixVQUFVL21CLElBQUl2SSxDQUFNLEVBQ25MLE1BQU0sSUFBSXJOLDBCQUEwQnFOLGlDQUFzQyxFQUU5RSxPQUFReE4sS0FBSzI3QixPQUFPbnVCLEdBQVUsQ0FBRUEsT0FBQUEsRUFBUXhSLE1BQU8sQ0FBRyxDQUMxRCxDQUNBLENBQ0E1QixFQUFBa2lDLE1BQWdCQSxRQUNWRCxVQUF1QkksRUFBT3RCLEtBQ2hDaDlCLFlBQVlxUCxFQUFRNnZCLEdBQ2hCL2xCLE1BQU0rbEIsQ0FBTyxFQUNicjlCLEtBQUt3TixPQUFTQSxDQUN0QixDQUNJOHZCLFNBQVM3K0IsRUFBTyxDQUFFOCtCLFNBQUFBLEVBQVVDLFVBQUFBLENBQVMsR0FDakN4OUIsS0FBS3ZCLE1BQVFBLEVBQ2J1QixLQUFLeTlCLFdBQVksRUFBSWhCLEVBQU8xaUMsTUFBTyxJQUFJMGlDLEVBQU90QixLQUFLb0MsQ0FBUSxLQUFLQyxJQUN4RSxDQUNBLENBQ0FwakMsRUFBQWlpQyxlQUF5QkEsRUFDekIsSUFBTWg0QixHQUFPLEVBQUlvNEIsRUFBTzFpQyxhQUNsQnFpQyxVQUFtQkUsRUFDckJuK0IsWUFBWTJDLEdBQ1J3VyxNQUFNeFcsQ0FBSSxFQUNWZCxLQUFLMDlCLFFBQVUsR0FDZjE5QixLQUFLMjlCLE9BQVM3OEIsRUFBSzg4QixNQUNuQjU5QixLQUFLYyxLQUFPLENBQUUsR0FBR0EsRUFBTSs4QixHQUFJLzhCLEVBQUttVSxNQUFRNVEsRUFBT280QixFQUFPeEIsR0FBSyxDQUNuRSxDQUNJNzJCLE1BQ0ksT0FBT3BFLEtBQUsyOUIsTUFDcEIsQ0FDSTc2QixLQUFLMEssR0FDRCxPQUFPLElBQUk2dUIsRUFBZTd1QixFQUFReE4sS0FBS2s5QixTQUFTMXZCLENBQU0sQ0FBQyxDQUMvRCxDQUNJL08sTUFBTXcrQixFQUFjeCtCLEdBRWhCLEdBQWtCaUcsS0FBQUEsSUFBZGpHLEVBQU15YSxJQUNOLE1BQU0sSUFBSS9ZLE1BQU0sc0NBQXNDLEVBQzFELElBQU0yQyxFQUFPOUMsS0FBS2c5QixPQUFPQyxDQUFZLEVBQzdCenZCLEVBQVcxSyxFQUFMLE9BQ1JnN0IsRUFBVyxPQUFDckMsRUFBS2g5QixFQUFNa0YsS0FBaUM4M0IsRUFBS2g5QixFQUFNeWEsSUFDekU1ZixJQUFJeWtDLEVBQUsvOUIsS0FBSzA5QixRQUFRbHdCLEdBQ3RCLEdBQUl1d0IsRUFBSSxDQUNKLElBQU1DLEVBQVFELEVBQUczNUIsSUFBSTA1QixDQUFRLEVBQzdCLEdBQUlFLEVBQ0EsT0FBT0EsQ0FDdkIsTUFFWUQsRUFBSy85QixLQUFLMDlCLFFBQVFsd0IsR0FBVSxJQUFJbUYsSUFFcENvckIsRUFBR3A5QixJQUFJbTlCLEVBQVVoN0IsQ0FBSSxFQUNmMGpCLEVBQUl4bUIsS0FBSzI5QixPQUFPbndCLEtBQVl4TixLQUFLMjlCLE9BQU9ud0IsR0FBVSxJQUNsRGd3QixFQUFZaFgsRUFBRXZ0QixPQUdwQixPQUZBdXRCLEVBQUVnWCxHQUFhLytCLEVBQU15YSxJQUNyQnBXLEVBQUt3NkIsU0FBUzcrQixFQUFPLENBQUU4K0IsU0FBVS92QixFQUFRZ3dCLFVBQUFBLEVBQVcsRUFDN0MxNkIsQ0FDZixDQUNJbTdCLFNBQVN6d0IsRUFBUTB3QixHQUNQSCxFQUFLLzlCLEtBQUswOUIsUUFBUWx3QixHQUN4QixHQUFLdXdCLEVBRUwsT0FBT0EsRUFBRzM1QixJQUFJODVCLENBQVEsQ0FDOUIsQ0FDSUMsVUFBVUMsRUFBVy9tQixFQUFTclgsS0FBSzA5QixTQUMvQixPQUFPMTlCLEtBQUtxK0IsY0FBY2huQixFQUFRLElBQzlCLEdBQXVCM1MsS0FBQUEsSUFBbkI1QixFQUFLMjZCLFVBQ0wsTUFBTSxJQUFJdDlCLHdCQUF3QjJDLGlCQUFvQixFQUMxRCxPQUFPLEVBQUkyNUIsRUFBTzFpQyxLQUFNcWtDLElBQVl0N0IsRUFBSzI2QixXQUNyRCxDQUFTLENBQ1QsQ0FDSWEsVUFBVWpuQixFQUFTclgsS0FBSzA5QixRQUFTYSxFQUFZQyxHQUN6QyxPQUFPeCtCLEtBQUtxK0IsY0FBY2huQixFQUFRLElBQzlCLEdBQW1CM1MsS0FBQUEsSUFBZjVCLEVBQUtyRSxNQUNMLE1BQU0sSUFBSTBCLHdCQUF3QjJDLGlCQUFvQixFQUMxRCxPQUFPQSxFQUFLckUsTUFBTWtlLElBQzlCLEVBQVc0aEIsRUFBWUMsQ0FBTyxDQUM5QixDQUNJSCxjQUFjaG5CLEVBQVFvbkIsRUFBV0YsRUFBYSxHQUFJQyxHQUM5Q2xsQyxJQUFJcWpCLEVBQU84ZixFQUFPeEIsSUFDbEIsSUFBSyxJQUFNenRCLEtBQVU2SixFQUFRLENBQ3pCLElBQU0wbUIsRUFBSzFtQixFQUFPN0osR0FDbEIsR0FBS3V3QixFQUFMLENBRUEsSUFBTVcsRUFBV0gsRUFBVy93QixHQUFVK3dCLEVBQVcvd0IsSUFBVyxJQUFJbUYsSUFDaEVvckIsRUFBR3g3QixRQUFRLElBQ1AsR0FBSW04QixDQUFBQSxFQUFRM29CLElBQUlqVCxDQUFJLEVBQXBCLENBRUE0N0IsRUFBUS85QixJQUFJbUMsRUFBTTA1QixFQUFlbUMsT0FBTyxFQUN4Q3JsQyxJQUFJbU8sRUFBSWczQixFQUFVMzdCLENBQUksRUFDdEIsR0FBSTJFLEVBQUcsQ0FDSCxJQUFNbTNCLEVBQU01K0IsS0FBS2MsS0FBSys5QixJQUFNemtDLEVBQVFtaUMsU0FBU0ssSUFBTXhpQyxFQUFRbWlDLFNBQVNJLE1BQ3BFaGdCLEdBQU8sRUFBSThmLEVBQU8xaUMsS0FBTTRpQixJQUFPaWlCLEtBQU85N0IsT0FBVTJFLEtBQUt6SCxLQUFLYyxLQUFLKzhCLElBQ25GLEtBQ3FCLENBQUEsS0FBS3AyQixFQUFJKzJCLE1BQUFBLEVBQXlDOTVCLEtBQUFBLEVBQVM4NUIsRUFBUTE3QixDQUFJLEdBSXhFLE1BQU0sSUFBSTQ1QixFQUFXNTVCLENBQUksRUFIekI2WixHQUFPLEVBQUk4ZixFQUFPMWlDLEtBQU00aUIsSUFBT2xWLElBQUl6SCxLQUFLYyxLQUFLKzhCLElBSWpFLENBQ2dCYSxFQUFRLzlCLElBQUltQyxFQUFNMDVCLEVBQWVzQyxTQUFTLENBYnRDLENBY3BCLENBQWEsQ0FsQkcsQ0FtQmhCLENBQ1EsT0FBT25pQixDQUNmLENBQ0EsQ0FDQXZpQixFQUFBZ2lDLFdBQXFCQSxpREM1SXJCMWpDLE9BQU9tZSxlQUFjemMsRUFBVSxhQUFjLENBQUVxRSxNQUFPLENBQUEsRUFBTSxFQUM1RHJFLEVBQUEya0MsR0FBYTNrQyxNQUFjQSxFQUFjNGtDLElBQUE1a0MsRUFBQTZrQyxRQUFrQjdrQyxFQUFvQjhrQyxVQUFBOWtDLEVBQUFtaUMsU0FBbUJuaUMsaUJBQXlCQSxFQUFxQmdpQyxXQUFBaGlDLEVBQUFraUMsTUFBZ0JsaUMsRUFBZStnQyxLQUFBL2dDLEVBQUF3Z0MsV0FBcUJ4Z0MsWUFBb0JBLEVBQXNCMGdDLFlBQUExZ0MsRUFBQTZnQyxJQUFjN2dDLFlBQW9CQSxFQUFjd0QsSUFBQXhELEVBQUFMLEVBQVkySyxLQUFBQSxFQUMxUyxJQUFNKzNCLEVBQVN0MUIsR0FBaUIsRUFDMUJnNEIsRUFBVUMsR0FBa0IsRUFDbEMsSUFBSUMsRUFBU2w0QixHQUFpQixFQVMxQm00QixHQVJKNW1DLE9BQU9tZSxlQUFlemMsRUFBUyxJQUFLLENBQUVzRSxXQUFZLENBQUEsRUFBTTBGLElBQUssV0FBYyxPQUFPaTdCLEVBQU90bEMsQ0FBSSxDQUFBLENBQUUsRUFDL0ZyQixPQUFPbWUsZUFBZXpjLEVBQVMsTUFBTyxDQUFFc0UsV0FBWSxDQUFBLEVBQU0wRixJQUFLLFdBQWMsT0FBT2k3QixFQUFPemhDLEdBQU0sQ0FBQSxDQUFFLEVBQ25HbEYsT0FBT21lLGVBQWV6YyxFQUFTLFlBQWEsQ0FBRXNFLFdBQVksQ0FBQSxFQUFNMEYsSUFBSyxXQUFjLE9BQU9pN0IsRUFBT3JELFNBQVksQ0FBQSxDQUFFLEVBQy9HdGpDLE9BQU9tZSxlQUFlemMsRUFBUyxNQUFPLENBQUVzRSxXQUFZLENBQUEsRUFBTTBGLElBQUssV0FBYyxPQUFPaTdCLEVBQU9wRSxHQUFNLENBQUEsQ0FBRSxFQUNuR3ZpQyxPQUFPbWUsZUFBZXpjLEVBQVMsY0FBZSxDQUFFc0UsV0FBWSxDQUFBLEVBQU0wRixJQUFLLFdBQWMsT0FBT2k3QixFQUFPdkUsV0FBYyxDQUFBLENBQUUsRUFDbkhwaUMsT0FBT21lLGVBQWV6YyxFQUFTLFlBQWEsQ0FBRXNFLFdBQVksQ0FBQSxFQUFNMEYsSUFBSyxXQUFjLE9BQU9pN0IsRUFBTzkvQixTQUFZLENBQUEsQ0FBRSxFQUMvRzdHLE9BQU9tZSxlQUFlemMsRUFBUyxhQUFjLENBQUVzRSxXQUFZLENBQUEsRUFBTTBGLElBQUssV0FBYyxPQUFPaTdCLEVBQU96RSxVQUFhLENBQUEsQ0FBRSxFQUNqSGxpQyxPQUFPbWUsZUFBZXpjLEVBQVMsT0FBUSxDQUFFc0UsV0FBWSxDQUFBLEVBQU0wRixJQUFLLFdBQWMsT0FBT2k3QixFQUFPbEUsSUFBTyxDQUFBLENBQUUsRUFDdkZpRSxHQUFrQixHQUNoQzFtQyxPQUFPbWUsZUFBZXpjLEVBQVMsUUFBUyxDQUFFc0UsV0FBWSxDQUFBLEVBQU0wRixJQUFLLFdBQWMsT0FBT2s3QixFQUFRaEQsS0FBUSxDQUFBLENBQUUsRUFDeEc1akMsT0FBT21lLGVBQWV6YyxFQUFTLGFBQWMsQ0FBRXNFLFdBQVksQ0FBQSxFQUFNMEYsSUFBSyxXQUFjLE9BQU9rN0IsRUFBUWxELFVBQWEsQ0FBQSxDQUFFLEVBQ2xIMWpDLE9BQU9tZSxlQUFlemMsRUFBUyxpQkFBa0IsQ0FBRXNFLFdBQVksQ0FBQSxFQUFNMEYsSUFBSyxXQUFjLE9BQU9rN0IsRUFBUWpELGNBQWlCLENBQUEsQ0FBRSxFQUMxSDNqQyxPQUFPbWUsZUFBZXpjLEVBQVMsV0FBWSxDQUFFc0UsV0FBWSxDQUFBLEVBQU0wRixJQUFLLFdBQWMsT0FBT2s3QixFQUFRL0MsUUFBVyxDQUFBLENBQUUsRUFDOUduaUMsRUFBb0I4a0MsVUFBQSxDQUNoQkssR0FBSSxJQUFJOUMsRUFBT3ZCLE1BQU0sR0FBRyxFQUN4QnNFLElBQUssSUFBSS9DLEVBQU92QixNQUFNLElBQUksRUFDMUJ1RSxHQUFJLElBQUloRCxFQUFPdkIsTUFBTSxHQUFHLEVBQ3hCd0UsSUFBSyxJQUFJakQsRUFBT3ZCLE1BQU0sSUFBSSxFQUMxQnlFLEdBQUksSUFBSWxELEVBQU92QixNQUFNLEtBQUssRUFDMUIwRSxJQUFLLElBQUluRCxFQUFPdkIsTUFBTSxLQUFLLEVBQzNCMkUsSUFBSyxJQUFJcEQsRUFBT3ZCLE1BQU0sR0FBRyxFQUN6QjRFLEdBQUksSUFBSXJELEVBQU92QixNQUFNLElBQUksRUFDekI2RSxJQUFLLElBQUl0RCxFQUFPdkIsTUFBTSxJQUFJLEVBQzFCOEUsSUFBSyxJQUFJdkQsRUFBT3ZCLE1BQU0sR0FBRyxDQUM1QixRQUNLMW9CLEVBQ0Z5dEIsZ0JBQ0ksT0FBT2pnQyxJQUNmLENBQ0lrZ0MsY0FBY3ZFLEVBQVF3RSxHQUNsQixPQUFPbmdDLElBQ2YsQ0FDQSxPQUNNb2dDLFVBQVk1dEIsRUFDZHJVLFlBQVlraUMsRUFBU3Y5QixFQUFNdzlCLEdBQ3ZCaHBCLE1BQU8sRUFDUHRYLEtBQUtxZ0MsUUFBVUEsRUFDZnJnQyxLQUFLOEMsS0FBT0EsRUFDWjlDLEtBQUtzZ0MsSUFBTUEsQ0FDbkIsQ0FDSUMsT0FBTyxDQUFFMUIsSUFBQUEsRUFBS2hCLEdBQUFBLElBQ1YsSUFBTXdDLEVBQVV4QixFQUFNTSxFQUFRNUMsU0FBU0ssSUFBTTU4QixLQUFLcWdDLFFBQzVDQyxFQUFtQjU3QixLQUFBQSxJQUFiMUUsS0FBS3NnQyxJQUFvQixHQUFLLE1BQU10Z0MsS0FBS3NnQyxJQUNyRCxTQUFVRCxLQUFXcmdDLEtBQUs4QyxPQUFPdzlCLEtBQVN6QyxDQUNsRCxDQUNJcUMsY0FBYzNFLEVBQU9pRixHQUNqQixHQUFLakYsRUFBTXY3QixLQUFLOEMsS0FBS2xGLEtBSXJCLE9BRklvQyxLQUFLc2dDLE1BQ0x0Z0MsS0FBS3NnQyxJQUFNRyxFQUFhemdDLEtBQUtzZ0MsSUFBSy9FLEVBQU9pRixDQUFTLEdBQy9DeGdDLElBQ2YsQ0FDSXU3QixZQUNJLE9BQU92N0IsS0FBS3NnQyxlQUFlN0QsRUFBT3BCLFlBQWNyN0IsS0FBS3NnQyxJQUFJL0UsTUFBUSxFQUN6RSxDQUNBLE9BQ01tRixVQUFlbHVCLEVBQ2pCclUsWUFBWXdpQyxFQUFLTCxFQUFLTSxHQUNsQnRwQixNQUFPLEVBQ1B0WCxLQUFLMmdDLElBQU1BLEVBQ1gzZ0MsS0FBS3NnQyxJQUFNQSxFQUNYdGdDLEtBQUs0Z0MsWUFBY0EsQ0FDM0IsQ0FDSUwsT0FBTyxDQUFFMUMsR0FBQUEsSUFDTCxTQUFVNzlCLEtBQUsyZ0MsU0FBUzNnQyxLQUFLc2dDLE9BQVN6QyxDQUM5QyxDQUNJcUMsY0FBYzNFLEVBQU9pRixHQUNqQixHQUFJeGdDLEVBQUFBLEtBQUsyZ0MsZUFBZWxFLEVBQU90QixPQUFTSSxFQUFNdjdCLEtBQUsyZ0MsSUFBSS9pQyxNQUFTb0MsS0FBSzRnQyxZQUdyRSxPQURBNWdDLEtBQUtzZ0MsSUFBTUcsRUFBYXpnQyxLQUFLc2dDLElBQUsvRSxFQUFPaUYsQ0FBUyxFQUMzQ3hnQyxJQUNmLENBQ0l1N0IsWUFFSSxPQUFPc0YsRUFETzdnQyxLQUFLMmdDLGVBQWVsRSxFQUFPdEIsS0FBTyxHQUFLLENBQUUsR0FBR243QixLQUFLMmdDLElBQUlwRixLQUFPLEVBQy9DdjdCLEtBQUtzZ0MsR0FBRyxDQUMzQyxDQUNBLE9BQ01RLFVBQWlCSixFQUNuQnZpQyxZQUFZd2lDLEVBQUtJLEVBQUlULEVBQUtNLEdBQ3RCdHBCLE1BQU1xcEIsRUFBS0wsRUFBS00sQ0FBVyxFQUMzQjVnQyxLQUFLK2dDLEdBQUtBLENBQ2xCLENBQ0lSLE9BQU8sQ0FBRTFDLEdBQUFBLElBQ0wsU0FBVTc5QixLQUFLMmdDLE9BQU8zZ0MsS0FBSytnQyxPQUFPL2dDLEtBQUtzZ0MsT0FBU3pDLENBQ3hELENBQ0EsT0FDTW1ELFVBQWN4dUIsRUFDaEJyVSxZQUFZOGlDLEdBQ1IzcEIsTUFBTyxFQUNQdFgsS0FBS2loQyxNQUFRQSxFQUNiamhDLEtBQUt1N0IsTUFBUSxFQUNyQixDQUNJZ0YsT0FBTyxDQUFFMUMsR0FBQUEsSUFDTCxPQUFVNzlCLEtBQUtpaEMsTUFBUixJQUFtQnBELENBQ2xDLENBQ0EsT0FDTXFELFVBQWMxdUIsRUFDaEJyVSxZQUFZOGlDLEdBQ1IzcEIsTUFBTyxFQUNQdFgsS0FBS2loQyxNQUFRQSxFQUNiamhDLEtBQUt1N0IsTUFBUSxFQUNyQixDQUNJZ0YsT0FBTyxDQUFFMUMsR0FBQUEsSUFFTCxjQURjNzlCLEtBQUtpaEMsTUFBUSxJQUFJamhDLEtBQUtpaEMsTUFBVSxNQUNwQnBELENBQ2xDLENBQ0EsT0FDTXNELFVBQWMzdUIsRUFDaEJyVSxZQUFZb0MsR0FDUitXLE1BQU8sRUFDUHRYLEtBQUtPLE1BQVFBLENBQ3JCLENBQ0lnZ0MsT0FBTyxDQUFFMUMsR0FBQUEsSUFDTCxlQUFnQjc5QixLQUFLTyxTQUFXczlCLENBQ3hDLENBQ0l0QyxZQUNJLE9BQU92N0IsS0FBS08sTUFBTWc3QixLQUMxQixDQUNBLE9BQ002RixVQUFnQjV1QixFQUNsQnJVLFlBQVl3ZSxHQUNSckYsTUFBTyxFQUNQdFgsS0FBSzJjLEtBQU9BLENBQ3BCLENBQ0k0akIsT0FBTyxDQUFFMUMsR0FBQUEsSUFDTCxPQUFVNzlCLEtBQUsyYyxLQUFSLElBQWtCa2hCLENBQ2pDLENBQ0lvQyxnQkFDSSxNQUFPLEdBQUdqZ0MsS0FBSzJjLEtBQVMzYyxLQUFPMEUsS0FBQUEsQ0FDdkMsQ0FDSXc3QixjQUFjM0UsRUFBT2lGLEdBRWpCLE9BREF4Z0MsS0FBSzJjLEtBQU84akIsRUFBYXpnQyxLQUFLMmMsS0FBTTRlLEVBQU9pRixDQUFTLEVBQzdDeGdDLElBQ2YsQ0FDSXU3QixZQUNJLE9BQU92N0IsS0FBSzJjLGdCQUFnQjhmLEVBQU9wQixZQUFjcjdCLEtBQUsyYyxLQUFLNGUsTUFBUSxFQUMzRSxDQUNBLE9BQ004RixVQUFtQjd1QixFQUNyQnJVLFlBQVltakMsRUFBUSxJQUNoQmhxQixNQUFPLEVBQ1B0WCxLQUFLc2hDLE1BQVFBLENBQ3JCLENBQ0lmLE9BQU96L0IsR0FDSCxPQUFPZCxLQUFLc2hDLE1BQU12OUIsT0FBTyxDQUFDNFksRUFBTXZYLElBQU11WCxFQUFPdlgsRUFBRW03QixPQUFPei9CLENBQUksRUFBRyxFQUFFLENBQ3ZFLENBQ0ltL0IsZ0JBQ0ksSUFBUXFCLEVBQVV0aEMsS0FBTCxNQUNiMUcsSUFBSUksRUFBSTRuQyxFQUFNcm9DLE9BQ2QsS0FBT1MsQ0FBQyxJQUFJLENBQ1IsSUFBTTBMLEVBQUlrOEIsRUFBTTVuQyxHQUFHdW1DLGNBQWUsRUFDOUIxbkMsTUFBTUMsUUFBUTRNLENBQUMsRUFDZms4QixFQUFNMW1DLE9BQU9sQixFQUFHLEVBQUcsR0FBRzBMLENBQUMsRUFDbEJBLEVBQ0xrOEIsRUFBTTVuQyxHQUFLMEwsRUFFWGs4QixFQUFNMW1DLE9BQU9sQixFQUFHLENBQUMsQ0FDakMsQ0FDUSxPQUFzQixFQUFmNG5DLEVBQU1yb0MsT0FBYStHLEtBQU8wRSxLQUFBQSxDQUN6QyxDQUNJdzdCLGNBQWMzRSxFQUFPaUYsR0FDakIsSUFBUWMsRUFBVXRoQyxLQUFMLE1BQ2IxRyxJQUFJSSxFQUFJNG5DLEVBQU1yb0MsT0FDZCxLQUFPUyxDQUFDLElBQUksQ0FFUixJQUFNMEwsRUFBSWs4QixFQUFNNW5DLEdBQ2hCLEdBQUkwTCxDQUFBQSxFQUFFODZCLGNBQWMzRSxFQUFPaUYsQ0FBUyxFQUFwQyxDQW1mR3A3QixFQURlbEosRUFBUHEvQixFQUFBQSxLQUFBQSxFQWhmWGdHLElBaWZHbjhCLEVBRFFtMkIsRUFoZkdBLEVBZ2ZJci9CLEVBaGZHa0osRUFBRW0yQixNQWlmL0IsSUFBV24yQixLQUFLbEosRUFDWnEvQixFQUFNbjJCLElBQU1tMkIsRUFBTW4yQixJQUFNLElBQU1sSixFQUFLa0osSUFBTSxHQWpmckNrOEIsRUFBTTFtQyxPQUFPbEIsRUFBRyxDQUFDLENBRmIsQ0FHaEIsQ0FDUSxPQUFzQixFQUFmNG5DLEVBQU1yb0MsT0FBYStHLEtBQU8wRSxLQUFBQSxDQUN6QyxDQUNJNjJCLFlBQ0ksT0FBT3Y3QixLQUFLc2hDLE1BQU12OUIsT0FBTyxDQUFDdzNCLEVBQU9uMkIsSUFBTW84QixFQUFTakcsRUFBT24yQixFQUFFbTJCLEtBQUssRUFBRyxFQUFFLENBQzNFLENBQ0EsT0FDTWtHLFVBQWtCSixFQUNwQmQsT0FBT3ovQixHQUNILE1BQU8sSUFBTUEsRUFBSys4QixHQUFLdm1CLE1BQU1pcEIsT0FBT3ovQixDQUFJLEVBQUksSUFBTUEsRUFBSys4QixFQUMvRCxDQUNBLE9BQ002RCxVQUFhTCxTQUViTSxVQUFhRixHQUVuQkUsRUFBS0MsS0FBTyxhQUNOQyxVQUFXSixFQUNidGpDLFlBQVkyakMsRUFBV1IsR0FDbkJocUIsTUFBTWdxQixDQUFLLEVBQ1h0aEMsS0FBSzhoQyxVQUFZQSxDQUN6QixDQUNJdkIsT0FBT3ovQixHQUNIeEgsSUFBSXFqQixRQUFhM2MsS0FBSzhoQyxhQUFleHFCLE1BQU1pcEIsT0FBT3ovQixDQUFJLEVBR3RELE9BRklkLEtBQUsraEMsT0FDTHBsQixHQUFRLFFBQVUzYyxLQUFLK2hDLEtBQUt4QixPQUFPei9CLENBQUksR0FDcEM2YixDQUNmLENBQ0lzakIsZ0JBQ0kzb0IsTUFBTTJvQixjQUFlLEVBQ3JCLElBS1UrQixFQUxKQyxFQUFPamlDLEtBQUs4aEMsVUFDbEIsR0FBYSxDQUFBLElBQVRHLEVBQ0EsT0FBT2ppQyxLQUFLc2hDLE1BQ2hCaG9DLElBQUl3TCxFQUFJOUUsS0FBSytoQyxLQUtiLE9BSklqOUIsSUFDTWs5QixFQUFLbDlCLEVBQUVtN0IsY0FBZSxFQUM1Qm43QixFQUFJOUUsS0FBSytoQyxLQUFPeHBDLE1BQU1DLFFBQVF3cEMsQ0FBRSxFQUFJLElBQUlMLEVBQUtLLENBQUUsRUFBSUEsR0FFbkRsOUIsRUFDYSxDQUFBLElBQVRtOUIsRUFDT245QixhQUFhKzhCLEVBQUsvOEIsRUFBSUEsRUFBRXc4QixNQUMvQnRoQyxLQUFLc2hDLE1BQU1yb0MsT0FDSitHLEtBQ0osSUFBSTZoQyxFQUFHN0MsRUFBSWlELENBQUksRUFBR245QixhQUFhKzhCLEVBQUssQ0FBQy84QixHQUFLQSxFQUFFdzhCLEtBQUssRUFFL0MsQ0FBQSxJQUFUVyxHQUFtQmppQyxLQUFLc2hDLE1BQU1yb0MsT0FFM0IrRyxLQUZQLEtBQUEsQ0FHUixDQUNJa2dDLGNBQWMzRSxFQUFPaUYsR0FDakIsSUFBSS9FLEVBRUosR0FEQXo3QixLQUFLK2hDLEtBQU8sT0FBQ3RHLEVBQUt6N0IsS0FBSytoQyxNQUFrQ3I5QixLQUFBQSxFQUFTKzJCLEVBQUd5RSxjQUFjM0UsRUFBT2lGLENBQVMsRUFDN0ZscEIsTUFBTTRvQixjQUFjM0UsRUFBT2lGLENBQVMsR0FBS3hnQyxLQUFLK2hDLEtBR3BELE9BREEvaEMsS0FBSzhoQyxVQUFZckIsRUFBYXpnQyxLQUFLOGhDLFVBQVd2RyxFQUFPaUYsQ0FBUyxFQUN2RHhnQyxJQUNmLENBQ0l1N0IsWUFDSSxJQUFNQSxFQUFRamtCLE1BQU1pa0IsTUFJcEIsT0FIQXNGLEVBQWF0RixFQUFPdjdCLEtBQUs4aEMsU0FBUyxFQUM5QjloQyxLQUFLK2hDLE1BQ0xQLEVBQVNqRyxFQUFPdjdCLEtBQUsraEMsS0FBS3hHLEtBQUssRUFDNUJBLENBQ2YsQ0FDQSxDQUNBc0csRUFBR0QsS0FBTyxXQUNKTSxVQUFZVCxHQUVsQlMsRUFBSU4sS0FBTyxZQUNMTyxVQUFnQkQsRUFDbEIvakMsWUFBWWlrQyxHQUNSOXFCLE1BQU8sRUFDUHRYLEtBQUtvaUMsVUFBWUEsQ0FDekIsQ0FDSTdCLE9BQU96L0IsR0FDSCxhQUFjZCxLQUFLb2lDLGFBQWU5cUIsTUFBTWlwQixPQUFPei9CLENBQUksQ0FDM0QsQ0FDSW8vQixjQUFjM0UsRUFBT2lGLEdBQ2pCLEdBQUtscEIsTUFBTTRvQixjQUFjM0UsRUFBT2lGLENBQVMsRUFHekMsT0FEQXhnQyxLQUFLb2lDLFVBQVkzQixFQUFhemdDLEtBQUtvaUMsVUFBVzdHLEVBQU9pRixDQUFTLEVBQ3ZEeGdDLElBQ2YsQ0FDSXU3QixZQUNJLE9BQU9pRyxFQUFTbHFCLE1BQU1pa0IsTUFBT3Y3QixLQUFLb2lDLFVBQVU3RyxLQUFLLENBQ3pELENBQ0EsT0FDTThHLFVBQWlCSCxFQUNuQi9qQyxZQUFZa2lDLEVBQVN2OUIsRUFBTTVHLEVBQU1DLEdBQzdCbWIsTUFBTyxFQUNQdFgsS0FBS3FnQyxRQUFVQSxFQUNmcmdDLEtBQUs4QyxLQUFPQSxFQUNaOUMsS0FBSzlELEtBQU9BLEVBQ1o4RCxLQUFLN0QsR0FBS0EsQ0FDbEIsQ0FDSW9rQyxPQUFPei9CLEdBQ0gsR0FDTSxDQUFFZ0MsS0FBQUEsRUFBTTVHLEtBQUFBLEVBQU1DLEdBQUFBLENBQUksRUFBRzZELEtBQzNCLGFBRmdCYyxFQUFLKzlCLElBQU1NLEVBQVE1QyxTQUFTSyxJQUFNNThCLEtBQUtxZ0MsV0FFOUJ2OUIsS0FBUTVHLE1BQVM0RyxLQUFRM0csTUFBTzJHLE9BQVl3VSxNQUFNaXBCLE9BQU96L0IsQ0FBSSxDQUM5RixDQUNJeTZCLFlBQ0ksSUFBTUEsRUFBUXNGLEVBQWF2cEIsTUFBTWlrQixNQUFPdjdCLEtBQUs5RCxJQUFJLEVBQ2pELE9BQU8ya0MsRUFBYXRGLEVBQU92N0IsS0FBSzdELEVBQUUsQ0FDMUMsQ0FDQSxPQUNNbW1DLFVBQWdCSixFQUNsQi9qQyxZQUFZa3hCLEVBQU1nUixFQUFTdjlCLEVBQU1na0IsR0FDN0J4UCxNQUFPLEVBQ1B0WCxLQUFLcXZCLEtBQU9BLEVBQ1pydkIsS0FBS3FnQyxRQUFVQSxFQUNmcmdDLEtBQUs4QyxLQUFPQSxFQUNaOUMsS0FBSzhtQixTQUFXQSxDQUN4QixDQUNJeVosT0FBT3ovQixHQUNILGFBQWNkLEtBQUtxZ0MsV0FBV3JnQyxLQUFLOEMsUUFBUTlDLEtBQUtxdkIsUUFBUXJ2QixLQUFLOG1CLFlBQWN4UCxNQUFNaXBCLE9BQU96L0IsQ0FBSSxDQUNwRyxDQUNJby9CLGNBQWMzRSxFQUFPaUYsR0FDakIsR0FBS2xwQixNQUFNNG9CLGNBQWMzRSxFQUFPaUYsQ0FBUyxFQUd6QyxPQURBeGdDLEtBQUs4bUIsU0FBVzJaLEVBQWF6Z0MsS0FBSzhtQixTQUFVeVUsRUFBT2lGLENBQVMsRUFDckR4Z0MsSUFDZixDQUNJdTdCLFlBQ0ksT0FBT2lHLEVBQVNscUIsTUFBTWlrQixNQUFPdjdCLEtBQUs4bUIsU0FBU3lVLEtBQUssQ0FDeEQsQ0FDQSxPQUNNZ0gsVUFBYWQsRUFDZnRqQyxZQUFZMkUsRUFBTTNELEVBQU1nVCxHQUNwQm1GLE1BQU8sRUFDUHRYLEtBQUs4QyxLQUFPQSxFQUNaOUMsS0FBS2IsS0FBT0EsRUFDWmEsS0FBS21TLE1BQVFBLENBQ3JCLENBQ0lvdUIsT0FBT3ovQixHQUVILE9BRGVkLEtBQUttUyxNQUFRLFNBQVcsZ0JBQ1huUyxLQUFLOEMsUUFBUTlDLEtBQUtiLFFBQVVtWSxNQUFNaXBCLE9BQU96L0IsQ0FBSSxDQUNqRixDQUNBLENBQ0F5aEMsRUFBS1gsS0FBTyxhQUNOWSxVQUFlbkIsRUFDakJkLE9BQU96L0IsR0FDSCxNQUFPLFVBQVl3VyxNQUFNaXBCLE9BQU96L0IsQ0FBSSxDQUM1QyxDQUNBLENBQ0EwaEMsRUFBT1osS0FBTyxlQUNSYSxVQUFZaEIsRUFDZGxCLE9BQU96L0IsR0FDSHhILElBQUlxakIsRUFBTyxNQUFRckYsTUFBTWlwQixPQUFPei9CLENBQUksRUFLcEMsT0FKSWQsS0FBSzBpQyxRQUNML2xCLEdBQVEzYyxLQUFLMGlDLE1BQU1uQyxPQUFPei9CLENBQUksR0FDOUJkLEtBQUsyaUMsVUFDTGhtQixHQUFRM2MsS0FBSzJpQyxRQUFRcEMsT0FBT3ovQixDQUFJLEdBQzdCNmIsQ0FDZixDQUNJc2pCLGdCQUNJLElBQVE3QyxFQUlSLE9BSEE5bEIsTUFBTTJvQixjQUFlLEVBQ3JCLE9BQUN4RSxFQUFLejdCLEtBQUswaUMsUUFBNENqSCxFQUFHd0UsY0FBZSxFQUN6RSxPQUFDN0MsRUFBS3A5QixLQUFLMmlDLFVBQThDdkYsRUFBRzZDLGNBQWUsRUFDcEVqZ0MsSUFDZixDQUNJa2dDLGNBQWMzRSxFQUFPaUYsR0FDakIsSUFBUXBELEVBSVIsT0FIQTlsQixNQUFNNG9CLGNBQWMzRSxFQUFPaUYsQ0FBUyxFQUNwQyxPQUFDL0UsRUFBS3o3QixLQUFLMGlDLFFBQTRDakgsRUFBR3lFLGNBQWMzRSxFQUFPaUYsQ0FBUyxFQUN4RixPQUFDcEQsRUFBS3A5QixLQUFLMmlDLFVBQThDdkYsRUFBRzhDLGNBQWMzRSxFQUFPaUYsQ0FBUyxFQUNuRnhnQyxJQUNmLENBQ0l1N0IsWUFDSSxJQUFNQSxFQUFRamtCLE1BQU1pa0IsTUFLcEIsT0FKSXY3QixLQUFLMGlDLE9BQ0xsQixFQUFTakcsRUFBT3Y3QixLQUFLMGlDLE1BQU1uSCxLQUFLLEVBQ2hDdjdCLEtBQUsyaUMsU0FDTG5CLEVBQVNqRyxFQUFPdjdCLEtBQUsyaUMsUUFBUXBILEtBQUssRUFDL0JBLENBQ2YsQ0FDQSxPQUNNcUgsVUFBY25CLEVBQ2hCdGpDLFlBQVlvQyxHQUNSK1csTUFBTyxFQUNQdFgsS0FBS08sTUFBUUEsQ0FDckIsQ0FDSWdnQyxPQUFPei9CLEdBQ0gsZUFBZ0JkLEtBQUtPLFNBQVcrVyxNQUFNaXBCLE9BQU96L0IsQ0FBSSxDQUN6RCxDQUNBLENBQ0E4aEMsRUFBTWhCLEtBQU8sY0FDUGlCLFVBQWdCcEIsRUFDbEJsQixPQUFPei9CLEdBQ0gsTUFBTyxVQUFZd1csTUFBTWlwQixPQUFPei9CLENBQUksQ0FDNUMsQ0FDQSxDQTZRQSxTQUFTMGdDLEVBQVNqRyxFQUFPci9CLEdBQ3JCLElBQUssSUFBTWtKLEtBQUtsSixFQUNacS9CLEVBQU1uMkIsSUFBTW0yQixFQUFNbjJCLElBQU0sSUFBTWxKLEVBQUtrSixJQUFNLEdBQzdDLE9BQU9tMkIsQ0FDWCxDQUNBLFNBQVNzRixFQUFhdEYsRUFBT3IvQixHQUN6QixPQUFPQSxhQUFnQnVnQyxFQUFPcEIsWUFBY21HLEVBQVNqRyxFQUFPci9CLEVBQUtxL0IsS0FBSyxFQUFJQSxDQUM5RSxDQUNBLFNBQVNrRixFQUFhM0UsRUFBTVAsRUFBT2lGLEdBQy9CLElBb0JxQjE3QixFQXBCckIsT0FBSWczQixhQUFnQlcsRUFBT3RCLEtBQ2hCMkgsRUFBWWhILENBQUksR0FtQk5oM0IsRUFsQkpnM0IsYUFtQlFXLEVBQU92QixPQUN4QnAyQixFQUFFMDJCLE9BQU9ubUIsS0FBSyxHQUFPNU4sYUFBYWcxQixFQUFPdEIsTUFBeUIsSUFBakJJLEVBQU05ekIsRUFBRTdKLE1BQW1DOEcsS0FBQUEsSUFBckI4N0IsRUFBVS80QixFQUFFN0osSUFBa0IsRUFsQnRHLElBQUk2K0IsRUFBT3ZCLE1BQU1ZLEVBQUtOLE9BQU96M0IsT0FBTyxDQUFDZ08sRUFBT3RLLE1BRTNDQSxFQURBQSxhQUFhZzFCLEVBQU90QixLQUNoQjJILEVBQVlyN0IsQ0FBQyxFQUNqQkEsYUFBYWcxQixFQUFPdkIsTUFDcEJucEIsRUFBTWxWLEtBQUssR0FBRzRLLEVBQUUrekIsTUFBTSxFQUV0QnpwQixFQUFNbFYsS0FBSzRLLENBQUMsRUFDVHNLLEdBQ1IsRUFBRSxDQUFDLEVBVEsrcEIsRUFVWCxTQUFTZ0gsRUFBWTE5QixHQUNqQixJQUFNcUMsRUFBSSs0QixFQUFVcDdCLEVBQUV4SCxLQUN0QixPQUFVOEcsS0FBQUEsSUFBTitDLEdBQW9DLElBQWpCOHpCLEVBQU1uMkIsRUFBRXhILEtBQ3BCd0gsR0FDWCxPQUFPbTJCLEVBQU1uMkIsRUFBRXhILEtBQ1I2SixFQUNmLENBS0EsQ0FLQSxTQUFTdTNCLEVBQUlsbUMsR0FDVCxNQUFtQixXQUFaLE9BQU9BLEdBQThCLFVBQVosT0FBT0EsR0FBdUIsT0FBTkEsRUFBYSxDQUFDQSxHQUFJLEVBQUkyakMsRUFBTzFpQyxNQUFPZ3BDLEVBQUlqcUMsQ0FBQyxHQUNyRyxDQXBUQStwQyxFQUFRakIsS0FBTyxVQTJRZnhuQyxFQUFBNmtDLGNBelFJOWdDLFlBQVk2a0MsRUFBVWxpQyxFQUFPLElBQ3pCZCxLQUFLMDlCLFFBQVUsR0FDZjE5QixLQUFLaWpDLGFBQWUsR0FDcEJqakMsS0FBS21nQyxXQUFhLEdBQ2xCbmdDLEtBQUtjLEtBQU8sQ0FBRSxHQUFHQSxFQUFNKzhCLEdBQUkvOEIsRUFBS21VLE1BQVEsS0FBTyxFQUFJLEVBQ25EalYsS0FBS2tqQyxVQUFZRixFQUNqQmhqQyxLQUFLMjlCLE9BQVMsSUFBSXdCLEVBQVE3QyxNQUFNLENBQUV2cEIsT0FBUWl3QixFQUFVLEVBQ3BEaGpDLEtBQUttakMsT0FBUyxDQUFDLElBQUl6QixFQUMzQixDQUNJMStCLFdBQ0ksT0FBT2hELEtBQUtvakMsTUFBTTdDLE9BQU92Z0MsS0FBS2MsSUFBSSxDQUMxQyxDQUVJZ0MsS0FBSzBLLEdBQ0QsT0FBT3hOLEtBQUsyOUIsT0FBTzc2QixLQUFLMEssQ0FBTSxDQUN0QyxDQUVJNHdCLFVBQVU1d0IsR0FDTixPQUFPeE4sS0FBS2tqQyxVQUFVcGdDLEtBQUswSyxDQUFNLENBQ3pDLENBRUk2MUIsV0FBV0MsRUFBYzdrQyxHQUNmcUUsRUFBTzlDLEtBQUtrakMsVUFBVXprQyxNQUFNNmtDLEVBQWM3a0MsQ0FBSyxFQUdyRCxPQUZXdUIsS0FBSzA5QixRQUFRNTZCLEVBQUswSyxVQUFZeE4sS0FBSzA5QixRQUFRNTZCLEVBQUswSyxRQUFVLElBQUlvSSxNQUN0RTNPLElBQUluRSxDQUFJLEVBQ0pBLENBQ2YsQ0FDSXlnQyxjQUFjLzFCLEVBQVEwd0IsR0FDbEIsT0FBT2wrQixLQUFLa2pDLFVBQVVqRixTQUFTendCLEVBQVEwd0IsQ0FBUSxDQUN2RCxDQUdJQyxVQUFVQyxHQUNOLE9BQU9wK0IsS0FBS2tqQyxVQUFVL0UsVUFBVUMsRUFBV3ArQixLQUFLMDlCLE9BQU8sQ0FDL0QsQ0FDSVksWUFDSSxPQUFPdCtCLEtBQUtrakMsVUFBVTVFLFVBQVV0K0IsS0FBSzA5QixPQUFPLENBQ3BELENBQ0k4RixLQUFLbkQsRUFBU3BELEVBQWNxRCxFQUFLbUQsR0FDdkIzZ0MsRUFBTzlDLEtBQUsyOUIsT0FBT1gsT0FBT0MsQ0FBWSxFQUk1QyxPQUhZdjRCLEtBQUFBLElBQVI0N0IsR0FBcUJtRCxJQUNyQnpqQyxLQUFLbWdDLFdBQVdyOUIsRUFBS2xGLEtBQU8waUMsR0FDaEN0Z0MsS0FBSzBqQyxVQUFVLElBQUl0RCxFQUFJQyxFQUFTdjlCLEVBQU13OUIsQ0FBRyxDQUFDLEVBQ25DeDlCLENBQ2YsQ0FFSTY1QixNQUFNTSxFQUFjcUQsRUFBS3FELEdBQ3JCLE9BQU8zakMsS0FBS3dqQyxLQUFLckUsRUFBUTVDLFNBQVNJLE1BQU9NLEVBQWNxRCxFQUFLcUQsQ0FBUyxDQUM3RSxDQUVJcnFDLElBQUkyakMsRUFBY3FELEVBQUtxRCxHQUNuQixPQUFPM2pDLEtBQUt3akMsS0FBS3JFLEVBQVE1QyxTQUFTampDLElBQUsyakMsRUFBY3FELEVBQUtxRCxDQUFTLENBQzNFLENBRUkvRyxJQUFJSyxFQUFjcUQsRUFBS3FELEdBQ25CLE9BQU8zakMsS0FBS3dqQyxLQUFLckUsRUFBUTVDLFNBQVNLLElBQUtLLEVBQWNxRCxFQUFLcUQsQ0FBUyxDQUMzRSxDQUVJaHJDLE9BQU9nb0MsRUFBS0wsRUFBS00sR0FDYixPQUFPNWdDLEtBQUswakMsVUFBVSxJQUFJaEQsRUFBT0MsRUFBS0wsRUFBS00sQ0FBVyxDQUFDLENBQy9ELENBRUkzNUIsSUFBSTA1QixFQUFLTCxHQUNMLE9BQU90Z0MsS0FBSzBqQyxVQUFVLElBQUk1QyxFQUFTSCxFQUFLdm1DLEVBQVE4a0MsVUFBVWMsSUFBS00sQ0FBRyxDQUFDLENBQzNFLENBRUkzakIsS0FBS2xWLEdBS0QsTUFKZ0IsWUFBWixPQUFPQSxFQUNQQSxFQUFHLEVBQ0VBLElBQU1nMUIsRUFBT3hCLEtBQ2xCajdCLEtBQUswakMsVUFBVSxJQUFJdEMsRUFBUTM1QixDQUFDLENBQUMsRUFDMUJ6SCxJQUNmLENBRUk0akMsVUFBVUMsR0FDTixJQUNZbGdDLEVBQUtsRixFQURYa2UsRUFBTyxDQUFDLEtBQ2QsSUFBVyxDQUFDaFosRUFBS2xGLEtBQVVvbEMsRUFDTCxFQUFkbG5CLEVBQUsxakIsUUFDTDBqQixFQUFLOWYsS0FBSyxHQUFHLEVBQ2pCOGYsRUFBSzlmLEtBQUs4RyxDQUFHLEVBQ1RBLElBQVFsRixHQUFTdUIsQ0FBQUEsS0FBS2MsS0FBSys5QixNQUMzQmxpQixFQUFLOWYsS0FBSyxHQUFHLEdBQ2IsRUFBSTQvQixFQUFPekIsWUFBWXJlLEVBQU1sZSxDQUFLLEdBSTFDLE9BREFrZSxFQUFLOWYsS0FBSyxHQUFHLEVBQ04sSUFBSTQvQixFQUFPdkIsTUFBTXZlLENBQUksQ0FDcEMsQ0FFSW1uQixHQUFHaEMsRUFBV2lDLEVBQVVDLEdBRXBCLEdBREFoa0MsS0FBS2lrQyxXQUFXLElBQUlwQyxFQUFHQyxDQUFTLENBQUMsRUFDN0JpQyxHQUFZQyxFQUNaaGtDLEtBQUsyYyxLQUFLb25CLENBQVEsRUFBRWhDLEtBQU0sRUFBQ3BsQixLQUFLcW5CLENBQVEsRUFBRUUsTUFBTyxPQUVoRCxHQUFJSCxFQUNML2pDLEtBQUsyYyxLQUFLb25CLENBQVEsRUFBRUcsTUFBTyxPQUUxQixHQUFJRixFQUNMLE1BQU0sSUFBSTdqQyxNQUFNLDBDQUEwQyxFQUU5RCxPQUFPSCxJQUNmLENBRUlta0MsT0FBT3JDLEdBQ0gsT0FBTzloQyxLQUFLb2tDLFVBQVUsSUFBSXZDLEVBQUdDLENBQVMsQ0FBQyxDQUMvQyxDQUVJQyxPQUNJLE9BQU8vaEMsS0FBS29rQyxVQUFVLElBQUl6QyxDQUFNLENBQ3hDLENBRUl1QyxRQUNJLE9BQU9sa0MsS0FBS3FrQyxjQUFjeEMsRUFBSUYsQ0FBSSxDQUMxQyxDQUNJMkMsS0FBSzV6QixFQUFNNnpCLEdBSVAsT0FIQXZrQyxLQUFLaWtDLFdBQVd2ekIsQ0FBSSxFQUNoQjZ6QixHQUNBdmtDLEtBQUsyYyxLQUFLNG5CLENBQU8sRUFBRUMsT0FBUSxFQUN4QnhrQyxJQUNmLENBRUlxUCxJQUFJK3lCLEVBQVdtQyxHQUNYLE9BQU92a0MsS0FBS3NrQyxLQUFLLElBQUluQyxFQUFRQyxDQUFTLEVBQUdtQyxDQUFPLENBQ3hELENBRUlFLFNBQVN4SCxFQUFjL2dDLEVBQU1DLEVBQUlvb0MsRUFBU2xFLEVBQVVyZ0MsS0FBS2MsS0FBSys5QixJQUFNTSxFQUFRNUMsU0FBU0ssSUFBTXVDLEVBQVE1QyxTQUFTampDLEtBQ3hHLElBQU13SixFQUFPOUMsS0FBSzI5QixPQUFPWCxPQUFPQyxDQUFZLEVBQzVDLE9BQU9qOUIsS0FBS3NrQyxLQUFLLElBQUlqQyxFQUFTaEMsRUFBU3Y5QixFQUFNNUcsRUFBTUMsQ0FBRSxFQUFHLElBQU1vb0MsRUFBUXpoQyxDQUFJLENBQUMsQ0FDbkYsQ0FFSTRoQyxNQUFNekgsRUFBY25XLEVBQVV5ZCxFQUFTbEUsRUFBVWxCLEVBQVE1QyxTQUFTSSxPQUM5RCxJQUFNNzVCLEVBQU85QyxLQUFLMjlCLE9BQU9YLE9BQU9DLENBQVksRUFDNUMsR0FBSWo5QixLQUFLYyxLQUFLKzlCLElBQUssQ0FDZixJQUFNemlDLEVBQU0wcUIsYUFBb0IyVixFQUFPdEIsS0FBT3JVLEVBQVc5bUIsS0FBSzQ4QixJQUFJLE9BQVE5VixDQUFRLEVBQ2xGLE9BQU85bUIsS0FBS3lrQyxTQUFTLEtBQU0sR0FBRyxFQUFJaEksRUFBTzFpQyxLQUFNcUMsV0FBYyxJQUN6RDRELEtBQUs0OEIsSUFBSTk1QixHQUFNLEVBQUkyNUIsRUFBTzFpQyxLQUFNcUMsS0FBTzFDLElBQUksRUFDM0M2cUMsRUFBUXpoQyxDQUFJLENBQzVCLENBQWEsQ0FDYixDQUNRLE9BQU85QyxLQUFLc2tDLEtBQUssSUFBSWhDLEVBQVEsS0FBTWpDLEVBQVN2OUIsRUFBTWdrQixDQUFRLEVBQUcsSUFBTXlkLEVBQVF6aEMsQ0FBSSxDQUFDLENBQ3hGLENBR0k2aEMsTUFBTTFILEVBQWNsL0IsRUFBS3dtQyxFQUFTbEUsRUFBVXJnQyxLQUFLYyxLQUFLKzlCLElBQU1NLEVBQVE1QyxTQUFTSyxJQUFNdUMsRUFBUTVDLFNBQVNJLE9BQ2hHLEdBQUkzOEIsS0FBS2MsS0FBSzhqQyxjQUNWLE9BQU81a0MsS0FBSzBrQyxNQUFNekgsR0FBYyxFQUFJUixFQUFPMWlDLGlCQUFrQmdFLEtBQVF3bUMsQ0FBTyxFQUVoRixJQUFNemhDLEVBQU85QyxLQUFLMjlCLE9BQU9YLE9BQU9DLENBQVksRUFDNUMsT0FBT2o5QixLQUFLc2tDLEtBQUssSUFBSWhDLEVBQVEsS0FBTWpDLEVBQVN2OUIsRUFBTS9FLENBQUcsRUFBRyxJQUFNd21DLEVBQVF6aEMsQ0FBSSxDQUFDLENBQ25GLENBRUkwaEMsU0FDSSxPQUFPeGtDLEtBQUtxa0MsY0FBY25DLENBQUcsQ0FDckMsQ0FFSWpCLE1BQU1BLEdBQ0YsT0FBT2poQyxLQUFLMGpDLFVBQVUsSUFBSTFDLEVBQU1DLENBQUssQ0FBQyxDQUM5QyxDQUVJNEQsTUFBTTVELEdBQ0YsT0FBT2poQyxLQUFLMGpDLFVBQVUsSUFBSXhDLEVBQU1ELENBQUssQ0FBQyxDQUM5QyxDQUVJNkQsT0FBT3JtQyxHQUNILElBQU1pUyxFQUFPLElBQUk4eEIsRUFHakIsR0FGQXhpQyxLQUFLaWtDLFdBQVd2ekIsQ0FBSSxFQUNwQjFRLEtBQUsyYyxLQUFLbGUsQ0FBSyxFQUNXLElBQXRCaVMsRUFBSzR3QixNQUFNcm9DLE9BQ1gsTUFBTSxJQUFJa0gsTUFBTSx3Q0FBd0MsRUFDNUQsT0FBT0gsS0FBS3FrQyxjQUFjN0IsQ0FBTSxDQUN4QyxDQUVJdUMsSUFBSUMsRUFBU0MsRUFBV0MsR0FDcEIsSUFFTXgwQixFQUZOLEdBQUt1MEIsR0FBY0MsRUFjbkIsT0FaTXgwQixFQUFPLElBQUkreEIsRUFDakJ6aUMsS0FBS2lrQyxXQUFXdnpCLENBQUksRUFDcEIxUSxLQUFLMmMsS0FBS3FvQixDQUFPLEVBQ2JDLElBQ00xa0MsRUFBUVAsS0FBSzhDLEtBQUssR0FBRyxFQUMzQjlDLEtBQUttbEMsVUFBWXowQixFQUFLZ3lCLE1BQVEsSUFBSUUsRUFBTXJpQyxDQUFLLEVBQzdDMGtDLEVBQVUxa0MsQ0FBSyxHQUVmMmtDLElBQ0FsbEMsS0FBS21sQyxVQUFZejBCLEVBQUtpeUIsUUFBVSxJQUFJRSxFQUNwQzdpQyxLQUFLMmMsS0FBS3VvQixDQUFXLEdBRWxCbGxDLEtBQUtxa0MsY0FBY3pCLEVBQU9DLENBQU8sRUFicEMsTUFBTSxJQUFJMWlDLE1BQU0sOENBQThDLENBYzFFLENBRUlpbEMsTUFBTTdrQyxHQUNGLE9BQU9QLEtBQUswakMsVUFBVSxJQUFJdkMsRUFBTTVnQyxDQUFLLENBQUMsQ0FDOUMsQ0FFSThrQyxNQUFNOW1CLEVBQU0rbUIsR0FJUixPQUhBdGxDLEtBQUtpakMsYUFBYXBtQyxLQUFLbUQsS0FBS21qQyxPQUFPbHFDLE1BQU0sRUFDckNzbEIsR0FDQXZlLEtBQUsyYyxLQUFLNEIsQ0FBSSxFQUFFZ25CLFNBQVNELENBQVMsRUFDL0J0bEMsSUFDZixDQUVJdWxDLFNBQVNELEdBQ0wsSUFBTXpuQyxFQUFNbUMsS0FBS2lqQyxhQUFhcC9CLElBQUssRUFDbkMsR0FBWWEsS0FBQUEsSUFBUjdHLEVBQ0EsTUFBTSxJQUFJc0MsTUFBTSxzQ0FBc0MsRUFDMUQsSUFBTXFsQyxFQUFVeGxDLEtBQUttakMsT0FBT2xxQyxPQUFTNEUsRUFDckMsR0FBSTJuQyxFQUFVLEdBQW9COWdDLEtBQUFBLElBQWQ0Z0MsR0FBMkJFLElBQVlGLEVBQ3ZELE1BQU0sSUFBSW5sQyx5Q0FBeUNxbEMsUUFBY0YsWUFBb0IsRUFHekYsT0FEQXRsQyxLQUFLbWpDLE9BQU9scUMsT0FBUzRFLEVBQ2RtQyxJQUNmLENBRUl5bEMsS0FBSzNpQyxFQUFNM0QsRUFBT3M5QixFQUFPeEIsSUFBSzlvQixFQUFPdXpCLEdBSWpDLE9BSEExbEMsS0FBS2lrQyxXQUFXLElBQUkxQixFQUFLei9CLEVBQU0zRCxFQUFNZ1QsQ0FBSyxDQUFDLEVBQ3ZDdXpCLEdBQ0ExbEMsS0FBSzJjLEtBQUsrb0IsQ0FBUSxFQUFFQyxRQUFTLEVBQzFCM2xDLElBQ2YsQ0FFSTJsQyxVQUNJLE9BQU8zbEMsS0FBS3FrQyxjQUFjOUIsQ0FBSSxDQUN0QyxDQUNJeEcsU0FBUzMyQixFQUFJLEdBQ1QsS0FBYSxFQUFOQSxDQUFDLElBQ0pwRixLQUFLb2pDLE1BQU1uRCxjQUFlLEVBQzFCamdDLEtBQUtvakMsTUFBTWxELGNBQWNsZ0MsS0FBS29qQyxNQUFNN0gsTUFBT3Y3QixLQUFLbWdDLFVBQVUsQ0FFdEUsQ0FDSXVELFVBQVVoekIsR0FFTixPQURBMVEsS0FBS21sQyxVQUFVN0QsTUFBTXprQyxLQUFLNlQsQ0FBSSxFQUN2QjFRLElBQ2YsQ0FDSWlrQyxXQUFXdnpCLEdBQ1AxUSxLQUFLbWxDLFVBQVU3RCxNQUFNemtDLEtBQUs2VCxDQUFJLEVBQzlCMVEsS0FBS21qQyxPQUFPdG1DLEtBQUs2VCxDQUFJLENBQzdCLENBQ0kyekIsY0FBY3VCLEVBQUlDLEdBQ2QsSUFBTXpnQyxFQUFJcEYsS0FBS21sQyxVQUNmLEdBQUkvL0IsYUFBYXdnQyxHQUFPQyxHQUFNemdDLGFBQWF5Z0MsRUFFdkMsT0FEQTdsQyxLQUFLbWpDLE9BQU90L0IsSUFBSyxFQUNWN0QsS0FFWCxNQUFNLElBQUlHLGdDQUFnQzBsQyxFQUFRRCxFQUFHaEUsS0FBTixJQUFjaUUsRUFBR2pFLEtBQVNnRSxFQUFHaEUsT0FBTyxDQUMzRixDQUNJd0MsVUFBVTF6QixHQUNOLElBQU10TCxFQUFJcEYsS0FBS21sQyxVQUNmLEdBQU0vL0IsYUFBYXk4QixFQUluQixPQURBN2hDLEtBQUttbEMsVUFBWS8vQixFQUFFMjhCLEtBQU9yeEIsRUFDbkIxUSxLQUhILE1BQU0sSUFBSUcsTUFBTSw4QkFBOEIsQ0FJMUQsQ0FDSWlqQyxZQUNJLE9BQU9wakMsS0FBS21qQyxPQUFPLEVBQzNCLENBQ0lnQyxnQkFDSSxJQUFNbkQsRUFBS2hpQyxLQUFLbWpDLE9BQ2hCLE9BQU9uQixFQUFHQSxFQUFHL29DLE9BQVMsRUFDOUIsQ0FDSWtzQyxjQUFjejBCLEdBQ1YsSUFBTXN4QixFQUFLaGlDLEtBQUttakMsT0FDaEJuQixFQUFHQSxFQUFHL29DLE9BQVMsR0FBS3lYLENBQzVCLENBQ0EsRUEyQ0F0VyxFQUFBNGtDLElBQWNBLEVBQ2QsSUFBTThHLEVBQVVDLEVBQVEzckMsRUFBUThrQyxVQUFVYSxHQUFHLEVBTXZDaUcsR0FETjVyQyxFQUFBNnJDLElBSEEsWUFBZ0I5bUMsR0FDWixPQUFPQSxFQUFLNEUsT0FBTytoQyxDQUFPLENBQzlCLEVBRWVDLEVBQVEzckMsRUFBUThrQyxVQUFVWSxFQUFFLEdBTTNDLFNBQVNpRyxFQUFRaEYsR0FDYixNQUFPLENBQUNqb0MsRUFBR3NTLElBQU90UyxJQUFNMmpDLEVBQU94QixJQUFNN3ZCLEVBQUlBLElBQU1xeEIsRUFBT3hCLElBQU1uaUMsR0FBSSxFQUFJMmpDLEVBQU8xaUMsS0FBTWdwQyxFQUFJanFDLENBQUMsS0FBS2lvQyxLQUFNZ0MsRUFBSTMzQixDQUFDLEdBQzFHLENBQ0EsU0FBUzIzQixFQUFJanFDLEdBQ1QsT0FBT0EsYUFBYTJqQyxFQUFPdEIsS0FBT3JpQyxHQUFJLEVBQUkyakMsRUFBTzFpQyxNQUFPakIsSUFDNUQsQ0FOQXNCLEVBQUEya0MsR0FIQSxZQUFlNS9CLEdBQ1gsT0FBT0EsRUFBSzRFLE9BQU9paUMsQ0FBTSxDQUM3QixtREMvcUJBdHRDLE9BQU9tZSxlQUFlalAsRUFBUyxhQUFjLENBQUVuSixNQUFPLENBQUEsRUFBTSxFQUM1RG1KLEVBQUFzK0IsZ0JBQTBCdCtCLEVBQW9CdStCLGFBQUd2K0IsRUFBWXNjLEtBQUd0YyxVQUFrQkEsRUFBQXcrQixhQUF1QngrQixFQUFBeStCLHFCQUErQnorQixFQUFzQjArQixlQUFHMStCLEVBQWdCMitCLFNBQUczK0Isc0JBQThCQSxFQUFBNCtCLGtCQUE0QjUrQixFQUFBNitCLGVBQXlCNytCLEVBQXdCOCtCLGlCQUFHOStCLEVBQXNCKytCLGVBQUcvK0IsdUJBQStCQSxFQUFBZy9CLGVBQXlCaC9CLEVBQUFpL0Isa0JBQTRCai9CLEVBQXlCay9CLGtCQUFHbC9CLEVBQWNtL0IsT0FBR3JpQyxLQUFBQSxFQUM1YixJQUFNc2lDLEVBQVk3L0IsRUFBb0IsRUFDaENzMUIsRUFBUzJDLEdBQXlCLEVBd0lsQzZILEdBaElOci9CLEVBQUFtL0IsT0FOQSxTQUFnQjNxQyxHQUNaLElBQ1d1YixFQURMdlYsRUFBTyxHQUNiLElBQVd1VixLQUFRdmIsRUFDZmdHLEVBQUt1VixHQUFRLENBQUEsRUFDakIsT0FBT3ZWLENBQ1gsRUFVQXdGLEVBQUFrL0Isa0JBUkEsU0FBMkJodEIsRUFBSWxCLEdBQzNCLE1BQXFCLFdBQWpCLE9BQU9BLEVBQ0FBLEVBQ3dCLElBQS9CbGdCLE9BQU8ySixLQUFLdVcsQ0FBTSxFQUFFM2YsU0FFeEI0dEMsRUFBa0Ivc0IsRUFBSWxCLENBQU0sRUFDckIsQ0FBQ2d1QixFQUFlaHVCLEVBQVFrQixFQUFHcmlCLEtBQUt5dkMsTUFBTWwzQixHQUFHLEVBQ3BELEVBY0FwSSxFQUFBaS9CLGtCQUE0QkEsRUFTNUJqL0IsRUFBQWcvQixlQUF5QkEsRUFTekJoL0IsRUFBQXUvQixxQkFSQSxTQUE4QnZ1QixFQUFRc3VCLEdBQ2xDLEdBQXFCLFdBQWpCLE9BQU90dUIsRUFDUCxNQUFPLENBQUNBLEVBQ1osSUFBSyxJQUFNalYsS0FBT2lWLEVBQ2QsR0FBWSxTQUFSalYsR0FBa0J1akMsRUFBTWwzQixJQUFJck0sR0FDNUIsTUFBTyxDQUFBLEVBQ2YsTUFBTyxDQUFBLENBQ1gsRUFXQWlFLEVBQUErK0IsZUFUQSxTQUF3QixDQUFFUyxhQUFBQSxFQUFjQyxXQUFBQSxDQUFZLEVBQUV6dUIsRUFBUTB1QixFQUFTQyxHQUNuRSxHQUFJLENBQUNBLEVBQU8sQ0FDUixHQUFxQixVQUFqQixPQUFPM3VCLEdBQXVDLFdBQWpCLE9BQU9BLEVBQ3BDLE9BQU9BLEVBQ1gsR0FBcUIsVUFBakIsT0FBT0EsRUFDUCxPQUFPLEVBQUlvdUIsRUFBVWp0QyxLQUFNNmUsR0FDdkMsQ0FDSSxPQUFPLEVBQUlvdUIsRUFBVWp0QyxLQUFNcXRDLElBQWVDLEtBQWEsRUFBSUwsRUFBVWxNLGFBQWF3TSxDQUFPLEdBQzdGLEVBS0ExL0IsRUFBQTgrQixpQkFIQSxTQUEwQjlvQyxHQUN0QixPQUFPNHBDLEVBQW9COXlCLG1CQUFtQjlXLENBQUcsQ0FBQyxDQUN0RCxFQUtBZ0ssRUFBQTYrQixlQUhBLFNBQXdCN29DLEdBQ3BCLE9BQU82cEMsbUJBQW1CakIsRUFBa0I1b0MsQ0FBRyxDQUFDLENBQ3BELEVBT0FnSyxFQUFBNCtCLGtCQUE0QkEsRUFJNUI1K0IsRUFBQTQvQixvQkFBOEJBLEVBVTlCNS9CLEVBQUEyK0IsU0FUQSxTQUFrQjdvQyxFQUFJTCxHQUNsQixHQUFJOUUsTUFBTUMsUUFBUWtGLENBQUUsRUFDaEIsSUFBSyxJQUFNNUUsS0FBSzRFLEVBQ1pMLEVBQUV2RSxDQUFDLE9BR1B1RSxFQUFFSyxDQUFFLENBRVosRUFjQWtLLEVBQUEwK0IsZUFBeUIsQ0FDckJ2bUIsTUFBTzJuQixFQUFtQixDQUN0QkMsV0FBWSxDQUFDQyxFQUFLMXJDLEVBQU1DLElBQU95ckMsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTW9DLGlCQUFrQkQsa0JBQXNCLEtBQzlGMHJDLEVBQUk5RCxJQUFHLEVBQUlrRCxFQUFVanRDLEtBQU1tQyxhQUFpQixJQUFNMHJDLEVBQUlqdkMsT0FBT3dELEVBQUksQ0FBQSxDQUFJLEVBQUcsSUFBTXlyQyxFQUFJanZDLE9BQU93RCxHQUFJLEVBQUk2cUMsRUFBVWp0QyxLQUFNb0MsU0FBVSxFQUFFd2dCLE1BQUssRUFBSXFxQixFQUFVanRDLG1CQUFvQm9DLE1BQU9ELElBQU8sQ0FBQyxDQUMvTCxDQUFTLEVBQ0QyckMsWUFBYSxDQUFDRCxFQUFLMXJDLEVBQU1DLElBQU95ckMsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTW9DLGFBQWUsS0FDekQsQ0FBQSxJQUFURCxFQUNBMHJDLEVBQUlqdkMsT0FBT3dELEVBQUksQ0FBQSxDQUFJLEdBR25CeXJDLEVBQUlqdkMsT0FBT3dELEdBQUksRUFBSTZxQyxFQUFVanRDLEtBQU1vQyxTQUFVLEVBQzdDaXFDLEVBQWF3QixFQUFLenJDLEVBQUlELENBQUksRUFFMUMsQ0FBUyxFQUNENHJDLFlBQWEsQ0FBQzVyQyxFQUFNQyxJQUFpQixDQUFBLElBQVRELEdBQXVCLENBQUUsR0FBR0EsRUFBTSxHQUFHQyxHQUNqRTRyQyxhQUFjMUIsQ0FDdEIsQ0FBSyxFQUNEdDBCLE1BQU8yMUIsRUFBbUIsQ0FDdEJDLFdBQVksQ0FBQ0MsRUFBSzFyQyxFQUFNQyxJQUFPeXJDLEVBQUk5RCxJQUFHLEVBQUlrRCxFQUFVanRDLEtBQU1vQyxpQkFBa0JELGtCQUFzQixJQUFNMHJDLEVBQUlqdkMsT0FBT3dELEdBQUksRUFBSTZxQyxFQUFVanRDLEtBQU1tQyx1QkFBMEJDLE9BQVFELE9BQVVDLE9BQVFELEdBQU0sQ0FBQyxFQUN0TTJyQyxZQUFhLENBQUNELEVBQUsxckMsRUFBTUMsSUFBT3lyQyxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNb0MsYUFBZSxJQUFNeXJDLEVBQUlqdkMsT0FBT3dELEVBQWEsQ0FBQSxJQUFURCxJQUF1QixFQUFJOHFDLEVBQVVqdEMsS0FBTW9DLE9BQVFELE9BQVVDLE9BQVFELEdBQU0sQ0FBQyxFQUMzSzRyQyxZQUFhLENBQUM1ckMsRUFBTUMsSUFBaUIsQ0FBQSxJQUFURCxHQUF1Qk8sS0FBS3FiLElBQUk1YixFQUFNQyxDQUFFLEVBQ3BFNHJDLGFBQWMsQ0FBQ0gsRUFBSzcxQixJQUFVNjFCLEVBQUloTCxJQUFJLFFBQVM3cUIsQ0FBSyxDQUM1RCxDQUFLLENBQ0osRUFTRG5LLEVBQUF5K0IscUJBQStCQSxFQUkvQnorQixFQUFBdytCLGFBQXVCQSxFQUNOLElBUWpCLElBQUlsaUIsRUFDT0EsRUEvSFgsU0FBUzJpQixFQUFrQi9zQixFQUFJbEIsRUFBU2tCLEVBQUdsQixRQUN2QyxHQUFNLENBQUU5WCxLQUFBQSxFQUFNckosS0FBQUEsQ0FBSSxFQUFLcWlCLEVBQ3ZCLEdBQUtoWixFQUFLa25DLGNBRVksV0FBbEIsT0FBT3B2QixFQUFYLENBRUEsSUFDV2pWLEVBRExza0MsRUFBUXh3QyxFQUFLeXZDLE1BQU1nQixTQUN6QixJQUFXdmtDLEtBQU9pVixFQUNUcXZCLEVBQU10a0MsSUFDUHVpQyxFQUFnQnBzQix1QkFBeUJuVyxJQUFNLENBSm5ELENBTVIsQ0FFQSxTQUFTaWpDLEVBQWVodUIsRUFBUXF2QixHQUM1QixHQUFxQixXQUFqQixPQUFPcnZCLEVBQ1AsTUFBTyxDQUFDQSxFQUNaLElBQUssSUFBTWpWLEtBQU9pVixFQUNkLEdBQUlxdkIsRUFBTXRrQyxHQUNOLE1BQU8sQ0FBQSxFQUNmLE1BQU8sQ0FBQSxDQUNYLENBNkJBLFNBQVM2aUMsRUFBa0I1b0MsR0FDdkIsTUFBa0IsVUFBZCxPQUFPQSxFQUNBLEdBQUdBLEVBQ1BBLEVBQUk5RCxRQUFRLEtBQU0sSUFBSSxFQUFFQSxRQUFRLE1BQU8sSUFBSSxDQUN0RCxDQUVBLFNBQVMwdEMsRUFBb0I1cEMsR0FDekIsT0FBT0EsRUFBSTlELFFBQVEsTUFBTyxHQUFHLEVBQUVBLFFBQVEsTUFBTyxHQUFHLENBQ3JELENBWUEsU0FBUzR0QyxFQUFtQixDQUFFQyxXQUFBQSxFQUFZRSxZQUFBQSxFQUFhQyxZQUFBQSxFQUFhQyxhQUFBQSxDQUFZLEdBQzVFLE1BQU8sQ0FBQ0gsRUFBSzFyQyxFQUFNQyxFQUFJNmdDLEtBQ2JyL0IsRUFBYStHLEtBQUFBLElBQVB2SSxFQUNORCxFQUNBQyxhQUFjNnFDLEVBQVU3TCxPQUNuQmovQixhQUFnQjhxQyxFQUFVN0wsS0FBT3dNLEVBQTRCRSxHQUFqQkQsRUFBSzFyQyxFQUFNQyxDQUFFLEVBQWdDQSxHQUMxRkQsYUFBZ0I4cUMsRUFBVTdMLE1BQ3JCME0sRUFBWUQsRUFBS3pyQyxFQUFJRCxDQUFJLEVBQUdBLEdBQzdCNHJDLEVBQVk1ckMsRUFBTUMsQ0FBRSxFQUNsQyxPQUFPNmdDLElBQVdnSyxFQUFVN0wsTUFBVXg5QixhQUFlcXBDLEVBQVU3TCxLQUFpQ3g5QixFQUF6Qm9xQyxFQUFhSCxFQUFLanFDLENBQUcsQ0FDL0YsQ0FDTCxDQXlCQSxTQUFTMG9DLEVBQXFCdUIsRUFBS08sR0FDL0IsSUFFTXBvQixFQUZOLE1BQVcsQ0FBQSxJQUFQb29CLEVBQ09QLEVBQUloTCxJQUFJLFFBQVMsQ0FBQSxDQUFJLEdBQzFCN2MsRUFBUTZuQixFQUFJaEwsSUFBSSxTQUFTLEVBQUlvSyxFQUFVanRDLE1BQU8sRUFDekMySyxLQUFBQSxJQUFQeWpDLEdBQ0EvQixFQUFhd0IsRUFBSzduQixFQUFPb29CLENBQUUsRUFDeEJwb0IsRUFDWCxDQUVBLFNBQVNxbUIsRUFBYXdCLEVBQUs3bkIsRUFBT29vQixHQUM5Qnp2QyxPQUFPMkosS0FBSzhsQyxDQUFFLEVBQUU1bEMsUUFBUSxHQUFPcWxDLEVBQUlqdkMsUUFBTyxFQUFJcXVDLEVBQVVqdEMsS0FBTWdtQixLQUFRLEVBQUlpbkIsRUFBVWxNLGFBQWF0L0IsQ0FBQyxJQUFLLENBQUEsQ0FBSSxDQUFDLENBQ2hILENBOEJBLFNBQVMwcUMsRUFBZ0Jwc0IsRUFBSWxhLEVBQUt5YixFQUFPdkIsRUFBR2haLEtBQUtrbkMsY0FDN0MsR0FBSzNzQixFQUFMLENBR0EsR0FEQXpiLEVBQU0sZ0JBQWdCQSxFQUNULENBQUEsSUFBVHliLEVBQ0EsTUFBTSxJQUFJbGIsTUFBTVAsQ0FBRyxFQUN2QmthLEVBQUdyaUIsS0FBSzJ3QyxPQUFPbG9CLEtBQUt0Z0IsQ0FBRyxDQUpuQixDQUtSLENBNUJBZ0ksRUFBQXlnQyxRQU5BLFNBQWlCVCxFQUFLdnFDLEdBQ2xCLE9BQU91cUMsRUFBSXZFLFdBQVcsT0FBUSxDQUMxQm5xQixJQUFLN2IsRUFDTHNmLEtBQU1zcUIsRUFBUzVwQyxFQUFFc2YsUUFBVXNxQixFQUFTNXBDLEVBQUVzZixNQUFRLElBQUk4ZixFQUFPdkIsTUFBTTc5QixFQUFFc2YsSUFBSSxFQUM3RSxDQUFLLENBQ0wsR0FHV3VILEVBR1JBLElBQVN0YyxFQUFBc2MsS0FBZUEsRUFBTyxLQUZ6QkEsRUFBVSxJQUFJLEdBQUssTUFDeEJBLEVBQUtBLEVBQVUsSUFBSSxHQUFLLE1BZ0I1QnRjLEVBQUF1K0IsYUFkQSxTQUFzQm1DLEVBQVVDLEVBQWNDLEdBRTFDLE9BQUlGLGFBQW9CdEIsRUFBVTdMLE1BQ3hCaDVCLEVBQVdvbUMsSUFBaUJya0IsRUFBS3VrQixJQUNoQ0QsRUFDRHJtQyxHQUNJLEVBQUk2a0MsRUFBVWp0QyxXQUFZdXVDLFdBQzFCLEVBQUl0QixFQUFVanRDLFlBQWF1dUMsV0FDL0JubUMsR0FDSSxFQUFJNmtDLEVBQVVqdEMsV0FBWXV1QyxLQUMxQixFQUFJdEIsRUFBVWp0QyxXQUFZdXVDLCtDQUVqQ0UsR0FBbUIsRUFBSXhCLEVBQVVsTSxhQUFhd04sQ0FBUSxFQUFFdGxDLFdBQWEsSUFBTXdqQyxFQUFrQjhCLENBQVEsQ0FDaEgsRUFVQTFnQyxFQUFBcytCLGdCQUEwQkEsK0NDN0twQjNLLG1CQUZON2lDLE9BQU9tZSxlQUFlNnhCLEdBQVMsYUFBYyxDQUFFanFDLE1BQU8sQ0FBQSxFQUFNLEVBRXREODhCLEVBQVEsQ0FFVmhsQixLQUFNLElBSEp5d0IsRUFBWTcvQixFQUFvQixHQUdkZzBCLEtBQUssTUFBTSxFQUUvQndOLE9BQVEsSUFBSTNCLEVBQVU3TCxLQUFLLFFBQVEsRUFDbkN5TixhQUFjLElBQUk1QixFQUFVN0wsS0FBSyxjQUFjLEVBQy9DME4sV0FBWSxJQUFJN0IsRUFBVTdMLEtBQUssWUFBWSxFQUMzQzJOLG1CQUFvQixJQUFJOUIsRUFBVTdMLEtBQUssb0JBQW9CLEVBQzNENE4sU0FBVSxJQUFJL0IsRUFBVTdMLEtBQUssVUFBVSxFQUN2QzZOLGVBQWdCLElBQUloQyxFQUFVN0wsS0FBSyxnQkFBZ0IsRUFFbkQ4TixRQUFTLElBQUlqQyxFQUFVN0wsS0FBSyxTQUFTLEVBQ3JDNVEsT0FBUSxJQUFJeWMsRUFBVTdMLEtBQUssUUFBUSxFQUNuQ243QixLQUFNLElBQUlnbkMsRUFBVTdMLEtBQUssTUFBTSxFQUUvQjFqQyxLQUFNLElBQUl1dkMsRUFBVTdMLEtBQUssTUFBTSxFQUMvQnlDLE1BQU8sSUFBSW9KLEVBQVU3TCxLQUFLLE9BQU8sRUFFakM1ZSxLQUFNLElBQUl5cUIsRUFBVTdMLEtBQUssTUFBTSxFQUMvQitOLFFBQVMsSUFBSWxDLEVBQVU3TCxLQUFLLFNBQVMsRUFDckNnTyxRQUFTLElBQUluQyxFQUFVN0wsS0FBSyxTQUFTLEVBQ3JDaU8sU0FBVSxJQUFJcEMsRUFBVTdMLEtBQUssVUFBVSxDQUMxQyxFQUNEdU4sR0FBQXB1QyxRQUFrQmloQywyQ0N6QmxCN2lDLE9BQU9tZSxlQUFjemMsRUFBVSxhQUFjLENBQUVxRSxNQUFPLENBQUEsRUFBTSxFQUM1RHJFLEVBQUFpdkMsYUFBdUJqdkMsbUJBQTJCQSxFQUEyQmt2QyxpQkFBQWx2QyxFQUFBbXZDLFlBQXNCbnZDLEVBQTRCb3ZDLGtCQUFBcHZDLEVBQUFxdkMsYUFBdUIva0MsS0FBQUEsRUFDdEosSUFBTXNpQyxFQUFZNy9CLEVBQW9CLEVBQ2hDdWlDLEVBQVN0SyxFQUFpQixFQUMxQnNKLEVBQVVyaEMsRUFBa0IsRUFvRGxDLFNBQVNzaUMsRUFBUy9CLEVBQUtnQyxHQUNuQixJQUFNbDdCLEVBQU1rNUIsRUFBSWpMLE1BQU0sTUFBT2lOLENBQU0sRUFDbkNoQyxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNMnVDLEVBQVFwdUMsUUFBUTJ1QyxtQkFBb0IsSUFBTXJCLEVBQUlqdkMsT0FBTyt2QyxFQUFRcHVDLFFBQVEydUMsU0FBUyxFQUFJakMsRUFBVWp0QyxNQUFPMlUsSUFBTSxHQUFHLEVBQUlzNEIsRUFBVWp0QyxLQUFNMnVDLEVBQVFwdUMsUUFBUTJ1QyxnQkFBZ0J2NkIsSUFBTSxFQUNqTWs1QixFQUFJanJCLE1BQUssRUFBSXFxQixFQUFVanRDLEtBQU0ydUMsRUFBUXB1QyxRQUFRaXdCLFVBQVUsQ0FDM0QsQ0FDQSxTQUFTc2YsRUFBYS92QixFQUFJZ3dCLEdBQ3RCLEdBQU0sQ0FBRWxDLElBQUFBLEVBQUttQyxhQUFBQSxFQUFjQyxVQUFBQSxDQUFXLEVBQUdsd0IsRUFDckNrd0IsRUFBVUMsT0FDVnJDLEVBQUl4QyxPQUFNLEVBQUk0QixFQUFVanRDLFNBQVUrZixFQUFHb3dCLG1CQUFtQkosSUFBTyxHQUcvRGxDLEVBQUlqdkMsUUFBTyxFQUFJcXVDLEVBQVVqdEMsS0FBTWd3QyxXQUF1QkQsQ0FBSSxFQUMxRGxDLEVBQUk5QyxPQUFPLENBQUEsQ0FBSyxFQUV4QixDQWpFQTFxQyxFQUF1QnF2QyxhQUFBLENBQ25CemQsUUFBUyxDQUFBLENBQUdzYixRQUFBQSxDQUFTLEtBQUssRUFBSU4sRUFBVXBwQyxrQkFBbUIwcEMsdUJBQzlELEVBQ0RsdEMsRUFBNEJvdkMsa0JBQUEsQ0FDeEJ4ZCxRQUFTLENBQUEsQ0FBR3NiLFFBQUFBLEVBQVM2QyxXQUFBQSxDQUFZLElBQUtBLEdBQ2hDLEVBQUluRCxFQUFVcHBDLFFBQVMwcEMsc0JBQTRCNkMsYUFDbkQsRUFBSW5ELEVBQVVwcEMsUUFBUzBwQywrQkFDaEMsRUFZRGx0QyxFQUFBbXZDLFlBWEEsU0FBcUJhLEVBQUs3cEMsRUFBUW5HLEVBQVFxdkMsYUFBY1ksRUFBWUMsR0FDaEUsSUFBUXh3QixFQUFPc3dCLEVBQUwsR0FDSixDQUFFeEMsSUFBQUEsRUFBSzJDLGNBQUFBLEVBQWVDLFVBQUFBLENBQVcsRUFBRzF3QixFQUNwQzh2QixFQUFTYSxFQUFnQkwsRUFBSzdwQyxFQUFPOHBDLENBQVUsR0FDakRDLE1BQUFBLEVBQTZEQSxFQUFxQkMsR0FBaUJDLEdBQ25HYixFQUFTL0IsRUFBS2dDLENBQU0sRUFHcEJDLEVBQWEvdkIsR0FBSSxFQUFJa3RCLEVBQVVqdEMsTUFBTzZ2QyxJQUFTLENBRXZELEVBV0F4dkMsRUFBQWt2QyxpQkFUQSxTQUEwQmMsRUFBSzdwQyxFQUFRbkcsRUFBUXF2QyxhQUFjWSxHQUN6RCxJQUFRdndCLEVBQU9zd0IsRUFBTCxHQUNKLENBQUV4QyxJQUFBQSxFQUFLMkMsY0FBQUEsRUFBZUMsVUFBQUEsQ0FBVyxFQUFHMXdCLEVBRTFDNnZCLEVBQVMvQixFQURNNkMsRUFBZ0JMLEVBQUs3cEMsRUFBTzhwQyxDQUFVLENBQ2pDLEVBQ2RFLEdBQWlCQyxHQUNuQlgsRUFBYS92QixFQUFJNHVCLEVBQVFwdUMsUUFBUTJ1QyxPQUFPLENBRWhELEVBTUE3dUMsRUFBQXN3QyxpQkFKQSxTQUEwQjlDLEVBQUsrQyxHQUMzQi9DLEVBQUlqdkMsT0FBTyt2QyxFQUFRcHVDLFFBQVFpd0IsT0FBUW9nQixDQUFTLEVBQzVDL0MsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTTJ1QyxFQUFRcHVDLFFBQVEydUMsbUJBQW9CLElBQU1yQixFQUFJOUQsR0FBRzZHLEVBQVcsSUFBTS9DLEVBQUlqdkMsUUFBTyxFQUFJcXVDLEVBQVVqdEMsS0FBTTJ1QyxFQUFRcHVDLFFBQVEydUMsaUJBQWtCMEIsQ0FBUyxFQUFHLElBQU0vQyxFQUFJanZDLE9BQU8rdkMsRUFBUXB1QyxRQUFRMnVDLFFBQVMsSUFBSSxDQUFDLENBQUMsQ0FDOU4sRUFpQkE3dUMsRUFBQWl2QyxhQWZBLFNBQXNCLENBQUV6QixJQUFBQSxFQUFLTixRQUFBQSxFQUFTc0QsWUFBQUEsRUFBYXIwQixLQUFBQSxFQUFNbzBCLFVBQUFBLEVBQVc3d0IsR0FBQUEsSUFFaEUsR0FBa0JwVixLQUFBQSxJQUFkaW1DLEVBQ0EsTUFBTSxJQUFJeHFDLE1BQU0sMEJBQTBCLEVBQzlDLElBQU11TyxFQUFNazVCLEVBQUk5a0MsS0FBSyxLQUFLLEVBQzFCOGtDLEVBQUluRCxTQUFTLElBQUtrRyxFQUFXakMsRUFBUXB1QyxRQUFRaXdCLE9BQVEsSUFDakRxZCxFQUFJakwsTUFBTWp1QixHQUFLLEVBQUlzNEIsRUFBVWp0QyxLQUFNMnVDLEVBQVFwdUMsUUFBUTJ1QyxXQUFXdnZDLElBQUksRUFDbEVrdUMsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTTJVLCtCQUFrQyxJQUFNazVCLEVBQUlqdkMsUUFBTyxFQUFJcXVDLEVBQVVqdEMsS0FBTTJVLGtCQUFvQixFQUFJczRCLEVBQVVoTCxXQUFXME0sRUFBUXB1QyxRQUFRc3VDLGFBQWM5dUIsRUFBRyt3QixTQUFTLENBQUMsQ0FBQyxFQUMzTGpELEVBQUlqdkMsUUFBTyxFQUFJcXVDLEVBQVVqdEMsS0FBTTJVLGdCQUFrQixFQUFJczRCLEVBQVVwcEMsT0FBUWtjLEVBQUdneEIsaUJBQWlCeEQsR0FBUyxFQUNoR3h0QixFQUFHaFosS0FBS2lxQyxVQUNSbkQsRUFBSWp2QyxRQUFPLEVBQUlxdUMsRUFBVWp0QyxLQUFNMlUsV0FBY2s4QixDQUFXLEVBQ3hEaEQsRUFBSWp2QyxRQUFPLEVBQUlxdUMsRUFBVWp0QyxLQUFNMlUsU0FBWTZILENBQUksRUFFM0QsQ0FBSyxDQUNMLEVBaUJBLElBQU15MEIsRUFBSSxDQUNOMUQsUUFBUyxJQUFJTixFQUFVN0wsS0FBSyxTQUFTLEVBQ3JDa00sV0FBWSxJQUFJTCxFQUFVN0wsS0FBSyxZQUFZLEVBQzNDOFAsT0FBUSxJQUFJakUsRUFBVTdMLEtBQUssUUFBUSxFQUNuQytQLGFBQWMsSUFBSWxFLEVBQVU3TCxLQUFLLGNBQWMsRUFDL0NuUCxRQUFTLElBQUlnYixFQUFVN0wsS0FBSyxTQUFTLEVBQ3JDdmlCLE9BQVEsSUFBSW91QixFQUFVN0wsS0FBSyxRQUFRLEVBQ25DZ1EsYUFBYyxJQUFJbkUsRUFBVTdMLEtBQUssY0FBYyxDQUNsRCxFQUNELFNBQVNzUCxFQUFnQkwsRUFBSzdwQyxFQUFPOHBDLEdBQ2pDLElBT014RyxFQW9CeUNBLEVBQ3ZDeUQsRUFBUy93QixFQUFNcTBCLEVBQ2Y5cEMsRUFBTW9xQyxFQUFjOUQsRUFBY0MsRUE3QmxDK0QsRUFBaUJoQixFQUFJdHdCLGdCQUM3QixNQUFxQixDQUFBLElBQWpCc3hCLEdBQ08sRUFBSXBFLEVBQVVqdEMsUUFDbEJzeEMsQ0FFVWpCLEVBQUs3cEMsRUFBTzhwQyxFQUFhLElBRm5DZ0IsQ0FBWWpCLEVBQUs3cEMsRUFBTzhwQyxHQUd6QixDQUFFekMsSUFBQUEsRUFBSzl0QixHQUFBQSxDQUFFLEVBQUtzd0IsRUFDZHZHLEVBQVksRUFPdEIsQ0FBMkIsQ0FBRWdILFVBQUFBLEdBQWEsQ0FBRWpDLGFBQUFBLENBQVksS0FDOUMwQyxFQUFXMUMsR0FDWCxFQUFJNUIsRUFBVXBwQyxPQUFRaXRDLEtBQVksRUFBSW5CLEVBQU92RCxjQUFjeUMsRUFBY2MsRUFBT3hsQixLQUFLcW5CLEdBQUcsSUFDeEZWLEVBQ0MsQ0FBQ25DLEVBQVFwdUMsUUFBUXN1QyxjQUFjLEVBQUk1QixFQUFVaEwsV0FBVzBNLEVBQVFwdUMsUUFBUXN1QyxhQUFjMEMsQ0FBUSxLQVYvRXh4QixFQUFJdXdCLENBQVUsR0FZeEMsQ0FBeUIsQ0FBRS9DLFFBQUFBLEVBQVN4dEIsR0FBSSxDQUFFZ3hCLGNBQUFBLENBQWEsR0FBTSxDQUFFekQsV0FBQUEsRUFBWThELGFBQUFBLE1BQ3ZFN3hDLElBQUlreUMsRUFBVUwsRUFBZUwsR0FBZ0IsRUFBSTlELEVBQVVwcEMsT0FBUWt0QyxLQUFpQnhELElBSXBGLE9BSElELElBQ0FtRSxHQUFVLEVBQUl4RSxFQUFVcHBDLE9BQVE0dEMsS0FBVSxFQUFJOUIsRUFBT3ZELGNBQWNrQixFQUFZcUMsRUFBT3hsQixLQUFLcW5CLEdBQUcsS0FFM0YsQ0FBQ1AsRUFBRTNELFdBQVltRSxFQUMxQixHQWpCd0JwQixFQUFLQyxDQUFVLEdBRW5Db0IsQ0FnQnFCckIsRUFBSyxDQUFFYSxPQUFBQSxFQUFRamYsUUFBQUEsQ0FBTyxFQUFJNlgsR0FoQi9DNEgsQ0FBZ0JyQixFQUFLN3BDLEVBQU9zakMsR0FpQnRCLENBQUV5RCxRQUFBQSxFQUFTL3dCLEtBQUFBLEVBQU1xMEIsWUFBQUEsRUFBYTl3QixHQUFBQSxDQUFJLEVBQUdzd0IsRUFDckMsQ0FBRXRwQyxLQUFBQSxFQUFNb3FDLGFBQUFBLEVBQWM5RCxhQUFBQSxFQUFjQyxXQUFBQSxDQUFZLEVBQUd2dEIsRUFDekQrcEIsRUFBVWhuQyxLQUFLLENBQUNtdUMsRUFBRTFELFFBQVNBLEdBQVUsQ0FBQzBELEVBQUVDLE9BQXlCLFlBQWpCLE9BQU9BLEVBQXVCQSxFQUFPYixDQUFHLEVBQUlhLElBQVUsRUFBSWpFLEVBQVVqdEMsT0FBUSxFQUN4SCtHLEVBQUs0cUMsVUFDTDdILEVBQVVobkMsS0FBSyxDQUFDbXVDLEVBQUVoZixRQUEyQixZQUFsQixPQUFPQSxFQUF3QkEsRUFBUW9lLENBQUcsRUFBSXBlLEVBQVEsRUFFakZsckIsRUFBS2lxQyxTQUNMbEgsRUFBVWhuQyxLQUFLLENBQUNtdUMsRUFBRXB5QixPQUFRZ3lCLEdBQWMsQ0FBQ0ksRUFBRUcsY0FBYyxFQUFJbkUsRUFBVWp0QyxLQUFNcXRDLElBQWVDLEtBQWUsQ0FBQ3FCLEVBQVFwdUMsUUFBUWljLEtBQU1BLEVBQUssRUFFdkkyMEIsR0FDQXJILEVBQVVobkMsS0FBSyxDQUFDbXVDLEVBQUVFLGFBQWNBLEVBQWEsRUExQjFDdEQsRUFBSWhFLE9BQU8sR0FBR0MsQ0FBUyxFQVJsQyx3Q0NyRkFuckMsT0FBT21lLGVBQWU4MEIsR0FBUyxhQUFjLENBQUVsdEMsTUFBTyxDQUFBLEVBQU0sRUFDNURrdEMsR0FBQUMsa0JBQTRCRCxHQUFBRSxxQkFBK0JubkMsS0FBQUEsRUFDM0QsSUFBTW9uQyxFQUFXM2tDLEdBQW9CLEVBQy9CNi9CLEVBQVk1SCxFQUFxQixFQUNqQ3NKLEVBQVVyaEMsRUFBbUIsRUFDN0Iwa0MsRUFBWSxDQUNkL2YsUUFBUyx5QkFDWixFQTBCRCxTQUFTZ2dCLEVBQWlCbHlCLEVBQUl3d0IsR0FDMUIsR0FBTSxDQUFFMUMsSUFBQUEsRUFBS3J4QixLQUFBQSxDQUFJLEVBQUt1RCxFQUVoQnN3QixFQUFNLENBQ1J4QyxJQUFBQSxFQUNBTixRQUFTLGVBQ1Qvd0IsS0FBQUEsRUFDQXFDLE9BQVEsQ0FBQSxFQUNScXpCLFdBQVksQ0FBQSxFQUNackIsWUFBYSxDQUFBLEVBQ2JLLE9BQVEsR0FDUm54QixHQUFBQSxDQUNILEdBQ0QsRUFBSWd5QixFQUFTdkMsYUFBYWEsRUFBSzJCLEVBQVdybkMsS0FBQUEsRUFBVzRsQyxDQUFpQixDQUMxRSxDQTFCQXFCLEdBQUFFLHFCQWJBLFNBQThCL3hCLEdBQzFCLEdBQU0sQ0FBRTh0QixJQUFBQSxFQUFLaHZCLE9BQUFBLEVBQVFteEIsYUFBQUEsQ0FBYyxFQUFHandCLEVBQ3ZCLENBQUEsSUFBWGxCLEVBQ0FvekIsRUFBaUJseUIsRUFBSSxDQUFBLENBQUssRUFFSixVQUFqQixPQUFPbEIsR0FBd0MsQ0FBQSxJQUFsQkEsRUFBT3F4QixPQUN6Q3JDLEVBQUk5QyxPQUFPNEQsRUFBUXB1QyxRQUFRaWMsSUFBSSxHQUcvQnF4QixFQUFJanZDLFFBQU8sRUFBSXF1QyxFQUFVanRDLEtBQU1nd0MsV0FBdUIsSUFBSSxFQUMxRG5DLEVBQUk5QyxPQUFPLENBQUEsQ0FBSSxFQUV2QixFQVlBNkcsR0FBQUMsa0JBVkEsU0FBMkI5eEIsRUFBSW95QixHQUMzQixHQUFNLENBQUV0RSxJQUFBQSxFQUFLaHZCLE9BQUFBLENBQU0sRUFBS2tCLEVBQ1QsQ0FBQSxJQUFYbEIsR0FDQWd2QixFQUFJaEwsSUFBSXNQLEVBQU8sQ0FBQSxDQUFLLEVBQ3BCRixFQUFpQmx5QixDQUFFLEdBR25COHRCLEVBQUloTCxJQUFJc1AsRUFBTyxDQUFBLENBQUksQ0FFM0IseURDL0JBeHpDLE9BQU9tZSxlQUFlb3hCLEdBQVMsYUFBYyxDQUFFeHBDLE1BQU8sQ0FBQSxFQUFNLEVBQzVEd3BDLEdBQUFrRSxTQUFtQmxFLEdBQUFtRSxXQUFxQjFuQyxLQUFBQSxFQUV4QyxJQUFNMm5DLEVBQVksSUFBSXoyQixJQURILENBQUMsU0FBVSxTQUFVLFVBQVcsVUFBVyxPQUFRLFNBQVUsUUFDNUMsRUFJcENxeUIsR0FBQW1FLFdBSEEsU0FBb0J0ekMsR0FDaEIsTUFBbUIsVUFBWixPQUFPQSxHQUFpQnV6QyxFQUFVdDJCLElBQUlqZCxDQUFDLENBQ2xELEVBaUJBbXZDLEdBQUFrRSxTQWZBLFdBQ0ksSUFBTUcsRUFBUyxDQUNYbm1DLE9BQVEsQ0FBRStILEtBQU0sU0FBVSs1QixNQUFPLEVBQUksRUFDckM1dUMsT0FBUSxDQUFFNlUsS0FBTSxTQUFVKzVCLE1BQU8sRUFBSSxFQUNyQzdrQyxNQUFPLENBQUU4SyxLQUFNLFFBQVMrNUIsTUFBTyxFQUFJLEVBQ25DckUsT0FBUSxDQUFFMTFCLEtBQU0sU0FBVSs1QixNQUFPLEVBQUksQ0FDeEMsRUFDRCxNQUFPLENBQ0hzRSxNQUFPLENBQUUsR0FBR0QsRUFBUUUsUUFBUyxDQUFBLEVBQU1wbUMsUUFBUyxDQUFBLEVBQU1DLEtBQU0sQ0FBQSxDQUFNLEVBQzlENGhDLE1BQU8sQ0FBQyxDQUFFQSxNQUFPLEVBQUUsRUFBSXFFLEVBQU9ubUMsT0FBUW1tQyxFQUFPanpDLE9BQVFpekMsRUFBT2xwQyxNQUFPa3BDLEVBQU8xSSxRQUMxRTZJLEtBQU0sQ0FBRXhFLE1BQU8sRUFBSSxFQUNuQmo0QixJQUFLLEdBQ0xrNEIsU0FBVSxFQUNiLENBQ0wsMkRDdEJBeHZDLE9BQU9tZSxlQUFlNjFCLEdBQVMsYUFBYyxDQUFFanVDLE1BQU8sQ0FBQSxFQUFNLEVBQzVEaXVDLEdBQUFDLGNBQXdCRCxHQUFzQkUsZUFBR0YsR0FBNkJHLHNCQUFHbm9DLEtBQUFBLEVBS2pGZ29DLEdBQUFHLHNCQUpBLFNBQStCLENBQUVqMEIsT0FBQUEsRUFBUW5oQixLQUFBQSxDQUFJLEVBQUl5VyxHQUU3QyxPQURNNCtCLEVBQVFyMUMsRUFBS3l2QyxNQUFNcUYsTUFBTXIrQixLQUNMLENBQUEsSUFBVjQrQixHQUFrQkYsRUFBZWgwQixFQUFRazBCLENBQUssQ0FDbEUsRUFLQUosR0FBQUUsZUFBeUJBLEVBTXpCRixHQUFBQyxjQUF3QkEsTUFUeEIsU0FBU0MsRUFBZWgwQixFQUFRazBCLEdBQzVCLE9BQU9BLEVBQU03RSxNQUFNNXlCLEtBQUssR0FBVXMzQixFQUFjL3pCLEVBQVFtMEIsQ0FBSSxDQUFDLENBQ2pFLENBRUEsU0FBU0osRUFBYy96QixFQUFRbTBCLEdBRTNCLE9BQWlDcm9DLEtBQUFBLElBQXpCa1UsRUFBT20wQixFQUFLekYsV0FDZixPQUFDN0wsRUFBS3NSLEVBQUtDLFdBQVdDLFlBQXdDdm9DLEtBQUFBLEVBQVMrMkIsRUFBR3BtQixLQUFLLEdBQXlCM1EsS0FBQUEsSUFBaEJrVSxFQUFPczBCLEVBQWtCLEVBQzFILDZCQ2ZBeDBDLE9BQU9tZSxlQUFlczJCLEVBQVMsYUFBYyxDQUFFMXVDLE1BQU8sQ0FBQSxFQUFNLEVBQzVEMHVDLEVBQUFDLGdCQUEwQkQsRUFBQUUsZUFBeUJGLEVBQUFHLGNBQXdCSCxFQUE4QkksdUJBQUdKLEVBQW9CSyxhQUFHTCxFQUFzQk0sZUFBR04sRUFBZ0JPLFNBQUdocEMsS0FBQUEsRUFDL0ssSUFBTWlwQyxFQUFVeG1DLEdBQW1CLEVBQzdCeW1DLEVBQWtCeE8sR0FBMEIsRUFDNUMwTSxFQUFXemtDLEdBQW9CLEVBQy9CMi9CLEVBQVk2RyxFQUFxQixFQUNqQ25FLEVBQVNvRSxFQUFrQixFQUNqQyxJQUFJSixFQUNPQSxHQUFBQSxFQUdSQSxJQUFhUCxFQUFBTyxTQUFtQkEsRUFBVyxLQUZqQ0EsRUFBa0IsUUFBSSxHQUFLLFVBQ3BDQSxFQUFTQSxFQUFnQixNQUFJLEdBQUssUUFrQnRDUCxFQUFBTSxlQWhCQSxTQUF3QjcwQixHQUNwQixJQUFNMnpCLEVBQVFpQixFQUFhNTBCLEVBQU8xSyxJQUFJLEVBRXRDLEdBRGdCcStCLEVBQU01OUIsU0FBUyxNQUFNLEdBRWpDLEdBQXdCLENBQUEsSUFBcEJpSyxFQUFPbTFCLFNBQ1AsTUFBTSxJQUFJNXRDLE1BQU0sd0NBQXdDLENBQUMsS0FFNUQsQ0FDRCxHQUFJLENBQUNvc0MsRUFBTXR6QyxRQUE4QnlMLEtBQUFBLElBQXBCa1UsRUFBT20xQixTQUN4QixNQUFNLElBQUk1dEMsTUFBTSwwQ0FBMEMsRUFFdEMsQ0FBQSxJQUFwQnlZLEVBQU9tMUIsVUFDUHhCLEVBQU0xdkMsS0FBSyxNQUFNLENBQzdCLENBQ0ksT0FBTzB2QyxDQUNYLEVBU0FZLEVBQUFLLGFBQXVCQSxFQWlCdkJMLEVBQUFJLHVCQWhCQSxTQUFnQ3p6QixFQUFJeXlCLEdBQ2hDLElBaUIwQnlCLEVBakJwQixDQUFFcEcsSUFBQUEsRUFBS3J4QixLQUFBQSxFQUFNelYsS0FBQUEsQ0FBTSxFQUFHZ1osRUFpQlR5eUIsRUFoQllBLEVBQS9CLElBQU0wQixHQWdCb0JELEVBaEJZbHRDLEVBQUtrdEMsYUFrQnJDekIsRUFBTXZ6QyxPQUFPLEdBQU9rMUMsRUFBVW40QixJQUFJcUQsQ0FBQyxHQUFzQixVQUFoQjQwQixHQUFpQyxVQUFONTBCLENBQWMsRUFDbEYsR0FsQk4sSUFBTSswQixFQUE0QixFQUFmNUIsRUFBTXR6QyxRQUNyQixFQUFzQixJQUFwQmcxQyxFQUFTaDFDLFFBQWlDLElBQWpCc3pDLEVBQU10ekMsU0FBZ0IsRUFBSTIwQyxFQUFnQmYsdUJBQXVCL3lCLEVBQUl5eUIsRUFBTSxFQUFFLEdBVTVHLE9BVEk0QixJQUNNQyxFQUFZZixFQUFlZCxFQUFPaDJCLEVBQU16VixFQUFLdXRDLGNBQWVYLEVBQVNZLEtBQUssRUFDaEYxRyxFQUFJOUQsR0FBR3NLLEVBQVcsS0FDZCxHQUFJSCxFQUFTaDFDLE9BQ1RzMUMsQ0FBQUEsSUF5QkRuMUIsRUFYS1UsRUFkT0EsRUFjSHl5QixFQWRPQSxFQWNBMEIsRUFkT0EsRUFlbEMsR0FBTSxDQUFFckcsSUFBQUEsRUFBS3J4QixLQUFBQSxFQUFNelYsS0FBQUEsQ0FBTSxFQUFHZ1osRUFDdEJxekIsRUFBV3ZGLEVBQUl0dUMsSUFBSSxZQUFZLEVBQUkwdEMsRUFBVWp0QyxZQUFhd2MsR0FBTSxFQUNoRWk0QixFQUFVNUcsRUFBSXR1QyxJQUFJLFdBQVcsRUFBSTB0QyxFQUFVanRDLGFBQWMsRUFDdEMsVUFBckIrRyxFQUFLa3RDLGFBQ0xwRyxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNb3pDLGtDQUF5QzUyQixTQUFZQSxnQkFBb0IsSUFBTXF4QixFQUNyR2p2QyxPQUFPNGQsR0FBTSxFQUFJeXdCLEVBQVVqdEMsS0FBTXdjLE1BQVMsRUFDMUM1ZCxPQUFPdzBDLEdBQVUsRUFBSW5HLEVBQVVqdEMsWUFBYXdjLEdBQU0sRUFDbER1dEIsR0FBR3VKLEVBQWVkLEVBQU9oMkIsRUFBTXpWLEVBQUt1dEMsYUFBYSxFQUFHLElBQU16RyxFQUFJanZDLE9BQU82MUMsRUFBU2o0QixDQUFJLENBQUMsQ0FBQyxFQUU3RnF4QixFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNeTBDLGlCQUF1QixFQUNsRCxJQUFXcDFCLEtBQUs2MEIsR0FDUkMsRUFBVW40QixJQUFJcUQsQ0FBQyxHQUFZLFVBQU5BLEdBQXNDLFVBQXJCdFksRUFBS2t0QyxlQVd2QjUwQixJQUN4QixPQUFRQSxHQUNKLElBQUssU0FNRCxPQUxBd3VCLEVBQ0t6RCxRQUFPLEVBQUk2QyxFQUFVanRDLEtBQU1vekMsb0JBQTJCQSxnQkFBdUIsRUFDN0V4MEMsT0FBTzYxQyxHQUFTLEVBQUl4SCxFQUFVanRDLFVBQVd3YyxHQUFNLEVBQy9DNHRCLFFBQU8sRUFBSTZDLEVBQVVqdEMsS0FBTXdjLFlBQWUsRUFDMUM1ZCxPQUFPNjFDLEdBQVMsRUFBSXhILEVBQVVqdEMsTUFBTyxFQUU5QyxJQUFLLFNBS0QsT0FKQTZ0QyxFQUNLekQsUUFBTyxFQUFJNkMsRUFBVWp0QyxLQUFNb3pDLHFCQUE0QjUyQjtvQkFDeEQ0MkIsb0JBQTJCNTJCLFFBQVdBLFNBQVlBLElBQU8sRUFDeEQ1ZCxPQUFPNjFDLEdBQVMsRUFBSXhILEVBQVVqdEMsTUFBT3djLEdBQU0sRUFFcEQsSUFBSyxVQUtELE9BSkFxeEIsRUFDS3pELFFBQU8sRUFBSTZDLEVBQVVqdEMsS0FBTW96QyxzQkFBNkI1MkI7b0JBQ3pENDJCLHFCQUE0QjUyQixRQUFXQSxTQUFZQSxVQUFhQSxTQUFZLEVBQzNFNWQsT0FBTzYxQyxHQUFTLEVBQUl4SCxFQUFVanRDLE1BQU93YyxHQUFNLEVBRXBELElBQUssVUFNRCxPQUxBcXhCLEVBQ0t6RCxRQUFPLEVBQUk2QyxFQUFVanRDLEtBQU13YyxvQkFBdUJBLGNBQWlCQSxZQUFlLEVBQ2xGNWQsT0FBTzYxQyxFQUFTLENBQUEsQ0FBSyxFQUNyQnJLLFFBQU8sRUFBSTZDLEVBQVVqdEMsS0FBTXdjLG1CQUFzQkEsU0FBWSxFQUM3RDVkLE9BQU82MUMsRUFBUyxDQUFBLENBQUksRUFFN0IsSUFBSyxPQUdELE9BRkE1RyxFQUFJekQsUUFBTyxFQUFJNkMsRUFBVWp0QyxLQUFNd2MsZUFBa0JBLGNBQWlCQSxhQUFnQixFQUNsRnF4QixFQUFJanZDLE9BQU82MUMsRUFBUyxJQUFJLEVBRTVCLElBQUssUUFDRDVHLEVBQ0t6RCxRQUFPLEVBQUk2QyxFQUFVanRDLEtBQU1vekMscUJBQTRCQTttQkFDekRBLHNCQUE2QjUyQixZQUFlLEVBQzFDNWQsT0FBTzYxQyxHQUFTLEVBQUl4SCxFQUFVanRDLE1BQU93YyxJQUFPLENBQ2pFLENBQ0EsR0FoRCtCNkMsQ0FBQyxFQUc1Qnd1QixFQUFJN0YsS0FBTSxFQUNWcUwsRUFBZ0J0ekIsQ0FBRSxFQUNsQjh0QixFQUFJMUQsTUFBTyxFQUNYMEQsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTXkwQyxrQkFBeUIsS0E0Q3hELElBQTRCNUcsRUFBS2lCLEVBQVlDLEVBQXNCaE4sRUEzQzNEOEwsRUFBSWp2QyxPQUFPNGQsRUFBTWk0QixDQUFPLEVBQ3hCQyxDQTBDa0IsQ0FBRTdHLElBQUFBLEVBQUtpQixXQUFBQSxFQUFZQyxtQkFBQUEsQ0FBa0IsRUFBSWhOLEdBMUMzRDJTLENBQWlCMzBCLEVBQUkwMEIsR0E0Q3pCNUcsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTTh1QyxrQkFBNEIsSUFBTWpCLEVBQUlqdkMsUUFBTyxFQUFJcXVDLEVBQVVqdEMsS0FBTTh1QyxLQUFjQyxLQUF1QmhOLENBQUksQ0FBQyxDQTNDMUksQ0FBSyxDQXBDeUMsTUFFOUJzUixFQUFnQnR6QixDQUFFLENBQ2xDLENBQVMsR0FFRXEwQixDQUNYLEVBRUEsSUFBTUQsRUFBWSxJQUFJdDRCLElBQUksQ0FBQyxTQUFVLFNBQVUsVUFBVyxVQUFXLE9BQU8sRUEySHRFODRCLEdBeEJOdkIsRUFBQUcsY0FBd0JBLEVBdUJ4QkgsRUFBQUUsZUFBeUJBLEVBQ1AsQ0FDZHJoQixRQUFTLENBQUEsQ0FBR3BULE9BQUFBLENBQVEsSUFBSyxXQUFXQSxFQUNwQ3F5QixPQUFRLENBQUEsQ0FBR3J5QixPQUFBQSxFQUFRZ3lCLFlBQUFBLENBQWEsSUFBc0IsVUFBakIsT0FBT2h5QixHQUFxQixFQUFJb3VCLEVBQVVqdEMsWUFBYTZlLE1BQVksRUFBSW91QixFQUFVanRDLFlBQWE2d0MsSUFDdEksR0F0SkQsU0FBUzRDLEVBQWExZCxHQUNaeWMsRUFBUWgwQyxNQUFNQyxRQUFRczNCLENBQUUsRUFBSUEsRUFBS0EsRUFBSyxDQUFDQSxHQUFNLEdBQ25ELEdBQUl5YyxFQUFNanlCLE1BQU1xekIsRUFBUXZCLFVBQVUsRUFDOUIsT0FBT0csRUFDWCxNQUFNLElBQUlwc0MsTUFBTSx3Q0FBMENvc0MsRUFBTXJ6QyxLQUFLLEdBQUcsQ0FBQyxDQUM3RSxDQTRGQSxTQUFTbzBDLEVBQWNILEVBQVU1MkIsRUFBTW80QixFQUFZQyxFQUFVbEIsRUFBU21CLFNBQ2xFLElBQU1sUCxFQUFLaVAsSUFBWWxCLEVBQVNtQixRQUFVN0gsRUFBVTlILFVBQVVTLEdBQUtxSCxFQUFVOUgsVUFBVVUsSUFDdkZ0bUMsSUFBSTJvQyxFQUNKLE9BQVFrTCxHQUNKLElBQUssT0FDRCxPQUFPLEVBQUluRyxFQUFVanRDLEtBQU13YyxLQUFRb3BCLFNBQ3ZDLElBQUssUUFDRHNDLEdBQU8sRUFBSStFLEVBQVVqdEMsbUJBQW9Cd2MsS0FDekMsTUFDSixJQUFLLFNBQ0QwckIsR0FBTyxFQUFJK0UsRUFBVWp0QyxLQUFNd2MsZUFBa0JBLG1DQUFzQ0EsS0FDbkYsTUFDSixJQUFLLFVBQ0QwckIsRUFBTzZNLEdBQVEsRUFBSTlILEVBQVVqdEMsT0FBUXdjLG9CQUF1QkEsSUFBTyxFQUNuRSxNQUNKLElBQUssU0FDRDByQixFQUFPNk0sRUFBUyxFQUNoQixNQUNKLFFBQ0ksT0FBTyxFQUFJOUgsRUFBVWp0QyxZQUFhd2MsS0FBUW9wQixLQUFNd04sR0FDNUQsQ0FDSSxPQUFPeUIsSUFBWWxCLEVBQVNtQixRQUFVNU0sR0FBTyxFQUFJK0UsRUFBVWhJLEtBQUtpRCxDQUFJLEVBQ3BFLFNBQVM2TSxFQUFRQyxFQUFRL0gsRUFBVS9MLEtBQy9CLE9BQU8sRUFBSStMLEVBQVVmLE1BQUssRUFBSWUsRUFBVWp0QyxZQUFhd2MsZ0JBQW9CdzRCLEVBQU9KLEdBQWEsRUFBSTNILEVBQVVqdEMsY0FBZXdjLEtBQVV5d0IsRUFBVS9MLEdBQUcsQ0FDekosQ0FDQSxDQUVBLFNBQVNvUyxFQUFlMkIsRUFBV3o0QixFQUFNbzRCLEVBQVlDLEdBQ2pELEdBQXlCLElBQXJCSSxFQUFVLzFDLE9BQ1YsT0FBT3EwQyxFQUFjMEIsRUFBVSxHQUFJejRCLEVBQU1vNEIsRUFBWUMsQ0FBTyxFQUVoRXQxQyxJQUFJMm9DLEVBQ0osSUFFVWdOLEVBV0M3MUIsRUFiTG16QixHQUFRLEVBQUk3QyxFQUFPM0MsUUFBUWlJLENBQVMsRUFhMUMsSUFBVzUxQixLQVpQbXpCLEVBQU1ucEMsT0FBU21wQyxFQUFNM0ksUUFDZnFMLEdBQVMsRUFBSWpJLEVBQVVqdEMsWUFBYXdjLGdCQUMxQzByQixFQUFPc0ssRUFBTWxtQyxLQUFPNG9DLEdBQVMsRUFBSWpJLEVBQVVqdEMsTUFBT3djLFFBQVcwNEIsSUFDN0QsT0FBTzFDLEVBQU1sbUMsS0FDYixPQUFPa21DLEVBQU1ucEMsTUFDYixPQUFPbXBDLEVBQU0zSSxRQUdiM0IsRUFBTytFLEVBQVUvTCxJQUVqQnNSLEVBQU1wbUMsUUFDTixPQUFPb21DLEVBQU1DLFFBQ0RELEVBQ1p0SyxHQUFPLEVBQUkrRSxFQUFVZixLQUFLaEUsRUFBTXFMLEVBQWNsMEIsRUFBRzdDLEVBQU1vNEIsRUFBWUMsQ0FBTyxDQUFDLEVBQy9FLE9BQU8zTSxDQUNYLENBTUEsU0FBU21MLEVBQWdCdHpCLEdBQ2Zzd0IsR0FJbUJ0d0IsSUFDekIsR0FBTSxDQUFFOHRCLElBQUFBLEVBQUtyeEIsS0FBQUEsRUFBTXFDLE9BQUFBLENBQVEsRUFBR2tCLEVBQ3hCbXlCLEdBQWEsRUFBSXZDLEVBQU8vQyxnQkFBZ0I3c0IsRUFBSWxCLEVBQVEsTUFBTSxFQUNoRSxNQUFPLENBQ0hndkIsSUFBQUEsRUFDQU4sUUFBUyxPQUNUL3dCLEtBQUFBLEVBQ0FxQyxPQUFRQSxFQUFPMUssS0FDZis5QixXQUFBQSxFQUNBckIsWUFBYXFCLEVBQ2JkLGFBQWN2eUIsRUFDZHF5QixPQUFRLEdBQ1JueEIsR0FBQUEsQ0FDSCxDQUNMLEdBbEJvQ0EsQ0FBRSxHQUNsQyxFQUFJZ3lCLEVBQVN2QyxhQUFhYSxFQUFLc0UsQ0FBUyxDQUM1QyxDQUNBdkIsRUFBQUMsZ0JBQTBCQSxtREN6TDFCMTBDLE9BQU9tZSxlQUFlcE4sR0FBUyxhQUFjLENBQUVoTCxNQUFPLENBQUEsRUFBTSxFQUN0Q2dMLEdBQUF5bEMsZUFBR3hxQyxLQUFBQSxFQUN6QixJQUFNc2lDLEVBQVk3L0IsRUFBcUIsRUFDakN1aUMsRUFBU3RLLEVBQWtCLEVBYWpDLFNBQVMrUCxFQUFjcjFCLEVBQUk1UyxFQUFNeUUsR0FDN0IsR0FBTSxDQUFFaThCLElBQUFBLEVBQUsyQyxjQUFBQSxFQUFlaDBCLEtBQUFBLEVBQU16VixLQUFBQSxDQUFNLEVBQUdnWixFQUMzQyxHQUFxQnBWLEtBQUFBLElBQWpCaUgsRUFBSixDQUVNeWpDLEdBQVksRUFBSXBJLEVBQVVqdEMsS0FBTXdjLEtBQU8sRUFBSXl3QixFQUFVbE0sYUFBYTV6QixDQUFJLElBQzVFLEdBQUlxakMsR0FDQSxFQUFJYixFQUFPeEQsaUJBQWlCcHNCLEVBQUksMkJBQTJCczFCLENBQVcsTUFEMUUsQ0FJQTkxQyxJQUFJd29DLEdBQVksRUFBSWtGLEVBQVVqdEMsS0FBTXExQyxrQkFDWCxVQUFyQnR1QyxFQUFLdXVDLGNBQ0x2TixHQUFZLEVBQUlrRixFQUFVanRDLEtBQU0rbkMsUUFBZ0JzTixpQkFBeUJBLFlBSTdFeEgsRUFBSTlELEdBQUdoQyxHQUFXLEVBQUlrRixFQUFVanRDLEtBQU1xMUMsUUFBZSxFQUFJcEksRUFBVXpuQyxXQUFXb00sQ0FBWSxHQUFHLENBUGpHLENBTFEsQ0FhUixDQWpCQWxDLEdBQUF5bEMsZUFYQSxTQUF3QnAxQixFQUFJdzFCLEdBQ3hCLEdBQU0sQ0FBRUMsV0FBQUEsRUFBWXg5QixNQUFBQSxDQUFPLEVBQUcrSCxFQUFHbEIsT0FDakMsR0FBVyxXQUFQMDJCLEdBQW1CQyxFQUNuQixJQUFLLElBQU01ckMsS0FBTzRyQyxFQUNkSixFQUFjcjFCLEVBQUluVyxFQUFLNHJDLEVBQVc1ckMsR0FBS3JKLE9BQU8sTUFHdEMsVUFBUGcxQyxHQUFrQi8yQyxNQUFNQyxRQUFRdVosQ0FBSyxHQUMxQ0EsRUFBTXhQLFFBQVEsQ0FBQ2l0QyxFQUFLOTFDLElBQU15MUMsRUFBY3IxQixFQUFJcGdCLEVBQUc4MUMsRUFBSWwxQyxPQUFPLENBQUMsQ0FFbkUsMERDZEE1QixPQUFPbWUsZUFBZThGLEVBQVMsYUFBYyxDQUFFbGUsTUFBTyxDQUFBLEVBQU0sRUFDdkNrZSxFQUFBOHlCLGNBQUc5eUIsRUFBcUIreUIsY0FBRy95QixFQUFrQmd6QixXQUFHaHpCLEVBQXdCaXpCLGlCQUFHanpCLEVBQXdCa3pCLGlCQUFHbHpCLEVBQTJCbXpCLG9CQUFHbnpCLEVBQXdCb3pCLGlCQUFHcHpCLGlCQUF5QkEsRUFBQXF6QixjQUF3QnJ6QixFQUFBc3pCLFlBQXNCdHpCLEVBQUF1ekIsa0JBQTRCdnpCLEVBQUF3ekIsaUJBQTJCeHpCLEVBQUF5ekIsdUJBQWlDMXJDLEtBQUFBLEVBQ25WLElBQU1zaUMsRUFBWTcvQixFQUE2QixFQUN6Q3VpQyxFQUFTdEssRUFBMEIsRUFDbkNzSixFQUFVcmhDLEVBQTJCLEVBQ3JDZ3BDLEVBQVNqUixFQUEwQixFQThEbkNrUixHQXRETjN6QixFQUFBeXpCLHVCQVBBLFNBQWdDaEcsRUFBS2xqQyxHQUNqQyxHQUFNLENBQUUwZ0MsSUFBQUEsRUFBS3J4QixLQUFBQSxFQUFNdUQsR0FBQUEsQ0FBSSxFQUFHc3dCLEVBQzFCeEMsRUFBSTlELEdBQUdpTSxFQUFpQm5JLEVBQUtyeEIsRUFBTXJQLEVBQU00UyxFQUFHaFosS0FBSzhqQyxhQUFhLEVBQUcsS0FDN0R3RixFQUFJbUcsVUFBVSxDQUFFQyxpQkFBaUIsRUFBSXhKLEVBQVVqdEMsS0FBTW1OLEdBQVEsRUFBRSxDQUFBLENBQUksRUFDbkVrakMsRUFBSTdwQyxNQUFPLENBQ25CLENBQUssQ0FDTCxFQUtBb2MsRUFBQXd6QixpQkFIQSxTQUEwQixDQUFFdkksSUFBQUEsRUFBS3J4QixLQUFBQSxFQUFNdUQsR0FBSSxDQUFFaFosS0FBQUEsQ0FBTSxDQUFBLEVBQUl5dUMsRUFBWWtCLEdBQy9ELE9BQU8sRUFBSXpKLEVBQVVqSSxJQUFJLEdBQUd3USxFQUFXMTJDLElBQUksSUFBVSxFQUFJbXVDLEVBQVVmLEtBQUs4SixFQUFpQm5JLEVBQUtyeEIsRUFBTXJQLEVBQU1wRyxFQUFLOGpDLGFBQWEsR0FBRyxFQUFJb0MsRUFBVWp0QyxLQUFNMDJDLE9BQWF2cEMsR0FBTSxDQUFDLENBQUMsQ0FDNUssRUFNQXlWLEVBQUF1ekIsa0JBSkEsU0FBMkI5RixFQUFLcUcsR0FDNUJyRyxFQUFJbUcsVUFBVSxDQUFFQyxnQkFBaUJDLENBQU8sRUFBSSxDQUFBLENBQUksRUFDaERyRyxFQUFJN3BDLE1BQU8sQ0FDZixFQVNBb2MsRUFBQXN6QixZQUFzQkEsRUFJdEJ0ekIsRUFBQXF6QixjQUF3QkEsRUFLeEJyekIsRUFBQSt6QixlQUpBLFNBQXdCOUksRUFBS3J4QixFQUFNZ25CLEVBQVVxSCxHQUN6QyxJQUFNM0MsR0FBTyxFQUFJK0UsRUFBVWp0QyxLQUFNd2MsS0FBTyxFQUFJeXdCLEVBQVVsTSxhQUFheUMsQ0FBUSxrQkFDM0UsT0FBT3FILEdBQWdCLEVBQUlvQyxFQUFVanRDLEtBQU1rb0MsUUFBVytOLEVBQWNwSSxFQUFLcnhCLEVBQU1nbkIsQ0FBUSxJQUFNMEUsQ0FDakcsRUFNQXRsQixFQUFBb3pCLGlCQUEyQkEsRUFJM0JwekIsRUFBQW16QixvQkFBOEJBLEVBSTlCbnpCLEVBQUFrekIsaUJBSEEsU0FBMEIvMUIsRUFBSTYyQixHQUMxQixPQUFPYixFQUFvQmEsQ0FBUyxFQUFFMzNDLE9BQU8sR0FBTyxFQUFDLEVBQUkwd0MsRUFBTzVDLG1CQUFtQmh0QixFQUFJNjJCLEVBQVVuMUMsRUFBRSxDQUFDLENBQ3hHLEVBZUFtaEIsRUFBQWl6QixpQkFiQSxTQUEwQixDQUFFM0QsV0FBQUEsRUFBWTExQixLQUFBQSxFQUFNdUQsR0FBSSxDQUFFOHRCLElBQUFBLEVBQUtSLGFBQUFBLEVBQWNDLFdBQUFBLEVBQVl3RCxVQUFBQSxDQUFXLEVBQUUvd0IsR0FBQUEsQ0FBRSxFQUFJMnJCLEVBQU1wUixFQUFTdWMsR0FXakgsT0FWTUMsRUFBZ0JELEdBQWEsRUFBSTVKLEVBQVVqdEMsS0FBTWt5QyxNQUFlMTFCLE1BQVM2d0IsSUFBZUMsSUFBZTl3QixFQUN2R295QixFQUFTLENBQ1gsQ0FBQ0QsRUFBUXB1QyxRQUFRc3VDLGNBQWMsRUFBSTVCLEVBQVVoTCxXQUFXME0sRUFBUXB1QyxRQUFRc3VDLGFBQWNpQyxDQUFTLEdBQy9GLENBQUNuQyxFQUFRcHVDLFFBQVF1dUMsV0FBWS91QixFQUFHK3VCLFlBQ2hDLENBQUNILEVBQVFwdUMsUUFBUXd1QyxtQkFBb0JodkIsRUFBR2d2QixvQkFDeEMsQ0FBQ0osRUFBUXB1QyxRQUFReXVDLFNBQVVMLEVBQVFwdUMsUUFBUXl1QyxXQUUzQ2p2QixFQUFHaFosS0FBS2d3QyxZQUNSbkksRUFBTzlyQyxLQUFLLENBQUM2ckMsRUFBUXB1QyxRQUFRMHVDLGVBQWdCTixFQUFRcHVDLFFBQVEwdUMsZUFBZSxFQUMxRTdwQyxHQUFPLEVBQUk2bkMsRUFBVWp0QyxLQUFNODJDLE1BQWtCakosRUFBSWhFLE9BQU8sR0FBRytFLENBQU0sSUFDaEV0VSxJQUFZMlMsRUFBVS9MLEtBQU0sRUFBSStMLEVBQVVqdEMsS0FBTTByQyxVQUFhcFIsTUFBWWwxQixNQUFVLEVBQUk2bkMsRUFBVWp0QyxLQUFNMHJDLEtBQVF0bUMsSUFDMUgsR0FFa0IsRUFBSTZuQyxFQUFVanRDLGdCQTVDaEMsU0FBU2syQyxFQUFZckksR0FDakIsT0FBT0EsRUFBSXZFLFdBQVcsT0FBUSxDQUUxQm5xQixJQUFLeGdCLE9BQU9vRCxVQUFVMkgsZUFDdEJrWixNQUFNLEVBQUlxcUIsRUFBVWp0QyxtQ0FDNUIsQ0FBSyxDQUNMLENBRUEsU0FBU2kyQyxFQUFjcEksRUFBS3J4QixFQUFNZ25CLEdBQzlCLE9BQU8sRUFBSXlKLEVBQVVqdEMsS0FBTWsyQyxFQUFZckksQ0FBRyxVQUFVcnhCLE1BQVNnbkIsSUFDakUsQ0FPQSxTQUFTd1MsRUFBaUJuSSxFQUFLcnhCLEVBQU1nbkIsRUFBVXFILEdBQzNDLElBQU0zQyxHQUFPLEVBQUkrRSxFQUFVanRDLEtBQU13YyxLQUFPLEVBQUl5d0IsRUFBVWxNLGFBQWF5QyxDQUFRLGtCQUMzRSxPQUFPcUgsR0FBZ0IsRUFBSW9DLEVBQVVqSSxJQUFJa0QsR0FBTSxFQUFJK0UsRUFBVWhJLEtBQUtnUixFQUFjcEksRUFBS3J4QixFQUFNZ25CLENBQVEsQ0FBQyxDQUFDLEVBQUkwRSxDQUM3RyxDQUVBLFNBQVM2TixFQUFvQmEsR0FDekIsT0FBT0EsRUFBWWo0QyxPQUFPMkosS0FBS3N1QyxDQUFTLEVBQUUzM0MsT0FBTyxHQUFhLGNBQU53QyxDQUFpQixFQUFJLEVBQ2pGLENBK0JBbWhCLEVBQUFnekIsV0FWQSxTQUFvQixDQUFFL0gsSUFBQUEsRUFBSzl0QixHQUFJLENBQUVoWixLQUFBQSxDQUFJLENBQUksRUFBRWl3QyxHQUN2QyxJQUFNbGdCLEVBQUkvdkIsRUFBS2t3QyxjQUFnQixJQUFNLEdBRS9CN1UsR0FBSzhVLEVBRFFud0MsRUFBSzZiLGFBQ05vMEIsRUFBU2xnQixDQUFDLEVBQzVCLE9BQU8rVyxFQUFJdkUsV0FBVyxVQUFXLENBQzdCMS9CLElBQUt3NEIsRUFBR241QixTQUFVLEVBQ2xCa1csSUFBS2lqQixFQUNMeGYsTUFBTSxFQUFJcXFCLEVBQVVqdEMsS0FBc0IsZUFBaEJrM0MsRUFBT3QwQixLQUF3QjJ6QixHQUFZLEVBQUlELEVBQU9oSSxTQUFTVCxFQUFLcUosQ0FBTSxLQUFLRixNQUFZbGdCLElBQzdILENBQUssQ0FDTCxFQXlCQWxVLEVBQUEreUIsY0F2QkEsU0FBdUJ0RixHQUNuQixHQUFNLENBQUV4QyxJQUFBQSxFQUFLcnhCLEtBQUFBLEVBQU0rd0IsUUFBQUEsRUFBU3h0QixHQUFBQSxDQUFJLEVBQUdzd0IsRUFDN0I4QixFQUFRdEUsRUFBSTlrQyxLQUFLLE9BQU8sRUFDOUIsR0FBSWdYLEVBQUcwd0IsVUFBVyxDQUNkLElBQU0wRyxFQUFXdEosRUFBSXR1QyxJQUFJLFFBQVMsQ0FBQSxDQUFJLEVBRXRDLE9BREE2M0MsRUFBYyxJQUFNdkosRUFBSWp2QyxPQUFPdTRDLEVBQVUsQ0FBQSxDQUFLLENBQUMsRUFDeENBLENBQ2YsQ0FHSSxPQUZBdEosRUFBSWhMLElBQUlzUCxFQUFPLENBQUEsQ0FBSSxFQUNuQmlGLEVBQWMsSUFBTXZKLEVBQUkvQyxPQUFPLEVBQ3hCcUgsRUFDUCxTQUFTaUYsRUFBY0MsR0FDbkIsSUFBTXZ6QyxFQUFNK3BDLEVBQUlqTCxNQUFNLE9BQU8sRUFBSXFLLEVBQVVqdEMsS0FBTXdjLFVBQWEsRUFDOURxeEIsRUFBSW5ELFNBQVMsSUFBSyxFQUFHNW1DLEVBQUssSUFDdEJ1c0MsRUFBSWlILFVBQVUsQ0FDVi9KLFFBQUFBLEVBQ0FnQixTQUFVNXVDLEVBQ1Y2dUMsYUFBY21CLEVBQU94bEIsS0FBS3VrQixHQUM3QixFQUFFeUQsQ0FBSyxFQUNSdEUsRUFBSTlELElBQUcsRUFBSWtELEVBQVVoSSxLQUFLa04sQ0FBSyxFQUFHa0YsQ0FBUSxDQUN0RCxDQUFTLENBQ1QsQ0FDQSxFQTJCQXowQixFQUFBOHlCLGNBekJBLFNBQXVCckYsR0FDbkIsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS2h2QixPQUFBQSxFQUFRMHVCLFFBQUFBLEVBQVN4dEIsR0FBQUEsQ0FBSSxFQUFHc3dCLEVBRXJDLEdBQUksQ0FBQzd4QyxNQUFNQyxRQUFRb2dCLENBQU0sRUFDckIsTUFBTSxJQUFJelksTUFBTSwwQkFBMEIsRUFDOUMsSUFBTW14QyxFQUFjMTRCLEVBQU92RCxLQUFLLElBQVMsRUFBSXEwQixFQUFPNUMsbUJBQW1CaHRCLEVBQUkwMUIsQ0FBRyxDQUFDLEVBQy9FLEdBQUk4QixDQUFBQSxHQUFnQngzQixFQUFHaFosS0FBS3l3QyxZQUE1QixDQUVBLElBQU1yRixFQUFRdEUsRUFBSXR1QyxJQUFJLFFBQVMsQ0FBQSxDQUFLLEVBQzlCazRDLEVBQVc1SixFQUFJOWtDLEtBQUssUUFBUSxFQUNsQzhrQyxFQUFJdkMsTUFBTSxJQUFNenNCLEVBQU9yVyxRQUFRLENBQUNrdkMsRUFBTS8zQyxLQUM1Qmc0QyxFQUFTdEgsRUFBSWlILFVBQVUsQ0FDekIvSixRQUFBQSxFQUNBcUssV0FBWWo0QyxFQUNaNndDLGNBQWUsQ0FBQSxDQUNsQixFQUFFaUgsQ0FBUSxFQUNYNUosRUFBSWp2QyxPQUFPdXpDLEdBQU8sRUFBSWxGLEVBQVVqdEMsS0FBTW15QyxRQUFZc0YsR0FBVSxFQUN0REksRUFBU3hILEVBQUl5SCxvQkFBb0JILEVBQVFGLENBQVEsRUFHbERJLEdBQ0RoSyxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWhJLEtBQUtrTixDQUFLLENBQUMsQ0FDNUMsQ0FBSyxDQUFDLEVBQ0Y5QixFQUFJcHRDLE9BQU9rdkMsRUFBTyxJQUFNOUIsRUFBSTBILE1BQU8sRUFBRSxJQUFNMUgsRUFBSTdwQyxNQUFNLENBQUEsQ0FBSSxDQUFDLENBaEJ0RCxDQWlCUixzQ0MvSEE3SCxPQUFPbWUsZUFBZXl3QixFQUFTLGFBQWMsQ0FBRTdvQyxNQUFPLENBQUEsRUFBTSxFQUNoQzZvQyxFQUFBeUsscUJBQUd6SyxrQkFBMEJBLEVBQUEwSyxnQkFBMEIxSyxFQUF3QjJLLGlCQUFHdnRDLEtBQUFBLEVBQzlHLElBQU1zaUMsRUFBWTcvQixFQUFxQixFQUNqQ3VoQyxFQUFVdEosRUFBbUIsRUFDN0IzQyxFQUFTcDFCLEVBQWtDLEVBQzNDeWtDLEVBQVcrQixHQUFvQixFQStEckMsU0FBU3FFLEVBQVc5SCxHQUNoQixHQUFNLENBQUV4QyxJQUFBQSxFQUFLcnhCLEtBQUFBLEVBQU11RCxHQUFBQSxDQUFJLEVBQUdzd0IsRUFDMUJ4QyxFQUFJOUQsR0FBR2hxQixFQUFHK3VCLFdBQVksSUFBTWpCLEVBQUlqdkMsT0FBTzRkLEdBQU0sRUFBSXl3QixFQUFVanRDLEtBQU0rZixFQUFHK3VCLGNBQWMvdUIsRUFBR2d2QixxQkFBcUIsQ0FBQyxDQUMvRyxDQWNBLFNBQVNxSixFQUFXdkssRUFBS04sRUFBU3RxQyxHQUM5QixHQUFlMEgsS0FBQUEsSUFBWDFILEVBQ0EsTUFBTSxJQUFJbUQsa0JBQWtCbW5DLHNCQUE0QixFQUM1RCxPQUFPTSxFQUFJdkUsV0FBVyxVQUE0QixZQUFqQixPQUFPcm1DLEVBQXVCLENBQUVrYyxJQUFLbGMsQ0FBUSxFQUFHLENBQUVrYyxJQUFLbGMsRUFBUTJmLE1BQU0sRUFBSXFxQixFQUFVem5DLFdBQVd2QyxDQUFNLEVBQUcsQ0FDNUksQ0FuRUFzcUMsRUFBQTJLLGlCQWhCQSxTQUEwQjdILEVBQUt4TCxHQUMzQixHQUFNLENBQUVnSixJQUFBQSxFQUFLTixRQUFBQSxFQUFTMXVCLE9BQUFBLEVBQVF1eUIsYUFBQUEsRUFBY3J4QixHQUFBQSxDQUFFLEVBQUtzd0IsRUFDN0NnSSxFQUFjeFQsRUFBSXlULE1BQU10MkMsS0FBSytkLEVBQUdyaUIsS0FBTW1oQixFQUFRdXlCLEVBQWNyeEIsQ0FBRSxFQUM5RHc0QixFQUFZSCxFQUFXdkssRUFBS04sRUFBUzhLLENBQVcsRUFHaERsRyxHQUZ5QixDQUFBLElBQTNCcHlCLEVBQUdoWixLQUFLeXhDLGdCQUNSejRCLEVBQUdyaUIsS0FBSzg2QyxlQUFlSCxFQUFhLENBQUEsQ0FBSSxFQUM5QnhLLEVBQUk5a0MsS0FBSyxPQUFPLEdBQzlCc25DLEVBQUlpSCxVQUFVLENBQ1Z6NEIsT0FBUXc1QixFQUNSL0ssV0FBWUwsRUFBVS9MLElBQ3RCNlAsY0FBa0JoeEIsRUFBR2d4QixjQUFOLElBQXVCeEQsRUFDdENGLGFBQWNrTCxFQUNkL0gsY0FBZSxDQUFBLENBQ2xCLEVBQUUyQixDQUFLLEVBQ1I5QixFQUFJb0ksS0FBS3RHLEVBQU8sSUFBTTlCLEVBQUk3cEMsTUFBTSxDQUFBLENBQUksQ0FBQyxDQUN6QyxFQThDQSttQyxFQUFBMEssZ0JBNUNBLFNBQXlCNUgsRUFBS3hMLEdBQzFCLElBQUluRCxFQUNFLENBQUVtTSxJQUFBQSxFQUFLTixRQUFBQSxFQUFTMXVCLE9BQUFBLEVBQVF1eUIsYUFBQUEsRUFBYzVELE1BQUFBLEVBQU96dEIsR0FBQUEsQ0FBRSxFQUFLc3dCLEVBQzFEcUksR0FBQUEsQ0F1RHlCekksRUFBYXBMLEdBdkR0QzZULENBQWtCMzRCLEVBdURrQixVQXZEZDhrQixHQXdEdEIsR0FBSUEsRUFBSXpzQixPQUFTLENBQUM2M0IsRUFBVUMsT0FDeEIsTUFBTSxJQUFJOXBDLE1BQU0sOEJBQThCLEVBeEQ1Q3V5QyxFQUFXLENBQUNuTCxHQUFTM0ksRUFBSStULFFBQVUvVCxFQUFJK1QsUUFBUTUyQyxLQUFLK2QsRUFBR3JpQixLQUFNbWhCLEVBQVF1eUIsRUFBY3J4QixDQUFFLEVBQUk4a0IsRUFBSThULFNBQ25HLElBQU1FLEVBQWNULEVBQVd2SyxFQUFLTixFQUFTb0wsQ0FBUSxFQUMvQ3hHLEVBQVF0RSxFQUFJdHVDLElBQUksT0FBTyxFQTRCN0IsU0FBU3U1QyxFQUFZQyxFQUFTbFUsRUFBSXpzQixPQUFRLEVBQUk2MEIsRUFBVWp0QyxXQUFjaXRDLEVBQVUvTCxLQUM1RSxJQUFNOFgsRUFBVWo1QixFQUFHaFosS0FBS2t5QyxZQUFjdEssRUFBUXB1QyxRQUFRMEYsS0FBTzBvQyxFQUFRcHVDLFFBQVE3QyxLQUN2RW01QyxFQUFhLEVBQUcsWUFBYWhTLEdBQU8sQ0FBQzJJLEdBQXlCLENBQUEsSUFBZjNJLEVBQUlobUIsUUFDekRndkIsRUFBSWp2QyxPQUFPdXpDLEdBQU8sRUFBSWxGLEVBQVVqdEMsS0FBTSs0QyxLQUFTLEVBQUlyVyxFQUFPbVQsa0JBQWtCeEYsRUFBS3dJLEVBQWFHLEVBQVNuQyxDQUFVLElBQUtoUyxFQUFJcVUsU0FBUyxDQUMzSSxDQUNJLFNBQVNDLEVBQVczb0IsR0FDaEIsSUFBSWtSLEVBQ0ptTSxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWhJLEtBQUssT0FBQ3ZELEVBQUttRCxFQUFJc04sT0FBbUN6USxFQUFLeVEsQ0FBSyxFQUFHM2hCLENBQU0sQ0FDbEcsQ0FuQ0k2ZixFQUFJK0ksV0FBV2pILEVBRWYsV0FDSSxHQUFtQixDQUFBLElBQWZ0TixFQUFJclUsT0FDSnNvQixFQUFhLEVBQ1RqVSxFQUFJcVUsV0FDSmYsRUFBVzlILENBQUcsRUFDbEI4SSxFQUFXLElBQU05SSxFQUFJN3BDLE9BQU8sTUFFM0IsQ0FDRCxJQUFNNnlDLEdBQVd4VSxFQUFJenNCLE1BTTdCLEtBQ0ksSUFBTWloQyxFQUFXeEwsRUFBSXR1QyxJQUFJLFdBQVksSUFBSSxFQUV6QyxPQURBc3VDLEVBQUk3QyxJQUFJLElBQU04TixHQUFZLEVBQUk3TCxFQUFVanRDLFVBQVcsRUFBRyxHQUFPNnRDLEVBQUlqdkMsT0FBT3V6QyxFQUFPLENBQUEsQ0FBSyxFQUFFcEksSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNK0ssZ0JBQWdCZ1YsRUFBR293QixrQkFBbUIsSUFBTXRDLEVBQUlqdkMsT0FBT3k2QyxHQUFVLEVBQUlwTSxFQUFVanRDLEtBQU0rSyxVQUFVLEVBQUcsSUFBTThpQyxFQUFJeEMsTUFBTXRnQyxDQUFDLENBQUMsQ0FBQyxFQUMzTnN1QyxDQUNmLEVBQ0ksS0FDSSxJQUFNQyxHQUFlLEVBQUlyTSxFQUFVanRDLEtBQU02NEMsV0FHekMsT0FGQWhMLEVBQUlqdkMsT0FBTzA2QyxFQUFjLElBQUksRUFDN0JSLEVBQVk3TCxFQUFVL0wsR0FBRyxFQUNsQm9ZLENBQ2YsR0FoQnNELEVBQ3RDelUsRUFBSXFVLFdBQ0pmLEVBQVc5SCxDQUFHLEVBQ2xCOEksRUFBVyxLQUFNSSxDQUFBQSxJQTZCWmxKLEVBN0JvQkEsRUE2QmZOLEVBN0JvQnNKLEVBOEJ0QyxJQUFReEwsRUFBUXdDLEVBQUwsSUFDWHhDLEVBQUk5RCxJQUFHLEVBQUlrRCxFQUFVanRDLG1CQUFvQit2QyxLQUFTLEtBQzlDbEMsRUFDS2p2QyxPQUFPK3ZDLEVBQVFwdUMsUUFBUTJ1QyxTQUFTLEVBQUlqQyxFQUFVanRDLEtBQU0ydUMsRUFBUXB1QyxRQUFRMnVDLHNCQUFzQmEsT0FBVXBCLEVBQVFwdUMsUUFBUTJ1QyxrQkFBa0JhLElBQU8sRUFDN0lueEMsT0FBTyt2QyxFQUFRcHVDLFFBQVFpd0IsUUFBUSxFQUFJeWMsRUFBVWp0QyxLQUFNMnVDLEVBQVFwdUMsUUFBUTJ1QyxnQkFBZ0IsR0FDeEYsRUFBSTZDLEVBQVN6QyxjQUFjZSxDQUFHLENBQ3RDLEVBQU8sSUFBTUEsRUFBSTdwQyxPQUFPLENBcEMwQixDQUFBLENBQUMsQ0FDbkQsQ0FDQSxDQWZ5QyxFQUNyQzZwQyxFQUFJclosR0FBRyxPQUFDMEssRUFBS21ELEVBQUlzTixPQUFtQ3pRLEVBQUt5USxDQUFLLENBbUNsRSxFQWlDQTVFLEVBQUFpTSxnQkFUQSxTQUF5QjM2QixFQUFRdXhCLEVBQVlxSixFQUFpQixDQUFBLEdBRTFELE1BQVEsQ0FBQ3JKLEVBQVdseEMsUUFDaEJreEMsRUFBVzkwQixLQUFLLEdBQWUsVUFBUG9ZLEVBQ2xCbDFCLE1BQU1DLFFBQVFvZ0IsQ0FBTSxFQUNiLFdBQVA2VSxFQUNJN1UsR0FBMkIsVUFBakIsT0FBT0EsR0FBc0IsQ0FBQ3JnQixNQUFNQyxRQUFRb2dCLENBQU0sRUFDNUQsT0FBT0EsR0FBVTZVLEdBQU8rbEIsR0FBbUMsS0FBQSxJQUFWNTZCLENBQXNCLENBQ3pGLEVBdUJBMHVCLEVBQUF5SyxxQkFyQkEsU0FBOEIsQ0FBRW41QixPQUFBQSxFQUFROVgsS0FBQUEsRUFBTXJKLEtBQUFBLEVBQU1xekMsY0FBQUEsQ0FBZSxFQUFFbE0sRUFBSzBJLEdBRXRFLEdBQUkvdUMsTUFBTUMsUUFBUW9tQyxFQUFJMEksT0FBTyxFQUFJLENBQUMxSSxFQUFJMEksUUFBUTM0QixTQUFTMjRCLENBQU8sRUFBSTFJLEVBQUkwSSxVQUFZQSxFQUM5RSxNQUFNLElBQUlubkMsTUFBTSwwQkFBMEIsRUFFOUMsSUFBTXN6QyxFQUFPN1UsRUFBSThVLGFBQ2pCLEdBQUlELE1BQUFBLEdBQTRDQSxFQUFLcCtCLEtBQUssR0FBUyxDQUFDM2MsT0FBT29ELFVBQVUySCxlQUFlMUgsS0FBSzZjLEVBQVFzMEIsQ0FBRyxDQUFDLEVBQ2pILE1BQU0sSUFBSS9zQyxpREFBaURtbkMsTUFBWW1NLEVBQUt2NkMsS0FBSyxHQUFHLENBQUcsRUFFM0YsR0FBSTBsQyxFQUFJMlQsZ0JBRUEsQ0FEVTNULEVBQUkyVCxlQUFlMzVCLEVBQU8wdUIsRUFBUSxFQUNwQyxDQUNGMW5DLGNBQWtCMG5DLGdDQUFzQ3dELE9BQzFEcnpDLEVBQUtrOEMsV0FBVy9VLEVBQUkyVCxlQUFlaG9CLE1BQU0sRUFDN0MsR0FBNEIsUUFBeEJ6cEIsRUFBS3l4QyxlQUdMLE1BQU0sSUFBSXB5QyxNQUFNUCxDQUFHLEVBRm5CbkksRUFBSzJ3QyxPQUFPN25DLE1BQU1YLENBQUcsQ0FHckMsQ0FFQSxtREN4SEFsSCxPQUFPbWUsZUFBZXc2QixHQUFTLGFBQWMsQ0FBRTV5QyxNQUFPLENBQUEsRUFBTSxFQUM1RDR5QyxHQUFBdUMsb0JBQThCdkMsR0FBMkJ3QyxvQkFBR3hDLEdBQW9CeUMsYUFBR3B2QyxLQUFBQSxFQUNuRixJQUFNc2lDLEVBQVk3L0IsRUFBcUIsRUFDakN1aUMsRUFBU3RLLEVBQWtCLEVBZ0NqQ2lTLEdBQUF5QyxhQS9CQSxTQUFzQmg2QixFQUFJLENBQUV3dEIsUUFBQUEsRUFBU3FLLFdBQUFBLEVBQVkvNEIsT0FBQUEsRUFBUXl1QixXQUFBQSxFQUFZeUQsY0FBQUEsRUFBZTFELGFBQUFBLElBQ2hGLEdBQWdCMWlDLEtBQUFBLElBQVo0aUMsR0FBb0M1aUMsS0FBQUEsSUFBWGtVLEVBQ3pCLE1BQU0sSUFBSXpZLE1BQU0sc0RBQXNELEVBRTFFLElBQ1VxdkMsRUFEVixHQUFnQjlxQyxLQUFBQSxJQUFaNGlDLEVBRUEsT0FETWtJLEVBQU0xMUIsRUFBR2xCLE9BQU8wdUIsR0FDQTVpQyxLQUFBQSxJQUFmaXRDLEVBQ0QsQ0FDRS80QixPQUFRNDJCLEVBQ1JuSSxZQUFZLEVBQUlMLEVBQVVqdEMsS0FBTStmLEVBQUd1dEIsY0FBYSxFQUFJTCxFQUFVbE0sYUFBYXdNLENBQU8sSUFDbEZ3RCxjQUFrQmh4QixFQUFHZ3hCLGNBQU4sSUFBdUJ4RCxDQUN0RCxFQUNjLENBQ0UxdUIsT0FBUTQyQixFQUFJbUMsR0FDWnRLLFlBQVksRUFBSUwsRUFBVWp0QyxLQUFNK2YsRUFBR3V0QixjQUFhLEVBQUlMLEVBQVVsTSxhQUFhd00sQ0FBTyxLQUFJLEVBQUlOLEVBQVVsTSxhQUFhNlcsQ0FBVSxJQUMzSDdHLGNBQWtCaHhCLEVBQUdneEIsa0JBQWlCeEQsTUFBVyxFQUFJb0MsRUFBT2pELGdCQUFnQmtMLENBQVUsQ0FDekYsRUFFVCxHQUFlanRDLEtBQUFBLElBQVhrVSxFQVdKLE1BQU0sSUFBSXpZLE1BQU0sNkNBQTZDLEVBVnpELEdBQW1CdUUsS0FBQUEsSUFBZjJpQyxHQUE4QzNpQyxLQUFBQSxJQUFsQm9tQyxHQUFnRHBtQyxLQUFBQSxJQUFqQjBpQyxFQUMzRCxNQUFNLElBQUlqbkMsTUFBTSw2RUFBNkUsRUFFakcsTUFBTyxDQUNIeVksT0FBQUEsRUFDQXl1QixXQUFBQSxFQUNBRCxhQUFBQSxFQUNBMEQsY0FBQUEsQ0FDSCxDQUdULEVBaUNBdUcsR0FBQXdDLG9CQS9CQSxTQUE2QnhDLEVBQVd2M0IsRUFBSSxDQUFFd3VCLFNBQUFBLEVBQVVDLGFBQWN3TCxFQUFReDlCLEtBQUFBLEVBQU15NEIsVUFBQUEsRUFBVzlELGFBQUFBLElBQzNGLEdBQWF4bUMsS0FBQUEsSUFBVDZSLEdBQW1DN1IsS0FBQUEsSUFBYjRqQyxFQUN0QixNQUFNLElBQUlub0MsTUFBTSxxREFBcUQsRUFFekUsSUFFWTBxQyxFQUFXbUosRUFBYWx6QyxFQUY1QjhtQyxFQUFROXRCLEVBQUwsSUFrQlgsU0FBU202QixFQUFpQkMsR0FDdEI3QyxFQUFVOTZCLEtBQU8yOUIsRUFDakI3QyxFQUFVOEMsVUFBWXI2QixFQUFHcTZCLFVBQVksRUFDckM5QyxFQUFVckMsVUFBWSxHQUN0QmwxQixFQUFHczZCLGtCQUFvQixJQUFJeCtCLElBQzNCeTdCLEVBQVV4SSxXQUFhL3VCLEVBQUd2RCxLQUMxQjg2QixFQUFVZ0QsVUFBWSxDQUFDLEdBQUd2NkIsRUFBR3U2QixVQUFXSCxFQUNoRCxDQXhCcUJ4dkMsS0FBQUEsSUFBYjRqQyxJQUNNLENBQUV1QyxVQUFBQSxFQUFXbUosWUFBQUEsRUFBYWx6QyxLQUFBQSxDQUFNLEVBQUdnWixFQUV6Q202QixFQURpQnJNLEVBQUl0dUMsSUFBSSxRQUFRLEVBQUkwdEMsRUFBVWp0QyxLQUFNK2YsRUFBR3ZELFFBQU8sRUFBSXl3QixFQUFVbE0sYUFBYXdOLENBQVEsSUFBSyxDQUFBLENBQUksQ0FDbEYsRUFDekIrSSxFQUFVeEcsV0FBWSxFQUFJN0QsRUFBVXBwQyxPQUFRaXRDLEtBQVksRUFBSW5CLEVBQU92RCxjQUFjbUMsRUFBVXlMLEVBQVFqekMsRUFBSzBuQyxnQkFBZ0IsSUFDeEg2SSxFQUFVdkksb0JBQXFCLEVBQUk5QixFQUFVanRDLEtBQU11dUMsSUFDbkQrSSxFQUFVMkMsWUFBYyxDQUFDLEdBQUdBLEVBQWEzQyxFQUFVdkkscUJBRTFDcGtDLEtBQUFBLElBQVQ2UixJQUVBMDlCLEVBRGlCMTlCLGFBQWdCeXdCLEVBQVU3TCxLQUFPNWtCLEVBQU9xeEIsRUFBSXR1QyxJQUFJLE9BQVFpZCxFQUFNLENBQUEsQ0FBSSxDQUMxRCxFQUNKN1IsS0FBQUEsSUFBakJ3bUMsS0FDQW1HLEVBQVVuRyxhQUFlQSxHQUc3QjhELElBQ0FxQyxFQUFVckMsVUFBWUEsRUFTOUIsRUFZQXFDLEdBQUF1QyxvQkFWQSxTQUE2QnZDLEVBQVcsQ0FBRWlELGlCQUFBQSxFQUFrQkMsWUFBQUEsRUFBYWhLLGNBQUFBLEVBQWVhLGFBQUFBLEVBQWNaLFVBQUFBLElBQzVFOWxDLEtBQUFBLElBQWxCNmxDLElBQ0E4RyxFQUFVOUcsY0FBZ0JBLEdBQ1Q3bEMsS0FBQUEsSUFBakIwbUMsSUFDQWlHLEVBQVVqRyxhQUFlQSxHQUNYMW1DLEtBQUFBLElBQWQ4bEMsSUFDQTZHLEVBQVU3RyxVQUFZQSxHQUMxQjZHLEVBQVVpRCxpQkFBbUJBLEVBQzdCakQsRUFBVWtELFlBQWNBLENBQzVCLDBEQ3hFQUMsR0FBaUIsU0FBU0MsRUFBTS9uQyxFQUFHdWQsR0FDakMsR0FBSXZkLElBQU11ZCxFQUFHLE1BQU8sQ0FBQSxFQUVwQixHQUFJdmQsR0FBS3VkLEdBQWlCLFVBQVosT0FBT3ZkLEdBQTZCLFVBQVosT0FBT3VkLEVBQWUsQ0FDMUQsR0FBSXZkLEVBQUV2TyxjQUFnQjhyQixFQUFFOXJCLFlBQWEsTUFBTyxDQUFBLEVBRTVDLElBQUlsRixFQUFRUyxFQUFHMkksRUFDZixHQUFJOUosTUFBTUMsUUFBUWtVLENBQUMsRUFBbkIsQ0FFRSxJQURBelQsRUFBU3lULEVBQUV6VCxTQUNHZ3hCLEVBQUVoeEIsT0FBUSxNQUFPLENBQUEsRUFDL0IsSUFBS1MsRUFBSVQsRUFBZ0IsR0FBUlMsQ0FBQyxJQUNoQixHQUFJLENBQUMrNkMsRUFBTS9uQyxFQUFFaFQsR0FBSXV3QixFQUFFdndCLEVBQUUsRUFBRyxNQUFPLENBQUEsQ0FFdkMsS0FOSSxDQVVBLEdBQUlnVCxFQUFFdk8sY0FBZ0IwQyxPQUFRLE9BQU82TCxFQUFFaUQsU0FBV3NhLEVBQUV0YSxRQUFVakQsRUFBRTFDLFFBQVVpZ0IsRUFBRWpnQixNQUM1RSxHQUFJMEMsRUFBRW9NLFVBQVlwZ0IsT0FBT29ELFVBQVVnZCxRQUFTLE9BQU9wTSxFQUFFb00sUUFBTyxJQUFPbVIsRUFBRW5SLFFBQVMsRUFDOUUsR0FBSXBNLEVBQUUxSixXQUFhdEssT0FBT29ELFVBQVVrSCxTQUFVLE9BQU8wSixFQUFFMUosU0FBUSxJQUFPaW5CLEVBQUVqbkIsU0FBVSxFQUlsRixJQURBL0osR0FEQW9KLEVBQU8zSixPQUFPMkosS0FBS3FLLENBQUMsR0FDTnpULFVBQ0NQLE9BQU8ySixLQUFLNG5CLENBQUMsRUFBRWh4QixPQUFRLE1BQU8sQ0FBQSxFQUU3QyxJQUFLUyxFQUFJVCxFQUFnQixHQUFSUyxDQUFDLElBQ2hCLEdBQUksQ0FBQ2hCLE9BQU9vRCxVQUFVMkgsZUFBZTFILEtBQUtrdUIsRUFBRzVuQixFQUFLM0ksRUFBRSxFQUFHLE1BQU8sQ0FBQSxFQUVoRSxJQUFLQSxFQUFJVCxFQUFnQixHQUFSUyxDQUFDLElBQVcsQ0FDM0IsSUFBSWlLLEVBQU10QixFQUFLM0ksR0FFZixHQUFJLENBQUMrNkMsRUFBTS9uQyxFQUFFL0ksR0FBTXNtQixFQUFFdG1CLEVBQUksRUFBRyxNQUFPLENBQUEsQ0FDekMsQ0FuQkEsQ0FxQkksTUFBTyxDQUFBLENBQ1gsQ0FHRSxPQUFPK0ksR0FBSUEsR0FBS3VkLEdBQUlBLENBQ3JCLHFEQzNDR3lxQixvQkFBQUEsRUFBV0MsR0FBQXY2QyxRQUFpQixTQUFVd2UsRUFBUTlYLEVBQU15c0IsR0FFbkMsWUFBZixPQUFPenNCLElBQ1R5c0IsRUFBS3pzQixFQUNMQSxFQUFPLElBNERYLFNBQVM4ekMsRUFBVTl6QyxFQUFNK3pDLEVBQUtwSSxFQUFNN3pCLEVBQVFrOEIsRUFBU0MsRUFBWUMsRUFBZUMsRUFBZTlKLEVBQWMrSixHQUMzRyxHQUFJdDhCLEdBQTJCLFVBQWpCLE9BQU9BLEdBQXNCLENBQUNyZ0IsTUFBTUMsUUFBUW9nQixDQUFNLEVBQUcsQ0FFakUsSUFBSyxJQUFJalYsS0FEVGt4QyxFQUFJajhCLEVBQVFrOEIsRUFBU0MsRUFBWUMsRUFBZUMsRUFBZTlKLEVBQWMrSixDQUFRLEVBQ3JFdDhCLEVBQVEsQ0FDdEIsSUFBSTQyQixFQUFNNTJCLEVBQU9qVixHQUNqQixHQUFJcEwsTUFBTUMsUUFBUWczQyxDQUFHLEdBQ25CLEdBQUk3ckMsS0FBTyt3QyxFQUFTUyxjQUNsQixJQUFLLElBQUl6N0MsRUFBRSxFQUFHQSxFQUFFODFDLEVBQUl2MkMsT0FBUVMsQ0FBQyxHQUMzQms3QyxFQUFVOXpDLEVBQU0rekMsRUFBS3BJLEVBQU0rQyxFQUFJOTFDLEdBQUlvN0MsRUFBVSxJQUFNbnhDLEVBQU0sSUFBTWpLLEVBQUdxN0MsRUFBWUQsRUFBU254QyxFQUFLaVYsRUFBUWxmLENBQUMsQ0FDakgsTUFDYSxHQUFJaUssS0FBTyt3QyxFQUFTVSxlQUN6QixHQUFJNUYsR0FBcUIsVUFBZCxPQUFPQSxFQUNoQixJQUFLLElBQUl0b0MsS0FBUXNvQyxFQUNmb0YsRUFBVTl6QyxFQUFNK3pDLEVBQUtwSSxFQUFNK0MsRUFBSXRvQyxHQUFPNHRDLEVBQVUsSUFBTW54QyxFQUFNLElBQU0weEMsRUFBY251QyxDQUFJLEVBQUc2dEMsRUFBWUQsRUFBU254QyxFQUFLaVYsRUFBUTFSLENBQUksQ0FDekksTUFDaUJ2RCxLQUFPK3dDLEVBQVN4TSxVQUFhcG5DLEVBQUt3MEMsU0FBVyxFQUFFM3hDLEtBQU8rd0MsRUFBU2EsZ0JBQ3hFWCxFQUFVOXpDLEVBQU0rekMsRUFBS3BJLEVBQU0rQyxFQUFLc0YsRUFBVSxJQUFNbnhDLEVBQUtveEMsRUFBWUQsRUFBU254QyxFQUFLaVYsQ0FBTSxDQUU3RixDQUNJNnpCLEVBQUs3ekIsRUFBUWs4QixFQUFTQyxFQUFZQyxFQUFlQyxFQUFlOUosRUFBYytKLENBQVEsQ0FDMUYsQ0FDQSxFQTFFWXAwQyxFQUhjLFlBQWIsT0FEWHlzQixFQUFLenNCLEVBQUt5c0IsSUFBTUEsR0FDc0JBLEVBQUtBLEVBQUdzbkIsS0FBTyxhQUMxQ3RuQixFQUFHa2YsTUFBUSxhQUVLN3pCLEVBQVEsR0FBSUEsQ0FBTSxDQUM5QyxHQUdRc3ZCLFNBQVcsQ0FDbEJzTixnQkFBaUIsQ0FBQSxFQUNqQnpqQyxNQUFPLENBQUEsRUFDUDBqQyxTQUFVLENBQUEsRUFDVkMscUJBQXNCLENBQUEsRUFDdEJDLGNBQWUsQ0FBQSxFQUNmM1csSUFBSyxDQUFBLEVBQ0w4RSxHQUFJLENBQUEsRUFDSjhSLEtBQU0sQ0FBQSxFQUNON1QsS0FBTSxDQUFBLENBQ1AsRUFFRDJTLEVBQVNTLGNBQWdCLENBQ3ZCcGpDLE1BQU8sQ0FBQSxFQUNQOGpDLE1BQU8sQ0FBQSxFQUNQQyxNQUFPLENBQUEsRUFDUEMsTUFBTyxDQUFBLENBQ1IsRUFFRHJCLEVBQVNVLGNBQWdCLENBQ3ZCWSxNQUFPLENBQUEsRUFDUEMsWUFBYSxDQUFBLEVBQ2IxRyxXQUFZLENBQUEsRUFDWjJHLGtCQUFtQixDQUFBLEVBQ25CeEMsYUFBYyxDQUFBLENBQ2YsRUFFRGdCLEVBQVNhLGFBQWUsQ0FDdEJqN0MsUUFBUyxDQUFBLEVBQ1Q2N0MsS0FBTSxDQUFBLEVBQ054WixNQUFPLENBQUEsRUFDUHlaLFNBQVUsQ0FBQSxFQUNWQyxRQUFTLENBQUEsRUFDVEMsUUFBUyxDQUFBLEVBQ1RDLGlCQUFrQixDQUFBLEVBQ2xCQyxpQkFBa0IsQ0FBQSxFQUNsQkMsV0FBWSxDQUFBLEVBQ1pDLFVBQVcsQ0FBQSxFQUNYQyxVQUFXLENBQUEsRUFDWDVGLFFBQVMsQ0FBQSxFQUNUaHlDLE9BQVEsQ0FBQSxFQUNSNjNDLFNBQVUsQ0FBQSxFQUNWQyxTQUFVLENBQUEsRUFDVkMsWUFBYSxDQUFBLEVBQ2JDLGNBQWUsQ0FBQSxFQUNmQyxjQUFlLENBQUEsQ0FDaEIsY0EyQkQsU0FBUzNCLEVBQWN6M0MsR0FDckIsT0FBT0EsRUFBSTlELFFBQVEsS0FBTSxJQUFJLEVBQUVBLFFBQVEsTUFBTyxJQUFJLENBQ3BELDZCQzNGQXBCLE9BQU9tZSxlQUFlM2IsRUFBUyxhQUFjLENBQUV1RCxNQUFPLENBQUEsRUFBTSxFQUM1RHZELEVBQUErN0MsY0FBd0IvN0MsRUFBQWc4QyxXQUFxQmg4QyxFQUFBaThDLFlBQXNCajhDLEVBQUFrOEMsYUFBdUJsOEMsRUFBQW04QyxZQUFzQm44QyxFQUFBbzhDLFVBQW9CNXlDLEtBQUFBLEVBQ3BJLElBQU1nbEMsRUFBU3ZpQyxFQUFpQixFQUMxQnN0QyxFQUFRclYsR0FBMEIsRUFDbENzVixFQUFXcnRDLEdBQStCLEVBRTFDa3dDLEVBQWlCLElBQUkzaEMsSUFBSSxDQUMzQixPQUNBLFNBQ0EsVUFDQSxZQUNBLFlBQ0EsZ0JBQ0EsZ0JBQ0EsV0FDQSxXQUNBLFVBQ0EsVUFDQSxjQUNBLGFBQ0EsV0FDQSxPQUNBLFFBQ0gsRUFXSzRoQyxHQUROdDhDLEVBQUFvOEMsVUFUQSxTQUFtQjErQixFQUFRK0UsRUFBUSxDQUFBLEdBQy9CLE1BQXFCLFdBQWpCLE9BQU8vRSxJQUVHLENBQUEsSUFBVitFLEVBQ08sQ0FBQzg1QixFQUFPNytCLENBQU0sRUFDcEIrRSxDQUFBQSxDQUFBQSxHQXdCVCxTQUFTKzVCLEVBQVU5K0IsR0FDZnRmLElBQUl5UixFQUFRLEVBQ1osSUFBSyxJQUFNcEgsS0FBT2lWLEVBQVEsQ0FDdEIsR0FBWSxTQUFSalYsRUFDQSxPQUFPZzBDLEVBQUFBLEVBRVgsR0FEQTVzQyxDQUFLLEdBQ0R3c0MsQ0FBQUEsRUFBZXhoQyxJQUFJcFMsQ0FBRyxJQUVBLFVBQXRCLE9BQU9pVixFQUFPalYsS0FDZCxFQUFJK2xDLEVBQU9uRCxVQUFVM3RCLEVBQU9qVixHQUFNLEdBQVVvSCxHQUFTMnNDLEVBQVVsSSxDQUFHLENBQUUsRUFFcEV6a0MsSUFBVTRzQyxFQUFBQSxHQUNWLE9BQU9BLEVBQUFBLENBQ25CLENBQ0ksT0FBTzVzQyxDQUNYLEVBckNxQjZOLENBQU0sR0FBSytFLEVBQ2hDLEVBRXFCLElBQUkvSCxJQUFJLENBQ3pCLE9BQ0EsZ0JBQ0EsbUJBQ0EsY0FDQSxpQkFDSCxHQXlDS2dpQyxHQU5OMThDLEVBQUFtOEMsWUFBc0JBLEVBS3RCbjhDLEVBQUFrOEMsYUFBdUJBLEVBQ0ssU0FVdEJTLEdBTk4zOEMsRUFBQWk4QyxZQUFzQkEsRUFLdEJqOEMsRUFBQWc4QyxXQUpBLFNBQW9CWSxFQUFVQyxFQUFRQyxHQUVsQyxPQURBQSxFQUFLYixFQUFZYSxDQUFFLEVBQ1pGLEVBQVM1OEMsUUFBUTY4QyxFQUFRQyxDQUFFLENBQ3RDLEVBRWUseUJBbERmLFNBQVNQLEVBQU83K0IsR0FDWixJQUFLLElBQU1qVixLQUFPaVYsRUFBUSxDQUN0QixHQUFJNCtCLEVBQWF6aEMsSUFBSXBTLENBQUcsRUFDcEIsTUFBTyxDQUFBLEVBQ0w2ckMsRUFBTTUyQixFQUFPalYsR0FDbkIsR0FBSXBMLE1BQU1DLFFBQVFnM0MsQ0FBRyxHQUFLQSxFQUFJbjZCLEtBQUtvaUMsQ0FBTSxFQUNyQyxNQUFPLENBQUEsRUFDWCxHQUFrQixVQUFkLE9BQU9qSSxHQUFtQmlJLEVBQU9qSSxDQUFHLEVBQ3BDLE1BQU8sQ0FBQSxDQUNuQixDQUNJLE1BQU8sQ0FBQSxDQUNYLENBaUJBLFNBQVM2SCxFQUFZUyxFQUFVRSxFQUFLLEdBQUl2OEMsR0FDbEIsQ0FBQSxJQUFkQSxJQUNBdThDLEVBQUtiLEVBQVlhLENBQUUsR0FDakJ4OEMsRUFBSXM4QyxFQUFTaHdDLE1BQU1rd0MsQ0FBRSxFQUMzQixPQUFPWixFQUFhVSxFQUFVdDhDLENBQUMsQ0FDbkMsQ0FFQSxTQUFTNDdDLEVBQWFVLEVBQVV0OEMsR0FFNUIsT0FEbUJzOEMsRUFBU0csVUFBVXo4QyxDQUFDLEVBQ3JCRCxNQUFNLEdBQUcsRUFBRSxHQUFLLEdBQ3RDLENBR0EsU0FBUzQ3QyxFQUFZYSxHQUNqQixPQUFPQSxFQUFLQSxFQUFHbCtDLFFBQVE4OUMsRUFBcUIsRUFBRSxFQUFJLEVBQ3RELENBb0VBMThDLEVBQUErN0MsY0E1REEsU0FBdUJyK0IsRUFBUW0vQixHQUMzQixHQUFxQixXQUFqQixPQUFPbi9CLEVBQ1AsTUFBTyxHQUNYLEdBQU0sQ0FBRXMvQixTQUFBQSxFQUFVQyxZQUFBQSxDQUFhLEVBQUduNEMsS0FBS2MsS0FFakNzM0MsRUFBVSxDQUFFLEdBRFpDLEVBQVFsQixFQUFZditCLEVBQU9zL0IsSUFBYUgsQ0FBTSxDQUN2QixFQUN2Qk8sRUFBYWpCLEVBQVljLEVBQWFFLEVBQU8sQ0FBQSxDQUFLLEVBQ2xERSxFQUFZLEdBQ1pDLEVBQWEsSUFBSTVpQyxJQTJDdkIsT0ExQ0E4K0IsRUFBUzk3QixFQUFRLENBQUUwOEIsUUFBUyxDQUFBLENBQUksRUFBSSxDQUFDOUYsRUFBS3NGLEVBQVMvNkMsRUFBR2k3QyxLQUNsRCxHQUFzQnR3QyxLQUFBQSxJQUFsQnN3QyxFQUFKLENBRUEsSUFBTXlELEVBQVdILEVBQWF4RCxFQUMxQjRELEVBQWNOLEVBQVFwRCxHQU0xQixTQUFTMkQsRUFBT3ovQixHQUVaLElBQU0wL0IsRUFBVzU0QyxLQUFLYyxLQUFLcTNDLFlBQVlqOUMsUUFFdkMsR0FEQWdlLEVBQU1pK0IsRUFBWXVCLEVBQWNFLEVBQVNGLEVBQWF4L0IsQ0FBRyxFQUFJQSxDQUFHLEVBQzVEcy9CLEVBQVd6aUMsSUFBSW1ELENBQUcsRUFDbEIsTUFBTTIvQixFQUFTMy9CLENBQUcsRUFDdEJzL0IsRUFBV3Z4QyxJQUFJaVMsQ0FBRyxFQUNsQjVmLElBQUl3L0MsRUFBVzk0QyxLQUFLKzRDLEtBQUs3L0IsR0FlekIsTUFadUIsVUFBbkIsT0FEQTQvQixFQURtQixVQUFuQixPQUFPQSxFQUNJOTRDLEtBQUsrNEMsS0FBS0QsR0FDZEEsR0FDUEUsRUFBaUJ4SixFQUFLc0osRUFBU2xnQyxPQUFRTSxDQUFHLEVBRXJDQSxJQUFRaStCLEVBQVlzQixDQUFRLElBQ2xCLE1BQVh2L0IsRUFBSSxJQUNKOC9CLEVBQWlCeEosRUFBSytJLEVBQVVyL0IsR0FBTUEsQ0FBRyxFQUN6Q3EvQixFQUFVci9CLEdBQU9zMkIsR0FHakJ4dkMsS0FBSys0QyxLQUFLNy9CLEdBQU91L0IsR0FHbEJ2L0IsQ0FDbkIsQ0FDUSxTQUFTKy9CLEVBQVV6akMsR0FDZixHQUFxQixVQUFqQixPQUFPQSxFQUFvQixDQUMzQixHQUFJLENBQUNxaUMsRUFBT2orQyxLQUFLNGIsQ0FBTSxFQUNuQixNQUFNLElBQUlyVix5QkFBeUJxVixJQUFTLEVBQ2hEbWpDLEVBQU81OEMsS0FBS2lFLEtBQU0sSUFBSXdWLENBQVEsQ0FDOUMsQ0FDQSxDQW5Db0MsVUFBeEIsT0FBT2c2QixFQUFJMEksS0FDWFEsRUFBY0MsRUFBTzU4QyxLQUFLaUUsS0FBTXd2QyxFQUFJMEksRUFBUyxHQUNqRGUsRUFBVWw5QyxLQUFLaUUsS0FBTXd2QyxFQUFJMEosT0FBTyxFQUNoQ0QsRUFBVWw5QyxLQUFLaUUsS0FBTXd2QyxFQUFJMkosY0FBYyxFQUN2Q2YsRUFBUXRELEdBQVc0RCxDQVBmLENBdUNaLENBQUssRUFDTUgsRUFDUCxTQUFTUyxFQUFpQkksRUFBTUMsRUFBTW5nQyxHQUNsQyxHQUFheFUsS0FBQUEsSUFBVDIwQyxHQUFzQixDQUFDNUUsRUFBTTJFLEVBQU1DLENBQUksRUFDdkMsTUFBTVIsRUFBUzMvQixDQUFHLENBQzlCLENBQ0ksU0FBUzIvQixFQUFTMy9CLEdBQ2QsT0FBTyxJQUFJL1ksb0JBQW9CK1kscUNBQXVDLENBQzlFLENBQ0Esc0NDdkpBeGdCLE9BQU9tZSxlQUFlNjdCLEdBQVMsYUFBYyxDQUFFajBDLE1BQU8sQ0FBQSxFQUFNLEVBQzVEaTBDLEdBQUE0RyxRQUFrQjVHLEdBQWtCNkcsV0FBRzdHLEdBQTRCOEcscUJBQUc5MEMsS0FBQUEsRUFDdEUsSUFBTSswQyxFQUFldHlDLEdBQXVCLEVBQ3RDdXlDLEVBQWF0YSxHQUFxQixFQUNsQ3dPLEVBQWtCdm1DLEdBQTBCLEVBQzVDc3lDLEVBQWF2YSxHQUFxQixFQUNsQ3dhLEVBQWEvTCxHQUFxQixFQUNsQ2dNLEVBQVkvTCxHQUFvQixFQUNoQ2dNLEVBQWNDLEdBQXNCLEVBQ3BDL1MsRUFBWWdULEVBQXFCLEVBQ2pDdFIsRUFBVXVSLEVBQW1CLEVBQzdCQyxFQUFZQyxHQUFxQixFQUNqQ3pRLEVBQVMwUSxFQUFrQixFQUMzQnRPLEVBQVd1TyxHQUFvQixFQVlyQzNILEdBQUE4RyxxQkFWQSxTQUE4QjEvQixHQUMxQixHQUFJd2dDLEVBQVl4Z0MsQ0FBRSxJQUNkeWdDLEVBQWN6Z0MsQ0FBRSxFQUNaMGdDLEVBQWtCMWdDLENBQUUsR0FDcEIyZ0MsQ0FBQUEsSUF1Q2MzZ0MsRUF2Q0dBLEVBd0N6QixHQUFNLENBQUVsQixPQUFBQSxFQUFROVgsS0FBQUEsRUFBTThtQyxJQUFBQSxDQUFLLEVBQUc5dEIsRUFDOUI0Z0MsRUFBaUI1Z0MsRUFBSSxLQUNiaFosRUFBSzY1QyxVQUFZL2hDLEVBQU8raEMsVUFDeEJDLEVBQWU5Z0MsQ0FBRSxFQUNyQitnQyxJQThHMEM5b0MsRUF2QzFCK0gsRUF2RURBLEVBd0ViLENBQUVsQixPQUFBQSxFQUFROVgsS0FBQUEsQ0FBSSxFQUFLZ1osRUFyRXJCLEdBc0VtQnBWLEtBQUFBLElBQW5Ca1UsRUFBT3RlLFNBQXlCd0csRUFBS3V1QyxhQUFldnVDLEVBQUtrbkMsZUFDekQsRUFBSTBCLEVBQU94RCxpQkFBaUJwc0IsRUFBSSx1Q0FBdUMsRUF6RXZFOHRCLEVBQUl0dUMsSUFBSW92QyxFQUFRcHVDLFFBQVEydUMsUUFBUyxJQUFJLEVBQ3JDckIsRUFBSXR1QyxJQUFJb3ZDLEVBQVFwdUMsUUFBUWl3QixPQUFRLENBQUMsRUFDN0J6cEIsRUFBS3l3QyxZQUNMdUosQ0FBQUEsSUFNWWhoQyxFQU5HQSxFQVF2QixHQUFNLENBQUU4dEIsSUFBQUEsRUFBS21DLGFBQUFBLENBQVksRUFBS2p3QixFQUM5QkEsRUFBR2loQyxVQUFZblQsRUFBSWpMLE1BQU0sYUFBYSxFQUFJcUssRUFBVWp0QyxLQUFNZ3dDLGFBQXdCLEVBQ2xGbkMsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTStmLEVBQUdpaEMseUJBQTBCLElBQU1uVCxFQUFJanZDLFFBQU8sRUFBSXF1QyxFQUFVanRDLEtBQU0rZixFQUFHaWhDLG1CQUFtQixFQUFJL1QsRUFBVWp0QyxhQUFjLENBQUMsRUFDaEo2dEMsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTStmLEVBQUdpaEMseUJBQTBCLElBQU1uVCxFQUFJanZDLFFBQU8sRUFBSXF1QyxFQUFVanRDLEtBQU0rZixFQUFHaWhDLG1CQUFtQixFQUFJL1QsRUFBVWp0QyxhQUFjLENBQUMsQ0FYdkgsQ0FDckJpaEQsRUFBZ0JsaEMsQ0FBRSxFQUNsQm1oQyxDQTRGSixHQUFNLENBQUVyVCxJQUFBQSxFQUFLb0MsVUFBQUEsRUFBV0QsYUFBQUEsRUFBY0csZ0JBQUFBLEVBQWlCcHBDLEtBQUFBLENBQUksRUFEeENnWixFQTNGREEsRUE2RmRrd0IsRUFBVUMsT0FFVnJDLEVBQUk5RCxJQUFHLEVBQUlrRCxFQUFVanRDLEtBQU0ydUMsRUFBUXB1QyxRQUFRaXdCLGVBQWdCLElBQU1xZCxFQUFJOUMsT0FBTzRELEVBQVFwdUMsUUFBUWljLElBQUksRUFBRyxJQUFNcXhCLEVBQUl4QyxPQUFNLEVBQUk0QixFQUFVanRDLFNBQVVtd0MsS0FBbUJ4QixFQUFRcHVDLFFBQVEydUMsVUFBVSxDQUFDLEdBR3pMckIsRUFBSWp2QyxRQUFPLEVBQUlxdUMsRUFBVWp0QyxLQUFNZ3dDLFdBQXVCckIsRUFBUXB1QyxRQUFRMnVDLE9BQU8sRUFDekVub0MsRUFBS3l3QyxjQUtRLENBQUUzSixJQUFBQSxFQUFLbVQsVUFBQUEsRUFBV2g3QixNQUFBQSxFQUFPaE8sTUFBQUEsQ0FBSyxFQUozQ21wQyxDQUFnQnBoQyxHQUFoQm9oQyxHQUtKbjdCLGFBQWlCaW5CLEVBQVU3TCxNQUMzQnlNLEVBQUlqdkMsUUFBTyxFQUFJcXVDLEVBQVVqdEMsS0FBTWdoRCxVQUFtQmg3QixDQUFLLEVBQ3ZEaE8sYUFBaUJpMUIsRUFBVTdMLE9BQzNCeU0sRUFBSWp2QyxRQUFPLEVBQUlxdUMsRUFBVWp0QyxLQUFNZ2hELFVBQW1CaHBDLENBQUssRUFQdkQ2MUIsRUFBSTlDLFFBQU8sRUFBSWtDLEVBQVVqdEMsS0FBTTJ1QyxFQUFRcHVDLFFBQVFpd0IsY0FBYyxFQXJHN0MsQ0FDeEIsQ0FBSyxDQW5EMEIsTUFJM0Jtd0IsRUFBaUI1Z0MsRUFBSSxLQUFNLEVBQUkyL0IsRUFBYTVOLHNCQUFzQi94QixDQUFFLENBQUMsQ0FDekUsUUFxUU15L0IsRUFDRnA3QyxZQUFZMmIsRUFBSThrQixFQUFLMEksR0FjakIsSUFiQSxFQUFJdVMsRUFBVTlILHNCQUFzQmo0QixFQUFJOGtCLEVBQUswSSxDQUFPLEVBQ3BEdG5DLEtBQUs0bkMsSUFBTTl0QixFQUFHOHRCLElBQ2Q1bkMsS0FBS3dxQyxVQUFZMXdCLEVBQUcwd0IsVUFDcEJ4cUMsS0FBS3NuQyxRQUFVQSxFQUNmdG5DLEtBQUt1VyxLQUFPdUQsRUFBR3ZELEtBQ2Z2VyxLQUFLNFksT0FBU2tCLEVBQUdsQixPQUFPMHVCLEdBQ3hCdG5DLEtBQUt1bkMsTUFBUTNJLEVBQUkySSxPQUFTenRCLEVBQUdoWixLQUFLeW1DLE9BQVN2bkMsS0FBSzRZLFFBQVU1WSxLQUFLNFksT0FBTzJ1QixNQUN0RXZuQyxLQUFLNHFDLGFBQWMsRUFBSWxCLEVBQU8vQyxnQkFBZ0I3c0IsRUFBSTlaLEtBQUs0WSxPQUFRMHVCLEVBQVN0bkMsS0FBS3VuQyxLQUFLLEVBQ2xGdm5DLEtBQUttcUMsV0FBYXZMLEVBQUl1TCxXQUN0Qm5xQyxLQUFLbXJDLGFBQWVyeEIsRUFBR2xCLE9BQ3ZCNVksS0FBS2lyQyxPQUFTLEdBQ2RqckMsS0FBSzhaLEdBQUtBLEVBQ1Y5WixLQUFLNCtCLElBQU1BLEVBQ1A1K0IsS0FBS3VuQyxNQUNMdm5DLEtBQUtpc0MsV0FBYW55QixFQUFHOHRCLElBQUlqTCxNQUFNLFVBQVcyYyxFQUFRdDVDLEtBQUt1bkMsTUFBT3p0QixDQUFFLENBQUMsT0FJakUsR0FEQTlaLEtBQUtpc0MsV0FBYWpzQyxLQUFLNHFDLFlBQ25CLEVBQUMsRUFBSWlQLEVBQVV0RyxpQkFBaUJ2ekMsS0FBSzRZLE9BQVFnbUIsRUFBSXVMLFdBQVl2TCxFQUFJNFUsY0FBYyxFQUMvRSxNQUFNLElBQUlyekMsTUFBU21uQyxFQUFILGtCQUE0QmhvQyxLQUFLQyxVQUFVcS9CLEVBQUl1TCxVQUFVLENBQUcsR0FHaEYsU0FBVXZMLEVBQU1BLEVBQUl1YyxZQUE2QixDQUFBLElBQWZ2YyxFQUFJclUsVUFDdEN2cUIsS0FBSzJxQyxVQUFZN3dCLEVBQUc4dEIsSUFBSWpMLE1BQU0sUUFBUytMLEVBQVFwdUMsUUFBUWl3QixNQUFNLEVBRXpFLENBQ0l2dEIsT0FBTzhrQyxFQUFXc1osRUFBZUMsR0FDN0JyN0MsS0FBS3M3QyxZQUFXLEVBQUl0VSxFQUFVaEksS0FBSzhDLENBQVMsRUFBR3NaLEVBQWVDLENBQVUsQ0FDaEYsQ0FDSUMsV0FBV3haLEVBQVdzWixFQUFlQyxHQUNqQ3I3QyxLQUFLNG5DLElBQUk5RCxHQUFHaEMsQ0FBUyxFQUNqQnVaLEVBQ0FBLEVBQVksRUFFWnI3QyxLQUFLTyxNQUFPLEVBQ1o2NkMsR0FDQXA3QyxLQUFLNG5DLElBQUk3RixLQUFNLEVBQ2ZxWixFQUFlLEVBQ1hwN0MsS0FBS3dxQyxXQUNMeHFDLEtBQUs0bkMsSUFBSTFELE1BQU8sR0FHaEJsa0MsS0FBS3dxQyxVQUNMeHFDLEtBQUs0bkMsSUFBSTFELE1BQU8sRUFFaEJsa0MsS0FBSzRuQyxJQUFJN0YsS0FBTSxDQUUvQixDQUNJeVEsS0FBSzFRLEVBQVd1WixHQUNacjdDLEtBQUtzN0MsWUFBVyxFQUFJdFUsRUFBVWhJLEtBQUs4QyxDQUFTLEVBQUdwOUIsS0FBQUEsRUFBVzIyQyxDQUFVLENBQzVFLENBQ0lFLEtBQUt6WixHQUNpQnA5QixLQUFBQSxJQUFkbzlCLEdBQ0E5aEMsS0FBS08sTUFBTyxFQUNQUCxLQUFLd3FDLFdBQ054cUMsS0FBSzRuQyxJQUFJOUQsR0FBRyxDQUFBLENBQUssSUFHekI5akMsS0FBSzRuQyxJQUFJOUQsR0FBR2hDLENBQVMsRUFDckI5aEMsS0FBS08sTUFBTyxFQUNSUCxLQUFLd3FDLFVBQ0x4cUMsS0FBSzRuQyxJQUFJMUQsTUFBTyxFQUVoQmxrQyxLQUFLNG5DLElBQUk3RixLQUFNLEVBQzNCLENBQ0l5WixVQUFVMVosR0FDTixHQUFJLENBQUM5aEMsS0FBS3VuQyxNQUNOLE9BQU92bkMsS0FBS3U3QyxLQUFLelosQ0FBUyxFQUM5QixJQUFRbUssRUFBZWpzQyxLQUFMLFdBQ2xCQSxLQUFLdTdDLE1BQUssRUFBSXZVLEVBQVVqdEMsS0FBTWt5Qyx3QkFBZ0MsRUFBSWpGLEVBQVVqSSxJQUFJLytCLEtBQUt5N0MsYUFBYyxFQUFFM1osQ0FBUyxJQUFJLENBQzFILENBQ0l2aEMsTUFBTW03QyxFQUFRQyxFQUFhdFIsR0FDbkJzUixHQUNBMzdDLEtBQUt1d0MsVUFBVW9MLENBQVcsRUFDMUIzN0MsS0FBSzQ3QyxPQUFPRixFQUFRclIsQ0FBVSxFQUM5QnJxQyxLQUFLdXdDLFVBQVUsRUFBRSxHQUdyQnZ3QyxLQUFLNDdDLE9BQU9GLEVBQVFyUixDQUFVLENBQ3RDLENBQ0l1UixPQUFPRixFQUFRclIsSUFFVnFSLEVBQVM1UCxFQUFTeEMsaUJBQW1Cd0MsRUFBU3ZDLGFBQWF2cEMsS0FBTUEsS0FBSzQrQixJQUFJcitCLE1BQU84cEMsQ0FBVSxDQUNwRyxDQUNJd1IsY0FDSSxFQUFJL1AsRUFBU3ZDLGFBQWF2cEMsS0FBTUEsS0FBSzQrQixJQUFJaWQsWUFBYy9QLEVBQVN0QyxpQkFBaUIsQ0FDekYsQ0FDSXNJLFFBQ0ksR0FBdUJwdEMsS0FBQUEsSUFBbkIxRSxLQUFLMnFDLFVBQ0wsTUFBTSxJQUFJeHFDLE1BQU0seUNBQXlDLEdBQzdELEVBQUkyckMsRUFBU3BCLGtCQUFrQjFxQyxLQUFLNG5DLElBQUs1bkMsS0FBSzJxQyxTQUFTLENBQy9ELENBQ0k1WixHQUFHa1IsR0FDTWppQyxLQUFLd3FDLFdBQ054cUMsS0FBSzRuQyxJQUFJOUQsR0FBRzdCLENBQUksQ0FDNUIsQ0FDSXNPLFVBQVV4eUMsRUFBS3BGLEdBQ1BBLEVBQ0FELE9BQU9DLE9BQU9xSCxLQUFLaXJDLE9BQVFsdEMsQ0FBRyxFQUU5QmlDLEtBQUtpckMsT0FBU2x0QyxDQUMxQixDQUNJbzFDLFdBQVdqSCxFQUFPNFAsRUFBV0MsRUFBYS9VLEVBQVUvTCxLQUNoRGo3QixLQUFLNG5DLElBQUl2QyxNQUFNLEtBQ1hybEMsS0FBS2c4QyxXQUFXOVAsRUFBTzZQLENBQVUsRUFDakNELEVBQVcsQ0FDdkIsQ0FBUyxDQUNULENBQ0lFLFdBQVc5UCxFQUFRbEYsRUFBVS9MLElBQUs4Z0IsRUFBYS9VLEVBQVUvTCxLQUNyRCxJQUVRMk0sRUFBS3FFLEVBQVk5QixFQUFZdkwsRUFGaEM1K0IsS0FBS3VuQyxRQUVKLENBQUVLLElBQUFBLEVBQUtxRSxXQUFBQSxFQUFZOUIsV0FBQUEsRUFBWXZMLElBQUFBLENBQUssRUFBRzUrQixLQUM3QzRuQyxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWpJLEtBQUksRUFBSWlJLEVBQVVqdEMsS0FBTWt5QyxrQkFBNEI4UCxDQUFVLENBQUMsRUFDaEY3UCxJQUFVbEYsRUFBVS9MLEtBQ3BCMk0sRUFBSWp2QyxPQUFPdXpDLEVBQU8sQ0FBQSxDQUFJLEdBQ3RCL0IsRUFBV2x4QyxRQUFVMmxDLEVBQUkyVCxrQkFDekIzSyxFQUFJekQsT0FBT25rQyxLQUFLeTdDLGNBQWMsRUFDOUJ6N0MsS0FBSzY3QyxXQUFZLEVBQ2IzUCxJQUFVbEYsRUFBVS9MLE1BQ3BCMk0sRUFBSWp2QyxPQUFPdXpDLEVBQU8sQ0FBQSxDQUFLLEVBRS9CdEUsRUFBSTdGLEtBQU0sRUFDbEIsQ0FDSTBaLGVBQ0ksR0FBTSxDQUFFN1QsSUFBQUEsRUFBS3FFLFdBQUFBLEVBQVk5QixXQUFBQSxFQUFZdkwsSUFBQUEsRUFBSzlrQixHQUFBQSxDQUFFLEVBQUs5WixLQUNqRCxPQUFPLEVBQUlnbkMsRUFBVWpJLEtBQ3JCLEtBQ0ksR0FBSW9MLEVBQVdseEMsT0FBUSxDQUVuQixJQUVNdzBCLEVBRk4sR0FBTXdlLGFBQXNCakYsRUFBVTdMLEtBR3RDLE9BRE0xTixFQUFLbDFCLE1BQU1DLFFBQVEyeEMsQ0FBVSxFQUFJQSxFQUFhLENBQUNBLElBQzlDLEVBQUluRCxFQUFVanRDLE1BQU0sRUFBSTQvQyxFQUFXdE0sZ0JBQWdCNWYsRUFBSXdlLEVBQVlueUIsRUFBR2haLEtBQUt1dEMsY0FBZXNMLEVBQVdqTSxTQUFTWSxLQUFLLElBRnRILE1BQU0sSUFBSW51QyxNQUFNLDBCQUEwQixDQUc5RCxDQUNZLE9BQU82bUMsRUFBVS9MLEdBQzdCLEdBVmlELEdBV3pDLEtBQ0ksSUFDVWdoQixFQURWLE9BQUlyZCxFQUFJMlQsZ0JBQ0UwSixFQUFvQnJVLEVBQUl2RSxXQUFXLGdCQUFpQixDQUFFbnFCLElBQUswbEIsRUFBSTJULGNBQWMsQ0FBRSxHQUM5RSxFQUFJdkwsRUFBVWp0QyxNQUFPa2lELEtBQXFCaFEsTUFFOUNqRixFQUFVL0wsR0FDN0IsR0FqQnFFLENBQUUsQ0FrQnZFLENBQ0lvVyxVQUFVNkssRUFBTWhRLEdBQ1osSUFBTW1GLEdBQVksRUFBSXlJLEVBQVloRyxjQUFjOXpDLEtBQUs4WixHQUFJb2lDLENBQUksRUFHdkRDLElBRk4sRUFBSXJDLEVBQVlqRyxxQkFBcUJ4QyxFQUFXcnhDLEtBQUs4WixHQUFJb2lDLENBQUksR0FDN0QsRUFBSXBDLEVBQVlsRyxxQkFBcUJ2QyxFQUFXNkssQ0FBSSxFQUNoQyxDQUFFLEdBQUdsOEMsS0FBSzhaLEdBQUksR0FBR3UzQixFQUFXdC9CLE1BQU9yTixLQUFBQSxFQUFXcWIsTUFBT3JiLEtBQUFBLENBQVcsR0FFcEYsT0FEQTAzQyxFQUFjRCxFQUFhalEsQ0FBSyxFQUN6QmlRLENBQ2YsQ0FDSTdWLGVBQWUrVixFQUFXcmYsR0FDdEIsR0FBTSxDQUFFbGpCLEdBQUFBLEVBQUk4dEIsSUFBQUEsQ0FBRyxFQUFLNW5DLEtBQ2Y4WixFQUFHaFosS0FBS3l3QyxjQUVJLENBQUEsSUFBYnozQixFQUFHaUcsT0FBc0NyYixLQUFBQSxJQUFwQjIzQyxFQUFVdDhCLFFBQy9CakcsRUFBR2lHLE1BQVEycEIsRUFBT3BELGVBQWV2bUIsTUFBTTZuQixFQUFLeVUsRUFBVXQ4QixNQUFPakcsRUFBR2lHLE1BQU9pZCxDQUFNLEdBRWhFLENBQUEsSUFBYmxqQixFQUFHL0gsUUFBc0NyTixLQUFBQSxJQUFwQjIzQyxFQUFVdHFDLFFBQy9CK0gsRUFBRy9ILE1BQVEyM0IsRUFBT3BELGVBQWV2MEIsTUFBTTYxQixFQUFLeVUsRUFBVXRxQyxNQUFPK0gsRUFBRy9ILE1BQU9pckIsQ0FBTSxFQUV6RixDQUNJNlUsb0JBQW9Cd0ssRUFBV25RLEdBQzNCLEdBQU0sQ0FBRXB5QixHQUFBQSxFQUFJOHRCLElBQUFBLENBQUcsRUFBSzVuQyxLQUNwQixHQUFJOFosRUFBR2haLEtBQUt5d0MsY0FBNkIsQ0FBQSxJQUFiejNCLEVBQUdpRyxPQUErQixDQUFBLElBQWJqRyxFQUFHL0gsT0FFaEQsT0FEQTYxQixFQUFJOUQsR0FBR29JLEVBQU8sSUFBTWxzQyxLQUFLc21DLGVBQWUrVixFQUFXclYsRUFBVTdMLElBQUksQ0FBQyxFQUMzRCxDQUFBLENBRW5CLENBQ0EsQ0FDQXVYLEdBQUE2RyxXQUFxQkEsRUFnQnJCLElBQU0rQyxFQUFlLHNCQUNmQyxFQUF3QixtQ0FqYzlCLFNBQVM3QixFQUFpQixDQUFFOVMsSUFBQUEsRUFBS21DLGFBQUFBLEVBQWNueEIsT0FBQUEsRUFBUW94QixVQUFBQSxFQUFXbHBDLEtBQUFBLENBQU0sRUFBRXlkLEdBQ2xFemQsRUFBSzZiLEtBQUtraUIsSUFDVitJLEVBQUluQyxLQUFLc0UsR0FBYyxFQUFJL0MsRUFBVWp0QyxLQUFNMnVDLEVBQVFwdUMsUUFBUWljLFNBQVNteUIsRUFBUXB1QyxRQUFRcXVDLFNBQVVxQixFQUFVQyxPQUFRLEtBYXhILElBQThCckMsRUFBSzltQyxFQVp2QjhtQyxFQUFJanJCLE1BQUssRUFBSXFxQixFQUFVanRDLG1CQUFvQnlpRCxFQUFjNWpDLEVBQVE5WCxDQUFJLEdBQUcsRUFZakRBLEVBWEdBLEdBV1I4bUMsRUFYR0EsR0FZekI5RCxHQUFHNEUsRUFBUXB1QyxRQUFRcXVDLE9BQVEsS0FDM0JmLEVBQUloTCxJQUFJOEwsRUFBUXB1QyxRQUFRc3VDLGNBQWMsRUFBSTVCLEVBQVVqdEMsS0FBTTJ1QyxFQUFRcHVDLFFBQVFxdUMsVUFBVUQsRUFBUXB1QyxRQUFRc3VDLGNBQWMsRUFDbEhoQixFQUFJaEwsSUFBSThMLEVBQVFwdUMsUUFBUXV1QyxZQUFZLEVBQUk3QixFQUFVanRDLEtBQU0ydUMsRUFBUXB1QyxRQUFRcXVDLFVBQVVELEVBQVFwdUMsUUFBUXV1QyxZQUFZLEVBQzlHakIsRUFBSWhMLElBQUk4TCxFQUFRcHVDLFFBQVF3dUMsb0JBQW9CLEVBQUk5QixFQUFVanRDLEtBQU0ydUMsRUFBUXB1QyxRQUFRcXVDLFVBQVVELEVBQVFwdUMsUUFBUXd1QyxvQkFBb0IsRUFDOUhsQixFQUFJaEwsSUFBSThMLEVBQVFwdUMsUUFBUXl1QyxVQUFVLEVBQUkvQixFQUFVanRDLEtBQU0ydUMsRUFBUXB1QyxRQUFRcXVDLFVBQVVELEVBQVFwdUMsUUFBUXl1QyxVQUFVLEVBQ3RHam9DLEVBQUtnd0MsWUFDTGxKLEVBQUloTCxJQUFJOEwsRUFBUXB1QyxRQUFRMHVDLGdCQUFnQixFQUFJaEMsRUFBVWp0QyxLQUFNMnVDLEVBQVFwdUMsUUFBUXF1QyxVQUFVRCxFQUFRcHVDLFFBQVEwdUMsZ0JBQWdCLENBQ2xJLEVBQU8sS0FDQ3BCLEVBQUloTCxJQUFJOEwsRUFBUXB1QyxRQUFRc3VDLGNBQWMsRUFBSTVCLEVBQVVqdEMsTUFBTyxFQUMzRDZ0QyxFQUFJaEwsSUFBSThMLEVBQVFwdUMsUUFBUXV1QyxZQUFZLEVBQUk3QixFQUFVanRDLGFBQWMsRUFDaEU2dEMsRUFBSWhMLElBQUk4TCxFQUFRcHVDLFFBQVF3dUMsb0JBQW9CLEVBQUk5QixFQUFVanRDLGFBQWMsRUFDeEU2dEMsRUFBSWhMLElBQUk4TCxFQUFRcHVDLFFBQVF5dUMsU0FBVUwsRUFBUXB1QyxRQUFRaWMsSUFBSSxFQUNsRHpWLEVBQUtnd0MsWUFDTGxKLEVBQUloTCxJQUFJOEwsRUFBUXB1QyxRQUFRMHVDLGdCQUFnQixFQUFJaEMsRUFBVWp0QyxNQUFPLENBQ3pFLENBQUssRUF6Qk82dEMsRUFBSWpyQixLQUFLNEIsQ0FBSSxDQUN6QixDQUFTLEVBR0RxcEIsRUFBSW5DLEtBQUtzRSxHQUFjLEVBQUkvQyxFQUFVanRDLEtBQU0ydUMsRUFBUXB1QyxRQUFRaWMsU0FHeEN6VixFQUhtRUEsR0FJbkYsRUFBSWttQyxFQUFVanRDLE1BQU8ydUMsRUFBUXB1QyxRQUFRc3VDLG9CQUFvQkYsRUFBUXB1QyxRQUFRdXVDLGVBQWVILEVBQVFwdUMsUUFBUXd1Qyx1QkFBdUJKLEVBQVFwdUMsUUFBUXl1QyxZQUFZTCxFQUFRcHVDLFFBQVFpYyxPQUFPelYsRUFBS2d3QyxZQUFhLEVBQUk5SixFQUFVanRDLE9BQVEydUMsRUFBUXB1QyxRQUFRMHVDLG9CQUFzQmhDLEVBQVUvTCxZQUo5SytPLEVBQVVDLE9BQVEsSUFBTXJDLEVBQUlqckIsS0FBSzYvQixFQUFjNWpDLEVBQVE5WCxDQUFJLENBQUMsRUFBRTZiLEtBQUs0QixDQUFJLENBQUMsQ0FFL0ssQ0EyQ0EsU0FBU2krQixFQUFjNWpDLEVBQVE5WCxHQUNyQnUzQyxFQUF5QixVQUFqQixPQUFPei9CLEdBQXNCQSxFQUFPOVgsRUFBS28zQyxVQUN2RCxPQUFPRyxJQUFVdjNDLEVBQUs2YixLQUFLaE4sUUFBVTdPLEVBQUs2YixLQUFLL2tCLFVBQVcsRUFBSW92QyxFQUFVanRDLG1CQUFvQnMrQyxPQUFhclIsRUFBVS9MLEdBQ3ZILENBRUEsU0FBU21oQixFQUFjdGlDLEVBQUlveUIsR0FDdkIsR0FBSW9PLEVBQVl4Z0MsQ0FBRSxJQUNkeWdDLEVBQWN6Z0MsQ0FBRSxFQUNaMGdDLEVBQWtCMWdDLENBQUUsR0FGNUIsQ0FHUTJpQyxJQWlCYzNpQyxFQWpCR0EsRUFpQkNveUIsRUFqQkdBLEVBa0J2QixDQUFFdHpCLE9BQUFBLEVBQVFndkIsSUFBQUEsRUFBSzltQyxLQUFBQSxDQUFNLEVBQUdnWixFQUMxQmhaLEVBQUs2NUMsVUFBWS9oQyxFQUFPK2hDLFVBQ3hCQyxFQUFlOWdDLENBQUUsRUFwQmIyaUMsSUFvREZwRSxHQUFRditCLEVBL0JBQSxHQStCR2xCLE9BQU9rQixFQUFHaFosS0FBS28zQyxVQUtoQyxHQUpJRyxJQUNBditCLEVBQUdpK0IsUUFBUyxFQUFJbUMsRUFBVWhELFlBQVlwOUIsRUFBR2haLEtBQUtxM0MsWUFBYXIrQixFQUFHaStCLE9BQVFNLENBQUssSUFHM0V2K0IsRUFuQ2FBLEdBbUNWbEIsT0FBT3F4QixRQUFVLENBQUNud0IsRUFBR2t3QixVQUFVQyxPQUNsQyxNQUFNLElBQUk5cEMsTUFBTSw2QkFBNkIsRUFuQzNDd3FDLEVBQVkvQyxFQUFJakwsTUFBTSxRQUFTK0wsRUFBUXB1QyxRQUFRaXdCLE1BQU0sRUFDM0R5d0IsRUFBZ0JsaEMsRUFBSTZ3QixDQUFTLEVBRTdCL0MsRUFBSWhMLElBQUlzUCxHQUFPLEVBQUlsRixFQUFVanRDLEtBQU00d0MsU0FBaUJqQyxFQUFRcHVDLFFBQVFpd0IsUUFBUSxDQXZCaEYsTUFDSSxFQUFJa3ZCLEVBQWE3TixtQkFBbUI5eEIsRUFBSW95QixDQUFLLENBQ2pELENBQ0EsU0FBU3NPLEVBQWtCLENBQUU1aEMsT0FBQUEsRUFBUW5oQixLQUFBQSxJQUNqQyxHQUFxQixXQUFqQixPQUFPbWhCLEVBQ1AsTUFBTyxDQUFDQSxFQUNaLElBQUssSUFBTWpWLEtBQU9pVixFQUNkLEdBQUluaEIsRUFBS3l2QyxNQUFNbDNCLElBQUlyTSxHQUNmLE9BQU8sQ0FFbkIsQ0FDQSxTQUFTMjJDLEVBQVl4Z0MsR0FDakIsTUFBMkIsV0FBcEIsT0FBT0EsRUFBR2xCLE1BQ3JCLENBWUEsU0FBUzJoQyxFQUFjemdDLElBQ25CLEVBQUk0dkIsRUFBTzdDLG1CQUFtQi9zQixDQUFFLEVBQ2hDNGlDLEdBVU0sQ0FBRTlqQyxPQUFBQSxFQUFRa3lCLGNBQUFBLEVBQWVocUMsS0FBQUEsRUFBTXJKLEtBQUFBLENBQU0sRUFWdEJxaUIsRUFXakJsQixFQUFPK2pDLE1BQVE3N0MsRUFBSzg3Qyx3QkFBeUIsRUFBSWxULEVBQU92QyxzQkFBc0J2dUIsRUFBUW5oQixFQUFLeXZDLEtBQUssR0FDaEd6dkMsRUFBSzJ3QyxPQUFPbG9CLGtEQUFrRDRxQixJQUFnQixDQVh0RixDQUNBLFNBQVNrUSxFQUFnQmxoQyxFQUFJNndCLEdBQ3pCLEdBQUk3d0IsRUFBR2haLEtBQUsrN0MsSUFDUixPQUFPQyxFQUFlaGpDLEVBQUksR0FBSSxDQUFBLEVBQU82d0IsQ0FBUyxFQUNsRCxJQUFNNEIsR0FBUSxFQUFJbU4sRUFBV2pNLGdCQUFnQjN6QixFQUFHbEIsTUFBTSxFQUV0RGtrQyxFQUFlaGpDLEVBQUl5eUIsRUFBTyxFQURMLEVBQUltTixFQUFXbk0sd0JBQXdCenpCLEVBQUl5eUIsQ0FBSyxFQUM1QjVCLENBQVMsQ0FDdEQsQ0FzQkEsU0FBU2lRLEVBQWUsQ0FBRWhULElBQUFBLEVBQUtvQyxVQUFBQSxFQUFXcHhCLE9BQUFBLEVBQVFreUIsY0FBQUEsRUFBZWhxQyxLQUFBQSxJQUN2RGxCLEVBQU1nWixFQUFPK2hDLFNBQ0csQ0FBQSxJQUFsQjc1QyxFQUFLNjVDLFNBQ0wvUyxFQUFJanJCLE1BQUssRUFBSXFxQixFQUFVanRDLEtBQU0ydUMsRUFBUXB1QyxRQUFRN0MsbUJBQW1CbUksSUFBTSxFQUV6QyxZQUF4QixPQUFPa0IsRUFBSzY1QyxXQUNYdFQsR0FBYSxFQUFJTCxFQUFVcHBDLE9BQVFrdEMsYUFDbkNpUyxFQUFXblYsRUFBSXZFLFdBQVcsT0FBUSxDQUFFbnFCLElBQUs4d0IsRUFBVS9zQyxLQUFNLEVBQy9EMnFDLEVBQUlqckIsTUFBSyxFQUFJcXFCLEVBQVVqdEMsS0FBTTJ1QyxFQUFRcHVDLFFBQVE3QyxzQkFBc0JtSSxNQUFReW5DLE1BQWUwVixXQUFrQixFQUVwSCxDQW9CQSxTQUFTRCxFQUFlaGpDLEVBQUl5eUIsRUFBT3lRLEVBQVlyUyxHQUMzQyxHQUFNLENBQUUvQyxJQUFBQSxFQUFLaHZCLE9BQUFBLEVBQVFyQyxLQUFBQSxFQUFNaTBCLFVBQUFBLEVBQVcxcEMsS0FBQUEsRUFBTXJKLEtBQUFBLENBQUksRUFBS3FpQixFQUM3Q290QixFQUFVenZDLEVBQUwsTUFDYixHQUFJbWhCLENBQUFBLEVBQU8rakMsTUFBUzc3QyxDQUFBQSxFQUFLODdDLHdCQUEwQixFQUFJbFQsRUFBT3ZDLHNCQUFzQnZ1QixFQUFRc3VCLENBQUssRUFBakcsQ0FJQSxHQUFLcG1DLENBQUFBLEVBQUsrN0MsSUFDTkksQ0FBQUEsSUFzQ2tCbmpDLEVBdENEQSxFQXNDS3l5QixFQXRDREEsRUF1Q3pCLEdBQUl6eUIsQ0FBQUEsRUFBR2t3QixVQUFVa1QsTUFBU3BqQyxFQUFHaFosS0FBS3E4QyxZQUFsQyxDQUVBQyxJQUt1QnRqQyxFQUxMQSxFQUtTeXlCLEVBTExBLEVBTXRCLEdBQUtBLEVBQU10ekMsT0FFWCxHQUFLNmdCLEVBQUdrMUIsVUFBVS8xQyxPQUFsQixDQUlBc3pDLEVBQU1ocUMsUUFBUSxJQUNMODZDLEVBQWF2akMsRUFBR2sxQixVQUFXNTFCLENBQUMsR0FDN0Jra0MsRUFBaUJ4akMsV0FBYVYsOEJBQThCVSxFQUFHazFCLFVBQVU5MUMsS0FBSyxHQUFHLElBQUksQ0FFakcsQ0FBSyxFQUNEcWtELElBMkJXbmtDLEVBRllVLEVBekJMQSxFQXlCUzBqQyxFQXpCTGpSLEVBMEJoQnpjLEVBQUssR0FDWCxJQUFXMVcsS0FBS1UsRUFBR2sxQixVQUNYcU8sRUFBYUcsRUFBV3BrQyxDQUFDLEVBQ3pCMFcsRUFBR2p6QixLQUFLdWMsQ0FBQyxFQUNKb2tDLEVBQVU3dUMsU0FBUyxTQUFTLEdBQVcsV0FBTnlLLEdBQ3RDMFcsRUFBR2p6QixLQUFLLFNBQVMsRUFFekJpZCxFQUFHazFCLFVBQVlsZixDQXZDbkIsTUFGUWhXLEVBQUdrMUIsVUFBWXpDLEVBUmR6eUIsRUFBR2haLEtBQUsyOEMsa0JBa0JXM2pDLEVBakJEQSxFQWtCUCxHQURZZ1csRUFqQkR5YyxHQWtCcEJ0ekMsU0FBOEIsSUFBZDYyQixFQUFHNzJCLFFBQWdCNjJCLENBQUFBLEVBQUduaEIsU0FBUyxNQUFNLElBQ3hEMnVDLEVBQWlCeGpDLEVBQUksaURBQWlELEdBbEIxRTRqQyxJQXVCV3BXLEVBRll4dEIsRUFyQkxBLEVBcUJTZ1csRUFyQkxoVyxFQUFHazFCLFVBc0JuQi9HLEVBQVFudUIsRUFBR3JpQixLQUFLeXZDLE1BQU1sM0IsSUFDNUIsSUFBV3MzQixLQUFXVyxFQUFPLENBQ3pCLElBQU04RSxFQUFPOUUsRUFBTVgsR0FDQSxVQUFmLE9BQU95RixJQUFvQixFQUFJYSxFQUFnQmpCLGVBQWU3eUIsRUFBR2xCLE9BQVFtMEIsQ0FBSSxJQUNyRTcrQixFQUFTNitCLEVBQUtDLGdCQUNsQjkrQixFQUFLalYsU0FBVSxDQUFDaVYsRUFBS21ILEtBQUssSUFBT3NvQyxPQU1mQyxFQU5xQ3hrQyxHQU01Q3lrQyxFQU53Qy90QixHQU9sRG5oQixTQUFTaXZDLENBQUksR0FBZSxXQUFUQSxHQUFxQkMsRUFBTWx2QyxTQUFTLFNBQVMsRUFEakYsSUFBMkJrdkMsQ0FONkMsQ0FBQyxHQUN6RFAsRUFBaUJ4akMsbUJBQXFCNUwsRUFBS2hWLEtBQUssR0FBRyxtQkFBbUJvdUMsSUFBVSxDQUdoRyxDQW5DUSxDQXhDMEIsQ0FDOUJNLEVBQUl2QyxNQUFNLEtBQ04sSUFBSyxJQUFNeUgsS0FBUzVGLEVBQU1lLE1BQ3RCNlYsRUFBY2hSLENBQUssRUFDdkJnUixFQUFjNVcsRUFBTXVGLElBQUksQ0FDaEMsQ0FBSyxDQVBMLE1BRlE3RSxFQUFJdkMsTUFBTSxJQUFNMFksRUFBWWprQyxFQUFJLE9BQVFvdEIsRUFBTWwzQixJQUFJMnNDLEtBQUszUCxVQUFVLENBQUMsRUFVdEUsU0FBUzhRLEVBQWNoUixJQUNkLEVBQUljLEVBQWdCaEIsZ0JBQWdCaDBCLEVBQVFrMEIsQ0FBSyxJQUVsREEsRUFBTTUrQixNQUNOMDVCLEVBQUk5RCxJQUFHLEVBQUk2VixFQUFXck0sZUFBZVIsRUFBTTUrQixLQUFNcUksRUFBTXpWLEVBQUt1dEMsYUFBYSxDQUFDLEVBQzFFMlAsRUFBZ0Jsa0MsRUFBSWd6QixDQUFLLEVBQ0osSUFBakJQLEVBQU10ekMsUUFBZ0JzekMsRUFBTSxLQUFPTyxFQUFNNStCLE1BQVE4dUMsSUFDakRwVixFQUFJN0YsS0FBTSxHQUNWLEVBQUk0WCxFQUFXdk0saUJBQWlCdHpCLENBQUUsR0FFdEM4dEIsRUFBSTFELE1BQU8sR0FHWDhaLEVBQWdCbGtDLEVBQUlnekIsQ0FBSyxFQUd4QnRDLEdBQ0Q1QyxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNMnVDLEVBQVFwdUMsUUFBUWl3QixjQUFjb2dCLEdBQWEsR0FBRyxFQUNyRixDQUNBLENBQ0EsU0FBU3FULEVBQWdCbGtDLEVBQUlnekIsR0FDekIsR0FBTSxDQUFFbEYsSUFBQUEsRUFBS2h2QixPQUFBQSxFQUFROVgsS0FBTSxDQUFFdXVDLFlBQUFBLENBQWEsQ0FBQSxFQUFNdjFCLEVBQzVDdTFCLElBQ0EsRUFBSXVLLEVBQVcxSyxnQkFBZ0JwMUIsRUFBSWd6QixFQUFNNStCLElBQUksRUFDakQwNUIsRUFBSXZDLE1BQU0sS0FDTixJQUFLLElBQU0wSCxLQUFRRCxFQUFNN0UsT0FDakIsRUFBSTJGLEVBQWdCakIsZUFBZS96QixFQUFRbTBCLENBQUksR0FDL0NnUixFQUFZamtDLEVBQUlpekIsRUFBS3pGLFFBQVN5RixFQUFLQyxXQUFZRixFQUFNNStCLElBQUksQ0FHekUsQ0FBSyxDQUNMLENBMkNBLFNBQVNtdkMsRUFBYXZ0QixFQUFJMVcsR0FDdEIsT0FBTzBXLEVBQUduaEIsU0FBU3lLLENBQUMsR0FBWSxZQUFOQSxHQUFtQjBXLEVBQUduaEIsU0FBUyxRQUFRLENBQ3JFLENBV0EsU0FBUzJ1QyxFQUFpQnhqQyxFQUFJbGEsR0FFMUJBLFdBRG1Ca2EsRUFBR2t3QixVQUFVK04sT0FBU2orQixFQUFHZ3hCLGdDQUU1QyxFQUFJcEIsRUFBT3hELGlCQUFpQnBzQixFQUFJbGEsRUFBS2thLEVBQUdoWixLQUFLcThDLFdBQVcsQ0FDNUQsQ0ErS0EsU0FBU1ksRUFBWWprQyxFQUFJd3RCLEVBQVMxSSxFQUFLcWYsR0FDN0I3VCxFQUFNLElBQUltUCxFQUFXei9CLEVBQUk4a0IsRUFBSzBJLENBQU8sRUFDdkMsU0FBVTFJLEVBQ1ZBLEVBQUlqaUIsS0FBS3l0QixFQUFLNlQsQ0FBUSxFQUVqQjdULEVBQUk3QyxPQUFTM0ksRUFBSThULFVBQ3RCLEVBQUltSCxFQUFVN0gsaUJBQWlCNUgsRUFBS3hMLENBQUcsRUFFbEMsVUFBV0EsR0FDaEIsRUFBSWliLEVBQVU1SCxrQkFBa0I3SCxFQUFLeEwsQ0FBRyxHQUVuQ0EsRUFBSStULFNBQVcvVCxFQUFJOFQsWUFDeEIsRUFBSW1ILEVBQVU3SCxpQkFBaUI1SCxFQUFLeEwsQ0FBRyxDQUUvQyxDQUdBLFNBQVMwYSxFQUFRL1IsRUFBTyxDQUFFNE0sVUFBQUEsRUFBV0UsVUFBQUEsRUFBV0wsWUFBQUEsQ0FBVyxHQUN2RDE2QyxJQUFJNGtELEVBQ0EzbkMsRUFDSixHQUFjLEtBQVZneEIsRUFDQSxPQUFPbUIsRUFBUXB1QyxRQUFReXVDLFNBQzNCLEdBQWlCLE1BQWJ4QixFQUFNLEdBQVksQ0FDbEIsR0FBSSxDQUFDK1UsRUFBYTFpRCxLQUFLMnRDLENBQUssRUFDeEIsTUFBTSxJQUFJcG5DLE1BQU0seUJBQXlCb25DLENBQU8sRUFDcEQyVyxFQUFjM1csRUFDZGh4QixFQUFPbXlCLEVBQVFwdUMsUUFBUXl1QyxRQUMvQixLQUNTLENBQ0QsSUFBTW9WLEVBQVU1QixFQUFzQnRoRCxLQUFLc3NDLENBQUssRUFDaEQsR0FBSSxDQUFDNFcsRUFDRCxNQUFNLElBQUloK0MsTUFBTSx5QkFBeUJvbkMsQ0FBTyxFQUM5QzdzQyxFQUFLLENBQUN5akQsRUFBUSxHQUVwQixHQUFvQixPQURwQkQsRUFBY0MsRUFBUSxJQUNHLENBQ3JCLEdBQVVoSyxHQUFOejVDLEVBQ0EsTUFBTSxJQUFJeUYsTUFBTWkrQyxFQUFTLGlCQUFrQjFqRCxDQUFFLENBQUMsRUFDbEQsT0FBT3M1QyxFQUFZRyxFQUFZejVDLEVBQzNDLENBQ1EsR0FBU3k1QyxFQUFMejVDLEVBQ0EsTUFBTSxJQUFJeUYsTUFBTWkrQyxFQUFTLE9BQVExakQsQ0FBRSxDQUFDLEVBRXhDLEdBREE2YixFQUFPODlCLEVBQVVGLEVBQVl6NUMsR0FDekIsQ0FBQ3dqRCxFQUNELE9BQU8zbkMsQ0FDbkIsQ0FDSWpkLElBQUl3aUMsRUFBT3ZsQixFQUNYLElBQ1c4bkMsRUFBWCxJQUFXQSxLQURNSCxFQUFZM2lELE1BQU0sR0FBRyxFQUU5QjhpRCxJQUNBOW5DLEdBQU8sRUFBSXl3QixFQUFVanRDLEtBQU13YyxLQUFPLEVBQUl5d0IsRUFBVWxNLGNBQWEsRUFBSTRPLEVBQU9sQyxxQkFBcUI2VyxDQUFPLENBQUMsSUFDckd2aUIsR0FBTyxFQUFJa0wsRUFBVWp0QyxLQUFNK2hDLFFBQVd2bEIsS0FHOUMsT0FBT3VsQixFQUNQLFNBQVNzaUIsRUFBU0UsRUFBYTVqRCxHQUMzQix1QkFBd0I0akQsS0FBZTVqRCxpQ0FBa0N5NUMsQ0FDakYsQ0FDQSxDQUNBekIsR0FBQTRHLFFBQWtCQSxvRENyZ0JsQjVnRCxPQUFPbWUsZUFBZTBuQyxHQUFTLGFBQWMsQ0FBRTkvQyxNQUFPLENBQUEsRUFBTSxRQUN0RHlyQyxVQUF3Qi9wQyxNQUMxQmhDLFlBQVlvc0IsR0FDUmpULE1BQU0sbUJBQW1CLEVBQ3pCdFgsS0FBS3VxQixPQUFTQSxFQUNkdnFCLEtBQUt3K0MsSUFBTXgrQyxLQUFLeStDLFdBQWEsQ0FBQSxDQUNyQyxDQUNBLENBQ0FGLEdBQUFqa0QsUUFBa0I0dkMsb0RDUmxCeHhDLE9BQU9tZSxlQUFlNm5DLEdBQVMsYUFBYyxDQUFFamdELE1BQU8sQ0FBQSxFQUFNLEVBQzVELElBQU15N0MsRUFBWS95QyxHQUFvQixRQUNoQ3czQyxVQUF3QngrQyxNQUMxQmhDLFlBQVkyNUMsRUFBVUMsRUFBUTcrQixFQUFLdFosR0FDL0IwWCxNQUFNMVgsOEJBQWtDc1osYUFBZTYrQixDQUFRLEVBQy9ELzNDLEtBQUs0K0MsWUFBYSxFQUFJMUUsRUFBVWhELFlBQVlZLEVBQVVDLEVBQVE3K0IsQ0FBRyxFQUNqRWxaLEtBQUs2K0MsZUFBZ0IsRUFBSTNFLEVBQVUvQyxjQUFhLEVBQUkrQyxFQUFVN0MsYUFBYVMsRUFBVTkzQyxLQUFLNCtDLFVBQVUsQ0FBQyxDQUM3RyxDQUNBLENBQ0FGLEdBQUFwa0QsUUFBa0Jxa0QsbURDVGxCam1ELE9BQU9tZSxlQUFlODdCLEVBQVMsYUFBYyxDQUFFbDBDLE1BQU8sQ0FBQSxFQUFNLEVBQ3ZDazBDLEVBQUFtTSxjQUFHbk0sRUFBMEJvTSxtQkFBR3BNLEVBQWtCcU0sV0FBR3JNLGdCQUF3QkEsRUFBQXNNLFVBQW9CdjZDLEtBQUFBLEVBQ3RILElBQU1zaUMsRUFBWTcvQixFQUFvQixFQUNoQyszQyxFQUFxQjlmLEdBQXNDLEVBQzNEc0osRUFBVXJoQyxFQUFrQixFQUM1QjZ5QyxFQUFZck0sR0FBb0IsRUFDaENuRSxFQUFTb0UsRUFBaUIsRUFDMUJxUixFQUFhcEYsR0FBcUIsUUFDbENrRixFQUNGOWdELFlBQVlqRyxHQUNSLElBQUl1akMsRUFDSno3QixLQUFLKzRDLEtBQU8sR0FDWi80QyxLQUFLZ3BDLGVBQWlCLEdBQ3RCMXZDLElBQUlzZixFQUNxQixVQUFyQixPQUFPMWdCLEVBQUkwZ0IsU0FDWEEsRUFBUzFnQixFQUFJMGdCLFFBQ2pCNVksS0FBSzRZLE9BQVMxZ0IsRUFBSTBnQixPQUNsQjVZLEtBQUtrNEMsU0FBV2hnRCxFQUFJZ2dELFNBQ3BCbDRDLEtBQUsvQyxLQUFPL0UsRUFBSStFLE1BQVErQyxLQUN4QkEsS0FBSyszQyxPQUFTLE9BQUN0YyxFQUFLdmpDLEVBQUk2L0MsUUFBb0N0YyxHQUFLLEVBQUl5ZSxFQUFVL0MsYUFBYXYrQixNQUFBQSxFQUF1Q2xVLEtBQUFBLEVBQVNrVSxFQUFPMWdCLEVBQUlnZ0QsVUFBWSxNQUFNLEVBQ3pLbDRDLEtBQUtxbkMsV0FBYW52QyxFQUFJbXZDLFdBQ3RCcm5DLEtBQUt1NEMsVUFBWXJnRCxFQUFJcWdELFVBQ3JCdjRDLEtBQUtrOUMsS0FBT2hsRCxFQUFJZ2xELEtBQ2hCbDlDLEtBQUtpcUMsT0FBU3J4QixNQUFBQSxFQUF1Q2xVLEtBQUFBLEVBQVNrVSxFQUFPcXhCLE9BQ3JFanFDLEtBQUsrNEMsS0FBTyxFQUNwQixDQUNBLENBQ0FwRyxFQUFBc00sVUFBb0JBLEVBaUdwQnRNLEVBQUF5TSxjQUF3QkEsRUFrQnhCek0sRUFBQXFNLFdBakJBLFNBQW9CL2hELEVBQU04NkMsRUFBUTcrQixHQUU5QkEsR0FBTSxFQUFJZ2hDLEVBQVVoRCxZQUFZbDNDLEtBQUtjLEtBQUtxM0MsWUFBYUosRUFBUTcrQixDQUFHLEVBRGxFLElBUVlnL0IsRUFOTm1ILEVBQVlwaUQsRUFBSzg3QyxLQUFLNy9CLEdBQzVCLEdBQUltbUMsRUFDQSxPQUFPQSxFQUNYL2xELElBQUltNEMsRUE4QlIsU0FBaUJ4MEMsRUFDakJpYyxHQUVJNWYsSUFBSWsyQyxFQUNKLEtBQXdDLFVBQWpDLE9BQVFBLEVBQU14dkMsS0FBSys0QyxLQUFLNy9CLEtBQzNCQSxFQUFNczJCLEVBQ1YsT0FBT0EsR0FBT3h2QyxLQUFLK29CLFFBQVE3UCxJQUFRNGxDLEVBQWMvaUQsS0FBS2lFLEtBQU0vQyxFQUFNaWMsQ0FBRyxDQUN6RSxFQXJDdUJuZCxLQUFLaUUsS0FBTS9DLEVBQU1pYyxDQUFHLEVBT3ZDLE9BQWF4VSxLQUFBQSxLQUZMK3NDLEVBSksvc0MsS0FBQUEsSUFBVCtzQyxJQUNNNzRCLEVBQVMsT0FBQzZpQixFQUFLeCtCLEVBQUtzN0MsV0FBdUM3ekMsS0FBQUEsRUFBUysyQixFQUFHdmlCLEdBQ3JFZy9CLEVBQWFsNEMsS0FBS2MsY0FDdEI4WCxHQUNPLElBQUlxbUMsRUFBVSxDQUFFcm1DLE9BQUFBLEVBQVFzL0IsU0FBQUEsRUFBVWo3QyxLQUFBQSxFQUFNODZDLE9BQUFBLEVBQVEsRUFFM0R0RyxHQUVJeDBDLEVBQUs4N0MsS0FBSzcvQixHQUd0QixTQUF5QnMyQixHQUNyQixPQUFJLEVBQUkwSyxFQUFVNUMsV0FBVzlILEVBQUk1MkIsT0FBUTVZLEtBQUtjLEtBQUt3K0MsVUFBVSxFQUNsRDlQLEVBQUk1MkIsT0FDUjQyQixFQUFJa0QsU0FBV2xELEVBQU00UCxFQUFjcmpELEtBQUtpRSxLQUFNd3ZDLENBQUcsQ0FDNUQsRUFQNkN6ekMsS0FBS2lFLEtBQU15eEMsQ0FBSSxFQUZ4RCxLQUFBLENBR0osRUFjQWtCLEVBQUFvTSxtQkFBNkJBLEVBK0M3QnBNLEVBQUFtTSxjQUF3QkEsRUFDeEIsSUFBTVMsRUFBdUIsSUFBSTNwQyxJQUFJLENBQ2pDLGFBQ0Esb0JBQ0EsT0FDQSxlQUNBLGNBQ0gsRUFsTEQsU0FBU3dwQyxFQUFjNVAsR0FFbkIsSUFBTWlDLEVBQU9zTixFQUFtQmhqRCxLQUFLaUUsS0FBTXd2QyxDQUFHLEVBQzlDLEdBQUlpQyxFQUNBLE9BQU9BLEVBQ1gsSUFBTStOLEdBQVMsRUFBSXRGLEVBQVU3QyxhQUFhcjNDLEtBQUtjLEtBQUtxM0MsWUFBYTNJLEVBQUl2eUMsS0FBSzg2QyxNQUFNLEVBQzFFLENBQUVsWixJQUFBQSxFQUFLNXBCLE1BQUFBLENBQU8sRUFBR2pWLEtBQUtjLEtBQUs2YixLQUN6QmlvQixFQUFrQjVrQyxLQUFLYyxtQkFDekI4bUMsRUFBTSxJQUFJWixFQUFVL0gsUUFBUWovQixLQUFLNDlCLE1BQU8sQ0FBRWlCLElBQUFBLEVBQUs1cEIsTUFBQUEsRUFBTzJ2QixjQUFBQSxFQUFlLEVBQzNFdHJDLElBQUltbUQsRUFDQWpRLEVBQUl2RixTQUNKd1YsRUFBbUI3WCxFQUFJdkUsV0FBVyxRQUFTLENBQ3ZDbnFCLElBQUtnbUMsRUFBbUI1a0QsUUFDeEJxaUIsTUFBTSxFQUFJcXFCLEVBQVVqdEMsd0RBQ2hDLENBQVMsR0FFQ2d3QyxFQUFlbkMsRUFBSXhKLFVBQVUsVUFBVSxFQUM3Q29SLEVBQUl6RixhQUFlQSxFQUNic1MsRUFBWSxDQUNkelUsSUFBQUEsRUFDQTRDLFVBQVd4cUMsS0FBS2MsS0FBSzBwQyxVQUNyQmowQixLQUFNbXlCLEVBQVFwdUMsUUFBUWljLEtBQ3RCc3lCLFdBQVlILEVBQVFwdUMsUUFBUXV1QyxXQUM1QkMsbUJBQW9CSixFQUFRcHVDLFFBQVF3dUMsbUJBQ3BDdUwsVUFBVyxDQUFDM0wsRUFBUXB1QyxRQUFRaWMsTUFDNUJ5OUIsWUFBYSxDQUFDaE4sRUFBVS9MLEtBQ3hCa1osVUFBVyxFQUNYbkYsVUFBVyxHQUNYb0Ysa0JBQW1CLElBQUl4K0IsSUFDdkJ3eEIsYUFBY1EsRUFBSXZFLFdBQVcsU0FBb0MsQ0FBQSxJQUExQnJqQyxLQUFLYyxLQUFLNmIsS0FBS2hOLE9BQ2hELENBQUV1SixJQUFLczJCLEVBQUk1MkIsT0FBUStELE1BQU0sRUFBSXFxQixFQUFVem5DLFdBQVdpd0MsRUFBSTUyQixNQUFNLENBQUMsRUFDN0QsQ0FBRU0sSUFBS3MyQixFQUFJNTJCLE9BQVEsRUFDekJteEIsYUFBQUEsRUFDQUcsZ0JBQWlCdVYsRUFDakI3bUMsT0FBUTQyQixFQUFJNTJCLE9BQ1pveEIsVUFBV3dGLEVBQ1hnUSxPQUFBQSxFQUNBekgsT0FBUXZJLEVBQUl1SSxRQUFVeUgsRUFDdEJuWSxXQUFZTCxFQUFVL0wsSUFDdEI2UCxjQUFlMEUsRUFBSW5JLGFBQWVybkMsS0FBS2MsS0FBSys3QyxJQUFNLEdBQUssS0FDdkRoUyxXQUFXLEVBQUk3RCxFQUFVanRDLE9BQ3pCK0csS0FBTWQsS0FBS2MsS0FDWHJKLEtBQU11SSxJQUNULEVBQ0QxRyxJQUFJb21ELEVBQ0osSUFDSTEvQyxLQUFLMi9DLGNBQWMxNEMsSUFBSXVvQyxDQUFHLEdBQzFCLEVBQUkyUCxFQUFXM0Ysc0JBQXNCNkMsQ0FBUyxFQUM5Q3pVLEVBQUk3TCxTQUFTLzdCLEtBQUtjLEtBQUs2YixLQUFLb2YsUUFBUSxFQUVwQyxJQUFNNmpCLEVBQWVoWSxFQUFJNWtDLFNBQVUsRUFDbkMwOEMsRUFBZ0I5WCxFQUFJekosVUFBVXVLLEVBQVFwdUMsUUFBUXNqQyxLQUFLLEVBQXRDLFVBQWlEZ2lCLEVBRTFENS9DLEtBQUtjLEtBQUs2YixLQUFLL2tCLFVBQ2Y4bkQsRUFBYTEvQyxLQUFLYyxLQUFLNmIsS0FBSy9rQixRQUFROG5ELEVBQVlsUSxDQUFHLEdBSnZELElBa0JZenZCLEVBQU9oTyxFQVhiMmdDLEVBRGUsSUFBSW1OLFNBQVMsR0FBR25YLEVBQVFwdUMsUUFBUTdDLEtBQVEsR0FBR2l4QyxFQUFRcHVDLFFBQVFzakMsTUFBUzhoQixDQUFVLEVBQ3JFMS9DLEtBQU1BLEtBQUs0OUIsTUFBTXg1QixLQUFLLEVBc0JwRCxPQXJCQXBFLEtBQUs0OUIsTUFBTW4vQixNQUFNc3JDLEVBQWMsQ0FBRTd3QixJQUFLdzVCLEVBQVUsRUFDaERBLEVBQVNub0IsT0FBUyxLQUNsQm1vQixFQUFTOTVCLE9BQVM0MkIsRUFBSTUyQixRQUN0Qjg1QixFQUFTMUksVUFBWXdGLEdBQ2J2RixTQUNKeUksRUFBU3pJLE9BQVMsQ0FBQSxHQUNRLENBQUEsSUFBMUJqcUMsS0FBS2MsS0FBSzZiLEtBQUtoTixTQUNmK2lDLEVBQVMvaUMsT0FBUyxDQUFFbzZCLGFBQUFBLEVBQWM2VixhQUFBQSxFQUFjRSxZQUFhbFksRUFBSWxLLE9BQVMsR0FFMUUxOUIsS0FBS2MsS0FBS3l3QyxjQUNKLENBQUV4eEIsTUFBQUEsRUFBT2hPLE1BQUFBLENBQUssRUFBS3NxQyxFQUN6QjNKLEVBQVNxSSxVQUFZLENBQ2pCaDdCLE1BQU9BLGFBQWlCaW5CLEVBQVU3TCxLQUFPejJCLEtBQUFBLEVBQVlxYixFQUNyRGhPLE1BQU9BLGFBQWlCaTFCLEVBQVU3TCxLQUFPejJCLEtBQUFBLEVBQVlxTixFQUNyRGd1QyxhQUFjaGdDLGFBQWlCaW5CLEVBQVU3TCxLQUN6QzZrQixhQUFjanVDLGFBQWlCaTFCLEVBQVU3TCxJQUM1QyxFQUNHdVgsRUFBUy9pQyxVQUNUK2lDLEVBQVMvaUMsT0FBT29yQyxXQUFZLEVBQUkvVCxFQUFVem5DLFdBQVdtekMsRUFBU3FJLFNBQVMsR0FFL0V2TCxFQUFJa0QsU0FBV0EsRUFDUmxELENBWWYsQ0FWSSxNQUFPMXFDLEdBTUgsTUFMQSxPQUFPMHFDLEVBQUlrRCxTQUNYLE9BQU9sRCxFQUFJekYsYUFDUDJWLEdBQ0ExL0MsS0FBS29vQyxPQUFPN25DLE1BQU0seUNBQTBDbS9DLENBQVUsRUFFcEU1NkMsQ0FDZCxDQUNZLFFBQ0o5RSxLQUFLMi9DLGNBQWN2cEMsT0FBT281QixDQUFHLENBQ3JDLENBQ0EsQ0EwQkEsU0FBU3VQLEVBQW1Ca0IsR0FDeEIsSUFBSyxJQUFNelEsS0FBT3h2QyxLQUFLMi9DLGNBQ25CLEdBS2VPLEVBTEcxUSxFQUtDMlEsRUFMSUYsRUFNcEJDLEVBQUd0bkMsU0FBV3VuQyxFQUFHdm5DLFFBQVVzbkMsRUFBR2pqRCxPQUFTa2pELEVBQUdsakQsTUFBUWlqRCxFQUFHbkksU0FBV29JLEVBQUdwSSxPQUxsRSxPQUFPdkksRUFJbkIsSUFBdUIwUSxFQUFJQyxDQUYzQixDQWdCQSxTQUFTckIsRUFBYzdoRCxFQUN2QmljLEdBRUksSUFRTTQvQixFQVlNbGdDLEVBcEJOcGQsRUFBSXdFLEtBQUtjLEtBQUtxM0MsWUFBWXJ3QyxNQUFNb1IsQ0FBRyxFQUNuQ2tuQyxHQUFVLEVBQUlsRyxFQUFVOUMsY0FBY3AzQyxLQUFLYyxLQUFLcTNDLFlBQWEzOEMsQ0FBQyxFQUNwRWxDLElBQUl5K0MsR0FBUyxFQUFJbUMsRUFBVTdDLGFBQWFyM0MsS0FBS2MsS0FBS3EzQyxZQUFhbDdDLEVBQUs4NkMsT0FBUXJ6QyxLQUFBQSxDQUFTLEVBRXJGLE9BQXNDLEVBQWxDaE0sT0FBTzJKLEtBQUtwRixFQUFLMmIsTUFBTSxFQUFFM2YsUUFBY21uRCxJQUFZckksRUFDNUNzSSxFQUFldGtELEtBQUtpRSxLQUFNeEUsRUFBR3lCLENBQUksR0FFdEMrNkMsR0FBSyxFQUFJa0MsRUFBVS9DLGFBQWFpSixDQUFPLEVBRXRCLFVBQW5CLE9BREV0SCxFQUFXOTRDLEtBQUsrNEMsS0FBS2YsSUFBT2g0QyxLQUFLK29CLFFBQVFpdkIsSUFHMkIsVUFBbEUsT0FBUXhJLE9BRE5BLEVBQU1zUCxFQUFjL2lELEtBQUtpRSxLQUFNL0MsRUFBTTY3QyxDQUFRLEdBQ05wMEMsS0FBQUEsRUFBUzhxQyxFQUFJNTJCLFFBQ3RELEtBQUEsRUFDR3luQyxFQUFldGtELEtBQUtpRSxLQUFNeEUsRUFBR2cwQyxDQUFHLEVBRTBDLFVBQWpGLE9BQVFzSixNQUFBQSxFQUEyQ3AwQyxLQUFBQSxFQUFTbzBDLEVBQVNsZ0MsU0FFcEVrZ0MsRUFBU3BHLFVBQ1YwTSxFQUFjcmpELEtBQUtpRSxLQUFNODRDLENBQVEsRUFDakNkLEtBQU8sRUFBSWtDLEVBQVUvQyxhQUFhaitCLENBQUcsR0FDN0JOLEVBQVdrZ0MsRUFBTCxPQUNOWixFQUFhbDRDLEtBQUtjLGVBQ3BCdTNDLEVBQVF6L0IsRUFBT3MvQixNQUVqQkgsR0FBUyxFQUFJbUMsRUFBVWhELFlBQVlsM0MsS0FBS2MsS0FBS3EzQyxZQUFhSixFQUFRTSxDQUFLLEdBQ3BFLElBQUk0RyxFQUFVLENBQUVybUMsT0FBQUEsRUFBUXMvQixTQUFBQSxFQUFVajdDLEtBQUFBLEVBQU04NkMsT0FBQUEsRUFBUSxHQUVwRHNJLEVBQWV0a0QsS0FBS2lFLEtBQU14RSxFQUFHczlDLENBQVEsR0FaNUMsS0FBQSxFQWFKLENBU0EsU0FBU3VILEVBQWVDLEVBQVcsQ0FBRXZJLE9BQUFBLEVBQVFuL0IsT0FBQUEsRUFBUTNiLEtBQUFBLENBQUksR0FFckQsR0FBK0UsT0FBMUUsT0FBQ3crQixFQUFLNmtCLEVBQVVDLFVBQXNDNzdDLEtBQUFBLEVBQVMrMkIsRUFBRyxJQUF2RSxDQUVBLElBQUssSUFBTStrQixLQUFRRixFQUFVQyxTQUFTMW1ELE1BQU0sQ0FBQyxFQUFFMEIsTUFBTSxHQUFHLEVBQUcsQ0FDdkQsR0FBc0IsV0FBbEIsT0FBT3FkLEVBQ1AsT0FDSixJQUFNNm5DLEVBQWE3bkMsR0FBTyxFQUFJOHdCLEVBQU9oRCxrQkFBa0I4WixDQUFJLEdBQzNELEdBQW1COTdDLEtBQUFBLElBQWYrN0MsRUFDQSxPQUdFcEksRUFBMEIsVUFBbEIsT0FGZHovQixFQUFTNm5DLElBRW1DN25DLEVBQU81WSxLQUFLYyxLQUFLbzNDLFVBQ3pELENBQUNxSCxFQUFxQnhwQyxJQUFJeXFDLENBQUksR0FBS25JLElBQ25DTixHQUFTLEVBQUltQyxFQUFVaEQsWUFBWWwzQyxLQUFLYyxLQUFLcTNDLFlBQWFKLEVBQVFNLENBQUssRUFFbkYsQ0FDSS8rQyxJQUFJcEIsRUFDSixJQUNVeWtELEVBS0Z6RSxHQU5hLFdBQWpCLE9BQU90L0IsR0FBdUJBLEVBQU8rakMsTUFBUSxFQUFDLEVBQUlqVCxFQUFPdkMsc0JBQXNCdnVCLEVBQVE1WSxLQUFLa25DLEtBQUssSUFDM0Z5VixHQUFPLEVBQUl6QyxFQUFVaEQsWUFBWWwzQyxLQUFLYyxLQUFLcTNDLFlBQWFKLEVBQVFuL0IsRUFBTytqQyxJQUFJLEVBQ2pGemtELEVBQU00bUQsRUFBYy9pRCxLQUFLaUUsS0FBTS9DLEVBQU0wL0MsQ0FBSSxHQUl4QjM4QyxLQUFLYyxlQUUxQixPQURBNUksRUFBTUEsR0FBTyxJQUFJK21ELEVBQVUsQ0FBRXJtQyxPQUFBQSxFQUFRcy9CLFNBQUFBLEVBQVVqN0MsS0FBQUEsRUFBTTg2QyxPQUFBQSxFQUFRLEdBQ3JEbi9CLFNBQVcxZ0IsRUFBSStFLEtBQUsyYixPQUNqQjFnQixFQURYLEtBQUEsQ0F2QkksQ0EwQlIsb2FDOU9BLElBQVF3b0QsR0N5QlJDLFNBQWlCLENBQ2ZELElBMUJVLENBQ1ZydkIsRUFBRyxFQUNIdXZCLE9BQ0FDLEVBQUcsRUFDSEMsRUFBRyxFQUNIQyxFQUFHLEVBQ0hDLEVBQUcsRUFDSEMsRUFBRyxFQUNIQyxFQUFHLEVBQ0hDLEVBQUcsRUFDSEMsRUFBRyxFQUNIMTBDLEVBQUcsR0FDSDIwQyxFQUFHLEdBQ0hwM0IsRUFBRyxHQUNIcTNCLEVBQUcsR0FDSDc1QyxFQUFHLEdBQ0g4NUMsRUFBRyxHQUNIMThDLEVBQUcsR0FDSDI4QyxFQUFHLEdBQ0gxOEMsRUFBRyxHQUNIa21DLEVBQUcsR0FDSDN0QyxFQUFHLEdBQ0hva0QsRUFBRyxFQUNMLENBSUEsR0QzQlcsSUFFTEMsRUFBVywyRkFnSlhDLEVBQU8sWUFDUEMsRUFBTyxpQkFDUEMsRUFBTyxtQkFDUEMsRUFBTywwQkFqSmIsU0FBU0MsRUFBZUMsR0FDdEIsSUFFT0MsRUFGUCxNQUFJQyxFQUFBQSxFQUFVRixFQUFNLEdBQUcsRUFBSSxLQUVyQixDQUFDQyxHQURTRCxFQUFLcCtDLE1BQU04OUMsQ0FBUSxHQUFLLEdBRXBDTyxHQUNLLENBQUVELE1BMEdiLENBQTRCcGtELEVBQUswdkIsS0FDL0JoMEIsSUFBSTZvRCxFQUFNLEdBQ05DLEVBQU8sQ0FBQSxFQUNMNStDLEVBQUk1RixFQUFJM0UsT0FDZCxJQUFLSyxJQUFJSSxFQUFJLEVBQUdBLEVBQUk4SixFQUFHOUosQ0FBQyxHQUFJLENBQzFCLElBQU0rTixFQUFJN0osRUFBSWxFLEdBQ0osTUFBTitOLEdBQWEyNkMsR0FDVjFvRCxFQUFJLEdBQUs4SixHQUFLNUYsRUFBSWxFLEVBQUksS0FBTzR6QixHQUFVNXpCLEVBQUksSUFBTThKLEtBQ3BEMitDLEdBQU8xNkMsRUFDUDI2QyxFQUFPLENBQUEsSUFJUEEsRUFERTM2QyxJQUFNNmxCLEVBS1Y2MEIsR0FBTzE2QyxFQUViLENBQ0UsT0FBTzA2QyxDQUNULEdBL0hxQ0YsRUFBUyxHQUFHLEVBQUdJLE9BQVEsQ0FBQSxDQUFJLEVBRXJELENBQUVMLEtBQUFBLEVBQU1LLE9BQVEsQ0FBQSxDQUFLLENBRWhDLENBT0EsU0FBU0MsRUFBMEJqcUQsRUFBT2txRCxFQUFXLENBQUEsR0FDbkRqcEQsSUFBSWtwRCxFQUFNLEdBQ05DLEVBQVEsQ0FBQSxFQUNaLElBQUssSUFBTWg3QyxLQUFLcFAsRUFBTyxDQUNyQixHQUFlcU0sS0FBQUEsSUFBWGc4QyxFQUFJajVDLEdBQWtCLFFBQ09nN0MsRUFBdkIsTUFBTmg3QyxHQUF1QixDQUFBLElBQVZnN0MsRUFBd0IsQ0FBQSxFQUNwQ0EsS0FBT0QsR0FBTy82QyxFQUN2QixDQUVFLE9BRGtDKzZDLEVBQTlCRCxHQUEyQixJQUFmQyxFQUFJdnBELE9BQW9CLElBQ2pDdXBELENBQ1QsQ0FvRUEsU0FBU0UsRUFBZVYsR0FDdEIsR0FBSUUsRUFBVUYsRUFBTSxHQUFHLEVBQUksRUFBSyxNQUFPLENBQUVBLEtBQUFBLEVBQU1XLE9BQVEsQ0FBQSxDQUFPLEVBQzlELElBQU1DLEdBcEVVdnFELElBQ2hCaUIsSUFBSXVwRCxFQUFhLEVBQ1h0L0MsRUFBUyxDQUFFaEQsTUFBTyxDQUFBLEVBQU8waEQsUUFBUyxHQUFJYSxLQUFNLEVBQUUsRUFDOUNiLEVBQVUsR0FDVjc3QixFQUFTLEdBQ1gyOEIsRUFBUyxDQUFBLEVBQ1RDLEVBQXFCLENBQUEsRUFDckJDLEVBQVUsQ0FBQSxFQUVkLFNBQVNDLElBQ1AsR0FBSTk4QixFQUFPbnRCLE9BQVEsQ0FDakIsR0FBZSxDQUFBLElBQVg4cEQsRUFBa0IsQ0FDcEIsSUFBTUksRUFBTWIsRUFBeUJsOEIsQ0FBTSxFQUMzQyxHQUFZMWhCLEtBQUFBLElBQVJ5K0MsRUFJRixPQURBNS9DLEtBQUFBLEVBQU9oRCxNQUFRLENBQUEsR0FGZjBoRCxFQUFRcGxELEtBQUtzbUQsQ0FBRyxDQUsxQixDQUNNLzhCLEVBQU9udEIsT0FBUyxDQUN0QixDQUNJLE9BQU8sQ0FDWCxDQUVFLElBQUtLLElBQUlJLEVBQUksRUFBR0EsRUFBSXJCLEVBQU1ZLE9BQVFTLENBQUMsR0FBSSxDQUNyQyxJQUFNMHBELEVBQVMvcUQsRUFBTXFCLEdBQ3JCLEdBQWUsTUFBWDBwRCxHQUE2QixNQUFYQSxFQUN0QixHQUFlLE1BQVhBLEVBQUosQ0FJRSxHQUgyQixDQUFBLElBQXZCSixJQUNGQyxFQUFVLENBQUEsR0FFUixDQUFDQyxFQUFTLEVBQUksTUFHbEIsR0FGQUwsQ0FBVSxHQUNWWixFQUFRcGxELEtBQUssR0FBRyxFQUNDLEVBQWJnbUQsRUFBZ0IsQ0FFbEJ0L0MsRUFBT2hELE1BQVEsQ0FBQSxFQUNmLEtBQ1IsQ0FDbUIsR0FBVDdHLEVBQUksR0FBMkIsTUFBakJyQixFQUFNcUIsRUFBSSxLQUMxQnNwRCxFQUFxQixDQUFBLEVBVTdCLE1BUFcsR0FBZSxNQUFYSSxFQUtUaDlCLEVBQU92cEIsS0FBS3VtRCxDQUFNLE1BTGIsQ0FDTCxHQUFJLENBQUNGLEVBQVMsRUFBSSxNQUVsQkgsRUFBUyxDQUFBLENBSWYsQ0FDQSxDQVdFLE9BVkkzOEIsRUFBT250QixTQUNMOHBELEVBQ0Z4L0MsRUFBT3UvQyxLQUFPMThCLEVBQU9sdEIsS0FBSyxFQUFFLEVBQ25CK3BELEVBQ1RoQixFQUFRcGxELEtBQUt1cEIsRUFBT2x0QixLQUFLLEVBQUUsQ0FBQyxFQUU1QitvRCxFQUFRcGxELEtBQUt5bEQsRUFBeUJsOEIsQ0FBTSxDQUFDLEdBR2pEN2lCLEVBQU8wK0MsUUFBVUEsRUFBUS9vRCxLQUFLLEVBQUUsRUFDekJxSyxDQUNULEdBSXVCeStDLENBQUksRUFFekIsR0FBS1ksRUFBS3JpRCxNQVNSLE1BQU8sQ0FBRXloRCxLQUFBQSxFQUFNVyxPQUFRLENBQUEsQ0FBSyxFQVRiLENBQ2ZycEQsSUFBSStwRCxFQUFVVCxFQUFLWCxRQUNmcUIsRUFBY1YsRUFBS1gsUUFLdkIsT0FKSVcsRUFBS0UsT0FDUE8sR0FBVyxJQUFNVCxFQUFLRSxLQUN0QlEsR0FBZSxNQUFRVixFQUFLRSxNQUV2QixDQUFFZCxLQUFNcUIsRUFBU0MsWUFBQUEsRUFBYVgsT0FBUSxDQUFBLENBQUksQ0FDckQsQ0FHQSxDQXlCQSxTQUFTVCxFQUFXdGtELEVBQUswdkIsR0FDdkJoMEIsSUFBSWlxRCxFQUFNLEVBQ1YsSUFBS2pxRCxJQUFJSSxFQUFJLEVBQUdBLEVBQUlrRSxFQUFJM0UsT0FBUVMsQ0FBQyxHQUMzQmtFLEVBQUlsRSxLQUFPNHpCLEdBQU9pMkIsQ0FBRyxHQUUzQixPQUFPQSxDQUNULENBMEZBQyxHQUFpQixDQUNmQyxtQkFsQ0YsU0FBNkJDLEdBQzNCLElBQU1DLEVBQVksR0FPbEIsR0FMNEJqL0MsS0FBQUEsSUFBeEJnL0MsRUFBV0UsV0FDYkQsRUFBVTltRCxLQUFLNm1ELEVBQVdFLFFBQVEsRUFDbENELEVBQVU5bUQsS0FBSyxHQUFHLEdBR0k2SCxLQUFBQSxJQUFwQmcvQyxFQUFXMUIsS0FBb0IsQ0FDakMxb0QsSUFBSTBvRCxFQUFPNkIsU0FBU0gsRUFBVzFCLElBQUksRUFDbkMsSUFBTThCLEVBQVUvQixFQUFjQyxDQUFJLEVBR2hDQSxFQURFOEIsRUFBUXpCLE9BQ0h5QixFQUFROUIsS0FHUSxDQUFBLEtBRGpCK0IsRUFBVXJCLEVBQWNvQixFQUFROUIsSUFBSSxHQUM5QlcsV0FDQ29CLEVBQVFULGVBRVpJLEVBQVcxQixLQUd0QjJCLEVBQVU5bUQsS0FBS21sRCxDQUFJLENBQ3ZCLENBT0UsTUFMK0IsVUFBM0IsT0FBTzBCLEVBQVdNLE1BQWdELFVBQTNCLE9BQU9OLEVBQVdNLE9BQzNETCxFQUFVOW1ELEtBQUssR0FBRyxFQUNsQjhtRCxFQUFVOW1ELEtBQUt1QyxPQUFPc2tELEVBQVdNLElBQUksQ0FBQyxHQUdqQ0wsRUFBVTFxRCxPQUFTMHFELEVBQVV6cUQsS0FBSyxFQUFFLEVBQUl3TCxLQUFBQSxHQUsvQ3UvQywyQkExREYsU0FBcUNQLEVBQVlRLEdBb0IvQyxPQW5CTXplLEVBQWUsQ0FBQSxJQUFSeWUsRUFBZUMsT0FBU04sU0FDWG4vQyxLQUFBQSxJQUF0QmcvQyxFQUFXVSxTQUNiVixFQUFXVSxPQUFTM2UsRUFBS2llLEVBQVdVLE1BQU0sR0FFaEIxL0MsS0FBQUEsSUFBeEJnL0MsRUFBV0UsV0FDYkYsRUFBV0UsU0FBV25lLEVBQUtpZSxFQUFXRSxRQUFRLEdBRXhCbC9DLEtBQUFBLElBQXBCZy9DLEVBQVcxQixPQUNiMEIsRUFBVzFCLEtBQU92YyxFQUFLaWUsRUFBVzFCLElBQUksR0FFaEJ0OUMsS0FBQUEsSUFBcEJnL0MsRUFBV3BvRCxPQUNib29ELEVBQVdwb0QsS0FBT21xQyxFQUFLaWUsRUFBV3BvRCxJQUFJLEdBRWZvSixLQUFBQSxJQUFyQmcvQyxFQUFXVyxRQUNiWCxFQUFXVyxNQUFRNWUsRUFBS2llLEVBQVdXLEtBQUssR0FFZDMvQyxLQUFBQSxJQUF4QmcvQyxFQUFXbkQsV0FDYm1ELEVBQVduRCxTQUFXOWEsRUFBS2llLEVBQVduRCxRQUFRLEdBRXpDbUQsQ0FDVCxFQXNDRVksa0JBdEZGLFNBQTRCanNELEdBRzFCLElBRkEsSUFBTWtMLEVBQVMsR0FFUmxMLEVBQU1ZLFFBQ1gsR0FBSVosRUFBTXVMLE1BQU0rOUMsQ0FBSSxFQUNsQnRwRCxFQUFRQSxFQUFNeUIsUUFBUTZuRCxFQUFNLEVBQUUsT0FDekIsR0FBSXRwRCxFQUFNdUwsTUFBTWcrQyxDQUFJLEVBQ3pCdnBELEVBQVFBLEVBQU15QixRQUFROG5ELEVBQU0sR0FBRyxPQUMxQixHQUFJdnBELEVBQU11TCxNQUFNaStDLENBQUksRUFDekJ4cEQsRUFBUUEsRUFBTXlCLFFBQVErbkQsRUFBTSxHQUFHLEVBQy9CdCtDLEVBQU9NLElBQUcsT0FDTCxHQUFjLE1BQVZ4TCxHQUEyQixPQUFWQSxFQUMxQkEsRUFBUSxPQUNILENBQ0wsSUFBTWtzRCxFQUFLbHNELEVBQU11TCxNQUFNaytDLENBQUksRUFDM0IsR0FBSXlDLENBQUFBLEVBS0YsTUFBTSxJQUFJcGtELE1BQU0sa0NBQWtDLEVBSjVDcW1CLEVBQUkrOUIsRUFBRyxHQUNibHNELEVBQVFBLEVBQU13QixNQUFNMnNCLEVBQUV2dEIsTUFBTSxFQUM1QnNLLEVBQU8xRyxLQUFLMnBCLENBQUMsQ0FJckIsQ0FFRSxPQUFPampCLEVBQU9ySyxLQUFLLEVBQUUsQ0FDdkIsRUE4REU2b0QsY0FBQUEsRUFDQVcsY0FBQUEsRUFDQUoseUJBQUFBLENBQ0YsK0NFalBBLElBQU1rQyxFQUFXLDhEQUNYQyxFQUFVLG9FQUVoQixTQUFTQyxFQUFVQyxHQUNqQixNQUFzQyxXQUEvQixPQUFPQSxFQUFhQyxPQUF1QkQsRUFBYUMsT0FBdUQsUUFBOUN4bEQsT0FBT3VsRCxFQUFhUCxNQUFNLEVBQUVockQsWUFBVyxDQUNqSCxDQUVBLFNBQVN5ckQsRUFBV25CLEdBS2xCLE9BSktBLEVBQVcxQixPQUNkMEIsRUFBV25qRCxNQUFRbWpELEVBQVduakQsT0FBUywrQkFHbENtakQsQ0FDVCxDQUVBLFNBQVNvQixFQUFlcEIsR0FDdEIsSUFBTWtCLEVBQXFELFVBQTVDeGxELE9BQU9za0QsRUFBV1UsTUFBTSxFQUFFaHJELFlBQVcsRUFnQnBELE9BYklzcUQsRUFBV00sUUFBVVksRUFBUyxJQUFNLEtBQTJCLEtBQXBCbEIsRUFBV00sT0FDeEROLEVBQVdNLEtBQU90L0MsS0FBQUEsR0FJZmcvQyxFQUFXcG9ELE9BQ2Rvb0QsRUFBV3BvRCxLQUFPLEtBT2Jvb0QsQ0FDVCxDQXFHQSxJQUFNcUIsRUFBTyxDQUNYWCxPQUFRLE9BQ1JZLFdBQVksQ0FBQSxFQUNabDlDLE1BQU8rOEMsRUFDUDVNLFVBQVc2TSxDQUNiLEVBU00vaUMsRUFBSyxDQUNUcWlDLE9BQVEsS0FDUlksV0FBWSxDQUFBLEVBQ1psOUMsTUFwSEYsU0FBa0I2OEMsR0FTaEIsT0FQQUEsRUFBYUMsT0FBU0YsRUFBU0MsQ0FBWSxFQUczQ0EsRUFBYU0sY0FBZ0JOLEVBQWFycEQsTUFBUSxNQUFRcXBELEVBQWFOLE1BQVEsSUFBTU0sRUFBYU4sTUFBUSxJQUMxR00sRUFBYXJwRCxLQUFPb0osS0FBQUEsRUFDcEJpZ0QsRUFBYU4sTUFBUTMvQyxLQUFBQSxFQUVkaWdELENBQ1QsRUEyR0UxTSxVQXpHRixTQUFzQjBNLEdBYXBCLElBQ1NycEQsRUFBTStvRCxFQVNmLE9BckJJTSxFQUFhWCxRQUFVVSxFQUFTQyxDQUFZLEVBQUksSUFBTSxLQUE2QixLQUF0QkEsRUFBYVgsT0FDNUVXLEVBQWFYLEtBQU90L0MsS0FBQUEsR0FJYSxXQUEvQixPQUFPaWdELEVBQWFDLFNBQ3RCRCxFQUFhUCxPQUFVTyxFQUFhQyxPQUFTLE1BQVEsS0FDckRELEVBQWFDLE9BQVNsZ0QsS0FBQUEsR0FJcEJpZ0QsRUFBYU0sZUFDVCxDQUFDM3BELEVBQU0rb0QsR0FBU00sRUFBYU0sYUFBYTFwRCxNQUFNLEdBQUcsRUFDekRvcEQsRUFBYXJwRCxLQUFRQSxHQUFpQixNQUFUQSxFQUFlQSxFQUFPb0osS0FBQUEsRUFDbkRpZ0QsRUFBYU4sTUFBUUEsRUFDckJNLEVBQWFNLGFBQWV2Z0QsS0FBQUEsR0FJOUJpZ0QsRUFBYXBFLFNBQVc3N0MsS0FBQUEsRUFFakJpZ0QsQ0FDVCxDQWtGQSxFQXVCQSxJQUFNTyxFQUFVLENBQ2RILEtBQUFBLEVBQ0FJLE1BckNZLENBQ1pmLE9BQVEsUUFDUlksV0FBWUQsRUFBS0MsV0FDakJsOUMsTUFBTys4QyxFQUNQNU0sVUFBVzZNLENBQ2IsRUFpQ0UvaUMsR0FBQUEsRUFDQXFqQyxJQXpCVSxDQUNWaEIsT0FBUSxNQUNSWSxXQUFZampDLEVBQUdpakMsV0FDZmw5QyxNQUFPaWEsRUFBR2phLE1BQ1Ztd0MsVUFBV2wyQixFQUFHazJCLFNBQ2hCLEVBcUJFb04sSUFuQlUsQ0FDVmpCLE9BQVEsTUFDUnQ4QyxNQTNGRixTQUFtQnc5QyxFQUFlaHRELEdBQ2hDLElBU1FpdEQsRUFDQUMsRUFVUixPQXBCS0YsRUFBY2hxRCxNQUliNmlELEVBQVVtSCxFQUFjaHFELEtBQUtzSSxNQUFNNmdELENBQU8sSUFFeENMLEVBQVM5ckQsRUFBUThyRCxRQUFVa0IsRUFBY2xCLFFBQVUsTUFDekRrQixFQUFjRyxJQUFNdEgsRUFBUSxHQUFHL2tELFlBQVcsRUFDMUNrc0QsRUFBY0ksSUFBTXZILEVBQVEsR0FDdEJvSCxFQUFlbkIsRUFBSCxLQUFhOXJELEVBQVFtdEQsS0FBT0gsRUFBY0csS0FDdERELEVBQWdCTixFQUFRSyxHQUM5QkQsRUFBY2hxRCxLQUFPb0osS0FBQUEsRUFFakI4Z0QsSUFDRkYsRUFBZ0JFLEVBQWMxOUMsTUFBTXc5QyxFQUFlaHRELENBQU8sSUFHNURndEQsRUFBYy9rRCxNQUFRK2tELEVBQWMva0QsT0FBUyx5QkFoQjdDK2tELEVBQWMva0QsTUFBUSx3QkFtQmpCK2tELENBQ1QsRUFzRUVyTixVQXBFRixTQUF1QnFOLEVBQWVodEQsR0FDcEMsSUFBTThyRCxFQUFTOXJELEVBQVE4ckQsUUFBVWtCLEVBQWNsQixRQUFVLE1BQ25EcUIsRUFBTUgsRUFBY0csSUFBSXJzRCxZQUFXLEVBQ25DbXNELEVBQWVuQixFQUFILEtBQWE5ckQsRUFBUW10RCxLQUFPQSxHQUN4Q0QsRUFBZ0JOLEVBQVFLLEdBTXhCSSxFQUhKTCxFQURFRSxFQUNjQSxFQUFjdk4sVUFBVXFOLEVBQWVodEQsQ0FBTyxFQUcxQ2d0RCxFQUNoQkksRUFBTUosRUFBY0ksSUFJMUIsT0FIQUMsRUFBY3JxRCxRQUFVbXFELEdBQU9udEQsRUFBUW10RCxPQUFPQyxFQUU5Q3B0RCxFQUFRc3RELFdBQWEsQ0FBQSxFQUNkRCxDQUNULEVBcURFRSxjQUFlLENBQUEsQ0FDakIsRUFlRUMsV0FiYyxDQUNkMUIsT0FBUSxXQUNSdDhDLE1BeERGLFNBQXVCdzlDLEVBQWVodEQsR0FTcEMsT0FQQXl0RCxFQUFlQyxLQUFPRCxFQUFlTCxJQUNyQ0ssRUFBZUwsSUFBTWhoRCxLQUFBQSxFQUVoQnBNLEVBQVEydEQsVUFBY0YsRUFBZUMsTUFBU3hCLEVBQVM1cUQsS0FBS21zRCxFQUFlQyxJQUFJLElBQ2xGRCxFQUFleGxELE1BQVF3bEQsRUFBZXhsRCxPQUFTLHNCQUcxQ3dsRCxDQUNULEVBK0NFOU4sVUE3Q0YsU0FBMkI4TixHQUN6QixJQUFNVCxFQUFnQlMsRUFHdEIsT0FEQVQsRUFBY0ksS0FBT0ssRUFBZUMsTUFBUSxJQUFJNXNELFlBQVcsRUFDcERrc0QsQ0FDVCxFQXlDRU8sY0FBZSxDQUFBLENBQ2pCLENBU0EsU0FFQUssR0FBaUJoQiw2QkN6TGpCLEdBQU0sQ0FBRXhDLGNBQUFBLEVBQWVYLGNBQUFBLEVBQWV1QyxrQkFBQUEsRUFBbUJiLG1CQUFBQSxFQUFvQlEsMkJBQUFBLENBQTBCLEVBQUs5OEMsR0FBQSxFQUN0Rys5QyxFQUFVOWxCLEdBQUEsRUE2S1YrbUIsRUFBWTV0RCxNQUFNMkQsS0FBSyxDQUFFakQsT0FBUSxHQUFHLEVBQUksQ0FBQ210RCxFQUFJbjdDLElBQU0sOEJBQThCclIsS0FBS3dGLE9BQU9xbkIsYUFBYXhiLENBQUMsQ0FBQyxDQUFDLEVBYTdHbzdDLEVBQVksOEhBcUdsQixJQUFNQyxFQUFVLENBQ2RwQixRQUFBQSxFQUNBenBELFVBL1JGLFNBQW9COHFELEVBQUtqdUQsR0FNdkIsTUFMbUIsVUFBZixPQUFPaXVELEVBQ1RBLEVBQU10TyxFQUFVbndDLEVBQU15K0MsRUFBS2p1RCxDQUFPLEVBQUdBLENBQU8sRUFDcEIsVUFBZixPQUFPaXVELElBQ2hCQSxFQUFNeitDLEVBQU1td0MsRUFBVXNPLEVBQUtqdUQsQ0FBTyxFQUFHQSxDQUFPLEdBRXZDaXVELENBQ1QsRUF5UkVyckQsUUF2UkYsU0FBa0JzckQsRUFBU0MsRUFBYW51RCxHQUd0QyxPQUZNb3VELEVBQW9CaHVELE9BQU9DLE9BQU8sQ0FBRXlyRCxPQUFRLE1BQU0sRUFBSTlyRCxDQUFPLEVBRTVEMi9DLEVBRFUwTyxFQUFrQjcrQyxFQUFNMCtDLEVBQVNFLENBQWlCLEVBQUc1K0MsRUFBTTIrQyxFQUFhQyxDQUFpQixFQUFHQSxFQUFtQixDQUFBLENBQUksRUFDekcsQ0FBRSxHQUFHQSxFQUFtQmQsV0FBWSxDQUFBLENBQU0sQ0FBQSxDQUN2RSxFQW9SRWUsa0JBQUFBLEVBQ0FsUyxNQXZORixTQUFnQm1TLEVBQU1DLEVBQU12dUQsR0FlMUIsTUFkb0IsVUFBaEIsT0FBT3N1RCxHQUNUQSxFQUFPL0MsU0FBUytDLENBQUksRUFDcEJBLEVBQU8zTyxFQUFVZ00sRUFBMkJuOEMsRUFBTTgrQyxFQUFNdHVELENBQU8sRUFBRyxDQUFBLENBQUksRUFBRyxDQUFFLEdBQUdBLEVBQVNzdEQsV0FBWSxDQUFBLENBQU0sQ0FBQSxHQUNoRixVQUFoQixPQUFPZ0IsSUFDaEJBLEVBQU8zTyxFQUFVZ00sRUFBMkIyQyxFQUFNLENBQUEsQ0FBSSxFQUFHLENBQUUsR0FBR3R1RCxFQUFTc3RELFdBQVksQ0FBQSxDQUFNLENBQUEsR0FHdkUsVUFBaEIsT0FBT2lCLEdBQ1RBLEVBQU9oRCxTQUFTZ0QsQ0FBSSxFQUNwQkEsRUFBTzVPLEVBQVVnTSxFQUEyQm44QyxFQUFNKytDLEVBQU12dUQsQ0FBTyxFQUFHLENBQUEsQ0FBSSxFQUFHLENBQUUsR0FBR0EsRUFBU3N0RCxXQUFZLENBQUEsQ0FBTSxDQUFBLEdBQ2hGLFVBQWhCLE9BQU9pQixJQUNoQkEsRUFBTzVPLEVBQVVnTSxFQUEyQjRDLEVBQU0sQ0FBQSxDQUFJLEVBQUcsQ0FBRSxHQUFHdnVELEVBQVNzdEQsV0FBWSxDQUFBLENBQU0sQ0FBQSxHQUdwRmdCLEVBQUt4dEQsZ0JBQWtCeXRELEVBQUt6dEQsWUFBVyxDQUNoRCxFQXdNRTYrQyxVQUFBQSxFQUNBbndDLE1BQUFBLENBQ0YsRUF0UkEsU0FBUzYrQyxFQUFtQnhqRCxFQUFNbEgsRUFBVTNELEVBQVN3dUQsR0FDbkQsSUFBTXAzQyxFQUFTLEdBd0RmLE9BdkRLbzNDLElBQ0gzakQsRUFBTzJFLEVBQU1td0MsRUFBVTkwQyxFQUFNN0ssQ0FBTyxFQUFHQSxDQUFPLEVBQzlDMkQsRUFBVzZMLEVBQU1td0MsRUFBVWg4QyxFQUFVM0QsQ0FBTyxFQUFHQSxDQUFPLEdBSXBELEVBRkpBLEVBQVVBLEdBQVcsSUFFUjJ0RCxVQUFZaHFELEVBQVNtb0QsUUFDaEMxMEMsRUFBTzAwQyxPQUFTbm9ELEVBQVNtb0QsT0FFekIxMEMsRUFBT2swQyxTQUFXM25ELEVBQVMybkQsU0FDM0JsMEMsRUFBT3N5QyxLQUFPL2xELEVBQVMrbEQsS0FDdkJ0eUMsRUFBT3MwQyxLQUFPL25ELEVBQVMrbkQsS0FDdkJ0MEMsRUFBT3BVLEtBQU9ncEQsRUFBa0Jyb0QsRUFBU1gsTUFBUSxFQUFFLEVBQ25Eb1UsRUFBTzIwQyxNQUFRcG9ELEVBQVNvb0QsUUFFRTMvQyxLQUFBQSxJQUF0QnpJLEVBQVMybkQsVUFBNENsL0MsS0FBQUEsSUFBbEJ6SSxFQUFTK2xELE1BQXdDdDlDLEtBQUFBLElBQWxCekksRUFBUytuRCxNQUU3RXQwQyxFQUFPazBDLFNBQVczbkQsRUFBUzJuRCxTQUMzQmwwQyxFQUFPc3lDLEtBQU8vbEQsRUFBUytsRCxLQUN2QnR5QyxFQUFPczBDLEtBQU8vbkQsRUFBUytuRCxLQUN2QnQwQyxFQUFPcFUsS0FBT2dwRCxFQUFrQnJvRCxFQUFTWCxNQUFRLEVBQUUsRUFDbkRvVSxFQUFPMjBDLE1BQVFwb0QsRUFBU29vRCxRQUVuQnBvRCxFQUFTWCxNQVFvQixNQUE1QlcsRUFBU1gsS0FBS3BCLE9BQU8sQ0FBQyxFQUN4QndWLEVBQU9wVSxLQUFPZ3BELEVBQWtCcm9ELEVBQVNYLElBQUksR0FFdEJvSixLQUFBQSxJQUFsQnZCLEVBQUt5Z0QsVUFBd0NsL0MsS0FBQUEsSUFBZHZCLEVBQUs2K0MsTUFBb0N0OUMsS0FBQUEsSUFBZHZCLEVBQUs2Z0QsTUFBd0I3Z0QsRUFBSzdILEtBRXJGNkgsRUFBSzdILEtBR2ZvVSxFQUFPcFUsS0FBTzZILEVBQUs3SCxLQUFLekIsTUFBTSxFQUFHc0osRUFBSzdILEtBQUtvUyxZQUFZLEdBQUcsRUFBSSxDQUFDLEVBQUl6UixFQUFTWCxLQUY1RW9VLEVBQU9wVSxLQUFPVyxFQUFTWCxLQUZ2Qm9VLEVBQU9wVSxLQUFPLElBQU1XLEVBQVNYLEtBTS9Cb1UsRUFBT3BVLEtBQU9ncEQsRUFBa0I1MEMsRUFBT3BVLElBQUksR0FFN0NvVSxFQUFPMjBDLE1BQVFwb0QsRUFBU29vRCxRQW5CeEIzMEMsRUFBT3BVLEtBQU82SCxFQUFLN0gsS0FDSW9KLEtBQUFBLElBQW5CekksRUFBU29vRCxNQUNYMzBDLEVBQU8yMEMsTUFBUXBvRCxFQUFTb29ELE1BRXhCMzBDLEVBQU8yMEMsTUFBUWxoRCxFQUFLa2hELE9Ba0J4QjMwQyxFQUFPazBDLFNBQVd6Z0QsRUFBS3lnRCxTQUN2QmwwQyxFQUFPc3lDLEtBQU83K0MsRUFBSzYrQyxLQUNuQnR5QyxFQUFPczBDLEtBQU83Z0QsRUFBSzZnRCxNQUVyQnQwQyxFQUFPMDBDLE9BQVNqaEQsRUFBS2loRCxRQUd2QjEwQyxFQUFPNndDLFNBQVd0a0QsRUFBU3NrRCxTQUVwQjd3QyxDQUNULENBb0JBLFNBQVN1b0MsRUFBVzhPLEVBQU9qbUQsR0FDekIsSUFBTTRpRCxFQUFhLENBQ2pCMUIsS0FBTStFLEVBQU0vRSxLQUNab0MsT0FBUTJDLEVBQU0zQyxPQUNkUixTQUFVbUQsRUFBTW5ELFNBQ2hCSSxLQUFNK0MsRUFBTS9DLEtBQ1oxb0QsS0FBTXlyRCxFQUFNenJELEtBQ1orb0QsTUFBTzBDLEVBQU0xQyxNQUNib0IsSUFBS3NCLEVBQU10QixJQUNYQyxJQUFLcUIsRUFBTXJCLElBQ1hNLEtBQU1lLEVBQU1mLEtBQ1p6RixTQUFVd0csRUFBTXhHLFNBQ2hCeUcsVUFBV0QsRUFBTUMsVUFDakIvQixhQUFjOEIsRUFBTTlCLGFBQ3BCTCxPQUFRbUMsRUFBTW5DLE9BQ2Rya0QsTUFBTyxFQUNYLEVBQ1FqSSxFQUFVSSxPQUFPQyxPQUFPLEdBQUltSSxDQUFJLEVBQ2hDNmlELEVBQVksR0FHWjZCLEVBQWdCTixHQUFTNXNELEVBQVE4ckQsUUFBVVYsRUFBV1UsUUFBVSxJQUFJaHJELFlBQWEsR0FxQmpGNnRELEdBbEJGekIsR0FBaUJBLEVBQWN2TixXQUFXdU4sRUFBY3ZOLFVBQVV5TCxFQUFZcHJELENBQU8sRUFFakVvTSxLQUFBQSxJQUFwQmcvQyxFQUFXcG9ELE9BQ1JoRCxFQUFRc3RELFdBT1hsQyxFQUFXcG9ELEtBQU91b0QsU0FBU0gsRUFBV3BvRCxJQUFJLEdBTjFDb29ELEVBQVdwb0QsS0FBTzZvRCxPQUFPVCxFQUFXcG9ELElBQUksRUFFZG9KLEtBQUFBLElBQXRCZy9DLEVBQVdVLFNBQ2JWLEVBQVdwb0QsS0FBT29vRCxFQUFXcG9ELEtBQUtDLE1BQU0sS0FBSyxFQUFFckMsS0FBSyxHQUFHLEtBT25DLFdBQXRCWixFQUFRMHVELFdBQTBCdEQsRUFBV1UsUUFDL0NULEVBQVU5bUQsS0FBSzZtRCxFQUFXVSxPQUFRLEdBQUcsRUFHckJYLEVBQW1CQyxDQUFVLEdBWS9DLEdBWGtCaC9DLEtBQUFBLElBQWR1aUQsSUFDd0IsV0FBdEIzdUQsRUFBUTB1RCxXQUNWckQsRUFBVTltRCxLQUFLLElBQUksRUFHckI4bUQsRUFBVTltRCxLQUFLb3FELENBQVMsRUFFcEJ2RCxFQUFXcG9ELE9BQXNDLE1BQTlCb29ELEVBQVdwb0QsS0FBS3BCLE9BQU8sQ0FBQyxHQUM3Q3lwRCxFQUFVOW1ELEtBQUssR0FBRyxFQUdFNkgsS0FBQUEsSUFBcEJnL0MsRUFBV3BvRCxLQUFvQixDQUNqQ2hDLElBQUlrdEIsRUFBSWs5QixFQUFXcG9ELEtBRWRoRCxFQUFRNHVELGNBQWtCMUIsR0FBa0JBLEVBQWMwQixlQUM3RDFnQyxFQUFJODlCLEVBQWtCOTlCLENBQUMsR0FHUDloQixLQUFBQSxJQUFkdWlELElBQ0Z6Z0MsRUFBSUEsRUFBRTFzQixRQUFRLFNBQVUsTUFBTSxHQUdoQzZwRCxFQUFVOW1ELEtBQUsycEIsQ0FBQyxDQUNwQixDQVNFLE9BUHlCOWhCLEtBQUFBLElBQXJCZy9DLEVBQVdXLE9BQ2JWLEVBQVU5bUQsS0FBSyxJQUFLNm1ELEVBQVdXLEtBQUssRUFHVjMvQyxLQUFBQSxJQUF4QmcvQyxFQUFXbkQsVUFDYm9ELEVBQVU5bUQsS0FBSyxJQUFLNm1ELEVBQVduRCxRQUFRLEVBRWxDb0QsRUFBVXpxRCxLQUFLLEVBQUUsQ0FDMUIsQ0FpQkEsU0FBUzRPLEVBQU95K0MsRUFBS3psRCxHQUNuQixJQUFNeEksRUFBVUksT0FBT0MsT0FBTyxHQUFJbUksQ0FBSSxFQUNoQ3FtRCxFQUFTLENBQ2IvQyxPQUFRMS9DLEtBQUFBLEVBQ1JrL0MsU0FBVWwvQyxLQUFBQSxFQUNWczlDLEtBQU0sR0FDTmdDLEtBQU10L0MsS0FBQUEsRUFDTnBKLEtBQU0sR0FDTitvRCxNQUFPMy9DLEtBQUFBLEVBQ1A2N0MsU0FBVTc3QyxLQUFBQSxDQUNkLEVBQ1EwaUQsRUFBbUMsQ0FBQSxJQUFyQmIsRUFBSTNqRCxRQUFRLEdBQUcsRUFDbkN0SixJQUFJK3RELEVBQU8sQ0FBQSxFQUdMbEosR0FGOEJvSSxFQUFWLFdBQXRCanVELEVBQVEwdUQsV0FBK0IxdUQsRUFBUThyRCxPQUFTOXJELEVBQVE4ckQsT0FBUyxJQUFNLElBQU0sS0FBT21DLEVBRWhGQSxHQUFJM2lELE1BQU15aUQsQ0FBUyxFQUVuQyxHQUFJbEksRUFBUyxDQUVYZ0osRUFBTy9DLE9BQVNqRyxFQUFRLEdBQ3hCZ0osRUFBT3ZELFNBQVd6RixFQUFRLEdBQzFCZ0osRUFBT25GLEtBQU83RCxFQUFRLEdBQ3RCZ0osRUFBT25ELEtBQU90K0IsU0FBU3k0QixFQUFRLEdBQUksRUFBRSxFQUNyQ2dKLEVBQU83ckQsS0FBTzZpRCxFQUFRLElBQU0sR0FDNUJnSixFQUFPOUMsTUFBUWxHLEVBQVEsR0FDdkJnSixFQUFPNUcsU0FBV3BDLEVBQVEsR0FHdEJ4NUIsTUFBTXdpQyxFQUFPbkQsSUFBSSxJQUNuQm1ELEVBQU9uRCxLQUFPN0YsRUFBUSxJQUVwQmdKLEVBQU9uRixPQUNIc0YsRUFBYXZGLEVBQWNvRixFQUFPbkYsSUFBSSxFQUkxQ3FGLEVBSHdCLENBQUEsSUFBdEJDLEVBQVdqRixRQUNQa0YsRUFBYTdFLEVBQWM0RSxFQUFXdEYsSUFBSSxFQUNoRG1GLEVBQU9uRixLQUFPdUYsRUFBV3ZGLEtBQUs1b0QsWUFBVyxFQUNsQ211RCxFQUFXNUUsU0FFbEJ3RSxFQUFPbkYsS0FBT3NGLEVBQVd0RixLQUNsQixDQUFBLElBTVRtRixFQUFPSCxVQUhhdGlELEtBQUFBLElBQWxCeWlELEVBQU8vQyxRQUE0QzEvQyxLQUFBQSxJQUFwQnlpRCxFQUFPdkQsVUFBMENsL0MsS0FBQUEsSUFBaEJ5aUQsRUFBT25GLE1BQXNDdDlDLEtBQUFBLElBQWhCeWlELEVBQU9uRCxNQUF1Q3QvQyxLQUFBQSxJQUFqQnlpRCxFQUFPOUMsT0FBd0I4QyxFQUFPN3JELEtBRXZJb0osS0FBQUEsSUFBbEJ5aUQsRUFBTy9DLE9BQ0csV0FDVTEvQyxLQUFBQSxJQUFwQnlpRCxFQUFPNUcsU0FDRyxXQUVBLE1BTkEsZ0JBVWpCam9ELEVBQVEwdUQsV0FBbUMsV0FBdEIxdUQsRUFBUTB1RCxXQUEwQjF1RCxFQUFRMHVELFlBQWNHLEVBQU9ILFlBQ3RGRyxFQUFPNW1ELE1BQVE0bUQsRUFBTzVtRCxPQUFTLGdCQUFrQmpJLEVBQVEwdUQsVUFBWSxlQXZCdkUsSUEyQk14QixFQUFnQk4sR0FBUzVzRCxFQUFROHJELFFBQVUrQyxFQUFPL0MsUUFBVSxJQUFJaHJELFlBQWEsR0FHbkYsR0FBSSxFQUFDZCxFQUFRa3ZELGdCQUFvQmhDLEdBQWtCQSxFQUFjZ0MsaUJBRTNETCxFQUFPbkYsT0FBUzFwRCxFQUFRMHNELFlBQWVRLEdBQWlCQSxFQUFjUixhQUF5QixDQUFBLElBQVRxQyxJQTVFdEU1b0QsSUFDeEJuRixJQUFJcWpCLEVBQ0osSUFBS3JqQixJQUFJSSxFQUFJLEVBQUdtRSxFQUFNWSxFQUFNeEYsT0FBUVMsRUFBSW1FLEVBQUssRUFBRW5FLEVBRTdDLEdBQVcsS0FEWGlqQixFQUFPbGUsRUFBTTRuQixXQUFXM3NCLENBQUMsSUFDUHlzRCxFQUFVeHBDLEdBQzFCLE9BQU8sQ0FJYixHQW1Fa0l3cUMsRUFBT25GLElBQUksRUFFckksSUFDRW1GLEVBQU9uRixLQUFPeUYsSUFBSUMsY0FBY1AsRUFBT25GLEtBQUs1b0QsWUFBYSxDQUFBLENBR25FLENBRlUsTUFBTzBMLEdBQ1BxaUQsRUFBTzVtRCxNQUFRNG1ELEVBQU81bUQsT0FBUyxxREFBdUR1RSxDQUNoRyxDQUtTMGdELEdBQW9DQSxFQUFjSyxnQkFDakR1QixHQUFpQzFpRCxLQUFBQSxJQUFsQnlpRCxFQUFPL0MsU0FDeEIrQyxFQUFPL0MsT0FBU1AsU0FBU3NELEVBQU8vQyxNQUFNLEdBRXBDZ0QsR0FBK0IxaUQsS0FBQUEsSUFBaEJ5aUQsRUFBT25GLE9BQ3hCbUYsRUFBT25GLEtBQU82QixTQUFTc0QsRUFBT25GLElBQUksR0FFaENtRixFQUFPN3JELE9BQ1Q2ckQsRUFBTzdyRCxLQUFPNm9ELE9BQU9OLFNBQVNzRCxFQUFPN3JELElBQUksQ0FBQyxHQUV4QzZyRCxFQUFPNUcsV0FDVDRHLEVBQU81RyxTQUFXb0gsVUFBVWp6QyxtQkFBbUJ5eUMsRUFBTzVHLFFBQVEsQ0FBQyxJQUsvRGlGLEdBQWlCQSxFQUFjMTlDLE9BQ2pDMDlDLEVBQWMxOUMsTUFBTXEvQyxFQUFRN3VELENBQU8sQ0FFekMsTUFDSTZ1RCxFQUFPNW1ELE1BQVE0bUQsRUFBTzVtRCxPQUFTLHlCQUVqQyxPQUFPNG1ELENBQ1QsQ0FZQVMsR0FBQXh0RCxRQUFpQmtzRCxFQUNqQnNCLEdBQUF4dEQsUUFBQUUsUUFBeUJnc0QsRUFDekJzQixHQUFBeHRELFFBQUFrc0QsUUFBeUJBLHlEQzdTekI1dEQsT0FBT21lLGVBQWN6YyxFQUFVLGFBQWMsQ0FBRXFFLE1BQU8sQ0FBQSxFQUFNLEVBQzVEckUsRUFBQTZrQyxRQUFrQjdrQyxPQUFlQSxFQUFjNmdDLElBQUE3Z0MsRUFBQW1GLFVBQW9CbkYsTUFBY0EsRUFBWUwsRUFBQUssRUFBQW0vQyxXQUFxQjcwQyxLQUFBQSxFQUNsSCxJQ0RNNmhELEVEQ0ZwSCxFQUFhaDRDLEdBQTZCLEVBRTFDNi9CLEdBREp0dUMsT0FBT21lLGVBQWV6YyxFQUFTLGFBQWMsQ0FBRXNFLFdBQVksQ0FBQSxFQUFNMEYsSUFBSyxXQUFjLE9BQU8rNkMsRUFBVzVGLFVBQWEsQ0FBQSxDQUFFLEVBQ3JHbmEsRUFBNEIsR0FPdEM4ZixHQU5OeG1ELE9BQU9tZSxlQUFlemMsRUFBUyxJQUFLLENBQUVzRSxXQUFZLENBQUEsRUFBTTBGLElBQUssV0FBYyxPQUFPNGlDLEVBQVVqdEMsQ0FBSSxDQUFBLENBQUUsRUFDbEdyQixPQUFPbWUsZUFBZXpjLEVBQVMsTUFBTyxDQUFFc0UsV0FBWSxDQUFBLEVBQU0wRixJQUFLLFdBQWMsT0FBTzRpQyxFQUFVcHBDLEdBQU0sQ0FBQSxDQUFFLEVBQ3RHbEYsT0FBT21lLGVBQWV6YyxFQUFTLFlBQWEsQ0FBRXNFLFdBQVksQ0FBQSxFQUFNMEYsSUFBSyxXQUFjLE9BQU80aUMsRUFBVXpuQyxTQUFZLENBQUEsQ0FBRSxFQUNsSDdHLE9BQU9tZSxlQUFlemMsRUFBUyxNQUFPLENBQUVzRSxXQUFZLENBQUEsRUFBTTBGLElBQUssV0FBYyxPQUFPNGlDLEVBQVUvTCxHQUFNLENBQUEsQ0FBRSxFQUN0R3ZpQyxPQUFPbWUsZUFBZXpjLEVBQVMsT0FBUSxDQUFFc0UsV0FBWSxDQUFBLEVBQU0wRixJQUFLLFdBQWMsT0FBTzRpQyxFQUFVN0wsSUFBTyxDQUFBLENBQUUsRUFDeEd6aUMsT0FBT21lLGVBQWV6YyxFQUFTLFVBQVcsQ0FBRXNFLFdBQVksQ0FBQSxFQUFNMEYsSUFBSyxXQUFjLE9BQU80aUMsRUFBVS9ILE9BQVUsQ0FBQSxDQUFFLEVBQ25GNTNCLEdBQXFDLEdBQ2hFLElBQU13Z0QsRUFBY2hhLEdBQThCLEVBQzVDRixFQUFVRyxHQUEwQixFQUNwQ2dhLEVBQVkvTixHQUFvQixFQUNoQ2dPLEVBQVkzb0IsRUFBNEIsRUFDeEM4YSxFQUFZRixHQUE0QixFQUN4Q04sRUFBYU8sR0FBc0MsRUFDbkR2USxFQUFTeVEsRUFBeUIsRUFDbEM2TixFQUFpQjVOLEdBQ2pCNk4sYUNwQk52dkQsT0FBT21lLGVBQWVveEMsR0FBUyxhQUFjLENBQUV4cEQsTUFBTyxDQUFBLEVBQU0sR0FDdEQ4bkQsRUFBTXAvQyxHQUFtQixHQUMzQndWLEtBQU8sMENBQ1hzckMsR0FBQTN0RCxRQUFrQmlzRCxPRGtCWjJCLEVBQWdCLENBQUN0cUQsRUFBS29NLElBQVUsSUFBSW5KLE9BQU9qRCxFQUFLb00sQ0FBSyxFQUVyRG0rQyxHQURORCxFQUFjdnJDLEtBQU8sYUFDTyxDQUFDLG1CQUFvQixjQUFlLGdCQUMxRHlyQyxFQUFrQixJQUFJeHlDLElBQUksQ0FDNUIsV0FDQSxZQUNBLFFBQ0EsVUFDQSxPQUNBLFNBQ0EsVUFDQSxVQUNBLFVBQ0EsZ0JBQ0EsT0FDQSxNQUNBLFFBQ0gsRUFDS3l5QyxFQUFpQixDQUNuQkMsY0FBZSxHQUNmdnBELE9BQVEsZ0RBQ1JndkMsU0FBVSw4Q0FDVndhLGFBQWMsbURBQ2RDLFdBQVksd0RBQ1pDLFlBQWEsc0VBQ2JDLFlBQWEsb0VBQ2JoSixXQUFZLG9DQUNaaUosZUFBZ0IsMENBQ2hCQyxlQUFnQiwwQ0FDaEI5UixZQUFhLDZDQUNiK1IsZUFBZ0IsK0VBQ2hCQyxNQUFPLDhDQUNQN1EsVUFBVyw4Q0FDWDhRLFVBQVcsb0JBQ2QsRUFDS0MsRUFBb0IsQ0FDdEJwTSxzQkFBdUIsR0FDdkJwVSxpQkFBa0IsR0FDbEJ5Z0IsUUFBUyxvRUFDWixFQUNLQyxFQUFpQixVQThCakJDLEVBQ0ZockQsWUFBWTJDLEVBQU8sSUFDZmQsS0FBSytvQixRQUFVLEdBQ2Yvb0IsS0FBSys0QyxLQUFPLEdBQ1ovNEMsS0FBS29wRCxRQUFVLEdBQ2ZwcEQsS0FBSzIvQyxjQUFnQixJQUFJL3BDLElBQ3pCNVYsS0FBS3FwRCxTQUFXLEdBQ2hCcnBELEtBQUtzcEQsT0FBUyxJQUFJMzJDLElBQ2xCN1IsRUFBT2QsS0FBS2MsS0FBTyxDQUFFLEdBQUdBLEVBQU0sSUFwQ2JvRSxFQW9DZ0NwRSxFQWxDL0MwbEIsRUFBSXRoQixFQUFFMGxCLE9BRU5tUixFQUFxQixDQUFBLEtBQVZ3dEIsRUFESCxPQUFDOXRCLEVBQUt2MkIsRUFBRXlYLE1BQWtDalksS0FBQUEsRUFBUysyQixFQUFHTSxXQUN2QnIzQixLQUFBQSxJQUFWNmtELEVBQXNCLEVBQUlBLEdBQVMsRUFDaEV0WSxFQUFTLE9BQUN1WSxFQUFLLE9BQUNwc0IsRUFBS2w0QixFQUFFeVgsTUFBa0NqWSxLQUFBQSxFQUFTMDRCLEVBQUc2VCxRQUFvQ3VZLEVBQUt0QixFQUM5Ry9QLEVBQWMsT0FBQ3NSLEVBQUt2a0QsRUFBRWl6QyxhQUF5Q3NSLEVBQUt4QixFQUFNM3RELFFBQ3pFLENBQ0gwdEMsYUFBYyxPQUFDMGhCLEVBQUssT0FBQ0MsRUFBS3prRCxFQUFFOGlDLGNBQTBDMmhCLEVBQUtuakMsSUFBK0JrakMsRUFDMUdyYixjQUFlLE9BQUN1YixFQUFLLE9BQUNDLEVBQUsza0QsRUFBRW1wQyxlQUEyQ3diLEVBQUtyakMsSUFBK0JvakMsRUFDNUd6TSxZQUFhLE9BQUMyTSxFQUFLLE9BQUNDLEVBQUs3a0QsRUFBRWk0QyxhQUF5QzRNLEVBQUt2akMsR0FBK0JzakMsRUFBSyxNQUM3R0UsYUFBYyxPQUFDQyxFQUFLLE9BQUNDLEVBQUtobEQsRUFBRThrRCxjQUEwQ0UsRUFBSzFqQyxHQUErQnlqQyxFQUFLLE1BQy9HRSxlQUFnQixPQUFDQyxFQUFLLE9BQUNDLEVBQUtubEQsRUFBRWlsRCxnQkFBNENFLEVBQUs3akMsSUFBK0I0akMsRUFDOUd6dEMsS0FBTXpYLEVBQUV5WCxLQUFPLENBQUUsR0FBR3pYLEVBQUV5WCxLQUFNb2YsU0FBQUEsRUFBVWtWLE9BQUFBLENBQU0sRUFBSyxDQUFFbFYsU0FBQUEsRUFBVWtWLE9BQUFBLENBQVEsRUFDckVxWixhQUFjLE9BQUNDLEVBQUtybEQsRUFBRW9sRCxjQUEwQ0MsRUFBS3JCLEVBQ3JFc0IsU0FBVSxPQUFDQyxFQUFLdmxELEVBQUVzbEQsVUFBc0NDLEVBQUt2QixFQUM3RGhNLEtBQU0sT0FBQ3dOLEVBQUt4bEQsRUFBRWc0QyxPQUFrQ3dOLEVBQ2hEaGYsU0FBVSxPQUFDaWYsRUFBS3psRCxFQUFFd21DLFdBQXNDaWYsRUFDeERyTCxXQUFZLE9BQUNzTCxFQUFLMWxELEVBQUVvNkMsYUFBd0NzTCxFQUM1RDFTLFNBQVUsT0FBQ2tPLEVBQUtsaEQsRUFBRWd6QyxVQUFzQ2tPLEVBQUssTUFDN0R5RSxjQUFlLE9BQUNDLEVBQUs1bEQsRUFBRTJsRCxnQkFBMkNDLEVBQ2xFdlksZUFBZ0IsT0FBQ3dZLEVBQUs3bEQsRUFBRXF0QyxpQkFBNEN3WSxFQUNwRUMsZ0JBQWlCLE9BQUNDLEVBQUsvbEQsRUFBRThsRCxrQkFBNkNDLEVBQ3RFamEsY0FBZSxPQUFDa2EsRUFBS2htRCxFQUFFOHJDLGdCQUEyQ2thLEVBQ2xFQyxXQUFZLE9BQUNDLEVBQUtsbUQsRUFBRWltRCxhQUF3Q0MsRUFDNURqVCxZQUFhQSxDQUNoQixFQVUyRCxFQXBDaEUsSUFBeUJqekMsRUFJZjYyQixFQUVBb2MsRUErQkksQ0FBRXRaLElBQUFBLEVBQUs1cEIsTUFBQUEsQ0FBTyxFQUFHalYsS0FBS2MsS0FBSzZiLEtBRzNCMHVDLEdBRk5yckQsS0FBSzQ5QixNQUFRLElBQUltcUIsRUFBVTNyQixXQUFXLENBQUV3QixNQUFPLEdBQUlmLFNBQVV1ckIsRUFBaUJ2cEIsSUFBQUEsRUFBSzVwQixNQUFBQSxDQUFLLENBQUUsRUFDMUZqVixLQUFLb29DLFFBcWJNQSxJQUNmLEdBQWUsQ0FBQSxJQUFYQSxFQUNBLE9BQU9rakIsRUFDWCxHQUFlNW1ELEtBQUFBLElBQVgwakMsRUFDQSxPQUFPL25DLFFBQ1gsR0FBSStuQyxFQUFPM2hDLEtBQU8yaEMsRUFBT2xvQixNQUFRa29CLEVBQU83bkMsTUFDcEMsT0FBTzZuQyxFQUNYLE1BQU0sSUFBSWpvQyxNQUFNLG1EQUFtRCxDQUN2RSxHQTdiZ0NXLEVBQUtzbkMsTUFBTSxFQUNqQnRuQyxFQUFLa3FELGlCQUN2QmxxRCxFQUFLa3FELGdCQUFrQixDQUFBLEVBQ3ZCaHJELEtBQUtrbkMsT0FBUSxFQUFJeUcsRUFBUXhCLFVBQVcsRUFDcENvZixFQUFheHZELEtBQUtpRSxLQUFNcW9ELEVBQWdCdm5ELEVBQU0sZUFBZSxFQUM3RHlxRCxFQUFheHZELEtBQUtpRSxLQUFNZ3BELEVBQW1CbG9ELEVBQU0sYUFBYyxNQUFNLEVBQ3JFZCxLQUFLd3JELFVBd2FiLFdBQ0ksSUFBTUMsRUFBVyxDQUFFLEdBQUd6ckQsS0FBS2MsSUFBTSxFQUNqQyxJQUFLLElBQU0rSixLQUFPczlDLEVBQ2QsT0FBT3NELEVBQVM1Z0QsR0FDcEIsT0FBTzRnRCxDQUNYLEVBN2E4QzF2RCxLQUFLaUUsSUFBSSxFQUMzQ2MsRUFBS3NvRCxTQW1aakIsV0FDSSxJQUFLLElBQU10bUQsS0FBUTlDLEtBQUtjLEtBQUtzb0QsUUFBUyxDQUNsQyxJQUFNcnFELEVBQVNpQixLQUFLYyxLQUFLc29ELFFBQVF0bUQsR0FDN0IvRCxHQUNBaUIsS0FBSzByRCxVQUFVNW9ELEVBQU0vRCxDQUFNLENBQ3ZDLENBQ0EsRUF4WjhCaEQsS0FBS2lFLElBQUksRUFDL0JBLEtBQUsyckQsaUJBQWtCLEVBQ3ZCM3JELEtBQUs0ckQsc0JBQXVCLEVBQ3hCOXFELEVBQUtvbkMsVUFzWmpCLFNBQTRCMmpCLEdBQ3hCLEdBQUl0ekQsTUFBTUMsUUFBUXF6RCxDQUFJLEVBQ2xCN3JELEtBQUs4ckQsY0FBY0QsQ0FBSSxPQUkzQixJQUFLLElBQU12a0IsS0FEWHRuQyxLQUFLb29DLE9BQU9sb0IsS0FBSyxrREFBa0QsRUFDN0MyckMsRUFBTSxDQUN4QixJQUFNanRCLEVBQU1pdEIsRUFBS3ZrQixHQUNaMUksRUFBSTBJLFVBQ0wxSSxFQUFJMEksUUFBVUEsR0FDbEJ0bkMsS0FBSytyRCxXQUFXbnRCLENBQUcsQ0FDM0IsQ0FDQSxFQWphK0I3aUMsS0FBS2lFLEtBQU1jLEVBQUtvbkMsUUFBUSxFQUN2QixVQUFwQixPQUFPcG5DLEVBQUtvOEMsTUFDWmw5QyxLQUFLZ3NELGNBQWNsckQsRUFBS284QyxJQUFJLEVBa1l4QyxXQUNJLElBQU0rTyxFQUFjanNELEtBQUtjLEtBQUtpb0IsUUFDOUIsR0FBS2tqQyxFQUVMLEdBQUkxekQsTUFBTUMsUUFBUXl6RCxDQUFXLEVBQ3pCanNELEtBQUtrc0QsVUFBVUQsQ0FBVyxPQUUxQixJQUFLLElBQU10b0QsS0FBT3NvRCxFQUNkanNELEtBQUtrc0QsVUFBVUQsRUFBWXRvRCxHQUFNQSxDQUFHLENBQ2hELEVBMVkwQjVILEtBQUtpRSxJQUFJLEVBQzNCYyxFQUFLa3FELGdCQUFrQkssQ0FDL0IsQ0FDSU0sbUJBQ0kzckQsS0FBSytyRCxXQUFXLFFBQVEsQ0FDaEMsQ0FDSUgsd0JBQ0ksR0FBTSxDQUFFcmtCLE1BQUFBLEVBQU8yVixLQUFBQSxFQUFNaEYsU0FBQUEsQ0FBVSxFQUFHbDRDLEtBQUtjLEtBQ3ZDeEgsSUFBSTZ5RCxFQUFpQm5FLEVBQ0osT0FBYjlQLEtBQ0FpVSxFQUFpQixDQUFFLEdBQUduRSxDQUFnQixHQUN2QmhRLEdBQUttVSxFQUFlQyxJQUNuQyxPQUFPRCxFQUFlQyxLQUV0QmxQLEdBQVEzVixHQUNSdm5DLEtBQUtnc0QsY0FBY0csRUFBZ0JBLEVBQWVqVSxHQUFXLENBQUEsQ0FBSyxDQUM5RSxDQUNJbVUsY0FDSSxHQUFNLENBQUVuUCxLQUFBQSxFQUFNaEYsU0FBQUEsQ0FBVSxFQUFHbDRDLEtBQUtjLEtBQ2hDLE9BQVFkLEtBQUtjLEtBQUt1ckQsWUFBNkIsVUFBZixPQUFPblAsRUFBbUJBLEVBQUtoRixJQUFhZ0YsRUFBT3g0QyxLQUFBQSxDQUMzRixDQUNJZ3VDLFNBQVM0WixFQUVULzFDLEdBRUlqZCxJQUFJaVAsRUFDSixHQUEyQixVQUF2QixPQUFPK2pELEdBRVAsR0FBSSxFQURKL2pELEVBQUl2SSxLQUFLdXNELFVBQVVELENBQVksR0FFM0IsTUFBTSxJQUFJbnNELG9DQUFvQ21zRCxJQUFlLENBQUMsTUFHbEUvakQsRUFBSXZJLEtBQUsyeUMsUUFBUTJaLENBQVksRUFFM0JwZ0IsRUFBUTNqQyxFQUFFZ08sQ0FBSSxFQUdwQixNQUZNLFdBQVloTyxJQUNkdkksS0FBS3VxQixPQUFTaGlCLEVBQUVnaUIsUUFDYjJoQixDQUNmLENBQ0l5RyxRQUFRLzVCLEVBQVE0ekMsR0FDTmhkLEVBQU14dkMsS0FBS3lzRCxXQUFXN3pDLEVBQVE0ekMsQ0FBSyxFQUN6QyxPQUFRaGQsRUFBSWtELFVBQVkxeUMsS0FBSzBzRCxrQkFBa0JsZCxDQUFHLENBQzFELENBQ0ltZCxhQUFhL3pDLEVBQVFza0MsR0FDakIsR0FBbUMsWUFBL0IsT0FBT2w5QyxLQUFLYyxLQUFLOHJELFdBQ2pCLE1BQU0sSUFBSXpzRCxNQUFNLHlDQUF5QyxFQUU3RCxJQUFReXNELEVBQWU1c0QsS0FBS2MsZ0JBQzVCLE9BQU8rckQsRUFBZ0I5d0QsS0FBS2lFLEtBQU00WSxFQUFRc2tDLENBQUksRUFDOUMvcUMsZUFBZTA2QyxFQUFnQkMsRUFBU04sR0FDcENuNkMsTUFBTTA2QyxFQUFlaHhELEtBQUtpRSxLQUFNOHNELEVBQVFFLE9BQU8sRUFDekN4ZCxFQUFNeHZDLEtBQUt5c0QsV0FBV0ssRUFBU04sQ0FBSyxFQUMxQyxPQUFPaGQsRUFBSWtELFVBQVl1YSxFQUFjbHhELEtBQUtpRSxLQUFNd3ZDLENBQUcsQ0FDL0QsQ0FDUXI5QixlQUFlNDZDLEVBQWVwUSxHQUN0QkEsR0FBUSxDQUFDMzhDLEtBQUt1c0QsVUFBVTVQLENBQUksR0FDNUJ0cUMsTUFBTXc2QyxFQUFnQjl3RCxLQUFLaUUsS0FBTSxDQUFFMjhDLEtBQUFBLENBQUksRUFBSSxDQUFBLENBQUksQ0FFL0QsQ0FDUXhxQyxlQUFlODZDLEVBQWN6ZCxHQUN6QixJQUNJLE9BQU94dkMsS0FBSzBzRCxrQkFBa0JsZCxDQUFHLENBUWpELENBTlksTUFBTzFxQyxHQUNILEdBQU1BLGFBQWEraUQsRUFBWXZ0RCxRQUkvQixPQUdSLFNBQXFCLENBQUV1a0QsY0FBZTNsQyxFQUFLMGxDLFdBQUFBLENBQVUsR0FDakQsR0FBSTUrQyxLQUFLKzRDLEtBQUs3L0IsR0FDVixNQUFNLElBQUkvWSxtQkFBbUIrWSxtQkFBcUIwbEMsc0JBQStCLENBRWpHLEVBVDRCN2lELEtBQUtpRSxLQUFNOEUsQ0FBQyxFQUN4QnVOLE1BU1JGLGVBQWlDK0csR0FDN0IsSUFBTTR6QyxFQUFVejZDLE1BTXBCRixlQUEyQitHLEdBQ3ZCLElBQU0xZCxFQUFJd0UsS0FBS3FwRCxTQUFTbndDLEdBQ3hCLEdBQUkxZCxFQUNBLE9BQU9BLEVBQ1gsSUFDSSxPQUFPNlcsTUFBT3JTLEtBQUtxcEQsU0FBU253QyxHQUFPMHpDLEVBQVcxekMsQ0FBRyxFQUlqRSxDQUZvQixRQUNKLE9BQU9sWixLQUFLcXBELFNBQVNud0MsRUFDckMsQ0FDQSxFQWhCOENuZCxLQUFLaUUsS0FBTWtaLENBQUcsRUFDM0NsWixLQUFLKzRDLEtBQUs3L0IsSUFDWDdHLE1BQU0wNkMsRUFBZWh4RCxLQUFLaUUsS0FBTThzRCxFQUFRRSxPQUFPLEVBQzlDaHRELEtBQUsrNEMsS0FBSzcvQixJQUNYbFosS0FBS2tzRCxVQUFVWSxFQUFTNXpDLEVBQUtna0MsQ0FBSSxDQUNqRCxFQWZ3Q25oRCxLQUFLaUUsS0FBTThFLEVBQUUrNUMsYUFBYSxFQUMzQ29PLEVBQWNseEQsS0FBS2lFLEtBQU13dkMsQ0FBRyxFQUgvQixNQUFNMXFDLENBSTFCLENBQ0EsQ0F3QkEsQ0FFSW9uRCxVQUFVdHpDLEVBQ1ZqVixFQUNBNm9ELEVBQ0FVLEVBQWtCbHRELEtBQUtjLEtBQUt5eEMsZ0JBRXhCLEdBQUloNkMsTUFBTUMsUUFBUW9nQixDQUFNLEVBQ3BCLElBQUssSUFBTTQyQixLQUFPNTJCLEVBQ2Q1WSxLQUFLa3NELFVBQVUxYyxFQUFLOXFDLEtBQUFBLEVBQVc4bkQsRUFBT1UsQ0FBZSxNQUY3RCxDQUtBNXpELElBQUkwK0MsRUFDSixHQUFzQixVQUFsQixPQUFPcC9CLEVBQXFCLENBQzVCLElBQVFzL0IsRUFBYWw0QyxLQUFLYyxjQUUxQixHQUFXNEQsS0FBQUEsS0FEWHN6QyxFQUFLcC9CLEVBQU9zL0IsS0FDeUIsVUFBYixPQUFPRixFQUMzQixNQUFNLElBQUk3M0MsZ0JBQWdCKzNDLGtCQUF5QixDQUVuRSxDQUNRdjBDLEdBQU0sRUFBSXUyQyxFQUFVL0MsYUFBYXh6QyxHQUFPcTBDLENBQUUsRUFDMUNoNEMsS0FBS210RCxhQUFheHBELENBQUcsRUFDckIzRCxLQUFLK29CLFFBQVFwbEIsR0FBTzNELEtBQUt5c0QsV0FBVzd6QyxFQUFRNHpDLEVBQU83b0QsRUFBS3VwRCxFQUFpQixDQUFBLENBQUksQ0FYckYsQ0FZUSxPQUFPbHRELElBQ2YsQ0FHSWdzRCxjQUFjcHpDLEVBQVFqVixFQUN0QnVwRCxFQUFrQmx0RCxLQUFLYyxLQUFLeXhDLGdCQUd4QixPQURBdnlDLEtBQUtrc0QsVUFBVXR6QyxFQUFRalYsRUFBSyxDQUFBLEVBQU11cEQsQ0FBZSxFQUMxQ2x0RCxJQUNmLENBRUl1eUMsZUFBZTM1QixFQUFRdzBDLEdBQ25CLEdBQXFCLFdBQWpCLE9BQU94MEMsRUFDUCxNQUFPLENBQUEsRUFDWHRmLElBQ0EwekQsRUFBVXAwQyxFQUFPbzBDLFFBQ2pCLEdBQWdCdG9ELEtBQUFBLElBQVpzb0QsR0FBMkMsVUFBbEIsT0FBT0EsRUFDaEMsTUFBTSxJQUFJN3NELE1BQU0sMEJBQTBCLEVBRzlDLEdBQUksRUFESjZzRCxFQUFVQSxHQUFXaHRELEtBQUtjLEtBQUt1ckQsYUFBZXJzRCxLQUFLcXNELFlBQWEsR0FJNUQsT0FGQXJzRCxLQUFLb29DLE9BQU9sb0IsS0FBSywyQkFBMkIsRUFFckMsRUFEUGxnQixLQUFLdXFCLE9BQVMsTUFHWjJoQixFQUFRbHNDLEtBQUsweUMsU0FBU3NhLEVBQVNwMEMsQ0FBTSxFQUMzQyxHQUFJLENBQUNzekIsR0FBU2toQixFQUFpQixDQUNyQnBoQyxFQUFVLHNCQUF3QmhzQixLQUFLMnpDLFdBQVksRUFDekQsR0FBaUMsUUFBN0IzekMsS0FBS2MsS0FBS3l4QyxlQUdWLE1BQU0sSUFBSXB5QyxNQUFNNnJCLENBQU8sRUFGdkJoc0IsS0FBS29vQyxPQUFPN25DLE1BQU15ckIsQ0FBTyxDQUd6QyxDQUNRLE9BQU9rZ0IsQ0FDZixDQUdJcWdCLFVBQVVjLEdBQ04vekQsSUFBSWsyQyxFQUNKLEtBQXNELFVBQS9DLE9BQVFBLEVBQU04ZCxFQUFVdnhELEtBQUtpRSxLQUFNcXRELENBQU0sSUFDNUNBLEVBQVM3ZCxFQUNiLEdBQVk5cUMsS0FBQUEsSUFBUjhxQyxFQUFtQixDQUNuQixJQUFRMEksRUFBYWw0QyxLQUFLYyxjQUNwQjdELEVBQU8sSUFBSTZxRCxFQUFVN0ksVUFBVSxDQUFFcm1DLE9BQVEsR0FBSXMvQixTQUFBQSxFQUFVLEVBRTdELEdBQUksRUFESjFJLEVBQU1zWSxFQUFVaEosY0FBYy9pRCxLQUFLaUUsS0FBTS9DLEVBQU1vd0QsQ0FBTSxHQUVqRCxPQUNKcnRELEtBQUsrNEMsS0FBS3NVLEdBQVU3ZCxDQUNoQyxDQUNRLE9BQVFBLEVBQUlrRCxVQUFZMXlDLEtBQUswc0Qsa0JBQWtCbGQsQ0FBRyxDQUMxRCxDQUtJK2QsYUFBYWpCLEdBQ1QsR0FBSUEsYUFBd0J6ckQsT0FHeEIsT0FGQWIsS0FBS3d0RCxrQkFBa0J4dEQsS0FBSytvQixRQUFTdWpDLENBQVksRUFDakR0c0QsS0FBS3d0RCxrQkFBa0J4dEQsS0FBSys0QyxLQUFNdVQsQ0FBWSxFQUN2Q3RzRCxLQUVYLE9BQVEsT0FBT3NzRCxHQUNYLElBQUssWUFJRCxPQUhBdHNELEtBQUt3dEQsa0JBQWtCeHRELEtBQUsrb0IsT0FBTyxFQUNuQy9vQixLQUFLd3RELGtCQUFrQnh0RCxLQUFLKzRDLElBQUksRUFDaEMvNEMsS0FBS3NwRCxPQUFPbUUsTUFBTyxFQUNaenRELEtBQ1gsSUFBSyxTQUNELElBQU13dkMsRUFBTThkLEVBQVV2eEQsS0FBS2lFLEtBQU1zc0QsQ0FBWSxFQUs3QyxNQUprQixVQUFkLE9BQU85YyxHQUNQeHZDLEtBQUtzcEQsT0FBT2x6QyxPQUFPbzVCLEVBQUk1MkIsTUFBTSxFQUNqQyxPQUFPNVksS0FBSytvQixRQUFRdWpDLEdBQ3BCLE9BQU90c0QsS0FBSys0QyxLQUFLdVQsR0FDVnRzRCxLQUVYLElBQUssU0FFREEsS0FBS3NwRCxPQUFPbHpDLE9BREtrMkMsQ0FDVSxFQUN2QnRVLEVBQUtzVSxFQUFhdHNELEtBQUtjLEtBQUtvM0MsVUFNaEMsT0FMSUYsSUFDQUEsR0FBSyxFQUFJa0MsRUFBVS9DLGFBQWFhLENBQUUsRUFDbEMsT0FBT2g0QyxLQUFLK29CLFFBQVFpdkIsR0FDcEIsT0FBT2g0QyxLQUFLKzRDLEtBQUtmLElBRWRoNEMsS0FFWCxRQUNJLE1BQU0sSUFBSUcsTUFBTSxxQ0FBcUMsQ0FDckUsQ0FDQSxDQUVJMnJELGNBQWM3VixHQUNWLElBQUssSUFBTXJYLEtBQU9xWCxFQUNkajJDLEtBQUsrckQsV0FBV250QixDQUFHLEVBQ3ZCLE9BQU81K0IsSUFDZixDQUNJK3JELFdBQVcyQixFQUFVOXVCLEdBRWpCdGxDLElBQUlndUMsRUFDSixHQUF1QixVQUFuQixPQUFPb21CLEVBQ1BwbUIsRUFBVW9tQixFQUNRLFVBQWQsT0FBTzl1QixJQUNQNStCLEtBQUtvb0MsT0FBT2xvQixLQUFLLDBEQUEwRCxFQUMzRTBlLEVBQUkwSSxRQUFVQSxPQUdqQixDQUFBLEdBQXVCLFVBQW5CLE9BQU9vbUIsR0FBZ0NocEQsS0FBQUEsSUFBUms2QixFQVFwQyxNQUFNLElBQUl6K0IsTUFBTSxnQ0FBZ0MsRUFMaEQsR0FGQXkrQixFQUFNOHVCLEVBQ05wbUIsRUFBVTFJLEVBQUkwSSxRQUNWL3VDLE1BQU1DLFFBQVE4dUMsQ0FBTyxHQUFLLENBQUNBLEVBQVFydUMsT0FDbkMsTUFBTSxJQUFJa0gsTUFBTSx3REFBd0QsQ0FLeEYsQ0FFUSxHQURBd3RELENBdU1SLFNBQXNCcm1CLEVBQVMxSSxHQUMzQixJQUFRc0ksRUFBVWxuQyxLQUFMLE1BT2IsSUFOQSxFQUFJMHBDLEVBQU9uRCxVQUFVZSxFQUFTLElBQzFCLEdBQUlKLEVBQU1nQixTQUFTZ0YsR0FDZixNQUFNLElBQUkvc0MsaUJBQWlCK3NDLHNCQUF3QixFQUN2RCxHQUFJLENBQUMwZ0IsRUFBYWgwRCxLQUFLc3pDLENBQUcsRUFDdEIsTUFBTSxJQUFJL3NDLGlCQUFpQitzQyxvQkFBc0IsQ0FDN0QsQ0FBSyxFQUNJdE8sR0FFREEsRUFBSTJJLE9BQVMsRUFBRSxTQUFVM0ksR0FBTyxhQUFjQSxHQUM5QyxNQUFNLElBQUl6K0IsTUFBTSx1REFBdUQsQ0FFL0UsRUFwTnFCcEUsS0FBS2lFLEtBQU1zbkMsRUFBUzFJLENBQUcsRUFDL0JBLEVBQUwsQ0FJQWl2QixDQXVQUixTQUEyQmp2QixHQUN2QnRsQyxJQUFNdzBELEVBQWVsdkIsRUFBTCxXQUNHbDZCLEtBQUFBLElBQWZvcEQsSUFFQWx2QixFQUFJMkksT0FBU3ZuQyxLQUFLYyxLQUFLeW1DLFFBQ3ZCdW1CLEVBQWFDLEVBQWFELENBQVUsR0FDeENsdkIsRUFBSTJULGVBQWlCdnlDLEtBQUsyeUMsUUFBUW1iLEVBQVksQ0FBQSxDQUFJLEVBQ3RELEVBOVAwQi94RCxLQUFLaUUsS0FBTTQrQixDQUFHLEVBQ2hDLElBQU1vTyxFQUFhLENBQ2YsR0FBR3BPLEVBQ0gxd0IsTUFBTSxFQUFJd3JDLEVBQVdsTSxjQUFjNU8sRUFBSTF3QixJQUFJLEVBQzNDaThCLFlBQVksRUFBSXVQLEVBQVdsTSxjQUFjNU8sRUFBSXVMLFVBQVUsQ0FDMUQsR0FDRCxFQUFJVCxFQUFPbkQsVUFBVWUsRUFBb0MsSUFBM0IwRixFQUFXOStCLEtBQUtqVixPQUN4QyxHQUFPKzBELEVBQVFqeUQsS0FBS2lFLEtBQU1pTCxFQUFHK2hDLENBQVUsRUFDdkMsR0FBT0EsRUFBVzkrQixLQUFLM0wsUUFBUSxHQUFPeXJELEVBQVFqeUQsS0FBS2lFLEtBQU1pTCxFQUFHK2hDLEVBQVk1ekIsQ0FBQyxDQUFDLENBQUMsQ0FUekYsTUFGWSxFQUFJc3dCLEVBQU9uRCxVQUFVZSxFQUFTLEdBQVMwbUIsRUFBUWp5RCxLQUFLaUUsS0FBTWt0QyxDQUFHLENBQUMsRUFZbEUsT0FBT2x0QyxJQUNmLENBQ0lpdUQsV0FBVzNtQixHQUNEeUYsRUFBTy9zQyxLQUFLa25DLE1BQU1sM0IsSUFBSXMzQixHQUM1QixNQUFzQixVQUFmLE9BQU95RixFQUFtQkEsRUFBS0MsV0FBYSxDQUFDLENBQUNELENBQzdELENBRUltaEIsY0FBYzVtQixHQUVWLElBR1d3RixFQUhINUYsRUFBVWxuQyxLQUFMLE1BQ2IsT0FBT2tuQyxFQUFNZ0IsU0FBU1osR0FDdEIsT0FBT0osRUFBTWwzQixJQUFJczNCLEdBQ2pCLElBQVd3RixLQUFTNUYsRUFBTWUsTUFBTyxDQUM3QixJQUFNdnVDLEVBQUlvekMsRUFBTTdFLE1BQU1oa0IsVUFBVSxHQUFVOG9CLEVBQUt6RixVQUFZQSxDQUFPLEVBQ3pELEdBQUw1dEMsR0FDQW96QyxFQUFNN0UsTUFBTXJ0QyxPQUFPbEIsRUFBRyxDQUFDLENBQ3ZDLENBQ1EsT0FBT3NHLElBQ2YsQ0FFSTByRCxVQUFVNW9ELEVBQU0vRCxHQUlaLE1BSHFCLFVBQWpCLE9BQU9BLElBQ1BBLEVBQVMsSUFBSThCLE9BQU85QixDQUFNLEdBQzlCaUIsS0FBS29wRCxRQUFRdG1ELEdBQVEvRCxFQUNkaUIsSUFDZixDQUNJMnpDLFdBQVdwcEIsRUFBU3ZxQixLQUFLdXFCLE9BQ3pCLENBQUU0akMsVUFBQUEsRUFBWSxLQUFNQyxRQUFBQSxFQUFVLE1BQVEsRUFBRyxJQUVyQyxPQUFLN2pDLEdBQTRCLElBQWxCQSxFQUFPdHhCLE9BRWZzeEIsRUFDRjF4QixJQUFJLEdBQU8sR0FBR3UxRCxFQUFVdHBELEVBQUU4akMsYUFBZixJQUErQjlqQyxFQUFFa25CLE9BQVMsRUFDckRqb0IsT0FBTyxDQUFDcVgsRUFBTXhiLElBQVF3YixFQUFPK3lDLEVBQVl2dUQsQ0FBRyxFQUh0QyxXQUluQixDQUNJeXVELGdCQUFnQlAsRUFBWVEsR0FDeEIsSUFFV3BRLEVBR0lxUSxFQUVBNXFELEVBUFRza0MsRUFBUWpvQyxLQUFLa25DLE1BQU1sM0IsSUFDekI4OUMsRUFBYXh1RCxLQUFLd0ksTUFBTXhJLEtBQUtDLFVBQVV1dUQsQ0FBVSxDQUFDLEVBQ2xELElBQVc1UCxLQUFlb1EsRUFBc0IsQ0FFNUNoMUQsSUFBSTR1QyxFQUFXNGxCLEVBQ2YsSUFBV1MsS0FGTXJRLEVBQVkzaUQsTUFBTSxHQUFHLEVBQUUxQixNQUFNLENBQUMsRUFHM0NxdUMsRUFBV0EsRUFBU3FtQixHQUN4QixJQUFXNXFELEtBQU9za0MsRUFBTyxDQUNyQixJQUlNcnZCLEVBSkFtMEIsRUFBTzlFLEVBQU10a0MsR0FDQSxVQUFmLE9BQU9vcEMsSUFFSHhGLEVBQVV3RixFQUFLQyxpQkFDakJwMEIsRUFBU3N2QixFQUFTdmtDLEdBQ3BCNGpDLEdBQVMzdUIsS0FDVHN2QixFQUFTdmtDLEdBQU9vcUQsRUFBYW4xQyxDQUFNLEVBQ3ZELENBQ0EsQ0FDUSxPQUFPazFDLENBQ2YsQ0FDSU4sa0JBQWtCemtDLEVBQVN5bEMsR0FDdkIsSUFBSyxJQUFNbkIsS0FBVXRrQyxFQUFTLENBQzFCLElBQU15bUIsRUFBTXptQixFQUFRc2tDLEdBQ2ZtQixHQUFTQSxDQUFBQSxFQUFNNTBELEtBQUt5ekQsQ0FBTSxJQUNULFVBQWQsT0FBTzdkLEVBQ1AsT0FBT3ptQixFQUFRc2tDLEdBRVY3ZCxHQUFPLENBQUNBLEVBQUkwTixPQUNqQmw5QyxLQUFLc3BELE9BQU9sekMsT0FBT281QixFQUFJNTJCLE1BQU0sRUFDN0IsT0FBT21RLEVBQVFza0MsSUFHbkMsQ0FDQSxDQUNJWixXQUFXN3pDLEVBQVFza0MsRUFBTW5GLEVBQVF4RixFQUFpQnZ5QyxLQUFLYyxLQUFLeXhDLGVBQWdCMlosRUFBWWxzRCxLQUFLYyxLQUFLK3BELGVBQzlGdnhELElBQUkwK0MsRUFDSixJQUFRRSxFQUFhbDRDLEtBQUtjLGNBQzFCLEdBQXFCLFVBQWpCLE9BQU84WCxFQUNQby9CLEVBQUtwL0IsRUFBT3MvQixPQUVYLENBQ0QsR0FBSWw0QyxLQUFLYyxLQUFLKzdDLElBQ1YsTUFBTSxJQUFJMThDLE1BQU0sdUJBQXVCLEVBQ3RDLEdBQXFCLFdBQWpCLE9BQU95WSxFQUNaLE1BQU0sSUFBSXpZLE1BQU0sa0NBQWtDLENBQ2xFLENBQ1E3RyxJQUlNaS9DLEVBSkYvSSxFQUFNeHZDLEtBQUtzcEQsT0FBT2xsRCxJQUFJd1UsQ0FBTSxFQWVoQyxPQWRZbFUsS0FBQUEsSUFBUjhxQyxJQUVKdUksR0FBUyxFQUFJbUMsRUFBVS9DLGFBQWFhLEdBQU1ELENBQU0sRUFDMUNRLEVBQVkyQixFQUFVakQsY0FBY2w3QyxLQUFLaUUsS0FBTTRZLEVBQVFtL0IsQ0FBTSxFQUNuRXZJLEVBQU0sSUFBSXNZLEVBQVU3SSxVQUFVLENBQUVybUMsT0FBQUEsRUFBUXMvQixTQUFBQSxFQUFVZ0YsS0FBQUEsRUFBTW5GLE9BQUFBLEVBQVFRLFVBQUFBLEVBQVcsRUFDM0V2NEMsS0FBS3NwRCxPQUFPM29ELElBQUk2dUMsRUFBSTUyQixPQUFRNDJCLENBQUcsRUFDM0IwYyxHQUFhLENBQUNuVSxFQUFPampDLFdBQVcsR0FBRyxJQUUvQmlqQyxHQUNBLzNDLEtBQUttdEQsYUFBYXBWLENBQU0sRUFDNUIvM0MsS0FBSys0QyxLQUFLaEIsR0FBVXZJLEdBRXBCK0MsSUFDQXZ5QyxLQUFLdXlDLGVBQWUzNUIsRUFBUSxDQUFBLENBQUksRUFDN0I0MkIsQ0FDZixDQUNJMmQsYUFBYW5WLEdBQ1QsR0FBSWg0QyxLQUFLK29CLFFBQVFpdkIsSUFBT2g0QyxLQUFLKzRDLEtBQUtmLEdBQzlCLE1BQU0sSUFBSTczQyxnQ0FBZ0M2M0MsbUJBQW9CLENBRTFFLENBQ0kwVSxrQkFBa0JsZCxHQU1kLEdBTElBLEVBQUkwTixLQUNKbDlDLEtBQUt5dUQsbUJBQW1CamYsQ0FBRyxFQUUzQnNZLEVBQVUxSSxjQUFjcmpELEtBQUtpRSxLQUFNd3ZDLENBQUcsRUFFckNBLEVBQUlrRCxTQUVULE9BQU9sRCxFQUFJa0QsU0FEUCxNQUFNLElBQUl2eUMsTUFBTSwwQkFBMEIsQ0FFdEQsQ0FDSXN1RCxtQkFBbUJqZixHQUNmLElBQU1rZixFQUFjMXVELEtBQUtjLEtBQ3pCZCxLQUFLYyxLQUFPZCxLQUFLd3JELFVBQ2pCLElBQ0kxRCxFQUFVMUksY0FBY3JqRCxLQUFLaUUsS0FBTXd2QyxDQUFHLENBSWxELENBRmdCLFFBQ0p4dkMsS0FBS2MsS0FBTzR0RCxDQUN4QixDQUNBLENBQ0EsQ0FJQSxTQUFTbkQsRUFBYW9ELEVBQVdyMkQsRUFBU3NILEVBQUs2RyxFQUFNLFNBQ2pELElBQUssSUFBTTlDLEtBQU9nckQsRUFBVyxDQUN6QixJQUFNOWpELEVBQU1sSCxFQUNSa0gsS0FBT3ZTLEdBQ1AwSCxLQUFLb29DLE9BQU8zaEMsTUFBUTdHLGFBQWUrRCxNQUFRZ3JELEVBQVU5akQsRUFBTSxDQUN2RSxDQUNBLENBQ0EsU0FBU3lpRCxFQUFVRCxHQUVmLE9BREFBLEdBQVMsRUFBSW5ULEVBQVUvQyxhQUFha1csQ0FBTSxFQUNuQ3J0RCxLQUFLK29CLFFBQVFza0MsSUFBV3J0RCxLQUFLKzRDLEtBQUtzVSxFQUM3QyxDQWJBbEUsRUFBSWpmLGdCQUFrQmdWLEVBQW1CNWtELFFBQ3pDNnVELEVBQUl4SyxnQkFBa0JrSixFQUFZdnRELFFBQ2xDRixFQUFBRSxRQUFrQjZ1RCxFQWdEbEIsSUFBTW1DLEVBQVMsQ0FBRTdrRCxRQUFXeVosU0FBWTNmLFNBQWEsRUFVL0NxdEQsRUFBZSwwQkFlckIsU0FBU0ksRUFBUTFtQixFQUFTMEYsRUFBWUcsR0FDbEMsSUFDTVYsRUFBT08sTUFBQUEsRUFBK0N0b0MsS0FBQUEsRUFBU3NvQyxFQUFXUCxLQUNoRixHQUFJVSxHQUFZVixFQUNaLE1BQU0sSUFBSXRzQyxNQUFNLDZDQUE2QyxFQUNqRSxJQUFRK21DLEVBQVVsbkMsS0FBTCxNQUNiMUcsSUFBSXMxRCxFQUFZbmlCLEVBQU92RixFQUFNdUYsS0FBT3ZGLEVBQU1lLE1BQU01dUIsS0FBSyxDQUFBLENBQUduTCxLQUFNa0wsQ0FBRyxJQUFLQSxJQUFNK3pCLENBQVEsRUFDL0V5aEIsSUFDREEsRUFBWSxDQUFFMWdELEtBQU1pL0IsRUFBVWxGLE1BQU8sRUFBSSxFQUN6Q2YsRUFBTWUsTUFBTXByQyxLQUFLK3hELENBQVMsR0FFOUIxbkIsRUFBTWdCLFNBQVNaLEdBQVcsQ0FBQSxFQUNyQjBGLElBRUNELEVBQU8sQ0FDVHpGLFFBQUFBLEVBQ0EwRixXQUFZLENBQ1IsR0FBR0EsRUFDSDkrQixNQUFNLEVBQUl3ckMsRUFBV2xNLGNBQWNSLEVBQVc5K0IsSUFBSSxFQUNsRGk4QixZQUFZLEVBQUl1UCxFQUFXbE0sY0FBY1IsRUFBVzdDLFVBQVUsQ0FDakUsQ0FDSixFQUNHNkMsRUFBV3phLE9BT25CLFNBQXVCcThCLEVBQVc3aEIsRUFBTXhhLEdBQ3BDLElBQU03NEIsRUFBSWsxRCxFQUFVM21CLE1BQU1oa0IsVUFBVSxHQUFXNHFDLEVBQU12bkIsVUFBWS9VLENBQU0sRUFDOUQsR0FBTDc0QixFQUNBazFELEVBQVUzbUIsTUFBTXJ0QyxPQUFPbEIsRUFBRyxFQUFHcXpDLENBQUksR0FHakM2aEIsRUFBVTNtQixNQUFNcHJDLEtBQUtrd0MsQ0FBSSxFQUN6Qi9zQyxLQUFLb29DLE9BQU9sb0IsYUFBYXFTLGtCQUF1QixFQUV4RCxFQWZzQngyQixLQUFLaUUsS0FBTTR1RCxFQUFXN2hCLEVBQU1DLEVBQVd6YSxNQUFNLEVBRTNEcThCLEVBQVUzbUIsTUFBTXByQyxLQUFLa3dDLENBQUksRUFDN0I3RixFQUFNbDNCLElBQUlzM0IsR0FBV3lGLEVBQ3JCLE9BQUN0UixFQUFLdVIsRUFBV0MsY0FBaUR4UixFQUFHbDVCLFFBQVEsR0FBU3ZDLEtBQUsrckQsV0FBVzdlLENBQUcsQ0FBQyxDQUM5RyxDQW1CQSxJQUFNNGhCLEVBQVcsQ0FDYm5TLEtBQU0sZ0ZBQ1QsRUFDRCxTQUFTb1IsRUFBYW4xQyxHQUNsQixNQUFPLENBQUVrOUIsTUFBTyxDQUFDbDlCLEVBQVFrMkMsRUFBVyxDQUN4QyxpRkV2bUJBcDJELE9BQU9tZSxlQUFlcUMsR0FBUyxhQUFjLENBQUV6YSxNQUFPLENBQUEsRUFBTSxFQUM1RHlhLEdBQUE2MUMsUUFBa0I3MUMsR0FBQTgxQyxZQUFzQnRxRCxLQUFBQSxFQUN4QyxJQUFNbWpELEVBQWMxZ0QsR0FBa0MsRUFDaERzMUIsRUFBUzJDLEVBQWtCLEVBQzNCNEgsRUFBWTMvQixFQUFnQyxFQUM1Q3FoQyxFQUFVbUYsRUFBOEIsRUFDeENpYSxFQUFZaGEsR0FBd0IsRUFDcENwRSxFQUFTcVEsRUFBNkIsRUFDNUMsSUFBTW5iLEVBQU0sQ0FDUjBJLFFBQVMsT0FDVDZDLFdBQVksU0FDWnh0QixLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS2h2QixPQUFRK2pDLEVBQU03aUMsR0FBQUEsQ0FBSSxFQUFHc3dCLEVBQzVCLENBQUUyTixPQUFBQSxFQUFRL04sVUFBVzl4QyxFQUFLNnhDLGFBQUFBLEVBQWNqcEMsS0FBQUEsRUFBTXJKLEtBQUFBLENBQUksRUFBS3FpQixFQUNyRDdjLEVBQVMvRSxFQUFMLEtBQ1osSUFBYyxNQUFUeWtELEdBQXlCLE9BQVRBLElBQWtCNUUsSUFBVzk2QyxFQUFLODZDLE9BU25ELE9BQUk3L0MsSUFBUStFLEVBQ0Q4eEQsRUFBUTNrQixFQUFLTCxFQUFjN3hDLEVBQUtBLEVBQUkreEMsTUFBTSxHQUMvQzhTLEVBQVduVixFQUFJdkUsV0FBVyxPQUFRLENBQUVucUIsSUFBS2pjLEVBQU0sRUFDOUM4eEQsRUFBUTNrQixHQUFLLEVBQUlwRCxFQUFVanRDLEtBQU1nakQsYUFBcUI5L0MsRUFBTUEsRUFBS2d0QyxNQUFNLEdBVmxGLElBZ0J5QnVGLEVBQ2Z5ZixFQUNBL2lCLEVBbEJKZ2pCLEVBQVdwSCxFQUFVOUksV0FBV2pqRCxLQUFLdEUsRUFBTXdGLEVBQU04NkMsRUFBUTRFLENBQUksRUFDbkUsR0FBaUJqNEMsS0FBQUEsSUFBYndxRCxFQUNBLE1BQU0sSUFBSXJILEVBQVl2dEQsUUFBUXdmLEVBQUdoWixLQUFLcTNDLFlBQWFKLEVBQVE0RSxDQUFJLEVBQ25FLEdBQUl1UyxFQUFBQSxhQUFvQnBILEVBQVU3SSxXQUVsQyxPQVd5QnpQLEVBWEYwZixFQVliRCxFQUFVcm5CLEVBQUl2RSxXQUFXLFNBQStCLENBQUEsSUFBckJ2aUMsRUFBSzZiLEtBQUtoTixPQUFrQixDQUFFdUosSUFBS3MyQixFQUFLN3lCLE1BQU0sRUFBSXFxQixFQUFVem5DLFdBQVdpd0MsQ0FBRyxHQUFNLENBQUV0MkIsSUFBS3MyQixFQUFLLEVBQy9IdEQsRUFBUXRFLEVBQUk5a0MsS0FBSyxPQUFPLEVBQ3hCNHVDLEVBQVN0SCxFQUFJaUgsVUFBVSxDQUN6Qno0QixPQUFRNDJCLEVBQ1JSLFVBQVcsR0FDWDNILFdBQVlMLEVBQVUvTCxJQUN0Qm1NLGFBQWM2bkIsRUFDZG5rQixjQUFlNlIsQ0FDbEIsRUFBRXpRLENBQUssRUFDUjlCLEVBQUk5RCxlQUFlb0wsQ0FBTSxFQUF6QnRILEtBQ0FBLEVBQUlyWixHQUFHbWIsQ0FBSyxFQWROM2pDLEVBQUl5bUQsRUFBWTVrQixFQURKb0YsRUFSRTBmLENBU1UsRUFDOUJILEVBQVEza0IsRUFBSzdoQyxFQUFHaW5DLEVBQUtBLEVBQUl2RixNQUFNLENBZXRDLENBQ0osRUFDRCxTQUFTK2tCLEVBQVk1a0IsRUFBS29GLEdBQ2Q1SCxFQUFRd0MsRUFBTCxJQUNYLE9BQU9vRixFQUFJa0QsU0FDTDlLLEVBQUl2RSxXQUFXLFdBQVksQ0FBRW5xQixJQUFLczJCLEVBQUlrRCxRQUFVLENBQUEsR0FDaEQsRUFBSTFMLEVBQVVqdEMsS0FBTTZ0QyxFQUFJdkUsV0FBVyxVQUFXLENBQUVucUIsSUFBS3MyQixDQUFLLENBQUEsWUFDcEUsQ0FFQSxTQUFTdWYsRUFBUTNrQixFQUFLN2hDLEVBQUdpbkMsRUFBS3ZGLEdBQzFCLEdBQU0sQ0FBRXJDLElBQUFBLEVBQUs5dEIsR0FBQUEsQ0FBRSxFQUFLc3dCLEVBQ2QsQ0FBRUksVUFBQUEsRUFBV1IsVUFBVzl4QyxFQUFLNEksS0FBQUEsQ0FBTSxFQUFHZ1osRUFDdENpNUIsRUFBVWp5QyxFQUFLa3lDLFlBQWN0SyxFQUFRcHVDLFFBQVEwRixLQUFPZ25DLEVBQVUvTCxJQUNwRSxHQUFJZ1AsRUFDQWtsQixDQUlBLEdBQUksQ0FBQ2ozRCxFQUFJK3hDLE9BQ0wsTUFBTSxJQUFJOXBDLE1BQU0sd0NBQXdDLEVBQzVELElBQU0rckMsRUFBUXRFLEVBQUl0dUMsSUFBSSxPQUFPLEVBQzdCc3VDLEVBQUk3QyxJQUFJLEtBQ0o2QyxFQUFJanJCLE1BQUssRUFBSXFxQixFQUFVanRDLFlBQVksRUFBSTBpQyxFQUFPbVQsa0JBQWtCeEYsRUFBSzdoQyxFQUFHd3FDLENBQU8sR0FBRyxFQUNsRnFjLEVBQWlCN21ELENBQUMsRUFDYmlpQyxHQUNENUMsRUFBSWp2QyxPQUFPdXpDLEVBQU8sQ0FBQSxDQUFJLENBQzdCLEVBQUUsSUFDQ3RFLEVBQUk5RCxJQUFHLEVBQUlrRCxFQUFVanRDLE9BQVErSyxnQkFBZ0JnVixFQUFHb3dCLG1CQUFvQixJQUFNdEMsRUFBSXhDLE1BQU10Z0MsQ0FBQyxDQUFDLEVBQ3RGdXFELEVBQWN2cUQsQ0FBQyxFQUNWMGxDLEdBQ0Q1QyxFQUFJanZDLE9BQU91ekMsRUFBTyxDQUFBLENBQUssQ0FDdkMsQ0FBUyxFQUNEOUIsRUFBSXJaLEdBQUdtYixDQUFLLENBbEJFLE1BcUJkOUIsRUFBSXB0QyxRQUFPLEVBQUl5L0IsRUFBT21ULGtCQUFrQnhGLEVBQUs3aEMsRUFBR3dxQyxDQUFPLEVBQUcsSUFBTXFjLEVBQWlCN21ELENBQUMsRUFBRyxJQUFNOG1ELEVBQWM5bUQsQ0FBQyxDQUFDLEVBRS9HLFNBQVM4bUQsRUFBYzEvQyxHQUNibTZCLEdBQU8sRUFBSTlDLEVBQVVqdEMsS0FBTTRWLFdBQ2pDaTRCLEVBQUlqdkMsT0FBTyt2QyxFQUFRcHVDLFFBQVEydUMsU0FBUyxFQUFJakMsRUFBVWp0QyxLQUFNMnVDLEVBQVFwdUMsUUFBUTJ1QyxzQkFBc0JhLE9BQVVwQixFQUFRcHVDLFFBQVEydUMsa0JBQWtCYSxJQUFPLEVBQ2pKbEMsRUFBSWp2QyxPQUFPK3ZDLEVBQVFwdUMsUUFBUWl3QixRQUFRLEVBQUl5YyxFQUFVanRDLEtBQU0ydUMsRUFBUXB1QyxRQUFRMnVDLGdCQUFnQixDQUMvRixDQUNJLFNBQVNtbUIsRUFBaUJ6L0MsR0FDdEIsSUFHTTIvQyxFQW9CUXY5QyxFQXRCVCtILEVBQUdoWixLQUFLeXdDLGNBRVArZCxFQUFlLE9BQUM3ekIsRUFBSytULE1BQUFBLEVBQWlDOXFDLEtBQUFBLEVBQVM4cUMsRUFBSWtELFVBQXNDaHVDLEtBQUFBLEVBQVMrMkIsRUFBR3NmLFVBRTFHLENBQUEsSUFBYmpoQyxFQUFHaUcsUUFDQ3V2QyxHQUFnQixDQUFDQSxFQUFhdlAsYUFDSHI3QyxLQUFBQSxJQUF2QjRxRCxFQUFhdnZDLFFBQ2JqRyxFQUFHaUcsTUFBUTJwQixFQUFPcEQsZUFBZXZtQixNQUFNNm5CLEVBQUswbkIsRUFBYXZ2QyxNQUFPakcsRUFBR2lHLEtBQUssSUFJdEVBLEVBQVE2bkIsRUFBSWhMLElBQUksU0FBUyxFQUFJb0ssRUFBVWp0QyxLQUFNNFYsbUJBQXdCLEVBQzNFbUssRUFBR2lHLE1BQVEycEIsRUFBT3BELGVBQWV2bUIsTUFBTTZuQixFQUFLN25CLEVBQU9qRyxFQUFHaUcsTUFBT2luQixFQUFVN0wsSUFBSSxJQUdsRSxDQUFBLElBQWJyaEIsRUFBRy9ILFNBQ0N1OUMsR0FBZ0IsQ0FBQ0EsRUFBYXRQLGFBQ0h0N0MsS0FBQUEsSUFBdkI0cUQsRUFBYXY5QyxRQUNiK0gsRUFBRy9ILE1BQVEyM0IsRUFBT3BELGVBQWV2MEIsTUFBTTYxQixFQUFLMG5CLEVBQWF2OUMsTUFBTytILEVBQUcvSCxLQUFLLElBSXRFQSxFQUFRNjFCLEVBQUloTCxJQUFJLFNBQVMsRUFBSW9LLEVBQVVqdEMsS0FBTTRWLG1CQUF3QixFQUMzRW1LLEVBQUcvSCxNQUFRMjNCLEVBQU9wRCxlQUFldjBCLE1BQU02MUIsRUFBSzcxQixFQUFPK0gsRUFBRy9ILE1BQU9pMUIsRUFBVTdMLElBQUksR0FHM0YsQ0FDQSxDQS9EQWppQixHQUFBODFDLFlBQXNCQSxFQWdFdEI5MUMsR0FBQTYxQyxRQUFrQkEsRUFDbEI3MUMsR0FBQTVlLFFBQWtCc2tDLDhCQ3JIWjJ3QixFQUNBQyxtQkFITjkyRCxPQUFPbWUsZUFBZTQ0QyxHQUFTLGFBQWMsQ0FBRWh4RCxNQUFPLENBQUEsRUFBTSxZQ0E1RC9GLE9BQU9tZSxlQUFlbWhDLEdBQVMsYUFBYyxDQUFFdjVDLE1BQU8sQ0FBQSxFQUFNLEVBTzVEdTVDLEdBQUExOUMsUUFOWSxDQUNSZ3RDLFFBQVMsS0FDVDNxQixPQUNJLE1BQU0sSUFBSXhjLE1BQU0sc0RBQXNELENBQ3pFLENBQ0osR0RMS3V2RCxLQUNBSCxFQUFRbndCLEdBQWdCLEVBQ3hCb3dCLEVBQU8sQ0FDVCxVQUNBLE1BQ0EsUUFDQSxjQUNBLENBQUVsb0IsUUFBUyxVQUFZLEVBQ3ZCLGNBQ0Fvb0IsRUFBS3AxRCxRQUNMaTFELEVBQU1qMUQsU0FFVm0xRCxHQUFBbjFELFFBQWtCazFELHVGRWJsQjkyRCxPQUFPbWUsZUFBZTg0QyxHQUFTLGFBQWMsQ0FBRWx4RCxNQUFPLENBQUEsRUFBTSxFQUM1RCxJQUFNdW9DLEVBQVk3L0IsRUFBZ0MsRUFDNUN1aUMsRUFBU3RLLEVBQTZCLEVBQ3RDd3dCLGFDSE5sM0QsT0FBT21lLGVBQWUrNEMsR0FBUyxhQUFjLENBQUVueEQsTUFBTyxDQUFBLEVBQU0sR0FvQjVEbXhELEdBQUF0MUQsUUFBa0J1MUQsR0FDUGx6QyxLQUFPLHNEQWxCbEIsU0FBU2t6QyxFQUFXanlELEdBQ2hCLElBR0lhLEVBSEVaLEVBQU1ELEVBQUkzRSxPQUNoQkssSUFBSUwsRUFBUyxFQUNUOHlCLEVBQU0sRUFFVixLQUFPQSxFQUFNbHVCLEdBQ1Q1RSxDQUFNLEdBRU8sUUFEYndGLEVBQVFiLEVBQUl5b0IsV0FBVzBGLENBQUcsRUFBRSxJQUNMdHRCLEdBQVMsT0FBVXN0QixFQUFNbHVCLEdBR25CLFFBQVosTUFETEQsRUFBSXlvQixXQUFXMEYsQ0FBRyxJQUV0QkEsQ0FBRyxHQUdmLE9BQU85eUIsQ0FDWCxDREtBMDJELEdBQUFyMUQsUUFiWSxDQUNSZ3RDLFFBQVMsQ0FBQyxZQUFhLGFBQ3ZCcDVCLEtBQU0sU0FDTmk4QixXQUFZLFNBQ1o1QyxNQUFPLENBQUEsRUFDUGhuQyxNQVpVLENBQ1Z5ckIsUUFBUSxDQUFFc2IsUUFBQUEsRUFBUzJFLFdBQUFBLElBQ1Q2akIsRUFBbUIsY0FBWnhvQixFQUEwQixPQUFTLFFBQ2hELE9BQU8sRUFBSU4sRUFBVXBwQyxxQkFBc0JreUQsVUFBYTdqQixjQUMzRCxFQUNEaEIsT0FBUSxDQUFBLENBQUdnQixXQUFBQSxDQUFZLEtBQUssRUFBSWpGLEVBQVVqdEMsYUFBY2t5QyxJQUMzRCxFQU9HdHZCLEtBQUt5dEIsR0FDRCxHQUFNLENBQUU5QyxRQUFBQSxFQUFTL3dCLEtBQUFBLEVBQU0wMUIsV0FBQUEsRUFBWW55QixHQUFBQSxDQUFJLEVBQUdzd0IsRUFDcENySixFQUFpQixjQUFadUcsRUFBMEJOLEVBQVU5SCxVQUFVSyxHQUFLeUgsRUFBVTlILFVBQVVPLEdBQzVFNWhDLEVBQTBCLENBQUEsSUFBcEJpYyxFQUFHaFosS0FBS21vRCxTQUFvQixFQUFJamlCLEVBQVVqdEMsS0FBTXdjLFlBQWdCLEVBQUl5d0IsRUFBVWp0QyxNQUFNLEVBQUkydkMsRUFBT3JCLFNBQVMrQixFQUFJeEMsSUFBS2dvQixFQUFhdDFELE9BQU8sS0FBS2ljLEtBQ3RKNnpCLEVBQUlvUixXQUFVLEVBQUl4VSxFQUFVanRDLEtBQU04RCxLQUFPa2pDLEtBQU1rTCxHQUFZLENBQzlELENBQ0osOEVFdkJEdnpDLE9BQU9tZSxlQUFldS9CLEdBQVMsYUFBYyxDQUFFMzNDLE1BQU8sQ0FBQSxFQUFNLEVBQzVELElBQU1nK0IsRUFBU3QxQixFQUFrQixFQUMzQjYvQixFQUFZNUgsRUFBZ0MsRUFDNUNzSyxFQUFTcmlDLEVBQTZCLEVBeUU1Qyt1QyxHQUFBOTdDLFFBcEVZLENBQ1JndEMsUUFBUyxXQUNUcDVCLEtBQU0sU0FDTmk4QixXQUFZLFFBQ1o1QyxNQUFPLENBQUEsRUFDUGhuQyxNQVRVLENBQ1Z5ckIsUUFBUyxDQUFBLENBQUdpZixPQUFRLENBQUV1RixnQkFBQUEsQ0FBZSxDQUFJLEtBQUssRUFBSXhKLEVBQVVwcEMsb0NBQXFDNHlDLEtBQ2pHdkYsT0FBUSxDQUFBLENBQUdBLE9BQVEsQ0FBRXVGLGdCQUFBQSxDQUFlLENBQUksS0FBSyxFQUFJeEosRUFBVWp0Qyx1QkFBd0J5MkMsSUFDdEYsRUFPRzd6QixLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS2h2QixPQUFBQSxFQUFRcXpCLFdBQUFBLEVBQVkxMUIsS0FBQUEsRUFBTWd4QixNQUFBQSxFQUFPenRCLEdBQUFBLENBQUUsRUFBS3N3QixFQUM3Q3RwQyxFQUFTZ1osRUFBTCxLQUNaLEdBQUt5dEIsR0FBMkIsSUFBbEIzdUIsRUFBTzNmLE9BQXJCLENBRUEsSUFBTTgyRCxFQUFVbjNDLEVBQU8zZixRQUFVNkgsRUFBS3dwRCxhQUN0QyxHQUFJeHdDLEVBQUcwd0IsVUFnQkgsR0FBSXVsQixHQUFXeG9CLEVBQ1g2QyxFQUFJK0ksV0FBV25NLEVBQVUvTCxJQUFLKzBCLENBQWUsT0FHN0MsSUFBSyxJQUFNOW9ELEtBQVEwUixHQUNmLEVBQUk2akIsRUFBTzJULHdCQUF3QmhHLEVBQUtsakMsQ0FBSSxNQWxCcEQrb0QsQ0F1QkEsSUFBTXhmLEVBQVU3SSxFQUFJdHVDLElBQUksU0FBUyxFQUNqQyxHQUFJeTJELEdBQVd4b0IsRUFBTyxDQUNsQixJQUFNMkUsRUFBUXRFLEVBQUl0dUMsSUFBSSxRQUFTLENBQUEsQ0FBSSxFQUNuQzh3QyxFQUFJK0ksV0FBV2pILEVBQU8sS0FBTWdrQixPQWVWemYsRUFmMkJBLEVBZWxCdkUsRUFmMkJBLEVBZ0IxRDlCLEVBQUltRyxVQUFVLENBQUVDLGdCQUFpQkMsQ0FBTyxDQUFFLEVBQTFDckcsS0FDQXhDLEVBQUlsRCxNQUFNK0wsRUFBU3hFLEVBQVksS0FDM0JyRSxFQUFJanZDLE9BQU91ekMsR0FBTyxFQUFJelAsRUFBT2lVLGdCQUFnQjlJLEVBQUtyeEIsRUFBTWs2QixFQUFTM3ZDLEVBQUs4akMsYUFBYSxDQUFDLEVBQ3BGZ0QsRUFBSTlELElBQUcsRUFBSWtELEVBQVVoSSxLQUFLa04sQ0FBSyxFQUFHLEtBQzlCOUIsRUFBSTdwQyxNQUFPLEVBQ1hxbkMsRUFBSS9DLE1BQU8sQ0FDL0IsQ0FBaUIsQ0FDakIsRUFBZW1DLEVBQVUvTCxHQUFHLEVBUnBCLElBQTBCd1YsRUFBU3ZFLENBZmdDLENBQUMsRUFDNUQ5QixFQUFJclosR0FBR21iLENBQUssQ0FDNUIsTUFFZ0J0RSxFQUFJOUQsSUFBRyxFQUFJckgsRUFBTzBULGtCQUFrQi9GLEVBQUt4eEIsRUFBUTYzQixDQUFPLENBQUMsR0FDekQsRUFBSWhVLEVBQU95VCxtQkFBbUI5RixFQUFLcUcsQ0FBTyxFQUMxQzdJLEVBQUk3RixLQUFNLENBaENHLENBQ3JCLEdBQUlqaEMsRUFBS3FwRCxlQUFnQixDQUNyQixJQUVXZ0csRUFHR3Z3RCxFQUxSbWdCLEVBQVFxcUIsRUFBSWUsYUFBYW9FLFdBQ3ZCNkUsRUFBc0JoSyxFQUFJdHdCLHFCQUNsQyxJQUFXcTJDLEtBQWV2M0MsRUFDcURsVSxLQUFBQSxLQUF0RXFiLE1BQUFBLEVBQXFDcmIsS0FBQUEsRUFBU3FiLEVBQU1vd0MsS0FBZ0MvYixFQUFrQnIrQixJQUFJbzZDLENBQVcsSUFDaEg5b0IsRUFBYXZ0QixFQUFHa3dCLFVBQVUrTixPQUFTaitCLEVBQUdneEIsY0FDdENsckMsd0JBQTRCdXdELHlCQUFtQzlvQix1QkFDckUsRUFBSXFDLEVBQU94RCxpQkFBaUJwc0IsRUFBSWxhLEVBQUtrYSxFQUFHaFosS0FBS3FwRCxjQUFjLEVBRy9FLENBd0JRLFNBQVM2RixJQUNMcG9CLEVBQUlsRCxNQUFNLE9BQVF1SCxFQUFZLElBQzFCN0IsRUFBSW1HLFVBQVUsQ0FBRUMsZ0JBQWlCdHBDLENBQUksQ0FBRSxFQUN2QzBnQyxFQUFJOUQsSUFBRyxFQUFJckgsRUFBT3NULGtCQUFrQm5JLEVBQUtyeEIsRUFBTXJQLEVBQU1wRyxFQUFLOGpDLGFBQWEsRUFBRyxJQUFNd0YsRUFBSTdwQyxNQUFLLENBQUUsQ0FDM0csQ0FBYSxDQUNiLENBN0NZLENBd0RQLENBQ0osaUVDekVLazBDLG1CQUZOLzdDLE9BQU9tZSxlQUFldTVDLEdBQVMsYUFBYyxDQUFFM3hELE1BQU8sQ0FBQSxFQUFNLEdBRXREZzJDLEVBQVF0dEMsR0FBMEIsR0FDbEN3VixLQUFPLDRDQUNieXpDLEdBQUE5MUQsUUFBa0JtNkMsaUNDSmxCLzdDLE9BQU9tZSxlQUFlaWdDLEdBQVMsYUFBYyxDQUFFcjRDLE1BQU8sQ0FBQSxFQUFNLEVBQzVELElBQU1pN0MsRUFBYXZ5QyxHQUEwQyxFQUN2RDYvQixFQUFZNUgsRUFBZ0MsRUFDNUNzSyxFQUFTcmlDLEVBQTZCLEVBQ3RDK29ELEVBQVV2aUIsR0FBOEIsRUF5RDlDaUosR0FBQXg4QyxRQXBEWSxDQUNSZ3RDLFFBQVMsY0FDVHA1QixLQUFNLFFBQ05pOEIsV0FBWSxVQUNaNUMsTUFBTyxDQUFBLEVBQ1BobkMsTUFUVSxDQUNWeXJCLFFBQVMsQ0FBQSxDQUFHaWYsT0FBUSxDQUFFdnhDLEVBQUFBLEVBQUdvUyxFQUFBQSxDQUFHLENBQUUsS0FBSyxFQUFJazdCLEVBQVVwcEMsK0NBQWdEa08sU0FBU3BTLG1CQUMxR3V4QyxPQUFRLENBQUEsQ0FBR0EsT0FBUSxDQUFFdnhDLEVBQUFBLEVBQUdvUyxFQUFBQSxDQUFHLENBQUUsS0FBSyxFQUFJazdCLEVBQVVqdEMsU0FBVUwsU0FBU29TLElBQ3RFLEVBT0c2USxLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS3J4QixLQUFBQSxFQUFNZ3hCLE1BQUFBLEVBQU8zdUIsT0FBQUEsRUFBUXV5QixhQUFBQSxFQUFjYyxXQUFBQSxFQUFZbnlCLEdBQUFBLENBQUUsRUFBS3N3QixFQUNuRSxHQUFLN0MsR0FBVTN1QixFQUFmLENBRUEsSUFBTXN6QixFQUFRdEUsRUFBSXR1QyxJQUFJLE9BQU8sRUFDdkIrMkQsRUFBWWxsQixFQUFhcDVCLE9BQVEsRUFBSTJuQyxFQUFXak0sZ0JBQWdCdEMsRUFBYXA1QixLQUFLLEVBQUksR0FDNUZxNEIsRUFBSStJLFdBQVdqSCxFQUVmLFdBQ0ksSUFBTXh5QyxFQUFJa3VDLEVBQUl0dUMsSUFBSSxLQUFLLEVBQUkwdEMsRUFBVWp0QyxLQUFNd2MsVUFBYSxFQUNsRHpLLEVBQUk4N0IsRUFBSXR1QyxJQUFJLEdBQUcsRUFDckI4d0MsRUFBSW1HLFVBQVUsQ0FBRTcyQyxFQUFBQSxFQUFHb1MsRUFBQUEsQ0FBQyxDQUFFLEVBQ3RCODdCLEVBQUlqdkMsT0FBT3V6QyxFQUFPLENBQUEsQ0FBSSxFQUN0QnRFLEVBQUk5RCxJQUFHLEVBQUlrRCxFQUFVanRDLEtBQU1MLFFBQVMsS0FHVixFQUFuQjIyRCxFQUFVcDNELFFBQWMsQ0FBQ28zRCxFQUFVaDdDLEtBQUssR0FBYSxXQUFOK0QsR0FBd0IsVUFBTkEsQ0FBYSxFQUV6RixTQUFlMWYsRUFBR29TLEdBQ2QsSUFBTTZMLEVBQU9pd0IsRUFBSTlrQyxLQUFLLE1BQU0sRUFDdEJzckMsR0FBWSxFQUFJc0wsRUFBV3JNLGdCQUFnQmdqQixFQUFXMTRDLEVBQU1tQyxFQUFHaFosS0FBS3V0QyxjQUFlcUwsRUFBV2hNLFNBQVNZLEtBQUssRUFDNUdnaUIsRUFBVTFvQixFQUFJakwsTUFBTSxXQUFXLEVBQUlxSyxFQUFVanRDLE1BQU8sRUFDMUQ2dEMsRUFBSXY0QixLQUFJLEVBQUkyM0IsRUFBVWp0QyxNQUFPTCxPQUFRLEtBQ2pDa3VDLEVBQUl0dUMsSUFBSXFlLEdBQU0sRUFBSXF2QixFQUFVanRDLEtBQU13YyxLQUFRN2MsSUFBSSxFQUM5Q2t1QyxFQUFJOUQsR0FBR3NLLEdBQVcsRUFBSXBILEVBQVVqdEMsWUFBYSxFQUN0QixFQUFuQnMyRCxFQUFVcDNELFFBQ1YydUMsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsWUFBYTRkLGlCQUFvQixFQUFJcXZCLEVBQVVqdEMsS0FBTTRkLFVBQWEsRUFDM0Zpd0IsRUFDSzlELElBQUcsRUFBSWtELEVBQVVqdEMsWUFBYXUyRCxLQUFXMzRDLGlCQUFxQixLQUMvRGl3QixFQUFJanZDLE9BQU9tVCxHQUFHLEVBQUlrN0IsRUFBVWp0QyxLQUFNdTJELEtBQVczNEMsSUFBTyxFQUNwRHl5QixFQUFJN3BDLE1BQU8sRUFDWHFuQyxFQUFJanZDLE9BQU91ekMsRUFBTyxDQUFBLENBQUssRUFBRXJILE1BQU8sQ0FDbkMsQ0FBQSxFQUNJbG9CLE1BQUssRUFBSXFxQixFQUFVanRDLEtBQU11MkQsS0FBVzM0QyxRQUFXamUsR0FBRyxDQUN2RSxDQUFhLENBQ2IsRUFDUSxTQUFnQkEsRUFBR29TLEdBQ2YsSUFBTXlrRCxHQUFNLEVBQUk3bUIsRUFBT3JCLFNBQVNULEVBQUt3b0IsRUFBUTkxRCxPQUFPLEVBQzlDazJELEVBQVE1b0IsRUFBSTlrQyxLQUFLLE9BQU8sRUFDOUI4a0MsRUFBSTNHLE1BQU11dkIsQ0FBSyxFQUFFbmhELEtBQUksRUFBSTIzQixFQUFVanRDLE1BQU9MLE9BQVEsSUFBTWt1QyxFQUFJdjRCLEtBQUksRUFBSTIzQixFQUFVanRDLEtBQU0rUixPQUFPcFMsTUFBTW9TLE9BQVEsSUFBTTg3QixFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNdzJELEtBQU9oNkMsS0FBUTdjLE9BQU82YyxLQUFRekssTUFBTyxLQUMzS3MrQixFQUFJN3BDLE1BQU8sRUFDWHFuQyxFQUFJanZDLE9BQU91ekMsRUFBTyxDQUFBLENBQUssRUFBRXJILE1BQU0yckIsQ0FBSyxDQUN2QyxDQUFBLENBQUMsQ0FBQyxDQUNmLEdBOUJ1RjkyRCxFQUFHb1MsQ0FBQyxDQUFDLENBQzVGLEdBUm1ELEVBQUlrN0IsRUFBVWp0QyxLQUFNa3lDLGFBQXNCLEVBQ3JGN0IsRUFBSXJaLEdBQUdtYixDQUFLLENBSlIsQ0F5Q1AsQ0FDSixvRUM1RER4ekMsT0FBT21lLGVBQWU0NUMsR0FBUyxhQUFjLENBQUVoeUQsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTXVvQyxFQUFZNy9CLEVBQWdDLEVBQzVDdWlDLEVBQVN0SyxFQUE2QixFQUN0Q2d4QixFQUFVL29ELEdBQThCLEVBMEM5Q29wRCxHQUFBbjJELFFBckNZLENBQ1JndEMsUUFBUyxPQUNUNkMsV0FBWSxRQUNaNUMsTUFBTyxDQUFBLEVBQ1BobkMsTUFSVSxDQUNWeXJCLFFBQVMsNkNBQ1RpZixPQUFRLENBQUEsQ0FBR2dCLFdBQUFBLENBQVksS0FBSyxFQUFJakYsRUFBVWp0QyxxQkFBc0JreUMsSUFDbkUsRUFNR3R2QixLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS3J4QixLQUFBQSxFQUFNZ3hCLE1BQUFBLEVBQU8zdUIsT0FBQUEsRUFBUXF6QixXQUFBQSxFQUFZbnlCLEdBQUFBLENBQUUsRUFBS3N3QixFQUNyRCxHQUFJLENBQUM3QyxHQUEyQixJQUFsQjN1QixFQUFPM2YsT0FDakIsTUFBTSxJQUFJa0gsTUFBTSxnQ0FBZ0MsRUFDcEQsSUFBTTR2RCxFQUFVbjNDLEVBQU8zZixRQUFVNmdCLEVBQUdoWixLQUFLMHBELFNBQ3pDbHhELElBQUlpM0QsRUFDRUcsRUFBUyxJQUFPSCxNQUFBQSxFQUFpQ0EsRUFBT0EsR0FBTSxFQUFJN21CLEVBQU9yQixTQUFTVCxFQUFLd29CLEVBQVE5MUQsT0FBTyxFQUN4RzR4QyxFQUNKLEdBQUk2akIsR0FBV3hvQixFQUNYMkUsRUFBUXRFLEVBQUl0dUMsSUFBSSxPQUFPLEVBQ3ZCOHdDLEVBQUkrSSxXQUFXakgsRUFVbkIsV0FDSXRFLEVBQUlqdkMsT0FBT3V6QyxFQUFPLENBQUEsQ0FBSyxFQUN2QnRFLEVBQUlsRCxNQUFNLElBQUt1SCxFQUFZLEdBQU9yRSxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNMjJELEVBQU0sS0FBTW42QyxNQUFTaE8sS0FBTSxJQUFNcS9CLEVBQUlqdkMsT0FBT3V6QyxFQUFPLENBQUEsQ0FBSSxFQUFFckgsTUFBTyxDQUFBLENBQUMsQ0FDMUksQ0FiMEMsTUFFN0IsQ0FFRCxHQUFJLENBQUN0c0MsTUFBTUMsUUFBUW9nQixDQUFNLEVBQ3JCLE1BQU0sSUFBSXpZLE1BQU0sMEJBQTBCLEVBQzlDLElBQU13d0QsRUFBVS9vQixFQUFJakwsTUFBTSxVQUFXc1AsQ0FBVSxFQUMvQ0MsR0FBUSxFQUFJbEYsRUFBVWpJLElBQUksR0FBR25tQixFQUFPL2YsSUFBSSxDQUFDa3lELEVBQUlyeEQsS0FBTWszRCxPQU9wQ0QsRUFQOENBLEVBT3JDajNELEVBUDhDQSxFQVNoRCxVQUFmLE9BREQ4MUMsRUFBTTUyQixFQUFPbGYsS0FDdUIsT0FBUjgxQyxHQUM1QixFQUFJeEksRUFBVWp0QyxLQUFNMjJELEVBQU0sS0FBTW42QyxNQUFTbzZDLEtBQVdqM0QsT0FDcEQsRUFBSXN0QyxFQUFVanRDLEtBQU13YyxTQUFZaTVCLElBSjFDLElBQW1CbWhCLEVBQ1RuaEIsQ0FSaUUsQ0FBQyxDQUFDLENBQ3JGLENBQ1FwRixFQUFJb0ksS0FBS3RHLENBQUssQ0FXakIsQ0FDSiw4QkMxQ0sya0IsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQTVTLG1CQVhOL2xELE9BQU9tZSxlQUFleTZDLEdBQVMsYUFBYyxDQUFFN3lELE1BQU8sQ0FBQSxFQUFNLEVBQ3REOHlELHFCQ0RONzRELE9BQU9tZSxlQUFlMjZDLEdBQVMsYUFBYyxDQUFFL3lELE1BQU8sQ0FBQSxFQUFNLEVBQzVELElBQU11b0MsRUFBWTcvQixFQUFnQyxFQUNsRCxJQUFNc3FELEVBQU16cUIsRUFBVTlILFVBQ3RCLElBQU13eUIsRUFBTyxDQUNUcmIsUUFBUyxDQUFFc2IsTUFBTyxLQUFNNWdDLEdBQUkwZ0MsRUFBSS94QixJQUFLNmIsS0FBTWtXLEVBQUlseUIsRUFBSSxFQUNuRCtXLFFBQVMsQ0FBRXFiLE1BQU8sS0FBTTVnQyxHQUFJMGdDLEVBQUlqeUIsSUFBSytiLEtBQU1rVyxFQUFJaHlCLEVBQUksRUFDbkQ4VyxpQkFBa0IsQ0FBRW9iLE1BQU8sSUFBSzVnQyxHQUFJMGdDLEVBQUloeUIsR0FBSThiLEtBQU1rVyxFQUFJanlCLEdBQUssRUFDM0RnWCxpQkFBa0IsQ0FBRW1iLE1BQU8sSUFBSzVnQyxHQUFJMGdDLEVBQUlseUIsR0FBSWdjLEtBQU1rVyxFQUFJL3hCLEdBQUssQ0FDOUQsRUFDS24vQixFQUFRLENBQ1Z5ckIsUUFBUyxDQUFBLENBQUdzYixRQUFBQSxFQUFTMkUsV0FBQUEsQ0FBWSxLQUFLLEVBQUlqRixFQUFVcHBDLGVBQWdCOHpELEVBQUtwcUIsR0FBU3FxQixTQUFTMWxCLElBQzNGaEIsT0FBUSxDQUFBLENBQUczRCxRQUFBQSxFQUFTMkUsV0FBQUEsQ0FBWSxLQUFLLEVBQUlqRixFQUFVanRDLGtCQUFtQjIzRCxFQUFLcHFCLEdBQVNxcUIsaUJBQWlCMWxCLElBQ3hHLEVBQ0tyTixFQUFNLENBQ1IwSSxRQUFTNXVDLE9BQU8ySixLQUFLcXZELENBQUksRUFDekJ4akQsS0FBTSxTQUNOaThCLFdBQVksU0FDWjVDLE1BQU8sQ0FBQSxFQUNQaG5DLE1BQUFBLEVBQ0FvYyxLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFOUMsUUFBQUEsRUFBUy93QixLQUFBQSxFQUFNMDFCLFdBQUFBLENBQVksRUFBRzdCLEVBQ3RDQSxFQUFJb1IsV0FBVSxFQUFJeFUsRUFBVWp0QyxLQUFNd2MsS0FBUW03QyxFQUFLcHFCLEdBQVNpVSxRQUFRdFAsY0FBdUIxMUIsSUFBTyxDQUNqRyxDQUNKLEVBQ0RpN0MsR0FBQWwzRCxRQUFrQnNrQyxjRHZCNEIsRUFDeENpeUIscUJFRk5uNEQsT0FBT21lLGVBQWU0L0IsR0FBUyxhQUFjLENBQUVoNEMsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTXVvQyxFQUFZNy9CLEVBQWdDLEVBc0JsRHN2QyxHQUFBbjhDLFFBakJZLENBQ1JndEMsUUFBUyxhQUNUcDVCLEtBQU0sU0FDTmk4QixXQUFZLFNBQ1o1QyxNQUFPLENBQUEsRUFDUGhuQyxNQVRVLENBQ1Z5ckIsUUFBUyxDQUFBLENBQUdpZ0IsV0FBQUEsQ0FBWSxLQUFLLEVBQUlqRixFQUFVcHBDLDJCQUE0QnF1QyxJQUN2RWhCLE9BQVEsQ0FBQSxDQUFHZ0IsV0FBQUEsQ0FBWSxLQUFLLEVBQUlqRixFQUFVanRDLGtCQUFtQmt5QyxJQUNoRSxFQU9HdHZCLEtBQUt5dEIsR0FDRCxHQUFNLENBQUV4QyxJQUFBQSxFQUFLcnhCLEtBQUFBLEVBQU0wMUIsV0FBQUEsRUFBWW55QixHQUFBQSxDQUFJLEVBQUdzd0IsRUFFaEN3bkIsRUFBTzkzQyxFQUFHaFosS0FBSyt3RCxvQkFDZmwwRCxFQUFNaXFDLEVBQUl0dUMsSUFBSSxLQUFLLEVBQ25CdzRELEVBQVVGLEdBQ1YsRUFBSTVxQixFQUFVanRDLHlCQUEwQjRELFFBQVVBLFdBQWFpMEQsS0FDL0QsRUFBSTVxQixFQUFVanRDLEtBQU00RCxrQkFBb0JBLEtBQzlDeXNDLEVBQUlvUixXQUFVLEVBQUl4VSxFQUFVanRDLE1BQU9reUMsZUFBd0J0dUMsT0FBUzRZLEtBQVEwMUIsTUFBZTZsQixLQUFXLENBQ3pHLENBQ0osY0ZwQjJDLEVBQ3RDaEIsRUFBZ0J6cEQsR0FBd0IsRUFDeEMwcEQscUJHSk5yNEQsT0FBT21lLGVBQWVrNkIsR0FBUyxhQUFjLENBQUV0eUMsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTWcrQixFQUFTdDFCLEVBQWtCLEVBQzNCNi9CLEVBQVk1SCxFQUFnQyxFQW1CbEQyUixHQUFBejJDLFFBZFksQ0FDUmd0QyxRQUFTLFVBQ1RwNUIsS0FBTSxTQUNOaThCLFdBQVksU0FDWjVDLE1BQU8sQ0FBQSxFQUNQaG5DLE1BVFUsQ0FDVnlyQixRQUFTLENBQUEsQ0FBR2lnQixXQUFBQSxDQUFZLEtBQUssRUFBSWpGLEVBQVVwcEMsMkJBQTRCcXVDLEtBQ3ZFaEIsT0FBUSxDQUFBLENBQUdnQixXQUFBQSxDQUFZLEtBQUssRUFBSWpGLEVBQVVqdEMsZUFBZ0JreUMsSUFDN0QsRUFPR3R2QixLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFN3pCLEtBQUFBLEVBQU1neEIsTUFBQUEsRUFBTzN1QixPQUFBQSxFQUFRcXpCLFdBQUFBLEVBQVlueUIsR0FBQUEsQ0FBRSxFQUFLc3dCLEVBRTFDdlosRUFBSS9XLEVBQUdoWixLQUFLa3dDLGNBQWdCLElBQU0sR0FDbENDLEVBQVMxSixHQUFRLEVBQUlQLEVBQVVqdEMsaUJBQWtCa3lDLE1BQWVwYixPQUFRLEVBQUk0TCxFQUFPa1QsWUFBWXZGLEVBQUt4eEIsQ0FBTSxFQUNoSHd4QixFQUFJb1IsV0FBVSxFQUFJeFUsRUFBVWp0QyxNQUFPazNDLFVBQWUxNkIsSUFBTyxDQUM1RCxDQUNKLGNIaEJxQyxFQUNoQ3k2QyxxQklMTnQ0RCxPQUFPbWUsZUFBZWs3QyxHQUFTLGFBQWMsQ0FBRXR6RCxNQUFPLENBQUEsRUFBTSxFQUM1RCxJQUFNdW9DLEVBQVk3L0IsRUFBZ0MsRUFvQmxENHFELEdBQUF6M0QsUUFaWSxDQUNSZ3RDLFFBQVMsQ0FBQyxnQkFBaUIsaUJBQzNCcDVCLEtBQU0sU0FDTmk4QixXQUFZLFNBQ1o1QyxNQUFPLENBQUEsRUFDUGhuQyxNQVpVLENBQ1Z5ckIsUUFBUSxDQUFFc2IsUUFBQUEsRUFBUzJFLFdBQUFBLElBQ1Q2akIsRUFBbUIsa0JBQVp4b0IsRUFBOEIsT0FBUyxRQUNwRCxPQUFPLEVBQUlOLEVBQVVwcEMscUJBQXNCa3lELFVBQWE3akIsY0FDM0QsRUFDRGhCLE9BQVEsQ0FBQSxDQUFHZ0IsV0FBQUEsQ0FBWSxLQUFLLEVBQUlqRixFQUFVanRDLGFBQWNreUMsSUFDM0QsRUFPR3R2QixLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFOUMsUUFBQUEsRUFBUy93QixLQUFBQSxFQUFNMDFCLFdBQUFBLENBQVksRUFBRzdCLEVBQ2hDckosRUFBaUIsa0JBQVp1RyxFQUE4Qk4sRUFBVTlILFVBQVVLLEdBQUt5SCxFQUFVOUgsVUFBVU8sR0FDdEYySyxFQUFJb1IsV0FBVSxFQUFJeFUsRUFBVWp0QyxpQkFBa0J3YyxhQUFnQndxQixLQUFNa0wsR0FBWSxDQUNuRixDQUNKLGNKZnFELEVBQ2hEZ2xCLEVBQWFsWCxHQUFxQixFQUNsQ21YLHFCS1BOeDRELE9BQU9tZSxlQUFlbTdDLEdBQVMsYUFBYyxDQUFFdnpELE1BQU8sQ0FBQSxFQUFNLEVBQzVELElBQU11b0MsRUFBWTcvQixFQUFnQyxFQW9CbEQ2cUQsR0FBQTEzRCxRQVpZLENBQ1JndEMsUUFBUyxDQUFDLFdBQVksWUFDdEJwNUIsS0FBTSxRQUNOaThCLFdBQVksU0FDWjVDLE1BQU8sQ0FBQSxFQUNQaG5DLE1BWlUsQ0FDVnlyQixRQUFRLENBQUVzYixRQUFBQSxFQUFTMkUsV0FBQUEsSUFDVDZqQixFQUFtQixhQUFaeG9CLEVBQXlCLE9BQVMsUUFDL0MsT0FBTyxFQUFJTixFQUFVcHBDLHFCQUFzQmt5RCxVQUFhN2pCLFNBQzNELEVBQ0RoQixPQUFRLENBQUEsQ0FBR2dCLFdBQUFBLENBQVksS0FBSyxFQUFJakYsRUFBVWp0QyxhQUFja3lDLElBQzNELEVBT0d0dkIsS0FBS3l0QixHQUNELEdBQU0sQ0FBRTlDLFFBQUFBLEVBQVMvd0IsS0FBQUEsRUFBTTAxQixXQUFBQSxDQUFZLEVBQUc3QixFQUNoQ3JKLEVBQWlCLGFBQVp1RyxFQUF5Qk4sRUFBVTlILFVBQVVLLEdBQUt5SCxFQUFVOUgsVUFBVU8sR0FDakYySyxFQUFJb1IsV0FBVSxFQUFJeFUsRUFBVWp0QyxLQUFNd2MsWUFBZXdxQixLQUFNa0wsR0FBWSxDQUN0RSxDQUNKLGNMYjJDLEVBQ3RDa2xCLEVBQWdCbFgsR0FBd0IsRUFDeENtWCxxQk1UTjE0RCxPQUFPbWUsZUFBZW83QyxHQUFTLGFBQWMsQ0FBRXh6RCxNQUFPLENBQUEsRUFBTSxFQUM1RCxJQUFNdW9DLEVBQVk3L0IsRUFBZ0MsRUFDNUN1aUMsRUFBU3RLLEVBQTZCLEVBQ3RDZ3hCLEVBQVUvb0QsR0FBOEIsRUFtQjlDNHFELEdBQUEzM0QsUUFkWSxDQUNSZ3RDLFFBQVMsUUFDVEMsTUFBTyxDQUFBLEVBQ1BobkMsTUFQVSxDQUNWeXJCLFFBQVMsNEJBQ1RpZixPQUFRLENBQUEsQ0FBR2dCLFdBQUFBLENBQVksS0FBSyxFQUFJakYsRUFBVWp0QyxvQkFBcUJreUMsSUFDbEUsRUFLR3R2QixLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS3J4QixLQUFBQSxFQUFNZ3hCLE1BQUFBLEVBQU8wRSxXQUFBQSxFQUFZcnpCLE9BQUFBLENBQU0sRUFBS3d4QixFQUM3QzdDLEdBQVUzdUIsR0FBMkIsVUFBakIsT0FBT0EsRUFDM0J3eEIsRUFBSW9SLFdBQVUsRUFBSXhVLEVBQVVqdEMsT0FBTyxFQUFJMnZDLEVBQU9yQixTQUFTVCxFQUFLd29CLEVBQVE5MUQsT0FBTyxLQUFLaWMsTUFBUzAxQixJQUFhLEVBR3RHN0IsRUFBSW1SLE1BQUssRUFBSXZVLEVBQVVqdEMsS0FBTTZlLFNBQWNyQyxHQUFNLENBRXhELENBQ0osY05aaUMsRUFDNUI4NkMsRUFBU2pYLEdBQWlCLEVBQzFCcUUsRUFBYSxDQUVmOFMsRUFBY2ozRCxRQUNkdTJELEVBQWF2MkQsUUFFYncyRCxFQUFjeDJELFFBQ2R5MkQsRUFBVXoyRCxRQUVWMDJELEVBQWtCMTJELFFBQ2xCMjJELEVBQVczMkQsUUFFWDQyRCxFQUFhNTJELFFBQ2I2MkQsRUFBYzcyRCxRQUVkLENBQUVndEMsUUFBUyxPQUFRNkMsV0FBWSxDQUFDLFNBQVUsUUFBVSxFQUNwRCxDQUFFN0MsUUFBUyxXQUFZNkMsV0FBWSxTQUFXLEVBQzlDaW5CLEVBQVE5MkQsUUFDUisyRCxFQUFPLzJELFNBRVhnM0QsR0FBQWgzRCxRQUFrQm1rRCxvRE85QmxCL2xELE9BQU9tZSxlQUFlMitCLEdBQVMsYUFBYyxDQUFFLzJDLE1BQU8sQ0FBQSxFQUFNLEVBQzdCKzJDLEdBQUEwYyx3QkFBR3h0RCxLQUFBQSxFQUNsQyxJQUFNc2lDLEVBQVk3L0IsRUFBZ0MsRUFDNUN1aUMsRUFBU3RLLEVBQTZCLEVBQzVDLElBSU1SLEVBQU0sQ0FDUjBJLFFBQVMsa0JBQ1RwNUIsS0FBTSxRQUNOaThCLFdBQVksQ0FBQyxVQUFXLFVBQ3hCNVgsT0FBUSxjQUNSaHlCLE1BVFUsQ0FDVnlyQixRQUFTLENBQUEsQ0FBR2lmLE9BQVEsQ0FBRXB0QyxJQUFBQSxDQUFHLENBQUksS0FBSyxFQUFJbXBDLEVBQVVwcEMsK0JBQWdDQyxVQUNoRm90QyxPQUFRLENBQUEsQ0FBR0EsT0FBUSxDQUFFcHRDLElBQUFBLENBQUcsQ0FBSSxLQUFLLEVBQUltcEMsRUFBVWp0QyxhQUFjOEQsSUFDaEUsRUFPRzhlLEtBQUt5dEIsR0FDRCxHQUFNLENBQUVlLGFBQUFBLEVBQWNyeEIsR0FBQUEsQ0FBRSxFQUFLc3dCLEVBQ3JCcjRCLEVBQVVvNUIsRUFBTCxNQUNSNXlDLE1BQU1DLFFBQVF1WixDQUFLLEVBSXhCbWdELEVBQXdCOW5CLEVBQUtyNEIsQ0FBSyxHQUg5QixFQUFJMjNCLEVBQU94RCxpQkFBaUJwc0IsRUFBSSxzRUFBc0UsQ0FJN0csQ0FDSixFQUNELFNBQVNvNEMsRUFBd0I5bkIsRUFBS3I0QixHQUNsQyxHQUFNLENBQUU2MUIsSUFBQUEsRUFBS2h2QixPQUFBQSxFQUFRckMsS0FBQUEsRUFBTSt3QixRQUFBQSxFQUFTeHRCLEdBQUFBLENBQUUsRUFBS3N3QixFQUVyQ3ZzQyxHQUROaWMsRUFBRy9ILE1BQVEsQ0FBQSxFQUNDNjFCLEVBQUlqTCxNQUFNLE9BQU8sRUFBSXFLLEVBQVVqdEMsS0FBTXdjLFVBQWEsR0FDOUQsR0FBZSxDQUFBLElBQVhxQyxFQUNBd3hCLEVBQUltRyxVQUFVLENBQUUxeUMsSUFBS2tVLEVBQU05WSxNQUFNLENBQUUsRUFDbkNteEMsRUFBSW9JLE1BQUssRUFBSXhMLEVBQVVqdEMsS0FBTThELFFBQVVrVSxFQUFNOVksUUFBUSxPQUVwRCxHQUFxQixVQUFqQixPQUFPMmYsR0FBc0IsRUFBQyxFQUFJOHdCLEVBQU81QyxtQkFBbUJodEIsRUFBSWxCLENBQU0sRUFBRyxDQUM5RSxJQUFNc3pCLEVBQVF0RSxFQUFJaEwsSUFBSSxTQUFTLEVBQUlvSyxFQUFVanRDLEtBQU04RCxRQUFVa1UsRUFBTTlZLFFBQVEsRUFDM0UydUMsRUFBSTlELElBQUcsRUFBSWtELEVBQVVoSSxLQUFLa04sQ0FBSyxFQUFHLEtBR3RDLElBQXVCQSxFQUFBQSxFQUhtQ0EsRUFJdER0RSxFQUFJbkQsU0FBUyxJQUFLMXlCLEVBQU05WSxPQUFRNEUsRUFBSyxJQUNqQ3VzQyxFQUFJaUgsVUFBVSxDQUFFL0osUUFBQUEsRUFBU2dCLFNBQVU1dUMsRUFBRzZ1QyxhQUFjbUIsRUFBT3hsQixLQUFLdWtCLEdBQUcsRUFBSXlELENBQUssRUFDdkVweUIsRUFBRzB3QixXQUNKNUMsRUFBSTlELElBQUcsRUFBSWtELEVBQVVoSSxLQUFLa04sQ0FBSyxFQUFHLElBQU10RSxFQUFJL0MsT0FBTyxDQUNuRSxDQUFTLENBUjBELENBQUMsRUFDNUR1RixFQUFJclosR0FBR21iLENBQUssQ0FDcEIsQ0FRQSxDQUNBc0osR0FBQTBjLHdCQUFrQ0EsRUFDbEMxYyxHQUFBbDdDLFFBQWtCc2tDLDZEQzlDbEJsbUMsT0FBT21lLGVBQWU5RSxHQUFTLGFBQWMsQ0FBRXRULE1BQU8sQ0FBQSxFQUFNLEVBQ3ZDc1QsR0FBQW9nRCxjQUFHenRELEtBQUFBLEVBQ3hCLElBQU1zaUMsRUFBWTcvQixFQUFnQyxFQUM1Q3VpQyxFQUFTdEssRUFBNkIsRUFDdEMzQyxFQUFTcDFCLEVBQWtCLEVBQ2pDLElBQU11M0IsRUFBTSxDQUNSMEksUUFBUyxRQUNUcDVCLEtBQU0sUUFDTmk4QixXQUFZLENBQUMsU0FBVSxRQUFTLFdBQ2hDNVgsT0FBUSxjQUNSNVYsS0FBS3l0QixHQUNELEdBQU0sQ0FBRXh4QixPQUFBQSxFQUFRa0IsR0FBQUEsQ0FBRSxFQUFLc3dCLEVBQ3ZCLEdBQUk3eEMsTUFBTUMsUUFBUW9nQixDQUFNLEVBQ3BCLE9BQU91NUMsRUFBYy9uQixFQUFLLGtCQUFtQnh4QixDQUFNLEVBQ3ZEa0IsRUFBRy9ILE1BQVEsQ0FBQSxHQUNQLEVBQUkyM0IsRUFBTzVDLG1CQUFtQmh0QixFQUFJbEIsQ0FBTSxHQUU1Q3d4QixFQUFJclosSUFBRyxFQUFJMEwsRUFBT2lULGVBQWV0RixDQUFHLENBQUMsQ0FDeEMsQ0FDSixFQUNELFNBQVMrbkIsRUFBYy9uQixFQUFLZ29CLEVBQVlDLEVBQVNqb0IsRUFBSXh4QixRQUNqRCxHQUFNLENBQUVndkIsSUFBQUEsRUFBS3VELGFBQUFBLEVBQWM1MEIsS0FBQUEsRUFBTSt3QixRQUFBQSxFQUFTeHRCLEdBQUFBLENBQUUsRUFBS3N3QixFQUNqRGtvQixJQWdCMEI5aUIsRUFoQlRyRSxFQWlCUCxDQUFFcnFDLEtBQUFBLEVBQU1ncUMsY0FBQUEsQ0FBYSxFQUFLaHhCLEVBQzFCdFcsRUFBSTZ1RCxFQUFPcDVELE9BQ1hzNUQsRUFBWS91RCxJQUFNZ3NDLEVBQUlxSCxXQUFhcnpDLElBQU1nc0MsRUFBSW9ILFVBQWdDLENBQUEsSUFBcEJwSCxFQUFJNGlCLElBQy9EdHhELEVBQUtrcEQsY0FBZ0IsQ0FBQ3VJLElBQ2hCM3lELE1BQVUwbkMsU0FBZTlqQyxxQ0FBcUM0dUQsNkNBQXNEdG5CLE1BQzFILEVBQUlwQixFQUFPeEQsaUJBQWlCcHNCLEVBQUlsYSxFQUFLa0IsRUFBS2twRCxZQUFZLEdBckIxRGx3QyxFQUFHaFosS0FBS3l3QyxhQUFlOGdCLEVBQU9wNUQsUUFBdUIsQ0FBQSxJQUFiNmdCLEVBQUcvSCxRQUMzQytILEVBQUcvSCxNQUFRMjNCLEVBQU9wRCxlQUFldjBCLE1BQU02MUIsRUFBS3lxQixFQUFPcDVELE9BQVE2Z0IsRUFBRy9ILEtBQUssR0FFdkUsSUFBTW02QixFQUFRdEUsRUFBSTlrQyxLQUFLLE9BQU8sRUFDeEJqRixFQUFNK3BDLEVBQUlqTCxNQUFNLE9BQU8sRUFBSXFLLEVBQVVqdEMsS0FBTXdjLFVBQWEsRUFDOUQ4N0MsRUFBTzl2RCxRQUFRLENBQUNpdEMsRUFBSzkxQyxNQUNiLEVBQUlnd0MsRUFBTzVDLG1CQUFtQmh0QixFQUFJMDFCLENBQUcsSUFFekM1SCxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNOEQsT0FBU25FLElBQUssSUFBTTB3QyxFQUFJaUgsVUFBVSxDQUN6RC9KLFFBQUFBLEVBQ0FxSyxXQUFZajRDLEVBQ1o0dUMsU0FBVTV1QyxDQUNiLEVBQUV3eUMsQ0FBSyxDQUFDLEVBQ1Q5QixFQUFJclosR0FBR21iLENBQUssRUFDcEIsQ0FBSyxDQVVMLENBQ0FuNkIsR0FBQW9nRCxjQUF3QkEsRUFDeEJwZ0QsR0FBQXpYLFFBQWtCc2tDLGlFQ2pEbEJsbUMsT0FBT21lLGVBQWU0K0IsR0FBUyxhQUFjLENBQUVoM0MsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTXVvQyxFQUFZNy9CLEVBQWdDLEVBQzVDdWlDLEVBQVN0SyxFQUE2QixFQTBGNUNxVyxHQUFBbjdDLFFBbkZZLENBQ1JndEMsUUFBUyxXQUNUcDVCLEtBQU0sUUFDTmk4QixXQUFZLENBQUMsU0FBVSxXQUN2QjVYLE9BQVEsY0FDUjRvQixZQUFhLENBQUEsRUFDYjU2QyxNQVpVLENBQ1Z5ckIsUUFBUyxDQUFBLENBQUdpZixPQUFRLENBQUV2dUMsSUFBQUEsRUFBS29iLElBQUFBLENBQUcsQ0FBSSxJQUFhcFQsS0FBQUEsSUFBUm9ULEdBQ2pDLEVBQUlrdkIsRUFBVXBwQyw2QkFBOEJsQixtQkFDNUMsRUFBSXNxQyxFQUFVcHBDLDZCQUE4QmxCLHNCQUF3Qm9iLGtCQUMxRW16QixPQUFRLENBQUEsQ0FBR0EsT0FBUSxDQUFFdnVDLElBQUFBLEVBQUtvYixJQUFBQSxFQUFPLElBQWFwVCxLQUFBQSxJQUFSb1QsR0FBb0IsRUFBSWt2QixFQUFVanRDLG1CQUFvQjJDLE1BQVMsRUFBSXNxQyxFQUFVanRDLG1CQUFvQjJDLG1CQUFxQm9iLElBQy9KLEVBUUc2RSxLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS2h2QixPQUFBQSxFQUFRdXlCLGFBQUFBLEVBQWM1MEIsS0FBQUEsRUFBTXVELEdBQUFBLENBQUUsRUFBS3N3QixFQUM1QzF0QyxFQUNBb2IsRUFDSixHQUFNLENBQUUwNkMsWUFBQUEsRUFBYUMsWUFBQUEsQ0FBVyxFQUFLdG5CLEVBQ2pDcnhCLEVBQUdoWixLQUFLeUssTUFDUjdPLEVBQXNCZ0ksS0FBQUEsSUFBaEI4dEQsRUFBNEIsRUFBSUEsRUFDdEMxNkMsRUFBTTI2QyxHQUdOLzFELEVBQU0sRUFFVixJQUFNbUIsRUFBTStwQyxFQUFJakwsTUFBTSxPQUFPLEVBQUlxSyxFQUFVanRDLEtBQU13YyxVQUFhLEVBRTlELEdBREE2ekIsRUFBSW1HLFVBQVUsQ0FBRTd6QyxJQUFBQSxFQUFLb2IsSUFBQUEsQ0FBRyxDQUFFLEVBQ2RwVCxLQUFBQSxJQUFSb1QsR0FBNkIsSUFBUnBiLEdBQ3JCLEVBQUlndEMsRUFBT3hELGlCQUFpQnBzQixFQUFJLHNFQUFzRSxPQUcxRyxHQUFZcFYsS0FBQUEsSUFBUm9ULEdBQXFCcGIsRUFBTW9iLEdBQzNCLEVBQUk0eEIsRUFBT3hELGlCQUFpQnBzQixFQUFJLGlEQUFpRCxFQUNqRnN3QixFQUFJbVIsS0FBTSxPQUdkLElBQUksRUFBSTdSLEVBQU81QyxtQkFBbUJodEIsRUFBSWxCLENBQU0sRUFBRyxDQUMzQ3RmLElBQUkyb0MsR0FBTyxFQUFJK0UsRUFBVWp0QyxLQUFNOEQsUUFBVW5CLElBQzdCZ0ksS0FBQUEsSUFBUm9ULElBQ0FtcUIsR0FBTyxFQUFJK0UsRUFBVWp0QyxLQUFNa29DLFFBQVdwa0MsUUFBVWlhLEtBRHBELEtBRUFzeUIsRUFBSW9JLEtBQUt2USxDQUFJLENBRXpCLEtBTlEsQ0FPQW5vQixFQUFHL0gsTUFBUSxDQUFBLEVBQ1gsSUFBTW02QixFQUFRdEUsRUFBSTlrQyxLQUFLLE9BQU8sRUFjOUIsU0FBUzR2RCxJQUNMLElBQU1saEIsRUFBVzVKLEVBQUk5a0MsS0FBSyxRQUFRLEVBQzVCaUksRUFBUTY4QixFQUFJdHVDLElBQUksUUFBUyxDQUFDLEVBQ2hDNjNDLEVBQWNLLEVBQVUsSUFBTTVKLEVBQUk5RCxHQUFHME4sRUFBVSxLQUFNbWhCLE9BYXBDNW5ELEVBYmdEQSxFQWNqRTY4QixFQUFJanJCLE1BQUssRUFBSXFxQixFQUFVanRDLEtBQU1nUixLQUFTLEVBQ3RDLEtBQVlyRyxLQUFBQSxJQUFSb1QsRUFDQTh2QixFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNZ1IsUUFBWXJPLElBQU8sSUFBTWtyQyxFQUFJanZDLE9BQU91ekMsRUFBTyxDQUFBLENBQUksRUFBRXJILE9BQU8sR0FHbkYrQyxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWp0QyxLQUFNZ1IsT0FBVytNLElBQU8sSUFBTTh2QixFQUFJanZDLE9BQU91ekMsRUFBTyxDQUFBLENBQUssRUFBRXJILE9BQU8sRUFDdkUsSUFBUm5vQyxFQUNBa3JDLEVBQUlqdkMsT0FBT3V6QyxFQUFPLENBQUEsQ0FBSSxFQUV0QnRFLEVBQUk5RCxJQUFHLEVBQUlrRCxFQUFVanRDLEtBQU1nUixRQUFZck8sSUFBTyxJQUFNa3JDLEVBQUlqdkMsT0FBT3V6QyxFQUFPLENBQUEsQ0FBSSxDQUFDLElBVnZGLElBQXFCbmhDLENBYnFELENBQUMsQ0FBQyxDQUNwRixDQUNRLFNBQVNvbUMsRUFBY3loQixFQUFRdnRCLEdBQzNCdUMsRUFBSW5ELFNBQVMsSUFBSyxFQUFHNW1DLEVBQUssSUFDdEJ1c0MsRUFBSWlILFVBQVUsQ0FDVi9KLFFBQVMsV0FDVGdCLFNBQVU1dUMsRUFDVjZ1QyxhQUFjbUIsRUFBT3hsQixLQUFLdWtCLElBQzFCOEIsY0FBZSxDQUFBLENBQ2xCLEVBQUVxb0IsQ0FBTSxFQUNUdnRCLEVBQU8sQ0FDdkIsQ0FBYSxDQUNiLENBNUJvQjNnQyxLQUFBQSxJQUFSb1QsR0FBNkIsSUFBUnBiLEVBQ3JCeTBDLEVBQWNqRixFQUFPLElBQU10RSxFQUFJOUQsR0FBR29JLEVBQU8sSUFBTXRFLEVBQUkvQyxNQUFLLENBQUUsQ0FBQyxFQUU5QyxJQUFSbm9DLEdBQ0xrckMsRUFBSXR1QyxJQUFJNHlDLEVBQU8sQ0FBQSxDQUFJLEVBQ1B4bkMsS0FBQUEsSUFBUm9ULEdBQ0E4dkIsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTXdjLGVBQW1CbThDLENBQXNCLElBR3hFOXFCLEVBQUl0dUMsSUFBSTR5QyxFQUFPLENBQUEsQ0FBSyxFQUNwQndtQixFQUF3QixHQUU1QnRvQixFQUFJcHRDLE9BQU9rdkMsRUFBTyxJQUFNOUIsRUFBSTBILE1BQUssQ0FBRSxDQWYzQyxDQTZDSyxDQUNKLDhEQzNGRHA1QyxPQUFPbWUsZUFBY3pjLEVBQVUsYUFBYyxDQUFFcUUsTUFBTyxDQUFBLEVBQU0sRUFDNURyRSxFQUE2Qnk0RCxtQkFBQXo0RCxFQUFBMDRELHFCQUErQjE0RCxFQUFnQm1HLE1BQUFtRSxLQUFBQSxFQUM1RSxJQUFNc2lDLEVBQVk3L0IsRUFBZ0MsRUFDNUN1aUMsRUFBU3RLLEVBQTZCLEVBQ3RDM0MsRUFBU3AxQixFQUFrQixFQUNqQ2pOLEVBQWdCbUcsTUFBQSxDQUNaeXJCLFFBQVMsQ0FBQSxDQUFHaWYsT0FBUSxDQUFFMU4sU0FBQUEsRUFBVXcxQixVQUFBQSxFQUFXdGYsS0FBQUEsQ0FBSSxDQUFJLEtBQ3pDdWYsRUFBNkIsSUFBZEQsRUFBa0IsV0FBYSxhQUNwRCxPQUFPLEVBQUkvckIsRUFBVXBwQyxpQkFBa0JvMUQsS0FBZ0J2ZixtQkFBc0JsVyxjQUNoRixFQUNEME4sT0FBUSxDQUFBLENBQUdBLE9BQVEsQ0FBRTFOLFNBQUFBLEVBQVV3MUIsVUFBQUEsRUFBV3RmLEtBQUFBLEVBQU1qRCxnQkFBQUEsQ0FBaUIsQ0FBRSxLQUFLLEVBQUl4SixFQUFVanRDLGdCQUFpQndqQzt1QkFDcEZpVDtpQkFDTnVpQjtZQUNMdGYsSUFDWCxFQUNELElBQU03VSxFQUFNLENBQ1IwSSxRQUFTLGVBQ1RwNUIsS0FBTSxTQUNOaThCLFdBQVksU0FDWjVwQyxNQUFPbkcsRUFBUW1HLE1BQ2ZvYyxLQUFLeXRCLEdBQ0QsR0FBTSxDQUFDNm9CLEVBQVVDLElBS3pCLENBQTJCLENBQUV0NkMsT0FBQUEsTUFDekIsSUFFV2pWLEVBRkx3dkQsRUFBZSxHQUNmQyxFQUFhLEdBQ25CLElBQVd6dkQsS0FBT2lWLEVBQ0YsY0FBUmpWLEtBRVNwTCxNQUFNQyxRQUFRb2dCLEVBQU9qVixFQUFJLEVBQUl3dkQsRUFBZUMsR0FDcER6dkQsR0FBT2lWLEVBQU9qVixJQUV2QixNQUFPLENBQUN3dkQsRUFBY0MsRUFDMUIsR0Fmc0RocEIsQ0FBRyxFQUNqRDBvQixFQUFxQjFvQixFQUFLNm9CLENBQVEsRUFDbENKLEVBQW1Cem9CLEVBQUs4b0IsQ0FBTyxDQUNsQyxDQUNKLEVBWUQsU0FBU0osRUFBcUIxb0IsRUFBSytvQixFQUFlL29CLEVBQUl4eEIsUUFDbEQsR0FBTSxDQUFFZ3ZCLElBQUFBLEVBQUtyeEIsS0FBQUEsRUFBTXVELEdBQUFBLENBQUksRUFBR3N3QixFQUMxQixHQUF5QyxJQUFyQzF4QyxPQUFPMkosS0FBSzh3RCxDQUFZLEVBQUVsNkQsT0FBOUIsQ0FFQSxJQUNXaU8sRUFJRG1zRCxFQUxKNWlCLEVBQVU3SSxFQUFJdHVDLElBQUksU0FBUyxFQUNqQyxJQUFXNE4sS0FBUWlzRCxFQUFjLENBQzdCLElBQU0xZixFQUFPMGYsRUFBYWpzRCxHQUNOLElBQWhCdXNDLEVBQUt4NkMsU0FFSG82RCxHQUFjLEVBQUk1MkIsRUFBT2lVLGdCQUFnQjlJLEVBQUtyeEIsRUFBTXJQLEVBQU00UyxFQUFHaFosS0FBSzhqQyxhQUFhLEVBQ3JGd0YsRUFBSW1HLFVBQVUsQ0FDVmhULFNBQVVyMkIsRUFDVjZyRCxVQUFXdGYsRUFBS3g2QyxPQUNoQnc2QyxLQUFNQSxFQUFLdjZDLEtBQUssSUFBSSxDQUNoQyxDQUFTLEVBQ0c0Z0IsRUFBRzB3QixVQUNINUMsRUFBSTlELEdBQUd1dkIsRUFBYSxLQUNoQixJQUFLLElBQU1DLEtBQVc3ZixHQUNsQixFQUFJaFgsRUFBTzJULHdCQUF3QmhHLEVBQUtrcEIsQ0FBTyxDQUVuRSxDQUFhLEdBR0QxckIsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTXM1RCxVQUFtQixFQUFJNTJCLEVBQU8wVCxrQkFBa0IvRixFQUFLcUosRUFBTWhELENBQU8sSUFBSSxHQUNqRyxFQUFJaFUsRUFBT3lULG1CQUFtQjlGLEVBQUtxRyxDQUFPLEVBQzFDN0ksRUFBSTdGLEtBQU0sR0FFdEIsQ0F4QlEsQ0F5QlIsQ0FFQSxTQUFTOHdCLEVBQW1Cem9CLEVBQUtncEIsRUFBYWhwQixFQUFJeHhCLFFBQzlDLEdBQU0sQ0FBRWd2QixJQUFBQSxFQUFLcnhCLEtBQUFBLEVBQU0rd0IsUUFBQUEsRUFBU3h0QixHQUFBQSxDQUFJLEVBQUdzd0IsRUFDN0I4QixFQUFRdEUsRUFBSTlrQyxLQUFLLE9BQU8sRUFDOUIsSUFBSyxJQUFNb0UsS0FBUWtzRCxHQUNYLEVBQUkxcEIsRUFBTzVDLG1CQUFtQmh0QixFQUFJczVDLEVBQVdsc0QsRUFBSyxJQUV0RDBnQyxFQUFJOUQsSUFBRyxFQUFJckgsRUFBT2lVLGdCQUFnQjlJLEVBQUtyeEIsRUFBTXJQLEVBQU00UyxFQUFHaFosS0FBSzhqQyxhQUFhLEVBQUcsS0FDdkUsSUFBTThNLEVBQVN0SCxFQUFJaUgsVUFBVSxDQUFFL0osUUFBQUEsRUFBU3FLLFdBQVl6cUMsQ0FBTSxFQUFFZ2xDLENBQUssRUFDakU5QixFQUFJeUgsb0JBQW9CSCxFQUFReEYsQ0FBSyxDQUN4QyxFQUFFLElBQU10RSxFQUFJaEwsSUFBSXNQLEVBQU8sQ0FBQSxDQUFJLENBQzNCLEVBQ0Q5QixFQUFJclosR0FBR21iLENBQUssRUFFcEIsQ0FkQTl4QyxFQUFBMDRELHFCQUErQkEsRUFlL0IxNEQsRUFBQXk0RCxtQkFBNkJBLEVBQzdCejRELEVBQUFFLFFBQWtCc2tDLGtFQ2xGbEJsbUMsT0FBT21lLGVBQWU2K0IsR0FBUyxhQUFjLENBQUVqM0MsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTWcrQixFQUFTdDFCLEVBQWtCLEVBQzNCNi9CLEVBQVk1SCxFQUFnQyxFQUM1Q3NKLEVBQVVyaEMsRUFBOEIsRUFDeENxaUMsRUFBU21FLEVBQTZCLEVBbUc1QzZILEdBQUFwN0MsUUE5RlksQ0FDUmd0QyxRQUFTLHVCQUNUcDVCLEtBQU0sQ0FBQyxVQUNQaThCLFdBQVksQ0FBQyxVQUFXLFVBQ3hCcUosZUFBZ0IsQ0FBQSxFQUNoQjJILFlBQWEsQ0FBQSxFQUNiNTZDLE1BVlUsQ0FDVnlyQixRQUFTLHNDQUNUaWYsT0FBUSxDQUFBLENBQUdBLE9BQUFBLENBQVEsS0FBSyxFQUFJakUsRUFBVWp0QywwQkFBMkJreEMsRUFBT3NvQixxQkFDM0UsRUFRRzUyQyxLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS2h2QixPQUFBQSxFQUFRdXlCLGFBQUFBLEVBQWM1MEIsS0FBQUEsRUFBTW8wQixVQUFBQSxFQUFXN3dCLEdBQUFBLENBQUUsRUFBS3N3QixFQUUzRCxHQUFJLENBQUNPLEVBQ0QsTUFBTSxJQUFJeHFDLE1BQU0sMEJBQTBCLEVBQzlDLEdBQU0sQ0FBRXFxQyxVQUFBQSxFQUFXMXBDLEtBQUFBLENBQUksRUFBS2daLEVBRTVCLEdBREFBLEVBQUdpRyxNQUFRLENBQUEsRUFDbUIsUUFBMUJqZixFQUFLMHlELGtCQUE4QixFQUFBLEVBQUk5cEIsRUFBTzVDLG1CQUFtQmh0QixFQUFJbEIsQ0FBTSxFQUEvRSxDQUVBLElBQU1tSCxHQUFRLEVBQUkwYyxFQUFPcVQscUJBQXFCM0UsRUFBYW9FLFVBQVUsRUFDL0Rra0IsR0FBVyxFQUFJaDNCLEVBQU9xVCxxQkFBcUIzRSxFQUFhK0ssaUJBQWlCLEVBNkIvRSxTQUFTd2QsRUFBaUIvdkQsR0FDdEJpa0MsRUFBSWpyQixNQUFLLEVBQUlxcUIsRUFBVWp0QyxZQUFhd2MsS0FBUTVTLElBQU0sQ0FDOUQsQ0FDUSxTQUFTZ3dELEVBQXVCaHdELEdBQzVCLElBWVV1b0MsRUFab0IsUUFBMUJwckMsRUFBSzB5RCxrQkFBK0IxeUQsRUFBSzB5RCxrQkFBK0IsQ0FBQSxJQUFYNTZDLEVBQzdEODZDLEVBQWlCL3ZELENBQUcsRUFHVCxDQUFBLElBQVhpVixHQUNBd3hCLEVBQUltRyxVQUFVLENBQUVnakIsbUJBQW9CNXZELENBQUcsQ0FBRSxFQUN6Q3ltQyxFQUFJN3BDLE1BQU8sRUFDTmlxQyxHQUNENUMsRUFBSS9DLE1BQU8sR0FHRSxVQUFqQixPQUFPanNCLElBQXVCLEVBQUk4d0IsRUFBTzVDLG1CQUFtQmh0QixFQUFJbEIsQ0FBTSxJQUNoRXN6QixFQUFRdEUsRUFBSTlrQyxLQUFLLE9BQU8sRUFDQSxZQUExQmhDLEVBQUsweUQsa0JBQ0xJLEVBQXNCandELEVBQUt1b0MsRUFBTyxDQUFBLENBQUssRUFDdkN0RSxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWhJLEtBQUtrTixDQUFLLEVBQUcsS0FDOUI5QixFQUFJMEgsTUFBTyxFQUNYNGhCLEVBQWlCL3ZELENBQUcsQ0FDNUMsQ0FBcUIsSUFHRGl3RCxFQUFzQmp3RCxFQUFLdW9DLENBQUssRUFDM0IxQixHQUNENUMsRUFBSTlELElBQUcsRUFBSWtELEVBQVVoSSxLQUFLa04sQ0FBSyxFQUFHLElBQU10RSxFQUFJL0MsT0FBTyxHQUczRSxDQUNRLFNBQVMrdUIsRUFBc0Jqd0QsRUFBS3VvQyxFQUFPM2hCLEdBQ2pDOG1CLEVBQVksQ0FDZC9KLFFBQVMsdUJBQ1RnQixTQUFVM2tDLEVBQ1Y0a0MsYUFBY21CLEVBQU94bEIsS0FBS3FuQixHQUM3QixFQUNjLENBQUEsSUFBWGhoQixHQUNBN3hCLE9BQU9DLE9BQU8wNEMsRUFBVyxDQUNyQjlHLGNBQWUsQ0FBQSxFQUNmYSxhQUFjLENBQUEsRUFDZFosVUFBVyxDQUFBLENBQy9CLENBQWlCLEVBRUxKLEVBQUlpSCxVQUFVQSxFQUFXbkYsQ0FBSyxDQUMxQyxDQXRFWXRFLEVBQUlqRCxNQUFNLE1BQU9wdUIsRUFBTSxJQUNkd0osRUFBTTltQixRQUFXdzZELEVBQVN4NkQsT0FHM0IydUMsRUFBSTlELElBR01uZ0MsSUFDbEJySyxJQUFJdTZELEVBQ0osSUFFVUMsRUFZVixPQVhJRCxFQUhlLEVBQWY5ekMsRUFBTTltQixRQUVBNjZELEdBQWMsRUFBSXBxQixFQUFPL0MsZ0JBQWdCN3NCLEVBQUlxeEIsRUFBYW9FLFdBQVksWUFBWSxHQUMxRSxFQUFJOVMsRUFBT3VULGVBQWVwSSxFQUFLa3NCLEVBQWFud0QsQ0FBRyxHQUV4RG9jLEVBQU05bUIsUUFDRyxFQUFJK3RDLEVBQVVqSSxJQUFJLEdBQUdoZixFQUFNbG5CLElBQUksSUFBTyxFQUFJbXVDLEVBQVVqdEMsS0FBTTRKLFNBQVduSSxHQUFHLENBQUMsRUFHekV3ckMsRUFBVS9MLElBRXhCdzRCLEVBQVN4NkQsU0FDVDQ2RCxHQUFjLEVBQUk3c0IsRUFBVWpJLElBQUk4MEIsRUFBYSxHQUFHSixFQUFTNTZELElBQUksSUFBTyxFQUFJbXVDLEVBQVVqdEMsTUFBTSxFQUFJMGlDLEVBQU9rVCxZQUFZdkYsRUFBSzV1QyxDQUFDLFVBQVVtSSxJQUFNLENBQUMsSUFFbkksRUFBSXFqQyxFQUFVaEksS0FBSzYwQixDQUFXLENBQ2pELEdBcEJ3Q2x3RCxDQUFHLEVBQUcsSUFBTWd3RCxFQUF1Qmh3RCxDQUFHLENBQUMsRUFGM0Rnd0QsRUFBdUJod0QsQ0FBRyxDQUc5QyxDQUFhLEVBUEx5bUMsRUFBSXJaLElBQUcsRUFBSWlXLEVBQVVqdEMsS0FBTTR3QyxTQUFpQmpDLEVBQVFwdUMsUUFBUWl3QixRQUFRLENBSmhFLENBNkVQLENBQ0osb0RDdEdEN3hCLE9BQU9tZSxlQUFlMDRCLEdBQVMsYUFBYyxDQUFFOXdDLE1BQU8sQ0FBQSxFQUFNLEVBQzVELElBQU0wZ0QsRUFBYWg0QyxHQUFpQyxFQUM5Q3MxQixFQUFTMkMsRUFBa0IsRUFDM0JzSyxFQUFTcmlDLEVBQTZCLEVBQ3RDMHNELEVBQXlCbG1CLEdBQWlDLEVBK0NoRTBCLEdBQUFqMUMsUUE5Q1ksQ0FDUmd0QyxRQUFTLGFBQ1RwNUIsS0FBTSxTQUNOaThCLFdBQVksU0FDWnh0QixLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS2h2QixPQUFBQSxFQUFRdXlCLGFBQUFBLEVBQWM1MEIsS0FBQUEsRUFBTXVELEdBQUFBLENBQUUsRUFBS3N3QixFQUNmLFFBQTdCdHdCLEVBQUdoWixLQUFLMHlELGtCQUFvRTl1RCxLQUFBQSxJQUF0Q3ltQyxFQUFhdUssc0JBQ25EcWUsRUFBdUJ6NUQsUUFBUXFpQixLQUFLLElBQUl3aUMsRUFBVzVGLFdBQVd6L0IsRUFBSWk2QyxFQUF1Qno1RCxRQUFTLHNCQUFzQixDQUFDLEVBRTdILElBQ1c0TSxFQURMOHNELEdBQVcsRUFBSXYzQixFQUFPcVQscUJBQXFCbDNCLENBQU0sRUFDdkQsSUFBVzFSLEtBQVE4c0QsRUFDZmw2QyxFQUFHczZCLGtCQUFrQm50QyxJQUFJQyxDQUFJLEVBRTdCNFMsRUFBR2haLEtBQUt5d0MsYUFBZXlpQixFQUFTLzZELFFBQXVCLENBQUEsSUFBYjZnQixFQUFHaUcsUUFDN0NqRyxFQUFHaUcsTUFBUTJwQixFQUFPcEQsZUFBZXZtQixNQUFNNm5CLEdBQUssRUFBSThCLEVBQU8zQyxRQUFRaXRCLENBQVEsRUFBR2w2QyxFQUFHaUcsS0FBSyxHQUV0RixJQWtCb0I3WSxFQWxCZHFvQyxFQUFheWtCLEVBQVNoN0QsT0FBTyxHQUFPLEVBQUMsRUFBSTB3QyxFQUFPNUMsbUJBQW1CaHRCLEVBQUlsQixFQUFPcGQsRUFBRSxDQUFDLEVBQ3ZGLEdBQTBCLElBQXRCK3pDLEVBQVd0MkMsT0FBZixDQUVBLElBQU1pekMsRUFBUXRFLEVBQUk5a0MsS0FBSyxPQUFPLEVBQzlCLElBQUssSUFBTW9FLEtBQVFxb0MsRUFjQ3JvQyxFQWJEQSxFQWNSNFMsRUFBR2haLEtBQUt1dUMsYUFBZSxDQUFDdjFCLEVBQUd5d0IsZUFBMEM3bEMsS0FBQUEsSUFBekJrVSxFQUFPMVIsR0FBTTVNLFFBYjVEMjVELEVBQW9CL3NELENBQUksR0FHeEIwZ0MsRUFBSTlELElBQUcsRUFBSXJILEVBQU9pVSxnQkFBZ0I5SSxFQUFLcnhCLEVBQU1yUCxFQUFNNFMsRUFBR2haLEtBQUs4akMsYUFBYSxDQUFDLEVBQ3pFcXZCLEVBQW9CL3NELENBQUksRUFDbkI0UyxFQUFHMHdCLFdBQ0o1QyxFQUFJN0YsS0FBTSxFQUFDbkYsSUFBSXNQLEVBQU8sQ0FBQSxDQUFJLEVBQzlCdEUsRUFBSTFELE1BQU8sR0FFZmtHLEVBQUl0d0IsR0FBR3M2QixrQkFBa0JudEMsSUFBSUMsQ0FBSSxFQUNqQ2tqQyxFQUFJclosR0FBR21iLENBQUssRUFLaEIsU0FBUytuQixFQUFvQi9zRCxHQUN6QmtqQyxFQUFJaUgsVUFBVSxDQUNWL0osUUFBUyxhQUNUcUssV0FBWXpxQyxFQUNab2hDLFNBQVVwaEMsQ0FDYixFQUFFZ2xDLENBQUssQ0FDcEIsQ0F6QlksQ0EwQlAsQ0FDSixvRENsRER4ekMsT0FBT21lLGVBQWVxL0IsR0FBUyxhQUFjLENBQUV6M0MsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTWcrQixFQUFTdDFCLEVBQWtCLEVBQzNCNi9CLEVBQVk1SCxFQUFnQyxFQUM1Q3NLLEVBQVNyaUMsRUFBNkIsRUFDdENncEMsRUFBU2hwQyxFQUE2QixFQW9FNUM2dUMsR0FBQTU3QyxRQW5FWSxDQUNSZ3RDLFFBQVMsb0JBQ1RwNUIsS0FBTSxTQUNOaThCLFdBQVksU0FDWnh0QixLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS2h2QixPQUFBQSxFQUFRckMsS0FBQUEsRUFBTTQwQixhQUFBQSxFQUFjcnhCLEdBQUFBLENBQUUsRUFBS3N3QixFQUNoRCxJQUFRdHBDLEVBQVNnWixFQUFMLEtBQ1osSUFBTW82QyxHQUFXLEVBQUl6M0IsRUFBT3FULHFCQUFxQmwzQixDQUFNLEVBQ2pEdTdDLEVBQXNCRCxFQUFTbDdELE9BQU8sSUFBTyxFQUFJMHdDLEVBQU81QyxtQkFBbUJodEIsRUFBSWxCLEVBQU9wZCxFQUFFLENBQUMsRUFDL0YsR0FBd0IsSUFBcEIwNEQsRUFBU2o3RCxTQUNSazdELEVBQW9CbDdELFNBQVdpN0QsRUFBU2o3RCxRQUNuQzZnQixFQUFHaFosS0FBS3l3QyxhQUE0QixDQUFBLElBQWJ6M0IsRUFBR2lHLE9BRnBDLENBS0EsSUFBTXEwQyxFQUFrQnR6RCxFQUFLa25DLGNBQWdCLENBQUNsbkMsRUFBS3V6RCx5QkFBMkJscEIsRUFBYW9FLFdBQ3JGckQsRUFBUXRFLEVBQUk5a0MsS0FBSyxPQUFPLEVBSXRCaWQsR0FIUyxDQUFBLElBQWJqRyxFQUFHaUcsT0FBb0JqRyxFQUFHaUcsaUJBQWlCaW5CLEVBQVU3TCxPQUNyRHJoQixFQUFHaUcsT0FBUSxFQUFJc3dCLEVBQU9oSyxzQkFBc0J1QixFQUFLOXRCLEVBQUdpRyxLQUFLLEdBRTNDakcsR0FBTCxNQUdULElBQUssSUFBTXc2QyxLQUFPSixFQUNkLENBQUEsR0FBSUUsRUFDQUcsQ0FXcUJELEVBQUFBLEtBQUFBLEVBQ2xCcHRELEVBQUFBLEtBQUFBLEVBWkhxdEQsSUFXcUJELEVBWEdBLEVBWWhDLElBQUssSUFBTXB0RCxLQUFRa3RELEVBQ1gsSUFBSXZ6RCxPQUFPeXpELENBQUcsRUFBRTE2RCxLQUFLc04sQ0FBSSxJQUN6QixFQUFJd2lDLEVBQU94RCxpQkFBaUJwc0IsY0FBZ0I1UyxxQkFBd0JvdEQsaUNBQW1DLENBZDVFLENBQzNCeDZDLEVBQUcwd0IsVUFDSGdxQixFQUFtQkYsQ0FBRyxHQUd0QjFzQixFQUFJaEwsSUFBSXNQLEVBQU8sQ0FBQSxDQUFJLEVBQ25Cc29CLEVBQW1CRixDQUFHLEVBQ3RCMXNCLEVBQUk5RCxHQUFHb0ksQ0FBSyxFQVBnQixDQWtCeEMsU0FBU3NvQixFQUFtQkYsR0FDeEIxc0IsRUFBSWpELE1BQU0sTUFBT3B1QixFQUFNLElBQ25CcXhCLEVBQUk5RCxJQUFHLEVBQUlrRCxFQUFVanRDLE1BQU0sRUFBSTBpQyxFQUFPa1QsWUFBWXZGLEVBQUtrcUIsQ0FBRyxVQUFVM3dELEtBQVEsS0FDeEUsSUFBTTJ0QyxFQUFjNmlCLEVBQW9CeGxELFNBQVMybEQsQ0FBRyxFQUMvQ2hqQixHQUNEbEgsRUFBSWlILFVBQVUsQ0FDVi9KLFFBQVMsb0JBQ1RxSyxXQUFZMmlCLEVBQ1poc0IsU0FBVTNrQyxFQUNWNGtDLGFBQWM4SCxFQUFPbnNCLEtBQUtxbkIsR0FDN0IsRUFBRVcsQ0FBSyxFQUVScHlCLEVBQUdoWixLQUFLeXdDLGFBQXlCLENBQUEsSUFBVnh4QixFQUN2QjZuQixFQUFJanZDLFFBQU8sRUFBSXF1QyxFQUFVanRDLEtBQU1nbUIsS0FBU3BjLEtBQVEsQ0FBQSxDQUFJLEVBRTlDMnRDLEdBQWdCeDNCLEVBQUcwd0IsV0FHekI1QyxFQUFJOUQsSUFBRyxFQUFJa0QsRUFBVWhJLEtBQUtrTixDQUFLLEVBQUcsSUFBTXRFLEVBQUkvQyxPQUFPLENBRTNFLENBQWlCLENBQ2pCLENBQWEsQ0FDYixDQW5EQSxDQW9ESyxDQUNKLHdHQ3ZFRG5zQyxPQUFPbWUsZUFBZTQ5QyxHQUFTLGFBQWMsQ0FBRWgyRCxNQUFPLENBQUEsRUFBTSxFQUM1RCxJQUFNdW9DLEVBQVk3L0IsRUFBZ0MsRUFDNUN1aUMsRUFBU3RLLEVBQTZCLEVBeUQ1QyxTQUFTczFCLEVBQVU1NkMsRUFBSXd0QixHQUNiMXVCLEVBQVNrQixFQUFHbEIsT0FBTzB1QixHQUN6QixPQUFrQjVpQyxLQUFBQSxJQUFYa1UsR0FBd0IsRUFBQyxFQUFJOHdCLEVBQU81QyxtQkFBbUJodEIsRUFBSWxCLENBQU0sQ0FDNUUsQ0FDQTY3QyxHQUFBbjZELFFBeERZLENBQ1JndEMsUUFBUyxLQUNUNkMsV0FBWSxDQUFDLFNBQVUsV0FDdkJnUixZQUFhLENBQUEsRUFDYjU2QyxNQVJVLENBQ1Z5ckIsUUFBUyxDQUFBLENBQUdpZixPQUFBQSxDQUFRLEtBQUssRUFBSWpFLEVBQVVwcEMsbUJBQW9CcXRDLEVBQU8wcEIsbUJBQ2xFMXBCLE9BQVEsQ0FBQSxDQUFHQSxPQUFBQSxDQUFRLEtBQUssRUFBSWpFLEVBQVVqdEMsc0JBQXVCa3hDLEVBQU8wcEIsV0FDdkUsRUFNR2g0QyxLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS3VELGFBQUFBLEVBQWNyeEIsR0FBQUEsQ0FBSSxFQUFHc3dCLEVBQ1IxbEMsS0FBQUEsSUFBdEJ5bUMsRUFBYXlLLE1BQTRDbHhDLEtBQUFBLElBQXRCeW1DLEVBQWFwSixPQUNoRCxFQUFJMkgsRUFBT3hELGlCQUFpQnBzQixFQUFJLDJDQUEyQyxFQUUvRSxJQVNVNjZDLEVBVEpDLEVBQVVGLEVBQVU1NkMsRUFBSSxNQUFNLEVBQzlCKzZDLEVBQVVILEVBQVU1NkMsRUFBSSxNQUFNLEVBQ3BDLEdBQUs4NkMsR0FBWUMsRUFBakIsQ0FFQSxJQUFNM29CLEVBQVF0RSxFQUFJdHVDLElBQUksUUFBUyxDQUFBLENBQUksRUFDN0JrNEMsRUFBVzVKLEVBQUk5a0MsS0FBSyxRQUFRLEVBd0JsQyxTQUFTZ3lELEVBQWV4dEIsRUFBU3F0QixHQUM3QixNQUFPLEtBQ0gsSUFBTWpqQixFQUFTdEgsRUFBSWlILFVBQVUsQ0FBRS9KLFFBQUFBLENBQU8sRUFBSWtLLENBQVEsRUFDbEQ1SixFQUFJanZDLE9BQU91ekMsRUFBT3NGLENBQVEsRUFDMUJwSCxFQUFJeUgsb0JBQW9CSCxFQUFReEYsQ0FBSyxFQUNqQ3lvQixFQUNBL3NCLEVBQUlqdkMsT0FBT2c4RCxHQUFVLEVBQUkzdEIsRUFBVWp0QyxLQUFNdXRDLEdBQVMsRUFFbEQ4QyxFQUFJbUcsVUFBVSxDQUFFb2tCLFNBQVVydEIsQ0FBTyxDQUFFLENBQzFDLENBQ2IsQ0FsQmtCb0ssRUFBU3RILEVBQUlpSCxVQUFVLENBQ3pCL0osUUFBUyxLQUNUaUQsY0FBZSxDQUFBLEVBQ2ZhLGFBQWMsQ0FBQSxFQUNkWixVQUFXLENBQUEsQ0FDZCxFQUFFZ0gsQ0FBUSxFQUNYcEgsRUFBSTlELGVBQWVvTCxDQUFNLEVBcEI3QnRILEVBQUkwSCxNQUFPLEVBQ1A4aUIsR0FBV0MsR0FDTEYsRUFBVy9zQixFQUFJdHVDLElBQUksVUFBVSxFQUNuQzh3QyxFQUFJbUcsVUFBVSxDQUFFb2tCLFNBQUFBLEVBQVUsRUFDMUIvc0IsRUFBSTlELEdBQUcwTixFQUFVc2pCLEVBQWUsT0FBUUgsQ0FBUSxFQUFHRyxFQUFlLE9BQVFILENBQVEsQ0FBQyxHQUU5RUMsRUFDTGh0QixFQUFJOUQsR0FBRzBOLEVBQVVzakIsRUFBZSxNQUFNLENBQUMsRUFHdkNsdEIsRUFBSTlELElBQUcsRUFBSWtELEVBQVVoSSxLQUFLd1MsQ0FBUSxFQUFHc2pCLEVBQWUsTUFBTSxDQUFDLEVBRS9EMXFCLEVBQUlvSSxLQUFLdEcsRUFBTyxJQUFNOUIsRUFBSTdwQyxNQUFNLENBQUEsQ0FBSSxDQUFDLENBaEJqQyxDQXFDUCxDQUNKLHVEQzFERDdILE9BQU9tZSxlQUFlaytDLEdBQVMsYUFBYyxDQUFFdDJELE1BQU8sQ0FBQSxFQUFNLEVBQzVELElBQU11MkQsRUFBb0I3dEQsR0FBNEIsRUFDaEQ4dEQscUJDRk52OEQsT0FBT21lLGVBQWVxK0MsR0FBUyxhQUFjLENBQUV6MkQsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTTAyRCxFQUFVaHVELEdBQWtCLEVBUWxDK3RELEdBQUE1NkQsUUFQWSxDQUNSZ3RDLFFBQVMsY0FDVHA1QixLQUFNLFFBQ05pOEIsV0FBWSxDQUFDLFNBQ2I1WCxPQUFRLGNBQ1I1VixLQUFNLElBQVMsRUFBSXc0QyxFQUFRaEQsZUFBZS9uQixFQUFLLE9BQU8sQ0FDekQsY0RONkMsRUFDeEMrcUIsRUFBVTl0RCxHQUFrQixFQUM1Qit0RCxxQkVKTjE4RCxPQUFPbWUsZUFBZXcrQyxHQUFTLGFBQWMsQ0FBRTUyRCxNQUFPLENBQUEsRUFBTSxFQUM1RCxJQUFNdW9DLEVBQVk3L0IsRUFBZ0MsRUFDNUN1aUMsRUFBU3RLLEVBQTZCLEVBQ3RDM0MsRUFBU3AxQixFQUFrQixFQUMzQjJ0RCxFQUFvQm5uQixHQUE0QixFQXVCdER3bkIsR0FBQS82RCxRQWxCWSxDQUNSZ3RDLFFBQVMsUUFDVHA1QixLQUFNLFFBQ05pOEIsV0FBWSxDQUFDLFNBQVUsV0FDdkI1WCxPQUFRLGNBQ1JoeUIsTUFUVSxDQUNWeXJCLFFBQVMsQ0FBQSxDQUFHaWYsT0FBUSxDQUFFcHRDLElBQUFBLENBQUcsQ0FBSSxLQUFLLEVBQUltcEMsRUFBVXBwQywrQkFBZ0NDLFVBQ2hGb3RDLE9BQVEsQ0FBQSxDQUFHQSxPQUFRLENBQUVwdEMsSUFBQUEsQ0FBRyxDQUFJLEtBQUssRUFBSW1wQyxFQUFVanRDLGFBQWM4RCxJQUNoRSxFQU9HOGUsS0FBS3l0QixHQUNELEdBQU0sQ0FBRXh4QixPQUFBQSxFQUFRdXlCLGFBQUFBLEVBQWNyeEIsR0FBQUEsQ0FBSSxFQUFHc3dCLEVBQzdCOHFCLEVBQWdCL3BCLEVBQUwsWUFDbkJyeEIsRUFBRy9ILE1BQVEsQ0FBQSxHQUNQLEVBQUkyM0IsRUFBTzVDLG1CQUFtQmh0QixFQUFJbEIsQ0FBTSxJQUV4Q3M4QyxHQUNBLEVBQUlGLEVBQWtCOUMseUJBQXlCOW5CLEVBQUs4cUIsQ0FBVyxFQUUvRDlxQixFQUFJclosSUFBRyxFQUFJMEwsRUFBT2lULGVBQWV0RixDQUFHLENBQUMsRUFDNUMsQ0FDSixjRnRCeUMsRUFDcENrckIsRUFBYXhuQixHQUFxQixFQUNsQ3luQixFQUFpQnhiLEdBQXlCLEVBQzFDeWIscUJHUE45OEQsT0FBT21lLGVBQWU4K0IsR0FBUyxhQUFjLENBQUVsM0MsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTXVvQyxFQUFZNy9CLEVBQWdDLEVBQzVDdWlDLEVBQVN0SyxFQUE2QixFQWlDNUN1VyxHQUFBcjdDLFFBNUJZLENBQ1JndEMsUUFBUyxnQkFDVHA1QixLQUFNLFNBQ05pOEIsV0FBWSxDQUFDLFNBQVUsV0FDdkI1cEMsTUFSVSxDQUNWeXJCLFFBQVMsOEJBQ1RpZixPQUFRLENBQUEsQ0FBR0EsT0FBQUEsQ0FBUSxLQUFLLEVBQUlqRSxFQUFVanRDLG9CQUFxQmt4QyxFQUFPQyxlQUNyRSxFQU1HdnVCLEtBQUt5dEIsR0FDRCxHQUFNLENBQUV4QyxJQUFBQSxFQUFLaHZCLE9BQUFBLEVBQVFyQyxLQUFBQSxFQUFNdUQsR0FBQUEsQ0FBSSxFQUFHc3dCLEVBQ2xDLEdBQUksRUFBQSxFQUFJVixFQUFPNUMsbUJBQW1CaHRCLEVBQUlsQixDQUFNLEVBQTVDLENBRUEsSUFBTXN6QixFQUFRdEUsRUFBSTlrQyxLQUFLLE9BQU8sRUFDOUI4a0MsRUFBSWpELE1BQU0sTUFBT3B1QixFQUFNLElBQ25CNnpCLEVBQUltRyxVQUFVLENBQUVyRixhQUFjdm5DLENBQUcsQ0FBRSxFQUNuQ3ltQyxFQUFJaUgsVUFBVSxDQUNWL0osUUFBUyxnQkFDVC93QixLQUFNNVMsRUFDTnFyQyxVQUFXLENBQUMsVUFDWjlELGFBQWN2bkMsRUFDZDRtQyxjQUFlLENBQUEsQ0FDbEIsRUFBRTJCLENBQUssRUFDUnRFLEVBQUk5RCxJQUFHLEVBQUlrRCxFQUFVaEksS0FBS2tOLENBQUssRUFBRyxLQUM5QjlCLEVBQUk3cEMsTUFBTSxDQUFBLENBQUksRUFDVHVaLEVBQUcwd0IsV0FDSjVDLEVBQUkvQyxNQUFPLENBQy9CLENBQWEsQ0FDYixDQUFTLEVBQ0R1RixFQUFJclosR0FBR21iLENBQUssQ0FqQlIsQ0FrQlAsQ0FDSixjSDNCaUQsRUFDNUM2bkIsRUFBeUI5WixHQUFpQyxFQUMxRHdiLEVBQWV0YixHQUF1QixFQUN0Q3ViLEVBQXNCdGIsR0FBOEIsRUFDcER1YixxQklYTmo5RCxPQUFPbWUsZUFBZW1vQixHQUFTLGFBQWMsQ0FBRXZnQyxNQUFPLENBQUEsRUFBTSxFQUM1RCxJQUFNaXJDLEVBQVN2aUMsRUFBNkIsRUFzQjVDNjNCLEdBQUExa0MsUUFyQlksQ0FDUmd0QyxRQUFTLE1BQ1Q2QyxXQUFZLENBQUMsU0FBVSxXQUN2QmdSLFlBQWEsQ0FBQSxFQUNieCtCLEtBQUt5dEIsR0FDRCxHQUFNLENBQUV4QyxJQUFBQSxFQUFLaHZCLE9BQUFBLEVBQVFrQixHQUFBQSxDQUFJLEVBQUdzd0IsR0FDeEIsRUFBSVYsRUFBTzVDLG1CQUFtQmh0QixFQUFJbEIsQ0FBTSxFQUN4Q3d4QixFQUFJbVIsS0FBTSxHQUdSclAsRUFBUXRFLEVBQUk5a0MsS0FBSyxPQUFPLEVBQzlCc25DLEVBQUlpSCxVQUFVLENBQ1YvSixRQUFTLE1BQ1RpRCxjQUFlLENBQUEsRUFDZmEsYUFBYyxDQUFBLEVBQ2RaLFVBQVcsQ0FBQSxDQUNkLEVBQUUwQixDQUFLLEVBQ1I5QixFQUFJa1IsV0FBV3BQLEVBQU8sSUFBTTlCLEVBQUkwSCxRQUFTLElBQU0xSCxFQUFJN3BDLE9BQU8sRUFDN0QsRUFDREEsTUFBTyxDQUFFeXJCLFFBQVMsbUJBQXFCLENBQzFDLGNKWDZCLEVBQ3hCNHBDLGFLWk5sOUQsT0FBT21lLGVBQWVpL0IsR0FBUyxhQUFjLENBQUVyM0MsTUFBTyxDQUFBLEVBQU0sRUFFdERtZ0MsRUFBTSxDQUNSMEksUUFBUyxRQUNUNkMsV0FBWSxRQUNaZ1IsWUFBYSxDQUFBLEVBQ2J4K0IsS0FMV3hWLEVBQWtCLEVBS2hCc29DLGNBQ2JsdkMsTUFBTyxDQUFFeXJCLFFBQVMsOEJBQWdDLENBQ3JELEVBQ0Q4cEIsR0FBQXg3QyxRQUFrQnNrQyxXQVBaQSxFTFdOLElBQU1pM0IscUJNYk5uOUQsT0FBT21lLGVBQWVrL0IsR0FBUyxhQUFjLENBQUV0M0MsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTXVvQyxFQUFZNy9CLEVBQWdDLEVBQzVDdWlDLEVBQVN0SyxFQUE2QixFQXVENUMyVyxHQUFBejdDLFFBbERZLENBQ1JndEMsUUFBUyxRQUNUNkMsV0FBWSxRQUNaZ1IsWUFBYSxDQUFBLEVBQ2I1NkMsTUFSVSxDQUNWeXJCLFFBQVMseUNBQ1RpZixPQUFRLENBQUEsQ0FBR0EsT0FBQUEsQ0FBUSxLQUFLLEVBQUlqRSxFQUFVanRDLHNCQUF1Qmt4QyxFQUFPNnFCLFVBQ3ZFLEVBTUduNUMsS0FBS3l0QixHQUNELEdBQU0sQ0FBRXhDLElBQUFBLEVBQUtodkIsT0FBQUEsRUFBUXV5QixhQUFBQSxFQUFjcnhCLEdBQUFBLENBQUksRUFBR3N3QixFQUUxQyxHQUFJLENBQUM3eEMsTUFBTUMsUUFBUW9nQixDQUFNLEVBQ3JCLE1BQU0sSUFBSXpZLE1BQU0sMEJBQTBCLEVBQzlDLEdBQUkyWixDQUFBQSxFQUFHaFosS0FBS2kxRCxlQUFpQjVxQixDQUFBQSxFQUFhNHFCLGNBQTFDLENBRUEsSUFBTTFELEVBQVN6NUMsRUFDVHN6QixFQUFRdEUsRUFBSXR1QyxJQUFJLFFBQVMsQ0FBQSxDQUFLLEVBQzlCdzhELEVBQVVsdUIsRUFBSXR1QyxJQUFJLFVBQVcsSUFBSSxFQUNqQ2s0QyxFQUFXNUosRUFBSTlrQyxLQUFLLFFBQVEsRUFDbENzbkMsRUFBSW1HLFVBQVUsQ0FBRXVsQixRQUFBQSxFQUFTLEVBRXpCbHVCLEVBQUl2QyxNQUVKLFdBQ0lndEIsRUFBTzl2RCxRQUFRLENBQUNpdEMsRUFBSzkxQyxLQUNqQkosSUFBSW80QyxHQUNBLEVBQUloSSxFQUFPNUMsbUJBQW1CaHRCLEVBQUkwMUIsQ0FBRyxFQUNyQzVILEVBQUloTCxJQUFJNFUsRUFBVSxDQUFBLENBQUksRUFHdEJFLEVBQVN0SCxFQUFJaUgsVUFBVSxDQUNuQi9KLFFBQVMsUUFDVHFLLFdBQVlqNEMsRUFDWjZ3QyxjQUFlLENBQUEsQ0FDbEIsRUFBRWlILENBQVEsRUFFUCxFQUFKOTNDLEdBQ0FrdUMsRUFDSzlELElBQUcsRUFBSWtELEVBQVVqdEMsS0FBTXkzQyxRQUFldEYsR0FBTyxFQUM3Q3Z6QyxPQUFPdXpDLEVBQU8sQ0FBQSxDQUFLLEVBQ25CdnpDLE9BQU9tOUQsR0FBUyxFQUFJOXVCLEVBQVVqdEMsTUFBTys3RCxNQUFZcDhELElBQUksRUFDckRxb0MsS0FBTSxFQUVmNkYsRUFBSTlELEdBQUcwTixFQUFVLEtBQ2I1SixFQUFJanZDLE9BQU91ekMsRUFBTyxDQUFBLENBQUksRUFDdEJ0RSxFQUFJanZDLE9BQU9tOUQsRUFBU3A4RCxDQUFDLEVBQ2pCZzRDLEdBQ0F0SCxFQUFJOUQsZUFBZW9MLEVBQVExSyxFQUFVN0wsSUFBSSxDQUNqRSxDQUFpQixDQUNqQixDQUFhLENBQ2IsQ0E3QitCLEVBQ3ZCaVAsRUFBSXB0QyxPQUFPa3ZDLEVBQU8sSUFBTTlCLEVBQUkwSCxNQUFPLEVBQUUsSUFBTTFILEVBQUk3cEMsTUFBTSxDQUFBLENBQUksQ0FBQyxDQVJ0RCxDQXFDUCxDQUNKLGNOM0NpQyxFQUM1QnkxRCxxQk9kTnQ5RCxPQUFPbWUsZUFBZWcvQixHQUFTLGFBQWMsQ0FBRXAzQyxNQUFPLENBQUEsRUFBTSxFQUM1RCxJQUFNaXJDLEVBQVN2aUMsRUFBNkIsRUFtQjVDMHVDLEdBQUF2N0MsUUFsQlksQ0FDUmd0QyxRQUFTLFFBQ1Q2QyxXQUFZLFFBQ1p4dEIsS0FBS3l0QixHQUNELEdBQU0sQ0FBRXhDLElBQUFBLEVBQUtodkIsT0FBQUEsRUFBUWtCLEdBQUFBLENBQUksRUFBR3N3QixFQUU1QixHQUFJLENBQUM3eEMsTUFBTUMsUUFBUW9nQixDQUFNLEVBQ3JCLE1BQU0sSUFBSXpZLE1BQU0sMEJBQTBCLEVBQzlDLElBQU0rckMsRUFBUXRFLEVBQUk5a0MsS0FBSyxPQUFPLEVBQzlCOFYsRUFBT3JXLFFBQVEsQ0FBQ2l0QyxFQUFLOTFDLE1BQ2IsRUFBSWd3QyxFQUFPNUMsbUJBQW1CaHRCLEVBQUkwMUIsQ0FBRyxJQUVuQ2tDLEVBQVN0SCxFQUFJaUgsVUFBVSxDQUFFL0osUUFBUyxRQUFTcUssV0FBWWo0QyxDQUFHLEVBQUV3eUMsQ0FBSyxFQUN2RTlCLEVBQUlyWixHQUFHbWIsQ0FBSyxFQUNaOUIsRUFBSTlELGVBQWVvTCxDQUFNLEVBQ3JDLENBQVMsQ0FDSixDQUNKLGNQTGlDLEVBQzVCdWtCLEVBQU9DLEdBQWUsRUFDdEJDLHFCUWhCTno5RCxPQUFPbWUsZUFBZXUvQyxHQUFTLGFBQWMsQ0FBRTMzRCxNQUFPLENBQUEsRUFBTSxFQUM1RCxJQUFNaXJDLEVBQVN2aUMsRUFBNkIsRUFTNUNpdkQsR0FBQTk3RCxRQVJZLENBQ1JndEMsUUFBUyxDQUFDLE9BQVEsUUFDbEI2QyxXQUFZLENBQUMsU0FBVSxXQUN2Qnh0QixLQUFLLENBQUUycUIsUUFBQUEsRUFBUzZELGFBQUFBLEVBQWNyeEIsR0FBQUEsQ0FBRSxHQUNKcFYsS0FBQUEsSUFBcEJ5bUMsRUFBYXJILEtBQ2IsRUFBSTRGLEVBQU94RCxpQkFBaUJwc0IsTUFBUXd0Qiw0QkFBa0MsQ0FDN0UsQ0FDSixjUk91QyxFQXlCeEN5dEIsR0FBQXo2RCxRQXhCQSxTQUF1Qis3RCxFQUFZLENBQUEsR0FDL0IsSUFBTXRCLEVBQWEsQ0FFZlksRUFBTXI3RCxRQUNOczdELEVBQVF0N0QsUUFDUnU3RCxFQUFRdjdELFFBQ1IwN0QsRUFBUTE3RCxRQUNSMjdELEVBQUszN0QsUUFDTDY3RCxFQUFXNzdELFFBRVhrN0QsRUFBZ0JsN0QsUUFDaEJ5NUQsRUFBdUJ6NUQsUUFDdkJpN0QsRUFBZWo3RCxRQUNmbTdELEVBQWFuN0QsUUFDYm83RCxFQUFvQnA3RCxTQVF4QixPQUxJKzdELEVBQ0F0QixFQUFXbDRELEtBQUtvNEQsRUFBYzM2RCxRQUFTODZELEVBQVk5NkQsT0FBTyxFQUUxRHk2RCxFQUFXbDRELEtBQUttNEQsRUFBa0IxNkQsUUFBUzY2RCxFQUFRNzZELE9BQU8sRUFDOUR5NkQsRUFBV2w0RCxLQUFLeTRELEVBQVdoN0QsT0FBTyxFQUMzQnk2RCxDQUNYLDZEU3hDQXI4RCxPQUFPbWUsZUFBZTlYLEdBQVMsYUFBYyxDQUFFTixNQUFPLENBQUEsRUFBTSxFQUM1RCxJQUFNdW9DLEVBQVk3L0IsRUFBZ0MsRUF3RmxEcEksR0FBQXpFLFFBbkZZLENBQ1JndEMsUUFBUyxTQUNUcDVCLEtBQU0sQ0FBQyxTQUFVLFVBQ2pCaThCLFdBQVksU0FDWjVDLE1BQU8sQ0FBQSxFQUNQaG5DLE1BVFUsQ0FDVnlyQixRQUFTLENBQUEsQ0FBR2lnQixXQUFBQSxDQUFZLEtBQUssRUFBSWpGLEVBQVVwcEMsMEJBQTJCcXVDLEtBQ3RFaEIsT0FBUSxDQUFBLENBQUdnQixXQUFBQSxDQUFZLEtBQUssRUFBSWpGLEVBQVVqdEMsY0FBZWt5QyxJQUM1RCxFQU9HdHZCLEtBQUt5dEIsRUFBSzZULEdBQ04sR0FBTSxDQUFFclcsSUFBQUEsRUFBS3J4QixLQUFBQSxFQUFNZ3hCLE1BQUFBLEVBQU8zdUIsT0FBQUEsRUFBUXF6QixXQUFBQSxFQUFZbnlCLEdBQUFBLENBQUUsRUFBS3N3QixFQUMvQyxDQUFFdHBDLEtBQUFBLEVBQU1ncUMsY0FBQUEsRUFBZWQsVUFBQUEsRUFBV3Z5QyxLQUFBQSxDQUFNLEVBQUdxaUIsRUFDakQsR0FBS2haLEVBQUtrcUQsZ0JBRVYsR0FBSXpqQixFQUNBK3VCLENBSUEsSUFBTUMsRUFBTzN1QixFQUFJdkUsV0FBVyxVQUFXLENBQ25DbnFCLElBQUt6aEIsRUFBSzJ4RCxRQUNWenNDLEtBQU03YixFQUFLNmIsS0FBS3lzQyxPQUNoQyxDQUFhLEVBQ0tvTixFQUFPNXVCLEVBQUlqTCxNQUFNLFFBQVEsRUFBSXFLLEVBQVVqdEMsS0FBTXc4RCxLQUFRdHFCLElBQWEsRUFDbEV3cUIsRUFBUTd1QixFQUFJdHVDLElBQUksT0FBTyxFQUN2QnlGLEVBQVM2b0MsRUFBSXR1QyxJQUFJLFFBQVEsRUFFL0JzdUMsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsWUFBYXk4RCxzQkFBeUJBLHVCQUEyQixJQUFNNXVCLEVBQUlqdkMsT0FBTzg5RCxHQUFPLEVBQUl6dkIsRUFBVWp0QyxLQUFNeThELG9CQUF1QixFQUFFNzlELE9BQU9vRyxHQUFRLEVBQUlpb0MsRUFBVWp0QyxLQUFNeThELFlBQWUsRUFBRyxJQUFNNXVCLEVBQUlqdkMsT0FBTzg5RCxHQUFPLEVBQUl6dkIsRUFBVWp0QyxZQUFhLEVBQUVwQixPQUFPb0csRUFBUXkzRCxDQUFJLENBQUMsRUFDelJwc0IsRUFBSW9SLFdBQVUsRUFBSXhVLEVBQVVqSSxJQUVFLENBQUEsSUFBdEJqK0IsRUFBS2tuQyxhQUNFaEIsRUFBVS9MLEtBQ2QsRUFBSStMLEVBQVVqdEMsS0FBTWt5QyxTQUFrQmx0QyxLQUVqRCxLQUNJLElBQU0yM0QsRUFBYTFzQixFQUFVQyxRQUN2QixFQUFJakQsRUFBVWp0QyxNQUFPeThELG1CQUFzQnozRCxLQUFVd1gsUUFBV3hYLEtBQVV3WCxPQUMxRSxFQUFJeXdCLEVBQVVqdEMsS0FBTWdGLEtBQVV3WCxLQUM5Qm9nRCxHQUFZLEVBQUkzdkIsRUFBVWp0QyxhQUFjZ0YscUJBQTBCMjNELE9BQWdCMzNELFVBQWV3WCxNQUN2RyxPQUFPLEVBQUl5d0IsRUFBVWp0QyxLQUFNZ0YsUUFBYUEsaUJBQXNCMDNELFNBQWF4WSxTQUFnQjBZLEdBQzNHLEdBWm9FLENBQUUsQ0FBQyxDQWJ0QyxLQUVyQkMsQ0EwQkEsSUFBTUMsRUFBWXAvRCxFQUFLMnhELFFBQVF4d0MsR0FDL0IsR0FBS2krQyxHQUlMLEdBQWtCLENBQUEsSUFBZEEsRUFBSixDQUVBLEdBQU0sQ0FBQ0MsRUFBUy8zRCxFQUFRZzRELElBYUxDLElBQ2YsSUFBTXI2QyxFQUFPcTZDLGFBQWtCbjJELFFBQ3pCLEVBQUltbUMsRUFBVXBNLFlBQVlvOEIsQ0FBTSxFQUNoQ2wyRCxFQUFLNmIsS0FBS3lzQyxTQUNOLEVBQUlwaUIsRUFBVWp0QyxLQUFNK0csRUFBSzZiLEtBQUt5c0MsV0FBVSxFQUFJcGlCLEVBQVVsTSxhQUFhbGlCLENBQU0sSUFDekVsVSxLQUFBQSxFQUNKdXlELEVBQU1ydkIsRUFBSXZFLFdBQVcsVUFBVyxDQUFFMS9CLElBQUtpVixFQUFRTSxJQUFLODlDLEVBQVFyNkMsS0FBQUEsRUFBTSxFQUN4RSxNQUFxQixVQUFqQixPQUFPcTZDLEdBQXdCQSxhQUFrQm4yRCxPQUc5QyxDQUFDLFNBQVVtMkQsRUFBUUMsR0FGZixDQUFDRCxFQUFPOW9ELE1BQVEsU0FBVThvRCxFQUFPdGtCLFVBQVUsRUFBSTFMLEVBQVVqdEMsS0FBTWs5RCxhQUcxRixHQXhCd0RKLENBQVMsRUFDakRDLElBQVk3WSxHQUNaN1QsRUFBSW9JLE1BdUJSLEtBQ0ksR0FBd0IsVUFBcEIsT0FBT3FrQixHQUEyQkEsYUFBcUJoMkQsUUFBV2cyRCxDQUFBQSxFQUFVMWtELE1BS2hGLE1BQXdCLFlBQWpCLE9BQU9wVCxHQUF1QixFQUFJaW9DLEVBQVVqdEMsS0FBTWc5RCxLQUFVeGdELE1BQVUsRUFBSXl3QixFQUFVanRDLEtBQU1nOUQsVUFBZXhnRCxLQUo1RyxHQUFLeXpCLEVBQVVDLE9BRWYsT0FBTyxFQUFJakQsRUFBVWp0QyxXQUFZZzlELEtBQVV4Z0QsS0FEdkMsTUFBTSxJQUFJcFcsTUFBTSw2QkFBNkIsQ0FJckUsSUE5QnlDLENBSHpCLENBQUEsS0FKQSsyRCxDQVNBLEdBQTBCLENBQUEsSUFBdEJwMkQsRUFBS2tuQyxhQUlULE1BQU0sSUFBSTduQyxNQUFNZzNELEdBQVksRUFDNUIsU0FBU0EsSUFDTCx5QkFBMEJ2K0MsaUNBQXNDa3lCLElBQ3BGLENBTm9CcnpDLEVBQUsyd0MsT0FBT2xvQixLQUFLaTNDLEdBQVksQ0FWbEIsQ0E1QkgsQ0FtRXZCLENBQ0osOENDdEZLN0YsRUFDQThGLEVDREFyNEQsRURHQXM0RCxFQUNBQyxtQkFOTjUrRCxPQUFPbWUsZUFBZTBnRCxHQUFTLGFBQWMsQ0FBRTk0RCxNQUFPLENBQUEsRUFBTSxFQUN0RGd4RCxFQUFTdG9ELEdBQWlCLEVBQzFCbXFELEVBQWVseUIsR0FBdUIsRUFDdENnNEIsRUFBZS92RCxHQUF1QixZQ0g1QzNPLE9BQU9tZSxlQUFlMmdELEdBQVMsYUFBYyxDQUFFLzRELE1BQU8sQ0FBQSxFQUFNLEVBRXRETSxFQUFTLENBREVvSSxHQUFtQixFQUNYN00sU0FDekJrOUQsR0FBQWw5RCxRQUFrQnlFLEdEQ1owNEQsZUVKTi8rRCxPQUFPbWUsZUFBZTZnRCxHQUFTLGFBQWMsQ0FBRWo1RCxNQUFPLENBQUEsRUFBTSxFQUM1RGk1RCxHQUFBQyxrQkFBNEJELEdBQUFFLG1CQUE2Qmx6RCxLQUFBQSxFQUN6RGd6RCxHQUFBRSxtQkFBNkIsQ0FDekIsUUFDQSxjQUNBLFVBQ0EsYUFDQSxXQUNBLFlBQ0EsWUFFSkYsR0FBQUMsa0JBQTRCLENBQ3hCLG1CQUNBLGtCQUNBLGtCRlRFTixLQUNBQyxFQUFxQixDQUN2QjdILEVBQU9uMUQsUUFDUGczRCxFQUFhaDNELFNBQ2IsRUFBSTg4RCxFQUFhOThELFNBQVUsRUFDM0JtOUQsRUFBU245RCxRQUNUKzhELEVBQVdPLG1CQUNYUCxFQUFXTSxtQkFFZkosR0FBQWo5RCxRQUFrQmc5RCx1REdkbEI1K0QsT0FBT21lLGVBQWVrL0MsR0FBUyxhQUFjLENBQUV0M0QsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTXVvQyxFQUFZNy9CLEVBQWdDLEVBQzVDMHdELGFDRk5uL0QsT0FBT21lLGVBQWUwMUIsR0FBUyxhQUFjLENBQUU5dEMsTUFBTyxDQUFBLEVBQU0sRUFDMUM4dEMsR0FBQXVyQixXQUFHcHpELEtBQUFBLEVBS0g2bkMsR0FBQXVyQixXQUFrQyxDQUZoREMsSUFBb0IsTUFDcEJDLFFBQXdCLFNBQzBCLE9ESGhEbFEsRUFBWXpnRCxHQUF3QixFQUNwQ3dnRCxFQUFjaGEsR0FBa0MsRUFDaERuRSxFQUFTb0UsRUFBNkIsRUFnRzVDaW9CLEdBQUF6N0QsUUF6RlksQ0FDUmd0QyxRQUFTLGdCQUNUcDVCLEtBQU0sU0FDTmk4QixXQUFZLFNBQ1o1cEMsTUFWVSxDQUNWeXJCLFFBQVMsQ0FBQSxDQUFHaWYsT0FBUSxDQUFFZ3RCLFdBQUFBLEVBQVkxakQsUUFBQUEsQ0FBTyxDQUFJLElBQUswakQsSUFBZUosRUFBUUMsV0FBV0MsWUFDdEV4akQscUNBQ1NBLHNCQUN2QjAyQixPQUFRLENBQUEsQ0FBR0EsT0FBUSxDQUFFZ3RCLFdBQUFBLEVBQVlyakQsSUFBQUEsRUFBS0wsUUFBQUEsQ0FBUyxDQUFFLEtBQUssRUFBSXl5QixFQUFVanRDLGFBQWNrK0QsV0FBb0IxakQsZ0JBQXNCSyxJQUMvSCxFQU1HK0gsS0FBS3l0QixHQUNELEdBQU0sQ0FBRXhDLElBQUFBLEVBQUtyeEIsS0FBQUEsRUFBTXFDLE9BQUFBLEVBQVF1eUIsYUFBQUEsRUFBY3J4QixHQUFBQSxDQUFFLEVBQUtzd0IsRUFDeEMyTCxFQUFVNUssRUFBTCxNQUNiLEdBQUksQ0FBQ3J4QixFQUFHaFosS0FBS2kxRCxjQUNULE1BQU0sSUFBSTUxRCxNQUFNLDhDQUE4QyxFQUVsRSxJQUFNb1UsRUFBVXFFLEVBQU9zeUIsYUFDdkIsR0FBc0IsVUFBbEIsT0FBTzMyQixFQUNQLE1BQU0sSUFBSXBVLE1BQU0sc0NBQXNDLEVBQzFELEdBQUl5WSxFQUFPcy9DLFFBQ1AsTUFBTSxJQUFJLzNELE1BQU0seUNBQXlDLEVBQzdELEdBQUksQ0FBQzQxQyxFQUNELE1BQU0sSUFBSTUxQyxNQUFNLHVDQUF1QyxFQUMzRCxJQUFNK3JDLEVBQVF0RSxFQUFJdHVDLElBQUksUUFBUyxDQUFBLENBQUssRUFDOUJzYixFQUFNZ3pCLEVBQUlqTCxNQUFNLE9BQU8sRUFBSXFLLEVBQVVqdEMsS0FBTXdjLEtBQU8sRUFBSXl3QixFQUFVbE0sYUFBYXZtQixDQUFPLEdBQUcsRUFDN0ZxekIsRUFBSTlELElBQUcsRUFBSWtELEVBQVVqdEMsWUFBYTZhLGdCQUFtQixLQUdqRCxJQUVXdWpELEVBRkxELEdBZ0JWLEtBQ0ksSUFBSXo4QixFQUNFMjhCLEVBQWUsR0FDZkMsRUFBY0MsRUFBWW50QixDQUFZLEVBQ3hDb3RCLEVBQWMsQ0FBQSxFQUNsQixJQUFLai9ELElBQUlJLEVBQUksRUFBR0EsRUFBSXE4QyxFQUFNOThDLE9BQVFTLENBQUMsR0FBSSxDQUNuQ0osSUFBSWsyQyxFQUFNdUcsRUFBTXI4QyxHQUNoQixHQUFLODFDLE1BQUFBLEdBQTBDQSxFQUFJbU4sTUFBUyxFQUFDLEVBQUlqVCxFQUFPdkMsc0JBQXNCcUksRUFBSzExQixFQUFHcmlCLEtBQUt5dkMsS0FBSyxFQUFHLENBQy9HLElBQU1odUIsRUFBTXMyQixFQUFJbU4sS0FJaEIsR0FBWWo0QyxLQUFBQSxLQURSOHFDLEdBRkpBLEVBQU1zWSxFQUFVOUksV0FBV2pqRCxLQUFLK2QsRUFBR3JpQixLQUFNcWlCLEVBQUdrd0IsVUFBVS9zQyxLQUFNNmMsRUFBR2krQixPQUFRNytCLENBQUcsYUFDdkQ0dUMsRUFBVTdJLFVBQ25CelAsRUFBSTUyQixPQUNWNDJCLEdBQ0EsTUFBTSxJQUFJcVksRUFBWXZ0RCxRQUFRd2YsRUFBR2haLEtBQUtxM0MsWUFBYXIrQixFQUFHaStCLE9BQVE3K0IsQ0FBRyxDQUN6RixDQUNzQnMvQyxFQUFVLE9BQUMvOEIsRUFBSytULE1BQUFBLEVBQWlDOXFDLEtBQUFBLEVBQVM4cUMsRUFBSUQsWUFBd0M3cUMsS0FBQUEsRUFBUysyQixFQUFHbG5CLEdBQ3hILEdBQXNCLFVBQWxCLE9BQU9pa0QsRUFDUCxNQUFNLElBQUlyNEQsdUZBQXVGb1UsSUFBVSxFQUUvR2drRCxFQUFjQSxJQUFnQkYsR0FBZUMsRUFBWTlvQixDQUFHLElBU2hFLENBQXFCQSxFQUFLOTFDLEtBQ3RCLEdBQUk4MUMsRUFBSTdTLE1BQ0o4N0IsRUFBV2pwQixFQUFJN1MsTUFBT2pqQyxDQUFDLE1BRXRCLENBQUEsR0FBSTgxQyxDQUFBQSxFQUFJMkcsS0FNVCxNQUFNLElBQUloMkMsb0NBQW9Db1UsZ0NBQXNDLEVBTHBGLElBQUssSUFBTTRqRCxLQUFZM29CLEVBQUkyRyxLQUN2QnNpQixFQUFXTixFQUFVeitELENBQUMsQ0FLOUMsQ0FDQSxHQXBCNEI4K0QsRUFBUzkrRCxDQUFDLENBQ3RDLENBQ1ksR0FBSzYrRCxFQUVMLE9BQU9ILEVBREgsTUFBTSxJQUFJajRELHlCQUF5Qm9VLHFCQUEyQixFQUVsRSxTQUFTK2pELEVBQVksQ0FBRWxpQixTQUFBQSxJQUNuQixPQUFPNzlDLE1BQU1DLFFBQVE0OUMsQ0FBUSxHQUFLQSxFQUFTem5DLFNBQVM0RixDQUFPLENBQzNFLENBY1ksU0FBU2trRCxFQUFXTixFQUFVeitELEdBQzFCLEdBQXVCLFVBQW5CLE9BQU95K0QsR0FBd0JBLEtBQVlDLEVBQzNDLE1BQU0sSUFBSWo0RCx5QkFBeUJvVSxrQ0FBd0MsRUFFL0U2akQsRUFBYUQsR0FBWXorRCxDQUN6QyxDQUNBLEdBL0R3QyxFQUU1QixJQUFXeStELEtBRFh2d0IsRUFBSTlELEdBQUcsQ0FBQSxDQUFLLEVBQ1dvMEIsRUFDbkJ0d0IsRUFBSXpELFFBQU8sRUFBSTZDLEVBQVVqdEMsS0FBTTZhLFNBQVd1akQsR0FBVSxFQUNwRHZ3QixFQUFJanZDLE9BQU91ekMsR0FNS3lGLElBQ3BCLElBQU1paEIsRUFBU2hyQixFQUFJOWtDLEtBQUssT0FBTyxFQUN6QjR1QyxFQUFTdEgsRUFBSWlILFVBQVUsQ0FBRS9KLFFBQVMsUUFBU3FLLFdBQUFBLENBQVksRUFBRWloQixDQUFNLEVBRXJFLE9BREF4b0IsRUFBSTlELGVBQWVvTCxFQUFRMUssRUFBVTdMLElBQUksRUFDbEN5M0IsQ0FDbkIsR0FYaURzRixFQUFRQyxFQUFTLENBQUMsRUFFdkR2d0IsRUFBSTdGLEtBQU0sRUFDVnFJLEVBQUk3cEMsTUFBTSxDQUFBLEVBQU8sQ0FBRTAzRCxXQUFZSixFQUFRQyxXQUFXRSxRQUFTcGpELElBQUFBLEVBQUtMLFFBQUFBLEVBQVMsRUFDekVxekIsRUFBSTFELE1BQU8sQ0FYNkQsRUFBRSxJQUFNa0csRUFBSTdwQyxNQUFNLENBQUEsRUFBTyxDQUFFMDNELFdBQVlKLEVBQVFDLFdBQVdDLElBQUtuakQsSUFBQUEsRUFBS0wsUUFBQUEsQ0FBTyxDQUFFLENBQUMsRUFDMUo2MUIsRUFBSXJaLEdBQUdtYixDQUFLLENBa0VmLENBQ0osNjlFRXBHRHh6QyxPQUFPbWUsZUFBY3pjLEVBQVUsYUFBYyxDQUFFcUUsTUFBTyxDQUFBLEVBQU0sRUFDNURyRSxFQUEwQnVrRCxnQkFBQXZrRCxFQUFBOHZDLGdCQUEwQjl2QyxFQUFrQjZrQyxRQUFBN2tDLEVBQUErZ0MsS0FBZS9nQyxFQUFjNmdDLElBQUE3Z0MsRUFBQW1GLFVBQW9CbkYsTUFBY0EsRUFBWUwsRUFBQUssRUFBQW0vQyxXQUFxQm4vQyxFQUFjK3VELElBQUF6a0QsS0FBQUEsRUFDcEwsSUFBTStxRCxFQUFTdG9ELEdBQWlCLEVBQ2hDLElBQU11eEQsRUFBV3Q1QixHQUFnQyxFQUMzQ3U1QixFQUFrQnR4RCxHQUF1QyxFQUN6RHV4RCxFQUFtQi9xQixHQUNuQmdyQixFQUFvQixDQUFDLGVBQ3JCQyxFQUFpQiwrQ0FDakIzUCxVQUFZc0csRUFBT24xRCxRQUNyQnF4RCxtQkFDSXIwQyxNQUFNcTBDLGlCQUFrQixFQUN4QitNLEVBQVNwK0QsUUFBUWlJLFFBQVEsR0FBT3ZDLEtBQUs4ckQsY0FBY3ZqRCxDQUFDLENBQUMsRUFDakR2SSxLQUFLYyxLQUFLaTFELGVBQ1YvMUQsS0FBSytyRCxXQUFXNE0sRUFBZ0JyK0QsT0FBTyxDQUNuRCxDQUNJc3hELHdCQUVJLElBRU1rQyxFQUhOeDJDLE1BQU1zMEMsc0JBQXVCLEVBQ3hCNXJELEtBQUtjLEtBQUtvOEMsT0FFVDRRLEVBQWE5dEQsS0FBS2MsS0FBS3ltQyxNQUN2QnZuQyxLQUFLcXVELGdCQUFnQnVLLEVBQWtCQyxDQUFpQixFQUN4REQsRUFDTjU0RCxLQUFLZ3NELGNBQWM4QixFQUFZZ0wsRUFBZ0IsQ0FBQSxDQUFLLEVBQ3BEOTRELEtBQUsrNEMsS0FBSyxpQ0FBbUMrZixFQUNyRCxDQUNJek0sY0FDSSxPQUFRcnNELEtBQUtjLEtBQUt1ckQsWUFDZC8wQyxNQUFNKzBDLFlBQVcsSUFBT3JzRCxLQUFLdXNELFVBQVV1TSxDQUFjLEVBQUlBLEVBQWlCcDBELEtBQUFBLEVBQ3RGLENBQ0EsQ0FDQXRLLEVBQUErdUQsSUFBY0EsRUFDZDRQLEVBQWlCMytELFFBQUFBLEVBQVUrdUQsRUFDM0I0UCxFQUFBMytELFFBQUErdUQsSUFBcUJBLEVBQ3JCendELE9BQU9tZSxlQUFjemMsRUFBVSxhQUFjLENBQUVxRSxNQUFPLENBQUEsRUFBTSxFQUM1RHJFLEVBQUFFLFFBQWtCNnVELEVBQ2xCLElBQUloSyxFQUFhclIsR0FBNkIsRUFFMUM5RyxHQURKdHVDLE9BQU9tZSxlQUFlemMsRUFBUyxhQUFjLENBQUVzRSxXQUFZLENBQUEsRUFBTTBGLElBQUssV0FBYyxPQUFPKzZDLEVBQVc1RixVQUFhLENBQUEsQ0FBRSxFQUNyR1EsRUFBNEIsR0FPeENtRixHQU5KeG1ELE9BQU9tZSxlQUFlemMsRUFBUyxJQUFLLENBQUVzRSxXQUFZLENBQUEsRUFBTTBGLElBQUssV0FBYyxPQUFPNGlDLEVBQVVqdEMsQ0FBSSxDQUFBLENBQUUsRUFDbEdyQixPQUFPbWUsZUFBZXpjLEVBQVMsTUFBTyxDQUFFc0UsV0FBWSxDQUFBLEVBQU0wRixJQUFLLFdBQWMsT0FBTzRpQyxFQUFVcHBDLEdBQU0sQ0FBQSxDQUFFLEVBQ3RHbEYsT0FBT21lLGVBQWV6YyxFQUFTLFlBQWEsQ0FBRXNFLFdBQVksQ0FBQSxFQUFNMEYsSUFBSyxXQUFjLE9BQU80aUMsRUFBVXpuQyxTQUFZLENBQUEsQ0FBRSxFQUNsSDdHLE9BQU9tZSxlQUFlemMsRUFBUyxNQUFPLENBQUVzRSxXQUFZLENBQUEsRUFBTTBGLElBQUssV0FBYyxPQUFPNGlDLEVBQVUvTCxHQUFNLENBQUEsQ0FBRSxFQUN0R3ZpQyxPQUFPbWUsZUFBZXpjLEVBQVMsT0FBUSxDQUFFc0UsV0FBWSxDQUFBLEVBQU0wRixJQUFLLFdBQWMsT0FBTzRpQyxFQUFVN0wsSUFBTyxDQUFBLENBQUUsRUFDeEd6aUMsT0FBT21lLGVBQWV6YyxFQUFTLFVBQVcsQ0FBRXNFLFdBQVksQ0FBQSxFQUFNMEYsSUFBSyxXQUFjLE9BQU80aUMsRUFBVS9ILE9BQVUsQ0FBQSxDQUFFLEVBQ3JGK2EsR0FBcUMsR0FFMUQ2TixHQURKbnZELE9BQU9tZSxlQUFlemMsRUFBUyxrQkFBbUIsQ0FBRXNFLFdBQVksQ0FBQSxFQUFNMEYsSUFBSyxXQUFjLE9BQU84NkMsRUFBbUI1a0QsT0FBVSxDQUFBLENBQUUsRUFDN0cyL0MsR0FBOEIsR0FDaER2aEQsT0FBT21lLGVBQWV6YyxFQUFTLGtCQUFtQixDQUFFc0UsV0FBWSxDQUFBLEVBQU0wRixJQUFLLFdBQWMsT0FBT3lqRCxFQUFZdnRELE9BQVUsQ0FBQSxDQUFFLGtHQy9DeEg1QixPQUFPbWUsZUFBY3pjLEVBQVUsYUFBYyxDQUFFcUUsTUFBTyxDQUFBLEVBQU0sRUFDNUQsSUFBTXU2RCxFQUFRN3hELEdBQWMsRUFDdEI2L0IsRUFBWTVILEVBQW1DLEVBQy9DM0MsRUFBU3AxQixHQUF3QyxFQUNqRDgzQyxFQUFhdFIsR0FBb0MsRUFDakQvQixFQUFXZ0MsR0FBa0MsRUFDN0NwRixFQUFVcVIsRUFBaUMsRUFDM0N6UyxFQUFVLGVBQ1YyeEIsRUFBTyxJQUFJRCxFQUFNNzlCLEtBQUssUUFBUSxFQUM5Qis5QixFQUEwQixDQUM1QjlpQixTQUFVLGtCQUNWMUMsYUFBYyxXQUNkeWxCLGtCQUFtQixVQUN0QixFQUNLQyxFQUFnQixjQUNoQkMsRUFBd0IsaUJBQ3hCQyxFQUFZLDJCQUNsQixTQUFTQyxFQUFhamhFLEdBQ2xCLE1BQU8sQ0FDSGd2QyxRQUFBQSxFQUNBNkMsV0FBWSxDQUFDLFNBQVUsVUFDdkJzQyxLQUFNLENBQUEsRUFDTjl2QixLQUFLeXRCLEdBQ0QsR0FBTSxDQUFFeEMsSUFBQUEsRUFBS3J4QixLQUFBQSxFQUFNcUMsT0FBQUEsRUFBUWd5QixZQUFBQSxFQUFhOXdCLEdBQUFBLENBQUUsRUFBS3N3QixFQUMvQyxHQUF3QixDQUFBLElBQXBCdHdCLEVBQUdzeEIsYUFBUCxDQUVBLElBQU1vRSxFQUFNNTJCLEVBQ05nd0IsRUFBZTVCLEVBQVVoTCxVQUFVME0sRUFBUXB1QyxRQUFRc3VDLGFBQWM5dUIsRUFBRyt3QixTQUFTLEVBeUtuRixTQUFTMnVCLEVBQWtCOXFELEVBQUsrcUQsR0FDNUIsT0FBT3p5QixFQUFVZixJQUFJK3lCLEVBQU1qL0QsSUFBSzJVLGlCQUFtQjQ0QixJQUFXMHhCLEVBQU1qL0QsS0FBTTJVLEtBQU91cUQsSUFBUUQsRUFBTWovRCxJQUFLMlUsc0JBQXdCazZCLElBQWdCb3dCLEVBQU1qL0QsSUFBSzJVLGdCQUFrQitxRCxJQUV6S1QsRUFBTWovRCxJQUFLMlUsd0JBQTBCb0wsRUFBR2d4Qix1QkFBd0JrdUIsRUFBTWovRCx3QkFBeUIyVSxzQkFBd0JvTCxFQUFHZ3hCLGNBQWM3eEMsVUFBVSxDQUNsSyxDQWVZLFNBQVN5Z0UsRUFBaUJyM0QsRUFBTXMzRCxHQUM1QixJQUNXMXVELEVBREwydUQsRUFBZ0IsR0FDdEIsSUFBVzN1RCxLQUFLNUksRUFBTSxDQUNsQixJQUFNekMsRUFBTSs1RCxFQUFLMXVELEdBQ2JtdUQsRUFBY3gvRCxLQUFLZ0csQ0FBRyxHQUN0Qmc2RCxFQUFjLzhELEtBQUssQ0FBQ29PLEdBV1ZyTCxFQVgwQkEsRUFZckNvNUQsRUFBTWovRCxzQkFBdUI4L0QsRUFBYWo2RCxDQUFHLE1BWkgsQ0FDakUsQ0FDZ0IsT0FBT2dvQyxFQUFJaEUsT0FBTyxHQUFHZzJCLENBQWEsQ0FDbEQsQ0FDWSxTQUFTQyxFQUFhajZELEdBQ2xCLE9BQUt3NUQsRUFBY3gvRCxLQUFLZ0csQ0FBRyxFQUVwQixJQUFJNjhCLEVBQU92QixNQUFNdUIsRUFBTzFCLGNBQWNuN0IsQ0FBRyxFQUMzQzlGLFFBQVF1L0QsRUFBdUIsQ0FBQzNPLEVBQUlvUCwwQkFBOEIzYSxFQUFXN0YsUUFBUXdnQixFQUFLaGdELENBQUUsUUFBUSxFQUNwR2hnQixRQUFRdy9ELEVBQVcsRUFBRSxDQUFDLEVBSGhCTixFQUFNejVELFVBQVVLLENBQUcsQ0FJOUMsQ0ExTVlnb0MsRUFBSTlELEdBQUdrMUIsRUFBTWovRCxJQUFLMnVDLEVBQVFwdUMsUUFBUWl3QixhQUFjLEtBQzVDLEdBQWtCLFVBQWQsT0FBT2lsQixFQUFpQixDQUN4QixHQUFNLENBQUN1cUIsRUFBZUMsSUEyQkRDLElBQ3pCM2dFLElBQUk0Z0UsRUFDQTN2QyxFQUNKLElBQUssSUFBTXRmLEtBQUtndkQsRUFDWixHQUFVLGVBQU5odkQsR0FBNEIsVUFBTkEsRUFBMUIsQ0FFQSxJQUFNa3ZELEVBQVNGLEVBQVNodkQsR0FDeEIsR0FBcUIsVUFBakIsT0FBT2t2RCxFQUFvQixDQUUzQixJQUNXMytELEVBREw0K0QsR0FETkYsRUFBQUEsR0FBNEIsSUFDRGp2RCxHQUFLLEdBQ2hDLElBQVd6UCxLQUFLMitELEVBQ1pDLEVBQU81K0QsR0FBSyxFQUN4QyxNQUV3Qit1QixFQUFBQSxHQUFvQixJQUNidGYsR0FBSyxFQVZaLENBYVIsTUFBTyxDQUFDaXZELEVBQVkzdkMsRUFDcEMsR0E5QzJFaWxCLENBQUcsRUFDMUQsR0FBSXdxQixFQUNBSyxDQThDUixJQUFNWixFQUFVN3hCLEVBQUlqTCxNQUFNLFdBQVlxOEIsRUFBTXo1RCxVQUFVeTZELENBQVMsQ0FBQyxFQUMxRE0sRUFBWTF5QixFQUFJakwsTUFBTSxZQUFhKzhCLEVBQWlCTSxFQUFXcGhELENBQU0sQ0FBQyxFQUVwRTJoRCxHQURSM3lCLEVBQUlsRCxNQUFNLE1BQU9nRSxFQUFRcHVDLFFBQVEydUMsUUFBUyxHQUFTckIsRUFBSTlELEdBQUcwMUIsRUFBa0I5cUQsRUFBSytxRCxDQUFPLEVBQUcsSUFBTTd4QixFQUFJanJCLEtBQUtxOEMsRUFBTWovRCxJQUFLMC9ELEtBQVcvcUQsbUJBQXFCQSxJQUFNLEVBQUUvVixPQUFPcWdFLEVBQU1qL0QsSUFBSzJVLEtBQU91cUQsSUFBUSxDQUFBLENBQUksQ0FBQyxDQUFDLEVBQzVLM2dFLEdBQUwsWUFDbkIsR0FBSWlpRSxFQUFhLENBQ2IsSUFBTXZ1QyxFQUFVNGIsRUFBSXR1QyxJQUFJLFVBQVcwL0QsRUFBTWovRCxLQUFNLEVBQ3pDeWdFLEVBQWU1eUIsRUFBSXR1QyxJQUFJLGVBQWdCMC9ELEVBQU1qL0QsS0FBTSxFQUN6RDBnRSxFQUFXLElBQ1A3eUIsRUFBSTlELEdBQUc5WCxFQUFTLElBQU00YixFQUFJanJCLEtBQUtxOEMsRUFBTWovRCxJQUFLaXlCLFFBQW9DLFVBQXRCLE9BQU91dUMsRUFBMEJBLEVBQWMsS0FBSyxDQUFDLEVBQzdHM3lCLEVBQUlqckIsS0FBS3E4QyxFQUFNai9ELElBQUtpeUIsUUFBYzB1QyxFQUFXLzJELENBQUcsR0FBRyxFQUNuRGlrQyxFQUFJanZDLE9BQU82aEUsRUFBY3hCLEVBQU1qL0QsSUFBS3lnRSxZQUF1QmYsS0FBVzkxRCxLQUFPLENBQ3JHLENBQXFCLEVBQ0Rtb0MsRUFBU3ZDLFlBQVlhLEVBQUssQ0FBRXBlLFFBQUFBLEVBQVNpZixPQUFRK3RCLEVBQU1qL0QsYUFBY3lnRSxJQUFlLENBQUUsQ0FDdEcsTUFFb0JDLEVBQVcsR0FBUzN1QixFQUFTdkMsWUFBWWEsRUFBSyxDQUMxQ3BlLFFBQVMwdUMsRUFBVy8yRCxDQUFHLEVBQ3ZCc25DLE9BQVErdEIsRUFBTWovRCxhQUFjMC9ELEtBQVc5MUQsS0FDL0QsQ0FBcUIsQ0FBQyxFQUVOLFNBQVM4MkQsRUFBV2w4QyxHQUNoQnFwQixFQUFJakQsTUFBTSxNQUFPODBCLEVBQVMsR0FBUzd4QixFQUFJOUQsR0FBR2sxQixFQUFNai9ELElBQUswL0QsS0FBVzkxRCxZQUFlLElBQU00YSxFQUFLNWEsQ0FBRyxDQUFDLENBQUMsQ0FDbkgsQ0FDZ0IsU0FBUysyRCxFQUFXLzJELEdBQ2hCLE9BQU9xMUQsRUFBTWovRCxJQUFLNEosUUFBVTIyRCxPQUFlQSxLQUFhMzJELFVBQVlpbkMsS0FBZWpuQyxJQUN2RyxDQXZFc0QsQ0FDbEMsR0FBSW8yRCxFQUNBWSxDQUFBQSxJQTBFRzF2RCxFQUhtQjh1RCxFQXZFR0EsRUF3RWpDLElBQU1OLEVBQVU3eEIsRUFBSWpMLE1BQU0sV0FBWXE4QixFQUFNejVELFVBQVV3NkQsQ0FBYSxDQUFDLEVBQzlESCxFQUFnQixHQUN0QixJQUFXM3VELEtBQUs4dUQsRUFDWkgsRUFBYy84RCxLQUFLLENBQ2ZvTyxFQUNBeXVELEVBQWlCSyxFQUFjOXVELEdBQUkyTixFQUFPM04sRUFBRSxFQUMvQyxFQUVMLElBQU1xdkQsRUFBWTF5QixFQUFJakwsTUFBTSxZQUFhaUwsRUFBSWhFLE9BQU8sR0FBR2cyQixDQUFhLENBQUMsRUFDL0RnQixFQUFnQmh6QixFQUFJdkUsV0FBVyxNQUFPLENBQ3hDbnFCLElBQUtnZ0QsRUFDTHY4QyxLQUFNcThDLEVBQU16NUQsVUFBVTI1RCxDQUF1QixDQUNqRSxDQUFpQixFQUNLMkIsRUFBWWp6QixFQUFJdHVDLElBQUksY0FBYyxFQUNsQ2toRSxFQUFlNXlCLEVBQUl0dUMsSUFBSSxnQkFBZ0IsRUFDN0NzdUMsRUFBSWxELE1BQU0sTUFBT2dFLEVBQVFwdUMsUUFBUTJ1QyxRQUFTLEdBQVNyQixFQUFJOUQsR0FBRzAxQixFQUFrQjlxRCxFQUFLK3FELENBQU8sRUFBRyxLQUN2Rjd4QixFQUFJanZDLE9BQU9raUUsRUFBVzdCLEVBQU1qL0QsSUFBSzZnRSxLQUFpQmxzRCxZQUFjLEVBQ2hFazVCLEVBQUlqdkMsT0FBTzZoRSxFQUFjeEIsRUFBTWovRCxJQUFLMC9ELEtBQVcvcUQsY0FBZ0JBLFlBQWNtc0QsS0FBYSxFQUMxRmp6QixFQUFJOUQsR0FBRzAyQixFQUFjLElBQU01eUIsRUFBSWpyQixLQUFLcThDLEVBQU1qL0QsSUFBS3lnRSxVQUFxQjlyRCxJQUFNLEVBQUUvVixPQUFPcWdFLEVBQU1qL0QsSUFBSzJVLEtBQU91cUQsSUFBUSxDQUFBLENBQUksQ0FBQyxDQUN0SSxDQUFpQixDQUFDLEVBQ0ZyeEIsRUFBSWpELE1BQU0sTUFBTzgwQixFQUFTLEdBQVM3eEIsRUFBSWpELE1BQU0sVUFBV3EwQixFQUFNai9ELElBQUswL0QsS0FBVzkxRCxLQUFRLElBQ2xGaWtDLEVBQUlqdkMsT0FBTzZoRSxFQUFjeEIsRUFBTWovRCxJQUFLMC9ELEtBQVc5MUQsTUFBUW0zRCxJQUFVLEVBQ2pFbHpCLEVBQUk5RCxHQUFHazFCLEVBQU1qL0QsSUFBS3lnRSxXQUF1QixLQUNyQyxJQUFNTyxFQUFPbnpCLEVBQUlqTCxNQUFNLE9BQVFxOEIsRUFBTWovRCxJQUFLdWdFLEtBQWEzMkQsU0FBVzIyRCxLQUFhMzJELE1BQVFtM0QsSUFBVSxFQUNqR2h2QixFQUFTdkMsWUFBWWEsRUFBSyxDQUN0QnBlLFFBQVNndEMsRUFBTWovRCxJQUFLZ2hFLE9BQVVBLFNBQVlud0IsS0FBZWpuQyxNQUFRbTNELEtBQ2pFN3ZCLE9BQVErdEIsRUFBTWovRCxhQUFjeWdFLElBQ3hELENBQXlCLENBQ3pCLENBQXFCLENBQ3JCLENBQWlCLENBQUMsQ0FyRzRDLENBQzFDUSxDQXNHb0JDLEdBOUY1QixDQUEyQixDQUFFMXJCLFdBQUFBLEVBQVl4OUIsTUFBQUEsTUFDckMsSUFBTXdZLEVBQVMsR0FDZixHQUFJZ2xCLEVBRUEsSUFBSyxJQUFNL3pDLEtBRFgrdUIsRUFBT3hLLE1BQVEsR0FDQ3d2QixFQUNaaGxCLEVBQU94SyxNQUFNdmtCLEdBQUssR0FFMUIsR0FBSXVXLEVBQU8sQ0FDUHdZLEVBQU94WSxNQUFRLEdBQ2YsSUFBS3pZLElBQUlJLEVBQUksRUFBR0EsRUFBSXFZLEVBQU05WSxPQUFRUyxDQUFDLEdBQy9CNndCLEVBQU94WSxNQUFNclksR0FBSyxFQUMxQyxDQUNnQixPQUFPNndCLENBQ3ZCLEdBckJ5RGlsQixDQUFHLEVBdUc1QyxHQUFNLENBQUV6dkIsTUFBQUEsRUFBT2hPLE1BQUFBLENBQUssRUFBS2twRCxFQUN6QixHQUFLbDdDLEdBQVVoTyxFQUFmLENBRU1tcEQsRUFBUWxDLEVBQU1qL0QsV0FBWXdjLGdCQUMxQjRrRCxFQUFRbkMsRUFBTWovRCxrQkFBbUJ3YyxLQUN2QyxJQUFNNmtELEVBQVl4ekIsRUFBSXR1QyxJQUFJLFVBQVUsRUFDaEMraEUsRUFDQUMsRUFDRWhCLEVBQVkxeUIsRUFBSXR1QyxJQUFJLFdBQVcsRUFnQ3JDLFNBQVNpaUUsRUFBS0MsRUFBVTdCLEdBQ3BCL3hCLEVBQUlqdkMsT0FBT3lpRSxFQUFXcEMsRUFBTXo1RCxVQUFVaThELENBQVEsQ0FBQyxFQUMvQzV6QixFQUFJanZDLE9BQU8yaEUsRUFBV1osRUFBaUI4QixFQUFVN0IsQ0FBSSxDQUFDLENBQzFFLENBbENvQjU1QyxHQUFTaE8sR0FDVHNwRCxFQUFXenpCLEVBQUl0dUMsSUFBSSxZQUFZLEVBQy9Cc3VDLEVBQUk5RCxHQUFHbzNCLENBQUssRUFDWnR6QixFQUFJOUQsR0FBR3EzQixFQUFPLEtBQ1ZJLEVBQUt4cEQsRUFBTzZHLEVBQU83RyxLQUFLLEVBQ3hCNjFCLEVBQUlqdkMsT0FBTzBpRSxFQUFVckMsRUFBTXA3RCxVQUFXLENBQzlELEVBQXVCLEtBQ0MyOUQsRUFBS3g3QyxFQUFPbkgsRUFBTzIyQixVQUFVLEVBQzdCM0gsRUFBSWp2QyxPQUFPMGlFLEVBQVVyQyxFQUFNcDdELGVBQWdCLENBQ25FLENBQXFCLEVBQ0QwOUQsRUFBWXRDLEVBQU1qL0QsS0FBTXNoRSxNQUVuQnRwRCxHQUNMNjFCLEVBQUk5RCxHQUFHcTNCLENBQUssRUFDWkksRUFBS3hwRCxFQUFPNkcsRUFBTzdHLEtBQUssRUFDeEJ1cEQsRUFBWXRDLEVBQU1qL0QsV0FFYmdtQixJQUNMNm5CLEVBQUk5RCxHQUFHa0QsRUFBVWYsSUFBSWkxQixFQUFPbDBCLEVBQVVoSSxJQUFJbThCLENBQUssQ0FBQyxDQUFDLEVBQ2pESSxFQUFLeDdDLEVBQU9uSCxFQUFPMjJCLFVBQVUsRUFDN0IrckIsRUFBWXRDLEVBQU1qL0QsZ0JBRXRCNnRDLEVBQUlsRCxNQUFNLE1BQU9nRSxFQUFRcHVDLFFBQVEydUMsUUFBUyxJQWdDOUMsSUFBNkJ2NkIsRUFBSzBzRCxFQUFXcjNCLEVBQWhCcjFCLEVBaEM4Q0EsRUFnQ3pDMHNELEVBaEM4Q0EsRUFnQ25DcjNCLEVBaEM4QyxHQUFXNkQsRUFBSWpyQixLQUFLcThDLEVBQU1qL0QsSUFBS3FoRSxLQUFhSyxXQUFlL3NELElBQU0sRUFBRS9WLE9BQU9xZ0UsRUFBTWovRCxJQUFLMlUsS0FBT3VxRCxJQUFRLENBQUEsQ0FBSSxFQWlDL0xyeEIsRUFBSTlELEdBQUdrRCxFQUFVZixJQUFJK3lCLEVBQU1qL0QsSUFBSzJVLGlCQUFtQjQ0QixJQUFXMHhCLEVBQU1qL0QsS0FBTTJVLEtBQU91cUQsSUFBUUQsRUFBTWovRCxJQUFLMlUsMEJBQTRCazZCLFVBQXFCLEVBQUcsS0FDcEosSUFBTTh5QixFQUFhOXpCLEVBQUl2RSxXQUFXLFVBQVcsQ0FDekNucUIsSUFBSyxxQkFDTHlELEtBQU1xOEMsRUFBTWovRCx1Q0FDcEMsQ0FBcUIsRUFDS29rRCxFQUFVdlcsRUFBSWpMLE1BQU0sWUFBYXE4QixFQUFNai9ELElBQUsyaEUsVUFBbUJodEQsd0JBQTBCazZCLFlBQXVCLEVBQ3RILElBQU02eUIsRUFBUTd6QixFQUFJakwsTUFBTSxVQUFXcThCLEVBQU1qL0QsSUFBS29rRCxRQUFjQSw4Q0FBb0QsRUFDaEh2VyxFQUFJOUQsR0FBR2sxQixFQUFNai9ELElBQUswaEUsc0JBQTBCQSxRQUFZTCxJQUFhLElBQU1yM0IsRUFBUzAzQixDQUFLLENBQUMsQ0FDOUcsQ0FBaUIsQ0F6QytMLENBQUMsRUFDak03ekIsRUFBSWpELE1BQU0sTUFBT3kyQixFQUFXLEdBQVN4ekIsRUFBSTlELEdBQUdrMUIsRUFBTWovRCxJQUFLcWhFLEtBQWF6M0QsWUFBZSxLQUMvRW1vQyxFQUFTdkMsWUFBWWEsRUFBSyxDQUN0QnBlLFFBQVNndEMsRUFBTWovRCxJQUFLNEosUUFBVTIyRCxPQUFlQSxLQUFhMzJELFVBQVlpbkMsSUFBYzB3QixLQUFhMzNELEtBQ2pHc25DLE9BQVErdEIsRUFBTWovRCxhQUFjcWhFLEtBQWF6M0QsS0FDakUsQ0FBcUIsRUFDRGlrQyxFQUFJanZDLE9BQU9xZ0UsRUFBTWovRCxJQUFLMnVDLEVBQVFwdUMsUUFBUTJ1QyxXQUFXUCxFQUFRcHVDLFFBQVFpd0IseUJBQTBCeXVDLEVBQU1qL0QsSUFBSzZ1QyxhQUF3QmpsQyw2Q0FBK0MsQ0FDak0sQ0FBaUIsQ0FBQyxFQUNGaWtDLEVBQUkxRCxNQUFPLENBckNQLENBekd5QyxDQUM3RCxDQUNzQnkzQixFQUEyQixVQUFkLE9BQU9uc0IsRUFBa0JBLEVBQU1BLEVBQUl6MUMsRUFDdEQsR0FBSTRoRSxFQUNBQyxDQUFBQSxJQWdKa0JELEVBaEpEQSxFQWlKckIsSUFBTTd4QixFQUFPbEMsRUFBSWpMLE1BQU0sU0FBVXE4QixFQUFNai9ELEtBQU0sRUFDN0M2dEMsRUFBSWxELE1BQU0sTUFBT2dFLEVBQVFwdUMsUUFBUTJ1QyxRQUFTLElBQVNyQixPQUFBQSxFQUFJOUQsSUEyQnBDcDFCLEVBM0JxREEsRUE0QmpFczRCLEVBQVVmLElBQUkreUIsRUFBTWovRCxJQUFLMlUsaUJBQW1CNDRCLElBQVcweEIsRUFBTWovRCxLQUFNMlUsS0FBT3VxRCxJQUFRanlCLEVBQVVqSSxHQUFHaTZCLEVBQU1qL0QsSUFBSzJVLHNCQUF3Qms2QixJQUFnQjVCLEVBQVVmLElBQUkreUIsRUFBTWovRCxJQUFLMlUsMEJBQTRCazZCLFdBQXVCb3dCLEVBQU1qL0QsSUFBSzJVLGtCQUFvQms2QixtQkFBOEIsQ0FBQyxFQUFHb3dCLEVBQU1qL0QsSUFBSzJVLHdCQUEwQm9MLEVBQUdneEIsdUJBQXdCa3VCLEVBQU1qL0QsSUFBSzJVLGdCQUFrQm9MLEVBQUdneEIsK0JBQStCLEdBNUJ2VixJQUFNbEQsRUFBSWpyQixLQUFLcThDLEVBQU1qL0QsSUFBSyt2QyxVQUFhcDdCLElBQU0sRUFBRS9WLE9BQU9xZ0UsRUFBTWovRCxJQUFLMlUsS0FBT3VxRCxJQUFRLENBQUEsQ0FBSSxDQUFDLEVBMkJ2SyxJQUF1QnZxRCxDQTNCZ0osQ0FBQyxFQUNwS2s1QixFQUFJOUQsR0FBR2sxQixFQUFNai9ELElBQUsrdkMsV0FBZSxJQUFNZ0MsRUFBU3ZDLFlBQVlhLEVBQUssQ0FDN0RwZSxRQUFTNnRDLEVBQWE4QixDQUFVLEVBQ2hDMXdCLE9BQVErdEIsRUFBTWovRCxhQUFjK3ZDLElBQ2hELENBQWlCLENBQUMsQ0F0SjZCLENBQy9CLEdBQUt4eEMsQ0FBQUEsRUFBUXVqRSxXQUNUQyxDQXVKSixJQUFNaHlCLEVBQU9sQyxFQUFJakwsTUFBTSxTQUFVcThCLEVBQU1qL0QsS0FBTSxFQUM3QzZ0QyxFQUFJbEQsTUFBTSxNQUFPZ0UsRUFBUXB1QyxRQUFRMnVDLFFBQVMsR0FBU3JCLEVBQUk5RCxHQUFHazFCLEVBQU1qL0QsS0FBTTJVLEtBQU91cUQsSUFBUSxJQUFNcnhCLEVBQUlqckIsS0FBS3E4QyxFQUFNai9ELElBQUsrdkMsVUFBYXA3QixJQUFNLENBQUMsQ0FBQyxFQUNwSWs1QixFQUFJanZDLE9BQU8rdkMsRUFBUXB1QyxRQUFRMnVDLFFBQVNhLENBQUksRUFBRW54QyxPQUFPK3ZDLEVBQVFwdUMsUUFBUWl3QixPQUFReXVDLEVBQU1qL0QsSUFBSyt2QyxVQUFhLENBekozRSxDQUN0QyxDQUFhLENBakJHLENBaU5QLEVBQ0Rna0IsV0FBWSxDQUNSaFksTUFBTyxDQUNILENBQUU1bkMsS0FBTSxRQUFVLEVBQ2xCLENBQ0lBLEtBQU0sU0FDTnFoQyxXQUFZLENBQ1JBLFdBQVksQ0FBRW9OLEtBQU0sbUJBQXFCLEVBQ3pDNXFDLE1BQU8sQ0FBRTRxQyxLQUFNLG9CQUFzQixFQUNyQ3ZHLFNBQVUsQ0FBRXVHLEtBQU0scUJBQXVCLEVBQ3pDakosYUFBYyxDQUFFaUosS0FBTSxxQkFBdUIsQ0FDaEQsRUFDRGpILHFCQUFzQixDQUFFeG5DLEtBQU0sUUFBVSxDQUMzQyxHQUVMOG5DLE1BQU8sQ0FDSCtsQixVQUFXLENBQ1A3dEQsS0FBTSxTQUNOd25DLHFCQUFzQixDQUFFeG5DLEtBQU0sUUFBVSxDQUMzQyxFQUNEOHRELFlBQWEsQ0FDVGxtQixNQUFPLENBQUMsQ0FBRTVuQyxLQUFNLFFBQVUsRUFBRSxDQUFFeXVDLEtBQU0scUJBQ3ZDLEVBQ0RzZixXQUFZLENBQUUvdEQsS0FBTSxRQUFTNkQsTUFBTyxDQUFFN0QsS0FBTSxTQUFZLENBQzNELENBQ0osQ0FDSixDQUNMLENBQ0EsSUFBTTY2QyxFQUFZLENBQUN2SyxFQUFLbG1ELEVBQVUsTUFDOUIsR0FBSSxDQUFDa21ELEVBQUkxOUMsS0FBSzBwQyxVQUNWLE1BQU0sSUFBSXJxQyxNQUFNLCtDQUErQyxFQUNuRSxHQUFJcStDLEVBQUkxOUMsS0FBSzBuQyxpQkFDVCxNQUFNLElBQUlyb0MsTUFBTSwwREFBMEQsRUFFOUUsT0FBT3ErQyxFQUFJdU4sV0FBV3dOLEVBQWFqaEUsQ0FBTyxDQUFDLENBQzlDLEVBQ0Q4QixFQUFBRSxRQUFrQnl1RCxFQUNsQmdRLEVBQUEzK0QsUUFBaUIydUQsRUFDakJnUSxFQUFBMytELFFBQUFFLFFBQXlCeXVELGlDQ2pScUMzdkMsQ0FBNGpCLFNBQVNvTixHQUFFcE4sRUFBRXRVLEdBQUcsSUFBSXdzQixFQUFFNTNCLEVBQUVoQixPQUFPMkosS0FBSytXLENBQUMsRUFBRSxPQUFPMWdCLE9BQU93akUsd0JBQXdCNXFDLEVBQUU1NEIsT0FBT3dqRSxzQkFBc0I5aUQsQ0FBQyxFQUFFdFUsSUFBSXdzQixFQUFFQSxFQUFFdDRCLE9BQU8sU0FBUzhMLEdBQUcsT0FBT3BNLE9BQU95TCx5QkFBeUJpVixFQUFFdFUsQ0FBQyxFQUFFcEcsVUFBVSxDQUFDLEdBQUdoRixFQUFFbUQsS0FBS2tELE1BQU1yRyxFQUFFNDNCLENBQUMsR0FBRzUzQixDQUFDLENBQUMsU0FBUzhCLEdBQUVzSixFQUFFc1UsR0FBRyxPQUFPNWQsR0FBRTlDLE9BQU95akUsZUFBZXpqRSxPQUFPeWpFLGVBQWVsMUMsS0FBSSxFQUFHLFNBQVNuaUIsRUFBRXNVLEdBQUcsT0FBT3RVLEVBQUVzM0QsVUFBVWhqRCxFQUFFdFUsQ0FBQyxHQUFHQSxFQUFFc1UsQ0FBQyxDQUFDLENBQUMsU0FBU2tZLEtBQUlBLEdBQUUsU0FBU3hzQixFQUFFc1UsR0FBRyxPQUFPLElBQUkxZixFQUFFb0wsRUFBRUosS0FBQUEsRUFBTzBVLENBQUMsQ0FBQyxFQUFFLElBQUlsVSxFQUFFckUsT0FBTy9FLFVBQVUwcUIsRUFBRSxJQUFJNjFDLFFBQVEsU0FBUzNpRSxFQUFFb0wsRUFBRXNVLEVBQUVrWSxHQUFpQixPQUFkbFksRUFBRXZZLE9BQU9pRSxFQUFFc1UsQ0FBQyxFQUFTb04sRUFBRTdsQixJQUFJeVksRUFBRWtZLEdBQUc5SyxFQUFFcGlCLElBQUlVLENBQUMsQ0FBQyxFQUFFdEosR0FBRTRkLEVBQUUxZixFQUFFb0MsU0FBUyxDQUFDLENBQUMsU0FBU3NKLEVBQUVGLEVBQUVKLEdBQUcsSUFBSU0sRUFBRW9oQixFQUFFcGlCLElBQUlVLENBQUMsRUFBRSxPQUFPcE0sT0FBTzJKLEtBQUsrQyxDQUFDLEVBQUVyQixPQUFPLFNBQVNlLEVBQUVzVSxHQUFHLElBQUlrWSxFQUFFbHNCLEVBQUVnVSxHQUFHLEdBQUcsVUFBVSxPQUFPa1ksRUFBRXhzQixFQUFFc1UsR0FBR2xVLEVBQUVvc0IsT0FBTyxDQUFDLElBQUksSUFBSTUzQixFQUFFLEVBQUVnTCxLQUFBQSxJQUFTUSxFQUFFb3NCLEVBQUU1M0IsS0FBS0EsRUFBRSxFQUFFNDNCLEVBQUVyNEIsUUFBUVMsQ0FBQyxHQUFHb0wsRUFBRXNVLEdBQUdsVSxFQUFFb3NCLEVBQUU1M0IsR0FBRyxDQUFDLE9BQU9vTCxDQUFDLEVBQUVwTSxPQUFPMkYsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUl5RyxFQUFFcEwsRUFBRTBmLEVBQUV2WSxPQUFPLEdBQUcsWUFBWSxPQUFPdVksR0FBRyxPQUFPQSxFQUFFLE1BQU0sSUFBSTNnQixVQUFVLG9EQUFvRCxFQUFFLE9BQU9xTSxFQUFFaEosVUFBVXBELE9BQU8yRixPQUFPK2EsR0FBR0EsRUFBRXRkLFVBQVUsQ0FBQ3FDLFlBQVksQ0FBQ00sTUFBTXFHLEVBQUVuRyxTQUFTLENBQUEsRUFBR0MsYUFBYSxDQUFBLENBQUUsQ0FBQyxDQUFDLEVBQUVsRyxPQUFPbWUsZUFBZS9SLEVBQUUsWUFBWSxDQUFDbkcsU0FBUyxDQUFBLENBQUUsQ0FBQyxFQUFFeWEsR0FBRzVkLEdBQUVzSixFQUFFc1UsQ0FBQyxFQUFFMWYsRUFBRW9DLFVBQVViLEtBQUssU0FBUzZKLEdBQUcsSUFBSXNVLEVBQXdCLE9BQU90VSxFQUEzQkksRUFBRWpLLEtBQUtjLEtBQUtpRSxLQUFLOEUsQ0FBQyxLQUFhQSxFQUFFd25DLE9BQU9sbkMsRUFBRU4sRUFBRTlFLElBQUksRUFBRW9aLEVBQUV0VSxFQUFFd3JELFdBQVdsM0MsRUFBRWt6QixPQUFPbG5DLEVBQUVnVSxFQUFFcFosSUFBSSxHQUFHOEUsQ0FBQyxFQUFFcEwsRUFBRW9DLFVBQVVzVCxPQUFPdFYsU0FBUyxTQUFTZ0wsRUFBRXNVLEdBQUcsSUFBSWtZLEVBQUU1M0IsRUFBRSxNQUFNLFVBQVUsT0FBTzBmLEdBQUdrWSxFQUFFOUssRUFBRXBpQixJQUFJcEUsSUFBSSxFQUFFa0YsRUFBRWtLLE9BQU90VixTQUFTaUMsS0FBS2lFLEtBQUs4RSxFQUFFc1UsRUFBRXRmLFFBQVEsZUFBZSxTQUFTZ0wsRUFBRXNVLEdBQVUsT0FBUEEsRUFBRWtZLEVBQUVsWSxHQUFTLEtBQUs3Z0IsTUFBTUMsUUFBUTRnQixDQUFDLEVBQUVBLEVBQUVsZ0IsS0FBSyxHQUFHLEVBQUVrZ0IsRUFBRSxDQUFDLENBQUMsR0FBRyxZQUFZLE9BQU9BLEdBQUcxZixFQUFFc0csS0FBS2tGLEVBQUVrSyxPQUFPdFYsU0FBU2lDLEtBQUtpRSxLQUFLOEUsRUFBRSxXQUFXLElBQUlBLEVBQUV6SixVQUFVLE1BQU0sVUFBVSxPQUFPeUosRUFBRUEsRUFBRTdMLE9BQU8sS0FBSzZMLEVBQUUsR0FBR2pMLE1BQU1rQyxLQUFLK0ksQ0FBQyxHQUFHakksS0FBS3VJLEVBQUVOLEVBQUVwTCxDQUFDLENBQUMsRUFBRTBmLEVBQUVyWixNQUFNQyxLQUFLOEUsQ0FBQyxDQUFDLENBQUMsR0FBR0ksRUFBRWtLLE9BQU90VixTQUFTaUMsS0FBS2lFLEtBQUs4RSxFQUFFc1UsQ0FBQyxDQUFDLEVBQUVrWSxHQUFFdnhCLE1BQU1DLEtBQUszRSxTQUFTLENBQUMsQ0FBQy9CLElBQUlvVCxFQUFFLENBQUM1SCxFQUFFc1UsRUFBRWtZLEtBQUtoNEIsSUFBSUksRUFBRW9MLEVBQU1JLEVBQUVrVSxFQUFFN2QsTUFBTSxHQUFHLEVBQUU2SixFQUFFRixFQUFFak0sT0FBTyxJQUFJSyxJQUFJd0wsRUFBRSxFQUFFQSxFQUFFTSxFQUFFLEVBQUVOLEdBQUcsRUFBRSxDQUFDLElBQUkwaEIsRUFBRXRoQixFQUFFSixHQUFHcEwsRUFBRThzQixLQUFLOXNCLEVBQUU4c0IsR0FBRyxJQUFJOXNCLEVBQUVBLEVBQUU4c0IsRUFBRSxDQUFDOXNCLEVBQUV3TCxFQUFFRSxFQUFFLElBQUlrc0IsQ0FBQyxFQUFFLFNBQVM3cEIsR0FBRTJSLEVBQUVrWSxHQUFHNTRCLE9BQU8ySixLQUFLK1csRUFBRWtZLElBQUksRUFBRSxFQUFFL3VCLFFBQVF1QyxLQUFJQSxFQUFFc1UsRUFBRWtZLEdBQUd4c0IsS0FBTUEsRUFBRXczRCxVQUFVeDNELEVBQUV3M0QsU0FBU3g1RCxPQUFPZ0MsRUFBRWhDLEtBQUtnQyxFQUFFdzNELFNBQVN4NUQsS0FBS2dDLEVBQUV3M0QsU0FBUyxDQUFBLEVBQUcsQ0FBQyxDQUFDLENBQUNoakUsSUFBSUksRUFBRTQzQixHQUFFLHdHQUF3RyxDQUFDaXJDLE9BQU8sRUFBRUMsZUFBZSxFQUFFeHlELE1BQU0sQ0FBQyxDQUFDLEVBQUU5RSxFQUFFSixHQUF3QixRQUFwQkEsRUFBRUEsRUFBRWxCLE1BQU1sSyxDQUFDLEdBQWtCLEdBQUdvTCxFQUFFd25DLE9BQU9pd0IsT0FBUS80RCxFQUFFc0IsR0FBR0EsR0FBRyxDQUFDQSxFQUFFNkosU0FBUyxHQUFHLEdBQUcsQ0FBQzdKLEVBQUU2SixTQUFTLElBQUksR0FBRyxDQUFDN0osRUFBRTZKLFNBQVMsR0FBRyxHQUFHLENBQUM3SixFQUFFNkosU0FBUyxHQUFHLEdBQUcsQ0FBQzdKLEVBQUU2SixTQUFTLEdBQUcsRUFBRTlKLEVBQUVDLElBQUksSUFBSXNVLEVBQUV0VSxFQUFFbEIsTUFBTWxLLENBQUMsRUFBRSxPQUFPLE9BQU8wZixJQUFJdFUsRUFBRSxDQUFDb0osS0FBSzFLLEVBQUU0VixFQUFFa3pCLE9BQU9pd0IsTUFBTSxFQUFFLFNBQVMsT0FBTzVzRCxPQUFPeUosRUFBRWt6QixPQUFPaXdCLE9BQU83c0QsT0FBTzBKLEVBQUVrekIsT0FBT2t3QixjQUFjLEdBQUdwakQsR0FBR0EsRUFBRWt6QixPQUFPdGlDLE9BQU8sSUFBSWxRLFFBQVEsTUFBTSxFQUFFLEVBQUV5QixNQUFNLEdBQUcsR0FBR29ULFNBQVMsSUFBSSxJQUFJN0osRUFBRXkzRCxPQUFPLENBQUNFLE9BQU8sQ0FBQSxDQUFFLEdBQUdyakQsRUFBRXpLLFNBQVMsR0FBRyxFQUFFN0osRUFBRW1pQixLQUFLLENBQUN5MUMsUUFBUSxHQUFHLEVBQUV0akQsRUFBRXpLLFNBQVMsR0FBRyxJQUFJN0osRUFBRW1pQixLQUFLLENBQUN5MUMsUUFBUSxHQUFHLElBQUk1M0QsQ0FBQyxFQUFFc1UsRUFBRWpTLFNBQXNCaUUsV0FBVWpMLE1BQU1oQyxZQUFZMkcsRUFBRXNVLEVBQUVrWSxHQUFHaGEsTUFBTXhTLENBQUMsRUFBRTlFLEtBQUtpVixNQUFNbUUsRUFBRXBaLEtBQUsyOEQsUUFBUXJyQyxFQUFFdHhCLEtBQUs4QyxLQUFLLGlCQUFpQixDQUFDLENBQUN4SixJQUFJVyxFQUFFNkssSUFBSUEsRUFBRXNVLEVBQUVtZCxjQUFjenhCLEVBQUUsQ0FBQzZsQixhQUFhLENBQUEsQ0FBRSxDQUFDLEVBQUVyeEIsSUFBSUksRUFBRSxHQUFHd0wsRUFBRSxHQUFHLEdBQUdKLEVBQUV5bEIsT0FBT2hvQixRQUFRLENBQUMrdUIsRUFBRXhzQixLQUFLLElBQUlzVSxFQUFFa1ksRUFBRXRGLFFBQVF6d0IsTUFBTSxLQUFLLEVBQUUsR0FBRzJKLEVBQUVySSxLQUFLLENBQUN3SCxLQUFLaXRCLEVBQUVqRixRQUFRLEdBQUdob0IsS0FBSzJuQixRQUFRNVMsRUFBRTJTLElBQUl1RixFQUFFakYsT0FBTyxDQUFDLEVBQUU5ekIsTUFBTTJELEtBQUssQ0FBQ2pELE9BQU9xNEIsRUFBRWpGLFFBQVFpRixFQUFFakYsUUFBUSxHQUFHaG9CLEtBQUtpdEIsRUFBRWpGLFFBQVEsR0FBR2hvQixLQUFLLENBQUMsRUFBRSxDQUFDUyxFQUFFc1UsSUFBSWtZLEVBQUVqRixRQUFRLEdBQUdob0IsS0FBSytVLENBQUMsRUFBRTdXLFFBQVF1QyxHQUFHcEwsRUFBRW1ELEtBQUtpSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRUksRUFBRWpNLE9BQU8sTUFBTSxJQUFJbVMsR0FBRWxHLEVBQUVyTSxJQUFJaU0sR0FBR0EsRUFBRWtuQixPQUFPLEVBQUU5eUIsS0FBSyxJQUFJLEVBQUVRLEVBQUV3TCxDQUFDLENBQUMsRUFBRTJyQixFQUFFL3JCLElBQUk3SyxFQUFFNkssQ0FBQyxFQUFFc1UsRUFBRXRSLE1BQU1oRCxFQUFFLENBQUMyZ0IsWUFBWSxDQUFBLENBQUUsQ0FBQyxHQUFHcG9CLEVBQUVpMEIsR0FBRSx1RkFBdUYsQ0FBQ3NyQyxRQUFRLEVBQUVDLEdBQUcsRUFBRTdhLEtBQUssRUFBRThhLFVBQVUsRUFBRUMsV0FBVyxFQUFFQyxNQUFNLENBQUMsQ0FBQyxFQUFFQyxFQUFFbjRELElBQUl4TCxJQUFJNEwsRUFBRUosRUFBRWxCLE1BQU12RyxDQUFDLEVBQUUsR0FBRyxPQUFPNkgsRUFBRSxNQUFNLENBQUNKLEdBQXdCLElBQXJCQSxFQUFFSSxFQUFFb25DLE9BQU93d0IsWUFBZ0JoNEQsRUFBRTZKLFNBQVMsR0FBRyxFQUFFLENBQUMsSUFBSXZKLEVBQUVOLEVBQUV2SixNQUFNLEdBQUcsRUFBRWpDLElBQUk4ZixFQUFFc00sU0FBU3RnQixFQUFFLEdBQUcsRUFBRSxFQUFFLElBQUlBLEVBQUVzZ0IsU0FBU3RnQixFQUFFLEdBQUcsRUFBRSxFQUFrQm9oQixJQUFHQSxFQUFqQnRoQixFQUFFb25DLE9BQU8wVixPQUFXbDlDLEdBQUd2SixNQUFNLEdBQUcsRUFBRWpDLElBQUlnNEIsRUFBRTVMLFNBQVNjLEVBQUUsR0FBRyxFQUFFLEVBQUU5c0IsRUFBRSxHQUFHLE9BQU9uQixNQUFNMkQsS0FBSyxDQUFDakQsT0FBT21NLEVBQUVnVSxFQUFFLENBQUMsRUFBRSxDQUFDdFUsRUFBRXNVLElBQUlBLENBQUMsRUFBRTdXLFFBQVF1QyxJQUFJcEwsRUFBRSxDQUFDLEdBQUdBLEVBQUUsR0FBR3VqRSxFQUFFLEdBQUduZ0UsT0FBT29JLEVBQUVvbkMsT0FBT3N3QixTQUFTLEVBQUUsRUFBRTkvRCxPQUFPdzBCLEVBQUV4c0IsRUFBRSxHQUFHLEVBQUVoSSxPQUFPc2MsRUFBRXRVLENBQUMsRUFBRWhJLE9BQU9vSSxFQUFFb25DLE9BQU95d0IsWUFBWSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVyakUsQ0FBQyxDQUEyQixPQUExQjhzQixFQUFFLENBQUM5VyxPQUFPZ1csU0FBUzVnQixFQUFFLEVBQUUsQ0FBQyxFQUFTSSxFQUFFb25DLE9BQU91d0IsS0FBS3IyQyxFQUFFMDJDLFFBQVFoNEQsRUFBRW9uQyxPQUFPdXdCLElBQUkzM0QsRUFBRW9uQyxPQUFPMFYsT0FBT3g3QixFQUFFMjJDLFVBQVVqNEQsRUFBRW9uQyxPQUFPMFYsTUFBTTk4QyxFQUFFb25DLE9BQU8wd0IsUUFBUXgyQyxFQUFFNDJDLFNBQVNsNEQsRUFBRW9uQyxPQUFPMHdCLE9BQU94MkMsRUFBRW5MLEtBQUssVUFBVSxDQUFDbUwsRUFBRSxFQUFFenNCLEVBQUVvTixHQUFnQm9CLEVBQUUsQ0FBQ3pELEVBQUVzVSxLQUFLNlEsRUFBRW5sQixFQUFFc1UsQ0FBQyxFQUFFcmYsRUFBRXdGLFVBQVV1RixFQUFFLENBQUMrVixRQUFRekIsR0FBRyxJQUFJeUIsUUFBUSxFQUFFNEUsV0FBVyxDQUFBLEVBQUdELFFBQVEsRUFBRSxDQUFDLEVBQUV6bUIsS0FBSSxHQUFJa3hCLEVBQUUsQ0FBQ25sQixFQUFFc1UsS0FBS0EsR0FBR0EsRUFBRWlrRCxlQUFlM2tFLE9BQU8yZSxPQUFPdlMsRUFBRXc0RCxRQUFRLEVBQUUvNkQsUUFBUTZXLElBQUksR0FBR0EsRUFBRW1rRCxRQUFRLElBQUlqa0UsSUFBSXdMLEVBQUUsRUFBRUEsRUFBRXNVLEVBQUVta0QsUUFBUXRrRSxPQUFPNkwsR0FBRyxFQUFFLFVBQVUsT0FBT3NVLEVBQUVta0QsUUFBUXo0RCxLQUFLc1UsRUFBRW1rRCxRQUFRejRELEdBQUdELEVBQUV1VSxFQUFFbWtELFFBQVF6NEQsRUFBRSxFQUFFLENBQUMsRUFBRXNVLEdBQUdBLEVBQUVva0QsYUFBYTlrRSxPQUFPMmUsT0FBT3ZTLEVBQUV3NEQsUUFBUSxFQUFFLzZELFFBQVErdUIsSUFBSSxHQUFHQSxFQUFFbXNDLE1BQU0sQ0FBQ25rRSxJQUFJOGYsRUFBRSxHQUFHLElBQUk5ZixJQUFJd0wsRUFBRSxFQUFFQSxFQUFFd3NCLEVBQUVtc0MsTUFBTXhrRSxPQUFPNkwsR0FBRyxFQUFFc1UsRUFBRSxVQUFVLE9BQU9rWSxFQUFFbXNDLE1BQU0zNEQsR0FBRyxDQUFDLEdBQUdzVSxFQUFFLEdBQUc2akQsRUFBRTNyQyxFQUFFbXNDLE1BQU0zNEQsRUFBRSxHQUFHLENBQUMsR0FBR3NVLEVBQUVrWSxFQUFFbXNDLE1BQU0zNEQsSUFBSXdzQixFQUFFbXNDLE1BQU1ya0QsQ0FBQyxDQUFDLENBQUMsRUFBRXRVLEdBQUc0NEQsRUFBRSxDQUFDdFIsSUFBSSxvQkFBb0JsK0MsS0FBSyxTQUFTeXZELE1BQU0sd0JBQXdCcjlDLFlBQVksaUZBQWlGaXZCLFdBQVcsQ0FBQ3I3QixRQUFRLENBQUNoRyxLQUFLLFNBQVNvUyxZQUFZLCtDQUErQyxFQUFFeGQsS0FBSyxDQUFDb0wsS0FBSyxTQUFTNmlDLFFBQVEsd0JBQXdCendCLFlBQVkscUVBQXFFLEVBQUVzOUMsUUFBUSxDQUFDMXZELEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssU0FBU3l1QyxLQUFLLHVCQUF1QixFQUFFcjhCLFlBQVksc0NBQXNDLEVBQUVnOUMsU0FBUyxDQUFDbFIsSUFBSSx3QkFBd0JsK0MsS0FBSyxTQUFTZ29DLGtCQUFrQixDQUFDMm5CLG9CQUFvQixDQUFDbGhCLEtBQUssdUJBQXVCLENBQUMsRUFBRWpILHFCQUFxQixDQUFBLENBQUUsRUFBRW9vQixTQUFTLENBQUMxUixJQUFJLHdCQUF3QmwrQyxLQUFLLFNBQVNnb0Msa0JBQWtCLENBQUMybkIsb0JBQW9CLENBQUNsaEIsS0FBSyx1QkFBdUIsQ0FBQyxDQUFDLEVBQUU0Z0IsUUFBUSxDQUFDblIsSUFBSSx1QkFBdUJsK0MsS0FBSyxTQUFTZ29DLGtCQUFrQixDQUFDMm5CLG9CQUFvQixDQUFDbGhCLEtBQUssc0JBQXNCLENBQUMsRUFBRWpILHFCQUFxQixDQUFBLENBQUUsRUFBRXFvQixRQUFRLENBQUMzUixJQUFJLHVCQUF1QmwrQyxLQUFLLFNBQVNnb0Msa0JBQWtCLENBQUMybkIsb0JBQW9CLENBQUNsaEIsS0FBSyxzQkFBc0IsQ0FBQyxFQUFFakgscUJBQXFCLENBQUEsQ0FBRSxFQUFFcHJDLFFBQVEsQ0FBQzhoRCxJQUFJLHVCQUF1QmwrQyxLQUFLLFNBQVNnb0Msa0JBQWtCLENBQUMybkIsb0JBQW9CLENBQUNsaEIsS0FBSyxzQkFBc0IsQ0FBQyxFQUFFakgscUJBQXFCLENBQUEsQ0FBRSxDQUFDLEVBQUVRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxFQUFFdG9CLHFCQUFxQixDQUFBLEVBQUdPLFlBQVksQ0FBQ2dvQixRQUFRLENBQUM3UixJQUFJLHdCQUF3QmwrQyxLQUFLLFNBQVNxaEMsV0FBVyxDQUFDMnVCLFFBQVEsQ0FBQ3ZoQixLQUFLLDJCQUEyQixFQUFFd2hCLE9BQU8sQ0FBQ3hoQixLQUFLLDBCQUEwQixFQUFFeWhCLFlBQVksQ0FBQ3poQixLQUFLLDRCQUE0QixFQUFFMGhCLE9BQU8sQ0FBQ253RCxLQUFLLFNBQVMsRUFBRW93RCxNQUFNLENBQUN2b0IsTUFBTSxDQUFDLENBQUM3bkMsS0FBSyxRQUFRLEVBQUUsQ0FBQ0EsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ2xiLFFBQVEsQ0FBQ25tQixLQUFLLFFBQVEsRUFBRXF3RCxXQUFXLENBQUNyd0QsS0FBSyxRQUFRLEVBQUVzd0Qsa0JBQWtCLENBQUN0d0QsS0FBSyxRQUFRLEVBQUUvTyxLQUFLLENBQUN3OUMsS0FBSyw0QkFBNEIsRUFBRThoQixJQUFJLENBQUM5aEIsS0FBSyw0QkFBNEIsRUFBRStoQixPQUFPLENBQUMvaEIsS0FBSyw0QkFBNEIsRUFBRWdpQixXQUFXLENBQUN6d0QsS0FBSyxRQUFRNkQsTUFBTSxDQUFDN0QsS0FBSyxRQUFRLENBQUMsRUFBRTB3RCxTQUFTLENBQUMxd0QsS0FBSyxRQUFRNkQsTUFBTSxDQUFDN0QsS0FBSyxRQUFRLENBQUMsRUFBRTJ3RCxTQUFTLENBQUMzd0QsS0FBSyxTQUFTLEVBQUU0d0Qsb0JBQW9CLENBQUNuaUIsS0FBSyw0QkFBNEIsRUFBRW9pQixRQUFRLENBQUM3d0QsS0FBSyxRQUFRLEVBQUU4d0QsS0FBSyxDQUFDOXdELEtBQUssU0FBUyxFQUFFd0IsT0FBTyxDQUFDeEIsS0FBSyxRQUFRLEVBQUUrd0QsU0FBUyxDQUFDL3dELEtBQUssQ0FBQyxVQUFVLFNBQVMsRUFBRWd4RCxZQUFZLENBQUN2aUIsS0FBSyw0QkFBNEIsRUFBRXdpQixVQUFVLENBQUNqeEQsS0FBSyxRQUFRLEVBQUVreEQsV0FBVyxDQUFDbHhELEtBQUssU0FBUyxFQUFFNnZELFFBQVEsQ0FBQ3BoQixLQUFLLHdDQUF3QyxFQUFFaHBDLEtBQUssQ0FBQ3pGLEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssUUFBUSxDQUFDLEVBQUVteEQsUUFBUSxDQUFDMWlCLEtBQUssdUJBQXVCLEVBQUUyaUIsVUFBVSxDQUFDcHhELEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssUUFBUSxDQUFDLENBQUMsRUFBRXduQyxxQkFBcUIsQ0FBQSxFQUFHUSxrQkFBa0IsQ0FBQzhuQixNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUV1QixhQUFhLENBQUNyeEQsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ2l3QixnQkFBZ0IsQ0FBQ3R4RCxLQUFLLFFBQVE2RCxNQUFNLENBQUM0cUMsS0FBSywyQkFBMkIsQ0FBQyxFQUFFOGlCLGlCQUFpQixDQUFDdnhELEtBQUssUUFBUTZELE1BQU0sQ0FBQzRxQyxLQUFLLDJCQUEyQixDQUFDLEVBQUUraUIsaUJBQWlCLENBQUN4eEQsS0FBSyxRQUFRNkQsTUFBTSxDQUFDNHFDLEtBQUssMkJBQTJCLENBQUMsRUFBRWdqQixrQkFBa0IsQ0FBQ3p4RCxLQUFLLFFBQVE2RCxNQUFNLENBQUM0cUMsS0FBSywyQkFBMkIsQ0FBQyxFQUFFaWpCLE9BQU8sQ0FBQzF4RCxLQUFLLFNBQVMsRUFBRTJ4RCxjQUFjLENBQUMzeEQsS0FBSyxRQUFRNkQsTUFBTSxDQUFDNHFDLEtBQUssNEJBQTRCLENBQUMsQ0FBQyxFQUFFakgscUJBQXFCLENBQUEsQ0FBRSxFQUFFb3FCLFFBQVEsQ0FBQzV4RCxLQUFLLFFBQVE2RCxNQUFNLENBQUM3RCxLQUFLLFFBQVEsRUFBRTRvQyxZQUFZLENBQUEsQ0FBRSxFQUFFaXBCLFNBQVMsQ0FBQzd4RCxLQUFLLFFBQVE2RCxNQUFNLENBQUM3RCxLQUFLLFFBQVEsRUFBRTRvQyxZQUFZLENBQUEsQ0FBRSxFQUFFa3BCLE9BQU8sQ0FBQzl4RCxLQUFLLFNBQVNpb0MsS0FBSyxDQUFDLE9BQU8sVUFBVSxFQUFFOHBCLGNBQWMsQ0FBQy94RCxLQUFLLFFBQVEsRUFBRWd5RCxRQUFRLENBQUN2akIsS0FBSyx1QkFBdUIsRUFBRXJ5QyxRQUFRLENBQUNxeUMsS0FBSyx3Q0FBd0MsRUFBRXdqQixlQUFlLENBQUNqeUQsS0FBSyxRQUFRLEVBQUVreUQsVUFBVSxDQUFDbHlELEtBQUssVUFBVW9vQyxRQUFRLENBQUMsRUFBRStwQixZQUFZLENBQUNueUQsS0FBSyxVQUFVb29DLFFBQVEsRUFBRUQsUUFBUSxHQUFHLEVBQUVpcUIsV0FBVyxDQUFDcHlELEtBQUssQ0FBQyxTQUFTLFNBQVMsRUFBRXF5RCxVQUFVLENBQUNyeUQsS0FBSyxDQUFDLFNBQVMsU0FBUyxFQUFFc3lELFdBQVcsQ0FBQ3R5RCxLQUFLLENBQUMsU0FBUyxTQUFTLEVBQUV1eUQsY0FBYyxDQUFDdnlELEtBQUssQ0FBQyxTQUFTLFNBQVMsRUFBRXd5RCxlQUFlLENBQUN4eUQsS0FBSyxDQUFDLFNBQVMsU0FBUyxFQUFFeXlELEtBQUssQ0FBQ3p5RCxLQUFLLENBQUMsU0FBUyxTQUFTLEVBQUUweUQsT0FBTyxDQUFDMXlELEtBQUssUUFBUSxFQUFFMnlELGdCQUFnQixDQUFDM3lELEtBQUssU0FBU3FoQyxXQUFXLENBQUNya0MsT0FBTyxDQUFDZ0QsS0FBSyxRQUFRLEVBQUU0eUQsS0FBSyxDQUFDNXlELEtBQUssUUFBUSxFQUFFNnlELFNBQVMsQ0FBQzd5RCxLQUFLLFFBQVEsQ0FBQyxFQUFFd25DLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLEVBQUVnRCxXQUFXLENBQUNqckIsTUFBTSxDQUFDLENBQUM0RyxLQUFLLCtCQUErQixFQUFFLENBQUN6dUMsS0FBSyxTQUFTd25DLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDMm5CLG9CQUFvQixDQUFDM3ZELEtBQUssU0FBU3duQyxxQkFBcUIsQ0FBQSxFQUFHbkcsV0FBVyxDQUFDMHhCLFFBQVEsQ0FBQy95RCxLQUFLLFNBQVMsRUFBRWtvQyxTQUFTLENBQUNsb0MsS0FBSyxVQUFVNVQsUUFBUSxDQUFBLENBQUUsRUFBRXduQyxVQUFVLENBQUM1ekIsS0FBSyxTQUFTaW9DLEtBQUssQ0FBQyxrQkFBa0Isa0JBQWtCLGlDQUFpQyxDQUFDLEVBQUVDLFNBQVMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLEVBQUU4cUIsb0JBQW9CLENBQUN2a0IsS0FBSywrQkFBK0IsRUFBRXdrQixRQUFRLENBQUNqekQsS0FBSyxRQUFRNkQsTUFBTSxDQUFDN0QsS0FBSyxRQUFRLEVBQUU0b0MsWUFBWSxDQUFBLENBQUUsRUFBRXNxQixJQUFJLENBQUN6a0IsS0FBSyw4QkFBOEIsRUFBRTBrQixRQUFRLENBQUNuekQsS0FBSyxRQUFRNkQsTUFBTSxDQUFDN0QsS0FBSyxRQUFRLEVBQUU0b0MsWUFBWSxDQUFBLENBQUUsRUFBRXdxQixXQUFXLENBQUMza0IsS0FBSyw4QkFBOEIsRUFBRTRrQixXQUFXLENBQUNyekQsS0FBSyxRQUFRLEVBQUVzekQsV0FBVyxDQUFDN2tCLEtBQUssdUJBQXVCLEVBQUU4a0IsU0FBUyxDQUFDOWtCLEtBQUssOEJBQThCLEVBQUUra0IsWUFBWSxDQUFDL2tCLEtBQUssNEJBQTRCLEVBQUVnbEIsT0FBTyxDQUFDenpELEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssQ0FBQyxTQUFTLFVBQVVuUCxPQUFPLFFBQVEsRUFBRSszQyxZQUFZLENBQUEsQ0FBRSxFQUFFOHFCLFFBQVEsQ0FBQzdyQixNQUFNLENBQUMsQ0FBQzduQyxLQUFLLFFBQVEsRUFBRSxDQUFDQSxLQUFLLFNBQVNxaEMsV0FBVyxDQUFDMHVCLFFBQVEsQ0FBQy92RCxLQUFLLFFBQVEsRUFBRTR5RCxLQUFLLENBQUM1eUQsS0FBSyxRQUFRLENBQUMsRUFBRWtvQyxTQUFTLENBQUMsV0FBV1YscUJBQXFCLENBQUEsQ0FBRSxFQUFFLEVBQUVtc0IsZUFBZSxDQUFDM3pELEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssUUFBUSxFQUFFNG9DLFlBQVksQ0FBQSxDQUFFLEVBQUVvb0IsWUFBWSxDQUFDdmlCLEtBQUssNEJBQTRCLEVBQUVtbEIsVUFBVSxDQUFDNXpELEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssQ0FBQyxTQUFTLFNBQVMsRUFBRTRvQyxZQUFZLENBQUEsQ0FBRSxFQUFFaXJCLFlBQVksQ0FBQ3BsQixLQUFLLDJCQUEyQixFQUFFcWxCLFNBQVMsQ0FBQzl6RCxLQUFLLFFBQVEsRUFBRSt6RCxNQUFNLENBQUMvekQsS0FBSyxRQUFRLEVBQUVxdEQsS0FBSyxDQUFDcnRELEtBQUssU0FBUyxFQUFFZzBELElBQUksQ0FBQ2gwRCxLQUFLLFFBQVEsRUFBRWl4RCxVQUFVLENBQUNqeEQsS0FBSyxRQUFRLEVBQUV3d0QsT0FBTyxDQUFDL2hCLEtBQUssNEJBQTRCLEVBQUV3bEIsTUFBTSxDQUFDajBELEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssUUFBUSxFQUFFNG9DLFlBQVksQ0FBQSxDQUFFLEVBQUVzckIsUUFBUSxDQUFDbDBELEtBQUssU0FBU3FoQyxXQUFXLENBQUM4eUIsT0FBTyxDQUFDbjBELEtBQUssUUFBUSxFQUFFNVYsUUFBUSxDQUFDNFYsS0FBSyxTQUFTZ29DLGtCQUFrQixDQUFDb3NCLE9BQU8sQ0FBQ3AwRCxLQUFLLENBQUMsU0FBUyxTQUFTLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRXduQyxxQkFBcUIsQ0FBQSxFQUFHUSxrQkFBa0IsQ0FBQzhuQixNQUFNLEVBQUUsQ0FBQyxFQUFFdUUsWUFBWSxDQUFDcjBELEtBQUssUUFBUSxFQUFFczBELFVBQVUsQ0FBQ3QwRCxLQUFLLENBQUMsU0FBUyxTQUFTLEVBQUV1MEQsZ0JBQWdCLENBQUN2MEQsS0FBSyxDQUFDLFNBQVMsVUFBVSxFQUFFdzBELGVBQWUsQ0FBQ3gwRCxLQUFLLFNBQVMsRUFBRXkwRCxjQUFjLENBQUN6MEQsS0FBSyxDQUFDLFNBQVMsU0FBUyxFQUFFMDBELGFBQWEsQ0FBQzEwRCxLQUFLLFFBQVEsRUFBRTR2RCxTQUFTLENBQUMvbkIsTUFBTSxDQUFDLENBQUM0RyxLQUFLLCtCQUErQixFQUFFLENBQUN6dUMsS0FBSyxTQUFTZ29DLGtCQUFrQixDQUFDMm5CLG9CQUFvQixDQUFDOW5CLE1BQU0sQ0FBQyxDQUFDN25DLEtBQUssU0FBU3FoQyxXQUFXLENBQUNwbkMsUUFBUSxDQUFDdzBDLEtBQUssK0JBQStCLEVBQUVrbUIsYUFBYSxDQUFDMzBELEtBQUssUUFBUSxFQUFFNDBELGFBQWEsQ0FBQzUwRCxLQUFLLFFBQVEsRUFBRTYwRCxlQUFlLENBQUNwbUIsS0FBSywrQkFBK0IsRUFBRTRsQixZQUFZLENBQUNyMEQsS0FBSyxRQUFRLEVBQUU4MEQsU0FBUyxDQUFDOTBELEtBQUssUUFBUSxDQUFDLEVBQUV3bkMscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDOXZELEtBQUssTUFBTSxFQUFFLENBQUMsRUFBRXduQyxxQkFBcUIsQ0FBQSxDQUFFLEVBQUUsRUFBRXV0QixpQkFBaUIsQ0FBQy8wRCxLQUFLLFNBQVMsRUFBRWcxRCxjQUFjLENBQUNoMUQsS0FBSyxVQUFVb29DLFFBQVEsQ0FBQSxJQUFLRCxRQUFRLEdBQUcsRUFBRThzQixJQUFJLENBQUNqMUQsS0FBSyxDQUFDLFNBQVMsT0FBTyxFQUFFazFELFdBQVcsQ0FBQ2wxRCxLQUFLLENBQUMsU0FBUyxTQUFTLEVBQUVtMUQsU0FBUyxDQUFDbjFELEtBQUssUUFBUSxFQUFFdXZELE1BQU0sQ0FBQ3Z2RCxLQUFLLFFBQVE2RCxNQUFNLENBQUNna0MsTUFBTSxDQUFDLENBQUM3bkMsS0FBSyxTQUFTblAsT0FBTyxPQUFPLEVBQUUsQ0FBQ21QLEtBQUssU0FBU25QLE9BQU8sT0FBTyxFQUFFLENBQUNtUCxLQUFLLFNBQVNxaEMsV0FBVyxDQUFDbDBCLEtBQUssQ0FBQ25OLEtBQUssUUFBUSxFQUFFZ3ZELFFBQVEsQ0FBQ2h2RCxLQUFLLFFBQVEsRUFBRXdCLE9BQU8sQ0FBQ3hCLEtBQUssU0FBUyxFQUFFaXZELFVBQVUsQ0FBQ2p2RCxLQUFLLENBQUMsU0FBUyxVQUFVLEVBQUVrdkQsU0FBUyxDQUFDbHZELEtBQUssUUFBUSxDQUFDLEVBQUV3bkMscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFbG5CLFlBQVksQ0FBQSxDQUFFLEVBQUVzb0IsV0FBVyxDQUFDbHhELEtBQUssU0FBUyxFQUFFbzFELFNBQVMsQ0FBQzNtQixLQUFLLCtCQUErQixFQUFFNG1CLFlBQVksQ0FBQ3IxRCxLQUFLLFNBQVNpb0MsS0FBSyxDQUFDLFNBQVMsUUFBUSxpQkFBaUIsUUFBUSxVQUFVLEVBQUVxdEIsVUFBVSxDQUFDdDFELEtBQUssU0FBUyxFQUFFK3lELFFBQVEsQ0FBQy95RCxLQUFLLFFBQVEsRUFBRXUxRCxRQUFRLENBQUN2MUQsS0FBSyxRQUFRLEVBQUV3MUQsTUFBTSxDQUFDeDFELEtBQUssU0FBUyxFQUFFeTFELGFBQWEsQ0FBQ3oxRCxLQUFLLFFBQVE2RCxNQUFNLENBQUM3RCxLQUFLLFFBQVEsRUFBRTRvQyxZQUFZLENBQUEsQ0FBRSxFQUFFbW9CLFNBQVMsQ0FBQy93RCxLQUFLLENBQUMsU0FBUyxTQUFTLEVBQUU2dkQsUUFBUSxDQUFDcGhCLEtBQUssd0NBQXdDLEVBQUVpbkIsUUFBUSxDQUFDam5CLEtBQUssNEJBQTRCLEVBQUVrbkIsV0FBVyxDQUFDMzFELEtBQUssU0FBUyxFQUFFNDFELGtCQUFrQixDQUFDNTFELEtBQUssU0FBU25QLE9BQU8sVUFBVSxFQUFFZ2xFLFlBQVksQ0FBQzcxRCxLQUFLLFFBQVEsRUFBRTgxRCxZQUFZLENBQUM5MUQsS0FBSyxRQUFRLEVBQUUrMUQsTUFBTSxDQUFDdG5CLEtBQUssOEJBQThCLEVBQUV1bkIsSUFBSSxDQUFDaDJELEtBQUssU0FBUyxFQUFFbXhELFFBQVEsQ0FBQzFpQixLQUFLLHVCQUF1QixFQUFFd25CLEtBQUssQ0FBQ2oyRCxLQUFLLFFBQVEsRUFBRWsyRCxJQUFJLENBQUNsMkQsS0FBSyxRQUFRLEVBQUVtMkQsWUFBWSxDQUFDbjJELEtBQUssUUFBUSxFQUFFcXZELFFBQVEsQ0FBQ3J2RCxLQUFLLFFBQVE2RCxNQUFNLENBQUNna0MsTUFBTSxDQUFDLENBQUM3bkMsS0FBSyxTQUFTblAsT0FBTyxTQUFTLEVBQUUsQ0FBQ21QLEtBQUssU0FBU2tvQyxTQUFTLENBQUMsUUFBUTdHLFdBQVcsQ0FBQ3JoQyxLQUFLLENBQUNBLEtBQUssUUFBUSxFQUFFeUIsT0FBTyxDQUFDekIsS0FBSyxRQUFRLEVBQUV3QixPQUFPLENBQUN4QixLQUFLLFFBQVEsRUFBRXMxRCxVQUFVLENBQUN0MUQsS0FBSyxTQUFTLEVBQUVvMkQsWUFBWSxDQUFDcDJELEtBQUssUUFBUSxFQUFFK1ksS0FBSyxDQUFDL1ksS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ2cxQixZQUFZLENBQUNyMkQsS0FBSyxRQUFRLEVBQUVzMkQsaUJBQWlCLENBQUN0MkQsS0FBSyxTQUFTLEVBQUV3dUQsUUFBUSxDQUFDeHVELEtBQUssU0FBU2lvQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsRUFBRVQscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsRUFBRXpCLE9BQU8sQ0FBQ3J1RCxLQUFLLFNBQVNxaEMsV0FBVyxDQUFDa3RCLE9BQU8sQ0FBQ3Z1RCxLQUFLLFNBQVMsQ0FBQyxFQUFFd25DLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLEVBQUVpRyxNQUFNLENBQUMvMUQsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ2sxQixLQUFLLENBQUMxdUIsTUFBTSxDQUFDLENBQUM3bkMsS0FBSyxVQUFVb29DLFFBQVEsQ0FBQyxFQUFFLENBQUNwb0MsS0FBSyxRQUFRLEVBQUUsRUFBRW1OLEtBQUssQ0FBQ25OLEtBQUssUUFBUSxDQUFDLEVBQUV3bkMscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFdG9CLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRWxuQixZQUFZLENBQUEsQ0FBRSxFQUFFNHRCLGFBQWEsQ0FBQ3gyRCxLQUFLLFFBQVE2RCxNQUFNLENBQUM3RCxLQUFLLFFBQVEsRUFBRTRvQyxZQUFZLENBQUEsQ0FBRSxFQUFFNnRCLFlBQVksQ0FBQ3oyRCxLQUFLLFFBQVEsQ0FBQyxFQUFFZ29DLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxFQUFFdG9CLHFCQUFxQixDQUFBLENBQUUsRUFBRXFzQixZQUFZLENBQUMzVixJQUFJLDRCQUE0QmwrQyxLQUFLLFNBQVNxaEMsV0FBVyxDQUFDcTFCLFFBQVEsQ0FBQzEyRCxLQUFLLFNBQVMsRUFBRTIyRCxTQUFTLENBQUMzMkQsS0FBSyxTQUFTblAsT0FBTyxVQUFVLEVBQUUrbEUsUUFBUSxDQUFDNTJELEtBQUssUUFBUSxFQUFFdFUsS0FBSyxDQUFDbThDLE1BQU0sQ0FBQyxDQUFDN25DLEtBQUssUUFBUSxFQUFFLENBQUNBLEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssUUFBUSxDQUFDLEVBQUUsRUFBRTYyRCxRQUFRLENBQUM3MkQsS0FBSyxTQUFTblAsT0FBTyxVQUFVLEVBQUVpbUUsYUFBYSxDQUFDOTJELEtBQUssU0FBU25QLE9BQU8sVUFBVSxFQUFFa21FLGVBQWUsQ0FBQy8yRCxLQUFLLFNBQVNuUCxPQUFPLFVBQVUsQ0FBQyxFQUFFMjJDLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLEVBQUVrSCxZQUFZLENBQUM5WSxJQUFJLDRCQUE0QmwrQyxLQUFLLENBQUMsU0FBUyxRQUFRcWhDLFdBQVcsQ0FBQzQxQixNQUFNLENBQUNqM0QsS0FBSyxRQUFRNkQsTUFBTSxDQUFDN0QsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQzYxQixPQUFPLENBQUNsM0QsS0FBSyxRQUFRNkQsTUFBTSxDQUFDN0QsS0FBSyxRQUFRLENBQUMsRUFBRTVTLEtBQUssQ0FBQzRTLEtBQUssUUFBUSxFQUFFbTNELE9BQU8sQ0FBQ24zRCxLQUFLLFNBQVNpb0MsS0FBSyxDQUFDLFVBQVUsT0FBTyxlQUFlLEVBQUV6bUMsT0FBTyxDQUFDeEIsS0FBSyxRQUFRLENBQUMsQ0FBQyxFQUFFa29DLFNBQVMsQ0FBQyxPQUFPLFVBQVVWLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFc0gsV0FBVyxDQUFDbFosSUFBSSwyQkFBMkJsK0MsS0FBSyxDQUFDLFNBQVMsUUFBUXFoQyxXQUFXLENBQUNsMEIsS0FBSyxDQUFDbk4sS0FBSyxRQUFRLEVBQUVxM0QsY0FBYyxDQUFDcjNELEtBQUssUUFBUSxFQUFFczNELFNBQVMsQ0FBQ3QzRCxLQUFLLFNBQVMsRUFBRXd3RCxPQUFPLENBQUMvaEIsS0FBSyw0QkFBNEIsRUFBRThvQixnQkFBZ0IsQ0FBQ3YzRCxLQUFLLFNBQVNxaEMsV0FBVyxDQUFDbTJCLFlBQVksQ0FBQ3gzRCxLQUFLLFNBQVMsRUFBRXkzRCxNQUFNLENBQUN6M0QsS0FBSyxTQUFTblAsT0FBTyxVQUFVLEVBQUU2bUUsZUFBZSxDQUFDMTNELEtBQUssUUFBUSxFQUFFMjNELFFBQVEsQ0FBQzMzRCxLQUFLLFNBQVNuUCxPQUFPLFVBQVUsRUFBRSttRSxrQkFBa0IsQ0FBQzUzRCxLQUFLLFFBQVEsRUFBRTYzRCxNQUFNLENBQUM3M0QsS0FBSyxTQUFTaW9DLEtBQUssQ0FBQyxjQUFjLGFBQWEsQ0FBQyxFQUFFVCxxQkFBcUIsQ0FBQSxFQUFHUSxrQkFBa0IsQ0FBQzhuQixNQUFNLEVBQUUsQ0FBQyxFQUFFZ0ksY0FBYyxDQUFDOTNELEtBQUssU0FBU3FoQyxXQUFXLENBQUNtMkIsWUFBWSxDQUFDeDNELEtBQUssU0FBUyxFQUFFeTNELE1BQU0sQ0FBQ3ozRCxLQUFLLFNBQVNuUCxPQUFPLFVBQVUsRUFBRTZtRSxlQUFlLENBQUMxM0QsS0FBSyxRQUFRLEVBQUUyM0QsUUFBUSxDQUFDMzNELEtBQUssU0FBU25QLE9BQU8sVUFBVSxFQUFFK21FLGtCQUFrQixDQUFDNTNELEtBQUssUUFBUSxFQUFFNjNELE1BQU0sQ0FBQzczRCxLQUFLLFNBQVNpb0MsS0FBSyxDQUFDLGNBQWMsYUFBYSxDQUFDLEVBQUVULHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLEVBQUVpSSxVQUFVLENBQUMvM0QsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQzIyQixPQUFPLENBQUNoNEQsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ294QixLQUFLLENBQUN6eUQsS0FBSyxDQUFDLFNBQVMsU0FBUyxFQUFFaTRELE9BQU8sQ0FBQ2o0RCxLQUFLLFFBQVEsRUFBRWs0RCxLQUFLLENBQUNsNEQsS0FBSyxTQUFTLENBQUMsRUFBRXduQyxxQkFBcUIsQ0FBQSxFQUFHUSxrQkFBa0IsQ0FBQzhuQixNQUFNLEVBQUUsQ0FBQyxFQUFFcUksYUFBYSxDQUFDbjRELEtBQUssU0FBU3FoQyxXQUFXLENBQUNveEIsS0FBSyxDQUFDenlELEtBQUssQ0FBQyxTQUFTLFNBQVMsRUFBRWk0RCxPQUFPLENBQUNqNEQsS0FBSyxRQUFRLEVBQUVvNEQsa0JBQWtCLENBQUMzcEIsS0FBSyxpQ0FBaUMsRUFBRXdrQixRQUFRLENBQUN4a0IsS0FBSyx1QkFBdUIsQ0FBQyxFQUFFakgscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFdG9CLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLEVBQUV1SSxlQUFlLENBQUNyNEQsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ3pOLFVBQVUsQ0FBQzV6QixLQUFLLFFBQVEsRUFBRXkzRCxNQUFNLENBQUN6M0QsS0FBSyxTQUFTblAsT0FBTyxVQUFVLEVBQUV5bkUsYUFBYSxDQUFDdDRELEtBQUssU0FBUyxFQUFFeFcsT0FBTyxDQUFDd1csS0FBSyxTQUFTblAsT0FBTyxVQUFVLENBQUMsRUFBRTIyQyxxQkFBcUIsQ0FBQSxFQUFHUSxrQkFBa0IsQ0FBQzhuQixNQUFNLEVBQUUsQ0FBQyxFQUFFeUksVUFBVSxDQUFDdjRELEtBQUssU0FBU3FoQyxXQUFXLENBQUNtM0IsWUFBWSxDQUFDeDRELEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssUUFBUSxDQUFDLEVBQUV5NEQsWUFBWSxDQUFDejRELEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssU0FBU3FoQyxXQUFXLENBQUNxM0IsT0FBTyxDQUFDMTRELEtBQUssUUFBUSxDQUFDLEVBQUV3bkMscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFNkksc0JBQXNCLENBQUMzNEQsS0FBSyxTQUFTLENBQUMsRUFBRXduQyxxQkFBcUIsQ0FBQSxFQUFHUSxrQkFBa0IsQ0FBQzhuQixNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUV0b0IscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsRUFBRXNJLGtCQUFrQixDQUFDbGEsSUFBSSxrQ0FBa0NsK0MsS0FBSyxRQUFRNkQsTUFBTSxDQUFDN0QsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ3UzQix1QkFBdUIsQ0FBQzU0RCxLQUFLLFNBQVNxaEMsV0FBVyxDQUFDM04sS0FBSyxDQUFDMXpCLEtBQUssUUFBUSxFQUFFelAsTUFBTSxDQUFDeVAsS0FBSyxRQUFRLENBQUMsRUFBRXduQyxxQkFBcUIsQ0FBQSxFQUFHUSxrQkFBa0IsQ0FBQzhuQixNQUFNLEVBQUUsQ0FBQyxDQUFDLEVBQUV0b0IscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsQ0FBQyxFQUFFbUQsUUFBUSxDQUFDL1UsSUFBSSx3QkFBd0JsK0MsS0FBSyxRQUFRNkQsTUFBTSxDQUFDN0QsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ3czQixhQUFhLENBQUNwcUIsS0FBSywrQkFBK0IsRUFBRTV4QyxNQUFNLENBQUNtRCxLQUFLLENBQUMsU0FBUyxVQUFVLEVBQUU4NEQsV0FBVyxDQUFDcnFCLEtBQUssK0JBQStCLEVBQUUwbEIsT0FBTyxDQUFDbjBELEtBQUssUUFBUSxFQUFFNVYsUUFBUSxDQUFDcWtELEtBQUssNEJBQTRCLENBQUMsRUFBRWpILHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRUosUUFBUSxDQUFDeFIsSUFBSSx3QkFBd0JyVyxNQUFNLENBQUMsQ0FBQzduQyxLQUFLLFFBQVEsRUFBRSxDQUFDQSxLQUFLLFNBQVNxaEMsV0FBVyxDQUFDajBDLEtBQUssQ0FBQ3FoRCxLQUFLLDhCQUE4QixFQUFFOGtCLFNBQVMsQ0FBQzlrQixLQUFLLDhCQUE4QixFQUFFc3FCLGtCQUFrQixDQUFDLzRELEtBQUssUUFBUSxDQUFDLEVBQUV3bkMscUJBQXFCLENBQUEsQ0FBRSxFQUFFLEVBQUVxcEIsUUFBUSxDQUFDM1MsSUFBSSx3QkFBd0JsK0MsS0FBSyxDQUFDLFNBQVMsUUFBUXFoQyxXQUFXLENBQUN6c0MsS0FBSyxDQUFDb0wsS0FBSyxRQUFRLEVBQUVtMEQsT0FBTyxDQUFDbjBELEtBQUssUUFBUSxFQUFFZzVELFlBQVksQ0FBQ2g1RCxLQUFLLFNBQVNnb0Msa0JBQWtCLENBQUNvc0IsT0FBTyxDQUFDcDBELEtBQUssQ0FBQyxTQUFTLFNBQVMsQ0FBQyxDQUFDLEVBQUVpNUQsS0FBSyxDQUFDajVELEtBQUssU0FBU3FoQyxXQUFXLENBQUM4eUIsT0FBTyxDQUFDbjBELEtBQUssUUFBUSxFQUFFaEQsT0FBTyxDQUFDZ0QsS0FBSyxRQUFRNkQsTUFBTSxDQUFDN0QsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQzYzQixPQUFPLENBQUNsNUQsS0FBSyxTQUFTblAsT0FBTyxtQkFBbUIsRUFBRXNvRSxTQUFTLENBQUNuNUQsS0FBSyxRQUFRLEVBQUVvNUQsUUFBUSxDQUFDcDVELEtBQUssUUFBUSxFQUFFcTVELGNBQWMsQ0FBQ3I1RCxLQUFLLFNBQVN3bkMscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUNvc0IsT0FBTyxDQUFDcDBELEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFd25DLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLENBQUMsRUFBRTFsRSxRQUFRLENBQUM0VixLQUFLLFNBQVN3bkMscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUNvc0IsT0FBTyxDQUFDcDBELEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFFd25DLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLEVBQUUxQixTQUFTLENBQUNwdUQsS0FBSyxDQUFDLFVBQVUsVUFBVXFoQyxXQUFXLENBQUN6c0MsS0FBSyxDQUFDMGtFLFdBQVcsQ0FBQSxFQUFHdDVELEtBQUssUUFBUSxDQUFDLEVBQUV3bkMscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsRUFBRXlKLFNBQVMsQ0FBQ3Y1RCxLQUFLLFNBQVMsRUFBRXc1RCxZQUFZLENBQUN4NUQsS0FBSyxTQUFTLEVBQUV5NUQsV0FBVyxDQUFDejVELEtBQUssU0FBUyxFQUFFd3dELE9BQU8sQ0FBQy9oQixLQUFLLDRCQUE0QixDQUFDLEVBQUVqSCxxQkFBcUIsQ0FBQSxFQUFHUSxrQkFBa0IsQ0FBQzhuQixNQUFNLEVBQUUsQ0FBQyxFQUFFekIsT0FBTyxDQUFDblEsSUFBSSx1QkFBdUJsK0MsS0FBSyxDQUFDLFNBQVMsUUFBUXFoQyxXQUFXLENBQUN6c0MsS0FBSyxDQUFDb0wsS0FBSyxRQUFRLEVBQUVtMEQsT0FBTyxDQUFDbjBELEtBQUssUUFBUSxFQUFFZzVELFlBQVksQ0FBQ2g1RCxLQUFLLFNBQVNnb0Msa0JBQWtCLENBQUNvc0IsT0FBTyxDQUFDcDBELEtBQUssQ0FBQyxTQUFTLFNBQVMsQ0FBQyxDQUFDLEVBQUVvdUQsU0FBUyxDQUFDcHVELEtBQUssQ0FBQyxVQUFVLFVBQVVxaEMsV0FBVyxDQUFDenNDLEtBQUssQ0FBQzBrRSxXQUFXLENBQUEsRUFBR3Q1RCxLQUFLLFFBQVEsQ0FBQyxFQUFFd25DLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLEVBQUVVLE9BQU8sQ0FBQy9oQixLQUFLLDRCQUE0QixDQUFDLEVBQUVqSCxxQkFBcUIsQ0FBQSxFQUFHUSxrQkFBa0IsQ0FBQzhuQixNQUFNLEVBQUUsQ0FBQyxFQUFFNEosT0FBTyxDQUFDeGIsSUFBSSx1QkFBdUJsK0MsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ3pzQyxLQUFLLENBQUNvTCxLQUFLLFFBQVEsRUFBRXd6RCxZQUFZLENBQUN4ekQsS0FBSyxRQUFRLEVBQUU0eUQsS0FBSyxDQUFDNXlELEtBQUssUUFBUSxFQUFFb3VELFNBQVMsQ0FBQ3B1RCxLQUFLLENBQUMsVUFBVSxVQUFVcWhDLFdBQVcsQ0FBQ3pzQyxLQUFLLENBQUNvTCxLQUFLLFFBQVEsQ0FBQyxDQUFDLEVBQUV3d0QsT0FBTyxDQUFDL2hCLEtBQUssNEJBQTRCLEVBQUUwbEIsT0FBTyxDQUFDbjBELEtBQUssUUFBUSxFQUFFZzVELFlBQVksQ0FBQ2g1RCxLQUFLLFNBQVNnb0Msa0JBQWtCLENBQUNvc0IsT0FBTyxDQUFDcDBELEtBQUssQ0FBQyxTQUFTLFNBQVMsQ0FBQyxDQUFDLEVBQUUyNUQsZ0JBQWdCLENBQUMzNUQsS0FBSyxRQUFRLENBQUMsRUFBRXduQyxxQkFBcUIsQ0FBQSxFQUFHUSxrQkFBa0IsQ0FBQzhuQixNQUFNLEVBQUUsQ0FBQyxFQUFFOXlELE9BQU8sQ0FBQ2toRCxJQUFJLHVCQUF1QmwrQyxLQUFLLFNBQVNxaEMsV0FBVyxDQUFDenNDLEtBQUssQ0FBQ29MLEtBQUssUUFBUSxFQUFFZ2lCLFFBQVEsQ0FBQ2hpQixLQUFLLFFBQVEsRUFBRXd6RCxZQUFZLENBQUN4ekQsS0FBSyxRQUFRLEVBQUU0eUQsS0FBSyxDQUFDNXlELEtBQUssUUFBUSxFQUFFb3VELFNBQVMsQ0FBQ3B1RCxLQUFLLENBQUMsVUFBVSxVQUFVcWhDLFdBQVcsQ0FBQ3pzQyxLQUFLLENBQUMwa0UsV0FBVyxDQUFBLEVBQUd0NUQsS0FBSyxRQUFRLENBQUMsQ0FBQyxFQUFFd3dELE9BQU8sQ0FBQy9oQixLQUFLLDRCQUE0QixFQUFFa3JCLGdCQUFnQixDQUFDMzVELEtBQUssUUFBUSxDQUFDLEVBQUV3bkMscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsRUFBRWtDLFFBQVEsQ0FBQ25xQixNQUFNLENBQUMsQ0FBQzduQyxLQUFLLE1BQU0sRUFBRSxDQUFDQSxLQUFLLFFBQVEsRUFBRSxDQUFDQSxLQUFLLFFBQVE2RCxNQUFNLENBQUM3RCxLQUFLLFFBQVEsQ0FBQyxFQUFFLEVBQUU0NUQsZUFBZSxDQUFDL3hCLE1BQU0sQ0FBQyxDQUFDN25DLEtBQUssUUFBUSxFQUFFLENBQUN5dUMsS0FBSywrQkFBK0IsRUFBRSxFQUFFb3JCLGdCQUFnQixDQUFDNzVELEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssUUFBUSxFQUFFNG9DLFlBQVksQ0FBQSxDQUFFLEVBQUVreEIsYUFBYSxDQUFDanlCLE1BQU0sQ0FBQyxDQUFDN25DLEtBQUssU0FBU2dvQyxrQkFBa0IsQ0FBQyt4QixLQUFLLENBQUMvNUQsS0FBSyxDQUFDLFNBQVMsU0FBUyxVQUFVLE9BQU8sQ0FBQyxFQUFFd25DLHFCQUFxQixDQUFBLENBQUUsRUFBRSxDQUFDeG5DLEtBQUssUUFBUTZELE1BQU0sQ0FBQzdELEtBQUssUUFBUSxFQUFFNG9DLFlBQVksQ0FBQSxDQUFFLEVBQUUsRUFBRW94QixZQUFZLENBQUNoNkQsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ2owQyxLQUFLLENBQUM0UyxLQUFLLFFBQVEsRUFBRWk2RCxLQUFLLENBQUNqNkQsS0FBSyxDQUFDLFVBQVUsU0FBUyxDQUFDLEVBQUV3bkMscUJBQXFCLENBQUEsQ0FBRSxFQUFFMHlCLGFBQWEsQ0FBQ2w2RCxLQUFLLFNBQVNxaEMsV0FBVyxDQUFDajBDLEtBQUssQ0FBQzRTLEtBQUssUUFBUSxFQUFFMHhELE9BQU8sQ0FBQzF4RCxLQUFLLFNBQVMsQ0FBQyxFQUFFd25DLHFCQUFxQixDQUFBLENBQUUsRUFBRTJ5Qix5QkFBeUIsQ0FBQ242RCxLQUFLLFFBQVE2RCxNQUFNLENBQUNna0MsTUFBTSxDQUFDLENBQUM3bkMsS0FBSyxRQUFRLEVBQUUsQ0FBQ0EsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQzUvQixPQUFPLENBQUN6QixLQUFLLFFBQVEsRUFBRXdCLE9BQU8sQ0FBQ3hCLEtBQUssUUFBUSxFQUFFbzZELElBQUksQ0FBQ3A2RCxLQUFLLFFBQVEsRUFBRXE2RCxJQUFJLENBQUNyNkQsS0FBSyxRQUFRLEVBQUVtTixLQUFLLENBQUNuTixLQUFLLFFBQVEsQ0FBQyxFQUFFd25DLHFCQUFxQixDQUFBLEVBQUdRLGtCQUFrQixDQUFDOG5CLE1BQU0sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFcUIsUUFBUSxDQUFDbnhELEtBQUssU0FBU2dvQyxrQkFBa0IsQ0FBQ3N5QixXQUFXLENBQUN6eUIsTUFBTSxDQUFDLENBQUM3bkMsS0FBSyxTQUFTLEVBQUUsQ0FBQ0EsS0FBSyxTQUFTcWhDLFdBQVcsQ0FBQ2s1QixLQUFLLENBQUN2NkQsS0FBSyxTQUFTLEVBQUV3NkQsS0FBSyxDQUFDeDZELEtBQUssU0FBUyxDQUFDLEVBQUVrb0MsU0FBUyxDQUFDLE9BQU8sUUFBUVYscUJBQXFCLENBQUEsRUFBR1Esa0JBQWtCLENBQUM4bkIsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTBJLFlBQVksQ0FBQ3pJLFFBQVEsQ0FBQzdSLElBQUksb0NBQW9DdFcsTUFBTSxDQUFDLENBQUNNLFNBQVMsQ0FBQyxRQUFRLEVBQUUsQ0FBQ0EsU0FBUyxDQUFDLFFBQVEsR0FBRzdHLFdBQVcsQ0FBQyt1QixNQUFNLENBQUNsb0IsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUza0IsRUFBRXRxQixHQUFnQjJFLEVBQUVzekIsR0FBQSxFQUFldG1DLEVBQUV1TyxHQUFBLEVBQXNCc2hFLEVBQUUsQ0FBQ2hILE9BQU8sNkJBQTZCbEUsTUFBTXBnRSxFQUFFa2dFLFFBQVE3akUsRUFBRWt2RSxTQUFTLHdCQUF3QkMsS0FBSyx1QkFBdUJDLGtCQUFrQix5eEJBQXl4QixFQUFNNzlELEVBQUVtTyxJQUFJLEdBQUc3Z0IsTUFBTUMsUUFBUTRnQixDQUFDLEVBQUUsSUFBSTlmLElBQUl3TCxFQUFFLEVBQUVBLEVBQUVzVSxFQUFFbmdCLE9BQU82TCxHQUFHLEVBQUVtRyxFQUFFbU8sRUFBRXRVLEVBQUUsTUFBTSxVQUFVLE9BQU9zVSxJQUFJQSxFQUFFbEwsTUFBTWtMLEVBQUVyYSxTQUFTcWEsRUFBRTIzQixRQUFRNDNCLEVBQUV2dkQsRUFBRXJhLFFBQVFpRSxTQUFRLEVBQUcsT0FBT29XLEVBQUVyYSxRQUFRckcsT0FBTzJKLEtBQUsrVyxDQUFDLEVBQUU3VyxRQUFRdUMsSUFBSW1HLEVBQUVtTyxFQUFFdFUsRUFBRSxDQUFDLENBQUMsR0FBRyxPQUFPc1UsQ0FBQyxFQUFxbUIsU0FBUzJ2RCxHQUFFamtFLEdBQUcsSUFBSXNVLEVBQUUsRUFBRS9kLFVBQVVwQyxRQUFReUwsS0FBQUEsSUFBU3JKLFVBQVUsR0FBR0EsVUFBVSxHQUFHLEtBQVNHLEVBQUVxMUIsRUFBRS9yQixDQUFDLEVBQUUsR0FBRyxDQUFDdEosRUFBRSxPQUFPc0osRUFBRSxHQUFHLFVBQVUsT0FBT3RKLEVBQUUsT0FBT3NKLEVBQUUsR0FBR3BNLE9BQU9vRCxVQUFVMkgsZUFBZTFILEtBQUtQLEVBQUUsVUFBVSxFQUFFLE9BQU9zSixFQUFFeEwsSUFBSW9ULEVBQUVoVSxPQUFPMkosS0FBSzdHLENBQUMsRUFBRTgxQixFQUFFLEdBQUc5dEIsRUFBRXNCLEdBQUd3c0IsRUFBRXowQixLQUFLaUksQ0FBQyxFQUFFcEwsR0FBR2hCLE9BQU8ySixLQUFLN0csQ0FBQyxFQUFFK0csUUFBUXVDLElBQUlzVSxFQUFFdFUsRUFBRXdzQixFQUFFOTFCLEVBQUVzSixHQUFHcEwsRUFBRThKLEdBQUc4dEIsRUFBRUEsRUFBRTZ3QyxTQUFTN3dDLEVBQUVBLEVBQUUsR0FBRy8xQixNQUFNLEdBQUcsRUFBRSxHQUFHN0IsRUFBRSxXQUFXb0QsT0FBT3NjLEVBQUUsbUVBQW1FLEVBQUV0YyxPQUFPdzBCLEVBQUVuNEIsWUFBYSxFQUFDLHFIQUFxSCxFQUFFMkQsT0FBT3cwQixFQUFFLElBQUksQ0FBQyxHQUFHNTNCLEVBQUVvTCxFQUFFc1UsRUFBRTVkLEVBQUVzSixHQUFHd3NCLEVBQUU5dEIsR0FBRzRWLEVBQUVBLEVBQUV5b0QsaUJBQWlCdndDLEVBQUUsV0FBV3gwQixPQUFPcEQsRUFBRSx1QkFBdUIsRUFBRW9ELE9BQU9zYyxFQUFFLGthQUFrYSxDQUFDLEVBQUUsSUFBSUEsRUFBRWtZLEVBQUU5MUIsRUFBRXNKLEdBQUdwTCxFQUFFZ1QsRUFBRSxHQUFHNGtCLEVBQUUwM0MsSUFBSSxDQUFDMXZFLElBQUl3TCxFQUFFd3NCLEVBQUUwM0MsSUFBSWxrRSxFQUFFZ1EsV0FBVyxZQUFZLElBQUlzRSxFQUFFdFUsRUFBRXZKLE1BQU0sR0FBRyxFQUFFLEdBQUc3QixFQUFFaVYsU0FBU3lLLENBQUMsS0FBS3RVLEVBQUUsV0FBV2hJLE9BQU9zYyxDQUFDLEdBQUdrWSxFQUFFc3hDLGFBQWE5OUQsRUFBRSxPQUFPd3NCLEVBQUUwM0MsR0FBRyxFQUFFdHZFLEVBQUU4QixFQUFFc0osSUFBSXk1RCxhQUFhN2tFLEVBQUU0a0UsTUFBTSxDQUFDanFDLFFBQVEzNkIsRUFBRTRrRSxNQUFNQyxXQUFXN2tFLEVBQUU2a0UsVUFBVSxFQUFFLE9BQU83a0UsRUFBRTZrRSxhQUFhbmxELEVBQUU1ZCxFQUFFc0osSUFBSW1rRSxhQUFhN3ZELEVBQUVncEQsUUFBUSxDQUFDQyxPQUFPanBELEVBQUU2dkQsVUFBVSxFQUFFN3ZELEVBQUU4dkQsVUFBVTl2RCxFQUFFZ3BELFFBQVE5cEUsUUFBUThnQixFQUFFOHZELFFBQVEsT0FBTzl2RCxFQUFFOHZELFNBQVMsT0FBTzl2RCxFQUFFNnZELFlBQVksSUFBSS9qRSxFQUFFMUosRUFBRXNKLEdBQUdNLEVBQUVzSCxFQUFFLEdBQUd4SCxFQUFFdy9ELGFBQWEsSUFBSXByRSxJQUFJd0wsRUFBRSxFQUFFQSxFQUFFSSxFQUFFdy9ELGFBQWF6ckUsT0FBTzZMLEdBQUcsRUFBRSxDQUFDLElBQUkwaEIsRUFBRXRoQixFQUFFdy9ELGFBQWE1L0QsR0FBR00sRUFBRXVKLFNBQVM2WCxFQUFFanJCLE1BQU0sR0FBRyxFQUFFLEVBQUUsSUFBSTJKLEVBQUV3L0QsYUFBYTUvRCxHQUFHLGFBQWFoSSxPQUFPMHBCLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxJQUFJLE9BQU85dEIsT0FBTzJKLEtBQUs3RyxDQUFDLEVBQUUrRyxRQUFRdUMsSUFBSXBMLEVBQUVvTCxHQUFHdEosRUFBRXNKLEdBQUcsT0FBT3RKLEVBQUVzSixFQUFFLENBQUMsRUFBRXRKLEVBQUUwWSxRQUFRLE1BQU0xWSxFQUFFOGhFLFNBQVM1akUsRUFBM3hFb0wsRUFBK3hFdEosRUFBN3hFNGQsRUFBK3hFNVYsRUFBM2pFLEdBQTNOOUosR0FBR29MLElBQUl4TCxJQUFJOGYsRUFBRSxHQUFHLE9BQU8xZ0IsT0FBTzJlLE9BQU92UyxDQUFDLEVBQUV2QyxRQUFRdUMsSUFBSUEsRUFBRXk0RCxTQUFTLElBQUloN0QsUUFBUXVDLEdBQUdzVSxFQUFFdmMsS0FBS2lJLENBQUMsQ0FBQyxDQUFDLEVBQUVBLEVBQUUsSUFBSThRLElBQUl3RCxFQUFFdmdCLElBQUlpTSxJQUFJQSxFQUFFSSxFQUFFSixDQUFDLEVBQVN0QixFQUFFc0IsQ0FBQyxFQUFFQSxFQUFFSixLQUFBQSxFQUFPLENBQUMsRUFBRW5NLE1BQU0yRCxLQUFLNEksQ0FBQyxFQUFFOUwsT0FBTzhMLEdBQUdBLENBQUMsRUFBRWpNLElBQUlpTSxNQUFNQSxHQUFHLENBQUN3M0QsU0FBUyxDQUFBLEVBQUd4NUQsS0FBS2dDLENBQUMsQ0FBRSxFQUFDLENBQUUsR0FBRUEsRUFBRXc0RCxRQUFRLEdBQU1ya0UsU0FBU3E0QixFQUFFNTNCLEVBQUViLElBQUlpTSxHQUFHeEYsS0FBS0MsVUFBVXVGLENBQUMsQ0FBQyxFQUFFNUwsS0FBSyxHQUFHLEVBQUVrZ0IsRUFBRSxrQkFBa0J0YyxPQUFPdzBCLEVBQUUsZ1JBQWdSLENBQUMsRUFBRXhzQixFQUFFeTRELFFBQVE3akUsR0FBK3NEK04sR0FBRWpNLEVBQUUsVUFBVSxFQUFFaU0sR0FBRWpNLEVBQUUsU0FBUyxFQUFFODFCLEVBQUV6NEIsSUFBSWlNLEdBQUcsS0FBS2hJLE9BQU9nSSxFQUFFaEwsUUFBUSxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUVaLEtBQUssSUFBSSxHQUFHLEVBQUVvNEIsRUFBRXI0QixPQUFPLEtBQUssSUFBSXNQLEVBQUUvTSxFQUFFNGQsQ0FBQyxFQUFqNkUsSUFBYUEsRUFBT2tZLEVBQUU1M0IsQ0FBNDRFLENBQUNvTCxFQUFFcWtFLHFDQUFxQyxJQUFJbCtELEVBQUV5eUQsQ0FBQyxFQUFFNTRELEVBQUVza0UsNEJBQTRCbGtFLEVBQUVKLEVBQUV1a0UsY0FBYzdsRSxFQUFFc0IsRUFBRXdrRSxtQkFBbUJQLEdBQUVqa0UsRUFBRXlrRSxvQkFBb0IsU0FBU3prRSxHQUFHLElBQUlzVSxFQUFFLEVBQUUvZCxVQUFVcEMsUUFBUXlMLEtBQUFBLElBQVNySixVQUFVLEdBQUdBLFVBQVUsR0FBRyxLQUFTM0IsRUFBRW0zQixFQUFFL3JCLENBQUMsRUFBRSxHQUFHLENBQUNwTCxFQUFFLE9BQU9vTCxFQUFFLEdBQUcsVUFBVSxPQUFPcEwsRUFBRSxPQUFPb0wsRUFBRSxHQUFHLENBQUNwTCxFQUFFd2EsU0FBU3hhLEVBQUV3YSxRQUFRWSxXQUFXLEdBQUcsRUFBRSxPQUFPaFEsRUFBRXhMLElBQUlnNEIsRUFBRSxHQUFHcHNCLEVBQUVKLEdBQUd3c0IsRUFBRXowQixLQUFLaUksQ0FBQyxFQUFFLE9BQU9wTSxPQUFPMkosS0FBSzNJLEVBQUU0akUsUUFBUSxFQUFFLzZELFFBQVE2VyxJQUFJOWYsSUFBSWc0QixFQUFFNTNCLEVBQUU0akUsU0FBU2xrRCxHQUFHa1ksRUFBRXF2QyxNQUFNajBELEVBQUU0a0IsRUFBRSwrQkFBK0JBLEVBQUVxdkMsSUFBSSxFQUFFcnZDLEVBQUVreEMsV0FBVzkxRCxFQUFFNGtCLEVBQUUsaUNBQWlDQSxFQUFFa3hDLFNBQVMsRUFBRWx4QyxFQUFFOHhDLFlBQVkxMkQsRUFBRTRrQixFQUFFLCtCQUErQkEsRUFBRTh4QyxVQUFVLEVBQUU5eEMsRUFBRW14QyxpQkFBaUIvMUQsRUFBRTRrQixFQUFFLHVDQUF1Q0EsRUFBRW14QyxlQUFlLEVBQUVueEMsRUFBRWs0QyxnQkFBZ0J0a0UsRUFBRSxXQUFXcEksT0FBT3NjLEVBQUUscUJBQXFCLEVBQUV0YyxPQUFPdzBCLEVBQUVrNEMsY0FBYyx3T0FBd08sQ0FBQyxFQUFFLE9BQU9sNEMsRUFBRWs0QyxlQUFlbDRDLEVBQUVvekMsZUFBZXgvRCxFQUFFLFdBQVdwSSxPQUFPc2MsRUFBRSxvQkFBb0IsRUFBRXRjLE9BQU93MEIsRUFBRW96QyxhQUFhLG1WQUFtVixDQUFDLEVBQUUsT0FBT3B6QyxFQUFFb3pDLGNBQWMsQ0FBQyxhQUFhLFlBQVksU0FBUyxpQkFBaUJuaUUsUUFBUXVDLElBQUlwTSxPQUFPb0QsVUFBVTJILGVBQWUxSCxLQUFLdTFCLEVBQUV4c0IsQ0FBQyxHQUFHSSxFQUFFLFdBQVdwSSxPQUFPc2MsRUFBRSxPQUFPLEVBQUV0YyxPQUFPZ0ksRUFBRSxHQUFHLEVBQUVoSSxPQUFPdzBCLEVBQUVybUIsRUFBRSxpUEFBaVAsQ0FBQyxFQUFFLE9BQU9xbUIsRUFBRXhzQixFQUFFLENBQUMsRUFBRXdzQixFQUFFc3dDLFVBQVUxOEQsRUFBRSxXQUFXcEksT0FBT3NjLEVBQUUsZUFBZSxFQUFFdGMsT0FBT3cwQixFQUFFc3dDLFFBQVEsdUtBQXVLLENBQUMsRUFBRSxPQUFPdHdDLEVBQUVzd0MsU0FBU3R3QyxFQUFFd3dDLFlBQVk1OEQsRUFBRSxXQUFXcEksT0FBT3NjLEVBQUUsaUJBQWlCLEVBQUV0YyxPQUFPdzBCLEVBQUV3d0MsVUFBVSxpRUFBaUUsQ0FBQyxFQUFFLE9BQU94d0MsRUFBRXd3QyxXQUFXLE9BQU94d0MsRUFBRXF2QyxLQUFLLE9BQU9ydkMsRUFBRWt4QyxVQUFVLE9BQU9seEMsRUFBRTh4QyxXQUFXLE9BQU85eEMsRUFBRW14QyxlQUFlLENBQUMsRUFBRS9vRSxFQUFFd2EsUUFBUSxJQUFJek0sR0FBRS9OLEVBQUUsVUFBVSxFQUFFK04sR0FBRS9OLEVBQUUsU0FBUyxFQUFFNDNCLEVBQUV6NEIsSUFBSWlNLEdBQUcsS0FBS2hJLE9BQU9nSSxFQUFFaEwsUUFBUSxNQUFNLEtBQUssQ0FBQyxDQUFDLEVBQUVaLEtBQUssSUFBSSxHQUFHLEVBQUVvNEIsRUFBRXI0QixPQUFPLEtBQUssSUFBSXNQLEVBQUU3TyxFQUFFMGYsQ0FBQyxDQUFDLEVBQUV0VSxFQUFFMmtFLG9CQUFvQixTQUFTM2tFLEdBQUcsSUFBSXNVLEVBQUUsRUFBRS9kLFVBQVVwQyxRQUFReUwsS0FBQUEsSUFBU3JKLFVBQVUsR0FBR0EsVUFBVSxHQUFHLEtBQVNpMkIsRUFBRVQsRUFBRS9yQixDQUFDLEVBQUUsT0FBT3dzQixHQUFHLFVBQVUsT0FBT0EsR0FBR0EsRUFBRXBkLFNBQVMsQ0FBQ29kLEVBQUVwZCxRQUFRWSxXQUFXLEdBQUcsR0FBR3djLEVBQUVnc0MsVUFBVTVrRSxPQUFPMkosS0FBS2l2QixFQUFFZ3NDLFFBQVEsRUFBRS82RCxRQUFRdUMsSUFBSSxJQUFJc1UsR0FBa0J0VSxFQUFkd3NCLEVBQUVnc0MsU0FBU3g0RCxJQUFLcTVELFFBQVFyNUQsRUFBRXE1RCxPQUFPOEgsYUFBWTdzRCxFQUFFdFUsRUFBRXE1RCxPQUFPOEgsV0FBWUMsU0FBUzlzRCxFQUFFOHNELE9BQU92RixPQUFPNzdELEVBQUU2N0QsS0FBS3ZuRCxFQUFFOHNELE9BQU92RixNQUFNdm5ELEVBQUU4c0QsT0FBT0MsU0FBU3JoRSxFQUFFMDlELFVBQVVwcEQsRUFBRThzRCxPQUFPQyxRQUFRL3NELEVBQUU4c0QsT0FBT0UsUUFBUXRoRSxFQUFFcytELFdBQVdocUQsRUFBRThzRCxPQUFPRSxNQUFNaHRELEVBQUVpdEQsZUFBZWp0RCxFQUFFaXRELGFBQWFGLFNBQVNyaEUsRUFBRTI5RCxnQkFBZ0JycEQsRUFBRWl0RCxhQUFhRixRQUFRcmhFLEVBQUVxNUQsUUFBUXI1RCxFQUFFcTVELE9BQU9vSSxnQkFBZ0J6aEUsRUFBRXE1RCxPQUFPb0ksZUFBZXprQyxXQUFXLENBQUNoOUIsRUFBRW04RCxVQUFVbjhELEVBQUVtOEQsUUFBUW44RCxFQUFFcTVELE9BQU9vSSxlQUFlemtDLFdBQVcsT0FBT2g5QixFQUFFcTVELE1BQU0sQ0FBQyxFQUFFN3NDLEVBQUVwZCxRQUFRLE1BQU16TSxHQUFFNnBCLEVBQUUsVUFBVSxFQUFFN3BCLEdBQUU2cEIsRUFBRSxTQUFTLEVBQUUvb0IsRUFBRStvQixFQUFFbFksQ0FBQyxHQUFHdFUsQ0FBQyxFQUFFQSxFQUFFNGtFLG9CQUFvQixTQUFTNWtFLEdBQUcsSUFBSXNVLEVBQUVrWSxFQUFFLEVBQUVqMkIsVUFBVXBDLFFBQVF5TCxLQUFBQSxJQUFTckosVUFBVSxHQUFHQSxVQUFVLEdBQUcsS0FBSzNCLEVBQUVxdkUsR0FBRWprRSxFQUFFd3NCLENBQUMsRUFBRWg0QixJQUFJNEwsRUFBRTJyQixFQUFFbjNCLENBQUMsRUFBRSxPQUFPd0wsR0FBRyxVQUFVLE9BQU9BLEdBQUt4TCxFQUFFQSxFQUFFa0ssTUFBTSxpQkFBaUIsR0FBRyxHQUFHbEwsT0FBTzJKLEtBQUs2QyxFQUFFbzRELFVBQVUsRUFBRSxFQUFFLzZELFFBQVF1QyxLQUFJQSxFQUFFSSxFQUFFbzRELFNBQVN4NEQsSUFBSzY3RCxNQUFNajBELEVBQUU1SCxFQUFFLCtCQUErQkEsRUFBRTY3RCxJQUFJLEVBQUU3N0QsRUFBRTA5RCxXQUFXOTFELEVBQUU1SCxFQUFFLGlDQUFpQ0EsRUFBRTA5RCxTQUFTLEVBQUUxOUQsRUFBRXMrRCxZQUFZMTJELEVBQUU1SCxFQUFFLCtCQUErQkEsRUFBRXMrRCxVQUFVLEVBQUV0K0QsRUFBRTI5RCxpQkFBaUIvMUQsRUFBRTVILEVBQUUsdUNBQXVDQSxFQUFFMjlELGVBQWUsRUFBRSxPQUFPMzlELEVBQUU2N0QsS0FBSyxPQUFPNzdELEVBQUUwOUQsVUFBVSxPQUFPMTlELEVBQUVzK0QsV0FBVyxPQUFPdCtELEVBQUUyOUQsZUFBZSxDQUFDLEVBQUUsT0FBT3JwRCxFQUFFLFNBQVNBLEdBQUcsSUFBSSxJQUFJdFUsRUFBRSxFQUFFQSxFQUFFekosVUFBVXBDLE9BQU82TCxDQUFDLEdBQUcsQ0FBQyxJQUFJd3NCLEVBQUUsTUFBTWoyQixVQUFVeUosR0FBR3pKLFVBQVV5SixHQUFHLEdBQUdBLEVBQUUsRUFBRTBoQixHQUFFOXRCLE9BQU80NEIsQ0FBQyxFQUFFLENBQUEsQ0FBRSxFQUFFL3VCLFFBQVEsU0FBU3VDLEdBQTFpMkIsSUFBV0EsRUFBSXdzQixFQUFPeHNCLEVBQVhBLEVBQW9pMkJzVSxFQUFoaTJCa1ksRUFBb2kyQkEsRUFBdGkyQmxZLEVBQW9pMkJ0VSxJQUE5aDJCc1UsRUFBTSxVQUFVLE9BQU90VSxHQUFJQSxJQUFPLEdBQUcsVUFBVSxPQUFPQSxHQUFHLENBQUNBLEVBQUUsT0FBT0EsRUFBRSxJQUFJd3NCLEVBQUV4c0IsRUFBRXNLLE9BQU91NkQsYUFBYSxHQUFHamxFLEtBQUFBLElBQVM0c0IsRUFBRSxPQUFvQmx5QixPQUFlMEYsQ0FBQyxFQUFFLEdBQUcsVUFBVSxPQUFPd3NCLEVBQUVBLEVBQUV2MUIsS0FBSytJLEVBQWtHLFFBQXBGLEdBQUcsT0FBT3dzQixFQUFFLE1BQU0sSUFBSTc0QixVQUFVLDhDQUE4QyxDQUFFLEdBQXVCMmdCLENBQVgsR0FBR3RVLEVBQUVBLEVBQUUsTUFBVUEsRUFBRXBNLE9BQU9tZSxlQUFlL1IsRUFBRXNVLEVBQUUsQ0FBQzNhLE1BQU02eUIsRUFBRTV5QixXQUFXLENBQUEsRUFBR0UsYUFBYSxDQUFBLEVBQUdELFNBQVMsQ0FBQSxDQUFFLENBQUMsRUFBRW1HLEVBQUVzVSxHQUFHa1ksQ0FBa3ExQixDQUFDLEVBQUU1NEIsT0FBT3FlLDBCQUEwQnJlLE9BQU9reEUsaUJBQWlCeHdELEVBQUUxZ0IsT0FBT3FlLDBCQUEwQnVhLENBQUMsQ0FBQyxFQUFFOUssR0FBRTl0QixPQUFPNDRCLENBQUMsQ0FBQyxFQUFFL3VCLFFBQVEsU0FBU3VDLEdBQUdwTSxPQUFPbWUsZUFBZXVDLEVBQUV0VSxFQUFFcE0sT0FBT3lMLHlCQUF5Qm10QixFQUFFeHNCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU9zVSxDQUFDLEVBQUUsQ0FBQ3RXLEtBQUsscUJBQXFCLEVBQUVvQyxDQUFDLEdBQUdnUCxRQUFRek0sR0FBRTJSLEVBQUUsVUFBVSxFQUFFM1IsR0FBRTJSLEVBQUUsU0FBUyxFQUFFMWYsRUFBRWIsSUFBSWlNLEdBQUcsS0FBS2hJLE9BQU9nSSxFQUFFaEwsUUFBUSxZQUFZLEVBQUUsQ0FBQyxDQUFDLEVBQUVaLEtBQUssSUFBSSxHQUFHLEVBQUVRLEVBQUVULE9BQU8sS0FBSyxJQUFJc1AsRUFBRTZRLEVBQUVrWSxDQUFDLEdBQWo3QnhzQixDQUFtN0IsRUFBRUEsRUFBRStrRSxrQ0FBa0NydUUsSUFBSSxJQUFJc0osRUFBRStyQixFQUFFcjFCLENBQUMsRUFBTTRkLEVBQUUsSUFBSXROLEVBQUUsQ0FBQzArQixVQUFVLENBQUEsRUFBRzVmLE9BQU8sQ0FBQSxDQUFFLENBQUMsRUFBRTl4QixFQUFFc2dCLENBQUMsRUFBRTFnQixPQUFPMkosS0FBS3NtRSxDQUFDLEVBQUVwbUUsUUFBUXVDLEdBQUdzVSxFQUFFc3lDLFVBQVU1bUQsRUFBRTZqRSxFQUFFN2pFLEVBQUUsQ0FBQyxFQUFFLElBQUl3c0IsRUFBRWxZLEVBQUV1NUIsUUFBUStxQixDQUFDLEVBQUUsR0FBR3BzQyxFQUFFeHNCLENBQUMsRUFBRSxNQUFNLEdBQUd4TCxJQUFJb1QsRUFBRStrQixFQUFFOEUsY0FBYy82QixFQUFFLENBQUNtdkIsYUFBYSxDQUFBLENBQUUsQ0FBQyxFQUFFLE9BQU8yRyxFQUFFL0csT0FBTzF4QixJQUFJaU0sSUFBSXhMLElBQUk4ZixFQUFFdFUsRUFBRThqQyxhQUFhLHlCQUF5QjlqQyxFQUFFd2lDLFVBQVVsdUIsR0FBRyxJQUFJdGMsT0FBT2dJLEVBQUVtbUMsT0FBT3NvQixrQkFBa0IsR0FBRyxJQUFJamlDLEVBQUVsWSxFQUFFN2QsTUFBTSxHQUFHLEVBQUUxQixNQUFNLENBQUMsRUFBTUgsRUFBRWdULEVBQUV3TixNQUFNb1gsRUFBRSxDQUFBLENBQUUsRUFBTXBzQixHQUFHeEwsRUFBRSxPQUFPQSxFQUFFZ1QsRUFBRXdOLE1BQU1vWCxFQUFFejNCLE1BQU0sRUFBRSxDQUFFLENBQUEsRUFBRSxDQUFBLENBQUUsRUFBRUgsR0FBR0EsRUFBRXNkLE1BQU0sR0FBRyxFQUFFLEVBQStqQndQLEVBQUUsZ0RBQXdTLE1BQU0sQ0FBQ25pQixLQUFLYSxHQUFoM0IxSixFQUFFc1IsVUFBVSxFQUFFNUgsQ0FBQyxFQUFFdEIsTUFBTSxLQUFLLEdBQUcsSUFBSTNLLE9BQU8sRUFBdzBCK3lCLFFBQTl6Qix5QkFBeUJsbkIsRUFBRXdpQyxRQUFRLFFBQVF4cUMsT0FBT29JLEVBQUUsR0FBRyxFQUFFcEksT0FBT3NjLEVBQUUsTUFBTSxFQUFFdGMsT0FBT2dJLEVBQUVtbUMsT0FBT3NvQixtQkFBbUIsb0JBQW9CLEVBQUV6MkQsT0FBT3NjLEVBQUUsR0FBRyxFQUFFLFdBQVd0VSxFQUFFd2lDLFFBQVEsUUFBUXhxQyxPQUFPb0ksRUFBRSxHQUFHLEVBQUVwSSxPQUFPc2MsRUFBRSxtQ0FBbUMsRUFBRXRjLE9BQU9nSSxFQUFFbW1DLE9BQU9sc0MsT0FBTyxHQUFHLEVBQUUsVUFBVStGLEVBQUV3aUMsUUFBUSxRQUFReHFDLE9BQU9vSSxFQUFFLEdBQUcsRUFBRXBJLE9BQU9zYyxFQUFFLDJFQUEyRSxFQUFFLFFBQVF0YyxPQUFPb0ksRUFBRSxHQUFHLEVBQUVwSSxPQUFPc2MsRUFBRSxLQUFLLEVBQUV0YyxPQUFPZ0ksRUFBRWtuQixRQUFRLElBQUksRUFBRWx2QixPQUFPZ0ksRUFBRXdpQyxRQUFRLElBQUksRUFBRXhxQyxPQUFPd0MsS0FBS0MsVUFBVXVGLEVBQUVtbUMsTUFBTSxFQUFFLEdBQUcsRUFBMlU2K0IsU0FBU2hsRSxHQUFoUixjQUFsRUEsRUFBRXdzQixFQUFFLElBQTZFLEdBQUd4MEIsT0FBTzBwQixFQUFFLGNBQWMsRUFBRSxhQUFhMWhCLEVBQUUsR0FBR2hJLE9BQU8wcEIsRUFBRSxjQUFjLEVBQUUsWUFBWTFoQixFQUFFLEdBQUdoSSxPQUFPMHBCLEVBQUUsYUFBYSxFQUFFLFlBQVkxaEIsRUFBRSxHQUFHaEksT0FBTzBwQixFQUFFLGFBQWEsRUFBRSxZQUFZMWhCLEVBQUUsR0FBR2hJLE9BQU8wcEIsRUFBRSxhQUFhLEVBQUVBLElBQUk4SyxFQUFFLEdBQUcsSUFBSXgwQixPQUFPdzBCLEVBQUUsRUFBRSxFQUFFLEdBQXNDLENBQUMsQ0FBQyxDQUFDLEVBQUV4c0IsRUFBRWlsRSxVQUFVOXZFLEVBQUU2SyxFQUFFa2xFLFVBQVVuNUMsRUFBRS9yQixFQUFFbWxFLGNBQWMxaEUsQ0FBdjg1QiwwQkNzQnZELFNBQVN1NUIsRUFBVy9pQyxFQUFRMk4sRUFBR3VkLEVBQUd4aUIsRUFBRzVDLEVBQUdDLEVBQUd6SCxHQU96RCxJQVFROEIsRUFDQStxRSxFQUNKM3BFLEVBVkosR0FBSSxDQUFDdWhDLEVBaUJILE1BZmVwOUIsS0FBQUEsSUFBWDNGLEVBQ0Z3QixFQUFRLElBQUlKLE1BQ1YsK0hBRUQsR0FFR2hCLEVBQU8sQ0FBQ3VOLEVBQUd1ZCxFQUFHeGlCLEVBQUc1QyxFQUFHQyxFQUFHekgsR0FDdkI2c0UsRUFBVyxHQUlmM3BFLEVBSFEsSUFBSUosTUFDVnBCLEVBQU9qRixRQUFRLE1BQU8sV0FBYSxPQUFPcUYsRUFBSytxRSxDQUFRLEdBQU0sQ0FBQSxDQUM5RCxHQUNLcG5FLEtBQU8sdUJBR2Z2QyxFQUFNNHBFLFlBQWMsRUFDZDVwRSxJQ3lCRzZwRSxFQUFhQSxDQUFDbDhELEVBQWU1UyxLQUEyQixDQUNqRTRTLEtBQUFBLEVBQ0E1UyxLQUFBQSxDQUNILEdBR00sSUFBTSt1RSxFQUFrQyxDQUMzQ0MsV0FBWUYsRUFBVyxRQUFTLGFBQWEsRUFDN0NHLGVBQWdCSCxFQUFXLFdBQVkscUJBQXFCLEVBQzVESSxzQkFBdUJKLEVBQVcsNEJBQTZCLDRCQUE0QixFQUMzRkssVUFBV0wsRUFBVyxRQUFTLFNBQVMsRUFDeENNLFdBQVlOLEVBQVcsUUFBUyxVQUFVLEVBQzFDTyxnQkFBaUJQLEVBQVcsUUFBUyxlQUFlLEVBQ3BEUSxTQUFVUixFQUFXLFFBQVMsUUFBUSxFQUN0Q1MsYUFBY1QsRUFBVyxRQUFTLFlBQVksRUFDOUNVLFlBQWFWLEVBQVcsUUFBUyxXQUFXLEVBQzVDVyxnQkFBaUJYLEVBQVcsUUFBUyxlQUFlLEVBQ3BEWSxpQkFBa0JaLEVBQVcsUUFBUyxnQkFBZ0IsRUFDdERhLGFBQWNiLEVBQVcsV0FBWSxZQUFZLEVBQ2pEekosS0FBTXlKLEVBQVcsYUFBYyw4QkFBOEIsRUFDN0RjLFNBQVVkLEVBQVcsU0FBVSxFQUFFLEVBQ2pDZSxxQkFBc0JmLEVBQVcsUUFBUyxxQkFBcUIsRUFDL0RnQixrQkFBbUJoQixFQUFXLDBCQUEyQiw4QkFBOEIsRUFDdkZpQixtQkFBb0JqQixFQUFXLDBCQUEyQiwrQkFBK0IsRUFDekZrQixtQkFBb0JsQixFQUFXLDBCQUEyQiwrQkFBK0IsRUFDekZtQixvQkFBcUJuQixFQUFXLDBCQUEyQixnQ0FBZ0MsRUFDM0ZvQixPQUFRcEIsRUFBVyxRQUFTLFNBQVMsRUFDckNxQixVQUFXckIsRUFBVyxRQUFTLFNBQVMsRUFDeENzQixhQUFjdEIsRUFBVyxRQUFTLFlBQVksRUFDOUNoSixJQUFLZ0osRUFBVyxRQUFTLEtBQUssRUFDOUI3SSxXQUFZNkksRUFBVyxRQUFTLFlBQVksRUFDNUM1SSxXQUFZNEksRUFBVyxRQUFTLFlBQVksRUFDNUN1QixXQUFZdkIsRUFBVyxRQUFTLFVBQVUsRUFDMUNseUUsSUFBS2t5RSxFQUFXLE9BQVEsYUFBYSxFQUNyQ3pJLE9BQVF5SSxFQUFXLFFBQVMsUUFBUSxFQUNwQ3dCLEtBQU14QixFQUFXLE9BQVEsUUFBUSxFQUNqQ3lCLFlBQWF6QixFQUFXLFFBQVMsV0FBVyxFQUM1QzBCLGFBQWMxQixFQUFXLFFBQVMsa0JBQWtCLEVBQ3BEMkIsa0JBQW1CM0IsRUFBVyxRQUFTLHNCQUFzQixFQUM3RDRCLGlCQUFrQjVCLEVBQVcsUUFBUyxxQkFBcUIsRUFDM0Q2QixzQkFBdUI3QixFQUFXLFFBQVMsMEJBQTBCLEVBQ3JFOEIsaUJBQWtCOUIsRUFBVyxRQUFTLHFCQUFxQixFQUMzRHBJLFNBQVVvSSxFQUFXLFFBQVMsVUFBVSxFQUN4QzdPLEtBQU02TyxFQUFXLFNBQVUsTUFBTSxFQUNqQytCLFlBQWEvQixFQUFXLFNBQVUsWUFBWSxFQUM5Q2dDLElBQUtoQyxFQUFXLFFBQVMsaUNBQWlDLEVBQzFEdk4sR0FBSXVOLEVBQVcsUUFBUyxpQ0FBaUMsRUFDekRsSSxJQUFLa0ksRUFBVyxRQUFTLEtBQUssRUFDOUJqTCxVQUFXaUwsRUFBVyxRQUFTLFdBQVcsRUFDMUNucEMsTUFBT21wQyxFQUFXLFFBQVMsUUFBUSxFQUNuQ2lDLGdCQUFpQmpDLEVBQVcsUUFBUyxtQ0FBbUMsRUFDeEVrQyxLQUFNbEMsRUFBVyxRQUFTLE9BQU8sRUFDakNtQyxhQUFjbkMsRUFBVyxRQUFTLGdCQUFnQixFQUNsRG9DLFVBQVdwQyxFQUFXLE1BQU8saUJBQWlCLEVBQzlDcUMsY0FBZXJDLEVBQVcsUUFBUyxhQUFhLEVBQ2hEc0MscUJBQXNCdEMsRUFBVyxRQUFTLHNDQUFzQyxFQUNoRnVDLGNBQWV2QyxFQUFXLFFBQVMsZUFBZSxFQUNsRHdDLG9CQUFxQnhDLEVBQVcsUUFBUyxnQkFBZ0IsRUFDekRqRSxPQUFRaUUsRUFBVyxRQUFTLGdDQUFnQyxFQUM1RHlDLE1BQU96QyxFQUFXLFdBQVksU0FBUyxFQUN2Q3RuRSxLQUFNc25FLEVBQVcsUUFBUyxnQkFBZ0IsRUFDMUNwQixJQUFLb0IsRUFBVyxXQUFZLGNBQWMsRUFDMUMwQyxnQkFBaUIxQyxFQUFXLFFBQVMsNEJBQTRCLEVBQ2pFckwsUUFBU3FMLEVBQVcsV0FBWSxjQUFjLEVBQzlDMkMsaUJBQWtCM0MsRUFBVyxTQUFVLHFCQUFxQixFQUM1RDRDLG1CQUFvQjVDLEVBQVcsU0FBVSxrQkFBa0IsRUFDM0Q2QyxnQkFBaUI3QyxFQUFXLFFBQVMsZUFBZSxFQUNwRGpILElBQUtpSCxFQUFXLFFBQVMsS0FBSyxFQUM5QjhDLGFBQWM5QyxFQUFXLFdBQVksOEJBQThCLEVBQ25FL0csU0FBVStHLEVBQVcsUUFBUyxVQUFVLEVBQ3hDaEwsV0FBWWdMLEVBQVcsU0FBVSxZQUFZLEVBQzdDK0MsUUFBUy9DLEVBQVcsUUFBUyxPQUFPLEVBQ3BDcEwsS0FBTW9MLEVBQVcsUUFBUyxhQUFhLEVBQ3ZDZ0QsWUFBYWhELEVBQVcsU0FBVSxXQUFXLEVBQzdDbkosUUFBU21KLEVBQVcsUUFBUyxTQUFTLEVBQ3RDaUQsR0FBSWpELEVBQVcsU0FBVSxFQUFFLEVBQzNCM0csUUFBUzJHLEVBQVcsUUFBUyxTQUFTLEVBQ3RDa0QsZUFBZ0JsRCxFQUFXLFFBQVMsY0FBYyxFQUNsRG1ELFdBQVluRCxFQUFXLFFBQVMsVUFBVSxFQUMxQ29ELGNBQWVwRCxFQUFXLFFBQVMsYUFBYSxFQUNoRHFELGVBQWdCckQsRUFBVyxRQUFTLG1CQUFtQixFQUN2RHNELGNBQWV0RCxFQUFXLE1BQU8sYUFBYSxFQUM5Q3VELE9BQVF2RCxFQUFXLFFBQVMsU0FBUyxFQUNyQ25HLE1BQU9tRyxFQUFXLFFBQVMsT0FBTyxFQUNsQ2xHLElBQUtrRyxFQUFXLFNBQVUsS0FBSyxFQUMvQndELE9BQVF4RCxFQUFXLFVBQVcsU0FBUyxFQUN2Q2pHLEtBQU1pRyxFQUFXLFFBQVMsTUFBTSxFQUNoQ3lELE9BQVF6RCxFQUFXLFFBQVMsYUFBYSxFQUN6Q2hHLElBQUtnRyxFQUFXLFFBQVMsS0FBSyxFQUM5QjdOLE9BQVE2TixFQUFXLFFBQVMsU0FBUyxFQUNyQzBELGVBQWdCMUQsRUFBVyxRQUFTLGFBQWEsRUFDakQyRCxRQUFTM0QsRUFBVyxRQUFTLGFBQWEsQ0FDOUMsRUNsSmE0RCxJRHFKYjNELEVBQVM5aEUsRUFBSThoRSxFQUFTOU4sT0FDdEI4TixFQUFTN3VFLEVBQUk2dUUsRUFBUzhDLFFBQ3RCOUMsRUFBU3ZsRSxFQUFJdWxFLEVBQVNueUUsSUFDdEJteUUsRUFBUzdtRSxFQUFJNm1FLEVBQVNwcEMsTUFDdEJvcEMsRUFBUzNNLEVBQUkyTSxFQUFTckksU0FDdEJxSSxFQUFTeDVDLEVBQUl3NUMsRUFBU2xHLEtBQ3RCa0csRUFBUzRELEVBQUk1RCxFQUFTMEQsUUFDdEIxRCxFQUFTNWlFLEVBQUk0aUUsRUFBUyxjQUN0QkEsRUFBUzdtRSxFQUFJNm1FLEVBQVNwcEMsTUFDdEJvcEMsRUFBU2p4RCxFQUFJaXhELEVBQVNuRyxJQUN0Qm1HLEVBQVMzd0UsRUFBSTJ3RSxFQUFTOEIsWUFDdEI5QixFQUFTcHdFLEVBQUlvd0UsRUFBU2xFLE9BQ3RCa0UsRUFBU3hsRSxFQUFJd2xFLEVBQVNhLFNDaktNcGtELEdBQ3hCLENBQUMsR0FBR0EsR0FBVS9pQixPQUFPLENBQUNoRyxFQUFHbXdFLEtBQUE1MEUsR0FBRSxDQUFDcUssRUFBS25CLEdBQUkwckUsRUFBQSxPQUFBQyxFQUFBQSxFQUFBLEdBQVdwd0UsQ0FBRyxFQUFBLEdBQUEsRUFBRzRGLEdBQU1uQixDQUFHLENBQUEsQ0FBQSxFQUFLLEVBQUUsR0FFcEU0ckUsR0FBcUNBLENBQUNDLEVBQWtCQyxFQUF1QkMsS0FDM0VwdkUsRUFBT2t2RSxFQUFTOXlFLE1BQU0reUUsQ0FBYSxFQUV6QyxPQUFPTixHQUNIN3VFLEVBQUt0RyxJQUFLMmUsSUFDTixHQUFNLENBQUN2TSxFQUFHMUMsR0FBS2lQLEVBQUtqYyxNQUFNZ3pFLEVBQWdCLENBQUMsRUFDM0MsTUFBTyxDQUFDdGpFLEVBQUcsVUFBVXJSLEtBQUt3RixPQUFPbUosQ0FBQyxDQUFDLEVBQUltZCxTQUFTbmQsRUFBRyxFQUFFLEVBQUlBLEVBQzdELENBQUMsQ0FDTCxDQUNKLEVBRWFpbUUsR0FBZWhzRSxHQUNULFVBQWYsT0FBT0EsR0FBZ0MsTUFBWEEsRUFBSSxJQUF5QixNQUFYQSxFQUFJLElBQWVBLEVBQUlBLEVBQUl2SixPQUFTLEtBQU91SixFQUFJLEdBRXZGQSxFQURBQSxFQUFJc0ssVUFBVSxFQUFHdEssRUFBSXZKLE9BQVMsQ0FBQyxFQU01QncxRSxHQUFrQkEsQ0FBQ3ZXLEVBQWtCejVELEtBQzlDLElBMEVVNHZFLEVBMUVWLE1BQXFCLFVBQWpCblcsRUFBUWhxRCxLQUNBLENBQ0o1UyxLQUFNNDhELEVBQVE1OEQsS0FFZG1ELE1BQU9sRyxNQUFNQyxRQUFRaUcsQ0FBSyxFQUFJQSxFQUFRLENBQUNXLE9BQU9YLENBQUssRUFDdEQsRUFHZ0IsYUFBakJ5NUQsRUFBUWhxRCxNQUNGZSxFQUFjN1AsT0FBT1gsQ0FBSyxHQUNmbUYsTUFBTSxvQ0FBb0MsRUFPbkQsQ0FDSnRJLEtBQU0sZUFDTm1ELE1BQU93USxDQUNWLEVBVFcsQ0FDSjNULEtBQU0sV0FDTm1ELE1BQU8sRUFBR3dRLEdBQWMsRUFBRyxDQUM5QixFQVNZLFdBQWpCaXBELEVBQVFocUQsS0FDQSxDQUNKNVMsS0FBTTQ4RCxFQUFRNThELEtBQ2RtRCxNQUFpQixTQUFWQSxHQUE4QixDQUFBLElBQVZBLENBQzlCLEVBR2dCLFNBQWpCeTVELEVBQVFocUQsS0FDQSxDQUNKNVMsS0FBTSxTQUNObUQsTUFBTyxDQUNId25FLFVBQVcsQ0FDUEksYUFBYyxDQUNWbEYsUUFBUyxDQUNMLENBQ0lrQixPQUFRLFNBQ1J0M0QsTUFBaUIsUUFBVnRNLEVBQWtCLE1BQVFpbkIsU0FBU2puQixFQUFPLEVBQUUsRUFDbkRzb0UsYUFBYyxDQUFDLE1BQ2xCLEVBRVQsQ0FDSixDQUNKLENBQ0gsRUFHZ0IsU0FBakI3TyxFQUFRaHFELE1BQ08zVixNQUFNQyxRQUFRaUcsQ0FBSyxFQUFJQSxFQUFRLENBQUNBLElBRWpDNUYsSUFBSzYxRSxJQUNmLEdBQU0sQ0FBQ3pqRSxLQUFNMUMsR0FBS25KLE9BQU9zdkUsQ0FBTSxFQUFFbnpFLE1BQU0sR0FBRyxFQUMxQyxNQUFRLENBQ0pELEtBQU00OEQsRUFBUTU4RCxLQUNkbUQsTUFBTyxDQUFDOEosRUFBRXRQLE9BQU02RCxHQUFBQSxPQUFNbU8sRUFBQ25PLEdBQUFBLEVBQUFBLE9BQUkweEUsR0FBWWptRSxFQUFFclAsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFLK1IsRUFDM0QsQ0FDTCxDQUFDLEVBR2dCLGFBQWpCaXRELEVBQVFocUQsTUFDTzNWLE1BQU1DLFFBQVFpRyxDQUFLLEVBQUlBLEVBQVEsQ0FBQ0EsSUFFakM1RixJQUNUNjFFLElBQ0ksQ0FDR3B6RSxLQUFNNDhELEVBQVE1OEQsS0FDZG1ELE1BQU8sQ0FBQzJ2RSxHQUFtQ2h2RSxPQUFPc3ZFLENBQU0sRUFBRyxJQUFLLEdBQUcsRUFDdEUsRUFDVCxFQUdpQixRQUFqQnhXLEVBQVFocUQsTUFDRm1nRSxFQUFXOTFFLE1BQU1DLFFBQVFpRyxDQUFLLEVBQUlBLEVBQU12RixLQUFLLEdBQUcsRUFBSXVGLEVBRWxELENBQ0puRCxLQUFNNDhELEVBQVE1OEQsS0FDZG1ELE1BQU8ydkUsR0FBbUNodkUsT0FBT2l2RSxDQUFRLEVBQUcsSUFBSyxHQUFHLENBQ3ZFLEdBR2dCLDhCQUFqQm5XLEVBQVFocUQsTUFDTzNWLE1BQU1DLFFBQVFpRyxDQUFLLEVBQUlBLEVBQVEsQ0FBQ0EsSUFFakM1RixJQUFLNjFFLElBQ2YsR0FBTSxDQUFDcHpFLEVBQU1za0UsR0FBVXhnRSxPQUFPc3ZFLENBQU0sRUFBRW56RSxNQUFNLEdBQUcsRUFFL0MsTUFBUSxDQUNKRCxLQUFNNDhELEVBQVE1OEQsS0FDZG1ELE1BQU8sQ0FDSCxDQUNJbkQsS0FBQUEsRUFDQXNrRSxPQUFRbDZDLFNBQVNrNkMsRUFBUSxFQUFFLENBQzlCLEVBRVIsQ0FDTCxDQUFDLEVBR2dCLDRCQUFqQjFILEVBQVFocUQsTUFDTzNWLE1BQU1DLFFBQVFpRyxDQUFLLEVBQUlBLEVBQVEsQ0FBQ0EsSUFFakM1RixJQUFLNjFFLElBQ2YsR0FBTSxDQUFDcHpFLEVBQU02c0UsR0FBUS9vRSxPQUFPc3ZFLENBQU0sRUFBRW56RSxNQUFNLEdBQUcsRUFFN0MsTUFBUSxDQUNKRCxLQUFNNDhELEVBQVE1OEQsS0FDZG1ELE1BQU8sQ0FDSCxDQUNJbkQsS0FBQUEsRUFDQTZzRSxLQUFNLFVBQVV2dUUsS0FBS3dGLE9BQU8rb0UsQ0FBSSxDQUFDLEVBQUl6aUQsU0FBU3lpRCxFQUFNLEVBQUUsRUFBSUEsQ0FDN0QsRUFFUixDQUNMLENBQUMsRUFHZ0IsWUFBakJqUSxFQUFRaHFELE1BQ08zVixNQUFNQyxRQUFRaUcsQ0FBSyxFQUFJQSxFQUFRLENBQUNBLElBRWpDNUYsSUFBSzYxRSxJQUNmLElBT1doRyxFQUFNRCxFQVBYLENBQUNrRyxFQUFXQyxHQUFjeHZFLE9BQU9zdkUsQ0FBTSxFQUFFbnpFLE1BQU0sR0FBRyxFQU14RCxPQUxBc3pFLEdBQ0lGLEdBQWFDLEVBQVUsR0FBQTl4RSxPQUNwQm83RCxFQUFRaHFELEtBQUksK0RBQUEsQ0FDbkIsRUFFSTBnRSxFQUFXamdFLFNBQVMsR0FBRyxHQUNqQixDQUFDKzVELEVBQU1ELEdBQVFtRyxFQUFXcnpFLE1BQU0sR0FBRyxFQUN6Q3N6RSxHQUFVbkcsR0FBUUQsRUFBSSxHQUFBM3JFLE9BQUtvN0QsRUFBUWhxRCxLQUFJLCtEQUFBLENBQStELEVBRTlGLENBQ0o1UyxLQUFJLEdBQUF3QixPQUFLbzdELEVBQVE1OEQsS0FBSXdCLEdBQUFBLEVBQUFBLE9BQUk2eEUsQ0FBUyxFQUNsQ2x3RSxNQUFPLENBQ0hpcUUsS0FBTWhqRCxTQUFTZ2pELEVBQU0sRUFBRSxFQUN2QkQsS0FBTS9pRCxTQUFTK2lELEVBQU0sRUFBRSxDQUMzQixDQUNILEdBR0csQ0FDSm50RSxLQUFJLEdBQUF3QixPQUFLbzdELEVBQVE1OEQsS0FBSXdCLEdBQUFBLEVBQUFBLE9BQUk2eEUsQ0FBUyxFQUNsQ2x3RSxNQUFPaW5CLFNBQVNrcEQsRUFBWSxFQUFFLENBQ2pDLENBQ0wsQ0FBQyxFQUdnQixhQUFqQjFXLEVBQVFocUQsS0FDQSxDQUNKNVMsS0FBTTQ4RCxFQUFRNThELEtBQ2RtRCxNQUFPaW5CLFNBQVNqbkIsRUFBTyxFQUFFLENBQzVCLEVBR2dCLGVBQWpCeTVELEVBQVFocUQsS0FDQSxDQUNKNVMsS0FBTTQ4RCxFQUFRNThELEtBQ2RtRCxNQUFPd21CLFdBQVd4bUIsQ0FBSyxDQUMxQixFQUdHLENBQ0puRCxLQUFNNDhELEVBQVE1OEQsS0FDZG1ELE1BQU9XLE9BQU9YLENBQUssQ0FDdEIsQ0FDTCxFQUthcXdFLEdBQXVCQSxDQUVoQ0MsRUFFQXR3RSxLQUdNeTVELEVBQVVtUyxFQUFTMEUsR0FFekIsT0FBSzdXLEVBSWdCLEtBQWpCQSxFQUFRNThELEtBRUEsR0FLUyxXQUFqQjQ4RCxFQUFRaHFELE1BQXNCelAsRUFLM0Jnd0UsR0FBZ0J2VyxFQUFTejVELENBQUssRUFIMUIsS0FaQSxJQWdCZixFQUVhdXdFLEdBQWlCQSxDQUFDQyxFQUFxQmxRLElBQzNDa1EsRUFBTTN6RSxLQUdKMnpFLEVBQU0zekUsS0FDUnhCLFFBQVEsWUFBYWlsRSxFQUFRLzdELFNBQVEsQ0FBRSxFQUN2Q3pILE1BQU0sR0FBRyxFQUNUMnpFLFlBQVksQ0FBQ2xyRSxFQUFNbXJFLEtBQWMsRUFBR0EsR0FBV25yRSxDQUFNLEdBQUdpckUsRUFBTXh3RSxLQUFLLEVBTmhELFlDcE90QjJ3RSxHQUFrQm5OLElBQ3BCLEdBQWMsT0FBVkEsR0FBNEIsS0FBVkEsR0FBaUMsS0FBQSxJQUFWQSxFQUF1QixNQUFPLGdCQUMzRTNvRSxJQUFJd0osRUFBT20vRCxFQUFNdHpELFNBQVMsR0FBRyxFQUFJc3pELEVBQU0xbUUsTUFBTSxHQUFHLEVBQUUxQixNQUFNLENBQUUsQ0FBQSxFQUFFLEdBQUtvb0UsRUFHakUsT0FGQW4vRCxFQUFPQSxFQUFLNkwsU0FBUyxHQUFHLEVBQUk3TCxFQUFLdkgsTUFBTSxHQUFHLEVBQUUsR0FBS3VILENBR3JELEVBSU11c0UsR0FBcUJBLENBQUNoM0UsRUFBZWkzRSxLQUE2QyxJQVU5RUMsRUFUaUJsM0UsRUFDbEJ5QixRQUFRLGdCQUFpQixFQUFFLEVBQzNCQSxRQUFRLGVBQWlCRyxHQUFNQSxFQUFFSCxRQUFRLE1BQU8sR0FBRyxDQUFDLEVBQ3BEQSxRQUFRLFFBQVMsRUFBRSxFQUNuQkEsUUFBUSxTQUFVLEdBQUcsRUFDckJmLEtBQUksRUFDSmUsUUFBUSxZQUFhLFFBQVEsRUFDN0JBLFFBQVEsVUFBVyxHQUFHLEVBQ3RCQSxRQUFRLFNBQVUsRUFBRSxFQUNpQkEsUUFDdEMsdUVBQ0EsRUFDSixFQUNNMDFFLEVBR0ZuMUMsR0FBT2sxQyxFQUFvQixDQUMzQjdtRSxjQUFlLENBQ1hZLHFCQUFzQixDQUFBLEVBQ3RCVix1QkFBd0IsQ0FBQSxFQUN4QkcsbUJBQW9CLENBQUEsQ0FDdkIsRUFDRDNDLFFBQVMsQ0FDTCxJQUNBLGNBQ0EsSUFDQSxNQUNBLElBQ0EsU0FDQSxLQUNBLE9BQ0EsT0FDQSxhQUNBLElBQ0EsY0FDQSxpQkFDQSxtQkFDQSxZQUNBLFlBRVIsQ0FBQyxFQUNVODVELEVBQTBCc1AsRUFBSixFQUFWQyxFQUFTQyxFQUFLRixFQUFXRyxFQUFBLEVBQ2hELElBQU1DLEVBQWtCcm5FLEdBQ3BCaW1FLEdBQVlwdkUsT0FBT21KLENBQUMsRUFBRXhQLEtBQU0sQ0FBQSxFQUFFZSxRQUFRLGVBQWlCRyxHQUFNQSxFQUFFSCxRQUFRLEtBQU0sR0FBRyxDQUFDLEVBQy9FbXhDLEVBQVN2eUMsT0FBT3MxRSxZQUNsQnQxRSxPQUFPbWMsUUFBUTQ2RCxDQUFTLEVBQUU1MkUsSUFBSXExRSxJQUFzQzUwRSxHQUFyQyxDQUFDcUssRUFBS2xGLEdBQTBCeXZFLEVBQzNELE9BQUkzMUUsTUFBTUMsUUFBUWlHLENBQUssRUFDWixDQUFDa0YsRUFBSTVLLE9BQVEwRixFQUFNNUYsSUFBSzBQLEdBQW9CLFVBQWIsT0FBT0EsRUFBaUJxbkUsRUFBZXJuRSxDQUFDLEVBQUlBLENBQUUsR0FFakYsQ0FBQzVFLEVBQUk1SyxLQUFJLEVBQXFCLFVBQWpCLE9BQU8wRixFQUFxQm14RSxFQUFlbnhFLENBQUssRUFBSUEsRUFDNUUsQ0FBQyxDQUNMLEVBRUFuRixJQUFJMmtFLEVBQVUsR0FHZCxHQUFNLENBQUUrSyxJQUFLNkcsRUFBUTlRLFFBQVMrUSxDQUFXLEVBQUk3a0MsRUFDN0MsSUFBTTh6QixFQUFVOFEsR0FBVUMsR0FBYyxVQUVsQ0MsRUFBaUIsR0FFdkJyM0UsT0FBT21jLFFBQVFvMkIsQ0FBTSxFQUFFMW9DLFFBQVF5dEUsSUFBc0MxMkUsR0FBckMsQ0FBQ3FLLEVBQUtsRixHQUEwQnV4RSxFQUd0RGh6RSxFQUFTOHhFLEdBQXFCbnJFLEVBQUtsRixDQUFLLEVBQzFDekIsR0FDZ0J6RSxNQUFNQyxRQUFRd0UsQ0FBTSxFQUFJQSxFQUFTLENBQUNBLElBQzFDdUYsUUFBUzBzRSxJQUVQMXlELEVBQU95eUQsR0FBZUMsRUFBT2xRLENBQU8sRUFDMUNkLEVBQVV6dUQsR0FBVXl1RCxFQUFTMWhELENBQUksQ0FDckMsQ0FBQyxHQUVLMHpELEVBQXNCLElBQWZ0c0UsRUFBSTFLLE9BQWUsSUFBTSxLQUNoQ2kzRSxFQUF3QixDQUFBLElBQVZ6eEUsRUFBaUIsR0FBRTNCLElBQUFBLE9BQU8yQixFQUFNdUUsVUFBVSxFQUM5RCtzRSxFQUFlbHpFLEtBQUlDLEtBQUFBLE9BQU1tekUsQ0FBSSxFQUFBbnpFLE9BQUc2RyxDQUFHLEVBQUE3RyxPQUFHb3pFLENBQVcsQ0FBRSxFQUUzRCxDQUFDLEVBRUQsSUFBTWpPLEVBQVF1TSxVQUFXMkIsRUFBQ2pRLEVBQVEsSUFBUmlRLEtBQUFBLEVBQUFBLEVBQVlwM0UsS0FBSSxDQUFFLEVBRzVDLEdBREFrbEUsRUFBUWdFLE1BQVFBLEVBQ0ssRUFBakIvQixFQUFRam5FLE9BQVksQ0FDcEJLLElBQUk4MkUsRUFBVyxFQUVmLElBREEsSUFBTUMsRUFBbUIsR0FDbEJELEVBQVdsUSxFQUFRam5FLFFBQ3RCbzNFLEVBQWlCeHpFLEtBQUtxakUsRUFBUWtRLEVBQVMsRUFDdkNBLEdBQVksRUFHaEJuUyxFQUFRaUMsUUFBVW1RLEVBQWlCbjNFLEtBQUssR0FBRyxDQUMvQyxDQUc2QixTQUF6QitrRSxFQUFRMkUsY0FFUixPQUFPM0UsRUFBUVIsTUFHbkIsSUFBdUI5dEQsRUFPakIyZ0UsRUFBZSxHQUVyQixHQUFJclMsRUFBUVYsUUFFUixJQUFLamtFLElBQUlpM0UsRUFBYyxFQUFHQSxFQUFjdFMsRUFBUVYsUUFBUXRrRSxPQUFRczNFLEdBQWUsRUFBRyxDQUM5RWozRSxJQUFJcVcsRUFLQUEsRUFId0MsVUFBeEMsT0FBT3N1RCxFQUFRVixRQUFRZ1QsR0FFSnRTLEVBQVFWLFFBQVFnVCxHQUFhaDFFLE1BQU0sR0FBRyxFQUFFLEdBSXRDMGlFLEVBQVFWLFFBQVFnVCxHQUFhNWdFLE9BbkIxREEsRUFEbUJBLEVBdUJHQSxJQXJCckJBLEVBQU9oQixTQUFTLEdBQUcsR0FDbkJnQixFQUFPaEIsU0FBUyxJQUFJLEdBQ3BCZ0IsRUFBT2hCLFNBQVMsR0FBRyxHQUNuQmdCLEVBQU9oQixTQUFTLEdBQUcsR0FDbkJnQixFQUFPaEIsU0FBUyxHQUFHLEdBa0JaMmhFLEVBQWF6ekUsS0FBSyxDQUFDOFMsRUFBUSxDQUFFMnNELFNBQVUsQ0FBRXg1RCxLQUFNNk0sQ0FBTyxDQUFFLEVBQUUsQ0FFbEUsQ0FJSixHQUFJc3VELEVBQVFILFNBR1JwbEUsT0FBTzJKLEtBQUs0N0QsRUFBUUgsUUFBUSxFQUFFdjdELFFBQVNpdUUsSUFGaEJ6eUUsSUFBQUEsR0FBQUEsRUFJRGtnRSxFQUFRSCxTQUFTMFMsS0FKZ0MsSUFBNUI5M0UsT0FBTzJKLEtBQUt0RSxDQUFHLEVBQUU5RSxRQUFnQjhFLEVBQUlJLGNBQWdCekYsU0FNeEZ1bEUsRUFBUUgsU0FBUzBTLEdBQXNCLEtBRS9DLENBQUMsRUFFRzkzRSxPQUFPMmUsT0FBTzRtRCxFQUFRSCxRQUFRLEVBQUV4akQsTUFBTy9SLEdBQU0sQ0FBQ0EsQ0FBQyxJQUUvQzAxRCxFQUFRSCxTQUFXcGxFLE9BQU8ySixLQUFLNDdELEVBQVFILFFBQVEsR0FJdkQsSUFBTTJTLEVBQWdCLEdBRXRCLEdBQUl4UyxFQUFRSCxTQUVSLEdBQUl2bEUsTUFBTUMsUUFBUXlsRSxFQUFRSCxRQUFRLEVBRTlCLElBQUt4a0UsSUFBSW8zRSxFQUFlLEVBQUdBLEVBQWV6UyxFQUFRSCxTQUFTN2tFLE9BQVF5M0UsR0FBZ0IsRUFDL0VELEVBQWM1ekUsS0FBSyxDQUVmb2hFLEVBQVFILFNBQVM0UyxHQUVqQixDQUFFcFUsU0FBVSxDQUFBLEVBQU14NUQsS0FBTW03RCxFQUFRSCxTQUFTNFMsRUFBYyxFQUMxRCxPQUlMaDRFLE9BQU8ySixLQUFLNDdELEVBQVFILFFBQVEsRUFBRXY3RCxRQUFTaXVFLElBRW5DQyxFQUFjNXpFLEtBQUssQ0FBQzJ6RSxFQUFvQixDQUFFbFUsU0FBVSxDQUFBLEVBQU14NUQsS0FBTTB0RSxDQUFtQixFQUFFLENBQ3pGLENBQUMsRUFJSEcsRUFBY3ZCLEdBQWVuTixDQUFLLEVBR3hDM29FLElBQUkwRCxFQUNKLElBQU00ekUsRUFBbUIsQ0FDckIxOEQsUUFBUyxJQUNUb3BELFNBQVUsRUFDTHFULEdBQWMxUyxDQUNuQixDQUNILEVBQ0s0UyxTQUFlQyxFQUFHQyxHQUFjL0csVUFBVXNGLE1BQUFBLEVBQUFBLEVBQXVCLEVBQUUsR0FBQ3dCLEVBQUksR0FDOUU5ekUsRUFBU3dTLEdBQVVxaEUsRUFBaUJELENBQWdCLEVBQ3pCLEVBQXZCSCxFQUFjeDNFLFNBQ1I2a0UsRUFBVyxDQUFFQSxTQUFVa1EsR0FBWXlDLENBQWEsQ0FBRyxFQUN6RHp6RSxFQUFTd1MsR0FBVXhTLEVBQVE4Z0UsQ0FBUSxHQUViLEVBQXRCd1MsRUFBYXIzRSxTQUNQc2tFLEVBQVUsQ0FBRUEsUUFBU3lRLEdBQVlzQyxDQUFZLENBQUcsRUFDdER0ekUsRUFBU3dTLEdBQVV4UyxFQUFRdWdFLENBQU8sR0FHdENqa0UsSUFBSTAzRSxFQUF5QixHQUk3QixPQUg0QixFQUF4QmpCLEVBQWU5MkUsU0FDZiszRSw0QkFBc0JsMEUsT0FBNkI2ekUsRUFBVzd6RSxLQUFBQSxFQUFBQSxPQUFNaXpFLEVBQWU3MkUsS0FBSyxJQUFJLEVBQUssSUFBQSxHQUU3RixDQUNKKzNFLFlBQWFqMEUsRUFDYmcwRSx1QkFBQUEsQ0FDSCxDQUNMLFNBRWUsU0FDWDM0RSxHQUlVaUIsSUFIVmcyRSxFQUEyQixFQUFBajBFLFVBQUFwQyxRQUFBeUwsS0FBQUEsSUFBQXJKLFVBQUEsR0FBQUEsVUFBQSxHQUFHLEdBQzlCNjFFLEVBQXdDLEVBQUE3MUUsVUFBQXBDLFFBQUF5TCxLQUFBQSxJQUFBckosVUFBQSxHQUFBQSxVQUFBLEdBQUcsU0FDM0N3ZixFQUFjLEVBQUF4ZixVQUFBcEMsUUFBQXlMLEtBQUFBLElBQUFySixVQUFBLEdBQUFBLFVBQUEsR0FBRyxFQUVqQixJQUFNODFFLEVBQStCLEdBQ2pDbjBFLEVBQVMsR0FDUG8wRSxFQUFpQi80RSxFQUFNa0QsTUFBTSwyQkFBMkIsRUFDOURqQyxJQUFJKzNFLEVBQStCL0IsRUF1Qm5DLEdBdEJJQSxJQUN1QixRQUFuQjRCLEVBQ0FHLEVBQStCTixHQUFjdEgsb0JBQW9CNEgsRUFBOEIsQ0FBRXgyRCxPQUFBQSxDQUFPLENBQUMsRUFDakYsV0FBbkJxMkQsSUFDTEcsRUFBK0JOLEdBQWNySCxvQkFBb0IySCxFQUE4QixDQUFFeDJELE9BQUFBLENBQU8sQ0FBQyxJQUVqSHUyRCxFQUFlN3VFLFFBQVMrdUUsSUFDcEIsSUFNUUwsRUFBYUQsRUFOZjlRLEVBQVU5Z0UsT0FBT2t5RSxDQUFhLEVBQy9CcFIsSUFDQUEsRUFBUXQ4RCxNQUFNLG1EQUFtRCxHQUloRSxDQUFFcXRFLFlBQUFBLEVBQWFELHVCQUFBQSxDQUF3QixFQUFHM0IsR0FBa0J2eUUsVUFBQUEsT0FDcERvakUsQ0FBTyxFQUNqQm1SLENBQ0osRUFDSUwsR0FBd0JHLEVBQTZCdDBFLEtBQUttMEUsQ0FBc0IsRUFFcEZoMEUsRUFBU3dTLEdBQVV4UyxFQUFRaTBFLENBQVcsR0FUbENFLEVBQTZCdDBFLEtBQUksc0JBQUFDLE9BQXVCb2pFLE9BQVcsRUFVM0UsQ0FBQyxFQUVHLENBQUNsakUsRUFBT3NnRSxTQUNSLE1BQU0sSUFBSWlVLFlBQVksbUZBQW1GLEVBRTdHajRFLElBQUlrNEUsRUFBbUJULEdBQWM5RyxjQUFjanRFLEVBQVEsQ0FBRTZkLE9BQUFBLENBQVEsQ0FBQSxFQUFFOWhCLEtBQU0sRUFDN0UsR0FBdUIsUUFBbkJtNEUsRUFBMEJNLEVBQW1CVCxHQUFjdEgsb0JBQW9CK0gsRUFBa0IsQ0FBRTMyRCxPQUFBQSxDQUFPLENBQUMsT0FDMUcsR0FBdUIsV0FBbkJxMkQsRUFDTE0sRUFBbUJULEdBQWNySCxvQkFBb0I4SCxFQUFrQixDQUFFMzJELE9BQUFBLENBQVEsQ0FBQSxPQUNoRixHQUF1QixRQUFuQnEyRCxFQUEwQixNQUFNLElBQUkvd0UsTUFBS3JELDJCQUFBQSxPQUE0Qm8wRSxNQUFpQixFQUUvRixPQUFPQyxFQUE2Qmo0RSxLQUFLLElBQUksRUFBSXM0RSxDQUNwRCIsInhfZ29vZ2xlX2lnbm9yZUxpc3QiOlswLDEsMiwzLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5LDIwLDIxLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDI5LDMwLDMxLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDYzLDY0LDY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0LDg1LDg2LDg3LDg4LDg5LDkwLDkxLDkyLDkzLDk0LDk1LDk2LDk3LDk4LDk5LDEwMCwxMDEsMTAyLDEwMywxMDQsMTA1LDEwNiwxMDcsMTA4LDEwOSwxMTAsMTExLDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzLDEyNCwxMjUsMTI2LDEyNywxMjgsMTI5LDEzMCwxMzEsMTMyLDEzMywxMzQsMTM1LDEzNiwxMzcsMTM4LDEzOSwxNDAsMTQxLDE0MiwxNDMsMTQ0LDE0NSwxNDYsMTQ3LDE0OCwxNDksMTUwLDE1MV19